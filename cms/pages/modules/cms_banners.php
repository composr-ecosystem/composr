<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    banners
 */

require_code('crud_module');

/**
 * Module page class.
 */
class Module_cms_banners extends Standard_crud_module
{
    protected $lang_type = 'BANNER';
    protected $view_entry_point = '_SEARCH:banners:view:source=_ID';
    protected $user_facing = true;
    protected $permissions_require = 'mid';
    protected $select_name = 'NAME';
    protected $select_name_description = 'DESCRIPTION_BANNER_NAME';
    protected $upload = 'image';
    protected $non_integer_id = true;
    protected $permission_module = 'banners';
    protected $menu_label = 'BANNERS';
    protected $array_key = 'name';

    public $title;

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('banners')) {
            return null;
        }

        $this->cat_crud_module = class_exists('Mx_cms_banners_cat') ? new Mx_cms_banners_cat() : new Module_cms_banners_cat();

        if ($member_id === null) {
            $member_id = get_member();
        }

        $ret = [
            'browse' => ['MANAGE_BANNERS', 'menu/cms/banners'],
        ];

        $ret += parent::get_entry_points();

        if (has_privilege($member_id, 'mass_import')) {
            $ret += [
                'predefined_content' => ['PREDEFINED_CONTENT', 'admin/import'],
            ];
        }

        return $ret;
    }

    /**
     * Find privileges defined as overridable by this module.
     *
     * @return array A map of privileges that are overridable; privilege to 0 or 1. 0 means "not category overridable". 1 means "category overridable".
     */
    public function get_privilege_overrides() : array
    {
        require_lang('banners');
        return ['submit_cat_highrange_content' => [0, 'ADD_BANNER_TYPE'], 'edit_cat_highrange_content' => [0, 'EDIT_BANNER_TYPE'], 'delete_cat_highrange_content' => [0, 'DELETE_BANNER_TYPE'], 'submit_midrange_content' => [0, 'ADD_BANNER'], 'bypass_validation_midrange_content' => [0, 'BYPASS_VALIDATION_BANNER'], 'edit_own_midrange_content' => [0, 'EDIT_OWN_BANNER'], 'edit_midrange_content' => [0, 'EDIT_BANNER'], 'delete_own_midrange_content' => [0, 'DELETE_OWN_BANNER'], 'delete_midrange_content' => [0, 'DELETE_BANNER']];
    }

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @param  boolean $top_level Whether this is running at the top level, prior to having sub-objects called
     * @param  ?ID_TEXT $type The screen type to consider for metadata purposes (null: read from environment)
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run(bool $top_level = true, ?string $type = null) : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('banners', $error_msg)) {
            return $error_msg;
        }

        require_lang('banners');

        $this->cat_crud_module = class_exists('Mx_cms_banners_cat') ? new Mx_cms_banners_cat() : new Module_cms_banners_cat();

        $type = get_param_string('type', 'browse');

        inform_non_canonical_parameter('b_type');

        set_helper_panel_tutorial('tut_banners');
        set_helper_panel_text(comcode_lang_string('DOC_BANNERS'));

        if ((has_privilege(get_member(), 'banner_free')) && (get_option('admin_banners') == '0')) {
            attach_message(do_lang_tempcode('PERMISSION_BANNER_SKIP'), 'notice', true);
        }

        if ($type == 'browse') {
            if (has_actual_page_access(get_member(), 'admin_banners')) {
                $also_url = build_url(['page' => 'admin_banners'], get_module_zone('admin_banners'));
                attach_message(do_lang_tempcode('menus:ALSO_SEE_ADMIN', escape_html($also_url->evaluate())), 'inform', true);
            }
        }

        if ($type == 'predefined_content') {
        }

        if ($type == '_predefined_content') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MANAGE_BANNERS')], ['_SELF:_SELF:predefined_content', do_lang_tempcode('PREDEFINED_CONTENT')]]);
            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        if ($type == 'predefined_content' || $type == '_predefined_content') {
            $this->title = get_screen_title('PREDEFINED_CONTENT');
        }

        return parent::pre_run($top_level);
    }

    /**
     * Standard crud_module run_start.
     *
     * @param  ID_TEXT $type The type of module execution
     * @return Tempcode The output of the run
     */
    public function run_start(string $type) : object
    {
        //if ($GLOBALS['CURRENT_SHARE_USER'] !== null) warn_exit(do_lang_tempcode('SHARED_INSTALL_PROHIBIT'));

        require_code('banners');
        require_code('banners2');

        if ($type == 'browse') {
            return $this->browse();
        }

        if ($type == 'export_spreadsheet') {
            return $this->export_spreadsheet();
        }

        require_javascript('banners');
        $this->js_function_calls[] = 'moduleCmsBannersRunStart';

        if ($type == 'add') {
            $this->js_function_calls[] = 'moduleCmsBannersRunStartAdd';
        }

        if ($type == 'add_category') {
            $this->cat_crud_module->js_function_calls[] = 'moduleCmsBannersRunStartAddCategory';
        }

        if ($type == 'predefined_content') {
            return $this->predefined_content();
        }
        if ($type == '_predefined_content') {
            return $this->_predefined_content();
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for before content management.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('MANAGE_BANNERS'),
            comcode_lang_string('DOC_BANNERS'),
            [
                has_privilege(get_member(), 'submit_cat_highrange_content', 'cms_banners') ? ['admin/add_one_category', ['_SELF', ['type' => 'add_category'], '_SELF'], do_lang('ADD_BANNER_TYPE')] : null,
                has_privilege(get_member(), 'edit_cat_highrange_content', 'cms_banners') ? ['admin/edit_one_category', ['_SELF', ['type' => 'edit_category'], '_SELF'], do_lang('EDIT_BANNER_TYPE')] : null,
                has_privilege(get_member(), 'submit_midrange_content', 'cms_banners') ? ['admin/add', ['_SELF', ['type' => 'add'], '_SELF'], do_lang('ADD_BANNER')] : null,
                has_privilege(get_member(), 'edit_own_midrange_content', 'cms_banners') ? ['admin/edit', ['_SELF', ['type' => 'edit'], '_SELF'], do_lang('EDIT_BANNER')] : null,
                ['admin/export_spreadsheet', ['_SELF', ['type' => 'export_spreadsheet'], '_SELF'], do_lang('EXPORT_SPREADSHEET_BANNERS')],
                has_privilege(get_member(), 'mass_import') ? ['admin/install', ['_SELF', ['type' => 'predefined_content'], '_SELF'], do_lang('PREDEFINED_CONTENT')] : null,
            ],
            do_lang('MANAGE_BANNERS')
        );
    }

    /**
     * Standard crud_module table function.
     *
     * @param  array $url_map Details to go to build_url for link to the next screen
     * @return array A quintet: The choose table, Whether re-ordering is supported from this screen, Search URL, Archive URL, a Filtercode box block
     */
    public function create_selection_list_choose_table(array $url_map) : array
    {
        require_code('templates_results_table');
        require_code('templates_tooltip');
        require_lang('banners');

        $current_ordering = get_param_string('sort', 'b_type ASC', INPUT_FILTER_GET_COMPLEX);
        $sortables = [
            'name' => do_lang_tempcode('CODENAME'),
            'b_type' => do_lang_tempcode('BANNER_TYPE'),
            'deployment_agreement' => do_lang_tempcode('DEPLOYMENT_AGREEMENT'),
            'campaign_remaining' => do_lang_tempcode('HITS_ALLOCATED'),
            'display_likelihood' => do_lang_tempcode('DISPLAY_LIKELIHOOD'),
            'expiry_date' => do_lang_tempcode('EXPIRY_DATE'),
            'add_date' => do_lang_tempcode('ADDED'),
        ];
        if (addon_installed('validation')) {
            $sortables['validated'] = do_lang_tempcode('VALIDATED');
        }
        list($sql_sort, $sort_order, $sortable) = process_sorting_params('banner', $current_ordering);

        // Prepare Filtercode
        require_code('filtercode');
        $active_filters = get_params_filtercode();

        // Build WHERE query from Filtercode
        list($extra_join, $end) = filtercode_to_sql($GLOBALS['SITE_DB'], parse_filtercode($active_filters), 'banner');

        $only_owned = has_privilege(get_member(), 'edit_midrange_content', 'cms_banners') ? null : get_member();
        list($rows, $max_rows) = $this->get_entry_rows(false, $sql_sort, ($only_owned === null) ? [] : ['submitter' => $only_owned], false, implode('', $extra_join), null, $end);

        $has_expiry_dates = false; // Save space by default
        foreach ($rows as $row) {
            if ($row['expiry_date'] !== null) {
                $has_expiry_dates = true;
            }
        }

        $filtercode = [
            'name<name_op><name>',
            'b_type=<b_type>',
            'deployment_agreement=<deployment_agreement>',
            'campaign_remaining<campaign_remaining_op><campaign_remaining>',
            'display_likelihood<display_likelihood_op><display_likelihood>',
        ];
        $filtercode_labels = [
            'name=' . do_lang('CODENAME'),
            'b_type=' . do_lang('BANNER_TYPE'),
            'deployment_agreement=' . do_lang('DEPLOYMENT_AGREEMENT'),
            'campaign_remaining=' . do_lang('HITS_ALLOCATED'),
        ];
        $filtercode_types = [
            'b_type=list',
            'deployment_agreement=list',
        ];
        $hr = [
            do_lang_tempcode('CODENAME'),
            do_lang_tempcode('BANNER_TYPE'),
            do_lang_tempcode('DEPLOYMENT_AGREEMENT'),
            do_lang_tempcode('HITS_ALLOCATED'),
            do_lang_tempcode('_DISPLAY_LIKELIHOOD'),
        ];
        if ($has_expiry_dates) {
            $hr[] = do_lang_tempcode('EXPIRY_DATE');
        }
        $hr[] = do_lang_tempcode('ADDED');
        if (addon_installed('validation')) {
            $hr[] = protect_from_escaping(do_template('COMCODE_ABBR', ['_GUID' => 'b8f1372bcdfb90f5c2fa8bf3329caf5f', 'TITLE' => do_lang_tempcode('VALIDATED'), 'CONTENT' => do_lang_tempcode('VALIDATED_SHORT')]));
        }
        $hr[] = do_lang_tempcode('ACTIONS');
        $header_row = results_header_row($hr, $sortables, 'sort', $sortable . ' ' . $sort_order);

        $result_entries = new Tempcode();

        foreach ($rows as $row) {
            $edit_url = build_url($url_map + ['id' => $row['name']], '_SELF');

            $deployment_agreement = new Tempcode();
            switch ($row['deployment_agreement']) {
                case BANNER_PERMANENT:
                    $deployment_agreement = tooltip(do_lang_tempcode('BANNER_PERMANENT'), strval($row['deployment_agreement']), true);
                    break;
                case BANNER_CAMPAIGN:
                    $deployment_agreement = tooltip(do_lang_tempcode('BANNER_CAMPAIGN'), strval($row['deployment_agreement']), true);
                    break;
                case BANNER_FALLBACK:
                    $deployment_agreement = tooltip(do_lang_tempcode('BANNER_FALLBACK'), strval($row['deployment_agreement']), true);
                    break;
                default:
                    $deployment_agreement = do_lang_tempcode('UNKNOWN');
            }

            $fr = [
                hyperlink(build_url(['page' => 'banners', 'type' => 'view', 'source' => $row['name']], get_module_zone('banners')), do_template('COMCODE_TELETYPE', ['_GUID' => '25c57dd13c0801ad64f5bb8e6c9860f3', 'CONTENT' => escape_html($row['name'])]), false, false),
                ($row['b_type'] == '') ? do_lang('_DEFAULT') : $row['b_type'],
                $deployment_agreement,
                integer_format($row['campaign_remaining']),
                strval($row['display_likelihood']),
            ];
            if ($has_expiry_dates) {
                $fr[] = ($row['expiry_date'] === null) ? protect_from_escaping(do_lang_tempcode('NA_EM')) : make_string_tempcode(get_timezoned_date_time($row['expiry_date']));
            }
            $fr[] = get_timezoned_date($row['add_date']);
            if (addon_installed('validation')) {
                $fr[] = ($row['validated'] == 1) ? do_lang_tempcode('YES') : do_lang_tempcode('NO');
            }
            $fr[] = protect_from_escaping(hyperlink($edit_url, do_lang_tempcode('EDIT'), false, true, $row['name']));

            $result_entries->attach(results_entry($fr, true));
        }

        $filtercode_box = do_block('main_content_filtering', [
            'param' => implode(',', $filtercode),
            'content_type' => 'banner',
            'labels' => implode(',', $filtercode_labels),
            'types' => implode(',', $filtercode_types),
        ]);

        return [
            results_table(do_lang($this->menu_label), get_param_integer('start', 0), 'start', either_param_integer('max', 20), 'max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order),
            false,
            null,
            null,
            $filtercode_box,
        ];
    }

    /**
     * Standard crud_module list function.
     *
     * @return Tempcode The selection list
     */
    public function create_selection_list_entries() : object
    {
        $only_owned = has_privilege(get_member(), 'edit_midrange_content', 'cms_banners') ? null : get_member();
        return create_selection_list_banners(null, $only_owned);
    }

    /**
     * Get Tempcode for an adding form.
     *
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function get_form_fields_for_add()
    {
        return $this->get_form_fields();
    }

    /**
     * Get Tempcode for adding/editing form.
     *
     * @param  ID_TEXT $name The name of the banner (blank: new)
     * @param  URLPATH $image_url The URL to the banner image
     * @param  URLPATH $site_url The URL to the site the banner leads to
     * @param  SHORT_TEXT $caption The caption of the banner
     * @param  LONG_TEXT $direct_code Complete HTML/PHP for the banner
     * @param  LONG_TEXT $notes Any notes associated with the banner
     * @param  integer $display_likelihood The banner's "Display likelihood"
     * @range  1 max
     * @param  ?integer $campaign_remaining The number of hits the banner may have (null: not applicable for this banner type)
     * @range  0 max
     * @param  SHORT_INTEGER $deployment_agreement The type of banner (a BANNER_* constant)
     * @set 0 1 2
     * @param  ?TIME $expiry_date The banner expiry date (null: never expires)
     * @param  ?MEMBER $submitter The banners submitter (null: current member)
     * @param  BINARY $validated Whether the banner has been validated
     * @param  ID_TEXT $b_type The banner type (can be anything, where blank means 'normal')
     * @param  array $b_types The secondary banner types (empty: no secondary banner types)
     * @param  array $regions The regions (empty: not region-limited)
     * @param  SHORT_TEXT $title_text The title text for the banner (only used for text banners, and functions as the 'trigger text' if the banner type is shown inline)
     * @return array A tuple: The input fields, Hidden fields, ...
     */
    public function get_form_fields(string $name = '', string $image_url = '', string $site_url = '', string $caption = '', string $direct_code = '', string $notes = '', int $display_likelihood = 3, ?int $campaign_remaining = 50, int $deployment_agreement = 0, ?int $expiry_date = null, ?int $submitter = null, int $validated = 1, string $b_type = '', array $b_types = [], array $regions = [], string $title_text = '') : array
    {
        if ($b_type == '') {
            $b_type = get_param_string('b_type', '');
        }

        list($fields, $js_function_calls) = get_banner_form_fields(false, $name, $image_url, $site_url, $caption, $direct_code, $notes, $display_likelihood, $campaign_remaining, $deployment_agreement, $expiry_date, $submitter, $validated, $b_type, $b_types, $regions, $title_text);

        if (is_array($js_function_calls) && (!empty($js_function_calls))) {
            $this->js_function_calls = array_merge($this->js_function_calls, $js_function_calls);
        }

        $fields->attach(metadata_get_fields('banner', $name));

        if (addon_installed('content_reviews')) {
            $fields->attach(content_review_get_fields('banner', $name));
        }

        // Permissions
        if (get_option('use_banner_permissions') == '1') {
            $fields->attach($this->get_permission_fields($name, null, ($name == '')));
        }

        $edit_text = ($name == '') ? new Tempcode() : do_template('BANNER_PREVIEW', ['_GUID' => 'b7c58bc13ff317870b6823716fd36f0c', 'PREVIEW' => show_banner($name, $title_text, comcode_to_tempcode($caption, $submitter), $direct_code, $image_url, '', $site_url, $b_type, ($submitter === null) ? get_member() : $submitter)]);

        $hidden = new Tempcode();
        handle_max_file_size($hidden, 'image');

        return [$fields, $hidden, null, $edit_text];
    }

    /**
     * Standard crud_module submitter getter.
     *
     * @param  ID_TEXT $id The entry for which the submitter is sought
     * @return array The submitter, and the time of submission (null submission time implies no known submission time)
     */
    public function get_submitter(string $id) : array
    {
        $rows = $GLOBALS['SITE_DB']->query_select('banners', ['submitter', 'add_date'], ['name' => $id], '', 1);
        if (!array_key_exists(0, $rows)) {
            return [null, null];
        }
        return [$rows[0]['submitter'], $rows[0]['add_date']];
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function fill_in_edit_form(string $id)
    {
        $rows = $GLOBALS['SITE_DB']->query_select('banners', ['*'], ['name' => $id], '', 1);
        if (!array_key_exists(0, $rows)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'banner'));
        }
        $myrow = $rows[0];

        $b_types = collapse_1d_complexity('b_type', $GLOBALS['SITE_DB']->query_select('banners_types', ['b_type'], ['name' => $id]));

        $regions = collapse_1d_complexity('region', $GLOBALS['SITE_DB']->query_select('content_regions', ['region'], ['content_type' => 'banner', 'content_id' => $id]));

        return $this->get_form_fields($id, $myrow['img_url'], $myrow['site_url'], get_translated_text($myrow['caption']), $myrow['direct_code'], $myrow['notes'], $myrow['display_likelihood'], $myrow['campaign_remaining'], $myrow['deployment_agreement'], $myrow['expiry_date'], $myrow['submitter'], $myrow['validated'], $myrow['b_type'], $b_types, $regions, $myrow['title_text']);
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return array A pair: The entry added, description about usage
     */
    public function add_actualisation() : array
    {
        $name = post_param_string('banner_codename');
        $caption = post_param_string('caption');
        $direct_code = post_param_string('direct_code', '');
        $campaign_remaining = post_param_integer('campaign_remaining', 0);
        $site_url = fixup_protocolless_urls(post_param_string('site_url', '', INPUT_FILTER_URL_GENERAL));
        $display_likelihood = post_param_integer('display_likelihood', 3);
        $notes = post_param_string('notes', '');
        $deployment_agreement = post_param_integer('deployment_agreement', 1);
        $expiry_date = post_param_date('expiry_date');
        $validated = post_param_integer('validated', 0);
        $b_type = post_param_string('b_type');
        $b_types = isset($_POST['b_types']) ? $_POST['b_types'] : [];
        $regions = isset($_POST['regions']) ? $_POST['regions'] : [];
        $title_text = post_param_string('title_text', '');

        $this->donext_type = $b_type;

        list($url, $title_text) = check_banner($title_text, $direct_code, $b_type, $b_types);

        $metadata = actual_metadata_get_fields('banner', null);

        add_banner($name, $url, $title_text, $caption, $direct_code, $campaign_remaining, $site_url, $display_likelihood, $notes, $deployment_agreement, $expiry_date, $metadata['submitter'], $validated, $b_type, $b_types, $regions, $metadata['add_time'], 0, 0, 0, 0, $metadata['edit_time']);

        $_banner_type_row = $GLOBALS['SITE_DB']->query_select('banner_types', ['t_image_width', 't_image_height'], ['id' => $b_type], '', 1);
        if (array_key_exists(0, $_banner_type_row)) {
            $banner_type_row = $_banner_type_row[0];
        } else {
            $banner_type_row = ['t_image_width' => 728, 't_image_height' => 90];
        }
        $stats_url = build_url(['page' => 'banners', 'type' => 'view', 'source' => $name], get_module_zone('banners'));
        $banner_code = do_template('BANNER_SHOW_CODE', [
            '_GUID' => '745d555fcca3a1320123ad3a5a04418b',
            'TYPE' => $b_type,
            'NAME' => $name,
            'WIDTH' => strval($banner_type_row['t_image_width']),
            'HEIGHT' => strval($banner_type_row['t_image_height']),
        ]);
        $tpl = do_template('BANNER_ADDED_SCREEN', ['_GUID' => '897bab3e444f0d3c909e7a95b84d4396', 'DO_NEXT' => '', 'TEXT' => '', 'TITLE' => '', 'BANNER_CODE' => $banner_code, 'STATS_URL' => $stats_url]);

        if (get_option('use_banner_permissions') == '1') {
            $this->set_permissions($name);
        }

        if (addon_installed('content_reviews')) {
            content_review_set('banner', $name);
        }

        require_code('templates_donext');
        if (has_simplified_donext()) {
            $tpl = null;
        }

        return [$name, $tpl];
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return ?Tempcode Description about usage (null: none)
     */
    public function edit_actualisation(string $id) : ?object
    {
        $orig_submitter = $GLOBALS['SITE_DB']->query_select_value_if_there('banners', 'submitter', ['name' => $id]);
        if ($orig_submitter === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'banner'));
        }

        $title_text = post_param_string('title_text', '');
        $direct_code = post_param_string('direct_code', '');
        $validated = post_param_integer('validated', 0);
        $b_type = post_param_string('b_type');
        $b_types = isset($_POST['b_types']) ? $_POST['b_types'] : [];
        $regions = isset($_POST['regions']) ? $_POST['regions'] : [];

        $this->donext_type = $b_type;

        list($url, $title_text) = check_banner($title_text, $direct_code, $b_type);

        $new_id = post_param_string('banner_codename');

        $metadata = actual_metadata_get_fields('banner', $id, [], $new_id);

        edit_banner($id, $new_id, $url, $title_text, post_param_string('caption'), $direct_code, post_param_integer('campaign_remaining', 0), fixup_protocolless_urls(post_param_string('site_url', false, INPUT_FILTER_URL_GENERAL)), post_param_integer('display_likelihood'), post_param_string('notes', ''), post_param_integer('deployment_agreement', 1), post_param_date('expiry_date'), $metadata['submitter'], $validated, $b_type, $b_types, $regions, $metadata['edit_time'], $metadata['add_time'], true);

        if ($id != $new_id) {
            unset($_GET['redirect']);
        }

        $this->new_id = post_param_string('banner_codename');

        if (get_option('use_banner_permissions') == '1') {
            $this->set_permissions($id);
        }

        if (addon_installed('content_reviews')) {
            content_review_set('banner', $new_id, $id);
        }

        return null;
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $id The entry being deleted
     */
    public function delete_actualisation(string $id)
    {
        $b_type = post_param_string('b_type');
        $this->donext_type = $b_type;

        delete_banner($id);
    }

    /**
     * The do-next manager for after banner content management (banners only).
     *
     * @param  ?Tempcode $title The title (output of get_screen_title) (null: don't use full page)
     * @param  Tempcode $description Some description to show, saying what happened
     * @param  ?ID_TEXT $id The ID of whatever we are working with (null: deleted)
     * @return Tempcode The UI
     */
    public function do_next_manager(?object $title, object $description, ?string $id = null) : object
    {
        return $this->cat_crud_module->_do_next_manager($title, $description, $id, $this->donext_type);
    }

    /**
     * The actualiser to export a banners spreadsheet.
     *
     * @return Tempcode The UI
     */
    public function export_spreadsheet() : object
    {
        $_has_banner_network = $GLOBALS['SITE_DB']->query_select_value('banners', 'SUM(views_from)');
        $has_banner_network = (@intval($_has_banner_network) != 0);

        $only_owned = has_privilege(get_member(), 'edit_midrange_content', 'cms_banners') ? null : get_member();
        $rows = $GLOBALS['SITE_DB']->query_select('banners', ['*'], ($only_owned === null) ? [] : ['submitter' => $only_owned], 'ORDER BY name');

        $has_title_text = false;
        $has_caption = false;
        $has_deployment_agreement = false;
        foreach ($rows as $row) {
            if ($row['title_text'] != '') {
                $has_title_text = true;
            }
            if (get_translated_text($row['caption']) != '') {
                $has_caption = true;
            }
            if ($row['deployment_agreement'] != BANNER_PERMANENT) {
                $has_deployment_agreement = true;
            }
        }

        $outfile_path = null;
        require_code('files_spreadsheets_write');
        $filename = 'banners.' . spreadsheet_write_default();
        $sheet_writer = spreadsheet_open_write($outfile_path, $filename);

        foreach ($rows as $row) {
            $spreadsheet_row = [];

            // Basic details...

            $spreadsheet_row[do_lang('CODENAME')] = $row['name'];

            $spreadsheet_row[do_lang('BANNER_TYPE')] = ($row['b_type'] == '') ? do_lang('_DEFAULT') : $row['b_type'];

            $banner_types = implode(', ', collapse_1d_complexity('b_type', $GLOBALS['SITE_DB']->query_select('banners_types', ['b_type'], ['name' => $row['name']])));
            $spreadsheet_row[do_lang('SECONDARY_CATEGORIES')] = $banner_types;

            if ($has_title_text) {
                $spreadsheet_row[do_lang('BANNER_TITLE_TEXT')] = $row['title_text'];
            }

            if ($has_caption) {
                $spreadsheet_row[do_lang('DESCRIPTION')] = get_translated_text($row['caption']);
            }

            $spreadsheet_row[do_lang('IMAGE')] = (url_is_local($row['img_url']) ? (get_custom_base_url() . '/') : '') . $row['img_url'];

            $spreadsheet_row[do_lang('DESTINATION_URL')] = $row['site_url'];

            // Basic stats...

            if ($has_banner_network) {
                $spreadsheet_row[strip_html(do_lang('BANNER_HITS_FROM'))] = integer_format($row['hits_from']);
                $spreadsheet_row[strip_html(do_lang('BANNER_VIEWS_FROM'))] = integer_format($row['views_from']);
            }
            $spreadsheet_row[strip_html(do_lang('BANNER_HITS_TO'))] = ($row['site_url'] == '') ? strip_html(do_lang('CANT_TRACK')) : integer_format($row['hits_to'], 0);
            $spreadsheet_row[strip_html(do_lang('BANNER_VIEWS_TO'))] = ($row['site_url'] == '') ? strip_html(do_lang('CANT_TRACK')) : integer_format($row['views_to'], 0);

            if ($row['views_to'] != 0) {
                $click_through = float_format(100.0 * (floatval($row['hits_to']) / floatval($row['views_to'])));
            } else {
                $click_through = do_lang('NA');
            }
            $spreadsheet_row[strip_html(do_lang('BANNER_CLICKTHROUGH'))] = ($row['site_url'] == '') ? strip_html(do_lang('CANT_TRACK')) : $click_through;

            // Display determination details...

            if ($has_deployment_agreement) {
                $deployment_agreement = '';
                $campaign_remaining = '';
                switch ($row['deployment_agreement']) {
                    case BANNER_PERMANENT:
                        $deployment_agreement = do_lang('BANNER_PERMANENT');
                        $campaign_remaining = integer_format($row['campaign_remaining']);
                        break;
                    case BANNER_CAMPAIGN:
                        $deployment_agreement = do_lang('BANNER_CAMPAIGN');
                        break;
                    case BANNER_FALLBACK:
                        $deployment_agreement = do_lang('BANNER_FALLBACK');
                        break;
                }
                $spreadsheet_row[do_lang('DEPLOYMENT_AGREEMENT')] = $deployment_agreement;

                $spreadsheet_row[do_lang('HITS_ALLOCATED')] = $campaign_remaining;
            }

            $spreadsheet_row[do_lang('DISPLAY_LIKELIHOOD')] = strval($row['display_likelihood']);

            if (addon_installed('stats')) {
                $banners_regions = implode(', ', collapse_1d_complexity('region', $GLOBALS['SITE_DB']->query_select('content_regions', ['region'], ['content_type' => 'banner', 'content_id' => $row['name']])));
                $spreadsheet_row[do_lang('FILTER_REGIONS')] = $banners_regions;
            }

            $spreadsheet_row[do_lang('EXPIRY_DATE')] = ($row['expiry_date'] === null) ? do_lang('NA') : get_timezoned_date_time($row['expiry_date']);

            if (addon_installed('validation')) {
                $spreadsheet_row[do_lang('VALIDATED')] = ($row['validated'] == 1) ? do_lang('YES') : do_lang('NO');
            }

            // Meta details...

            $username = $GLOBALS['FORUM_DRIVER']->get_username($row['submitter']);
            if ($username === null) {
                $username = do_lang('UNKNOWN');
            }
            $spreadsheet_row[do_lang('SUBMITTER')] = $username;

            $spreadsheet_row[do_lang('ADDED')] = get_timezoned_date_time($row['add_date']);
            $spreadsheet_row[do_lang('EDITED')] = ($row['edit_date'] === null) ? '' : date('Y-m-d', $row['edit_date']);

            $sheet_writer->write_row($spreadsheet_row);
        }

        $sheet_writer->output_and_exit($filename, true);

        return new Tempcode();
    }

    /**
     * UI for install/uninstall of predefined content.
     *
     * @return Tempcode The UI
     */
    public function predefined_content() : object
    {
        require_code('content2');
        return predefined_content_changes_ui('banners', $this->title, build_url(['page' => '_SELF', 'type' => '_predefined_content'], '_SELF'));
    }

    /**
     * Actualise install/uninstall of predefined content.
     *
     * @return Tempcode The UI
     */
    public function _predefined_content() : object
    {
        require_code('content2');
        return predefined_content_changes_actualiser('banners', $this->title);
    }
}

/**
 * Module page class.
 */
class Module_cms_banners_cat extends Standard_crud_module
{
    protected $lang_type = 'BANNER_TYPE';
    protected $select_name = 'BANNER_TYPE';
    protected $select_name_description = '_DESCRIPTION_BANNER_TYPE';
    protected $orderer = 'id';
    protected $array_key = 'id';
    protected $non_integer_id = true;
    protected $protect_first = 1;
    protected $table = 'banner_types';
    protected $permissions_require = 'cat_high';
    protected $menu_label = 'BANNERS';
    protected $no_blank_ids = false;
    protected $is_chained_with_parent_browse = true;
    protected $do_preview = null;

    /**
     * Standard crud_module table function.
     *
     * @param  array $url_map Details to go to build_url for link to the next screen
     * @return array A quintet: The choose table, Whether re-ordering is supported from this screen, Search URL, Archive URL, a Filtercode box block
     */
    public function create_selection_list_choose_table(array $url_map) : array
    {
        require_code('templates_results_table');

        $current_ordering = get_param_string('sort', 'id ASC', INPUT_FILTER_GET_COMPLEX);
        $sortables = [
            'id' => do_lang_tempcode('CODENAME'),
            't_is_textual' => do_lang_tempcode('BANNER_IS_TEXTUAL'),
            't_image_width' => do_lang_tempcode('WIDTH'),
            't_image_height' => do_lang_tempcode('HEIGHT'),
            't_max_file_size' => do_lang_tempcode('MAX_SIZE'),
            't_comcode_inline' => do_lang_tempcode('COMCODE_INLINE'),
            'entries_count' => do_lang_tempcode('COUNT_TOTAL'),
        ];
        list($sql_sort, $sort_order, $sortable) = process_sorting_params('banner_type', $current_ordering);

        $header_row = results_header_row([
            do_lang_tempcode('CODENAME'),
            do_lang_tempcode('BANNER_IS_TEXTUAL'),
            do_lang_tempcode('WIDTH'),
            do_lang_tempcode('HEIGHT'),
            do_lang_tempcode('MAX_SIZE'),
            do_lang_tempcode('COMCODE_INLINE'),
            do_lang_tempcode('COUNT_TOTAL'),
            do_lang_tempcode('ACTIONS'),
        ], $sortables, 'sort', $sortable . ' ' . $sort_order);

        $fields = new Tempcode();

        require_code('files');
        list($rows, $max_rows) = $this->get_entry_rows(false, $sql_sort);
        foreach ($rows as $row) {
            $edit_url = build_url($url_map + ['id' => $row['id']], '_SELF');

            $total = integer_format($GLOBALS['SITE_DB']->query_select_value('banners', 'COUNT(*)', ['b_type' => $row['id']]));

            $fields->attach(results_entry([
                ($row['id'] == '') ? do_lang('_DEFAULT') : $row['id'],
                ($row['t_is_textual'] == 1) ? do_lang_tempcode('YES') : do_lang_tempcode('NO'),
                escape_html(strval($row['t_image_width'])),
                escape_html(strval($row['t_image_height'])),
                clean_file_size($row['t_max_file_size'] * 1024),
                ($row['t_comcode_inline'] == 1) ? do_lang_tempcode('YES') : do_lang_tempcode('NO'),
                $total,
                protect_from_escaping(hyperlink($edit_url, do_lang_tempcode('EDIT'), false, true, '#' . $row['id']))
            ], true));
        }

        return [results_table(do_lang($this->menu_label), get_param_integer('start', 0), 'start', get_param_integer('max', 20), 'max', $max_rows, $header_row, $fields, $sortables, $sortable, $sort_order), false];
    }

    /**
     * Get Tempcode for an adding form.
     *
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function get_form_fields_for_add()
    {
        return $this->get_form_fields();
    }

    /**
     * Get Tempcode for a Post Template adding/editing form.
     *
     * @param  ?ID_TEXT $id The ID of the banner type (null: new)
     * @param  BINARY $is_textual Whether this is a textual banner
     * @param  integer $image_width The image width (ignored for textual banners)
     * @param  integer $image_height The image height (ignored for textual banners)
     * @param  integer $max_file_size The maximum file size for the banners (this is a string length for textual banners)
     * @param  BINARY $comcode_inline Whether the banner will be automatically shown via Comcode hot-text (this can only happen if banners of the title are given title-text)
     * @return array A pair: The input fields, Hidden fields
     */
    public function get_form_fields(?string $id = null, int $is_textual = 0, int $image_width = 160, int $image_height = 600, int $max_file_size = 250, int $comcode_inline = 0) : array
    {
        $fields = new Tempcode();
        $hidden = new Tempcode();

        $fields->attach(form_input_codename(do_lang_tempcode('CODENAME'), do_lang_tempcode('DESCRIPTION_BANNER_TYPE_2'), 'new_id', ($id === null) ? '' : $id, false));
        if ($id != '') {
            $hidden->attach(form_input_hidden('is_textual', strval($is_textual)));
        } else {
            $fields->attach(form_input_tick(do_lang_tempcode('BANNER_IS_TEXTUAL'), do_lang_tempcode('DESCRIPTION_BANNER_IS_TEXTUAL'), 'is_textual', $is_textual == 1));
        }
        $fields->attach(form_input_dimensions(do_lang_tempcode('DIMENSIONS'), do_lang_tempcode('DESCRIPTION_BANNER_DIMENSIONS'), 'image_width', 'image_height', $image_width, $image_height, true));
        $fields->attach(form_input_integer(do_lang_tempcode('MAX_SIZE'), do_lang_tempcode('DESCRIPTION_BANNER_FILE_SIZE'), 'max_file_size', $max_file_size, true));
        $fields->attach(form_input_tick(do_lang_tempcode('COMCODE_INLINE'), do_lang_tempcode('DESCRIPTION_COMCODE_INLINE'), 'comcode_inline', $comcode_inline == 1));

        $fields->attach(metadata_get_fields('banner_type', ($id === null) ? null : $id));

        if (addon_installed('content_reviews')) {
            $fields->attach(content_review_get_fields('banner_type', ($id === null) ? null : $id));
        }

        // Select of banners within compatible types
        if ($id !== null) {
            $banners_in_type = collapse_1d_complexity('name', $GLOBALS['SITE_DB']->query_select('banners_types', ['name'], ['b_type' => $id]));

            $compatible_banner_types = $GLOBALS['SITE_DB']->query_select('banner_types', ['id'], ['t_image_width' => $image_width, 't_image_height' => $image_height, 't_is_textual' => $is_textual]);
            $or_list = '';
            foreach ($compatible_banner_types as $compatible_banner_type) {
                if ($compatible_banner_type['id'] != $id) {
                    if ($or_list != '') {
                        $or_list .= ' OR ';
                    }
                    $or_list .= db_string_equal_to('b_type', $compatible_banner_type['id']);
                }
            }
            if ($or_list != '') {
                $or_list = '(' . $or_list . ')';
                $sql = 'SELECT name FROM ' . get_table_prefix() . 'banners WHERE ' . $or_list . ' ORDER BY name';
                $compatible_banners = $GLOBALS['SITE_DB']->query($sql);
                if (!empty($compatible_banners)) {
                    $_compatible_banners = new Tempcode();
                    foreach ($compatible_banners as $compatible_banner) {
                        $_compatible_banners->attach(form_input_list_entry($compatible_banner['name'], in_array($compatible_banner['name'], $banners_in_type)));
                    }
                    $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '008cd640acc13e51876701415bc8810f', 'SECTION_HIDDEN' => empty($banners_in_type), 'TITLE' => do_lang_tempcode('ACTIONS')]));
                    $fields->attach(form_input_multi_list(do_lang_tempcode('BANNERS_IN_TYPE_AS_SECONDARY'), do_lang_tempcode('DESCRIPTION_BANNERS_IN_TYPE_AS_SECONDARY'), 'banners_in_type_as_secondary', $_compatible_banners));

                    $this->appended_actions_already = true;
                }
            }
        }

        return [$fields, $hidden];
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The category being edited
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function fill_in_edit_form(string $id)
    {
        $m = $GLOBALS['SITE_DB']->query_select('banner_types', ['*'], ['id' => $id], '', 1);
        if (!array_key_exists(0, $m)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'banner_type'));
        }
        $r = $m[0];

        list($fields, $hidden) = $this->get_form_fields($id, $r['t_is_textual'], $r['t_image_width'], $r['t_image_height'], $r['t_max_file_size'], $r['t_comcode_inline']);

        return [$fields, $hidden];
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return array A pair: The category added, description about usage
     */
    public function add_actualisation() : array
    {
        $id = post_param_string('new_id');
        $is_textual = post_param_integer('is_textual', 0);
        if ($is_textual == 1) {
            $image_width = 0;
            $image_height = 0;
        } else {
            $image_width = post_param_integer('image_width');
            $image_height = post_param_integer('image_height');
        }
        $max_file_size = post_param_integer('max_file_size');
        $comcode_inline = post_param_integer('comcode_inline', 0);

        $metadata = actual_metadata_get_fields('banner_type', null);

        add_banner_type($id, $is_textual, $image_width, $image_height, $max_file_size, $comcode_inline);

        set_url_moniker('banner_type', $id);

        if (addon_installed('content_reviews')) {
            content_review_set('banner_type', $id);
        }

        $tpl = do_lang_tempcode('ADD_BANNER_TEMPLATING');

        require_code('templates_donext');
        if (has_simplified_donext()) {
            $tpl = null;
        }

        return [$id, $tpl];
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $id The category being edited
     * @return ?Tempcode Description about usage (null: none)
     */
    public function edit_actualisation(string $id) : ?object
    {
        $is_textual = post_param_integer('is_textual', 0);
        if ($is_textual == 1) {
            $image_width = 0;
            $image_height = 0;
        } else {
            $image_width = post_param_integer('image_width');
            $image_height = post_param_integer('image_height');
        }
        $max_file_size = post_param_integer('max_file_size');
        $comcode_inline = post_param_integer('comcode_inline', 0);
        $banners_in_type_as_secondary = isset($_POST['banners_in_type_as_secondary']) ? $_POST['banners_in_type_as_secondary'] : [];

        $new_id = post_param_string('new_id');

        $metadata = actual_metadata_get_fields('banner_type', $id, [], $new_id);

        edit_banner_type($id, $new_id, $is_textual, $image_width, $image_height, $max_file_size, $comcode_inline);

        $GLOBALS['SITE_DB']->query_delete('banners_types', ['b_type' => $new_id]);
        foreach ($banners_in_type_as_secondary as $banner) {
            $GLOBALS['SITE_DB']->query_insert('banners_types', ['b_type' => $new_id, 'name' => $banner]);
        }

        $this->new_id = post_param_string('new_id');

        if (addon_installed('content_reviews')) {
            content_review_set('banner_type', $new_id, $id);
        }

        return do_lang_tempcode('ADD_BANNER_TEMPLATING');
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $id The category being deleted
     */
    public function delete_actualisation(string $id)
    {
        delete_banner_type($id);
    }

    /**
     * The do-next manager for after download content management (event types only).
     *
     * @param  ?Tempcode $title The title (output of get_screen_title) (null: don't use full page)
     * @param  Tempcode $description Some description to show, saying what happened
     * @param  ?ID_TEXT $id The ID of whatever we are working with (null: deleted)
     * @return Tempcode The UI
     */
    public function do_next_manager(?object $title, object $description, ?string $id = null) : object
    {
        return $this->_do_next_manager($title, $description, $id, $this->donext_type);
    }

    /**
     * The do-next manager for after banner content management.
     *
     * @param  ?Tempcode $title The title (output of get_screen_title) (null: don't use full page)
     * @param  Tempcode $description Some description to show, saying what happened
     * @param  ?ID_TEXT $id The ID of whatever was just handled (null: N/A)
     * @param  ?ID_TEXT $type The type ID we were working in (null: N/A)
     * @return Tempcode The UI
     */
    public function _do_next_manager(?object $title, object $description, ?string $id, ?string $type) : object
    {
        require_code('templates_donext');

        if (($id === null) && ($type === null)) {
            return do_next_manager(
                $title,
                $description,
                [],
                null,
                /* TYPED-ORDERED LIST OF 'LINKS' */
                ['_SELF', ['type' => 'add'], '_SELF', do_lang_tempcode('ADD_BANNER')], // Add one
                null, // Edit this
                has_privilege(get_member(), 'edit_own_lowrange_content', 'cms_banners') ? ['_SELF', ['type' => 'edit'], '_SELF', do_lang_tempcode('EDIT_BANNER')] : null, // Edit one
                null, // View this
                null, // View archive
                has_privilege(get_member(), 'submit_cat_highrange_content', 'cms_banners') ? ['_SELF', ['type' => 'add_category'], '_SELF', do_lang_tempcode('ADD_BANNER_TYPE')] : null, // Add one category
                has_privilege(get_member(), 'edit_cat_highrange_content', 'cms_banners') ? ['_SELF', ['type' => 'edit_category'], '_SELF', do_lang_tempcode('EDIT_BANNER_TYPE')] : null, // Edit one category
                null, // Edit this category
                null, // View this category
                [],
                [],
                [],
                null,
                null,
                null,
                do_lang_tempcode('BANNER_TYPES'),
                'banner',
                'banner_type'
            );
        }

        return do_next_manager(
            $title,
            $description,
            [],
            null,
            /* TYPED-ORDERED LIST OF 'LINKS' */
            ['_SELF', ['type' => 'add', 'b_type' => $type], '_SELF', do_lang_tempcode('ADD_BANNER')], // Add one
            (($id === null) || (!has_privilege(get_member(), 'edit_own_lowrange_content', 'cms_banners'))) ? null : ['_SELF', ['type' => '_edit', 'id' => $id], '_SELF', do_lang_tempcode('EDIT_THIS_BANNER')], // Edit this
            has_privilege(get_member(), 'edit_own_lowrange_content', 'cms_banners') ? ['_SELF', ['type' => 'edit'], '_SELF', do_lang_tempcode('EDIT_BANNER')] : null, // Edit one
            (($id === null) || (/*Don't go direct to view if simplified do-next on as too unnatural*/get_option('simplified_donext') == '1')) ? null : ['banners', ['type' => 'view', 'source' => $id], get_module_zone('banners')], // View this
            ['admin_banners', ['type' => 'browse'], get_module_zone('admin_banners')], // View archive
            has_privilege(get_member(), 'submit_cat_highrange_content', 'cms_banners') ? ['_SELF', ['type' => 'add_category'], '_SELF', do_lang_tempcode('ADD_BANNER_TYPE')] : null, // Add one category
            has_privilege(get_member(), 'edit_cat_highrange_content', 'cms_banners') ? ['_SELF', ['type' => 'edit_category'], '_SELF', do_lang_tempcode('EDIT_BANNER_TYPE')] : null, // Edit one category
            has_privilege(get_member(), 'edit_cat_highrange_content', 'cms_banners') ? ['_SELF', ['type' => '_edit_category', 'id' => $type], '_SELF', do_lang_tempcode('EDIT_THIS_BANNER_TYPE')] : null, // Edit this category
            null, // View this category
            [],
            [],
            [],
            null,
            null,
            null,
            do_lang_tempcode('BANNER_TYPES'),
            'banner',
            'banner_type'
        );
    }
}
