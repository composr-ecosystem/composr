<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    filedump
 */

/**
 * Module page class.
 */
class Module_filedump
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 5;
        $info['update_require_upgrade'] = true;
        $info['locked'] = false;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('filedump');

        $privileges = [
            'delete_anything_filedump',
            'upload_filedump',
            'upload_anything_filedump',
        ];
        delete_privilege($privileges);

        $GLOBALS['SITE_DB']->query_delete('group_page_access', ['page_name' => 'filedump']);

        //require_code('files');
        //deldir_contents(get_custom_file_base() . '/uploads/filedump', true);
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('filedump', [
                'id' => '*AUTO',
                'name' => 'ID_TEXT',
                'subpath' => 'SHORT_TEXT',
                'the_description' => 'SHORT_TRANS',
                'the_member' => 'MEMBER',
            ]);

            add_privilege('FILEDUMP', 'upload_anything_filedump', false);
            add_privilege('FILEDUMP', 'upload_filedump', true);
            add_privilege('FILEDUMP', 'delete_anything_filedump', false);

            $usergroups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);
            foreach (array_keys($usergroups) as $id) {
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'filedump', 'zone_name' => 'cms', 'group_id' => $id]); // Don't want to let anyone do filedump stuff just because we let them manage content
            }
        }

        if (($upgrade_from !== null) && ($upgrade_from < 4)) { // LEGACY
            if (addon_installed('redirects_editor')) {
                $GLOBALS['SITE_DB']->query_delete('redirects', ['r_from_page' => 'filedump', 'r_from_zone' => 'collaboration', 'r_to_page' => 'filedump', 'r_to_zone' => 'cms', 'r_is_transparent' => 1]);
            }

            $GLOBALS['SITE_DB']->query_update('privilege_list', ['p_section' => 'FILEDUMP'], ['p_section' => 'FILE_DUMP']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 5)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('filedump', 'path', 'SHORT_TEXT', 'subpath');
            $GLOBALS['SITE_DB']->alter_table_field('filedump', 'description', 'SHORT_TRANS', 'the_description');
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('filedump')) {
            return null;
        }

        if ($member_id === null) {
            $member_id = get_member();
        }

        $ret = [
            'browse' => ['FILEDUMP', 'menu/cms/filedump'],
        ];
        if ($GLOBALS['FORUM_DRIVER']->is_super_admin($member_id)) {
            $ret += [
                'broken' => ['FIND_BROKEN_FILEDUMP_LINKS', 'menu/adminzone/tools/cleanup'],
            ];
        }
        return $ret;
    }

    public $title;
    public $subpath;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('filedump', $error_msg)) {
            return $error_msg;
        }

        require_lang('filedump');

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            $subpath = filter_naughty(get_param_string('subpath', '/', INPUT_FILTER_GET_COMPLEX));
            if (substr($subpath, -1, 1) != '/') {
                $subpath .= '/';
            }

            inject_feed_url('?mode=filedump&select=' . urlencode($subpath), do_lang('FILEDUMP'));

            // Show breadcrumbs
            $dirs = explode('/', substr($subpath, 0, strlen($subpath) - 1));
            $pre = '';
            $breadcrumbs = [];
            foreach ($dirs as $i => $d) {
                if ($i == 0) {
                    $d = do_lang('FILEDUMP');
                }

                if (array_key_exists($i + 1, $dirs)) {
                    $breadcrumbs_page_link = build_page_link(['page' => '_SELF', 'subpath' => $pre . $dirs[$i] . '/'], '_SELF');
                    $breadcrumbs[] = [$breadcrumbs_page_link, $d];
                }
                $pre .= $dirs[$i] . '/';
            }
            if (!empty($breadcrumbs)) {
                $breadcrumbs[] = ['', $d];
                breadcrumb_set_parents($breadcrumbs);
            } else {
                breadcrumb_set_self(($i == 1) ? do_lang_tempcode('FILEDUMP') : protect_from_escaping(escape_html($d)));
            }

            $this->subpath = $subpath;

            $this->title = get_screen_title('FILEDUMP');
        }

        if ($type == 'embed') {
            $this->title = get_screen_title('FILEDUMP_EMBED');
        }

        if ($type == 'add' || $type == 'add_resolved_conflicts') {
            $this->title = get_screen_title('FILEDUMP_UPLOAD');
        }

        if ($type == 'mass') {
            $action = post_param_string('filedump_action');
            switch ($action) {
                case 'edit':
                    $this->title = get_screen_title('FILEDUMP_EDIT');
                    break;

                case 'delete':
                    $this->title = get_screen_title('FILEDUMP_DELETE');
                    break;

                case 'zip':
                    $this->title = get_screen_title('FILEDUMP_ZIP');
                    break;

                default:
                    $this->title = get_screen_title('FILEDUMP_MOVE');
                    break;
            }

            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('FILEDUMP')]]);

            if ((post_param_integer('confirmed', 0) != 1) && ($action != 'edit'/*edit too trivial/specific to need a confirm*/)) {
                breadcrumb_set_self(do_lang_tempcode('CONFIRM'));
            }
        }

        if ($type == 'broken') {
            $this->title = get_screen_title('FIND_BROKEN_FILEDUMP_LINKS');
        }

        if ($type == '_broken') {
            $this->title = get_screen_title('FIX_BROKEN_FILEDUMP_LINKS');
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_lang('filedump');
        require_css('filedump');
        require_code('filedump');
        require_code('files2');

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->do_gui();
        }
        if ($type == 'embed') {
            return $this->do_embed();
        }
        if ($type == 'mass') {
            return $this->do_mass();
        }
        if ($type == 'add_category') {
            return $this->do_add_folder();
        }
        if ($type == 'add') {
            return $this->do_upload();
        }
        if ($type == 'add_resolved_conflicts') {
            return $this->do_uploaded_resolved_conflicts();
        }
        if ($type == 'broken') {
            return $this->broken();
        }
        if ($type == '_broken') {
            return $this->_broken();
        }

        return new Tempcode();
    }

    /**
     * The main user interface for the file dump.
     *
     * @return Tempcode The UI
     */
    public function do_gui() : object
    {
        require_code('form_templates');
        require_code('images');

        disable_php_memory_limit();

        $subpath = $this->subpath;

        if (!file_exists(get_custom_file_base() . '/uploads/filedump' . $subpath)) {
            $_url = build_url(['page' => '_SELF', 'subpath' => '/'], '_SELF');
            return redirect_screen($this->title, $_url, do_lang_tempcode('DIRECTORY_NOT_FOUND', escape_html($subpath)));
        }

        $type_filter = get_param_string('type_filter', '');

        $search = get_param_string('search', '', INPUT_FILTER_GET_COMPLEX);
        if ($search == do_lang('SEARCH')) {
            $search = '';
        }

        $sort = get_param_string('sort', 'time ASC', INPUT_FILTER_GET_COMPLEX);
        if (strpos($sort, ' ') === false) {
            $sort = 'time ASC';
        }
        list($order, $direction) = explode(' ', $sort, 2);
        if ($direction != 'ASC' && $direction != 'DESC') {
            $direction = 'ASC';
        }

        $recurse = get_param_integer('recurse', 0);

        // Check directory exists
        $full_path = get_custom_file_base() . '/uploads/filedump' . $subpath;
        if (!file_exists(get_custom_file_base() . '/uploads/filedump' . $subpath)) {
            if (has_privilege(get_member(), 'upload_filedump')) {
                cms_file_put_contents_safe($full_path . '/index.html', '', FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE);
            }
        }

        // Find all files in the filedump directory
        $db_rows = [];
        $directories = [];
        $files = [];
        $_directories = get_directory_contents(get_custom_file_base() . '/uploads/filedump' . $subpath, trim($subpath, '/'), IGNORE_ACCESS_CONTROLLERS, $recurse == 1, false);
        $_files = get_directory_contents(get_custom_file_base() . '/uploads/filedump' . $subpath, trim($subpath, '/'), IGNORE_ACCESS_CONTROLLERS, $recurse == 1, true);
        $dir_contents = array_merge($_directories, $_files);

        // Traverse every directory / file
        foreach ($dir_contents as $filename) {
            $_subpath = dirname($filename);
            if ($_subpath == '.') {
                $_subpath = '';
            }
            $_subpath = '/' . $_subpath . (($_subpath == '') ? '' : '/');
            $filename = basename($filename);

            if (!should_ignore_file('uploads/filedump' . $_subpath . $filename, IGNORE_ACCESS_CONTROLLERS | IGNORE_HIDDEN_FILES)) {
                $_full = get_custom_file_base() . '/uploads/filedump' . $_subpath . $filename;
                if (!file_exists($_full)) {
                    continue; // Broken symlink or (?) permission problem
                }

                if (!isset($db_rows[$_subpath])) {
                    $db_rows[$_subpath] = list_to_map('name', $GLOBALS['SITE_DB']->query_select('filedump', ['*'], ['subpath' => cms_mb_substr($_subpath, 0, 80)]));
                }

                $is_directory = !is_file($_full);

                $db_row = isset($db_rows[$_subpath][$filename]) ? $db_rows[$_subpath][$filename] : null;

                $_description = isset($db_row) ? get_translated_text($db_row['the_description']) : '';

                if ($is_directory) {
                    if (!$this->_folder_search($_subpath . $filename . '/', $_description, $search, $type_filter)) {
                        continue;
                    }
                } else {
                    if (!$this->_matches_filter($filename, $_description, $search, $type_filter)) {
                        continue;
                    }
                }

                if ($is_directory) {
                    $filesize = get_directory_size($_full);
                    $timestamp = null;
                } else {
                    $filesize = filesize($_full);
                    $timestamp = filemtime($_full);
                }

                $file_map = [
                    'filename' => $is_directory ? ($filename . '/') : $filename,
                    'subpath' => $_subpath,
                    '_description' => $_description,
                    '_size' => $filesize,
                    '_time' => $timestamp,
                    'submitter' => isset($db_row) ? $db_row['the_member'] : null,
                    'is_directory' => $is_directory,
                ];
                if ($is_directory) {
                    $directories[] = $file_map;
                } else {
                    $files[] = $file_map;
                }
            }
        }

        // Sorting
        @sort_maps_by($directories, 'filename');
        switch ($order) {
            case 'time':
                @sort_maps_by($files, '_time');
                break;
            case 'name':
                @sort_maps_by($files, 'filename');
                break;
            case 'size':
                @sort_maps_by($files, '_size');
                break;
        }
        if ($direction == 'DESC') {
            $files = array_reverse($files);
        }
        $files = array_merge($directories, $files);

        $something_editable = false;

        // Pagination
        $max_rows = count($files);
        $start = get_param_integer('start', 0);
        $max = get_param_integer('max', 50);
        $files = array_slice($files, $start, $max);

        $thumbnails = [];

        if (!empty($files)) { // If there are some files
            require_code('templates_columned_table');
            $header_row = columned_table_header_row([
                do_lang_tempcode('FILENAME'),
                do_lang_tempcode('DESCRIPTION'),
                do_lang_tempcode('menus:LINK'),
                do_lang_tempcode('SUBMITTER'),
                do_lang_tempcode('DATE_TIME'),
                do_lang_tempcode('ACTIONS'),
                do_lang_tempcode('CHOOSE'),
            ]);

            $url = '';

            $rows = new Tempcode();
            foreach ($files as $i => $file) {
                $filename = $file['filename'];
                $_subpath = $file['subpath'];
                $_full = get_custom_file_base() . '/uploads/filedump' . $_subpath . $filename;

                $_description = $file['_description'];
                if ($_description != '') {
                    $description = make_string_tempcode($_description);
                    $description_2 = $description;
                } else {
                    $description = new Tempcode();
                    $description_2 = ($is_directory) ? do_lang_tempcode('FOLDER') : new Tempcode();
                }

                $db_row = isset($db_rows[$_subpath][$filename]) ? $db_rows[$_subpath][$filename] : null;

                $choosable = (($db_row !== null) && ($db_row['the_member'] == get_member())) || (has_privilege(get_member(), 'delete_anything_filedump'));
                if ($choosable) {
                    $something_editable = true;
                }

                $width = null;
                $height = null;
                if (is_image($_full, IMAGE_CRITERIA_WEBSAFE, true)) {
                    $dims = cms_getimagesize($_full);
                    if ($dims !== false) {
                        list($width, $height) = $dims;
                    }
                }

                $file += [
                    'description' => $description,
                    'description_2' => $description_2,
                    'width' => $width,
                    'height' => $height,
                    'size' => clean_file_size($file['_size']),
                    'date' => ($file['_time'] === null) ? null : get_timezoned_date($file['_time']),
                    'choosable' => $choosable,
                ];

                if ($file['is_directory']) { // Directory
                    $_url = build_url(['page' => '_SELF', 'subpath' => $_subpath . $filename, 'sort' => $sort, 'type_filter' => $type_filter, 'search' => $search, 'recurse' => $recurse], '_SELF');
                    $url = $_url->evaluate();
                    $_listing_url = build_url(['page' => '_SELF', 'subpath' => $_subpath . $filename, 'sort' => $sort, 'type_filter' => $type_filter, 'search' => $search, 'recurse' => $recurse], '_SELF', [], false, false, false, 'tab--listing');
                    $listing_url = $_listing_url->evaluate();

                    $is_image = false;

                    $image_url = find_theme_image('icons/admin/view_this_category');

                    $embed_url = null;
                } else { // File
                    $url = get_custom_base_url() . '/uploads/filedump' . str_replace('%2F', '/', rawurlencode($_subpath . $filename));
                    $listing_url = $url;

                    if ((is_image($url, IMAGE_CRITERIA_WEBSAFE | IMAGE_CRITERIA_GD_READ, true)) || (is_image($url, IMAGE_CRITERIA_WEBSAFE | IMAGE_CRITERIA_VECTOR, true))) {
                        $is_image = true;
                        $image_url = $url;
                    } else {
                        $is_image = false;
                        $image_url = find_theme_image('no_image');
                    }

                    $embed_url = build_url(['page' => '_SELF', 'type' => 'embed', 'subpath' => $_subpath, 'file' => $filename], '_SELF');
                }

                $choose_action = new Tempcode();
                if ($file['choosable']) {
                    $choose_action->attach(do_template('COLUMNED_TABLE_ROW_CELL_TICK', [
                        '_GUID' => 'd5085d4d602d24f7df25bcaf24db0d79',
                        'LABEL' => do_lang_tempcode('CHOOSE'),
                        'NAME' => 'select_' . strval($i),
                        'VALUE' => rtrim($filename, '/'),
                        'HIDDEN' => form_input_hidden('subpath_file_' . strval($i), $_subpath),
                        'TICKED' => false,
                    ]));
                }

                // Thumbnail
                $thumbnails[] = [
                    'FILENAME' => $filename,
                    'SUBPATH' => $_subpath,
                    'IMAGE_URL' => $image_url,
                    'IS_IMAGE' => $is_image,
                    'URL' => $url,
                    'DESCRIPTION' => $file['description_2'],
                    '_SIZE' => ($file['_size'] === null) ? '' : strval($file['_size']),
                    'SIZE' => $file['size'],
                    '_TIME' => ($file['_time'] === null) ? '' : strval($file['_time']),
                    'DATE' => ($file['date'] === null) ? '' : $file['date'],
                    'WIDTH' => ($file['width'] === null) ? '' : strval($file['width']),
                    'HEIGHT' => ($file['height'] === null) ? '' : strval($file['height']),
                    'IS_DIRECTORY' => $file['is_directory'],
                    'CHOOSABLE' => $file['choosable'],
                    'ACTIONS' => $choose_action,
                    'EMBED_URL' => $embed_url,
                ];

                // Editable filename
                $filename_field = do_template('COLUMNED_TABLE_ROW_CELL_LINE', [
                    '_GUID' => 'bce082b134f751615785189bf1cedbe2',
                    'LABEL' => do_lang_tempcode('FILENAME'),
                    'NAME' => 'filename_value_' . strval($i),
                    'VALUE' => rtrim($filename, '/'),
                    'HIDDEN_NAME' => 'filename_file_' . strval($i),
                    'HIDDEN_VALUE' => rtrim($filename, '/'),
                ]);

                // Editable description
                $description_field = do_template('COLUMNED_TABLE_ROW_CELL_LINE', [
                    '_GUID' => '22ef464010277ceedb72f8f38f897af6',
                    'LABEL' => do_lang_tempcode('DESCRIPTION'),
                    'NAME' => 'description_value_' . strval($i),
                    'VALUE' => $file['description'],
                    'HIDDEN_NAME' => 'description_file_' . strval($i),
                    'HIDDEN_VALUE' => rtrim($filename, '/'),
                ]);

                // Size
                if ($file['width'] !== null) {
                    $size = do_lang_tempcode('FILEDUMP_SIZE', escape_html($file['size']), escape_html(strval($file['width'])), escape_html(strval($file['height'])));
                } else {
                    $size = make_string_tempcode(escape_html($file['size']));
                }
                $size = hyperlink($listing_url, $size, !$file['is_directory']/*files go to new window*/, false);

                // Submitter
                if ($file['submitter'] !== null) {
                    $owner = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($file['submitter']);
                    if ($owner === null) {
                        $owner = do_lang_tempcode('DELETED');
                    }
                } else {
                    $owner = do_lang_tempcode('UNKNOWN');
                }

                // Listing row
                $rows->attach(columned_table_row([
                    $filename_field,
                    $description_field,
                    $size,
                    $owner,
                    ($file['date'] === null) ? do_lang_tempcode('NA') : make_string_tempcode(escape_html($file['date'])),
                    ($embed_url === null) ? ($file['is_directory'] ? do_lang_tempcode('IS_DIRECTORY') : new Tempcode()) : hyperlink($embed_url, do_lang_tempcode('_FILEDUMP_EMBED'), false, false),
                    $choose_action,
                ], false));
            }

            $listing = do_template('COLUMNED_TABLE', ['_GUID' => '1c0a91d47c5fc8a7c2b35c7d9b36132f', 'HEADER_ROW' => $header_row, 'ROWS' => $rows, 'NONRESPONSIVE' => false]);
        } else {
            $listing = new Tempcode();
        }

        // Find directories we could move stuff into / upload to
        $directories = get_directory_contents(get_custom_file_base() . '/uploads/filedump', '', IGNORE_ACCESS_CONTROLLERS, true, false);
        $directories[] = '';
        cms_mb_sort($directories, SORT_FLAG_CASE | SORT_NATURAL);
        $other_directories = $directories;
        $filtered_directories = $directories;
        if ($recurse == 0) {
            foreach ($other_directories as $i => $directory) {
                if ('/' . $directory . (($directory == '') ? '' : '/') == $subpath) {
                    unset($other_directories[$i]);
                    break;
                }
            }
        }
        $filtered_directories_misses = [];
        foreach ($filtered_directories as $i => $directory) {
            if (!$this->_folder_search('/' . $directory . (($directory == '') ? '' : '/'), '', $search, $type_filter, false)) {
                unset($filtered_directories[$i]);
                $filtered_directories_misses[] = $directory;
            }
        }

        // Do a form so people can upload their own stuff
        if (has_privilege(get_member(), 'upload_filedump')) {
            $post_url = build_url(['page' => '_SELF', 'type' => 'add', 'uploading' => 1], '_SELF');

            $submit_name = do_lang_tempcode('FILEDUMP_UPLOAD');

            $max_filesize = floatval(get_max_file_size());
            $text = new Tempcode();
            if ($max_filesize < 30.0) {
                require_code('files2');
                $text->attach(get_maximum_upload_message($max_filesize));
            }

            $fields = new Tempcode();
            url_default_parameters__enable();
            $fields->attach(form_input_upload_multi(do_lang_tempcode('FILES'), do_lang_tempcode('DESCRIPTION_FILES'), 'files', true));
            $fields->attach(form_input_line(do_lang_tempcode('DESCRIPTION'), do_lang_tempcode('DESCRIPTION_DESCRIPTION_FILES'), 'description', '', false));
            $list = new Tempcode();
            foreach ($directories as $directory) {
                $_directory = '/' . $directory . (($directory == '') ? '' : '/');
                $list->attach(form_input_list_entry($_directory, ($_directory == $subpath), '/' . $directory));
            }
            $fields->attach(form_input_list(do_lang_tempcode('FOLDER'), '', 'subpath', $list));

            url_default_parameters__disable();

            $hidden = new Tempcode();
            handle_max_file_size($hidden);

            $upload_form = do_template('FORM', [
                '_GUID' => '70279f3714ec90a5b3defec04a357b11',
                'TABINDEX' => strval(get_form_field_tabindex()),
                'SKIP_REQUIRED' => true,
                'HIDDEN' => $hidden,
                'TEXT' => $text,
                'FIELDS' => $fields,
                'SUBMIT_NAME' => $submit_name,
                'SUBMIT_ICON' => 'admin/add',
                'URL' => $post_url,
            ]);
        } else {
            $upload_form = new Tempcode();
        }

        // Do a form so people can make folders
        if (has_privilege(get_member(), 'upload_filedump')) {
            $post_url = build_url(['page' => '_SELF', 'type' => 'add_category'], '_SELF');

            $submit_name = do_lang_tempcode('FILEDUMP_CREATE_FOLDER');

            $fields = new Tempcode();
            $fields->attach(form_input_line(do_lang_tempcode('NAME'), do_lang_tempcode('DESCRIPTION_FOLDER_NAME'), 'folder_name', '', true));
            $fields->attach(form_input_line(do_lang_tempcode('DESCRIPTION'), new Tempcode(), 'description', '', false));

            $hidden = form_input_hidden('subpath', $subpath);

            $create_folder_form = do_template('FORM', [
                '_GUID' => '043f9b595d3699b7d8cd7f2284cdaf98',
                'TABINDEX' => strval(get_form_field_tabindex()),
                'SKIP_REQUIRED' => true,
                'SECONDARY_FORM' => true,
                'HIDDEN' => $hidden,
                'TEXT' => '',
                'FIELDS' => $fields,
                'SUBMIT_NAME' => $submit_name,
                'SUBMIT_ICON' => 'admin/add_one_category',
                'URL' => $post_url,
            ]);
        } else {
            $create_folder_form = new Tempcode();
        }

        $post_url = build_url(['page' => '_SELF', 'type' => 'mass', 'redirect' => get_self_url(true, false, ['filename' => null/*Don't auto-open the embed overlay*/])], '_SELF');

        require_code('templates_pagination');
        $pagination_listing = pagination(do_lang_tempcode('FILES'), $start, 'start', $max, 'max', $max_rows, false, null, null, 'tab--listing');
        $pagination_thumbnails = pagination(do_lang_tempcode('FILES'), $start, 'start', $max, 'max', $max_rows, false, null, null, 'tab--thumbnails');

        return do_template('FILEDUMP_SCREEN', [
            '_GUID' => '3f49a8277a11f543eff6488622949c84',
            'TITLE' => $this->title,
            'SUBPATH' => $subpath,
            'THUMBNAILS' => $thumbnails,
            'LISTING' => $listing,
            'UPLOAD_FORM' => $upload_form,
            'CREATE_FOLDER_FORM' => $create_folder_form,
            'TYPE_FILTER' => $type_filter,
            'SEARCH' => $search,
            'SORT' => $sort,
            'PAGINATION_LISTING' => $pagination_listing,
            'PAGINATION_THUMBNAILS' => $pagination_thumbnails,
            'POST_URL' => $post_url,
            'DIRECTORIES' => $directories,
            'OTHER_DIRECTORIES' => $other_directories,
            'FILTERED_DIRECTORIES' => $filtered_directories,
            'FILTERED_DIRECTORIES_MISSES' => $filtered_directories_misses,
            'SOMETHING_EDITABLE' => $something_editable,
        ]);
    }

    /**
     * Find what matches the search filter. If there is no filter, anything will match.
     *
     * @param  PATH $subpath Folder path
     * @param  string $description Folder description
     * @param  string $search Search filter
     * @param  string $type_filter Type filter
     * @set images videos audios others
     * @param  boolean $recursive Whether to search recursively
     * @return boolean Whether it passes the filter
     */
    public function _folder_search(string $subpath, string $description, string $search, string $type_filter, bool $recursive = true) : bool
    {
        if ($type_filter == '') {
            if ($search != '') {
                if ((stripos(basename($subpath), $search) !== false) || (stripos($description, $search) !== false)) { // Directory itself matches
                    return true;
                }
            } else {
                return true;
            }
        }

        $db_rows = list_to_map('name', $GLOBALS['SITE_DB']->query_select('filedump', ['*'], ['subpath' => cms_mb_substr($subpath, 0, 80)]));

        $handle = opendir(get_custom_file_base() . '/uploads/filedump' . $subpath);
        while (false !== ($filename = readdir($handle))) {
            if (!should_ignore_file('uploads/filedump' . $subpath . $filename, IGNORE_ACCESS_CONTROLLERS | IGNORE_HIDDEN_FILES)) {
                $_full = get_custom_file_base() . '/uploads/filedump' . $subpath . $filename;
                if (!file_exists($_full)) {
                    continue; // Broken symlink or (?) permission problem
                }

                $is_directory = !is_file($_full);

                $db_row = isset($db_rows[$filename]) ? $db_rows[$filename] : null;

                $_description = isset($db_row) ? get_translated_text($db_row['the_description']) : '';

                if (($is_directory) && ($recursive)) {
                    if ($this->_folder_search($subpath . $filename . '/', $_description, $search, $type_filter, $recursive)) {
                        return true; // Look deeper
                    }
                } else {
                    if ($this->_matches_filter($filename, $_description, $search, $type_filter)) {
                        return true; // File under matches
                    }
                }
            }
        }
        closedir($handle);

        return false;
    }

    /**
     * Find whether a file matches the search filter. If there is no filter, anything will match.
     *
     * @param  ID_TEXT $filename Filename
     * @param  string $_description File description
     * @param  string $search Search filter
     * @param  string $type_filter Type filter
     * @set images videos audios others
     * @return boolean Whether it passes the filter
     */
    public function _matches_filter(string $filename, string $_description, string $search, string $type_filter) : bool
    {
        if ($search != '') {
            if ((stripos($filename, $search) === false) && (stripos($_description, $search) === false)) {
                return false;
            }
        }

        switch ($type_filter) {
            case 'images':
                if (!is_image($filename, IMAGE_CRITERIA_WEBSAFE, true)) {
                    return false;
                }
                break;

            case 'videos':
                if ((cms_strtolower_ascii(substr($filename, -4)) == '.mp3') || (cms_strtolower_ascii(substr($filename, -4)) == '.wav') || (cms_strtolower_ascii(substr($filename, -4)) == '.ogg')) {
                    return false;
                }
                if (!is_video($filename, true)) {
                    return false;
                }
                break;

            case 'audios':
                if (!is_audio($filename, false)) {
                    return false;
                }
                break;

            case 'others':
                if (is_image($filename, IMAGE_CRITERIA_WEBSAFE, true)) {
                    return false;
                }
                if (is_video($filename, true)) {
                    return false;
                }
                if ((cms_strtolower_ascii(substr($filename, -4)) == '.mp3') || (cms_strtolower_ascii(substr($filename, -4)) == '.wav') || (cms_strtolower_ascii(substr($filename, -4)) == '.ogg')) {
                    return false;
                }
                break;
        }

        return true;
    }

    /**
     * The embed user interface for the file dump.
     *
     * @return Tempcode The UI
     */
    public function do_embed() : object
    {
        require_code('form_templates');
        require_code('images');

        $subpath = get_param_string('subpath', '', INPUT_FILTER_GET_COMPLEX);
        $file = get_param_string('file', '', INPUT_FILTER_GET_COMPLEX);

        $url = get_custom_base_url() . '/uploads/filedump' . str_replace('%2F', '/', rawurlencode($subpath . $file));
        $path = get_custom_file_base() . '/uploads/filedump' . $subpath . $file;

        $generated = null;
        $rendered = null;
        if (isset($_POST['description'])) {
            $generated = '[media';
            $param = post_param_string('description', '');
            if ($param != '') {
                $generated .= ' description="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('type', '');
            if ($param != '') {
                $generated .= ' type="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('framed', '0');
            if ($param != '') {
                $generated .= ' framed="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('width', '');
            if ($param != '') {
                $generated .= ' width="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('height', '');
            if ($param != '') {
                $generated .= ' height="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('align', '');
            if ($param != '') {
                $generated .= ' align="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('float', '');
            if ($param != '') {
                $generated .= ' float="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('thumb', '0');
            if ($param != '') {
                $generated .= ' thumb="' . comcode_escape($param) . '"';
            }
            $param = post_param_string('thumb_url', '', INPUT_FILTER_URL_GENERAL);
            if ($param != '') {
                $generated .= ' thumb_url="' . comcode_escape($param) . '"';
            }
            $generated .= ']uploads/filedump' . $subpath . $file . '[/media]';

            $rendered = comcode_to_tempcode($generated);
        }

        $_description = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_description', ['name' => cms_mb_substr($file, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
        if ($_description === null) {
            $description = post_param_string('description', '');
        } else {
            $description = post_param_string('description', get_translated_text($_description));
        }

        require_lang('comcode');

        $adv = do_lang('BLOCK_IND_ADVANCED');

        $fields = new Tempcode();

        $fields->attach(form_input_line_comcode(do_lang_tempcode('COMCODE_TAG_attachment_PARAM_description_TITLE'), do_lang('COMCODE_TAG_attachment_PARAM_description'), 'description', $description, false));

        $_description = do_lang('COMCODE_TAG_attachment_PARAM_type');
        if (substr($_description, 0, strlen($adv) + 1) == $adv) {
            $_description = substr($_description, 0, strlen($adv) + 1);
        }
        $list = new Tempcode();
        $list->attach(form_input_list_entry('', false, do_lang('MEDIA_TYPE_')));
        require_code('media_renderer');
        $hooks = find_all_hook_obs('systems', 'media_rendering', 'Hook_media_rendering_');
        foreach ($hooks as $hook => $ob) {
            $hooks[$hook] = $ob->get_type_label();
        }
        asort($hooks);
        foreach ($hooks as $option_val => $option_label) {
            $list->attach(form_input_list_entry($option_val, ($option_val == post_param_string('type', is_image($file, IMAGE_CRITERIA_WEBSAFE, true) ? 'image_websafe' : '')), $option_label));
        }
        $fields->attach(form_input_list(do_lang_tempcode('COMCODE_TAG_attachment_PARAM_type_TITLE'), $_description, 'type', $list, null, false, false));

        $fields->attach(form_input_tick(do_lang_tempcode('COMCODE_TAG_attachment_PARAM_framed_TITLE'), do_lang_tempcode('COMCODE_TAG_attachment_PARAM_framed'), 'framed', post_param_integer('framed', 0) == 1));

        $fields->attach(form_input_integer(do_lang_tempcode('WIDTH'), do_lang_tempcode('COMCODE_TAG_attachment_PARAM_width'), 'width', post_param_integer('width', null), false));

        $fields->attach(form_input_integer(do_lang_tempcode('HEIGHT'), do_lang_tempcode('COMCODE_TAG_attachment_PARAM_height'), 'height', post_param_integer('height', null), false));

        /*
        $_description = do_lang ('COMCODE_TAG_attachment_PARAM_align');
        if (substr($_description, 0, strlen($adv) + 1) == $adv) {
            $_description = substr($_description, 0, strlen($adv) + 1);
        }
        $list = new Tempcode();
        foreach (explode('|', $_description) as $option) {
            list($option_val, $option_label) = explode('=', $option, 2);
            $list->attach(form_input_list_entry($option_val, ($option_val == post_param_string('align', '')), $option_label));
        }
        $fields->attach(form_input_list(do_lang_tempcode ('COMCODE_TAG_attachment_PARAM_align_TITLE'), '', 'align', $list, null, false, false));
        */

        $_description = do_lang('COMCODE_TAG_attachment_PARAM_float');
        if (substr($_description, 0, strlen($adv) + 1) == $adv) {
            $_description = substr($_description, 0, strlen($adv) + 1);
        }
        $list = new Tempcode();
        foreach (explode('|', $_description) as $option) {
            list($option_val, $option_label) = explode('=', $option, 2);
            $list->attach(form_input_list_entry($option_val, ($option_val == post_param_string('float', '')), $option_label));
        }
        $fields->attach(form_input_list(do_lang_tempcode('COMCODE_TAG_attachment_PARAM_float_TITLE'), '', 'float', $list, null, false, false));

        $_description = do_lang('COMCODE_TAG_attachment_PARAM_thumb');
        if (substr($_description, 0, strlen($adv) + 1) == $adv) {
            $_description = substr($_description, 0, strlen($adv) + 1);
        }
        $_description = cms_preg_replace_safe('#\s*' . do_lang('BLOCK_IND_DEFAULT') . ': ["\']([^"]*)["\'](?-U)\.?(?U)#Ui', '', $_description);
        $thumb_ticked = true;
        if (isset($_POST['description'])) {
            $thumb_ticked = (post_param_integer('thumb', 0) == 1);
        }
        $fields->attach(form_input_tick(do_lang_tempcode('COMCODE_TAG_attachment_PARAM_thumb_TITLE'), cms_mb_ucfirst(substr($_description, 12)), 'thumb', $thumb_ticked));

        $_description = do_lang('COMCODE_TAG_attachment_PARAM_thumb_url');
        if (substr($_description, 0, strlen($adv) + 1) == $adv) {
            $_description = substr($_description, 0, strlen($adv) + 1);
        }
        $fields->attach(form_input_line_comcode(do_lang_tempcode('COMCODE_TAG_attachment_PARAM_thumb_url_TITLE'), $_description, 'thumb_url', post_param_string('thumb_url', null, INPUT_FILTER_URL_GENERAL), false));

        $form = do_template('FORM', [
            '_GUID' => 'b1502bd870aded49d27d7478806d53ed',
            'FIELDS' => $fields,
            'HIDDEN' => '',
            'TEXT' => '',
            'URL' => get_self_url(),
            'SUBMIT_NAME' => do_lang_tempcode('GENERATE_COMCODE'),
            'SUBMIT_ICON' => 'buttons/proceed',
            'TARGET' => '_self',
        ]);

        $image_sizes = null;
        $is_image = false;
        if (is_image($file, IMAGE_CRITERIA_GD_READ | IMAGE_CRITERIA_WEBSAFE, true)) {
            $size = cms_getimagesize($path);
            if (($size !== false) && ($size[0] !== null) && ($size[1] !== null)) {
                $ratio = floatval($size[1]) / floatval($size[0]);

                $_image_sizes = [];
                if (intval(get_option('thumb_width')) < $size[0]) {
                    $_image_sizes[intval(get_option('thumb_width'))] = 'FILEDUMP_IMAGE_URLS_SMALL';
                }
                if (730 < $size[0]) {
                    $_image_sizes[730] = 'FILEDUMP_IMAGE_URLS_MEDIUM';
                }
                $_image_sizes[$size[0]] = 'FILEDUMP_IMAGE_URLS_LARGE';

                $image_sizes = [];
                foreach ($_image_sizes as $width => $lng_str) {
                    $size_url = make_string_tempcode($url);
                    if (is_image($file, IMAGE_CRITERIA_RASTER)) {
                        if ($width != $size[0]) {
                            $size_url = symbol_tempcode('THUMBNAIL', [$url, strval($width)]);
                        }
                    }

                    $height = intval(floatval($width) * $ratio);
                    $image_sizes[] = [
                        'LABEL' => do_lang_tempcode($lng_str, escape_html(strval($width)), escape_html(strval($height))),
                        'SIZE_URL' => $size_url,
                        'SIZE_WIDTH' => strval($width),
                        'SIZE_HEIGHT' => strval($height),
                    ];
                }
            }

            $is_image = true;
        }

        $_existing_count = find_filedump_links($subpath . $file);
        if (isset($_existing_count[$subpath . $file])) {
            $existing_count = count($_existing_count[$subpath . $file]['references']);
        } else {
            $existing_count = 0;
        }

        return do_template('FILEDUMP_EMBED_SCREEN', [
            '_GUID' => 'f82e0225f9b94fd96c5f61eac9c56e3d',
            'TITLE' => $this->title,
            'FORM' => $form,
            'GENERATED' => $generated,
            'RENDERED' => $rendered,
            'URL' => $url,
            'IMAGE_SIZES' => $image_sizes,
            'EXISTING_COUNT' => strval($existing_count),
            'DESCRIPTION' => $description,
            'IMAGE' => $is_image,
        ]);
    }

    /**
     * The actualiser for handling mass actions.
     *
     * @return Tempcode The UI
     */
    public function do_mass() : object
    {
        $action = post_param_string('filedump_action');
        switch ($action) {
            case 'zip':
                require_code('zip');
                $file_array = [];
                break;

            case 'edit':
            case 'delete':
                break;

            default:
                $target = $action;
                if ($target == '') {
                    warn_exit(do_lang_tempcode('SELECT_AN_ACTION'));
                }

                $action = 'move';
                break;
        }

        $files_str = '';
        if ($action != 'edit') {
            $files = [];
            foreach (array_keys($_POST) as $key) {
                $matches = [];
                if (preg_match('#^select_(\d+)$#', $key, $matches) != 0) {
                    $subpath = post_param_string('subpath_file_' . $matches[1]);

                    $file = post_param_string($key);
                    $files[] = [$file, $subpath];

                    if ($files_str != '') {
                        $files_str .= ', ';
                    }
                    $files_str .= $file;
                }
            }
        } else {
            $files = [];
            $descriptions = [];
            foreach (array_keys($_POST) as $key) {
                $matches = [];
                if (preg_match('#^description_file_(\d+)$#', $key, $matches) != 0) {
                    $subpath = post_param_string('subpath_file_' . $matches[1]);

                    $file = post_param_string('description_file_' . $matches[1]);
                    $files[] = [$file, $subpath];

                    if ($files_str != '') {
                        $files_str .= ', ';
                    }
                    $files_str .= $file;

                    $description = post_param_string('description_value_' . $matches[1], '');
                    $descriptions[$subpath . $file] = $description;
                }
            }

            foreach (array_keys($_POST) as $key) {
                $matches = [];
                if (preg_match('#^filename_file_(\d+)$#', $key, $matches) != 0) {
                    $subpath = post_param_string('subpath_file_' . $matches[1]);

                    $old_filename = post_param_string('filename_file_' . $matches[1]);
                    $new_filename = post_param_string('filename_value_' . $matches[1]);
                    if (($new_filename != '') && ($old_filename != $new_filename)) {
                        $owner = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_member', ['name' => cms_mb_substr($old_filename, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
                        if ((($owner !== null) && ($owner == get_member())) || (has_privilege(get_member(), 'delete_anything_filedump'))) {
                            $old_filepath = get_custom_file_base() . '/uploads/filedump' . $subpath . $old_filename;
                            $new_filepath = get_custom_file_base() . '/uploads/filedump' . $subpath . $new_filename;

                            if (file_exists($new_filepath)) {
                                warn_exit(do_lang_tempcode('OVERWRITE_ERROR'));
                            }
                            rename($old_filepath, $new_filepath);
                            sync_file_move($old_filepath, $new_filepath);
                            $GLOBALS['SITE_DB']->query_update('filedump', ['name' => cms_mb_substr($new_filename, 0, 80)], ['name' => cms_mb_substr($old_filename, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)], '', 1);

                            foreach ($files as $i => $_file) {
                                if ($_file[1] . $_file[0] == $subpath . $old_filename) {
                                    $files[$i][0] = $new_filename;
                                }
                            }

                            foreach ($descriptions as $filepath => $description) {
                                if ($filepath == $subpath . $old_filename) {
                                    unset($descriptions[$subpath . $old_filename]);
                                    $descriptions[$subpath . $new_filename] = $description;
                                }
                            }
                        }
                    }
                }
            }
        }

        if ($action != 'edit') {
            if (empty($files)) {
                warn_exit(do_lang_tempcode('NOTHING_SELECTED'), false, false, 400);
            }
        }

        // Confirm
        if ((post_param_integer('confirmed', 0) != 1) && ($action != 'zip') && ($action != 'edit'/*edit too trivial/specific to need a confirm*/)) {
            $url = get_self_url();

            switch ($action) {
                case 'delete':
                    $text = do_lang_tempcode('CONFIRM_DELETE', escape_html($files_str));
                    break;

                case 'move':
                    $text = do_lang_tempcode('CONFIRM_MOVE', escape_html($files_str), $target);
                    break;
            }

            $hidden = build_keep_post_fields();
            $hidden->attach(form_input_hidden('confirmed', '1'));

            return do_template('CONFIRM_SCREEN', ['_GUID' => '19503cf5dc795b9c85d26702b79e3202', 'TITLE' => $this->title, 'FIELDS' => $hidden, 'PREVIEW' => $text, 'URL' => $url]);
        }

        // Perform action(s)
        foreach ($files as $_file) {
            list($file, $subpath) = $_file;

            $where = ['name' => cms_mb_substr($file, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)];

            $owner = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_member', $where);
            if ((($owner !== null) && ($owner == get_member())) || (has_privilege(get_member(), 'delete_anything_filedump'))) {
                $is_directory = is_dir(get_custom_file_base() . '/uploads/filedump' . $subpath . $file);
                $path = get_custom_file_base() . '/uploads/filedump' . $subpath . $file;

                switch ($action) {
                    case 'zip':
                        if ($is_directory) {
                            require_code('files2');
                            foreach (get_directory_contents($path) as $d_path) {
                                $file_array[] = [
                                    'time' => filemtime($path . '/' . $d_path),
                                    'full_path' => $path . '/' . $d_path,
                                    'name' => ltrim($subpath . $file, '/') . '/' . $d_path,
                                ];
                            }
                        } else {
                            $file_array[] = [
                                'time' => filemtime($path),
                                'full_path' => $path,
                                'name' => ltrim($subpath . $file, '/'),
                            ];
                        }
                        break;

                    case 'edit':
                        $description = $descriptions[$subpath . $file];
                        $test = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_description', $where);
                        if ($test !== null) {
                            $map = lang_remap('the_description', $test, $description);
                            $GLOBALS['SITE_DB']->query_update('filedump', $map, $where);
                        } else {
                            $map = [
                                'name' => cms_mb_substr($file, 0, 80),
                                'subpath' => cms_mb_substr($subpath, 0, 80),
                                'the_member' => get_member(),
                            ];
                            $map += insert_lang('the_description', $description, 3);
                            $GLOBALS['SITE_DB']->query_insert('filedump', $map);
                        }
                        break;

                    case 'delete':
                        $test = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_description', $where);
                        if ($test !== null) {
                            delete_lang($test);
                        }

                        if ($is_directory) {
                            $success = @deldir_contents($path);
                            if (!$success) {
                                warn_exit(do_lang_tempcode('FOLDER_DELETE_ERROR'));
                            }

                            log_it('FILEDUMP_DELETE_FOLDER', $file, $subpath);
                        } else {
                            @unlink($path) or intelligent_write_error($path);

                            log_it('FILEDUMP_DELETE_FILE', $file, $subpath);
                        }
                        sync_file($path);

                        break;

                    case 'move':
                        $path_target = get_custom_file_base() . '/uploads/filedump' . $target . $file;
                        if (file_exists($path_target)) {
                            warn_exit(do_lang_tempcode('ALREADY_EXISTS', escape_html($path_target)));
                        }
                        @rename($path, $path_target) or intelligent_write_error($path);
                        sync_file_move($path, $path_target);

                        $test = $GLOBALS['SITE_DB']->query_update('filedump', ['subpath' => cms_mb_substr($target, 0, 80)], $where, '', 1);

                        update_filedump_links($subpath . $file, $target . $file);

                        log_it('FILEDUMP_MOVE', $subpath . $file, $target . $file);

                        break;
                }
            } else {
                access_denied('I_ERROR');
            }
        }

        if ($action == 'zip') {
            cms_ini_set('ocproducts.xss_detect', '0');

            header('Content-Type: application/octet-stream');
            header('Content-Disposition: attachment; filename="filedump-selection.zip"');

            cms_ob_end_clean();
            cms_ini_set('ocproducts.xss_detect', '0');

            create_zip_file('php://output', $file_array);

            $GLOBALS['SCREEN_TEMPLATE_CALLED'] = '';
            exit();
        }

        $redirect_url = get_param_string('redirect', false, INPUT_FILTER_URL_INTERNAL);

        return redirect_screen($this->title, $redirect_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The actualiser for adding a folder.
     *
     * @return Tempcode The UI
     */
    public function do_add_folder() : object
    {
        if (!has_privilege(get_member(), 'upload_filedump')) {
            access_denied('I_ERROR');
        }

        $name = filter_naughty(post_param_string('folder_name'));
        $subpath = filter_naughty(post_param_string('subpath'));

        if (file_exists(get_custom_file_base() . '/uploads/filedump' . $subpath . $name)) {
            warn_exit(do_lang_tempcode('FOLDER_OVERWRITE_ERROR'));
        }

        $full_path = get_custom_file_base() . '/uploads/filedump' . $subpath . $name;
        cms_file_put_contents_safe($full_path . '/index.html', '', FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE);

        $redirect_url = build_url(['page' => '_SELF', 'type' => 'browse', 'subpath' => $subpath], '_SELF');

        // Add description
        $test = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_description', ['name' => cms_mb_substr($name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
        if ($test !== null) {
            delete_lang($test);
            $GLOBALS['SITE_DB']->query_delete('filedump', ['name' => cms_mb_substr($name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)], '', 1);
        }
        $description = post_param_string('description', '');
        $map = [
            'name' => cms_mb_substr($name, 0, 80),
            'subpath' => cms_mb_substr($subpath, 0, 80),
            'the_member' => get_member(),
        ];
        $map += insert_lang('the_description', $description, 3);
        $GLOBALS['SITE_DB']->query_insert('filedump', $map);

        log_it('FILEDUMP_CREATE_FOLDER', $name, $subpath);

        return redirect_screen($this->title, $redirect_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The actualiser for uploading a file.
     *
     * @return Tempcode The UI
     */
    public function do_upload() : object
    {
        $subpath = filter_naughty(post_param_string('subpath'));
        $description = post_param_string('description', '');

        require_code('uploads');
        is_plupload(true);

        $new_files = [];
        $conflict_files = [];
        foreach ($_FILES as $attach_name => $file) {
            $error_msg = check_filedump_uploaded($file);
            if ($error_msg !== null) {
                attach_message($error_msg, 'warn');
                continue;
            }

            $filename = $file['name'];

            $tmp_path = $file['tmp_name'];

            $filedump_error_msg = add_filedump_file($subpath, $filename, $tmp_path, $description);
            if ($filedump_error_msg['conflict']) {
                $unsessioned_filename = null;
                $target_path = get_temporary_upload_path($attach_name, true, $unsessioned_filename);
                $last_modified = $filedump_error_msg['last_modified'];
                $conflict_files[] = [$filename, $unsessioned_filename, $last_modified, $filedump_error_msg['can_overwrite']];
                continue;
            } elseif ($filedump_error_msg['error'] !== null) {
                attach_message($filedump_error_msg['error'], 'warn');
                continue;
            }

            $new_files[] = $filename;
        }

        // Done...

        if (count($conflict_files) > 0) {
            require_code('form_templates');
            require_code('templates_results_table');

            $f = [do_lang_tempcode('FILENAME'), do_lang_tempcode('MODIFIED'), do_lang_tempcode('ACTIONS')];
            $header_row = results_header_row($f, []);

            $out = new Tempcode();
            $hidden = new Tempcode();
            $hidden->attach(form_input_hidden('subpath', $subpath));
            $hidden->attach(form_input_hidden('description', $description));

            foreach ($conflict_files as $index => $c_file) {
                list($final_filename, $unsessioned_filename, $last_modified, $can_overwrite) = $c_file;

                $c_name = 'a_file_' . $index;

                $_actions = new Tempcode();
                $_actions->attach(form_input_list_entry('leave_alone', true, do_lang_tempcode('ACTION_LEAVE_ALONE')));
                $_actions->attach(form_input_list_entry('rename', false, do_lang_tempcode('ACTION_RENAME')));
                $_actions->attach(form_input_list_entry('overwrite', false, do_lang_tempcode('ACTION_OVERWRITE'), false, !$can_overwrite, !$can_overwrite ? do_lang('ACTION_OVERWRITE_DISABLED_TITLE') : ''));
                $list = do_template('COLUMNED_TABLE_ROW_CELL_SELECT', [
                    '_GUID' => '3e62f96fe4484957ba66fe81bd304793',
                    'NAME' => $c_name,
                    'LABEL' => $final_filename,
                    'LIST' => $_actions,
                ]);

                $actions = new Tempcode();
                $actions->attach($list);

                $hidden->attach(form_input_hidden('n_file_' . $index, $final_filename));
                $hidden->attach(form_input_hidden('t_file_' . $index, $unsessioned_filename));

                $modified = get_timezoned_date_time_tempcode($last_modified);

                $g = [$final_filename, $modified, $actions];
                $out->attach(results_entry($g, false));
            }

            $results_table = results_table(do_lang_tempcode('OVERWRITE_ERROR'), 0, 'start', count($conflict_files), 'max', count($conflict_files), $header_row, $out);

            $submit_name = do_lang_tempcode('PROCEED');

            $url_map = ['page' => '_SELF', 'type' => 'add_resolved_conflicts'];
            $post_url = build_url($url_map, '_SELF');
            $text = do_lang_tempcode('DESCRIPTION_OVERWRITE_ERROR');

            $tpl = do_template('FORM_SCREEN', [
                '_GUID' => '5490648c4dd94049bc5d4c12ddb9f9d5',
                'SKIP_WEBSTANDARDS' => true,
                'HIDDEN' => $hidden,
                'TITLE' => $this->title,
                'URL' => $post_url,
                'FIELDS' => $results_table,
                'SUBMIT_ICON' => 'buttons/proceed',
                'SUBMIT_NAME' => $submit_name,
                'TEXT' => $text,
            ]);

            require_code('templates_internalise_screen');
            return internalise_own_screen($tpl);
        }

        $url_map = ['page' => '_SELF', 'subpath' => $subpath];
        if (count($new_files) == 1) {
            $url_map['filename'] = $new_files[0];
        }

        $redirect_url = build_url($url_map, '_SELF');
        return redirect_screen($this->title, $redirect_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Process chosen conflict actions by the user.
     *
     * @return Tempcode The result
     */
    public function do_uploaded_resolved_conflicts() : object
    {
        $subpath = filter_naughty(post_param_string('subpath'));
        $description = post_param_string('description', '');

        // Map chosen actions to their files
        $conflict_files_map = [];
        foreach ($_POST as $key => $value) {
            if (strpos($key, 'n_file_') === 0) {
                $final_filename = filter_naughty(post_param_string($key));
                $_index = str_replace('n_file_', '', $key);
                $temp_filename = filter_naughty(post_param_string('t_file_' . $_index));
                $specified_action = post_param_string('a_file_' . $_index);
                $conflict_files_map[$temp_filename] = [$final_filename, $specified_action];
            }
        }

        // Process conflicts
        $new_files = [];
        foreach ($conflict_files_map as $temp_filename => $data) {
            list($final_filename, $specified_action) = $data;

            $sessioned_filename = get_session_id() . '_' . $temp_filename;
            $sessioned_path = get_custom_file_base() . '/temp/' . $sessioned_filename;
            $nonsessioned_path = get_custom_file_base() . '/temp/' . $temp_filename;

            // Get rid of the session ID security before proceeding
            $test = @rename($sessioned_path, $nonsessioned_path);
            if (!$test) {
                return do_lang_tempcode('FILE_MOVE_ERROR', escape_html($final_filename), escape_html('temp'));
            }
            sync_file_move($sessioned_path, $nonsessioned_path);

            $filedump_error_msg = add_filedump_file($subpath, $final_filename, $nonsessioned_path, $description, true, true, $specified_action);

            // Do not prompt for conflicts again; fail them. Should not happen.
            if ($filedump_error_msg['error'] !== null) {
                attach_message($filedump_error_msg['error'], 'warn');
                continue;
            }

            $new_files[] = $final_filename;
        }

        $url_map = ['page' => '_SELF', 'subpath' => $subpath];
        if (count($new_files) == 1) {
            $url_map['filename'] = $new_files[0];
        }

        $redirect_url = build_url($url_map, '_SELF');
        return redirect_screen($this->title, $redirect_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Find URLs referenced that are broken.
     *
     * @return Tempcode The UI
     */
    public function broken() : object
    {
        if (!$GLOBALS['FORUM_DRIVER']->is_super_admin(get_member())) {
            access_denied('ADMIN_ONLY');
        }

        $broken = find_broken_filedump_links();

        require_code('form_templates');

        $hidden = new Tempcode();

        $fields = new Tempcode();
        $i = 0;
        foreach ($broken as $from => $to) {
            $pretty = do_lang_tempcode('FILEDUMP_BROKEN', escape_html(basename($from)));
            $description = do_lang_tempcode('DESCRIPTION_FILEDUMP_BROKEN', escape_html($from));
            $name = 'to_' . strval($i);

            $fields->attach(form_input_line($pretty, $description, $name, $to, false));

            $hidden->attach(form_input_hidden('from_' . strval($i), $from));

            $i++;
        }

        if (empty($broken)) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }

        $url = build_url(['page' => '_SELF', 'type' => '_broken'], '_SELF');

        return do_template('FORM_SCREEN', [
            '_GUID' => '1b13a7aaf187f10a077df5b2b79098c7',
            'TITLE' => $this->title,
            'FIELDS' => $fields,
            'HIDDEN' => $hidden,
            'URL' => $url,
            'TEXT' => '',
            'SUBMIT_NAME' => do_lang_tempcode('FIX_BROKEN_FILEDUMP_LINKS'),
            'SUBMIT_ICON' => 'menu/adminzone/tools/cleanup',
        ]);
    }

    /**
     * Fix URLs referenced that are broken.
     *
     * @return Tempcode The UI
     */
    public function _broken() : object
    {
        if (!$GLOBALS['FORUM_DRIVER']->is_super_admin(get_member())) {
            access_denied('ADMIN_ONLY');
        }

        foreach (array_keys($_POST) as $key) {
            $matches = [];
            if (preg_match('#^to_(\d+)$#', $key, $matches) != 0) {
                $from = post_param_string('from_' . $matches[1]);
                $to = post_param_string('to_' . $matches[1]);
                if ($to != '') {
                    update_filedump_links($from, $to);
                }
            }
        }

        return inform_screen($this->title, do_lang_tempcode('SUCCESS'));
    }
}
