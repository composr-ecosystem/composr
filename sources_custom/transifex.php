<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    addon_publish
 */

/*EXTRA FUNCTIONS: json_decode,json_encode*/

function init__transifex()
{
    define('TRANSLATE_PRIORITY_NORMAL', 0);
    define('TRANSLATE_PRIORITY_HIGH', 1);
    define('TRANSLATE_PRIORITY_URGENT', 2);
}

function convert_lang_code_to_transifex($lang)
{
    if ($lang == 'ZH-CN') {
        return 'zh'; // We use Google Translate name as a special case
    }

    $lang_parts = explode('_', $lang, 2);
    return strtolower($lang_parts[0]) . (isset($lang_parts[1]) ? ('_' . $lang_parts[1]) : '');
}

function transifex_push_script()
{
    $cli = ((php_sapi_name() == 'cli') && (empty($_SERVER['REMOTE_ADDR'])) && (empty($_ENV['REMOTE_ADDR'])));
    if (!$cli) {
        header('Content-type: text/plain');
        exit('Must run this script on command line, for security reasons');
    }

    push_to_transifex();

    header('Content-type: text/plain; charset=' . get_charset());
    safe_ini_set('ocproducts.xss_detect', '0');
    echo 'Done';
}

function push_to_transifex()
{
    $cli = ((php_sapi_name() == 'cli') && (empty($_SERVER['REMOTE_ADDR'])) && (empty($_ENV['REMOTE_ADDR'])));
    if (!$cli) {
        header('Content-type: text/plain; charset=' . get_charset());
        exit('Must run this script on command line, for security reasons');
    }

    require_code('addons');
    require_code('lang_compile');
    require_code('lang2');

    $GLOBALS['NO_QUERY_LIMIT'] = true;
    if (php_function_allowed('set_time_limit')) {
        set_time_limit(3000);
    }

    $project_slug = 'composr-cms-' . str_replace('.', '-', strval(cms_version()));

    // Find what language files are in what addons
    $addons = find_all_hooks('systems', 'addon_registry');
    $addon_files = array();
    $existing_language_authors = array();
    foreach (array_keys($addons) as $addon) {
        $info = read_addon_info($addon);
        $matches = array();
        foreach ($info['files'] as $file) {
            if (preg_match('#^lang(_custom)?/' . fallback_lang() . '/(\w+)\.ini$#', $file, $matches) != 0) {
                $addon_files[$matches[2]] = $addon;
            }
        }
        if (preg_match('#^language\_(\w+)$#', $addon, $matches) != 0) {
            $existing_language_authors[$matches[1]] = explode(', ', $info['author']);
        }
    }

    // Find language string descriptions
    $descriptions = get_lang_file_section(fallback_lang());

    // Create project if it does not already exist
    $args = array(
        'slug' => $project_slug,
        'name' => 'Composr CMS ' . strval(cms_version()),
        'source_language_code' => convert_lang_code_to_transifex(fallback_lang()),
        'description' => 'Community translation for Composr CMS ' . strval(cms_version()),
        'private' => false,
        'repository_url' => 'https://github.com/ocproducts/composr',
        'team'=> 39268, // This is a hard-coded known value for the ocProducts organisation
    );
    $test = _transifex('/projects/', 'POST', json_encode($args), false);
    if ($test[1] == '201') { // If creation happened
        // Create translations for all defined languages
        $langs = better_parse_ini_file(get_file_base() . '/lang/langs.ini');
        $failed_langs = array();
        foreach (array_keys($langs) as $lang) {
            if ($lang == fallback_lang()) {
                continue;
            }

            $test = _transifex('/project/' . $project_slug . '/language/' . convert_lang_code_to_transifex($lang) . '/', 'GET', null, false);
            if ($test[1] == '404') {
                if (isset($existing_language_authors[$lang])) {
                    $coordinators = $existing_language_authors[$lang];
                } else {
                    $coordinators = array();
                }
                $coordinators[] = get_value('transifex_username', null, true);

                $args = array(
                    'language_code' => convert_lang_code_to_transifex($lang),
                    'coordinators' => $coordinators,
                );
                $test = _transifex('/project/' . $project_slug . '/languages/?skip_invalid_username', 'POST', json_encode($args));

                // May not fail, not all languages supported (https://www.transifex.com/languages/)
                if ($test[1] == '400') {
                    $failed_langs[] = $lang; // We don't use this array, but it is useful for debugging. We try and prune any obscure languages from langs.ini that Transifex doesn't support (because very few people will speak them)
                }
            }
        }
    }

    // Upload translatable files
    $d = get_file_base() . '/lang/' . fallback_lang();
    $dh = opendir($d);
    $default_lang_files = array();
    while (($f = readdir($dh)) !== false) {
        if (substr($f, -4) == '.ini') {
            $default_lang_files[$f] = true;
            _push_to_transifex($f, $project_slug, false, $addon_files, $descriptions);
        }
    }
    closedir($dh);
    $d = get_file_base() . '/lang_custom/' . fallback_lang();
    $dh = opendir($d);
    while (($f = readdir($dh)) !== false) {
        if ((substr($f, -4) == '.ini') && (!isset($default_lang_files[$f]))) {
            _push_to_transifex($f, $project_slug, true, $addon_files, $descriptions);
        }
    }
    closedir($dh);
}

function _push_to_transifex($f, $project_slug, $custom, $addon_files, $descriptions)
{
    if ($custom) {
        $default_priority = TRANSLATE_PRIORITY_NORMAL;
        $category = 'non-bundled addon';
    } else {
        $default_priority = TRANSLATE_PRIORITY_HIGH;
        $category = 'core';
    }

    $_f = basename($f, '.ini');

    if (!isset($addon_files[$_f])) {
        return;
    }

    // Rebuild as a simpler .ini file
    $map = get_lang_file_map(fallback_lang(), $_f, !$custom);
    $c = '';
    foreach ($map as $key => $val) {
        $c .= $key . '=' . str_replace("\n", '\n', $val) . "\n";
    }

    // Upload
    $test = _transifex('/project/' . $project_slug . '/resource/' . $_f . '/', 'GET');
    $categories = array($category);
    if ($addon_files[$_f] != $category) {
        // Addon name
        $categories[] = $addon_files[$_f];
    }
    $args = array(
        'slug' => $_f,
        'name' => $_f,
        'accept_translations' => true,
        //'categories' => $categories, Does not work causes a 500 error
        'category' => implode(', ', $categories),
        'priority' => ($f == 'global' || $f == 'cns' || $f == 'news') ? TRANSLATE_PRIORITY_URGENT : $default_priority,
    );
    if ($test[1] == '200') {
        // Edit
        $test = _transifex('/project/' . $project_slug . '/resource/' . $_f . '/', 'PUT', json_encode($args));
        $test = _transifex('/project/' . $project_slug . '/resource/' . $_f . '/content/', 'PUT', json_encode(array('content' => $c)));
    } else {
        // Add
        $test = _transifex('/project/' . $project_slug . '/resources/', 'POST', json_encode($args + array('i18n_type' => 'INI', 'content' => $c)));
    }

    // Set metadata
    foreach ($map as $key => $val) {
        if (isset($descriptions[$key])) {
            $descrip = $descriptions[$key];
            $hash = md5($key . ':');
            $args = array('comment' => $descrip);
            $test = _transifex('/project/' . $project_slug . '/resource/' . $_f . '/source/' . $hash . '/', 'PUT', json_encode($args));
        }
    }

    // Upload translated files
    $d = get_file_base() . '/lang_custom';
    $dh = opendir($d);
    while (($lang = readdir($dh)) !== false) {
        if ((is_dir($d . '/' . $lang)) && (does_lang_exist($lang)) && ($lang != fallback_lang())) {
            if (is_file($d . '/' . $lang . '/' . $f)) {
                $map = get_lang_file_map($lang, $_f, false);
                $c2 = '';
                foreach ($map as $key => $val) {
                    $c2 .= $key . '=' . str_replace("\n", '\n', $val) . "\n";
                }

                $args = array('content' => $c2);
                _transifex('/project/' . $project_slug . '/resource/' . $_f . '/translation/' . convert_lang_code_to_transifex($lang) . '/', 'PUT', json_encode($args));
            }
        }
    }
    closedir($dh);
}

function transifex_pull_script()
{
    $version = get_param_string('version', strval(cms_version()));

    pull_from_transifex($version);

    header('Content-type: text/plain; charset=' . get_charset());
    safe_ini_set('ocproducts.xss_detect', '0');
    echo 'Done';
}

function pull_from_transifex($version)
{
    $project_slug = 'composr-cms-' . str_replace('.', '-', $version);

    $GLOBALS['NO_QUERY_LIMIT'] = true;
    if (php_function_allowed('set_time_limit')) {
        set_time_limit(3000);
    }

    require_code('lang2');
    require_code('files2');

    $langs = better_parse_ini_file(get_file_base() . '/lang/langs.ini');
    $lang_files = get_lang_files(fallback_lang());
    foreach (array_keys($langs) as $lang) {
        if ($lang != fallback_lang()) {
            $test = _transifex('/project/' . $project_slug . '/language/' . convert_lang_code_to_transifex($lang) . '/?details', 'GET', null, false);
            if ($test[1] == '200') {
                $language_details = json_decode($test[0], true);

                $files = array();

                foreach (array_keys($lang_files) as $_f) {
                    $test = _transifex('/project/' . $project_slug . '/resource/' . $_f . '/translation/' . convert_lang_code_to_transifex($lang) . '/', 'GET', null, true);
                    if ($test[1] == '200') {
                        $data = json_decode($test[0], true);

                        $dir = get_file_base() . '/lang_custom/' . $lang;
                        @mkdir($dir, 0777);
                        fix_permissions($dir);

                        file_put_contents($dir . '/' . $_f . '.ini', "[strings]\n" . preg_replace('#^\# .*\n#m', '', $data['content']));
                        fix_permissions($dir . '/' . $_f . '.ini');

                        $files[] = 'lang_custom/' . $lang . '/' . $_f . '.ini';
                    }
                }

                if (count($files) != 0) {
                    $translators = implode(', ', $language_details['translators']);
                    if ($translators == '') {
                        $translators = do_lang('UNKNOWN');
                    }

                    $percentage = intval(round(100.0 * $language_details['translated_segments'] / $language_details['total_segments']));

                    $language_name = lookup_language_full_name($lang);

                    $files_str = '';
                    foreach ($files as $file) {
                        $files_str .= "\n            '" . $file . "',";
                    }

                    $open = '<' . '?php';

                    $c = <<<END
{$open} /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    language_{$lang}
 */

/**
 * Hook class.
 */
class Hook_addon_registry_addon_publish
{
    /**
     * Get a list of file permissions to set
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array($runtime = false)
    {
        return array();
    }

    /**
     * Get the version of Composr this addon is for
     *
     * @return float Version number
     */
    public function get_version()
    {
        return cms_version_number();
    }

    /**
     * Get the addon category
     *
     * @return string The category
     */
    public function get_category()
    {
        return 'Translations';
    }

    /**
     * Get the addon author
     *
     * @return string The author
     */
    public function get_author()
    {
        return '{$translators}';
    }

    /**
     * Find other authors
     *
     * @return array A list of co-authors that should be attributed
     */
    public function get_copyright_attribution()
    {
        return array();
    }

    /**
     * Get the addon licence (one-line summary only)
     *
     * @return string The licence
     */
    public function get_licence()
    {
        return 'Licensed on the same terms as Composr';
    }

    /**
     * Get the description of the addon
     *
     * @return string Description of the addon
     */
    public function get_description()
    {
        return 'Translation into {$language_name}. Completeness: {$percentage}%. This addon was automatically bundled from community contributions provided on Transifex and will be routinely updated alongside new Composr patch releases. Translations may also be downloaded directly from Transifex.';
    }

    /**
     * Get a list of tutorials that apply to this addon
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials()
    {
        return array('tut_intl', 'tut_intl_users');
    }

    /**
     * Get a mapping of dependency types
     *
     * @return array File permissions to set
     */
    public function get_dependencies()
    {
        return array(
            'requires' => array(),
            'recommends' => array(),
            'conflicts_with' => array()
        );
    }

    /**
     * Explicitly say which icon should be used
     *
     * @return URLPATH Icon
     */
    public function get_default_icon()
    {
        return 'themes/default/images/icons/48x48/menu/adminzone/style/language/language';
    }

    /**
     * Get a list of files that belong to this addon
     *
     * @return array List of files
     */
    public function get_file_list()
    {
        return array(
            'sources_custom/hooks/systems/addon_registry/language_{$lang}.php',{$files_str}
        );
    }
}
END;

                    file_put_contents(get_file_base() . '/sources_custom/hooks/systems/addon_registry/language_' . $lang, trim($c) . "\n\n");
                }
            }
        }
    }
}

function _transifex($call, $http_verb, $params = null, $trigger_error = true)
{
    if ($params === null) {
        $params = array();
    }

    $username = get_value('transifex_username', null, true);
    $password = get_value('transifex_password', null, true);
    if (empty($username)) {
        warn_exit('Transifex username must be set with :set_value(\'transifex_username\', \'...\', true);', true);
    }
    if (empty($password)) {
        warn_exit('Transifex password must be set with :set_value(\'transifex_password\', \'...\', true);', true);
    }

    if (substr($call, 0, 1) != '/') {
        warn_exit('Calls must start with /');
    }
    if (substr($call, -1) != '/' && strpos($call, '/?') === false) {
        warn_exit('Calls must end with /');
    }

    if (is_array($params)) {
        $raw_content_type = 'multipart/form-data';
        $raw_post = false;
    } else {
        $raw_content_type = 'application/json';
        $raw_post = true;
        $params = array($params);
    }

    $url = 'https://www.transifex.com/api/2' . $call;
    $auth = array($username, $password);
    global $HTTP_MESSAGE;
    $result = http_download_file($url, null, $trigger_error, false, 'Composr', ($http_verb == 'GET') ? null : $params, null, null, null, null, null, null, $auth, 30.0, $raw_post, null, null, $http_verb, $raw_content_type);

    $cli = ((php_sapi_name() == 'cli') && (empty($_SERVER['REMOTE_ADDR'])) && (empty($_ENV['REMOTE_ADDR'])));
    if ($cli) {
        @print('Done call to ' . $url . ' [' . $HTTP_MESSAGE . ']' . "\n");
    }

    return array($result, $HTTP_MESSAGE);
}
