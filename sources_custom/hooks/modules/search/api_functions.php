<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    composr_tutorials
 */

/**
 * Hook class.
 */
class Hook_search_api_functions extends FieldsSearchHook
{
    /**
     * Find details for this search hook.
     *
     * @param  boolean $check_permissions Whether to check permissions
     * @param  ?MEMBER $member_id The member ID to check with (null: current member)
     * @return ~?array Map of search hook details (null: hook is disabled) (false: access denied)
     */
    public function info(bool $check_permissions = true, ?int $member_id = null)
    {
        if (!addon_installed('composr_tutorials')) {
            return null;
        }

        if ($member_id === null) {
            $member_id = get_member();
        }

        if ($check_permissions) {
            if (!has_actual_page_access($member_id, 'api')) {
                return false;
            }
        }

        if ($GLOBALS['SITE_DB']->query_select_value('api_functions', 'COUNT(*)') == 0) {
            return null;
        }

        require_lang('tutorials');

        $info = [];
        $info['lang'] = do_lang_tempcode('CATALOGUE_ENTRIES');
        $info['default'] = false;
        $info['category'] = 'class_id';
        $info['integer_category'] = true;

        $extra_sort_fields = [ // TODO
            'class_name' => do_lang('API_DOC_CLASS_NAME')
        ];
        $info['extra_sort_fields'] = $extra_sort_fields;

        $info['permissions'] = [
            [
                'type' => 'zone',
                'zone_name' => get_module_zone('api'),
            ],
            [
                'type' => 'page',
                'zone_name' => get_module_zone('api'),
                'page_name' => 'api',
            ],
        ];

        return $info;
    }

    /**
     * Empty the fast custom index.
     */
    public function empty_index()
    {
        $GLOBALS['SITE_DB']->query_delete('api_functions_fulltext_index');
    }

    /**
     * Perform indexing using the fast custom index.
     *
     * @param  ?TIME $since Only index records newer than this (null: no limit)
     * @param  ?integer $total_singular_ngram_tokens Write into a count of singular ngrams (typically, words) in here (null: do not count)
     * @param  ?array $statistics_map Write into this map of singular ngram (typically, words) to number of occurrences (null: do not maintain a map)
     */
    public function index_for_search(?int $since = null, ?int &$total_singular_ngram_tokens = null, ?array &$statistics_map = null)
    {
        $engine = new Fast_custom_index();

        $index_table = 'api_functions_fulltext_index';
        $clean_scan = ($GLOBALS['SITE_DB']->query_select_value_if_there($index_table, 'i_ngram') === null);

        $key_transfer_map = [
            'id' => 'i_f_id',
        ];
        $filter_field_transfer_map = [
            'f_add_date' => 'i_add_time',
            'class_id' => 'i_c_id',
            'class_name' => 'i_c_name',
            //'ce_submitter' => 'i_submitter',
        ];

        $db = $GLOBALS['SITE_DB'];
        $sql = 'SELECT * FROM ' . $db->get_table_prefix() . 'api_functions WHERE 1=1';
        $since_clause = $engine->generate_since_where_clause($db, $index_table, ['f_edit_date' => false], $since, $statistics_map);
        $sql .= $since_clause;
        $sql .= ' ORDER BY r.id';
        $max = 100;
        $start = 0;
        do {
            $rows = $db->query($sql, $max, $start);
            foreach ($rows as $row) {
                $langs = find_all_langs();
                foreach (array_keys($langs) as $lang) {
                    $fields_to_index = [
                        'meta_keywords' => APPEARANCE_CONTEXT_META,
                        'meta_description' => APPEARANCE_CONTEXT_BODY,
                    ];

                    // Function info
                    $content_fields = [
                        'class_name' => $row['class_name'],
                        'f_name' => $row['f_name'],
                        'f_description' => $row['f_description'],
                        'f_flags' => $row['f_flags'],
                        'f_return_type' => $row['f_return_type'],
                        'f_return_description' => $row['f_return_description'],
                    ];

                    // Function parameters
                    $params = $GLOBALS['SITE_DB']->query_select('api_function_params', ['*'], ['function_id' => $row['id']]);
                    foreach ($params as $param) {
                        $content_fields += [
                            'p_' . strval($param['id']) . '_name' => $param['p_name'],
                            'p_' . strval($param['id']) . '_description' => $param['p_description'],
                            'p_' . strval($param['id']) . '_type' => $param['p_type'],
                            // 'p_' . strval($param['id']) . '_default' => ($param['p_default'] != '') ? strval(unserialize($param['p_default'])) : '', // TODO
                        ];
                    }

                    // SEO (TODO: implement on the compilation, both adding and removing)
                    list($keywords, $description) = seo_meta_get_for('api_function', strval($row['id']));
                    $content_fields += [
                        'meta_keywords' => $keywords,
                        'meta_description' => $description,
                    ];

                    $engine->index_for_search($db, $index_table, $content_fields, $fields_to_index, $key_transfer_map, $filter_field_transfer_map, $total_singular_ngram_tokens, $statistics_map, $lang, $clean_scan);
                }
            }
            $start += $max;
        } while (!empty($rows));
    }

    // TODO: public function ajax_tree()

    /**
     * Get a list of extra fields to ask for.
     *
     * @return ?array A list of maps specifying extra fields (null: no tree)
     */
    public function get_fields() : ?array
    {
        return [];
    }

    /**
     * Run function for search results.
     *
     * @param  string $search_query Search query
     * @param  string $content_where WHERE clause that selects the content according to the search query; passed in addition to $search_query to avoid unnecessary reparsing.  ? refers to the yet-unknown field name (blank: full-text search)
     * @param  string $where_clause Initial WHERE clause that already takes $search_under into account (should be nothing else unless it is guaranteed hook will use the global get_search_rows function)
     * @param  string $search_under Comma-separated list of categories to search under
     * @param  boolean $only_search_meta Whether to only do a META (tags) search
     * @param  boolean $only_titles Whether only to search titles (as opposed to both titles and content)
     * @param  integer $max Start position in total results
     * @param  integer $start Maximum results to return in total
     * @param  string $sort The sort type (gets remapped to a field in this function)
     * @param  ID_TEXT $direction Order direction
     * @param  SHORT_TEXT $author Username/Author to match for
     * @param  ?MEMBER $author_id Member-ID to match for (null: unknown)
     * @param  mixed $cutoff Cutoff date (TIME or a pair representing the range or null)
     * @return array List of maps (template, orderer)
     */
    public function run(string $search_query, string $content_where, string $where_clause, string $search_under, bool $only_search_meta, bool $only_titles, int $max, int $start, string $sort, string $direction, string $author, ?int $author_id, $cutoff) : array
    {
        $remapped_orderer = '';
        switch ($sort) {
            case 'title':
                $remapped_orderer = 'f_name';
                break;

            case 'add_date':
                $remapped_orderer = 'f_edit_date';
                break;

            default:
                break;
        }

        require_lang('tutorials');

        // Calculate and perform query
        $permissions_module = null;
        $db = $GLOBALS['SITE_DB'];
        $index_table = 'api_functions_fulltext_index';

        if (can_use_fast_custom_index('api_functions', $db, $index_table, $search_query, Fast_custom_index::active_search_has_special_filtering() || ($search_under != '-1' && $search_under != '!'))) {
            // This search hook implements the fast custom index, which we use where possible...

            $table = 'api_functions r';

            // Calculate our where clause (search)
            $where_clause = '';
            $extra_join_clause = '';
            $this->_handle_date_check($cutoff, 'r.f_edit_date', $extra_join_clause);

            // TODO: category permissions

            // Category filter
            if (($search_under != '!') && ($search_under != '-1')) {
                $cats = explode(',', $search_under);
                $done_at_least_one_cat = false;
                foreach ($cats as $i => $cat) {
                    if (trim($cat) == '') {
                        continue;
                    }

                    if (!$done_at_least_one_cat) {
                        $extra_join_clause .= ' AND (';
                        $done_at_least_one_cat = true;
                    } else {
                        $extra_join_clause .= ' OR ';
                    }

                    $extra_join_clause .= 'r.class_id=' . strval(intval($cat));
                }
                if ($done_at_least_one_cat) {
                    $extra_join_clause .= ')';
                }
            }

            $engine = new Fast_custom_index();

            if (Fast_custom_index::active_search_has_special_filtering()) {
                $trans_fields = [];
                $nontrans_fields = [];
                // $this->_get_search_parameterisation_advanced_for_content_type('_api_function', $table, $where_clause, $trans_fields, $nontrans_fields, db_function('CONCAT', ['r.the_zone', 'r.the_page']));
                // ^ Nothing done with trans_fields and nontrans_fields
            }

            $key_transfer_map = ['id' => 'i_f_id'];
            $index_permissions_field = 'i_c_id';
            $rows = $engine->get_search_rows($db, $index_table, $db->get_table_prefix() . $table, $key_transfer_map, $where_clause, $extra_join_clause, $search_query, $only_search_meta, $only_titles, $max, $start, $remapped_orderer, $direction, $permissions_module, $index_permissions_field);
        } else {
            // Calculate our where clause (search)
            $this->_handle_date_check($cutoff, 'r.f_edit_date', $where_clause);

            // TODO: category permissions

            $trans_fields = [];
            $nontrans_fields = [];

            $rows = get_search_rows('api_function', 'id', $search_query, $content_where, $where_clause, $only_search_meta, $only_titles, $max, $start, $remapped_orderer, $direction, 'api_functions r', 'r.*,r.id AS r_id,r.class_id AS r_class_id', $trans_fields);
        }

        $out = [];
        if (empty($rows)) {
            return [];
        }

        foreach ($rows as $i => $row) {
            $out[$i]['data'] = $row;
            unset($rows[$i]);

            if (($remapped_orderer != '') && (array_key_exists($remapped_orderer, $row))) {
                $out[$i]['orderer'] = $row[$remapped_orderer];
            } elseif (strpos($remapped_orderer, '_rating:') !== false) {
                $out[$i]['orderer'] = $row[$remapped_orderer];
            }
        }

        return $out;
    }

    /**
     * Run function for rendering a search result.
     *
     * @param  array $row The data row stored when we retrieved the result
     * @return ?Tempcode The output (null: compound output)
     */
    public function render(array $row) : ?object
    {
        require_code('tutorials');

        $i = 0;
        $info = prepare_api_function_for_render($row, $i);
        return $info['PREVIEW'];
    }
}
