<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count    -- the number of friends a member must have to satisfy this qualification (not specified: 5)
    2) mutual   -- If 1, count only mutual friends; if -1, count only other members who added this one as a friend (not specified: 0)
    3) days     -- Only count friends made from the last specified number of days [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_friends
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('chat')) {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])), // but highly not recommended due to the potential for abuse
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('chat')) {
            return null;
        }

        $count_required = isset($params['count']) ? intval($params['count']) : 5;
        $mutual = isset($params['mutual']) ? $params['mutual'] : '0';
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Build query
        $count_done = 0;
        $where_map = [];
        $extra_where = '';
        if ($days !== null) {
            $extra_where .= ' AND date_and_time>=' . strval(time() - ($days * 24 * 60 * 60));
        } elseif ($last_time !== null) {
            $extra_where .= ' AND date_and_time>' . strval($last_time);
        }
        switch ($mutual) {
            case '-1':
                $where_map['member_likes'] = $member_id;
                $count_done = $GLOBALS['SITE_DB']->query_select_value('chat_friends', 'COUNT(*)', $where_map, $extra_where);
                break;
            case '0':
                $extra_where .= ' AND (member_likes=' . strval($member_id) . ' OR member_liked=' . strval($member_id) . ')';
                $count_done = $GLOBALS['SITE_DB']->query_select_value('chat_friends', 'COUNT(*)', $where_map, $extra_where);
                break;
            case '1':
                $sql = 'SELECT COUNT(*) AS count_done FROM {prefix}chat_friends a JOIN {prefix}chat_friends b ON a.member_liked=b.member_likes AND b.member_liked=a.member_likes';
                $where = ' WHERE a.member_likes={member_id}';
                $_count_done = $GLOBALS['SITE_DB']->query_parameterised($sql . $where, ['member_id' => $member_id]);
                $count_done = $_count_done[0]['count_done'];
                break;
        }

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('chat')) {
            return null;
        }

        require_lang('achievements');

        // Read in parameters
        $mutual = isset($params['mutual']) ? $params['mutual'] : '0';
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Conditions
        $conditions = new Tempcode();
        if ($mutual == '-1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_FRIENDS_REQUIREMENT_ADDED_ONLY'));
        }
        if ($mutual == '1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_FRIENDS_REQUIREMENT_MUTUAL'));
        }
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_FRIENDS_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_FRIENDS_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
