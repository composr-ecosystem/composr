<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count        -- The member must have appeared in a leader-board this many times for the qualification to be satisfied (not specified: 1)
    2) rank         -- Only count times the member ranked in this place or higher (e.g. 3 would mean only leader-boards where they ranked third place or higher) (not specified: 10)
    3) earners_only -- If 1, only consider leader-boards which are point earners; -1 has the opposite effect and only considers point holders (not specified: 0, but highly recommended to set 1)
    4) ids          -- Limit to the given comma-delimited leader-board IDs (not specified: no filter)
    5) days         -- Only consider leader-board results generated in the last given number of days [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_leader_board
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('leader_board')) {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('leader_board')) {
            return null;
        }

        // Read in parameters
        $count_required = isset($params['count']) ? intval($params['count']) : 1;
        $rank = isset($params['rank']) ? intval($params['rank']) : 10;
        $earners_only = isset($params['earners_only']) ? $params['earners_only'] : '0';
        $ids = isset($params['ids']) ? array_map('intval', explode(',', $params['ids'])) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Build query
        $where_map = ['lb_member' => $member_id];
        $extra_where = ' AND lb_rank<=' . strval($rank);
        $ids_allowed = null;
        if ($ids !== null) {
            $ids_allowed = $ids;
        }
        if ($earners_only != '0') {
            if ($ids_allowed === null) {
                $ids_allowed = [];
            }

            $type = ($earners_only == '1') ? 'earners' : 'holders';

            $earner_rows = $GLOBALS['SITE_DB']->query_select('leader_boards', ['id', 'lb_type'], ['lb_type' => $type]);
            $earners = collapse_1d_complexity('id', $earner_rows);
            if (count($ids_allowed) > 0) {
                $ids_allowed = array_intersect($ids_allowed, $earners);
            } else {
                $ids_allowed = $earners;
            }
        }
        if (($ids_allowed !== null) && (count($ids_allowed) == 0)) { // Sanity check
            return null;
        }
        if ($ids_allowed !== null) {
            $extra_where .= ' AND lb_leader_board_id IN (' . implode(',', $ids_allowed) . ')';
        }
        if ($days !== null) {
            $extra_where .= ' AND lb_date_and_time>=' . strval(time() - ($days * 24 * 60 * 60));
        } elseif ($last_time !== null) {
            $extra_where .= ' AND lb_date_and_time>' . strval($last_time);
        }

        // Get results
        $count_done = $GLOBALS['SITE_DB']->query_select_value('leader_board', 'COUNT(*)', $where_map, $extra_where);

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('leader_board')) {
            return null;
        }

        require_lang('achievements');

        // Read in parameters
        $rank = isset($params['rank']) ? intval($params['rank']) : 10;
        $earners_only = isset($params['earners_only']) ? $params['earners_only'] : '0';
        $ids = isset($params['ids']) ? array_map('intval', explode(',', $params['ids'])) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        $conditions = do_lang_tempcode('ACHIEVEMENT_LEADER_BOARD_REQUIREMENT_RANK', escape_html(integer_format($rank)));

        // Earners / holders?
        if ($earners_only == '1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_LEADER_BOARD_REQUIREMENT_EARNERS'));
        } elseif ($earners_only != '0') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_LEADER_BOARD_REQUIREMENT_HOLDERS'));
        }

        // Specific leader-boards?
        if ($ids !== null) {
            $names = [];
            foreach ($ids as $id) {
                $name = $GLOBALS['SITE_DB']->query_select_value_if_there('leader_boards', 'lb_title', ['id' => $id]);
                if ($name !== null) {
                    $names[] = $name;
                }
            }

            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_LEADER_BOARD_REQUIREMENT_IDS', escape_html(implode(', ', $names))));
        }

        // Days?
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_LEADER_BOARD_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_LEADER_BOARD_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
