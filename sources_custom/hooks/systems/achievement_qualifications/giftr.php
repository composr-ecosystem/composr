<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count        -- The member must have sent this many virtual gifts to satisfy this qualification (not specified: 5)
    2) receive      -- If 1, then we are counting gifts received, not sent (not specified: 0)
    3) category     -- Only gifts from this category are counted (not specified: no filter)
    4) days         -- Only gifts in the last given number of days will be counted [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_giftr
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('giftr')) {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('giftr')) {
            return null;
        }

        // Read in parameters
        $count_required = isset($params['count']) ? intval($params['count']) : 5;
        $receive = isset($params['receive']) ? ($params['receive'] == '1') : false;
        $category = isset($params['category']) ? $params['category'] : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Build query
        $sql = 'SELECT COUNT(*) AS num_gifts FROM {prefix}members_gifts m JOIN {prefix}giftr g ON m.gift_id=g.id';
        //$where = ' WHERE g.enabled=1'; // Actually we still want to count gifts already sent/received even if the gift was later disabled
        $where = ' WHERE 1=1';
        $where_params = ['member_id' => $member_id];
        if ($receive) {
            $where .= ' AND m.to_member_id={member_id}';
        } else {
            $where .= ' AND m.from_member_id={member_id}';
        }
        if ($category !== null) {
            $where .= ' AND ' . db_string_equal_to('g.category', '{category}');
            $where_params['category'] = $category;
        }
        if ($days !== null) {
            $where .= ' AND add_time>={add_time}';
            $where_params['add_time'] = time() - ($days * 24 * 60 * 60);
        } elseif ($last_time !== null) {
            $where .= ' AND add_time>{add_time}';
            $where_params['add_time'] = $last_time;
        }

        $_count_done = $GLOBALS['SITE_DB']->query_parameterised($sql . $where, $where_params);
        $count_done = $_count_done[0]['num_gifts'];

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('giftr')) {
            return null;
        }

        require_lang('achievements');

        // Read in parameters
        $receive = isset($params['receive']) ? ($params['receive'] == '1') : false;
        $category = isset($params['category']) ? $params['category'] : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Conditions
        $conditions = new Tempcode();
        if ($category !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_GIFTR_REQUIREMENT_CATEGORY', escape_html($category)));
        }
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_GIFTR_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        if ($receive) {
            return do_lang_tempcode('ACHIEVEMENT_GIFTR_RECEIVE_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
        }
        return do_lang_tempcode('ACHIEVEMENT_GIFTR_SEND_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
