<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Be careful not to include the achievement in which this qualification is defined. Otherwise, this qualification will never satisfy.

    Supported parameters for this qualification:
    1) names  -- Required; a comma-delimited list of achievement names which a member must have earned in order to satisfy this qualification
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_achievements
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        return [
            'supports_persist' => true,
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        // Read in options
        $_achievements = explode(',', $params['names']);

        // Stringify for the query
        $achievements = [];
        foreach ($_achievements as $achievement) {
            $achievements[] = '\'' . db_escape_string($achievement) . '\'';
        }
        $count_required = count($achievements);

        // Determine which achievements have been earned
        $extra_where = ' AND a_name IN (' . implode(',', $achievements) .')';
        if ($last_time !== null) {
            $extra_where .= ' AND a_date_and_time>' . strval($last_time);
        }
        $count_earned = $GLOBALS['SITE_DB']->query_select_value_if_there('achievements', 'COUNT(*)', ['a_member_id' => $member_id], $extra_where);

        return [$count_earned, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        require_lang('achievements');

        // TODO: we need to gather the achievement titles before we can build this code
        return null;
    }
}
