<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) types        -- A comma-delimited list of content types to consider (not specified: all 'is_entry' content types)
    2) select       -- Selectcode for primary categories within applicable given types (not specified: no filter)
    3) select_b     -- Selectcode for secondary categories (where applicable for the given types) (not specified: no filter)
    4) select_text  -- Required if you provide select and/or select_b; a human-readable description (e.g. names of categories) // TODO: generate this automatically if we can
    4) count        -- The number of content items which match the given parameters necessary to earn this achievement (not specified: 100)
    5) days         -- Only consider content posted within this many days (not specified: no limit)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_content
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        return [
            'supports_persist' => false, // the function for getting content rows only supports day recency, not timestamps like we need
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        $content_types = (isset($params['types']) && !cms_empty_safe($params['types'])) ? explode(',', $params['types']) : null;
        $select = isset($params['select']) ? $params['select'] : '';
        $select_b = isset($params['select_b']) ? $params['select_b'] : '';
        $count_required = isset($params['count']) ? intval($params['count']) : 100;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // If we want all content types, then we must load them in (but only count entry types)
        if ($content_types === null) {
            $_content_types = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
            //$_content_types = array_merge($_content_types, find_all_hook_obs('systems', 'resource_meta_aware', 'Hook_resource_meta_aware_'));
            $content_types = [];
            foreach ($_content_types as $_content_type => $object) {
                $info = $object->info();
                if (($info !== null) && ($info['is_entry'] === true)) {
                    $content_types[] = $_content_type;
                }
            }
        }

        // For performance, we cheat by only returning 1 row (we only care about $max_rows)
        require_code('content');
        list($rows, $max_rows) = content_rows_for_multi_type($content_types, $days, '', '', 'recent DESC', 0, 1, $select, $select_b, '', true, [], null, $member_id);

        return [$max_rows, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        $content_types = (isset($params['types']) && !cms_empty_safe($params['types'])) ? explode(',', $params['types']) : null;
        $select_text = isset($params['select_text']) ? $params['select_text'] : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        require_lang('achievements');

        $conditions = new Tempcode();

        // Content types
        if ($content_types !== null) {
            require_code('content');
            $content_labels = [];
            foreach ($content_types as $content_type) {
                $ob = get_content_object($content_type);
                if ($ob === null) {
                    continue;
                }

                $content_labels[] = $ob->get_content_type_label()->evaluate();
            }
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_CONTENT_REQUIREMENT_TYPES', escape_html(implode(', ', $content_labels))));
        }

        // Description of Selectcode
        if ($select_text !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_CONTENT_REQUIREMENT_SELECT', escape_html($select_text)));
        }

        // Days
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_CONTENT_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        return do_lang_tempcode('ACHIEVEMENT_CONTENT_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
