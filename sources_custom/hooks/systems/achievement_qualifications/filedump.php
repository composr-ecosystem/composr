<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count    -- The number of files (directories do not count) that must be created for this qualification to be satisfied (not specified: 25)
    2) subpath  -- Count only files that fall within this subpath (or subpaths within this subpath) (must start and end with a slash) (Use "[personal]" to indicate personal folders only) (not specified: /)
    3) types    -- Count only these comma-delimited file extensions [do not include the period] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_filedump
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('filedump')) {
            return null;
        }

        return [
            'supports_persist' => false,
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('filedump')) {
            return null;
        }

        // Read in options
        $count_required = isset($params['count']) ? intval($params['count']) : 25;
        $subpath = isset($params['subpath']) ? $params['subpath'] : '/';
        $types = (isset($params['types']) && !cms_empty_safe($params['types'])) ? explode(',', $params['types']) : null;

        // Build query
        $where_map = ['the_member' => $member_id];
        $extra_where = ' AND name LIKE \'' . db_encode_like('%.%') . '\''; // Do not count directories
        if ($subpath == '[personal]') { // Personal filedump
            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
            $subpath = '/' . $username . '/';
        }
        $extra_where .= ' AND subpath LIKE \'' . db_encode_like(db_escape_string($subpath) . '%') . '\'';
        if (($types !== null) && (count($types) > 0)) {
            $extra_where .= ' AND (';
            foreach ($types as $i => $type) {
                if ($i > 0) {
                    $extra_where .= ' OR ';
                }
                $extra_where .= 'name LIKE \'' . db_encode_like('%.' . db_escape_string(cms_strtolower_ascii($type))) . '\'';
            }
            $extra_where .= ')';
        }

        // Get results
        $count_done = $GLOBALS['SITE_DB']->query_select_value('filedump', 'COUNT(*)', $where_map, $extra_where);

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('filedump')) {
            return null;
        }

        require_lang('achievements');

        // Read in options
        $subpath = isset($params['subpath']) ? $params['subpath'] : '/';
        $types = (isset($params['types']) && !cms_empty_safe($params['types'])) ? explode(',', $params['types']) : null;

        $conditions = new Tempcode();
        if ($subpath == '[personal]') { // Personal filedump
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_FILEDUMP_REQUIREMENT_SUBPATH_PERSONAL'));
        } elseif ($subpath != '/') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_FILEDUMP_REQUIREMENT_SUBPATH', escape_html($subpath)));
        }
        if (($types !== null) && (count($types) > 0)) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_FILEDUMP_REQUIREMENT_TYPES', escape_html(implode(', ', $types))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_FILEDUMP_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
