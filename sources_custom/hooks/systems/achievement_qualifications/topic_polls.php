<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count    -- The number of topic polls that must be created to satisfy this qualification (not specified: 5)
    2) votes    -- Polls must have at minimum this many votes on them to be counted (not specified: 0)
    3) open     -- If 1, count only open polls; if -1, count only closed polls (not specified: 0)
    4) days     -- Only count polls made on topics which were created within the last given number of days [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_topic_polls
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        // Read in options
        $count_required = isset($params['count']) ? intval($params['count']) : 5;
        $votes = isset($params['votes']) ? intval($params['votes']) : 0;
        $open = isset($params['open']) ? $params['open'] : '0';
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Build query
        $sql = 'SELECT COUNT(*) AS num_polls FROM {prefix}f_polls p JOIN {prefix}f_topics t ON t.t_poll_id=p.id';
        $where = ' WHERE t.t_cache_first_member_id={member_id}';
        $where_parameters = ['member_id' => $member_id];
        if ($votes > 0) {
            $where .= ' AND p.po_cache_total_votes>={votes}';
            $where_parameters['votes'] = $votes;
        }
        if ($open == '-1') {
            $where .= ' AND (p.po_is_open=0 OR (p.po_closing_time IS NOT NULL AND p.po_closing_time<={current_time}))';
            $where_parameters['current_time'] = time();
        }
        if ($open == '1') {
            $where .= ' AND p.po_is_open=1 AND (p.po_closing_time IS NULL OR p.po_closing_time>{current_time})';
            $where_parameters['current_time'] = time();
        }
        if ($days !== null) {
            $where .= ' AND t.t_cache_first_time IS NOT NULL AND t.t_cache_first_time>={first_time}';
            $where_parameters['first_time'] = time() - ($days * 24 * 60 * 60);
        } elseif ($last_time !== null) {
            $where .= ' AND t.t_cache_first_time IS NOT NULL AND t.t_cache_first_time>{first_time}';
            $where_parameters['first_time'] = $last_time;
        }

        $_count_done = $GLOBALS['FORUM_DB']->query_parameterised($sql . $where, $where_parameters);
        $count_done = $_count_done[0]['num_polls'];

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        require_lang('achievements');

        // Read in options
        $votes = isset($params['votes']) ? intval($params['votes']) : 0;
        $open = isset($params['open']) ? $params['open'] : '0';
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Conditions
        $conditions = new Tempcode();
        if ($votes > 0) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_TOPIC_POLLS_REQUIREMENT_VOTES', escape_html(integer_format($votes))));
        }
        if ($open == '-1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_TOPIC_POLLS_REQUIREMENT_CLOSED'));
        }
        if ($open == '1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_TOPIC_POLLS_REQUIREMENT_OPEN'));
        }
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_TOPIC_POLLS_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_TOPIC_POLLS_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
