<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Note this does not count revoked votes. Additionally, if a member votes on more than one option on the same poll, it will only count as one vote here.

    Supported parameters for this qualification:
    1) count    -- The number of votes on topic polls to satisfy this qualification (not specified: 10)
    2) ids      -- Only count votes on the specified comma-delimited topic poll IDs (not specified: no filter)
    3) days     -- Only count votes placed in the last given number of days [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_topic_poll_votes
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        // Read in options
        $count_required = isset($params['count']) ? intval($params['count']) : 10;
        $ids = isset($params['ids']) ? array_map('intval', explode(',', $params['ids'])) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Build query
        $where_map = ['pv_member_id' => $member_id, 'pv_revoked' => 0];
        $extra_where = '';
        if (($ids !== null) && (count($ids) > 0)) {
            $extra_where .= ' AND pv_poll_id IN (' . implode(',', $ids) . ')';
        }
        if ($days !== null) {
            $extra_where .= ' AND pv_date_time>=' . strval(time() - ($days * 24 * 60 * 60));
        } elseif ($last_time !== null) {
            $extra_where .= ' AND pv_date_time>' . strval($last_time);
        }

        // Get results
        $count_done = $GLOBALS['FORUM_DB']->query_select_value('f_poll_votes', 'COUNT(DISTINCT pv_poll_id)', $where_map, $extra_where);

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        require_lang('achievements');

        // Read in options
        $ids = isset($params['ids']) ? array_map('intval', explode(',', $params['ids'])) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Conditions
        $conditions = new Tempcode();
        if (($ids !== null) && (count($ids) > 0)) {
            $poll_names = [];
            foreach ($ids as $id) {
                $poll_name = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_polls', 'po_question', ['id' => $id]);
                if ($poll_name === null) {
                    continue;
                }
                $poll_names[] = $poll_name;
            }
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_TOPIC_POLL_VOTES_REQUIREMENT_IDS', escape_html(implode(', ', $poll_names))));
        }
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_TOPIC_POLL_VOTES_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_TOPIC_POLL_VOTES_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
