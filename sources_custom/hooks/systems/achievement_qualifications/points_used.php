<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count        -- The number of points required to have been used for this qualification to be satisfied (not specified: 1,000)
    2) exclude_rank -- If 1, then exclude points used which deducted from rank points, such as charges from warnings (not specified: 1)
    3) sent_only    -- If 1, then we only consider points which have been given to other members; -1 has the opposite effect and only considers points which were spent as part of a purchase (not specified: 0)
    4) rows_only    -- If 1, then we do not want to count points but rather number of transactions instead (not specified: 0)
    5) include_gift -- If 1, also include gift points used; -1 makes us exclusively only count gift points used (not specified: 1)
    6) type         -- Only consider point transactions for the given type, usually a content type (not specified: no filter)
    7) subtype      -- Only consider point transactions for the given subtype, usually an action keyword (not specified: no filter)
    8) type_id      -- Only consider point transactions for the given type ID, usually an ID of the specified type (not specified: no filter)
    9) days         -- Only consider points used in the last given number of days [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_points_used
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('points')) {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('points')) {
            return null;
        }

        // Read in options
        $count_required = isset($params['count']) ? intval($params['count']) : 1000;
        $exclude_rank = isset($params['exclude_rank']) ? ($params['exclude_rank'] == '1') : true;
        $sent_only = isset($params['sent_only']) ? $params['sent_only'] : '0';
        $rows_only = isset($params['rows_only']) ? ($params['rows_only'] == '1') : false;
        $include_gift = isset($params['include_gift']) ? $params['include_gift'] : '1';
        $type = isset($params['type']) ? $params['type'] : null;
        $subtype = isset($params['subtype']) ? $params['subtype'] : null;
        $type_id = isset($params['type_id']) ? $params['type_id'] : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        require_code('points');

        // Optimisation; we might just be able to pull from points_used
        $use_points_used = ((!$exclude_rank) && ($type === null) && ($subtype === null) && ($type_id === null) && ($days === null) && ($last_time === null) && ($sent_only == '0') && (!$rows_only) && ($include_gift == '0'));
        if ($use_points_used) {
            return [points_used($member_id), $count_required];
        }

        // Optimisation; we might just be able to pull from points_spent
        $use_points_spent = ((!$exclude_rank) && ($type === null) && ($subtype === null) && ($type_id === null) && ($days === null) && ($last_time === null) && ($sent_only == '-1') && (!$rows_only) && ($include_gift == '0'));
        if ($use_points_spent) {
            return [points_spent($member_id), $count_required];
        }

        // Optimisation; we might just be able to pull from points_sent
        $use_points_spent = ((!$exclude_rank) && ($type === null) && ($subtype === null) && ($type_id === null) && ($days === null) && ($last_time === null) && ($sent_only == '1') && (!$rows_only) && ($include_gift == '1'));
        if ($use_points_spent) {
            return [points_sent($member_id), $count_required];
        }

        // Optimisation; we might just be able to pull from gift_points_sent
        $use_points_spent = ((!$exclude_rank) && ($type === null) && ($subtype === null) && ($type_id === null) && ($days === null) && ($last_time === null) && ($sent_only == '0') && (!$rows_only) && ($include_gift == '-1'));
        if ($use_points_spent) {
            return [gift_points_sent($member_id), $count_required];
        }

        // Build our WHERE query
        $extra_where = '';
        $secondary_member = null;
        if ($exclude_rank) {
            $extra_where .= ' AND is_ranked=0';
        }
        if ($sent_only == '-1') {
            $secondary_member = $GLOBALS['FORUM_DRIVER']->get_guest_id();
        }
        if ($sent_only == '1') {
            $extra_where .= ' AND sending_member<>' . strval($GLOBALS['FORUM_DRIVER']->get_guest_id());
        }
        if ($type !== null) {
            $extra_where .= ' AND ' . db_string_equal_to('t_type', $type);
        }
        if ($subtype !== null) {
            $extra_where .= ' AND ' . db_string_equal_to('t_subtype', $subtype);
        }
        if ($type_id !== null) {
            $extra_where .= ' AND ' . db_string_equal_to('t_type_id', $type_id);
        }
        if ($days !== null) {
            $extra_where .= ' AND date_and_time>=' . strval(time() - ($days * 24 * 60 * 60));
        } elseif ($last_time !== null) {
            $extra_where .= ' AND date_and_time>' . strval($last_time);
        }

        // Calculate points
        $flags = 0;
        if (($sent_only == '0') || ($sent_only == '1')) {
            $flags |= LEDGER_TYPE_SENT;
        }
        if (($sent_only == '0') || ($sent_only == '-1')) {
            $flags |= LEDGER_TYPE_SPENT;
        }
        $points_info = points_ledger_calculate($flags, $member_id, $secondary_member, $extra_where);
        $rows = 0;
        $points = 0;
        $gift_points = 0;
        foreach ($points_info as $key => $point_info) {
            $rows += $point_info[0];
            $points += $point_info[1];
            $gift_points += $point_info[2];
        }

        // Determine our return
        if ($rows_only) {
            return [$rows, $count_required];
        }

        $total_points = 0;
        if (($include_gift == '0') || ($include_gift == '1')) {
            $total_points += $points;
        }
        if (($include_gift == '1') || ($include_gift == '-1')) {
            $total_points += $gift_points;
        }

        return [$total_points, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('points')) {
            return null;
        }

        require_lang('achievements');

        // Read in options
        $count_required = isset($params['count']) ? intval($params['count']) : 1000;
        $exclude_rank = isset($params['exclude_rank']) ? ($params['exclude_rank'] == '1') : true;
        $sent_only = isset($params['sent_only']) ? $params['sent_only'] : '0';
        $rows_only = isset($params['rows_only']) ? ($params['rows_only'] == '1') : false;
        $include_gift = isset($params['include_gift']) ? $params['include_gift'] : '1';
        $type = isset($params['type']) ? $params['type'] : null;
        $subtype = isset($params['subtype']) ? $params['subtype'] : null;
        $type_id = isset($params['type_id']) ? $params['type_id'] : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        require_lang('achievements');

        $conditions = new Tempcode();

        // Rank
        if ($exclude_rank) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_EXCLUDE_RANK'));
        }

        // Sent
        if ($sent_only == '1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_SENT_ONLY'));
        }
        if ($sent_only == '-1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_SPENT_ONLY'));
        }

        // Rows
        if ($rows_only) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_ROWS_ONLY'));
        }

        // Gift points
        if ($include_gift == '0') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_NO_GIFT_POINTS'));
        }
        if ($include_gift == '-1') {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_ONLY_GIFT_POINTS'));
        }

        // Types
        if ($type !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_TYPE', escape_html($type)));
        }
        if ($subtype !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_SUBTYPE', escape_html($subtype)));
        }
        if ($type_id !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_TYPE_ID', escape_html($type_id)));
        }

        // Days
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        return do_lang_tempcode('ACHIEVEMENT_POINTS_USED_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
