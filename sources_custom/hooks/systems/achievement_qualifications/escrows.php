<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count            -- The number of escrows the member must have completed (satisfied fully) for this qualification to be satisfied (not specified: 5)
    2) as_points        -- If 1, then count is actually the number of points escrowed in total rather than the number of escrows (not specified: 0)
    3) bidirectional    -- If 1, then we count escrows the member created and escrows others created with the member (-1 only counts escrows other members made) (not specified: 0)
    4) content_types    -- Only count escrows made as part of the given comma-delimited content types (not specified: no filter)
    5) content_ids      -- Only count escrows of the given comma-delimited content IDs (ignored if there is not exactly one content_types specified) (not specified: no filter)
    6) days             -- Only count escrows from the last given number of days (based on updated time so it is accurate to when escrows were satisfied) [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_escrows
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('points')) {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('points')) {
            return null;
        }

        // Read in options
        $count_required = isset($params['count']) ? intval($params['count']) : 5;
        $as_points = isset($params['as_points']) ? ($params['as_points'] == '1') : false;
        $bidirectional = isset($params['bidirectional']) ? $params['bidirectional'] : '0';
        $content_types = (isset($params['content_types']) && !cms_empty_safe($params['content_types'])) ? explode(',', $params['content_types']) : null;
        $content_ids = isset($params['content_ids']) ? explode(',', $params['content_ids']) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Ignore content IDs if we do not have exactly one content type specified
        if (($content_types === null) || (count($content_types) != 1)) {
            $content_ids = null;
        }

        require_code('points_escrow');

        // Build query
        $where_map = ['status' => ESCROW_STATUS_COMPLETED];
        $extra_where = '';
        $select_value = 'COUNT(*)';
        if ($as_points) {
            $select_value = 'SUM(amount)';
        }
        switch ($bidirectional) {
            case '-1':
                $where_map['receiving_member'] = $member_id;
                break;
            case '0';
                $where_map['sending_member'] = $member_id;
                break;
            case '1':
                $extra_where .= ' AND (sending_member=' . strval($member_id) . ' OR receiving_member=' . strval($member_id) . ')';
                break;
        }
        if (($content_types !== null) && (count($content_types) > 0)) {
            $stringified_content_types = [];
            foreach ($content_types as $type) {
                $stringified_content_types[] = '\'' . db_escape_string($type) . '\'';
            }
            $extra_where .= ' AND content_type IN (' . implode(',', $stringified_content_types) .')';
        }
        if (($content_ids !== null) && (count($content_ids) > 0)) {
            $stringified_content_ids = [];
            foreach ($content_ids as $content_id) {
                $stringified_content_ids[] = '\'' . db_escape_string($content_id) . '\'';
            }
            $extra_where .= ' AND content_id IN (' . implode(',', $stringified_content_ids) .')';
        }
        if ($days !== null) {
            $extra_where .= ' AND update_date_and_time>=' . strval(time() - ($days * 24 * 60 * 60));
        } elseif ($last_time !== null) {
            $extra_where .= ' AND update_date_and_time>' . strval($last_time);
        }

        // Get results
        $_count_done = $GLOBALS['SITE_DB']->query_select_value('escrow', $select_value, $where_map, $extra_where);
        if ($_count_done === null) {
            $count_done = 0;
        }
        $count_done = intval($_count_done);

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('points')) {
            return null;
        }

        require_lang('achievements');

        // Read in options
        $as_points = isset($params['as_points']) ? ($params['as_points'] == '1') : false;
        $bidirectional = isset($params['bidirectional']) ? $params['bidirectional'] : '0';
        $content_types = (isset($params['content_types']) && !cms_empty_safe($params['content_types'])) ? explode(',', $params['content_types']) : null;
        $content_ids = isset($params['content_ids']) ? explode(',', $params['content_ids']) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Ignore content IDs if we do not have exactly one content type specified
        if (($content_types === null) || (count($content_types) != 1)) {
            $content_ids = null;
        }

        require_lang('achievements');

        $conditions = new Tempcode();

        // As points
        if ($as_points) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_AS_POINTS'));
        } else {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_NOT_AS_POINTS'));
        }

        // Direction
        switch ($bidirectional) {
            case '-1';
                $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_RECEIVE_ONLY'));
                break;
            case '0';
                $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_SEND_ONLY'));
                break;
            case '1':
                $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_BIDIRECTIONAL'));
                break;
        }

        if (($content_types !== null) && ($content_ids === null)) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_CONTENT_TYPES', escape_html(implode(', ', $content_types))));
        }

        if (($content_types !== null) && ($content_ids !== null)) {
            require_code('content');
            $content_titles = [];
            foreach ($content_ids as $content_id) {
                list($title, , , $row, , , $ob) = content_get_details($content_types[0], $content_id);
                $content_type_label = $ob->get_content_type_label($row);

                $content_titles[] = $content_type_label . ': "' . $title . '"';
            }

            if (count($content_titles) > 0) {
                $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_CONTENT_IDS', escape_html(implode(', ', $content_titles))));
            }
        }

        // Days
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_ESCROWS_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
