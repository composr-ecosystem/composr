<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count        -- The number of Top Content (awards) that must be earned for this qualification to be satisfied (not specified: 5)
    2) types        -- Only consider awards from this comma-delimited list of award types (not specified: no filter)
    3) content_ids  -- Only consider awards from this comma-delimited list of content IDs (must have exactly one "types" specified to use this filter) (not specified: no filter)
    4) days         -- Only consider awards earned from the last specified number of days [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_awards
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('awards')) {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('awards')) {
            return null;
        }

        // Read in parameters
        $count_required = isset($params['count']) ? intval($params['count']) : 5;
        $types = isset($params['types']) ? array_map('intval', explode(',', $params['types'])) : null;
        $content_ids = isset($params['content_ids']) ? explode(',', $params['content_ids']) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Ignore content IDs if there is not exactly one type specified
        if (($types === null) || (count($types) != 1)) {
            $content_ids = null;
        }

        // Build query
        $where_map = ['member_id' => $member_id];
        $extra_where = '';
        if (($types !== null) && (count($types) > 0)) {
            if (count($types) == 1) {
                $where_map['a_type_id'] = $types[0];
            } else {
                $stringified_types = [];
                foreach ($types as $type) {
                    $stringified_types[] = '\'' . db_escape_string($type) . '\'';
                }
                $extra_where .= ' AND a_type_id IN (' . implode(',', $stringified_types) . ')';
            }
        }
        if (($content_ids !== null) && (count($content_ids) > 0)) {
            if (count($content_ids) == 1) {
                $where_map['content_id'] = $content_ids[0];
            } else {
                $stringified_ids = [];
                foreach ($content_ids as $content_id) {
                    $stringified_ids[] = '\'' . db_escape_string($content_id) . '\'';
                }
                $extra_where .= ' AND content_id IN (' . implode(',', $stringified_ids) . ')';
            }
        }
        if ($days !== null) {
            $extra_where .= ' AND date_and_time>=' . strval(time() - ($days * 24 * 60 * 60));
        } elseif ($last_time !== null) {
            $extra_where .= ' AND date_and_time>' . strval($last_time);
        }

        // Get results
        $count_done = $GLOBALS['SITE_DB']->query_select_value('award_archive', 'COUNT(*)', $where_map, $extra_where);

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('awards')) {
            return null;
        }

        require_lang('achievements');

        // Read in parameters
        $types = isset($params['types']) ? array_map('intval', explode(',', $params['types'])) : null;
        $content_ids = isset($params['content_ids']) ? explode(',', $params['content_ids']) : null;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Ignore content IDs if there is not exactly one type specified
        if (($types === null) || (count($types) != 1)) {
            $content_ids = null;
        }

        $conditions = new Tempcode();

        // Limit to award types
        if (($types !== null) && (count($types) > 0)) {
            $award_names = [];
            foreach ($types as $type) {
                $award = $GLOBALS['SITE_DB']->query_select_value_if_there('award_types', 'a_title', ['id' => $type]);
                if ($award === null) {
                    continue;
                }
                $award_names[] = $award;
            }

            if (count($award_names) > 0) {
                $conditions->attach(do_lang_tempcode('ACHIEVEMENT_AWARDS_REQUIREMENT_TYPES', escape_html(implode(', ', $award_names))));
            }
        }

        // Limit to content
        if (($content_ids !== null) && (count($content_ids) > 0)) {
            $content_titles = [];
            $content_type = $GLOBALS['SITE_DB']->query_select_value_if_there('award_types', 'a_content_type', ['id' => $types[0]]);
            if ($content_type !== null) {
                require_code('content');
                foreach ($content_ids as $content_id) {
                    list($title, , , $row, , , $ob) = content_get_details($content_type, $content_id);
                    $content_type_label = $ob->get_content_type_label($row);

                    $content_titles[] = $content_type_label . ': "' . $title . '"';
                }

                if (count($content_titles) > 0) {
                    $conditions->attach(do_lang_tempcode('ACHIEVEMENT_AWARDS_REQUIREMENT_CONTENT_IDS', escape_html(implode(', ', $content_titles))));
                }
            }
        }

        // Days
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_AWARDS_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_AWARDS_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
