<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count    -- the number of completed transactions a member must have to satisfy this qualification (not specified: 1)
    2) types    -- filter by this comma-delimited list of type codes (not specified: no filter)
    3) no_free  -- if 1, then we will not count transactions which did not involve any payment (e.g. free items or items using only points) (not specified: 0)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_ecom_transactions
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('ecommerce')) {
            return null;
        }

        return [
            'supports_persist' => true,
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('ecommerce')) {
            return null;
        }

        // Read in parameters
        $count_required = isset($params['count']) ? intval($params['count']) : 1;
        $types = isset($params['types']) ? explode(',', $params['types']) : null;
        $no_free = isset($params['no_free']) ? ($params['no_free'] == '1') : false;

        // Build query
        $where_map = ['t_member_id' => $member_id, 't_status' => 'Completed'];
        $extra_where = '';
        if (($types !== null) && (count($types) > 0)) {
            $stringified_types = [];
            foreach ($types as $type) {
                $stringified_types[] = '\'' . db_escape_string($type) . '\'';
            }
            $extra_where .= ' AND t_type_code IN (' . implode(',', $stringified_types) . ')';
        }
        if ($no_free) {
            $extra_where .= ' AND t_price>0';
        }
        if ($last_time !== null) {
            $extra_where .= ' AND t_time>' . strval($last_time);
        }

        $count_done = $GLOBALS['SITE_DB']->query_select_value('ecom_transactions', 'COUNT(*)', $where_map, $extra_where);

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('ecommerce')) {
            return null;
        }

        // Read in parameters
        $types = isset($params['types']) ? explode(',', $params['types']) : null;
        $no_free = isset($params['no_free']) ? ($params['no_free'] == '1') : false;

        require_lang('achievements');

        $conditions = new Tempcode();

        // Product types
        if (($types !== null) && (count($types) > 0)) {
            require_code('ecommerce');

            $product_names = [];
            foreach ($types as $type) {
                list($details) = find_product_details($type);
                if ($details === null) {
                    $product_names[] = $type;
                }
                $product_names[] = $details['item_name'];
            }

            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ECOM_TRANSACTIONS_REQUIREMENT_TYPES', escape_html(implode(', ', $product_names))));
        }

        // No free
        if ($no_free) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_ECOM_TRANSACTIONS_REQUIREMENT_NO_FREE'));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_ECOM_TRANSACTIONS_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
