<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count            -- The number of quiz entries that must be made to satisfy this qualification (not specified: 5)
    2) ids              -- A comma-delimited list of quiz IDs which we should only count (not specified: no filter)
    3) surveys          -- If 1, then surveys are included (not specified: 1)
    4) competitions     -- If 1, then competitions are included (not specified: 1)
    5) tests            -- If 1, then tests are included (not specified: 1)
    6) winner_only      -- If 1, only count quiz entries where the member was selected as one of the winners (not specified: 0)
    7) days             -- If specified, only count quiz entries (or winners if winner_only) from the last given number of days [persist is not supported if this is specified] (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_quiz_entries
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('quizzes')) {
            return null;
        }

        return [
            'supports_persist' => (!isset($params['days'])),
            'persist_progress_default' => false,
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('quizzes')) {
            return null;
        }

        // Read in options
        $count_required = isset($params['count']) ? intval($params['count']) : 5;
        $ids = isset($params['ids']) ? array_map('intval', explode(',', $params['ids'])) : null;
        $surveys = isset($params['surveys']) ? ($params['surveys'] == '1') : true;
        $tests = isset($params['tests']) ? ($params['tests'] == '1') : true;
        $competitions = isset($params['competitions']) ? ($params['competitions'] == '1') : true;
        $winner_only = isset($params['winner_only']) ? ($params['winner_only'] == '1') : false;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Build query
        if ($winner_only === true) {
            $sql = 'SELECT COUNT(*) AS entry_count FROM {prefix}quiz_winner w JOIN {prefix}quizzes q ON w.q_quiz_id=q.id JOIN {prefix}quiz_entries e ON w.q_entry_id=e.id';
        } else {
            $sql = 'SELECT COUNT(*) AS entry_count FROM {prefix}quiz_entries e JOIN {prefix}quizzes q ON e.q_quiz_id=q.id';
        }
        $where = ' WHERE e.q_member={member_id}';
        $where_params = ['member_id' => $member_id];
        if (($ids !== null) && (count($ids) > 0)) {
            $where .= ' AND q.id IN (' . implode(',', $ids) . ')';
        }
        if ($surveys === false) {
            $where .= ' AND ' . db_string_not_equal_to('q.q_type', 'SURVEY');
        }
        if ($tests === false) {
            $where .= ' AND ' . db_string_not_equal_to('q.q_type', 'TEST');
        }
        if ($competitions === false) {
            $where .= ' AND ' . db_string_not_equal_to('q.q_type', 'COMPETITION');
        }
        if ($days !== null) {
            $where .= ' AND e.q_time>={q_time}';
            $where_params['q_time'] = time() - ($days * 24 * 60 * 60);
        } elseif ($last_time !== null) {
            $where .= ' AND e.q_time>{q_time}';
            $where_params['q_time'] = $last_time;
        }

        $_count_done = $GLOBALS['SITE_DB']->query_parameterised($sql . $where, $where_params);
        $count_done = $_count_done[0]['entry_count'];

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('quizzes')) {
            return null;
        }

        require_lang('achievements');

        // Read in options
        $ids = isset($params['ids']) ? array_map('intval', explode(',', $params['ids'])) : null;
        $surveys = isset($params['surveys']) ? ($params['surveys'] == '1') : true;
        $tests = isset($params['tests']) ? ($params['tests'] == '1') : true;
        $competitions = isset($params['competitions']) ? ($params['competitions'] == '1') : true;
        $winner_only = isset($params['winner_only']) ? ($params['winner_only'] == '1') : false;
        $days = isset($params['days']) ? intval($params['days']) : null;

        // Conditions
        $conditions = new Tempcode();
        if (($ids !== null) && (count($ids) > 0)) {
            $quiz_names = [];
            foreach ($ids as $id) {
                $_quiz_name = $GLOBALS['SITE_DB']->query_select_value_if_there('quizzes', 'q_name', ['id' => $id], '', false, ['q_name' => 'SHORT_TRANS']);
                if ($_quiz_name === null) {
                    continue;
                }
                $quiz_name = get_translated_text($_quiz_name);
                $quiz_names[] = $quiz_name;
            }
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_QUIZ_ENTRIES_REQUIREMENT_IDS', implode(', ', $quiz_names)));
        }
        if ($surveys === false) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_QUIZ_ENTRIES_REQUIREMENT_NO_SURVEYS'));
        }
        if ($tests === false) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_QUIZ_ENTRIES_REQUIREMENT_NO_TESTS'));
        }
        if ($competitions === false) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_QUIZ_ENTRIES_REQUIREMENT_NO_COMPETITIONS'));
        }
        if ($winner_only === true) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_QUIZ_ENTRIES_REQUIREMENT_WINNER'));
        }
        if ($days !== null) {
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_QUIZ_ENTRIES_REQUIREMENT_DAYS', escape_html(integer_format($days))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_QUIZ_ENTRIES_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
