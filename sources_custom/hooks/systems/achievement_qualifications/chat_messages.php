<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/*
    Supported parameters for this qualification:
    1) count        -- The number of messages which must be sent for this qualification to be met (not specified: 100)
    2) rooms        -- Only count messages sent in these comma-delimited room IDs (not specified: no filter)
*/

/**
 * Hook class.
 */
class Hook_achievement_qualifications_chat_messages
{
    /**
     * Get information about this qualification.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @return ?array Map of details (null: qualification is disabled)
     */
    public function info(int $member_id, array $params) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('chat')) {
            return null;
        }

        return [
            'supports_persist' => true,
            'persist_progress_default' => true, // Messages get regularly deleted in a number of ways
        ];
    }

    /**
     * Run calculations on this qualification to see how much it has been completed.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  ?TIME $last_time Only calculate results more recent than the given time (null: never calculated before, or not persisting progress)
     * @return ?array Double: the number accomplished, and the number needed for the qualification to be considered "complete" (null: qualification should be ignored)
     */
    public function run(int $member_id, array $params, ?int $last_time = null) : ?array
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('chat')) {
            return null;
        }

        // Read in parameters
        $count_required = isset($params['count']) ? intval($params['count']) : 1;
        $rooms = (isset($params['rooms']) && !cms_empty_safe($params['rooms'])) ? array_map('intval', explode(',', $params['rooms'])) : null;

        // Build query
        $where_map = ['member_id' => $member_id, 'system_message' => 0];
        $extra_where = '';
        if ($rooms !== null) {
            $extra_where .= ' AND room_id IN (' . implode(',', $rooms) . ')';
        }
        if ($last_time !== null) {
            $extra_where .= ' AND date_and_time>' . strval($last_time);
        }

        $count_done = $GLOBALS['SITE_DB']->query_select_value('chat_messages', 'COUNT(*)', $where_map, $extra_where);

        return [$count_done, $count_required];
    }

    /**
     * Convert information about the qualification into human-readable text where members can track their progress.
     *
     * @param  MEMBER $member_id The member we are viewing
     * @param  array $params Map of parameters which were specified on the XML for this qualification
     * @param  integer $count_done Count of items achieved for the qualification (from run)
     * @param  integer $count_required Count of items required for the qualification to be complete (from run)
     * @return ?Tempcode The text explaining this condition and the progress (null: hidden or disabled qualification)
     */
    public function to_text(int $member_id, array $params, int $count_done, int $count_required) : ?object
    {
        if (!addon_installed('achievements')) {
            return null;
        }

        if (!addon_installed('chat')) {
            return null;
        }

        require_lang('achievements');

        // Read in parameters
        $rooms = (isset($params['rooms']) && !cms_empty_safe($params['rooms'])) ? array_map('intval', explode(',', $params['rooms'])) : null;

        // Conditions (we need to read in event type names)
        $conditions = new Tempcode();
        if ($rooms !== null) {
            $room_names = [];
            foreach ($rooms as $room) {
                $room_name = $GLOBALS['SITE_DB']->query_select_value_if_there('chat_rooms', 'room_name', ['id' => $room]);
                if ($room_name === null) {
                    continue;
                }
                $room_names[] = $room_name;
            }
            $conditions->attach(do_lang_tempcode('ACHIEVEMENT_CHAT_MESSAGES_REQUIREMENT_ROOMS', escape_html(implode(', ', $room_names))));
        }

        // Progress
        $progress = do_lang_tempcode('ACHIEVEMENT_PROGRESS', escape_html(integer_format($count_done)), escape_html(integer_format($count_required)));

        // Finalise
        return do_lang_tempcode('ACHIEVEMENT_CHAT_MESSAGES_REQUIREMENT', protect_from_escaping($conditions), protect_from_escaping($progress));
    }
}
