<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    achievements
 */

/**
 * Hook class.
 */
class Hook_realtime_rain_achievements
{
    /**
     * Initialise function for realtime-rain hooks.
     * This is primarily used to pre-load CSS for specific addons.
     */
    public function init()
    {
        if (!addon_installed('achievements')) {
            return;
        }

        require_css('achievements');
    }

    /**
     * Run function for realtime-rain hooks.
     *
     * @param  TIME $from Start of time range
     * @param  TIME $to End of time range
     * @return array A list of template parameter sets for rendering a 'drop'
     */
    public function run(int $from, int $to) : array
    {
        if (!addon_installed('achievements')) {
            return [];
        }

        $drops = [];

        if (has_actual_page_access(get_member(), 'admin_achievements')) {
            require_lang('achievements');
            require_code('achievements');

            $achievements = null; // Optimisation: don't load achievements system in unless we get a matching row

            $rows = $GLOBALS['SITE_DB']->query('SELECT a_achievement,a_date_and_time AS timestamp,a_member_id AS member_id FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'achievements_earned WHERE a_date_and_time BETWEEN ' . strval($from) . ' AND ' . strval($to));

            foreach ($rows as $row) {
                if ($achievements === null) {
                    $achievements = load_achievements();
                }

                $achievement = $achievements->get_achievement($row['a_achievement']);
                if ($achievement === null) {
                    continue;
                }

                $timestamp = $row['timestamp'];
                $member_id = $row['member_id'];

                $title = rain_truncate_for_title(do_lang('ACHIEVEMENT_AWARDED', $achievement['title']));

                $drops[] = rain_get_special_icons(null, $timestamp) + [
                    'TYPE' => 'achievement',
                    'FROM_MEMBER_ID' => strval($member_id),
                    'TO_MEMBER_ID' => null,
                    'TITLE' => $title,
                    'IMAGE' => $achievement['image'],
                    'TIMESTAMP' => strval($timestamp),
                    'RELATIVE_TIMESTAMP' => strval($timestamp - $from),
                    'TICKER_TEXT' => null,
                    'URL' => build_url(['page' => 'achievements'], get_module_zone('achievements')),
                    'IS_POSITIVE' => false,
                    'IS_NEGATIVE' => false,

                    // These are for showing connections between drops. They are not discriminated, it's just three slots to give an ID code that may be seen as a commonality with other drops.
                    'FROM_ID' => 'member_' . strval($member_id),
                    'TO_ID' => null,
                    'GROUP_ID' => 'achievement_' . $row['a_achievement'],
                ];
            }
        }

        return $drops;
    }
}
