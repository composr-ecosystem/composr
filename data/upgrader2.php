<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*EXTRA FUNCTIONS: strtolower*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_upgrader
 */

/* Standalone script to extract a TAR file */

// Fixup SCRIPT_FILENAME potentially being missing
$_SERVER['SCRIPT_FILENAME'] = __FILE__;

// Find Composr base directory, and chdir into it
global $FILE_BASE, $RELATIVE_PATH;
$FILE_BASE = (strpos(__FILE__, './') === false) ? __FILE__ : realpath(__FILE__);
$FILE_BASE = dirname($FILE_BASE);
if (!is_file($FILE_BASE . '/sources/global.php')) {
    $RELATIVE_PATH = basename($FILE_BASE);
    $FILE_BASE = dirname($FILE_BASE);
} else {
    $RELATIVE_PATH = '';
}
if (!is_file($FILE_BASE . '/sources/global.php')) {
    $FILE_BASE = $_SERVER['SCRIPT_FILENAME']; // this is with symlinks-unresolved (__FILE__ has them resolved); we need as we may want to allow zones to be symlinked into the base directory without getting path-resolved
    $FILE_BASE = dirname($FILE_BASE);
    if (!is_file($FILE_BASE . '/sources/global.php')) {
        $RELATIVE_PATH = basename($FILE_BASE);
        $FILE_BASE = dirname($FILE_BASE);
    } else {
        $RELATIVE_PATH = '';
    }
}
@chdir($FILE_BASE);

// Check access
$hashed_password = $_GET['hashed_password'];
global $SITE_INFO;
require_once(is_file($FILE_BASE . '/_config.php') ? ($FILE_BASE . '/_config.php') : ($FILE_BASE . '/info.php')); // LEGACY
if (!upgrader2_check_master_password($hashed_password)) {
    exit('Access Denied');
}

// Read $_GET settings
$file_offset = intval($_GET['file_offset']);
$may_delete_upgrade_path = isset($_GET['may_delete_upgrade_path']) ? ($_GET['may_delete_upgrade_path'] == '1') : true;
$original_filename = isset($_GET['original_filename']) ? $_GET['original_filename'] : 'upgrader.tar';

// Open TAR (or tarball) file
$tmp_path = dirname(__DIR__) . '/data_custom/upgrader.cms.tmp';
if (!is_file($tmp_path)) { // LEGACY. Some old ocPortal upgraders versions overwrite upgrader2.php early, so Composr needs to support the ocPortal temporary name
    $tmp_path = dirname(__DIR__) . '/data_custom/upgrader.tar.tmp';
}
if (!is_file($tmp_path)) {
    exit('Could not find data_custom/upgrader.cms.tmp');
}
if ((function_exists('gzopen')) && (strtolower(substr($original_filename, -3)) == '.gz')) {
    $tmp_path_handle = gzopen($tmp_path, 'rb');
} else {
    $tmp_path_handle = fopen($tmp_path, 'rb');
}
flock($tmp_path_handle, LOCK_SH);

// Open and read metadata file
$tmp_metadata_path = dirname(__DIR__) . '/data_custom/upgrader.tmp';
if (!file_exists($tmp_metadata_path)) {
    header('Content-Type: text/plain; charset=utf-8');
    exit('2nd temp file has disappeared (' . $tmp_metadata_path . ')');
}
$metadata = unserialize(file_get_contents($tmp_metadata_path));

// Work out what we're doing
$todo = $metadata['todo'];
$per_cycle = 100;

// Do the extraction
foreach ($todo as $i => $_target_file) {
    list($target_file, , $offset, $length,) = $_target_file;

    if ($target_file == 'data/upgrader2.php') {
        if ($file_offset + $per_cycle < count($todo)) {
            continue; // Only extract on last step, to avoid possible transitory bugs between versions of this file (this is the file running and refreshing now, i.e this file!)
        }
    } else {
        if ($i < $file_offset) {
            continue;
        }
        if ($i > $file_offset + $per_cycle) {
            break;
        }
    }

    // Make any needed directories
    @mkdir($FILE_BASE . '/' . dirname($target_file), 0777, true);

    // Copy in the data
    fseek($tmp_path_handle, $offset);
    $target_file_handle = @fopen($FILE_BASE . '/' . $target_file, 'wb');
    if ($target_file_handle === false) {
        header('Content-Type: text/plain; charset=utf-8');
        exit('Filesystem permission error when trying to extract ' . $target_file . '. Maybe you needed to give FTP details when logging in?');
    }
    flock($target_file_handle, LOCK_EX);
    while ($length > 0) {
        $amount_to_read = min(1024, $length);
        $data_read = fread($tmp_path_handle, $amount_to_read);
        fwrite($target_file_handle, $data_read);
        $length -= $amount_to_read;
    }
    flock($target_file_handle, LOCK_UN);
    fclose($target_file_handle);
    @chmod($FILE_BASE . '/' . $target_file, 0644);
}

// Close TAR (or tarball) file
flock($tmp_path_handle, LOCK_UN);
fclose($tmp_path_handle);

// Show HTML
$next_offset_url = '';
if ($file_offset + $per_cycle < count($todo)) {
    $next_offset_url = 'upgrader2.php?';
    foreach ($_GET as $key => $val) {
        if ($key != 'file_offset' && $key != 'scroll_time' && $key != 'scroll_pos') {
            $next_offset_url .= urlencode($key) . '=' . urlencode($val) . '&';
        }
    }
    $next_offset_url .= 'file_offset=' . urlencode(strval($file_offset + $per_cycle));
}
up2_do_header();
echo '<ol>';
foreach ($todo as $i => $target_file) {
    echo '<li>';
    echo '<input id="file_' . strval($i) . '" name="file_' . strval($i) . '" type="checkbox" value="1" disabled="disabled"' . (($i < $file_offset + $per_cycle) ? ' checked="checked"' : '') . ' /> <label for="file_' . strval($i) . '"><kbd>' . htmlentities($target_file[0]) . '</kbd></label>';
    if ($i == $file_offset) {
        echo '<a id="progress"></a>';
    }
    echo '</li>';
}
echo '</ol>';
if ($next_offset_url == '') {
    echo '<p><strong>' . htmlentities($_GET['done']) . '!</strong></p>';
    if ($may_delete_upgrade_path) {
        unlink($tmp_path);
    }
    unlink($tmp_metadata_path);
} else {
    echo '<p><img alt="" src="../themes/default/images/loading.gif" /></p>';
}
$scroll_time = isset($_GET['scroll_time']) ? intval($_GET['scroll_time']) : 0;
$scroll_pos = isset($_GET['scroll_pos']) ? intval($_GET['scroll_pos']) : 0;
echo '<script>
    var scrollTime = ' . strval($scroll_time) . ', scrollPos = ' . strval($scroll_pos) . ';
    window.onload = function() {
        if (scrollTime < new Date().valueOf() - 10000) {
            scrollPos = document.getElementById("file_' . strval(min(count($todo) - 1, $file_offset + $per_cycle)) . '").offsetTop - 50;
        }
        window.setTimeout(function() {
            window.scrollTo(0, scrollPos);
            window.onscroll = function() {
                scrollTime = new Date().valueOf();
                scrollPos = window.scrollY;
            };
        }, 25);
    };
';
if ($next_offset_url != '') {
    echo '
    window.setTimeout(function() {
        window.location.href = \'' . $next_offset_url . '&scroll_time=\' + scrollTime + \'&scroll_pos=\' + scrollPos + \'#progress\';
    }, 3000);
    ';
}
echo '
</script>';
if ($next_offset_url != '') {
    echo '<hr /><p>Continuing in 3 seconds. If the JavaScript refresh is not working, <a href="' . htmlentities($next_offset_url) . '">force continue</a>.</p>';
}
up2_do_footer();

/**
 * Output the upgrader extract frame's page header.
 */
function up2_do_header()
{
    echo <<<END
<!DOCTYPE html>
<html lang="EN">
<head>
    <title>Extracting files</title>
    <link rel="icon" href="https://compo.sr/favicon.ico" type="image/x-icon" />
END;
    echo <<<END
    <style>
END;
    global $FILE_BASE;
    echo <<<END
        .screen-title { text-decoration: underline; display: block; background: url('../themes/default/images/icons/admin/tool.svg') top left no-repeat; background-size: 48px 48px; min-height: 42px; padding: 10px 0 0 60px; }
    </style>

    <meta name="robots" content="noindex, nofollow" />
</head>
<body class="website-body"><div class="global-middle">
END;
}

/**
 * Output the upgrader extract frame's page footer.
 */
function up2_do_footer()
{
    echo <<<END
    </div></body>
</html>
END;
}

/**
 * Check the given master password is valid.
 *
 * @param  SHORT_TEXT $password_given_hashed Given master password
 * @return boolean Whether it is valid
 */
function upgrader2_check_master_password(string $password_given_hashed) : bool
{
    global $FILE_BASE;
    require_once($FILE_BASE . '/sources/crypt_master.php');
    return check_master_password_from_hash($password_given_hashed);
}
