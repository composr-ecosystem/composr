<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*EXTRA FUNCTIONS: strtolower*/

global $IN_MINIKERNEL_VERSION;
$IN_MINIKERNEL_VERSION = true;

// Find Composr base directory, and chdir into it
global $FILE_BASE, $RELATIVE_PATH;
$FILE_BASE = (strpos(__FILE__, './') === false) ? __FILE__ : realpath(__FILE__);
if (substr($FILE_BASE, -4) == '.php') {
    $a = strrpos($FILE_BASE, '/');
    $b = strrpos($FILE_BASE, '\\');
    $FILE_BASE = dirname($FILE_BASE);
}
@chdir($FILE_BASE);
$RELATIVE_PATH = '';

error_reporting(E_ALL);

// Load up bootstrap and minikernel
if (!is_file($FILE_BASE . '/sources/bootstrap.php')) {
    exit('<!DOCTYPE html>' . "\n" . '<html lang="EN"><head><title>Critical startup error</title></head><body><h1>Composr startup error</h1><p>The second most basic Composr startup file, sources/bootstrap.php, could not be located. This is almost always due to an incomplete upload of the Composr system, so please check all files are uploaded correctly.</p><p>Once all Composr files are in place, Composr must actually be installed by running the installer. You must be seeing this message either because your system has become corrupt since installation, or because you have uploaded some but not all files from our manual installer package: the quick installer is easier, so you might consider using that instead.</p><p>The core developers maintain full documentation for all procedures and tools, especially those for installation. These may be found on the <a href="https://composr.app">Composr website</a>. If you are unable to easily solve this problem, we may be contacted from our website and can help resolve it for you.</p><hr /><p style="font-size: 0.8em">Composr is a website engine created by Christopher Graham.</p></body></html>');
}
require_once($FILE_BASE . '/sources/bootstrap.php');
require_code__bootstrap('minikernel');

cms_ini_set('display_errors', '1');
assert_options(ASSERT_ACTIVE, 0);
cms_ini_set('assert.active', '0');

global $REQUIRED_BEFORE;
$REQUIRED_BEFORE = [];

global $CURRENT_SHARE_USER;
$CURRENT_SHARE_USER = null;

$GLOBALS['DEV_MODE'] = false;
$GLOBALS['SEMI_DEV_MODE'] = true;

@ob_end_clean(); // Reset to have no output buffering by default (we'll use it internally, taking complete control)

// Are we in a special version of PHP?
define('GOOGLE_APPENGINE', isset($_SERVER['APPLICATION_ID']));

define('URL_CONTENT_REGEXP', '\w\-\x80-\xFF'); // PHP is done using ASCII (don't use the 'u' modifier). Note this doesn't include dots, this is intentional as they can cause problems in filenames
define('URL_CONTENT_REGEXP_JS', '\w\-\u0080-\uFFFF'); // JavaScript is done using Unicode

$shl = @ini_get('suhosin.memory_limit');
if (($shl === false) || ($shl == '') || ($shl == '0')) {
    cms_ini_set('memory_limit', '-1');
} else {
    cms_ini_set('memory_limit', $shl);
}

// Requirements check
if (version_compare(PHP_VERSION, '7.2', '<')) {
    exit(do_lang('PHP_TOO_OLD', '7.2'));
}

// Tunnel into some Composr code we can use
include('_config.php');
require_code('critical_errors');
require_code('permissions');
require_code('global3');
require_code('temporal');
require_code('files');
require_code('lang');
require_code('tempcode');
require_code('templates');
require_code('zones');
require_code('version');
require_code('comcode');
require_code('database');

// No restoration (needed) on XML DB driver
if (get_db_type() == 'xml') {
    warn_exit('Cannot run on XML database driver');
}

// If we are referencing this file in order to extract dependant url's from a pack
handle_self_referencing_embedment();

// Set up some globals
global $INSTALL_LANG, $VERSION, $CHMOD_ARRAY;
$INSTALL_LANG = (isset($_GET['default_lang'])) ? $_GET['default_lang'] : 'en';

// Language files we can use
require_lang('global');
require_lang('critical_error');
require_lang('installer');
require_lang('version');
require_lang('backups');

// Start button if not post
if ($_SERVER['REQUEST_METHOD'] != 'POST') {
    $proceed_icon = do_template('ICON', ['NAME' => 'buttons/proceed']);
    $msg = '';
    $msg .= '<form action="restore.php" method="post"><button id="proceed-button" class="btn btn-primary btn-scr buttons--proceed" type="submit" onclick="this.disabled=true; this.form.submit();">' . $proceed_icon->evaluate() . ' ' . escape_html(do_lang('START')) . '</button></form>';
    finish_restorer_output($msg);
}

// Now we actually read into the data file and execute the commented out reinstallation code.
// This is necessary for re-entrant code, and because we can't load it all through the PHP parser at once!

$time_start = time();
$time_limit = get_param_integer('time_limit', 8);
$extended_time = cms_ini_set('max_execution_time', strval($time_limit));
if ($extended_time === false) {
    $time_limit = 8;
}
$time_max = $time_start + ($time_limit - 2); // 2 second buffer

// Open file
$data_file_charset = null;
$data_file = cms_fopen_text_read(__DIR__ . '/restore_data.php', $data_file_charset);

// Skip forward for offset in this iteration
$offset = get_param_integer('start_offset', 0);
if ($offset != 0) {
    fseek($data_file, $offset);
    $found_start = true;
} else {
    $found_start = false;
}

// Run SQL commands
$sql_buildup = '';
while (($line = cms_fgets($data_file, $data_file_charset)) !== false) {
    if (!$found_start) {
        // Not got to the data start yet
        if (trim($line) == '//COMMANDS BEGIN...') {
            $found_start = true;
        }
        continue;
    }

    if (substr(ltrim($line), 0, 2) != '//') {
        // Done
        break;
    }

    // Strip comment
    $line = substr($line, 2);

    // Find if it is a new command
    $is_new_command = false;
    $valid_cmd_starts = [
        '$GLOBALS[\'SITE_DB\']->query_insert(\'',
        '$GLOBALS[\'SITE_DB\']->drop_table_if_exists(\'',
        '$GLOBALS[\'SITE_DB\']->create_table(\'',
        '$GLOBALS[\'SITE_DB\']->delete_index_if_exists(\'',
        '$GLOBALS[\'SITE_DB\']->create_index(\'',
    ];
    foreach ($valid_cmd_starts as $valid_cmd_start) {
        if (substr(ltrim($line), 0, strlen($valid_cmd_start)) == $valid_cmd_start) {
            $is_new_command = true;
            break;
        }
    }

    if (($is_new_command) && ($sql_buildup != '')) {
        // Run command
        $success = @eval($sql_buildup); // NB: Query errors are echo'd out as DB API knows restoration script is running
        if ($success === false) {
            header('Content-Type: text/plain');
            exit('Failed on: ' . $sql_buildup);
        }
        $sql_buildup = '';

        // Need to go to a new iteration? (Not ideal we wait until this long to check, but we have to considering how command build-ups work.)
        if (time() >= $time_max) {
            $refresh_url = 'restore.php?start_offset=' . strval($offset) . '&time_limit=' . strval($time_limit);
            $proceed_icon = do_template('ICON', ['NAME' => 'buttons/proceed']);
            $msg = '';
            $msg .= '<form action="' . escape_html($refresh_url) . '" method="post"><button id="proceed-button" class="btn btn-primary btn-scr buttons--proceed" type="submit" onclick="this.disabled=true; this.form.submit();">' . $proceed_icon->evaluate() . ' ' . escape_html(do_lang('CONTINUE_RESTORATION')) . '</button></form>';
            $msg .= '<script>var button=document.getElementById(\'proceed-button\'); button.disabled=true; button.form.submit();</script>';
            finish_restorer_output($msg);
            break;
        }
    }

    // Keep building up
    $sql_buildup .= $line . "\n";

    // Offset
    $offset = ftell($data_file);
}

fclose($data_file);

// Run any remaining command
if ($sql_buildup != '') {
    $success = @eval($sql_buildup);
    if ($success === false) {
        header('Content-Type: text/plain');
        exit('Failed on: ' . $sql_buildup);
    }
    $sql_buildup = '';
}


//{!!DB!!}


// Done
$msg = do_lang('BACKUP_RESTORE_SUCCESS');
finish_restorer_output($msg);

/**
 * Show some output
 *
 * @param  string $msg The message to show, provided in HTML format
 */
function finish_restorer_output(string $msg)
{
    require_code('tempcode_compiler');
    $css_nocache = _do_template('default', '/css/', 'no_cache', 'no_cache', 'EN', '.css');
    $tpl = do_template('RESTORE_HTML_WRAP', ['_GUID' => '8e3b9d894d8ef06b5057fb654f7db59b', 'CSS_NOCACHE' => $css_nocache, 'MESSAGE' => $msg]);
    echo $tpl->evaluate();
    exit();
}

/**
 * Handle GET URLs requesting embedded media files.
 */
function handle_self_referencing_embedment()
{
    // If this is self-referring to CSS or logo
    if (array_key_exists('type', $_GET)) {
        $type = $_GET['type'];

        if ($type == 'logo') {
            header('Content-Type: image/png');
            if (!file_exists(get_file_base() . '/themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png')) {
                $out = file_array_get('themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png');
            } else {
                $out = cms_file_get_contents_safe(get_file_base() . '/themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png');
            }

            echo $out;

            exit();
        }
        if ($type == 'css') {
            header('Content-Type: text/css');

            $output = '';

            foreach (['_base', '_colours', 'global', 'install'] as $css_file) {
                $css_path = get_file_base() . '/themes/default/css/' . $css_file. '.css';
                $file = cms_file_get_contents_safe($css_path);
                require_code('tempcode_compiler');
                $css = template_to_tempcode($file, 0, false, '');
                $output .= $css->evaluate();
            }

            echo $output;

            exit();
        }
    }
}
