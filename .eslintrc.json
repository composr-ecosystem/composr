{
    /* https://eslint.org/docs/rules/ */
    "extends": "eslint:recommended",
    "rules": {
        /* Extra rules beyond recommended */
        "no-empty": ["error", { "allowEmptyCatch": true }],
        "no-bitwise": ["error"],
        "block-scoped-var": ["error"],
        "eqeqeq": ["error", "always", { "null": "ignore" }],
        "no-implicit-coercion": ["error"],
        "no-implicit-globals": ["error"],
        "strict": ["error"],
        "no-use-before-define": ["error", { "functions": false } ],
        "func-name-matching": ["error"],
        "no-caller": ["error"],
        "no-self-compare": ["error"],
        "semi": ["error"],
        "curly": ["error"],
        "no-alert": ["error"],
        "no-array-constructor": ["error"],
        "no-eval": ["error"],
        "no-implied-eval": ["error"],
        "no-loop-func": ["error"],
        "no-return-assign": ["error"],
        "no-useless-return": ["error"],
        "valid-typeof": ["error"],
        "no-debugger": ["error"],

        /* Formatting */
        "indent": ["error", 4, { "SwitchCase": 1 }],
        "linebreak-style": ["error", "unix"],
        "eol-last": ["error", "always"],
        "no-trailing-spaces": ["error"],
        "arrow-spacing": ["error"],
        "space-infix-ops": ["error"],
        "no-multi-spaces": ["error"],
        "wrap-iife": ["error"],
        "camelcase": ["error"],
        "object-curly-newline": ["error"],
        "semi-spacing": ["error"],
        "comma-spacing": ["error"],
        "comma-style": ["error"],
        "space-in-parens": ["error"],
        "no-multiple-empty-lines": ["error"],
        "no-whitespace-before-property": ["error"],
        "func-call-spacing": ["error"],
        "no-tabs": ["error"],
        "space-before-blocks": ["error"],
        "space-before-function-paren": ["error", {
            "anonymous": "always",
            "named": "never",
            "asyncArrow": "always"
        }],

        /* Other */
        "no-restricted-properties": [2, {
            "property": "nodeName"
        }],
        "id-denylist": ["method", "action", "target"],
        "no-restricted-syntax": [
            "error",

            /* We do not want to refer to undefined using typeof */
            "Literal[value=/^undefined$/]"
        ]
    },
    "env": {
        "browser": true
    },
    "globals": {
        "Set"             : false,
        "Map"             : false,
        "WeakSet"         : false,
        "WeakMap"         : false,
        "Promise"         : false,
        "URLSearchParams" : false,
        "$cms"            : false,
        "$dom"            : false,
        "$util"           : false,
        "objVal"          : false,
        "arrVal"          : false,
        "strVal"          : false,
        "numVal"          : false,
        "intVal"          : false,
        "boolVal"         : false
    }
}