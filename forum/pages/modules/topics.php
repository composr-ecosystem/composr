<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    cns_forum
 */

/*
Overview of permissions we check...

New regular topic:
 - cns_may_post_topic

New private topic:
 - cns_may_make_private_topic / cns_check_make_private_topic
 - cns_may_whisper

Reply to regular or private topic:
 - cns_may_post_in_topic
 - cns_may_access_topic
... and an inline personal post:
 - cns_may_whisper
*/

/**
 * Module page class.
 */
class Module_topics
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('cns_forum')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }
        require_code('cns_topics');
        if ($check_perms && !cns_may_make_private_topic($member_id)) {
            return [];
        }

        return [
            'new_pt' => ['ADD_PRIVATE_TOPIC', 'buttons/add_topic'],
        ];
    }

    /**
     * Find privileges defined as overridable by this module.
     *
     * @return array A map of privileges that are overridable; privilege to 0 or 1. 0 means "not category overridable". 1 means "category overridable".
     */
    public function get_privilege_overrides() : array
    {
        require_lang('cns');
        return [
            'submit_lowrange_content' => [1, 'MAKE_POST'],
            'bypass_validation_lowrange_content' => [1, 'BYPASS_POST_VALIDATION'],
            'edit_own_lowrange_content' => [1, 'EDIT_OWN_POST'],
            'edit_lowrange_content' => [1, 'EDIT_POST'],
            'delete_own_lowrange_content' => [1, 'DELETE_OWN_POST'],
            'delete_lowrange_content' => [1, 'DELETE_POST'],
            'submit_midrange_content' => [1, 'ADD_TOPIC'],
            'bypass_validation_midrange_content' => [1, 'BYPASS_TOPIC_VALIDATION'],
            'edit_own_midrange_content' => [1, 'EDIT_OWN_TOPIC'],
            'edit_midrange_content' => [1, 'EDIT_TOPIC'],
            'delete_own_midrange_content' => [1, 'DELETE_OWN_TOPIC'],
            'delete_midrange_content' => [1, 'DELETE_TOPIC'],
        ];
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('cns_forum', $error_msg)) {
            return $error_msg;
        }

        if (get_forum_type() != 'cns') {
            warn_exit(do_lang_tempcode('NO_CNS'));
        }

        require_code('form_templates'); // Needs to run high so that the anti-click-hacking header is sent

        $type = get_param_string('type', 'browse');

        require_lang('cns');
        require_lang('cns_polls');

        inform_non_canonical_parameter('#^kfs.*$#');
        inform_non_canonical_parameter('#^mark_.*$#');

        if ($type == 'whisper') {
            inform_non_canonical_parameter('quote');
        }

        if ($type == 'new_topic') {
            inform_non_canonical_parameter('quote');
        }

        if ($type == 'new_post') {
            inform_non_canonical_parameter('quote');
            inform_non_canonical_parameter('intended_solely_for');
        }

        if ($type == 'browse' || $type == 'whisper' || $type == 'report_post' || $type == 'delete_post' || $type == 'new_post' || $type == 'edit_post' || $type == 'validate_post' || $type == 'new_topic') {
            // Bot (which runs as a dum guest) could conceivably try and index these things and we don't want that
            attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        @ignore_user_abort(true); // Must keep going till completion

        cns_require_all_forum_stuff();

        require_css('cns');

        $type = get_param_string('type', 'browse');

        if (strpos($type, '__') !== false) {
            list($type, $_GET['id']) = explode('__', $type, 2);
        }

        $valid_types = [
            'whisper',
            'mark_read',
            'mark_read_topic',
            'mark_unread_topic',
            'delete_topic',
            '_delete_topic',
            'delete_topics',
            '_delete_topics',
            'delete_topics_and_posts',
            '_delete_topics_and_posts',
            'categorise_pts',
            '_categorise_pts',
            'move_topic',
            '_move_topic',
            'validate_posts',
            'delete_posts',
            '_delete_posts',
            'delete_post',
            '_delete_post',
            'move_posts_a',
            'move_posts_b',
            '_move_posts',
            'move_topics',
            '_move_topics',
            'new_topic',
            'new_post',
            'new_pt',
            '_add_reply',
            'toggle_notifications_topic',
            'toggle_notifications_forum',
            'vote_poll',
            'add_poll',
            '_add_poll',
            'edit_poll',
            '_edit_poll',
            'delete_poll',
            '_delete_poll',
            'view_poll_voters',
            'edit_post',
            '_edit_post',
            'edit_topic',
            '_edit_topic',
            'pin_topic',
            'unpin_topic',
            'cascade_topic',
            'uncascade_topic',
            'open_topic',
            'close_topic',
            'validate_post',
            'birthday',
            'make_private',
            '_make_private',
            'validate_topics',
            'pin_topics',
            'unpin_topics',
            'cascade_topics',
            'uncascade_topics',
            'open_topics',
            'close_topics',
            'mark_topics_read',
            'mark_topics_unread',
            '_mass_multimod',
            'invite_member',
            '_invite_member',
        ];
        if (addon_installed('actionlog')) {
            $valid_types[] = 'topic_history';
        }
        if (addon_installed('tickets')) {
            $valid_types[] = 'report_post';
            $valid_types[] = '_report_post';
        }
        if (addon_installed('cns_multi_moderations')) {
            $valid_types[] = 'multimod';
            $valid_types[] = '_multimod';
        }

        if (in_array($type, $valid_types)) {
            return call_user_func([$this, $type]);
        }

        if (substr($type, 0, 3) == 'mm_') {
            return $this->multimod();
        }
        if (substr($type, 0, 4) == 'mmt_') {
            return $this->mass_multimod();
        }

        if ($type == 'browse') {
            header('X-Robots-Tag: noindex');

            warn_exit(do_lang_tempcode('NOTHING_SELECTED'), false, false, 400);
        }

        return new Tempcode();
    }

    /**
     * The UI for a trivial form page that asks a reason before relaying the results to the same URL, but with an underscored type.
     *
     * @param  ID_TEXT $_title The language string codename for the title to use in the page
     * @param  array $additional_fields Array of additional Tempcode fields to attach after the reason field
     * @param  array $js_function_calls Array of JavaScript function calls to use
     * @return Tempcode The UI
     */
    public function relay_with_reason(string $_title, array $additional_fields = [], array $js_function_calls = []) : object
    {
        $title = get_screen_title($_title);
        $text = paragraph(do_lang_tempcode('OPTIONAL_REASON'));
        $submit_icon = 'buttons/proceed';
        $submit_name = do_lang_tempcode('PROCEED');
        $type = '_' . get_param_string('type', 'browse');
        $post_url = build_url(['page' => '_SELF', 'type' => $type, 'id' => get_param_integer('id', null)], '_SELF', [], true);
        $fields = new Tempcode();
        $hidden = new Tempcode();
        $hidden->attach(build_keep_post_fields());
        $hidden->attach(build_keep_form_fields());
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), '', 'reason', '', false));

        foreach ($additional_fields as $field) {
            $fields->attach($field);
        }

        return do_template('FORM_SCREEN', [
            '_GUID' => '85e30370bb9e45b2b9a7cd6463d69557',
            'SKIP_WEBSTANDARDS' => true,
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'TEXT' => $text,
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => $submit_icon,
            'SUBMIT_NAME' => $submit_name,
            'JS_FUNCTION_CALLS' => $js_function_calls,
        ]);
    }

    /**
     * Do a redirection page to a certain topic/post (because we've just done an action and want to go back).
     *
     * @param  ID_TEXT $_title The language string codename for the title to use in the page
     * @param  AUTO_LINK $topic_id The ID of the topic to redirect to
     * @param  ?mixed $lang What to output (string or Tempcode) (null: default)
     * @param  ?AUTO_LINK $post_id The ID of the post to redirect to (null: redirect to topic instead)
     * @return Tempcode The UI
     */
    public function redirect_to(string $_title, int $topic_id, $lang = null, ?int $post_id = null) : object
    {
        require_code('cns_topicview');

        if ($lang === null) {
            $lang = do_lang_tempcode('SUCCESS');
        }
        $title = get_screen_title($_title);

        // Show it worked / Refresh
        if ($post_id === null) {
            $url = find_first_unread_url($topic_id);
        } else {
            $url = find_post_id_url($post_id);
        }

        return redirect_screen($title, $url, $lang);
    }

    /**
     * Do a redirection page to a certain forum (because we've just done an action and want to go back).
     *
     * @param  ID_TEXT $_title The language string codename for the title to use in the page
     * @param  ?AUTO_LINK $forum_id The ID of the forum to redirect to (null: PTs)
     * @param  ?mixed $lang What to output (string or Tempcode) (null: default)
     * @return Tempcode The UI
     */
    public function redirect_to_forum(string $_title, ?int $forum_id, $lang = null) : object
    {
        if ($lang === null) {
            $lang = do_lang_tempcode('SUCCESS');
        }
        $title = get_screen_title($_title);

        // Show it worked / Refresh
        if ($forum_id === null) {
            $url = build_url(['page' => 'members', 'type' => 'view'], get_module_zone('members'), [], false, false, false, 'tab--pts');
        } else {
            $url = build_url(['page' => 'forumview', 'id' => $forum_id], get_module_zone('forumview'));
        }

        return redirect_screen($title, $url, $lang);
    }

    /**
     * Extract marker IDs that were past through in the GET/POST.
     *
     * @return array A list of markers
     */
    public function get_markers() : array
    {
        $markers = [];
        foreach (array_keys($_REQUEST) as $key) {
            if (substr($key, 0, 5) == 'mark_') {
                $markers[] = intval(substr($key, 5));
            }
        }
        return $markers;
    }

    /**
     * Copy marker IDs that were past through in the GET/POST into hidden form fields, so they may be relayed.
     *
     * @return Tempcode Hidden fields facilitating the marker relaying
     */
    public function keep_markers() : object
    {
        $markers = new Tempcode();
        $_markers = $this->get_markers();
        foreach ($_markers as $marker) {
            $markers->attach(form_input_hidden('mark_' . strval($marker), '1'));
        }
        return $markers;
    }

    // ===========
    // FORUM LEVEL
    // ===========

    /**
     * The actualiser to toggle notifications for a forum.
     *
     * @return Tempcode The UI
     */
    public function toggle_notifications_forum() : object // Type
    {
        require_code('notifications2');
        return notifications_ui_advanced('cns_topic', do_lang_tempcode('NOW_ENABLED_NOTIFICATIONS_FORUM'), do_lang_tempcode('NOW_DISABLED_NOTIFICATIONS_FORUM'));
    }

    // =================
    // WITH MARKED POSTS
    // =================

    /**
     * The actualiser to validate some posts.
     *
     * @return Tempcode The UI
     */
    public function validate_posts() : object // Type
    {
        $posts = $this->get_markers();
        if (empty($posts)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $post_info = $GLOBALS['FORUM_DB']->query_select('f_posts', ['*'], ['id' => $posts[0]], '', 1);
        if (!array_key_exists(0, $post_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $topic_id = $post_info[0]['p_topic_id'];
        $forum_id = $post_info[0]['p_cache_forum_id'];
        $poster = $post_info[0]['p_poster'];
        $post = get_translated_text($post_info[0]['p_post'], $GLOBALS['FORUM_DB']);

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('VALIDATE_POSTS'));

        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        require_code('cns_posts_action3');

        foreach ($posts as $post_id) {
            cns_validate_post($post_id, $topic_id, $forum_id, $poster, $post);
        }

        return $this->redirect_to('VALIDATE_POSTS', $topic_id);
    }

    /**
     * The UI to delete some posts.
     *
     * @return Tempcode The UI
     */
    public function delete_posts() : object // Type
    {
        $posts = $this->get_markers();
        if (empty($posts)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $posts[0]]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('DELETE_POSTS'));

        require_code('form_templates');

        if (addon_installed('points')) {
            require_lang('points');
            $reverse_point_transaction = form_input_tick(do_lang_tempcode('REVERSE_TRANSACTION'), do_lang_tempcode('REVERSE_TRANSACTION_DESCRIPTION_PLURAL', 'post'), 'reverse_point_transaction', false);
        } else {
            $reverse_point_transaction = new Tempcode();
        }
        return $this->relay_with_reason('DELETE_POSTS', [$reverse_point_transaction]);
    }

    /**
     * The actualiser to delete some posts.
     *
     * @return Tempcode The UI
     */
    public function _delete_posts() : object // Type
    {
        $posts = $this->get_markers();
        if (empty($posts)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $posts[0]]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        require_code('cns_posts_action3');
        cns_delete_posts_topic($topic_id, $posts, post_param_string('reason'), true, true, true, (post_param_integer('reverse_point_transaction', 0) == 1));

        $test = $GLOBALS['FORUM_DB']->query_select_value('f_posts', 'COUNT(*)', ['p_topic_id' => $topic_id]);
        if ($test == 0) {
            return $this->redirect_to_forum('MOVE_POSTS', db_get_first_id());
        }

        return $this->redirect_to('DELETE_POSTS', $topic_id);
    }

    /**
     * The UI to move some posts to an existing topic.
     *
     * @return Tempcode The UI
     */
    public function move_posts_a() : object // Type
    {
        $posts = $this->get_markers();
        if (empty($posts)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $post_url = build_url(['page' => '_SELF', 'type' => '_move_posts'], '_SELF');

        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $posts[0]]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('MOVE_POSTS'));

        // Certain aspects relating to the posting system
        $fields = new Tempcode();
        $hidden = $this->keep_markers();

        $set_name = 'destination';
        $required = true;
        $set_title = do_lang_tempcode('DESTINATION_TOPIC');
        $field_set = alternate_fields_set__start($set_name);

        $field_set->attach(form_input_tree_list(do_lang_tempcode('CHOOSE'), '', 'select_topic_id', null, 'choose_topic', [], false));

        $field_set->attach(form_input_line(do_lang_tempcode('DESTINATION_TOPIC_ID'), do_lang_tempcode('DESCRIPTION_DESTINATION_TOPIC'), 'manual_topic_id', null, false));

        $fields->attach(alternate_fields_set__end($set_name, $set_title, '', $field_set, $required));

        $fields->attach(form_input_tick(do_lang_tempcode('DELETE_IF_EMPTY'), do_lang_tempcode('DESCRIPTION_DELETE_IF_EMPTY'), 'delete_if_empty', true));
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'reason', '', false));

        $title = get_screen_title('MOVE_POSTS');
        $submit_name = do_lang_tempcode('MOVE_POSTS');
        $text = do_lang_tempcode('MOVE_POSTS_A_TEXT');

        return do_template('FORM_SCREEN', [
            '_GUID' => 'd62d2c81583398f26f900ee3df1894b1',
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'admin/move',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The UI to move some posts to a new topic.
     *
     * @return Tempcode The UI
     */
    public function move_posts_b() : object // Type
    {
        $posts = $this->get_markers();
        if (empty($posts)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $post_url = build_url(['page' => '_SELF', 'type' => '_move_posts'], '_SELF');

        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $posts[0]]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('MOVE_POSTS'));
        $default_title = do_lang('POSTS_SPLIT_FROM', $topic_info['t_cache_first_title']);

        require_code('cns_forums2');

        // Certain aspects relating to the posting system
        $fields = new Tempcode();
        $hidden = $this->keep_markers();
        $fields->attach(form_input_tree_list(do_lang_tempcode('DESTINATION_FORUM'), do_lang_tempcode('DESCRIPTION_POSTS_DESTINATION_FORUM'), 'to_forum_id', null, 'choose_forum', [], true, strval($topic_info['t_forum_id'])));
        $fields->attach(form_input_line(do_lang_tempcode('TITLE'), do_lang_tempcode('TOPIC_TITLE_WILL_BE'), 'title', $default_title, false, null, 120));
        $fields->attach(form_input_tick(do_lang_tempcode('DELETE_IF_EMPTY'), do_lang_tempcode('DESCRIPTION_DELETE_IF_EMPTY'), 'delete_if_empty', true));
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'reason', '', false));

        $title = get_screen_title('MOVE_POSTS');
        $submit_name = do_lang_tempcode('MOVE_POSTS');
        $text = do_lang_tempcode('MOVE_POSTS_B_TEXT');

        return do_template('FORM_SCREEN', [
            '_GUID' => 'a476da1fecfbd932db4853cdbd7cfedd',
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'admin/move',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to move some posts.
     *
     * @return Tempcode The UI
     */
    public function _move_posts() : object // Type
    {
        $posts = $this->get_markers();
        if (empty($posts)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $to_forum_id = null;
        $to_topic_id = post_param_integer('select_topic_id', null);
        if ($to_topic_id === null) {
            $_to_topic_id = post_param_string('manual_topic_id', '');
            if ($_to_topic_id == '') {
                $to_topic_id = null;
                $to_forum_id = post_param_integer('to_forum_id', null);
                if ($to_forum_id === null) {
                    warn_exit(do_lang_tempcode('MUST_MOVE_POSTS_SOMEWHERE'));
                }
            } else {
                if (!is_numeric($_to_topic_id)) {
                    $_to_topic_id = $GLOBALS['SITE_DB']->query_select_value_if_there('url_id_monikers', 'm_resource_id', ['m_resource_page' => 'topicview', 'm_resource_type' => 'browse', 'm_moniker' => urldecode($_to_topic_id)]);
                    if ($_to_topic_id === null) {
                        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
                    }
                }
                $to_topic_id = intval($_to_topic_id);
            }
        }
        $from_topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $posts[0]]);
        if ($from_topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        require_code('cns_posts_action3');
        $delete_if_empty = post_param_integer('delete_if_empty', 0) == 1;
        $test = cns_move_posts($from_topic_id, $to_topic_id, $posts, post_param_string('reason'), $to_forum_id, $delete_if_empty, post_param_string('title', null));

        if ($test) {
            return $this->redirect_to_forum('MOVE_POSTS', db_get_first_id());
        }

        return $this->redirect_to('MOVE_POSTS', $from_topic_id);
    }

    // ==================
    // WITH MARKED TOPICS
    // ==================

    /**
     * The actualiser to mark topics as read.
     *
     * @return Tempcode The UI
     */
    public function mark_topics_read() : object // Type
    {
        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_ping_topic_read($topic_id);
        }

        if ($forum_id === null) {
            decache_private_topics(get_member());
        }

        $title = get_screen_title('MARK_READ');

        // Show it worked / Refresh
        $url = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($url != '') {
            return redirect_screen($title, $url, do_lang_tempcode('SUCCESS'));
        }

        // Show it worked / Refresh
        return $this->redirect_to_forum('MARK_READ', $forum_id);
    }

    /**
     * Mark a topic as unread by the current member.
     *
     * @param  AUTO_LINK $topic_id The ID of the topic to mark as unread
     * @return boolean Success status (false = too old to mark read; true = marked read or topic entirely missing)
     */
    public function cns_ping_topic_unread(int $topic_id) : bool
    {
        $last_time = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_cache_last_time', ['id' => $topic_id]);
        if ($last_time === null) {
            return true;
        }
        $too_old = $last_time < time() - 60 * 60 * 24 * intval(get_option('post_read_history_days'));
        if (!$too_old) {
            if (!$GLOBALS['FORUM_DB']->table_is_locked('f_read_logs')) {
                $GLOBALS['FORUM_DB']->query_delete('f_read_logs', ['l_topic_id' => $topic_id, 'l_member_id' => get_member()], '', 1);
            }
            return true;
        }
        return false;
    }

    /**
     * The actualiser to mark topics as unread.
     *
     * @return Tempcode The UI
     */
    public function mark_topics_unread() : object // Type
    {
        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        $success = 0;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            if ($this->cns_ping_topic_unread($topic_id)) {
                $success++;
            }
        }

        if ($success != count($topics)) {
            attach_message(do_lang_tempcode('MARK_UNREAD_TOO_OLD', escape_html(integer_format(count($topics) - $success)), escape_html(integer_format(intval(get_option('post_read_history_days'))))), 'warn');
        }

        if ($forum_id === null) {
            decache_private_topics(get_member());
        }

        return $this->redirect_to_forum('MARK_UNREAD', $forum_id);
    }

    /**
     * The actualiser to validate topics.
     *
     * @return Tempcode The UI
     */
    public function validate_topics() : object // Type
    {
        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_edit_topic($topic_id, null, null, 1, null, null, null, '');
        }

        return $this->redirect_to_forum('VALIDATE_TOPICS', $forum_id);
    }

    /**
     * The actualiser to pin topics.
     *
     * @return Tempcode The UI
     */
    public function pin_topics() : object // Type
    {
        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_edit_topic($topic_id, null, null, null, null, 1, null, '');
        }

        return $this->redirect_to_forum('PIN_TOPIC', $forum_id);
    }

    /**
     * The actualiser to unpin topics.
     *
     * @return Tempcode The UI
     */
    public function unpin_topics() : object // Type
    {
        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_edit_topic($topic_id, null, null, null, null, 0, null, '');
        }

        return $this->redirect_to_forum('UNPIN_TOPIC', $forum_id);
    }

    /**
     * The actualiser to cascade topics.
     *
     * @return Tempcode The UI
     */
    public function cascade_topics() : object // Type
    {
        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_edit_topic($topic_id, null, null, null, null, null, 1, '');
        }

        return $this->redirect_to_forum('CASCADE_TOPIC', $forum_id);
    }

    /**
     * The actualiser to uncascade topics.
     *
     * @return Tempcode The UI
     */
    public function uncascade_topics() : object // Type
    {
        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_edit_topic($topic_id, null, null, null, null, null, 0, '');
        }

        return $this->redirect_to_forum('UNCASCADE_TOPIC', $forum_id);
    }

    /**
     * The actualiser to open topics.
     *
     * @return Tempcode The UI
     */
    public function open_topics() : object // Type
    {
        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_edit_topic($topic_id, null, null, null, 1, null, null, '');
        }

        return $this->redirect_to_forum('OPEN_TOPIC', $forum_id);
    }

    /**
     * The actualiser to close topics.
     *
     * @return Tempcode The UI
     */
    public function close_topics() : object // Type
    {
        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_edit_topic($topic_id, null, null, null, 0, null, null, '');
        }

        return $this->redirect_to_forum('CLOSE_TOPIC', $forum_id);
    }

    /**
     * The UI to run multi-moderations.
     *
     * @return Tempcode The UI
     */
    public function mass_multimod() : object // Type
    {
        require_lang('cns_multi_moderations');

        $mm_id = intval(substr(get_param_string('type', 'browse'), 4));

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            $this->check_has_mod_access($topic_id);
        }

        $breadcrumbs = cns_forum_breadcrumbs($forum_id, null, null, false);
        breadcrumb_set_parents($breadcrumbs);
        breadcrumb_set_self(do_lang_tempcode('PERFORM_MULTI_MODERATION'));

        $title = get_screen_title('PERFORM_MULTI_MODERATION');
        $mm = $GLOBALS['FORUM_DB']->query_select('f_multi_moderations', ['*'], ['id' => $mm_id], '', 1);
        if (!array_key_exists(0, $mm)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'multi_moderation'));
        }
        $_mm = $mm[0];
        $post_text = $_mm['mm_post_text'];
        $submit_name = do_lang_tempcode('PERFORM_MULTI_MODERATION');
        $post_url = build_url(['page' => '_SELF', 'type' => '_mass_multimod', 'mm_id' => $mm_id], '_SELF', [], true);
        $fields = new Tempcode();
        $hidden = new Tempcode();
        $hidden->attach(build_keep_post_fields());
        $hidden->attach(build_keep_form_fields());
        $fields->attach(form_input_text(do_lang_tempcode('MM_POST_TEXT'), do_lang_tempcode('DESCRIPTION_MM_POST_TEXT'), 'post_text', $post_text, false));
        $options = [];
        if (addon_installed('cns_signatures')) {
            if (get_option('enable_skip_sig') == '1') {
                $options[] = [do_lang_tempcode('SKIP_SIGNATURE'), 'skip_sig', false, do_lang_tempcode('DESCRIPTION_SKIP_SIGNATURE')];
            }
        }
        if (get_option('enable_post_emphasis') == '1') {
            $options[] = [do_lang_tempcode('EMPHASISED'), 'is_emphasised', true, do_lang_tempcode('DESCRIPTION_EMPHASISED')];
        }
        $fields->attach(form_input_various_ticks($options, ''));
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('OPTIONAL_REASON'), 'reason', '', false));

        $mm_title = get_translated_text($_mm['mm_name'], $GLOBALS['FORUM_DB']);
        $action_list = new Tempcode();
        if ($_mm['mm_open_state'] == 1) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_OPEN'));
        }
        if ($_mm['mm_open_state'] == 0) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_CLOSE'));
        }
        if ($_mm['mm_pin_state'] == 1) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_PIN'));
        }
        if ($_mm['mm_pin_state'] == 0) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_UNPIN'));
        }
        if ($_mm['mm_title_suffix'] != '') {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_TITLE_SUFFIX', escape_html($_mm['mm_title_suffix'])));
        }
        if ($_mm['mm_move_to'] !== null) {
            $target_forum = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_name', ['id' => $_mm['mm_move_to']]);
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_MOVE', escape_html($target_forum)));
        }
        $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_POST'));
        $text = do_lang_tempcode('MULTI_MODERATION_WILL', make_string_tempcode($mm_title), $action_list);

        return do_template('FORM_SCREEN', [
            '_GUID' => '69908b7e2711414c13395535d6547096',
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'PREVIEW' => true,
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'TEXT' => $text,
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'menu/adminzone/structure/forum/multi_moderations',
            'SUBMIT_NAME' => $submit_name,
        ]);
    }

    /**
     * The actualiser to run Multi Moderations.
     *
     * @return Tempcode The UI
     */
    public function _mass_multimod() : object // Type
    {
        require_lang('cns_multi_moderations');

        $mm_id = get_param_integer('mm_id');
        require_code('cns_moderation_action');
        require_code('cns_moderation_action2');

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $forum_id = null;
        foreach ($topics as $i => $topic_id) {
            $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
            if ($id === null) {
                continue;
            }

            if ($forum_id === null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            cns_perform_multi_moderation($mm_id, $topic_id, post_param_string('reason'), post_param_string('post_text'), post_param_integer('is_emphasised', 0), post_param_integer('skip_sig', 0));
        }

        return $this->redirect_to_forum('PERFORM_MULTI_MODERATION', $forum_id);
    }

    /**
     * The UI to move some topics.
     *
     * @return Tempcode The UI
     */
    public function move_topics() : object // Type
    {
        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topics[0]]);
        if ($id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'forum'));
        }

        $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topics[0]]);

        $post_url = build_url(['page' => '_SELF', 'type' => '_move_topics'], '_SELF');

        require_code('cns_forums2');

        // Certain aspects relating to the posting system
        $fields = new Tempcode();
        $fields->attach(form_input_tree_list(do_lang_tempcode('DESTINATION_FORUM'), do_lang_tempcode('DESCRIPTION_DESTINATION_FORUM'), 'to', null, 'choose_forum', [], true, strval($forum_id)));
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'description', '', false));
        $hidden = $this->keep_markers();

        $breadcrumbs = cns_forum_breadcrumbs($forum_id, null, null, false);
        breadcrumb_set_self(do_lang_tempcode('MOVE_TOPICS'));
        breadcrumb_set_parents($breadcrumbs);

        $title = get_screen_title('MOVE_TOPICS');
        $submit_name = do_lang_tempcode('MOVE_TOPICS');
        return do_template('FORM_SCREEN', [
            '_GUID' => '7532b5e7239e0f9ceb64d09c28fd7261',
            'SKIP_WEBSTANDARDS' => true,
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => '',
            'SUBMIT_ICON' => 'admin/move',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to move some topics.
     *
     * @return Tempcode The UI
     */
    public function _move_topics() : object // Type
    {
        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $to = post_param_integer('to');
        $from = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $topics[0]]);
        //if ($from === null) warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));  May be from private topics, so can't do this check
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_move_topics($from, $to, $topics);
        return $this->redirect_to_forum('MOVE_TOPIC', $from);
    }

    /**
     * The UI to delete some topics.
     *
     * @return Tempcode The UI
     */
    public function delete_topics() : object // Type
    {
        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $topic_id = $topics[0];
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('DELETE_TOPICS'));

        require_code('form_templates');

        if (addon_installed('points')) {
            require_lang('points');
            $reverse_point_transaction = form_input_tick(do_lang_tempcode('REVERSE_TRANSACTION'), do_lang_tempcode('REVERSE_TRANSACTION_DESCRIPTION_CATEGORY_PLURAL', 'post', 'topic'), 'reverse_point_transaction', false);
        } else {
            $reverse_point_transaction = new Tempcode();
        }

        return $this->relay_with_reason('DELETE_TOPICS', [$reverse_point_transaction]);
    }

    /**
     * The actualiser to delete some topics.
     *
     * @return Tempcode The UI
     */
    public function _delete_topics() : object // Type
    {
        $reverse_point_transaction = (post_param_integer('reverse_point_transaction', 0) == 1);
        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        foreach ($topics as $topic_id) {
            $forum_id = cns_delete_topic($topic_id, post_param_string('reason'), null, true, $reverse_point_transaction);
        }
        return $this->redirect_to_forum('DELETE_TOPICS', $forum_id);
    }

    /**
     * The UI to delete some of a member's own topics / posts.
     *
     * @return Tempcode The UI
     */
    public function delete_topics_and_posts() : object // Type
    {
        if (is_guest()) {
            access_denied('NOT_AS_GUEST');
        }

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        $topic_id = $topics[0];
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        //$this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('DELETE_TOPICS_AND_POSTS'));

        require_code('form_templates');

        if (addon_installed('points')) {
            require_lang('points');
            $reverse_point_transaction = form_input_tick(do_lang_tempcode('REVERSE_TRANSACTION'), do_lang_tempcode('REVERSE_TRANSACTION_DESCRIPTION_CATEGORY_PLURAL', 'post', 'topic'), 'reverse_point_transaction', false);
        } else {
            $reverse_point_transaction = new Tempcode();
        }
        return $this->relay_with_reason('DELETE_TOPICS_AND_POSTS', [$reverse_point_transaction]);
    }

    /**
     * The actualiser to delete some of a member's own topics / posts.
     *
     * @return Tempcode The UI
     */
    public function _delete_topics_and_posts() : object // Type
    {
        if (is_guest()) {
            access_denied('NOT_AS_GUEST');
        }

        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }

        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        require_code('cns_posts_action3');

        $reason = post_param_string('reason');
        $reverse_point_transaction = (post_param_integer('reverse_point_transaction', 0) == 1);

        foreach ($topics as $topic_id) {
            $own_topic = ($GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_cache_first_member_id', ['id' => $topic_id]) == get_member());
            if ($own_topic === null) {
                continue;
            }

            if ($own_topic) {
                cns_delete_topic($topic_id, $reason, null, true, $reverse_point_transaction);
            } else {
                $posts = collapse_1d_complexity('id', $GLOBALS['FORUM_DB']->query_select('f_posts', ['id'], ['p_poster' => get_member(), 'p_topic_id' => $topic_id]));
                cns_delete_posts_topic($topic_id, $posts, $reason, true, true, true, $reverse_point_transaction);
            }
        }

        // Show it worked / Refresh
        $title = get_screen_title('DELETE_TOPICS_AND_POSTS');
        $url = build_url(['page' => 'members', 'type' => 'view'], get_module_zone('members'), [], false, false, false, 'tab--posts');
        return redirect_screen($title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI to categorise some PTs.
     *
     * @return Tempcode The UI
     */
    public function categorise_pts() : object // Type
    {
        $topics = $this->get_markers();
        if (empty($topics)) {
            $topics[] = get_param_string('id', null);
            if ($topics[0] === null) {
                warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
            }
            $_REQUEST['mark_' . $topics[0]] = 1;
        }

        $post_url = build_url(['page' => '_SELF', 'type' => '_categorise_pts'], '_SELF');

        $default_filter_cat = get_param_string('id', '', INPUT_FILTER_GET_COMPLEX);

        // Certain aspects relating to the posting system
        $fields = new Tempcode();
        $filter_cats = cns_get_filter_cats();
        $list = new Tempcode();
        foreach ($filter_cats as $filter_cat) {
            $filter_cat_text = ($filter_cat == '') ? do_lang_tempcode('NONE_EM') : make_string_tempcode($filter_cat);
            $selected = ($filter_cat == $default_filter_cat);
            $list->attach(form_input_list_entry($filter_cat, $selected, $filter_cat_text));
        }

        $set_name = 'category';
        $required = true;
        $set_title = do_lang_tempcode('CATEGORY');
        $field_set = alternate_fields_set__start($set_name);

        $field_set->attach(form_input_list(do_lang_tempcode('EXISTING'), '', 'category_a', $list, null, true));

        $field_set->attach(form_input_line(do_lang_tempcode('NEW'), '', 'category_b', '', false));

        $fields->attach(alternate_fields_set__end($set_name, $set_title, do_lang_tempcode('DESCRIPTION_CATEGORY'), $field_set, $required));

        $hidden = $this->keep_markers();

        breadcrumb_set_parents([['_SEARCH:forumview:pt', do_lang_tempcode('PRIVATE_TOPICS')]]);

        $title = get_screen_title('CATEGORISE_PTS');
        $submit_name = do_lang_tempcode('CATEGORISE_PTS');
        return do_template('FORM_SCREEN', [
            '_GUID' => 'c6d0e273b5ce0e84d50a1c6294ece157',
            'SKIP_WEBSTANDARDS' => true,
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => '',
            'SUBMIT_ICON' => 'buttons/save',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to categorise some PTs.
     *
     * @return Tempcode The UI
     */
    public function _categorise_pts() : object // Type
    {
        $topics = $this->get_markers();
        if (empty($topics)) {
            warn_exit(do_lang_tempcode('NO_MARKERS_SELECTED'), false, false, 400);
        }
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        $category = post_param_string('category_b', post_param_string('category_a', ''));
        foreach ($topics as $topic_id) {
            $topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['t_pt_from', 't_pt_to', 't_pt_from_category', 't_pt_to_category'], ['id' => $topic_id], '', 1);
            if (array_key_exists(0, $topic_info)) {
                if ($topic_info[0]['t_pt_from'] == get_member()) {
                    $t = 't_pt_from_category';
                    if ((get_option('delete_trashed_pts') == '1') && ($category == do_lang('TRASH')) && ($topic_info[0]['t_pt_to_category'] == do_lang('TRASH'))) {
                        cns_delete_topic($topic_id, '');
                        return $this->redirect_to_forum('CATEGORISE_PTS', null);
                    }
                } elseif ($topic_info[0]['t_pt_to'] == get_member()) {
                    $t = 't_pt_to_category';
                    if ((get_option('delete_trashed_pts') == '1') && ($category == do_lang('TRASH')) && ($topic_info[0]['t_pt_from_category'] == do_lang('TRASH'))) {
                        cns_delete_topic($topic_id, '');
                        return $this->redirect_to_forum('CATEGORISE_PTS', null);
                    }
                } else {
                    warn_exit(do_lang_tempcode('CANNOT_CATEGORISE_INVITED'));
                }
                $GLOBALS['FORUM_DB']->query_update('f_topics', [$t => $category], ['id' => $topic_id], '', 1);
            }
        }
        return $this->redirect_to_forum('CATEGORISE_PTS', null);
    }

    // ======================
    // POST/REPLY BASED TYPES
    // ======================

    /**
     * The UI to choose between the two types of whisper.
     *
     * @return Tempcode The UI
     */
    public function whisper() : object
    {
        $title = get_screen_title('WHISPER');

        $url = build_url(['page' => '_SELF'], '_SELF', ['type' => true], true, true);

        $member_id = get_param_integer('intended_solely_for');
        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);

        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => get_param_integer('quote')]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('WHISPER'));

        return do_template('CNS_WHISPER_CHOICE_SCREEN', ['_GUID' => '1ecaa02e7e87a4d73798d3085cc27229', 'URL' => $url, 'TITLE' => $title, 'USERNAME' => $username]);
    }

    /**
     * Choose an emoticon for a topic.
     *
     * @param  ID_TEXT $selected_path The currently selected emoticon
     * @return Tempcode The emoticon input field
     */
    public function choose_topic_emoticon(string $selected_path = '') : object
    {
        $tabindex = get_form_field_tabindex(null);

        $content = new Tempcode();
        $extra = has_privilege(get_member(), 'use_special_emoticons') ? [] : ['e_is_special' => 0];
        $rows = $GLOBALS['FORUM_DB']->query_select('f_emoticons', ['e_theme_img_code'], ['e_use_topics' => 1] + $extra);
        $content->attach(do_template('FORM_SCREEN_INPUT_THEME_IMAGE_ENTRY', [
            '_GUID' => 'd9f9399072af3f19f21695aef01168c7',
            'PRETTY' => do_lang_tempcode('NONE'),
            'CODE' => '',
            'URL' => find_theme_image('cns_emoticons/none'),
            'CHECKED' => $selected_path == '',
            'NAME' => 'emoticon',
            'VECTOR' => (substr(find_theme_image('cns_emoticons/none'), -4) == '.svg'),
        ]));

        if (empty($rows)) {
            return new Tempcode();
        }
        foreach ($rows as $row) {
            $path = $row['e_theme_img_code'];

            $url = find_theme_image($path);
            $content->attach(do_template('FORM_SCREEN_INPUT_THEME_IMAGE_ENTRY', [
                '_GUID' => '22050272aebe90adf8cd4c89e4a7b06a',
                'PRETTY' => '',
                'CHECKED' => $path == $selected_path,
                'NAME' => 'emoticon',
                'CODE' => $path,
                'URL' => $url,
                'VECTOR' => (substr($url, -4) == '.svg'),
            ]));
        }

        $input = do_template('FORM_SCREEN_INPUT_RADIO_LIST', [
            '_GUID' => '80fe581b26d04876180605cdbb111f6a',
            'NAME' => 'emoticon',
            'REQUIRED' => false,
            'CODE' => $selected_path,
            'TABINDEX' => strval($tabindex),
            'CONTENT' => $content,
            'IMAGES' => true,
            'LINEAR' => false,
        ]);

        return _form_input('', do_lang_tempcode('TOPIC_EMOTICON'), '', $input, false);
    }

    /**
     * Create a default post based on a template of quoting the given list of quotes.
     *
     * @param  array $quotes A list of posts to quote
     * @return Tempcode The default post
     */
    public function attach_quotes(array $quotes) : object
    {
        require_code('comcode_cleanup');

        $post = new Tempcode();
        foreach ($quotes as $quote) {
            $_postdetails = $GLOBALS['FORUM_DB']->query_select('f_posts', ['p_cache_forum_id', 'p_post', 'p_poster_name_if_guest', 'p_topic_id', 'p_intended_solely_for', 'p_poster', 'p_validated', 'p_ip_address'], ['id' => $quote], '', 1);
            if (!array_key_exists(0, $_postdetails)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
            }
            if ($_postdetails[0]['p_cache_forum_id'] !== null) {
                if ((is_guest()) && ($_postdetails[0]['p_intended_solely_for'] !== null)) {
                    access_denied('I_ERROR');
                } elseif ((!has_privilege(get_member(), 'view_other_pt')) && ($_postdetails[0]['p_intended_solely_for'] != get_member()) && ($_postdetails[0]['p_poster'] != get_member()) && ($_postdetails[0]['p_intended_solely_for'] !== null)) {
                    access_denied('I_ERROR');
                }
                if ((!has_privilege(get_member(), 'see_unvalidated')) && (addon_installed('unvalidated')) && ($_postdetails[0]['p_validated'] == 0) && (($_postdetails[0]['p_poster'] != get_member()) || ((is_guest($_postdetails[0]['p_poster'])) && ($_postdetails[0]['p_ip_address'] != get_ip_address())))) {
                    access_denied('I_ERROR');
                }
            }

            $_topic = $GLOBALS['FORUM_DB']->query_select('f_topics', ['t_pt_to', 't_pt_from', 't_cache_first_title'], ['id' => $_postdetails[0]['p_topic_id']], '', 1);
            if (!array_key_exists(0, $_topic)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
            }

            if (!cns_may_access_topic($_postdetails[0]['p_topic_id'])) {
                access_denied('I_ERROR');
            }

            $post->attach(do_template('CNS_QUOTE_FCOMCODE', [
                '_GUID' => '5542508cad43a0cd5798afbb06f9e616',
                'ID' => strval($quote),
                'TITLE' => $_topic[0]['t_cache_first_title'],
                'POST' => comcode_censored_raw_code_access(get_translated_text($_postdetails[0]['p_post'], $GLOBALS['FORUM_DB'])),
                'BY' => $_postdetails[0]['p_poster_name_if_guest'],
                'BY_ID' => strval($_postdetails[0]['p_poster']),
            ], null, false, null, '.txt', 'text'));
        }

        return $post;
    }

    /**
     * The form element for choosing a Post Template.
     *
     * @param  AUTO_LINK $forum_id The forum ID we are looking for Post Templates active in
     * @return array A pair: The form element (Tempcode) and the default post to make
     */
    public function post_templates(int $forum_id) : array
    {
        if (!addon_installed('cns_post_templates')) {
            return [new Tempcode(), ''];
        }

        require_lang('cns_post_templates');

        $specialisation = new Tempcode();

        require_code('cns_posts_action');
        $templates = cns_get_post_templates($forum_id);
        $post_templates = new Tempcode();
        $post = '';
        foreach ($templates as $template) {
            list($title, $text, $default) = $template;
            if ($default) {
                $post = $text;
            }
            $post_templates->attach(form_input_list_entry(str_replace("\n", '\n', $text), $default == 1, $title));
        }
        if (!$post_templates->is_empty()) {
            $post_templates2 = form_input_list_entry('', false, do_lang_tempcode('NA_EM'));
            $post_templates2->attach($post_templates);

            $input = do_template('CNS_POST_TEMPLATE_SELECT', [
                '_GUID' => '2e4270e8fb8050f0201f5aa2af56270a',
                'TABINDEX' => '3',
                'LIST' => $post_templates2,
                'SKIP_LABEL' => false,
                'RESETS' => false,
            ]);
            $specialisation->attach(_form_input('post_template', do_lang_tempcode('POST_TEMPLATE'), do_lang_tempcode('DESCRIPTION_POST_TEMPLATE'), $input, false, false));
        }

        return [$specialisation, $post];
    }

    /**
     * The UI to create a new topic.
     *
     * @param  boolean $private_topic Whether a new Private Topic is being created
     * @param  ?MEMBER $member_id The member ID being whispered too (null: N/A)
     * @param  string $img_path Theme image code
     * @param  ?Tempcode $text Text of screen (null: none)
     * @return Tempcode The UI
     */
    public function new_topic(bool $private_topic = false, ?int $member_id = null, string $img_path = '', ?object $text = null) : object
    {
        if (!$private_topic) {
            $forum_id = get_param_integer('id');

            require_code('cns_topics');
            if (!cns_may_post_topic($forum_id, get_member())) {
                access_denied('I_ERROR');
            }
        } else {
            $forum_id = null;
        }

        $staff_help_url = null;

        // Breadcrumbs etc
        if ($private_topic) {
            breadcrumb_set_parents([['_SEARCH:forumview:pt', do_lang_tempcode('PRIVATE_TOPICS')]]);

            $username = mixed();
            $username = ($member_id == get_member()) ? false : $GLOBALS['FORUM_DRIVER']->get_username($member_id, false, USERNAME_DEFAULT_ERROR);
        } else {
            if ($forum_id !== null) {
                if (!has_category_access(get_member(), 'forums', strval($forum_id))) {
                    access_denied('CATEGORY_ACCESS'); // Can happen if trying to reply to a stated whisper made to you in a forum you don't have access to
                }
            }

            $breadcrumbs = cns_forum_breadcrumbs($forum_id, null, null, false);
            breadcrumb_set_self(do_lang_tempcode('ADD_TOPIC'));
            breadcrumb_set_parents($breadcrumbs);
        }

        url_default_parameters__enable();

        $hidden_fields = new Tempcode();
        $specialisation = new Tempcode();
        $specialisation2 = new Tempcode();

        // Where to post to
        $map = ['page' => '_SELF', 'type' => '_add_reply'];
        $redirect = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($redirect != '') {
            $map['redirect'] = protect_url_parameter($redirect);
        }
        $post_url = build_url($map, '_SELF');

        // Cloning support
        $clone_id = get_param_integer('clone_id', null);
        $existing_title = post_param_string('title', '');
        $existing_description = post_param_string('description', '');
        $post = post_param_string('post', '');
        if ($clone_id !== null) {
            $post_rows = $GLOBALS['FORUM_DB']->query_select('f_posts p JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_topics t ON t.id=p.p_topic_id', ['p.*', 't.t_description'], ['t.id' => $clone_id], '', 1);
            if ((array_key_exists(0, $post_rows)) && ($post_rows[0]['p_cache_forum_id'] !== null) && (has_category_access(get_member(), 'forums', strval($post_rows[0]['p_cache_forum_id'])))) {
                $existing_title = $post_rows[0]['p_title'];
                $existing_description = $post_rows[0]['t_description'];
                require_code('comcode_cleanup');
                $post = comcode_censored_raw_code_access(get_translated_text($post_rows[0]['p_post'], $GLOBALS['FORUM_DB']));
            }
        }

        // Title
        $specialisation->attach(form_input_line(do_lang_tempcode('TITLE'), '', 'title', $existing_title, true, 1, 120));

        // Where it goes to
        if ($private_topic) {
            if ($GLOBALS['FORUM_DRIVER']->is_banned($member_id)) {
                warn_exit(do_lang_tempcode('mail:NO_ACCEPT_EMAILS'));
            }

            if ($member_id == get_member()) {
                $specialisation->attach(form_input_username_multi(do_lang_tempcode('TO'), '', 'to_member_id_', [], 1, true, 1));
            } else {
                $hidden_fields->attach(form_input_hidden('member_id', strval($member_id)));
            }
            $threaded = false;
        } else {
            $hidden_fields->attach(form_input_hidden('forum_id', strval($forum_id)));
            $_threaded = ($GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'f_is_threaded', ['id' => $forum_id]) == 1);
            if ($_threaded === null) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'forum'));
            }
            $threaded = ($_threaded === 1);
        }

        // Description
        if ((get_option('is_on_topic_descriptions') == '1') && (!$threaded)) {
            $field = form_input_line(do_lang_tempcode('DESCRIPTION'), '', 'description', $existing_description, false, 2);
            if (is_mobile()) {
                $specialisation2->attach($field);
            } else {
                $specialisation->attach($field);
            }
        }

        // Set up some post details
        $quote = get_param_integer('quote', null);
        if ($quote !== null) {
            $_postdetails = $this->attach_quotes([$quote]);
            $post = $_postdetails->evaluate();
        }
        if (!$private_topic) {
            list($post_templates, $post2) = $this->post_templates($forum_id);
            if ($post == '') {
                $post = $post2;
            }
            $specialisation->attach($post_templates);
        }
        if (get_option('is_on_topic_emoticons') == '1') {
            $field = $this->choose_topic_emoticon($img_path);
            if (is_mobile()) {
                $specialisation2->attach($field);
            } else {
                $specialisation->attach($field);
            }
        }

        if (is_guest()) {
            $specialisation->attach(form_input_line(do_lang_tempcode('GUEST_NAME'), '', 'name', (get_option('force_guest_names') == '1') ? '' : do_lang('GUEST'), true));
        }

        // Various kinds of tick (check) options
        if ((!$private_topic) && (cns_may_moderate_forum($forum_id, get_member()))) {
            $moderation_options = [
                [do_lang_tempcode('OPEN'), 'open', true, do_lang_tempcode('DESCRIPTION_OPEN')],
                [do_lang_tempcode('EMPHASISED'), 'is_emphasised', false, do_lang_tempcode('DESCRIPTION_EMPHASISED')],
                [do_lang_tempcode('PINNED'), 'pinned', false, do_lang_tempcode('DESCRIPTION_PINNED')],
            ];
            if (addon_installed('unvalidated')) {
                $moderation_options[] = [
                    do_lang_tempcode('VALIDATED'),
                    'validated',
                    true,
                    do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'topic'),
                ];
            }
            if (!$private_topic) {
                $moderation_options[] = [do_lang_tempcode('CASCADING'), 'cascading', false, do_lang_tempcode('DESCRIPTION_CASCADING')];
            }
            if (addon_installed('calendar')) {
                $specialisation2->attach(form_input_date__cron(do_lang_tempcode('CNS_PUBLICATION_TIME'), do_lang_tempcode('CNS_DESCRIPTION_PUBLICATION_TIME'), 'schedule', false, true, true));
            }
        } else {
            $hidden_fields->attach(form_input_hidden('open', '1'));
            $hidden_fields->attach(form_input_hidden('validated', '1'));
            $moderation_options = [];
        }
        $hidden_fields->attach(form_input_hidden('from_url', get_self_url(true)));
        $js_function_calls = $this->_post_javascript();
        $options = []; // [pretty name, name, ticked (checked), description, read only]
        if (!is_guest()) {
            if (addon_installed('cns_signatures')) {
                if (get_option('enable_skip_sig') == '1') {
                    $options[] = [do_lang_tempcode('SKIP_SIGNATURE'), 'skip_sig', false, do_lang_tempcode('DESCRIPTION_SKIP_SIGNATURE'), false];
                }
            }
            if (cns_forum_allows_anonymous_posts($forum_id)) {
                $options[] = [do_lang_tempcode('_MAKE_ANONYMOUS_POST'), 'anonymous', false, do_lang_tempcode('MAKE_ANONYMOUS_POST_DESCRIPTION'), false];
            }
        }
        require_code('cns_polls_action3');

        $add_poll_url = build_url(['page' => '_SELF', 'type' => 'add_poll', 'adding_new_topic' => '1', 'forum_id' => $forum_id], '_SELF'); // The actual adding of the topic to the database will be done alongside the poll itself
        $default_poll_options = cns_get_default_poll_options($forum_id);
        $options[] = [do_lang_tempcode('ADD_TOPIC_POLL'), 'add_poll', $default_poll_options['requireTopicPoll'], do_lang_tempcode('DESCRIPTION_ADD_TOPIC_POLL'), $default_poll_options['requireTopicPoll']];

        // Only load JS for toggling form action URL if topic polls are not required. Else, forcefully re-direct to add poll.
        if ($default_poll_options['requireTopicPoll']) {
            $post_url = $add_poll_url;
            $hidden_fields->attach(form_input_hidden('csrf_token_preserve', '1'));
        } else {
            $js_function_calls[] = ['newTopicFormChangeActionIfAddingPoll', ['add_poll_url' => $add_poll_url]];
            $hidden_fields->attach(form_input_hidden('csrf_token_preserve', '0'));
        }
        if (count($options) == 1) {
            $specialisation->attach(form_input_tick($options[0][0], $options[0][3], $options[0][1], $options[0][2], null, '1', $options[0][4]));
        } else {
            $specialisation2->attach(form_input_various_ticks($options, ''));
        }
        if (!empty($moderation_options)) {
            $specialisation2->attach(form_input_various_ticks($moderation_options, '', null, do_lang_tempcode('MODERATION_OPTIONS')));
        }

        // Custom fields?
        require_code('fields');
        if (has_tied_catalogue('topic')) {
            append_form_custom_fields('topic', ($clone_id === null) ? null : strval($clone_id), $specialisation, $hidden_fields);
        }
        if (has_tied_catalogue('post')) {
            append_form_custom_fields('post', ($clone_id === null) ? null : strval($clone_id), $specialisation, $hidden_fields);
        }

        require_code('content2');
        $specialisation2->attach(metadata_get_fields('topic', null, false, ['submitter', 'add_time', 'edit_time']));

        if ($text === null) {
            $text = new Tempcode();
        }

        // CAPTCHA?
        if (addon_installed('captcha')) {
            require_code('captcha');
            if (use_captcha()) {
                $specialisation->attach(form_input_captcha($hidden_fields));
                $text->attach(paragraph(do_lang_tempcode('FORM_TIME_SECURITY')));
            }
        }

        // Note about points?
        if (addon_installed('points')) {
            $login_url = build_url(['page' => 'login', 'type' => 'browse', 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('login'));
            $_login_url = escape_html($login_url->evaluate());
            if ((is_guest()) && ((get_forum_type() != 'cns') || (has_actual_page_access(get_member(), 'join')))) {
                $text->attach(paragraph(do_lang_tempcode('NOT_LOGGED_IN_NO_CREDIT', $_login_url)));
            }
        }

        // Needs validating?
        if (($forum_id !== null) && (!has_privilege(get_member(), 'bypass_validation_midrange_content', 'topics', ['forums', $forum_id]))) {
            $text->attach(paragraph(do_lang_tempcode('WILL_NEED_VALIDATING')));
        }

        // Awards?
        if (addon_installed('awards')) {
            require_code('awards');
            $specialisation2->attach(get_award_fields(['topic', 'post']));
        }

        if ((function_exists('captcha_ajax_check_function')) && (captcha_ajax_check_function() != '')) {
            $js_function_calls[] = captcha_ajax_check_function();
        }

        // Render form
        $posting_form = get_posting_form(do_lang($private_topic ? 'ADD_PRIVATE_TOPIC' : 'ADD_TOPIC'), 'buttons/add_topic', $post, $post_url, $hidden_fields, $specialisation, null, '', $specialisation2, null, $js_function_calls, null, true, true, true, true, is_mobile(), '', null, $staff_help_url);

        url_default_parameters__disable();

        // Work out title to show
        if (!$private_topic) {
            $forum_name = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'f_name', ['id' => $forum_id]);
            if ($forum_name === null) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'forum'));
            }
        }
        if ($private_topic) {
            if ($username === false) {
                $title = do_lang_tempcode('_ADD_PRIVATE_TOPIC_UNKNOWN');
            } else {
                $title = do_lang_tempcode('_ADD_PRIVATE_TOPIC', escape_html($username));
            }
        } else {
            $title = do_lang_tempcode('_ADD_TOPIC', escape_html($forum_name));
        }
        $_title = get_screen_title($title, false);

        return do_template('POSTING_SCREEN', ['_GUID' => 'ba5308fe0a8f9f9a24988209423a3a16', 'TEXT' => $text, 'TITLE' => $_title, 'POSTING_FORM' => $posting_form]);
    }

    /**
     * The UI to create a PT.
     *
     * @return Tempcode The UI
     */
    public function new_pt() : object // Type
    {
        if (is_guest()) {
            access_denied('NOT_AS_GUEST');
        }

        $member_id = get_param_integer('intended_solely_for', get_param_integer('id', get_member()));

        cns_check_make_private_topic();
        require_code('cns_members2');
        if (!cns_may_whisper($member_id)) {
            warn_exit(do_lang_tempcode('NO_PT_FROM_ALLOW'));
        }

        if (get_option('enable_pt_restrict') == '1') {
            $agreed = post_param_integer('agreed', 0);
            $member_row = $GLOBALS['FORUM_DRIVER']->get_member_row($member_id);
            $just_member_row = db_map_restrict($member_row, ['id', 'm_pt_rules_text']);
            $rules = get_translated_tempcode('f_members', $just_member_row, 'm_pt_rules_text', $GLOBALS['FORUM_DB']);
            if (($agreed == 0) && (trim($rules->evaluate()) != '')) {
                $url = get_self_url();
                $title = get_screen_title('NEW_PRIVATE_TOPIC');
                return do_template('CNS_MEMBER_PT_RULES_SCREEN', [
                    '_GUID' => '0c39906d4aeb728cc386cd9a79a338c7',
                    'TITLE' => $title,
                    'USERNAME' => $GLOBALS['FORUM_DRIVER']->get_username($member_id),
                    'MEMBER_ID' => strval($member_id),
                    'URL' => $url,
                    'RULES' => $rules,
                ]);
            }
        }

        $text = do_lang_tempcode('PRIVATE_TOPIC_DOC');

        breadcrumb_set_self(do_lang_tempcode('NEW_PRIVATE_TOPIC'));

        return $this->new_topic(true, $member_id, '', $text);
    }

    /**
     * Sort out breadcrumbing for a forum/topic/additional combination.
     *
     * @param  AUTO_LINK $forum_id The forum for breadcrumbing
     * @param  AUTO_LINK $topic_id The topic for breadcrumbing
     * @param  string $topic_title The topic title
     * @param  Tempcode $doing The action currently being done
     */
    public function handle_topic_breadcrumbs(int $forum_id, int $topic_id, string $topic_title, object $doing)
    {
        if ($forum_id === null) {
            breadcrumb_set_parents([['_SEARCH:forumview:pt', do_lang_tempcode('PRIVATE_TOPICS')], ['_SEARCH:topicview:' . strval($topic_id), $topic_title]]);
        } else {
            $breadcrumbs = cns_forum_breadcrumbs($forum_id, null, null, false);
            $breadcrumbs[] = ['_SEARCH:topicview:browse:' . strval($topic_id), $topic_title];
            $breadcrumbs[] = ['', $doing];
            breadcrumb_set_parents($breadcrumbs);
        }
    }

    /**
     * The UI to make a post.
     *
     * @return Tempcode The UI
     */
    public function new_post() : object
    {
        require_code('cns_posts2');

        url_default_parameters__enable();

        $topic_id = get_param_integer('id');
        $parent_id = either_param_integer('parent_id', null);
        $intended_solely_for = get_param_integer('intended_solely_for', null);
        $post = mixed();
        $post = post_param_string('post', null); // Copy existing post into box (from quick reply 'more options' button)
        if ($post === null) {
            $quotes = [];
            $quote = get_param_integer('quote', null);
            if ($quote === null) {
                $quotes = $this->get_markers();
            } else {
                $quotes[] = $quote;
            }
            $post = $this->attach_quotes($quotes);

            if ((count($quotes) == 1) && ($parent_id === null)) {
                $parent_id = $quotes[0];
            }
        }

        $__whisperer = $GLOBALS['FORUM_DB']->query_select('f_posts', ['p_poster', 'p_time'], ['p_topic_id' => $topic_id, 'p_intended_solely_for' => get_member()], 'ORDER BY p_time DESC', 1);
        if (array_key_exists(0, $__whisperer)) {
            $whisperer = $__whisperer[0]['p_poster'];
            $_whisperer = $GLOBALS['FORUM_DRIVER']->get_username($whisperer, false, USERNAME_DEFAULT_NULL);
            if ($_whisperer !== null) {
                attach_message(do_lang_tempcode('TOPIC_HAS_WHISPER_TO_YOU', escape_html($_whisperer)), 'notice');
            }
        }

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $forum_id = $topic_info['t_forum_id'];
        $topic_title = $topic_info['t_cache_first_title'];
        if ($topic_title == '') {
            $topic_title = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_title', ['p_topic_id' => $topic_id]);
        }
        if ($topic_title === null) {
            $topic_title = '';
        }
        if (!cns_may_access_topic($topic_id)) { // cns_may_post_in_topic will be checked on actualiser, we can't check now as we don't know if it will be an inline personal post or not
            access_denied('I_ERROR');
        }
        $this->handle_topic_breadcrumbs($forum_id, $topic_id, $topic_title, do_lang_tempcode('ADD_POST'));

        if ($topic_info['t_is_open'] == 0) {
            $may_moderate_forum = cns_may_moderate_forum($forum_id);
            if (!$may_moderate_forum) {
                warn_exit(do_lang_tempcode('TOPIC_IS_CLOSED'));
            }
        }

        $hidden_fields = new Tempcode();
        $hidden_fields->attach(form_input_hidden('topic_id', strval($topic_id)));
        $hidden_fields->attach(form_input_hidden('from_url', get_self_url(true, false, ['type' => get_param_string('type', 'browse')])));

        $map = ['page' => '_SELF', 'type' => '_add_reply', 'parent_id' => $parent_id, 'timestamp' => get_param_integer('timestamp', null)];
        $test = get_param_string('kfs' . (($forum_id === null) ? '' : strval($forum_id)), null, INPUT_FILTER_GET_COMPLEX);
        if (($test !== null) && ($test !== '0')) {
            $map['kfs' . (($forum_id === null) ? '' : strval($forum_id))] = $test;
        }
        $test_threaded = get_param_integer('threaded', null);
        if ($test_threaded !== null) {
            $map['threaded'] = $test_threaded;
        }
        $post_url = build_url($map, '_SELF');

        // Certain aspects relating to the posting system
        $specialisation = new Tempcode();
        if (get_option('is_on_post_titles') == '1') {
            $specialisation->attach(form_input_line(do_lang_tempcode('TITLE'), '', 'title', post_param_string('title', ''), false, 1, 120));
        }
        if (cns_may_moderate_forum($forum_id, get_member())) {
            $moderation_options = [
                [do_lang_tempcode('EMPHASISED'), 'is_emphasised', false, do_lang_tempcode('DESCRIPTION_EMPHASISED')],
            ];
            if (addon_installed('unvalidated')) {
                $moderation_options[] = [
                    do_lang_tempcode('VALIDATED'),
                    'validated',
                    true,
                    do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'post'),
                ];
            }
            //if ($intended_solely_for === null) $moderation_options[] = [do_lang_tempcode('CASCADING'), 'cascading', false, do_lang_tempcode('DESCRIPTION_CASCADING')];     Too much to offer this too
        } else {
            $moderation_options = [];
            $hidden_fields->attach(form_input_hidden('validated', '1'));
        }
        $options = [];
        if (!is_guest()) {
            if (addon_installed('cns_signatures')) {
                if (get_option('enable_skip_sig') == '1') {
                    $options[] = [do_lang_tempcode('SKIP_SIGNATURE'), 'skip_sig', false, do_lang_tempcode('DESCRIPTION_SKIP_SIGNATURE')];
                }
            }
            if (cns_forum_allows_anonymous_posts($forum_id)) {
                $options[] = [do_lang_tempcode('_MAKE_ANONYMOUS_POST'), 'anonymous', false, do_lang_tempcode('MAKE_ANONYMOUS_POST_DESCRIPTION')];
            }
        }
        $specialisation2 = new Tempcode();
        $specialisation2->attach(form_input_various_ticks($options, ''));
        if (!empty($moderation_options)) {
            $specialisation2->attach(form_input_various_ticks($moderation_options, '', null, do_lang_tempcode('MODERATION_OPTIONS')));
        }

        if ($forum_id !== null) {
            $post_templates = $this->post_templates($forum_id);
            $specialisation->attach($post_templates[0]);
            if (((is_object($post)) && ($post->is_empty())) || ($post === '')) {
                $post = $post_templates[1];
            }
        }

        $_intended_solely_for = '';
        if ($intended_solely_for !== null) {
            $_intended_solely_for = $GLOBALS['FORUM_DRIVER']->get_username($intended_solely_for, false, USERNAME_DEFAULT_BLANK);
        }
        if (cns_may_make_private_topic()) {
            if ((($_intended_solely_for != '') || (get_option('inline_pp_advertise') == '1')) && ($forum_id !== null)) {
                url_default_parameters__disable();

                $specialisation->attach(form_input_username(do_lang_tempcode('WHISPER'), do_lang_tempcode('DESCRIPTION_WHISPER'), 'intended_solely_for', $_intended_solely_for, false));

                url_default_parameters__enable();
            }
        }

        if (is_guest()) {
            $specialisation->attach(form_input_line(do_lang_tempcode('GUEST_NAME'), '', 'name', (get_option('force_guest_names') == '1') ? '' : do_lang('GUEST'), true));
        }

        require_code('fields');
        if (has_tied_catalogue('post')) {
            append_form_custom_fields('post', null, $specialisation, $hidden_fields);
        }

        $text = new Tempcode();

        if (addon_installed('captcha')) {
            require_code('captcha');
            if (use_captcha()) {
                $specialisation->attach(form_input_captcha($hidden_fields));
                $text->attach(paragraph(do_lang_tempcode('FORM_TIME_SECURITY')));
            }
        }

        if (addon_installed('points')) {
            $login_url = build_url(['page' => 'login', 'type' => 'browse', 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('login'));
            $_login_url = escape_html($login_url->evaluate());
            if ((is_guest()) && ((get_forum_type() != 'cns') || (has_actual_page_access(get_member(), 'join')))) {
                $text->attach(paragraph(do_lang_tempcode('NOT_LOGGED_IN_NO_CREDIT', $_login_url)));
            }
        }

        if (($forum_id !== null) && (!has_privilege(get_member(), 'bypass_validation_lowrange_content', 'topics', ['forums', $forum_id]))) {
            $text->attach(paragraph(do_lang_tempcode('WILL_NEED_VALIDATING')));
        }

        // Awards?
        if (addon_installed('awards')) {
            require_code('awards');
            $specialisation2->attach(get_award_fields('post'));
        }

        // Moderator reply
        if (cns_may_moderate_forum($forum_id, get_member())) {
            require_code('cns_forums2');

            $specialisation2->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '061fdbebcc17e08e8d6ff2c329f3d483', 'SECTION_HIDDEN' => true, 'TITLE' => do_lang_tempcode('TOPIC_MODERATION')]));
            $specialisation2->attach(form_input_line(do_lang_tempcode('TITLE'), '', 'new_title', $topic_title, false));
            $specialisation2->attach(form_input_tree_list(do_lang_tempcode('DESTINATION_FORUM'), do_lang_tempcode('DESCRIPTION_DESTINATION_FORUM'), 'to', null, 'choose_forum', [], false, ($forum_id === null) ? '' : strval($forum_id)));
            $options = [
                [do_lang_tempcode('OPEN'), 'open', $topic_info['t_is_open'] == 1, do_lang_tempcode('DESCRIPTION_OPEN')],
                [do_lang_tempcode('PINNED'), 'pinned', $topic_info['t_pinned'] == 1, do_lang_tempcode('DESCRIPTION_PINNED')],
            ];
            if (addon_installed('unvalidated')) {
                if ($topic_info['t_validated'] == 0) {
                    $topic_info['t_validated'] = get_param_integer('validated', 0);
                    if (($topic_info['t_validated'] == 1) && (addon_installed('unvalidated'))) {
                        attach_message(do_lang_tempcode('WILL_BE_VALIDATED_WHEN_SAVING'));
                    }
                }

                $options[] = [
                    do_lang_tempcode('VALIDATED'),
                    'topic_validated',
                    $topic_info['t_validated'] == 1,
                    do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'topic'),
                ];
            }
            if ($forum_id !== null) {
                $options[] = [do_lang_tempcode('CASCADING'), 'cascading', $topic_info['t_cascading'] == 1, do_lang_tempcode('DESCRIPTION_CASCADING')];
            }
            $specialisation2->attach(form_input_various_ticks($options, ''));
            if (addon_installed('calendar')) {
                $specialisation2->attach(form_input_date__cron(do_lang_tempcode('CNS_PUBLICATION_TIME'), do_lang_tempcode('CNS_DESCRIPTION_PUBLICATION_TIME'), 'schedule', false, true, true));
            }
        }

        require_code('content2');
        $specialisation2->attach(metadata_get_fields('post', null));

        $topic_posts = new Tempcode();
        $posts = $GLOBALS['FORUM_DB']->query('SELECT *,p.id AS id FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_posts p WHERE p_topic_id=' . strval($topic_id) . ' AND (p_intended_solely_for IS NULL OR p_intended_solely_for=' . strval(get_member()) . ' OR p_poster=' . strval(get_member()) . ') AND p_validated=1 ORDER BY p_time DESC,p.id DESC', 20);
        foreach ($posts as $row) {
            $topic_posts->attach(render_post_box($row, true, false, false));
        }
        if (!$topic_posts->is_empty()) {
            $topic_posts = do_template('CNS_POSTING_SCREEN_POSTS', ['_GUID' => '3d3b14cf3a48b2a16eed5b1bd92b1187', 'POSTS' => $topic_posts]);
        }

        if (is_object($post)) {
            $post = $post->evaluate();
        }
        $js_function_calls = $this->_post_javascript();
        $posting_form = get_posting_form(do_lang('REPLY'), 'buttons/new_reply', $post, $post_url, $hidden_fields, $specialisation, null, $topic_posts->evaluate(), $specialisation2, null, $js_function_calls);

        if ($parent_id === null) {
            if (($forum_id !== null) && (get_param_integer('threaded', $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_is_threaded', ['id' => $forum_id])) == 1)) {
                $title = get_screen_title('_ADD_POST_TOP_LEVEL', true, [escape_html($topic_title)]);
            } else {
                $title = get_screen_title('_ADD_POST', true, [escape_html($topic_title)]);
            }
        } else {
            $poster_name_if_guest_parent = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_poster_name_if_guest', ['id' => $parent_id]);
            if ($poster_name_if_guest_parent === null) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
            }

            $title = get_screen_title('_ADD_POST_UNDER', true, [escape_html($topic_title), escape_html($poster_name_if_guest_parent)]);
        }

        url_default_parameters__disable();

        return do_template('POSTING_SCREEN', ['_GUID' => 'ca2eab9a9ffdab267a48eb7be48ccdc0', 'TEXT' => $text, 'TITLE' => $title, 'POSTING_FORM' => $posting_form]);
    }

    /**
     * The UI to report a post.
     *
     * @return Tempcode The UI
     */
    public function report_post() : object // Type
    {
        $post_id = get_param_integer('id');

        require_code('report_content');

        $title = get_screen_title('REPORT_POST');

        $topic_info = null;
        $post_info = null;
        $js_function_calls = $this->_post_javascript();
        $ret = report_post_form($title, $post_id, $js_function_calls, $topic_info, $post_info);

        $topic_id = $post_info['p_topic_id'];

        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('REPORT_POST'));

        $this->check_has_mod_access($topic_id);

        return $ret;
    }

    /**
     * The actualiser to report a post.
     *
     * @return Tempcode The UI
     */
    public function _report_post() : object
    {
        if (addon_installed('captcha')) {
            require_code('captcha');
            enforce_captcha();
        }

        $post_id = post_param_integer('post_id');

        $post = post_param_string('post');
        require_code('form_templates');
        handle_default_comcode_text_input($post);

        $anonymous = post_param_integer('anonymous', 0);

        require_code('report_content');
        $_url = report_post($post_id, $post, $anonymous);

        // Show it worked / Refresh
        $_title = get_screen_title('REPORT_POST');
        $url = get_param_string('redirect', $_url->evaluate(), INPUT_FILTER_URL_INTERNAL);
        return redirect_screen($_title, $url, do_lang_tempcode('POST_REPORTED'));
    }

    /**
     * The actualiser to add a reply.
     *
     * @return Tempcode The UI
     */
    public function _add_reply() : object // Type
    {
        $info = $this->_add_reply_and_return_info();
        $tempcode = $info['output'];
        return $tempcode;
    }

    /**
     * The actualiser to add a reply (shared for adding topics, adding posts, and new topics with polls).
     *
     * @return array Map of info
     */
    public function _add_reply_and_return_info() : array
    {
        if (addon_installed('captcha')) {
            require_code('captcha');
            enforce_captcha();
        }

        cms_profile_start_for('_add_reply');

        require_code('attachments2');
        require_code('cns_posts_action');
        require_code('cns_posts_action2');

        $invited_members = [];

        $topic_id = either_param_integer('topic_id', null); // Posting into an existing topic?
        $forum_id = post_param_integer('forum_id', null); // New topic in existing forum?
        $member_id = post_param_integer('member_id', null); // Send TOPIC to specific member? Could be Private Topic (topic_id==null, forum_id==null), or personal post (topic_id!=null, forum_id==null)
        $parent_id = either_param_integer('parent_id', null);
        if ($member_id === null) {
            $member_username = post_param_string('to_member_id_0', '');
            if ($member_username != '') {
                $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($member_username);
                if (($member_id === null) || (is_guest($member_id))) {
                    warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($member_username)), false, false, 404);
                }
                if ($member_id == get_member()) {
                    warn_exit(do_lang_tempcode('NO_PRIVATE_SELF'));
                }
            }
            foreach ($_POST as $key => $_invited_member) {
                if (substr($key, 0, 13) != 'to_member_id_') {
                    continue;
                }
                if ($key == 'to_member_id_0') {
                    continue;
                }
                if ($_invited_member == '') {
                    continue;
                }

                $invited_member = $GLOBALS['FORUM_DRIVER']->get_member_from_username($_invited_member);
                if (($invited_member === null) || (is_guest($invited_member))) {
                    attach_message(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($_invited_member)), 'warn');
                } else {
                    $invited_members[] = intval($invited_member);
                }
            }
        }

        $validated = post_param_integer('validated', post_param_integer('_validated', 0));
        $is_emphasised = post_param_integer('is_emphasised', 0);
        $skip_sig = post_param_integer('skip_sig', 0);

        $post = post_param_string('post');
        require_code('form_templates');
        handle_default_comcode_text_input($post);

        $title = post_param_string('title', null);
        if ($title === null) {
            $title = '';
        }

        $check_permissions = true;
        $topic_validated = $validated;
        $anonymous = post_param_integer('anonymous', 0);
        $poster_name_if_guest = cns_get_safe_specified_poster_name();

        $new_topic = ($topic_id === null);

        if (!$new_topic) {
            $_intended_solely_for = post_param_string('intended_solely_for', '');
            if ($_intended_solely_for == '') {
                $intended_solely_for = null;
            } else {
                $intended_solely_for = $GLOBALS['FORUM_DRIVER']->get_member_from_username($_intended_solely_for);
                if (($intended_solely_for === null) || (is_guest($intended_solely_for))) {
                    warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($_intended_solely_for)), false, false, 404);
                }
                if ($intended_solely_for == get_member()) {
                    warn_exit(do_lang_tempcode('NO_PRIVATE_SELF'));
                }
            }
        } else {
            $intended_solely_for = null;
        }

        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        if ($new_topic) { // A new topic
            cns_check_post($post);

            if ($title == '') {
                warn_exit(do_lang_tempcode('NO_PARAMETER_SENT', 'title'));
            }

            $topic_title = $title;

            require_code('content2');
            $metadata = actual_metadata_get_fields('topic', null, ['submitter', 'add_time', 'edit_time']);

            if ($forum_id === null) { // New Private Topic
                if ($member_id == -1) {
                    warn_exit(do_lang_tempcode('NO_PARAMETER_SENT', 'to_member_id_0'));
                }

                cns_check_make_private_topic();
                require_code('cns_members2');
                if (!cns_may_whisper($member_id)) {
                    warn_exit(do_lang_tempcode('NO_PT_FROM_ALLOW'));
                }

                if ($anonymous == 1) {
                    if (cns_forum_allows_anonymous_posts(null)) {
                        $poster_name_if_guest = null;
                    } else {
                        $anonymous = 0;
                    }
                }

                $topic_id = cns_make_topic(null, post_param_string('description', ''), post_param_string('emoticon', ''), $topic_validated, post_param_integer('open', 0), post_param_integer('pinned', 0), post_param_integer('cascading', 0), get_member(), $member_id, true, $metadata['views']);
                $first_post = true;
                $_title = get_screen_title('ADD_PRIVATE_TOPIC');
            } else { // New topic
                if ($anonymous == 1) {
                    if (cns_forum_allows_anonymous_posts($forum_id)) {
                        $poster_name_if_guest = null;
                    } else {
                        $anonymous = 0;
                    }
                }

                $topic_id = cns_make_topic($forum_id, post_param_string('description', ''), post_param_string('emoticon', ''), $topic_validated, post_param_integer('open', 0), post_param_integer('pinned', 0), post_param_integer('cascading', 0), null, null, true, $metadata['views']);
                $first_post = true;
                $_title = get_screen_title('ADD_TOPIC');

                $_topic_id = strval($topic_id);

                $schedule = post_param_date('schedule');

                if (($schedule !== null) && (addon_installed('calendar'))) {
                    $parameters = [];
                    require_code('calendar');
                    $start_year = intval(date('Y', $schedule));
                    $start_month = intval(date('m', $schedule));
                    $start_day = intval(date('d', $schedule));
                    $start_hour = intval(date('H', $schedule));
                    $start_minute = intval(date('i', $schedule));
                    require_code('calendar2');
                    schedule_code('publish_topic', strval($topic_id), $parameters, do_lang('ADD_SCHEDULED_TOPIC', $topic_title), $start_year, $start_month, $start_day, $start_hour, $start_minute);

                    $GLOBALS['FORUM_DB']->query_update('f_topics', ['t_validated' => 0], ['id' => $topic_id], '', 1);
                }

                if (addon_installed('awards')) {
                    require_code('awards');
                    handle_award_setting('topic', strval($topic_id));
                }
            }

            set_url_moniker('topic', strval($topic_id));

            require_code('fields');
            if (has_tied_catalogue('topic')) {
                save_form_custom_fields('topic', strval($topic_id));
            }
        } else {
            $_title = get_screen_title('ADD_POST');
            $first_post = false;

            $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['t_cache_first_title', 't_forum_id', 't_is_open', 't_description'], ['id' => $topic_id], '', 1);
            if (!array_key_exists(0, $_topic_info)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
            }
            $topic_info = $_topic_info[0];
            $forum_id = $topic_info['t_forum_id'];
            $topic_title = $topic_info['t_cache_first_title'];

            if ($anonymous == 1) {
                if (cns_forum_allows_anonymous_posts($forum_id)) {
                    $poster_name_if_guest = null;
                } else {
                    $anonymous = 0;
                }
            }

            if ($topic_info['t_is_open'] == 0) {
                $may_moderate_forum = cns_may_moderate_forum($forum_id);
                if (!$may_moderate_forum) {
                    warn_exit(do_lang_tempcode('TOPIC_IS_CLOSED'));
                }
            }

            // Moderator reply
            $new_title = post_param_string('new_title', null);
            if (($new_title !== null) && ($forum_id !== null) && (cns_may_moderate_forum($forum_id, get_member()))) {
                $cascading = post_param_integer('cascading', 0);
                $pinned = post_param_integer('pinned', 0);
                $open = post_param_integer('open', 0);
                $topic_validated = post_param_integer('topic_validated', 0);
                $to = post_param_integer('to', null);
                $schedule = post_param_date('schedule');

                cns_edit_topic($topic_id, null, null, $topic_validated, $open, $pinned, $cascading, '', ($new_title == '') ? null : $new_title);
                if (($to != $forum_id) && ($to !== null)) {
                    cns_move_topics($forum_id, $to, [$topic_id]);
                }

                if (($schedule !== null) && (addon_installed('calendar'))) {
                    $parameters = [$forum_id, $title, $post, $skip_sig, $first_post, $is_emphasised, $poster_name_if_guest, $intended_solely_for, $topic_title, $anonymous, get_member(), get_ip_address()];
                    require_code('calendar');
                    $start_year = intval(date('Y', $schedule));
                    $start_month = intval(date('m', $schedule));
                    $start_day = intval(date('d', $schedule));
                    $start_hour = intval(date('H', $schedule));
                    $start_minute = intval(date('i', $schedule));
                    require_code('calendar2');
                    schedule_code('publish_post', strval($topic_id), $parameters, do_lang('ADD_POST'), $start_year, $start_month, $start_day, $start_hour, $start_minute);

                    $text = do_lang_tempcode('SUCCESS');
                    $map = ['page' => 'topicview', 'type' => 'first_unread', 'id' => $topic_id];
                    $test = get_param_string('kfs' . (($forum_id === null) ? '' : strval($forum_id)), null, INPUT_FILTER_GET_COMPLEX);
                    if (($test !== null) && ($test !== '0')) {
                        $map['kfs' . (($forum_id === null) ? '' : strval($forum_id))] = $test;
                    }
                    $test_threaded = get_param_integer('threaded', null);
                    if ($test_threaded !== null) {
                        $map['threaded'] = $test_threaded;
                    }
                    $_url = build_url($map, get_module_zone('topicview'), [], false, false, false, 'first-unread');
                    $url = $_url->evaluate();
                    $url = get_param_string('redirect', $url, INPUT_FILTER_URL_INTERNAL);

                    $info = [
                        'forum_id'  => $forum_id,
                        'topic_id'  => $topic_id,
                        'post_id'   => null,
                        'member_id' => $member_id,
                        'output' => redirect_screen($_title, $url, $text),
                    ];

                    return $info;
                }
            }
        }

        require_code('content2');
        $metadata = actual_metadata_get_fields('post', null);

        // Substitution of support operator for tickets, if required
        if ($forum_id !== null) {
            if (addon_installed('tickets')) {
                require_code('tickets');
                if (is_ticket_forum($forum_id)) {
                    if ($metadata['submitter'] === null || $metadata['submitter'] == get_member()) {
                        $metadata['submitter'] = get_active_support_user();
                        if ($poster_name_if_guest == $GLOBALS['FORUM_DRIVER']->get_username(get_member(), false, USERNAME_DEFAULT_BLANK)) {
                            $poster_name_if_guest = $GLOBALS['FORUM_DRIVER']->get_username($metadata['submitter']);
                        }
                    }
                }
            }
        }

        $post_id = cns_make_post($topic_id, $title, $post, $skip_sig, $first_post, $validated, $is_emphasised, $poster_name_if_guest, null, $metadata['add_time'], $metadata['submitter'], $intended_solely_for, null, null, $check_permissions, true, null, true, $topic_title, null, $anonymous == 1, $forum_id === null || ($forum_id === null), $forum_id === null || ($forum_id === null), false, $parent_id);

        set_url_moniker('post', strval($post_id));

        if (addon_installed('awards')) {
            require_code('awards');
            handle_award_setting('post', strval($post_id));
        }

        if (($forum_id !== null) && ($anonymous == 0) && ($intended_solely_for === null)) {
            require_code('users2');
            if ((has_actual_page_access(get_modal_user(), 'forumview')) && (has_category_access(get_modal_user(), 'forums', strval($forum_id)))) {
                require_code('syndication');
                syndicate_described_activity($first_post ? 'cns:ACTIVITY_ADD_TOPIC' : 'cns:ACTIVITY_ADD_POST_IN', $first_post ? $title : $topic_title, '', '', '_SEARCH:topicview:browse:' . strval($topic_id) . '#post_' . strval($post_id), '', '', 'cns_forum');
            }
        }

        require_code('fields');
        if (has_tied_catalogue('post')) {
            save_form_custom_fields('post', strval($post_id));
        }

        $validated = $GLOBALS['FORUM_DB']->query_select_value('f_posts', 'p_validated', ['id' => $post_id]);

        $rep_post_id = post_param_integer('o_post_id', null);
        if ($rep_post_id !== null) {
            require_code('cns_topicview');
            $url = find_post_id_url($rep_post_id);
        } else {
            if ($validated != 0) {
                require_code('cns_topicview');
                $url = find_post_id_url($post_id);
            } else {
                $map = ['page' => 'topicview', 'type' => 'findpost', 'id' => $post_id];
                $test = get_param_string('kfs' . (($forum_id === null) ? '' : strval($forum_id)), null, INPUT_FILTER_GET_COMPLEX);
                if (($test !== null) && ($test !== '0')) {
                    $map['kfs' . (($forum_id === null) ? '' : strval($forum_id))] = $test;
                }
                $test_threaded = get_param_integer('threaded', null);
                if ($test_threaded !== null) {
                    $map['threaded'] = $test_threaded;
                }
                $_url = build_url($map, get_module_zone('topicview'), [], false, false, false, 'post_' . strval($post_id));
                $url = $_url->evaluate();
            }
        }

        $text = ($validated == 1) ? do_lang_tempcode('SUCCESS') : do_lang_tempcode('SUBMIT_UNVALIDATED_FORUM_POSTS');

        if ($forum_id !== null) {
            $topic_validated = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_validated', ['id' => $topic_id]);
            if (($topic_validated == 0) && (!has_privilege(get_member(), 'jump_to_unvalidated'))) {
                $map = ['page' => 'forumview', 'id' => $forum_id];
                $test = get_param_string('kfs' . (($forum_id === null) ? '' : strval($forum_id)), null, INPUT_FILTER_GET_COMPLEX);
                if (($test !== null) && ($test !== '0')) {
                    $map['kfs' . (($forum_id === null) ? '' : strval($forum_id))] = $test;
                }
                $test_threaded = get_param_integer('threaded', null);
                if ($test_threaded !== null) {
                    $map['threaded'] = $test_threaded;
                }
                $_url = build_url($map, get_module_zone('forumview'));
                $url = $_url->evaluate();

                $text = do_lang_tempcode('SUBMIT_UNVALIDATED_FORUM_TOPICS');
            }
        }

        if (($new_topic) && ($forum_id === null)) {
            require_code('notifications');

            enable_notifications('cns_topic', strval($topic_id), get_member()); // from
            enable_notifications('cns_topic', strval($topic_id), $member_id); // to
            foreach ($invited_members as $invited_member) {
                enable_notifications('cns_topic', strval($topic_id), $invited_member);

                cns_invite_to_pt($invited_member, $topic_id);
            }
        }

        if ($anonymous == 1) {
            log_it('MAKE_ANONYMOUS_POST', strval($post_id), $title);
        }

        if (($forum_id === null) && ($member_id !== null)) {
            send_pt_notification($post_id, $title, $topic_id, $member_id, null, $post);
        }

        cms_profile_end_for('_add_reply', '#' . strval($post_id));

        if ((!$new_topic) && ($forum_id !== null) && ($member_id === null)) {
            handle_topic_ticket_reply($forum_id, $topic_id, $topic_title, $post);
        }

        $url = get_param_string('redirect', $url, INPUT_FILTER_URL_INTERNAL);

        $info = [
            'forum_id'  => $forum_id,
            'topic_id'  => $topic_id,
            'post_id'   => $post_id,
            'member_id' => $member_id,
            'output' => redirect_screen($_title, $url, $text), // Show it worked / Refresh
        ];

        return $info;
    }

    /**
     * Used by Module_topics#add_poll() to validate input for new topic to be created together with the poll in one go.
     * We don't combine this with the code in Module_topics#_add_topic() as that also is doing stuff to the read in input. Cleaner to copy and paste in this rare instance.
     */
    public function _validate_request_for_potential_topic()
    {
        $forum_id = post_param_integer('forum_id', null); // New topic in existing forum?
        $member_id = post_param_integer('member_id', null); // Send TOPIC to specific member? Could be Private Topic (forum_id==null)

        if ($member_id === null) {
            $member_username = post_param_string('to_member_id_0', '');
            if ($member_username != '') {
                $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($member_username);
                if ($member_id === null) {
                    warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($member_username)), false, false, 404);
                }
            }
            foreach ($_POST as $key => $_invited_member) {
                if (substr($key, 0, 13) != 'to_member_id_') {
                    continue;
                }
                if ($key == 'to_member_id_0') {
                    continue;
                }
                if ($_invited_member == '') {
                    continue;
                }

                $invited_member = $GLOBALS['FORUM_DRIVER']->get_member_from_username($_invited_member);
                if ($invited_member === null) {
                    attach_message(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($_invited_member)), 'warn');
                }
            }
        }

        $post = post_param_string('post');
        require_code('form_templates');
        handle_default_comcode_text_input($post);

        $title = post_param_string('title', null);
        if ($title === null) {
            $title = '';
        }

        require_code('cns_posts_action');
        cns_check_post($post);

        if ($title == '') {
            warn_exit(do_lang_tempcode('NO_PARAMETER_SENT', 'title'));
        }

        require_code('cns_topics');
        if (!cns_may_post_topic($forum_id, get_member())) {
            access_denied('I_ERROR');
        }
    }

    /**
     * The actualiser to toggle notifications for a topic.
     *
     * @return Tempcode The UI
     */
    public function toggle_notifications_topic() : object // Type
    {
        require_code('notifications2');
        return notifications_ui_advanced('cns_topic', do_lang_tempcode('NOW_ENABLED_NOTIFICATIONS_TOPIC'), do_lang_tempcode('NOW_DISABLED_NOTIFICATIONS_TOPIC'));
    }

    /**
     * The actualiser to mark a topic as read.
     *
     * @return Tempcode The UI
     */
    public function mark_read_topic() : object // Type
    {
        $topic_id = get_param_integer('id');

        $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
        if ($id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }

        $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $topic_id]);

        cns_ping_topic_read($topic_id, get_member(), get_param_integer('timestamp', null));
        if (($forum_id === null) || (get_param_integer('ajax', 0) == 1)) {
            decache_private_topics(get_member());
        }

        if (get_param_integer('ajax', 0) == 1) {
            $GLOBALS['SCREEN_TEMPLATE_CALLED'] = '';
            exit();
        }

        return $this->redirect_to_forum('MARK_UNREAD', $forum_id, do_lang_tempcode('TOPIC_MARKED_READ'));
    }

    /**
     * The actualiser to mark a topic as unread.
     *
     * @return Tempcode The UI
     */
    public function mark_unread_topic() : object // Type
    {
        $topic_id = get_param_integer('id');

        $id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $topic_id]);
        if ($id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }

        $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
        if ($forum_id === null) {
            decache_private_topics(get_member());
        }

        $this->cns_ping_topic_unread($topic_id);

        return $this->redirect_to_forum('MARK_UNREAD', $forum_id, do_lang_tempcode('TOPIC_MARKED_UNREAD'));
    }

    /**
     * The UI to grab a reason for deleting a post.
     *
     * @return Tempcode The UI
     */
    public function delete_post() : object // Type
    {
        $post_id = get_param_integer('id');
        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $post_id]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];

        $reason = null;
        $may_delete = cns_may_delete_post_by($post_id, null, null, null, get_member(), $reason);
        if (!$may_delete) {
            if ($reason !== null) {
                warn_exit($reason);
            }
            access_denied('I_ERROR');
        }

        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('DELETE_POST'));

        if ((addon_installed('securitylogging')) && (has_privilege(get_member(), 'mass_delete_from_ip'))) {
            $title = get_screen_title('DELETE_POST');
            $post_rows = $GLOBALS['FORUM_DB']->query_select('f_posts', ['p_ip_address', 'p_time'], ['id' => $post_id]);
            if (!array_key_exists(0, $post_rows)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
            }
            $ip = $post_rows[0]['p_ip_address'];
            $time = $post_rows[0]['p_time'];
            $count = $GLOBALS['FORUM_DB']->query_value_if_there('SELECT COUNT(*) FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_posts WHERE p_time>' . strval($time - 60 * 60 * 24) . ' AND p_time<' . strval($time + 60 * 60 * 24) . ' AND ' . db_string_equal_to('p_ip_address', $ip));
            $_ip_url = build_url(['page' => 'admin_lookup', 'type' => 'results', 'param' => get_ip_address()], get_module_zone('admin_lookup'));
            $ip_url = $_ip_url->evaluate();
            $text = paragraph(do_lang_tempcode('DELETE_POSTS_DESCRIPTION', escape_html(integer_format($count, 0)), escape_html($ip), escape_html($ip_url)));
            $submit_name = do_lang_tempcode('DELETE_POST');
            $post_url = build_url(['page' => '_SELF', 'type' => '_delete_post', 'id' => $post_id], '_SELF', [], true);
            $fields = new Tempcode();
            $hidden = new Tempcode();
            $hidden->attach(build_keep_post_fields());
            $hidden->attach(build_keep_form_fields());
            $fields->attach(form_input_line(do_lang_tempcode('REASON'), '', 'reason', '', false));

            $fields->attach(form_input_tick(do_lang_tempcode('DELETE_POSTS_FROM_IP'), do_lang_tempcode('DELETE_POSTS_FROM_IP_DESCRIPTION'), 'post_all', false));

            if (addon_installed('points')) {
                require_lang('points');
                $fields->attach(form_input_tick(do_lang_tempcode('REVERSE_TRANSACTION'), do_lang_tempcode('REVERSE_TRANSACTION_DESCRIPTION', 'post'), 'reverse_point_transaction', false));
            }
            return do_template('FORM_SCREEN', [
                '_GUID' => 'c10e882fa621b5230f455b41f40514c0',
                'SKIP_WEBSTANDARDS' => true,
                'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
                'HIDDEN' => $hidden,
                'TITLE' => $title,
                'TEXT' => $text,
                'URL' => $post_url,
                'FIELDS' => $fields,
                'SUBMIT_ICON' => 'admin/delete3',
                'SUBMIT_NAME' => $submit_name,
            ]);
        }

        require_code('form_templates');

        if (addon_installed('points')) {
            require_lang('points');
            $reverse_point_transaction = form_input_tick(do_lang_tempcode('REVERSE_TRANSACTION'), do_lang_tempcode('REVERSE_TRANSACTION_DESCRIPTION', 'post'), 'reverse_point_transaction', false);
        } else {
            $reverse_point_transaction = new Tempcode();
        }
        return $this->relay_with_reason('DELETE_POST', [$reverse_point_transaction]);
    }

    /**
     * The actualiser for deleting a post.
     *
     * @return Tempcode The UI
     */
    public function _delete_post() : object // Type
    {
        $post_id = either_param_integer('id', null);
        if ($post_id === null) {
            $post_id = either_param_integer('post_id');
        }
        $reason = post_param_string('reason');
        $reverse_point_transaction = (post_param_integer('reverse_point_transaction', 0) == 1);

        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        require_code('cns_posts_action3');

        if ((has_privilege(get_member(), 'mass_delete_from_ip')) && (post_param_integer('post_all', 0) == 1)) {
            $post_rows = $GLOBALS['FORUM_DB']->query_select('f_posts', ['p_ip_address', 'p_time', 'p_topic_id'], ['id' => $post_id]);
            if (!array_key_exists(0, $post_rows)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
            }
            $ip = $post_rows[0]['p_ip_address'];
            $time = $post_rows[0]['p_time'];
            $topic_id = $post_rows[0]['p_topic_id'];
            $posts = $GLOBALS['FORUM_DB']->query('SELECT id,p_topic_id,p_title FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_posts WHERE p_time>' . strval($time - 60 * 60 * 24) . ' AND p_time<' . strval($time + 60 * 60 * 24) . ' AND ' . db_string_equal_to('p_ip_address', $ip));

            $post_id = post_param_integer('id', null);
            if ($post_id === null) {
                $post_id = get_param_integer('id');

                $post_url = build_url(['page' => '_SELF', 'type' => get_param_string('type')], '_SELF', [], true);
                $hidden = new Tempcode();
                $hidden->attach(form_input_hidden('id', strval($post_id)));
                $hidden->attach(form_input_hidden('reason', post_param_string('reason')));
                $hidden->attach(form_input_hidden('post_all', '1'));

                $stuff = new Tempcode();
                foreach ($posts as $post) {
                    if (!$stuff->is_empty()) {
                        $stuff->attach(do_lang_tempcode('LIST_SEP'));
                    }

                    $url = $GLOBALS['FORUM_DRIVER']->post_url($post['id'], '', true);

                    if ($post['p_title'] != '') {
                        $stuff->attach(hyperlink($url, $post['p_title'], true, true));
                    } else {
                        $stuff->attach(hyperlink($url, '#' . strval($post['id']), true, true));
                    }
                }

                return do_template('CONFIRM_SCREEN', [
                    '_GUID' => 'ec5fd36fd869e42c59a0e7e3efa8a123',
                    'TITLE' => get_screen_title('DELETE_POSTS'),
                    'TEXT' => do_lang_tempcode('CONFIRM_DELETE', $stuff),
                    'URL' => $post_url,
                    'HIDDEN' => $hidden,
                    'FIELDS' => '',
                    'PREVIEW' => '',
                ]);
            }

            foreach ($posts as $post) {
                require_code('fields');
                if (has_tied_catalogue('post')) {
                    delete_form_custom_fields('post', $post['id']);
                }

                cns_delete_posts_topic($post['p_topic_id'], [$post['id']], $reason, true, true, true, $reverse_point_transaction);
            }

            return $this->redirect_to('DELETE_POSTS_FROM_IP', $topic_id);
        }

        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $post_id]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['t_cache_first_title', 't_cache_first_post_id', 't_forum_id'], ['id' => $topic_id], '', 1);
        $current_title = $_topic_info[0]['t_cache_first_title'];
        $deleted_all = cns_delete_posts_topic($topic_id, [$post_id], $reason, true, true, true, $reverse_point_transaction);
        if ($_topic_info[0]['t_cache_first_post_id'] == $post_id) { // See if we need to copy title
            $_topic_info2 = $GLOBALS['FORUM_DB']->query_select('f_topics', ['t_cache_first_title', 't_cache_first_post_id'], ['id' => $topic_id], '', 1);
            if (array_key_exists(0, $_topic_info2)) {
                require_lang('cns');
                if ($_topic_info2[0]['t_cache_first_title'] == do_lang('NO_TOPIC_TITLE', strval($topic_id))) {
                    $GLOBALS['FORUM_DB']->query_update('f_posts', ['p_title' => $current_title], ['id' => $_topic_info2[0]['t_cache_first_post_id']], '', 1);
                }
            }
        }

        require_code('fields');
        if (has_tied_catalogue('post')) {
            delete_form_custom_fields('post', strval($post_id));
        }

        // Show it worked / Refresh
        $url = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if (($url != '') && ((strpos($url, 'topicview') === false) || ($_topic_info[0]['t_cache_first_post_id'] != $post_id))) {
            return redirect_screen(get_screen_title('DELETE_POST'), $url, do_lang_tempcode('SUCCESS'));
        }

        if ($deleted_all) {
            return $this->redirect_to_forum('DELETE_POST', $_topic_info[0]['t_forum_id']);
        }
        return $this->redirect_to('DELETE_POST', $topic_id);
    }

    /**
     * The actualiser to vote in a poll.
     *
     * @return Tempcode The UI
     */
    public function vote_poll() : object // Type
    {
        $topic_id = get_param_integer('id'); // Yes, that's right -- we need to find the pollID from this, and will redirect back to given topic
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $poll_id = $topic_info['t_poll_id'];

        if ($_SERVER['REQUEST_METHOD'] != 'POST') {
            warn_exit(do_lang_tempcode('IMPROPERLY_FILLED_IN'));
        }

        $votes = [];
        $vote = post_param_integer('vote', null);

        if ($vote !== null) {
            $votes[] = $vote;
        } else {
            foreach (array_keys($_POST) as $key) {
                if (substr($key, 0, 5) == 'vote_') {
                    $votes[] = intval(substr($key, 5));
                }
            }
        }

        require_code('cns_polls_action');
        require_code('cns_polls_action2');
        cns_vote_in_poll($poll_id, $votes, null, $_topic_info);

        return $this->redirect_to('VOTE_IN_POLL', $topic_id, do_lang_tempcode('THANKYOU_VOTING'));
    }

    /**
     * Get Tempcode for a topic poll adding/editing form.
     *
     * @param  ?AUTO_LINK $forum_id The ID of the forum to which the poll is being added (null: it is a private topic)
     * @param  boolean $new_poll Whether we are making a new poll opposed to editing a poll
     * @param  SHORT_TEXT $question The poll question
     * @param  array $answers A list of current answers for the poll
     * @param  BINARY $is_private Whether it is a private poll (blind poll, where the results aren't visible until made public)
     * @param  BINARY $is_open Whether the poll is open for voting
     * @param  BINARY $requires_reply Whether a reply to the poll topic is required before voting
     * @param  integer $minimum_selections The minimum number of selections for voters
     * @param  integer $maximum_selections The maximum number of selections for voters
     * @param  ?TIME $poll_closing_time The time this poll will close voting (null: the poll will not close automatically)
     * @param  BINARY $view_member_votes Whether others should be able to view individual members' votes in the results
     * @param  BINARY $vote_revocation Whether voting revocation should be allowed on this poll
     * @param  BINARY $guests_can_vote Whether guests can vote on the poll without logging in
     * @param  BINARY $point_weighting Whether votes will be weighed according to how many points voters have
     * @return Tempcode The Tempcode for the fields
     */
    public function get_poll_form_fields(?int $forum_id = null, bool $new_poll = true, string $question = '', array $answers = [], int $is_private = 0, int $is_open = 1, int $requires_reply = 0, int $minimum_selections = 1, int $maximum_selections = 1, ?int $poll_closing_time = null, int $view_member_votes = 0, int $vote_revocation = 1, int $guests_can_vote = 1, int $point_weighting = 0) : object
    {
        require_lang('cns_polls');
        require_code('cns_polls_action3');

        $fields = new Tempcode();
        $fields->attach(form_input_line(do_lang_tempcode('QUESTION'), do_lang_tempcode('DESCRIPTION_QUESTION'), 'question', $question, true));

        // Check for default poll options for this forum
        $_default_options = cns_get_default_poll_options($forum_id);

        // Convert mandatory keys to readonly (mandatory is more concise for users from XML, but readonly is more concise for the form input API)
        $default_options = [];
        foreach ($_default_options['options'] as $option) {
            $map = [
                'name' => $option['name'],
            ];
            if (array_key_exists('mandatory', $option)) {
                $map['readonly'] = true;
            }
            $default_options[] = $map;
        }
        $default_options_names = array_column($default_options, 'name');

        // Also add any $answers not already in the array, if we are editing a poll, so they appear when editing.
        foreach ($answers as $answer) {
            if (!in_array($answer, $default_options_names)) {
                $default_options[] = [
                    'name' => $answer,
                ];
            }
        }
        $fields->attach(form_input_line_multi(do_lang_tempcode('ANSWERS'), do_lang_tempcode('_DESCRIPTION_ANSWERS'), 'answer_', $default_options, 1, null, 'line', null, null, $_default_options['confined']));
        if ($_default_options['confined']) {
            $fields->attach(form_input_hidden('answers-confined', json_encode($default_options_names)));
        }

        if ($_default_options['minimumSelections'] !== null) {
            $fields->attach(form_input_integer(do_lang_tempcode('MINIMUM_SELECTIONS'), do_lang_tempcode('DESCRIPTION_MINIMUM_SELECTIONS'), 'minimum_selections', $_default_options['minimumSelections'], true, null, null, null, true));
        } else {
            $fields->attach(form_input_integer(do_lang_tempcode('MINIMUM_SELECTIONS'), do_lang_tempcode('DESCRIPTION_MINIMUM_SELECTIONS'), 'minimum_selections', $minimum_selections, true));
        }
        if ($_default_options['maximumSelections'] !== null) {
            $fields->attach(form_input_integer(do_lang_tempcode('MAXIMUM_SELECTIONS'), do_lang_tempcode('DESCRIPTION_MAXIMUM_SELECTIONS'), 'maximum_selections', $_default_options['maximumSelections'], true, null, null, null, true));
        } else {
            $fields->attach(form_input_integer(do_lang_tempcode('MAXIMUM_SELECTIONS'), do_lang_tempcode('DESCRIPTION_MAXIMUM_SELECTIONS'), 'maximum_selections', $maximum_selections, true));
        }

        // Lots of poll tick (check) options...

        $options = []; // [pretty name, name, ticked (checked), description, read only]

        // Maintain current value for is_open rather than forcing it from XML if we are editing a poll
        if ($new_poll && $_default_options['votingEnabled']) {
            $options[] = [do_lang_tempcode('POLL_IS_OPEN'), 'is_open', true, do_lang_tempcode('DESCRIPTION_POLL_IS_OPEN'), true];
        } else {
            $options[] = [do_lang_tempcode('POLL_IS_OPEN'), 'is_open', $is_open == 1, do_lang_tempcode('DESCRIPTION_POLL_IS_OPEN'), $_default_options['votingEnabled']];
        }

        if ($_default_options['guestsCanVote'] !== null) {
            $options[] = [do_lang_tempcode('GUESTS_CAN_VOTE'), 'guests_can_vote', $_default_options['guestsCanVote'], do_lang_tempcode('DESCRIPTION_GUESTS_CAN_VOTE'), true];
        } else {
            $options[] = [do_lang_tempcode('GUESTS_CAN_VOTE'), 'guests_can_vote', $guests_can_vote == 1, do_lang_tempcode('DESCRIPTION_GUESTS_CAN_VOTE'), false];
        }

        if ($_default_options['requiresReply'] !== null) {
            $options[] = [do_lang_tempcode('_POLL_REQUIRES_REPLY'), 'requires_reply', $_default_options['requiresReply'], do_lang_tempcode('DESCRIPTION_POLL_REQUIRES_REPLY'), true];
        } else {
            $options[] = [do_lang_tempcode('_POLL_REQUIRES_REPLY'), 'requires_reply', $requires_reply == 1, do_lang_tempcode('DESCRIPTION_POLL_REQUIRES_REPLY'), false];
        }

        if ($_default_options['voteRevocation'] !== null) {
            $options[] = [do_lang_tempcode('VOTE_REVOCATION'), 'vote_revocation', $_default_options['voteRevocation'], do_lang_tempcode('DESCRIPTION_VOTE_REVOCATION'), true];
        } else {
            $options[] = [do_lang_tempcode('VOTE_REVOCATION'), 'vote_revocation', $vote_revocation == 1, do_lang_tempcode('DESCRIPTION_VOTE_REVOCATION'), false];
        }

        // Maintain current value for is_private rather than forcing it from XML if we are editing a poll
        if ((has_privilege(get_member(), 'may_unblind_own_poll')) || (has_privilege(get_member(), 'edit_midrange_content', 'topics', ['forums', $forum_id])) || ($is_private == 0)) {
            if ($new_poll && $_default_options['resultsHidden']) {
                $options[] = [do_lang_tempcode('POLL_RESULTS_HIDDEN'), 'is_private', true, do_lang_tempcode('DESCRIPTION_POLL_RESULTS_HIDDEN'), true];
            } else {
                $options[] = [do_lang_tempcode('POLL_RESULTS_HIDDEN'), 'is_private', $is_private == 1, do_lang_tempcode('DESCRIPTION_POLL_RESULTS_HIDDEN'), false];
            }
        }

        if ($_default_options['viewMemberVotes'] !== null) {
            $options[] = [do_lang_tempcode('VIEW_MEMBER_VOTES'), 'view_member_votes', $_default_options['viewMemberVotes'], do_lang_tempcode('DESCRIPTION_VIEW_MEMBER_VOTES'), true];
        } else {
            $options[] = [do_lang_tempcode('VIEW_MEMBER_VOTES'), 'view_member_votes', $view_member_votes == 1, do_lang_tempcode('DESCRIPTION_VIEW_MEMBER_VOTES'), false];
        }

        // Show point weighting tick (check) if points addon is installed and point weighting is enabled site-wide
        if (addon_installed('points') && get_option('enable_poll_point_weighting') == '1') {
            if ($_default_options['pointWeighting'] !== null) {
                $options[] = [do_lang_tempcode('ENABLE_POLL_POINT_WEIGHTING'), 'point_weighting', $_default_options['pointWeighting'], do_lang_tempcode('DESCRIPTION_ENABLE_POLL_POINT_WEIGHTING'), true];
            } else {
                $options[] = [do_lang_tempcode('ENABLE_POLL_POINT_WEIGHTING'), 'point_weighting', $point_weighting == 1, do_lang_tempcode('DESCRIPTION_ENABLE_POLL_POINT_WEIGHTING'), false];
            }
        }

        $fields->attach(form_input_various_ticks($options, '', null, '', true));

        // ---

        // Voting Open Until option
        if ($_default_options['votingPeriodHours'] !== null) { // If XML restriction set
            $actual_poll_closing_time = time();
            $schedule = post_param_date('schedule');
            $topic_id = get_param_integer('id', null);

            // If we are editing a poll, keep the current poll closing time value
            if (!$new_poll) {
                $actual_poll_closing_time = $poll_closing_time;

            // If the XML votingPeriodHours is false, do not allow setting a closing time
            } elseif ($_default_options['votingPeriodHours'] === false) {
                $actual_poll_closing_time = null;

            // If a topic scheduled time was provided, add votingPeriodHours to that
            } elseif ($schedule !== null) {
                $actual_poll_closing_time = $schedule + intval(round(($_default_options['votingPeriodHours'] * 60 * 60)));

            // If a topic ID was provided, add votingPeriodHours to t_cache_first_time (in case we are editing a poll)
            } elseif ($topic_id !== null) {
                $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
                if (!array_key_exists(0, $_topic_info)) {
                    warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
                }
                $topic_info = $_topic_info[0];

                $actual_poll_closing_time = $topic_info['t_cache_first_time'] + intval(round(($_default_options['votingPeriodHours'] * 60 * 60)));

            // Otherwise, add votingPeriodHours to the current time
            } else {
                $actual_poll_closing_time += intval(round(($_default_options['votingPeriodHours'] * 60 * 60)));
            }
            $fields->attach(form_input_date(do_lang_tempcode('VOTING_OPEN_UNTIL'), do_lang_tempcode('DESCRIPTION_VOTING_OPEN_UNTIL'), 'closing_time', false, $actual_poll_closing_time === null, true, $actual_poll_closing_time, 10, null, null, true, null, true, null, true));
        } else {
            $fields->attach(form_input_date(do_lang_tempcode('VOTING_OPEN_UNTIL'), do_lang_tempcode('DESCRIPTION_VOTING_OPEN_UNTIL'), 'closing_time', false, $poll_closing_time === null, true, $poll_closing_time, 10, null, null, true, null, true, null));
        }

        return $fields;
    }

    /**
     * The UI to add a poll.
     *
     * @param  ?AUTO_LINK $topic_id The topic ID to add the poll to (null: we are adding a new topic at the same time, it's in the POST environment already and will be relayed to _add_poll)
     * @return Tempcode The UI
     */
    public function add_poll(?int $topic_id = null) : object // Type
    {
        require_javascript('cns_forum');

        if ($topic_id === null) {
            $topic_id = get_param_integer('id', null);
        }

        $forum_id = get_param_integer('forum_id', null);

        if ($topic_id !== null) {
            $topic_poll_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_poll_id', ['id' => $topic_id]);
            if ($topic_poll_id) {
                warn_exit(do_lang_tempcode('TOPIC_POLL_ALREADY_EXISTS'));
            }
        }

        $adding_new_topic = ($topic_id === null) && (get_param_integer('adding_new_topic', 0) == 1);

        $map = ['page' => '_SELF', 'type' => '_add_poll'];

        if ($adding_new_topic) {
            $this->_validate_request_for_potential_topic();
            $map['adding_new_topic'] = 1;
        } else {
            $map['id'] = $topic_id;
        }

        $post_url = build_url($map, '_SELF');

        $hidden = new Tempcode();
        $fields = new Tempcode();

        if ($adding_new_topic) {
            // Preserve POSTed topic data in the add poll form
            $hidden->attach(build_keep_post_fields(['csrf_token_preserve']));
        }

        url_default_parameters__enable();
        if ($topic_id === null && $forum_id === null) {
            $fields->attach($this->get_poll_form_fields(null, true));
        } else {
            if ($forum_id === null && $topic_id !== null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
            }
            $fields->attach($this->get_poll_form_fields($forum_id, true));
        }
        url_default_parameters__disable();

        // Find polls we can grab
        require_code('cns_forums');
        $or_list = get_forum_access_sql('t.t_forum_id');
        $polls = $GLOBALS['FORUM_DB']->query('SELECT p.*,t_cache_first_username FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_topics t LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_polls p ON p.id=t.t_poll_id WHERE (' . $or_list . ') AND p.id IS NOT NULL ORDER BY p.id DESC', 30);
        $js_function_calls = [];
        if (count($polls) !== 0) {
            $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '1fb2af282b014c3a6ae09d986e4f72eb', 'SECTION_HIDDEN' => true, 'TITLE' => do_lang_tempcode('ALT_COPY_EXISTING_POLL')]));

            $list = new Tempcode();
            $list->attach(form_input_list_entry('', true, ''));
            foreach ($polls as $poll) {
                $list->attach(form_input_list_entry(strval($poll['id']), false, do_lang_tempcode('POLL_IN_LIST', escape_html($poll['po_question']), escape_html($poll['t_cache_first_username']))));
            }
            $fields->attach(form_input_list(do_lang_tempcode('EXISTING'), do_lang_tempcode('COPY_EXISTING_POLL'), 'existing', $list, null, false, false));
        }

        require_javascript('cns_forum');
        $js_function_calls[] = 'moduleTopicsAddPoll';

        $title = get_screen_title('ADD_TOPIC_POLL');
        $submit_name = do_lang_tempcode('ADD');

        if (!$adding_new_topic) {
            $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
            if (!array_key_exists(0, $_topic_info)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
            }
            $topic_info = $_topic_info[0];
            $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('ADD_TOPIC_POLL'));
        }

        return do_template('FORM_SCREEN', [
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => '',
            'SUBMIT_ICON' => 'admin/add_to_category',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
            'JS_FUNCTION_CALLS' => $js_function_calls,
        ]);
    }

    /**
     * The actualiser to add a poll.
     *
     * @return Tempcode The UI
     */
    public function _add_poll() : object // Type
    {
        $topic_id = get_param_integer('id', null);

        if ($topic_id !== null) {
            $topic_poll_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_poll_id', ['id' => $topic_id]);
            if ($topic_poll_id) {
                warn_exit(do_lang_tempcode('TOPIC_POLL_ALREADY_EXISTS'));
            }
        }

        $adding_new_topic = ($topic_id === null) && (get_param_integer('adding_new_topic', 0) == 1);

        if ($adding_new_topic) {
            $info = $this->_add_reply_and_return_info();
            $topic_id = $info['topic_id'];
        }

        if (!cns_may_access_topic($topic_id)) {
            access_denied('I_ERROR');
        }

        require_code('cns_polls_action');

        $_existing = post_param_string('existing', '');
        if ($_existing != '') {
            $existing = intval($_existing);

            $_poll_row = $GLOBALS['FORUM_DB']->query_select('f_topics t LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_polls p ON t.t_poll_id=p.id', ['t_forum_id', 'p.*'], ['p.id' => $existing], '', 1);
            if (!array_key_exists(0, $_poll_row)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
            }
            $row = $_poll_row[0];

            $answer_rows = $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['pa_answer', 'pa_order'], ['pa_poll_id' => $existing], 'ORDER BY pa_order');
            $answers = [];
            foreach ($answer_rows as $trow) {
                $answers[] = $trow['pa_answer'];
            }

            cns_make_poll($topic_id, $row['po_question'], $row['po_is_private'], $row['po_is_open'], $row['po_minimum_selections'], $row['po_maximum_selections'], $row['po_requires_reply'], $answers, $row['po_view_member_votes'], $row['po_vote_revocation'], $row['po_guests_can_vote'], $row['po_point_weighting'], true, $row['po_closing_time']);

            return $this->redirect_to('ADD_TOPIC_POLL', $topic_id);
        }

        $question = post_param_string('question');
        $is_private = post_param_integer('is_private', 0);
        $is_open = post_param_integer('is_open', 0);
        $minimum_selections = post_param_integer('minimum_selections', 0);
        $maximum_selections = post_param_integer('maximum_selections', 0);
        $closing_time = post_param_date('closing_time');
        $requires_reply = post_param_integer('requires_reply', 0);
        $view_member_votes = post_param_integer('view_member_votes', 0);
        $vote_revocation = post_param_integer('vote_revocation', 0);
        $guests_can_vote = post_param_integer('guests_can_vote', 0);
        $point_weighting = post_param_integer('point_weighting', 0);

        $answers = [];
        foreach ($_POST as $key => $val) {
            if (!is_string($val)) {
                continue;
            }

            if (substr($key, 0, 7) == 'answer_') {
                if ($val != '') {
                    $answers[] = $val;
                }
            }
        }

        cns_make_poll($topic_id, $question, $is_private, $is_open, $minimum_selections, $maximum_selections, $requires_reply, $answers, $view_member_votes, $vote_revocation, $guests_can_vote, $point_weighting, true, $closing_time);

        return $this->redirect_to('ADD_TOPIC_POLL', $topic_id);
    }

    /**
     * The UI for displaying who voted on a poll.
     *
     * @return Tempcode Tempcode for the screen
     */
    public function view_poll_voters() : object // Type
    {
        require_code('cns_polls');
        require_code('templates_results_table');

        $poll_id = get_param_integer('id');
        $answer_id = get_param_integer('answer_id', null);

        $start = get_param_integer('start', 0);
        $order_by = get_param_string('sort', 'pv_date_time DESC', INPUT_FILTER_GET_COMPLEX); // SQL injection is covered in cns_poll_get_results
        $max = get_param_integer('max', 50);

        $test = explode(' ', $order_by, 2);
        if (count($test) == 1) {
            $test[1] = 'DESC';
        }
        list($sortable, $sort_order) = $test;

        $results = cns_poll_get_results($poll_id, false, [$start, $order_by, $max], $answer_id);
        $voting_power_enabled = (get_option('enable_poll_point_weighting') == '1') && ($results['point_weighting'] == 1);

        // Ensure members don't try to view voters without a forfeit or vote if vote revocation is off.
        //  This is actually a security feature, to prevent CSRF attacks to force a user to forfeit using URL injection.
        if ($results['vote_revocation'] != 1) {
            if (is_guest()) {
                $map = ['pv_poll_id' => $poll_id, 'pv_ip' => get_ip_address(), 'pv_revoked' => 0];
            } else {
                $map = ['pv_poll_id' => $poll_id, 'pv_member_id' => get_member(), 'pv_revoked' => 0];
            }
            $forfeited = $GLOBALS['FORUM_DB']->query_select_value('f_poll_votes', 'COUNT(*)', $map);
            if ($forfeited == 0) {
                warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
            }
        }

        if ($results['view_member_votes'] != 1 || $results['is_private'] == 1) {
            access_denied('I_ERROR');
        }

        $answers = $results['answers'];
        $votes = $results['votes'];

        $footer_row = null;

        $field_titles = [
            do_lang_tempcode('DATE_TIME'),
            do_lang_tempcode('MEMBER'),
        ];
        $footer_fields = ['', ''];
        $sortables = [
            'pv_date_time' => do_lang_tempcode('DATE_TIME'),
            'pv_member_id' => do_lang_tempcode('MEMBER')
        ];
        if ($voting_power_enabled) {
            $field_titles[] = protect_from_escaping(do_template('HELP_ICON_PHRASE', [
                'LABEL' => do_lang_tempcode('VOTING_POWER'),
                'TOOLTIP' => do_lang_tempcode('DESCRIPTION_VOTING_POWER'),
            ]));
            $sortables['pv_cache_voting_power'] = do_lang_tempcode('VOTING_POWER');
            $footer_fields[] = do_lang_tempcode('TOTAL_VOTING_POWER', escape_html(float_format($results['total_voting_power'], 2)));
        }
        if ($answer_id === null) {
            $field_titles[] = do_lang_tempcode('ANSWER');
            $footer_fields[] = '';
        }
        $header_row = results_header_row($field_titles, $sortables, 'sort', $order_by);
        if ($voting_power_enabled) {
            $footer_row = results_footer_row($footer_fields);
        }

        $_rows = new Tempcode();
        foreach ($votes as $vote) {
            $_row = [
                ($vote['pv_date_time'] > 0) ? get_timezoned_date_time($vote['pv_date_time']) : do_lang_tempcode('UNKNOWN'),
                results_table_member_cell($vote['pv_member_id']),
            ];
            if (get_option('enable_poll_point_weighting') == '1' && $results['point_weighting'] == 1) {
                $_row[] = do_template('CNS_TOPIC_POLL_VOTING_POWER', [
                    'GUID' => '690423ddee434df79de7bead4fb5e79e',
                    'EQUATION' => $vote['voting_equation'][0],
                    'EQUATION_WITH_NUMBERS' => $vote['voting_equation'][1],
                    'VOTING_POWER' => float_format($vote['voting_power'], 2),
                ]);
            }
            if ($answer_id === null) {
                $_cell = array_search($vote['pv_answer_id'], array_column($answers, 'id'));
                if ($_cell !== null) {
                    $_row[] = $answers[$_cell]['answer'];
                } else {
                    $_row[] = do_lang('UNKNOWN');
                }
                $_rows->attach(results_entry($_row, true));
            } elseif ($vote['pv_answer_id'] == $answer_id) {
                $_rows->attach(results_entry($_row, true));
            }
        }

        if ($results['max_vote_rows'] > $max) {
            require_code('templates_pagination');
            $pagination = pagination(do_lang_tempcode('POLL_VOTES'), $start, 'start', $max, 'max', $results['max_vote_rows'], true, 7);
        } else {
            $pagination = new Tempcode();
        }

        $title = new Tempcode();
        if ($answer_id !== null) {
            $title = get_screen_title('POLL_RESULTS_TABLE_OPTION', true, [$answers[0]['answer'], $results['question']]);
        } else {
            $title = get_screen_title('POLL_RESULTS_TABLE_ALL', true, [$results['question']]);
        }

        $table = results_table(do_lang_tempcode('POLL_VOTES'), $start, 'start', $max, 'max', $results['max_vote_rows'], $header_row, $_rows, $sortables, $sortable, $sort_order, 'sort', new Tempcode(), [], null, null, '866198fc95db4ad3abc322d9ad144875', false, null, false, false, $footer_row);

        $tpl = do_template('CNS_TOPIC_POLL_VOTERS_SCREEN', ['_GUID' => 'd75c813e372c3ca8d1204609e54c9d65', 'TABLE' => $table, 'TITLE' => $title, 'PAGINATION' => $pagination]);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    // ===============
    // POST MODERATION
    // ===============

    /**
     * The UI to edit a post.
     *
     * @return Tempcode The UI
     */
    public function edit_post() : object // Type
    {
        $post_id = get_param_integer('id');

        $post_details = $GLOBALS['FORUM_DB']->query_select('f_posts', ['*'], ['id' => $post_id], '', 1);
        if (!array_key_exists(0, $post_details)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }

        if (!has_privilege(get_member(), 'exceed_post_edit_time_limit')) {
            $post_time = $post_details[0]['p_time'];
            $time_left = ($post_time - time() + intval(get_option('edit_time_limit')) * 60);
            attach_message(do_lang_tempcode('TIME_LEFT_TO_EDIT_POST', escape_html(display_time_period($time_left))), 'notice');
        }

        $forum_id = $post_details[0]['p_cache_forum_id'];

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $post_details[0]['p_topic_id']], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];

        $reason = null;
        $may_edit = cns_may_edit_post_by($post_id, $post_details[0]['p_time'], $post_details[0]['p_poster'], $forum_id, get_member(), $topic_info['t_is_open'] == 0, $reason);
        if (!$may_edit) {
            if ($reason !== null) {
                warn_exit($reason);
            }
            access_denied('I_ERROR');
        }

        $this->handle_topic_breadcrumbs($forum_id, $post_details[0]['p_topic_id'], $topic_info['t_cache_first_title'], do_lang_tempcode('EDIT_POST'));

        if (($topic_info['t_cache_first_post_id'] == $post_id) && ((cns_may_moderate_forum($topic_info['t_forum_id'])) || ($topic_info['t_cache_first_member_id'] == get_member()))) {
            $edit_topic_url = build_url(['page' => '_SELF', 'type' => 'edit_topic', 'id' => $topic_info['id']], '_SELF');
            attach_message(do_lang_tempcode('EDITING_FIRST_TOPIC_POST', escape_html($edit_topic_url->evaluate())), 'inform');
        }

        $hidden_fields = new Tempcode();
        $intended_solely_for = $post_details[0]['p_intended_solely_for'];
        if ($intended_solely_for !== null) {
            $hidden_fields->attach(form_input_hidden('intended_solely_for', strval($intended_solely_for)));
        }
        $hidden_fields->attach(form_input_hidden('from_url', get_self_url(true)));
        $hidden_fields->attach(form_input_hidden('post_id', strval($post_id)));

        $map = ['page' => '_SELF', 'type' => '_edit_post'];
        $redirect = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($redirect != '') {
            $map['redirect'] = protect_url_parameter($redirect);
        }
        $test = get_param_string('kfs' . (($forum_id === null) ? '' : strval($forum_id)), null, INPUT_FILTER_GET_COMPLEX);
        if (($test !== null) && ($test !== '0')) {
            $map['kfs' . (($forum_id === null) ? '' : strval($forum_id))] = $test;
        }
        $test_threaded = get_param_integer('threaded', null);
        if ($test_threaded !== null) {
            $map['threaded'] = $test_threaded;
        }
        $post_url = build_url($map, '_SELF');

        $post = post_param_string('post', get_translated_text($post_details[0]['p_post'], $GLOBALS['FORUM_DB']));

        // Certain aspects relating to the posting system
        $specialisation = new Tempcode();
        if (((get_option('is_on_post_titles') == '1') || ($post_details[0]['p_title'] != '') || ($post_id == $topic_info['t_cache_first_post_id']))) {
            $specialisation->attach(form_input_line(do_lang_tempcode('TITLE'), '', 'title', post_param_string('title', $post_details[0]['p_title']), false, 1, 120));
        }
        $specialisation->attach(form_input_line(do_lang_tempcode('REASON'), '', 'reason', '', false, 2));
        if (cns_may_moderate_forum($forum_id, get_member())) {
            $moderation_options = [
                [do_lang_tempcode('EMPHASISED'), 'is_emphasised', $post_details[0]['p_is_emphasised'] == 1, do_lang_tempcode('DESCRIPTION_EMPHASISED')],
            ];
            if (addon_installed('unvalidated')) {
                if ($post_details[0]['p_validated'] == 0) {
                    $post_details[0]['p_validated'] = get_param_integer('validated', 0);
                    if (($post_details[0]['p_validated'] == 1) && (addon_installed('unvalidated'))) {
                        attach_message(do_lang_tempcode('WILL_BE_VALIDATED_WHEN_SAVING'));
                    }
                }
                $moderation_options[] = [
                    do_lang_tempcode('VALIDATED'),
                    'validated',
                    $post_details[0]['p_validated'] == 1,
                    do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'post'),
                ];
            }
        } else {
            $moderation_options = [];
            $hidden_fields->attach(form_input_hidden('validated', '1'));
        }

        $specialisation2 = new Tempcode();

        if (!empty($moderation_options)) {
            $specialisation2->attach(form_input_various_ticks($moderation_options, '', null, do_lang_tempcode('MODERATION_OPTIONS')));
        }

        require_code('fields');
        if (has_tied_catalogue('post')) {
            append_form_custom_fields('post', strval($post_id), $specialisation2, $hidden_fields);
        }

        require_code('content2');
        $specialisation2->attach(metadata_get_fields('post', strval($post_id)));

        $specialisation2->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => 'bdab02bfa4ea2f50feedf8a15762c5f1', 'TITLE' => do_lang_tempcode('ACTIONS')]));
        $options = [];
        if (get_option('is_on_post_map') == '1') {
            $hidden_fields->attach(form_input_hidden('mark_as_unread', '1'));
        } else {
            $options[] = [do_lang_tempcode('MARK_UNREAD'), 'mark_as_unread', false, do_lang_tempcode('DESCRIPTION_MARK_UNREAD')];
        }
        $options[] = [do_lang_tempcode('SHOW_AS_EDITED'), 'show_as_edited', ((time() - $post_details[0]['p_time']) > 60 * 3), do_lang_tempcode('DESCRIPTION_POST_SHOW_AS_EDITED')];
        $specialisation2->attach(form_input_various_ticks($options, ''));
        if (cns_may_delete_post_by($post_id, $post_details[0]['p_time'], $post_details[0]['p_poster'], $forum_id)) {
            $specialisation2->attach(form_input_tick(do_lang_tempcode('DELETE'), do_lang_tempcode('DESCRIPTION_DELETE'), 'delete', false));
        }

        // Awards?
        if (addon_installed('awards')) {
            require_code('awards');
            $specialisation2->attach(get_award_fields('post', strval($post_id)));
        }

        if (get_param_string('post', null) === null) {
            $parsed = get_translated_tempcode('f_posts', $post_details[0], 'p_post', $GLOBALS['FORUM_DB']);
        } else {
            $parsed = null;
        }
        $js_function_calls = $this->_post_javascript();
        $staff_help_url = get_tutorial_url('tut_moderation');
        $posting_form = get_posting_form(do_lang('SAVE'), 'admin/edit', $post, $post_url, $hidden_fields, $specialisation, null, '', $specialisation2, $parsed, $js_function_calls, null, true, true, true, true, false, '', null, $staff_help_url);

        list($warning_details, $ping_url) = handle_conflict_resolution();

        $title = get_screen_title('EDIT_POST');
        return do_template('POSTING_SCREEN', [
            '_GUID' => '347e469de58882bf77722bba6ed4aba4',
            'TITLE' => $title,
            'PING_URL' => $ping_url,
            'WARNING_DETAILS' => $warning_details,
            'POSTING_FORM' => $posting_form,
        ]);
    }

    /**
     * Get JavaScript to restrict post lengths.
     *
     * @return array The post JavaScript
     */
    public function _post_javascript() : array
    {
        $size = cns_get_member_best_group_property(get_member(), 'max_post_length_comcode');

        require_javascript('cns_forum');
        $js_function_calls = [];

        if (get_option('force_guest_names') == '1') {
            $js_function_calls[] = 'moduleTopicsPostJavascriptForceGuestNames';
        }

        $stub = either_param_string('stub', '');

        $js_function_calls[] = ['moduleTopicsPostJavascript', $size, $stub];

        return $js_function_calls;
    }

    /**
     * The actualiser to edit a post.
     *
     * @return Tempcode The UI
     */
    public function _edit_post() : object // Type
    {
        require_code('attachments2');

        if (post_param_integer('delete', 0) == 1) {
            return $this->_delete_post();
        }

        $post_id = post_param_integer('post_id');

        $post_details = $GLOBALS['FORUM_DB']->query_select('f_posts', ['*'], ['id' => $post_id], '', 1);
        if (!array_key_exists(0, $post_details)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
        }
        $forum_id = $post_details[0]['p_cache_forum_id'];

        $intended_solely_for = post_param_integer('intended_solely_for', null);
        $validated = post_param_integer('validated', 0);
        if (($forum_id !== null) && (!has_privilege(get_member(), 'bypass_validation_lowrange_content', 'topics', ['forums', $forum_id]))) {
            $validated = 0;
        }
        $old_validated = $post_details[0]['p_validated'];
        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        require_code('cns_posts_action3');

        require_code('content2');
        $metadata = actual_metadata_get_fields('post', strval($post_id));

        $poster_name_if_guest = null;
        if (isset($metadata['submitter'])) {
            if (($metadata['submitter'] != $post_details[0]['p_poster']) && ($post_details[0]['p_poster_name_if_guest'] == $GLOBALS['FORUM_DRIVER']->get_username($post_details[0]['p_poster'], true, USERNAME_DEFAULT_BLANK))) {
                $poster_name_if_guest = $GLOBALS['FORUM_DRIVER']->get_username($metadata['submitter'], true);
            }
        }

        $topic_id = cns_edit_post($post_id, $validated, post_param_string('title', ''), post_param_string('post'), post_param_integer('skip_sig', 0), post_param_integer('is_emphasised', 0), $intended_solely_for, (post_param_integer('show_as_edited', 0) == 1), (post_param_integer('mark_as_unread', 0) == 1), post_param_string('reason'), true, $metadata['edit_time'], $metadata['add_time'], $metadata['submitter'], true, true, $poster_name_if_guest);

        require_code('fields');
        if (has_tied_catalogue('post')) {
            save_form_custom_fields('post', strval($post_id));
        }

        if ($old_validated != $validated) {
            if ($validated == 1) {
                cns_validate_post($post_id);
            }
        }

        if (addon_installed('awards')) {
            require_code('awards');
            handle_award_setting('post', strval($post_id));
        }

        // Show it worked / Refresh
        $url = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($url != '') {
            return redirect_screen(get_screen_title('EDIT_POST'), $url, do_lang_tempcode('SUCCESS'));
        }

        return $this->redirect_to('EDIT_POST', $topic_id, null, $post_id);
    }

    /**
     * The actualiser to validate a post.
     *
     * @return Tempcode The UI
     */
    public function validate_post() : object // Type
    {
        $post_id = get_param_integer('id');

        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        require_code('cns_posts_action3');
        $topic_id = cns_validate_post($post_id);

        $redirect = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($redirect != '') {
            return redirect_screen(get_screen_title('VALIDATE_POST'), $redirect, do_lang_tempcode('SUCCESS'));
        }

        return $this->redirect_to('VALIDATE_POST', $topic_id);
    }

    // ================
    // TOPIC MODERATION
    // ================

    /**
     * Check there is at least some moderation access over the given topic.
     * This is here to prevent snooping into the details of things (the backend provides the true security).
     *
     * @param  AUTO_LINK $topic_id The topic ID
     */
    public function check_has_mod_access(int $topic_id)
    {
        if (!cns_may_access_topic($topic_id, get_member(), null, false)) {
            access_denied('I_ERROR');
        }
    }

    /**
     * The UI to edit a topic.
     *
     * @return Tempcode The UI
     */
    public function edit_topic() : object // Type
    {
        $topic_id = get_param_integer('id');

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $forum_id = $topic_info['t_forum_id'];
        $private_topic = ($forum_id === null);

        $validated = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_validated', ['id' => $topic_info['t_cache_first_post_id']]);
        if ($validated !== null) {
            if (($topic_info['t_validated'] == 1) && ($validated == 0)) {
                attach_message(do_lang_tempcode('FIRST_POST_IS_UNVALIDATED'), 'notice');
            }
        }

        $this->handle_topic_breadcrumbs($forum_id, $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('EDIT_TOPIC'));

        $this->check_has_mod_access($topic_id);

        $post_url = build_url(['page' => '_SELF', 'type' => '_edit_topic', 'id' => $topic_id], '_SELF');

        // Certain aspects relating to the posting system
        $fields = new Tempcode();
        $fields->attach(form_input_line(do_lang_tempcode('TITLE'), '', 'title', $topic_info['t_cache_first_title'], false));
        if ((get_option('is_on_topic_descriptions') == '1') && (!$GLOBALS['FORUM_DRIVER']->topic_is_threaded($topic_id))) {
            $fields->attach(form_input_line(do_lang_tempcode('DESCRIPTION'), '', 'description', $topic_info['t_description'], false));
        }
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'reason', '', false));
        if (get_option('is_on_topic_emoticons') == '1') {
            $fields->attach($this->choose_topic_emoticon($topic_info['t_emoticon']));
        }
        $options = [];
        $hidden_fields = new Tempcode();
        if (cns_may_moderate_forum($forum_id, get_member())) {
            $moderation_options = [
                [do_lang_tempcode('OPEN'), 'open', $topic_info['t_is_open'] == 1, do_lang_tempcode('DESCRIPTION_OPEN')],
                [do_lang_tempcode('PINNED'), 'pinned', $topic_info['t_pinned'] == 1, do_lang_tempcode('DESCRIPTION_PINNED')],
            ];
            if (addon_installed('unvalidated')) {
                if ($topic_info['t_validated'] == 0) {
                    $topic_info['t_validated'] = get_param_integer('validated', 0);
                    if (($topic_info['t_validated'] == 1) && (addon_installed('unvalidated'))) {
                        attach_message(do_lang_tempcode('WILL_BE_VALIDATED_WHEN_SAVING'));
                    }
                }
                $moderation_options[] = [
                    do_lang_tempcode('VALIDATED'),
                    'validated',
                    $topic_info['t_validated'] == 1,
                    do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'topic'),
                ];
            }
            if (!$private_topic) {
                $options[] = [do_lang_tempcode('CASCADING'), 'cascading', $topic_info['t_cascading'] == 1, do_lang_tempcode('DESCRIPTION_CASCADING')];
            }
        } else {
            $moderation_options = [];
            $hidden_fields->attach(form_input_hidden('validated', '1'));
        }
        $fields->attach(form_input_various_ticks($options, ''));
        if (!empty($moderation_options)) {
            $fields->attach(form_input_various_ticks($moderation_options, '', null, do_lang_tempcode('MODERATION_OPTIONS')));
        }

        require_code('fields');
        if (has_tied_catalogue('topic')) {
            append_form_custom_fields('topic', strval($topic_id), $fields, $hidden_fields);
        }

        // Awards?
        if (addon_installed('awards')) {
            require_code('awards');
            $fields->attach(get_award_fields('topic', strval($topic_id)));
        }

        require_code('content2');
        $fields->attach(metadata_get_fields('topic', strval($topic_id), false, ['submitter', 'add_time', 'edit_time']));

        $title = get_screen_title('EDIT_TOPIC');
        $submit_name = do_lang_tempcode('SAVE');
        return do_template('FORM_SCREEN', [
            '_GUID' => '071b6747a1df1cf8e72f8f542422aa5b',
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'HIDDEN' => $hidden_fields,
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => do_lang_tempcode('EDITING_TOPIC_NOT_POST'),
            'SUBMIT_ICON' => 'admin/edit_this',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to edit a topic.
     *
     * @return Tempcode The UI
     */
    public function _edit_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        $cascading = post_param_integer('cascading', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $pinned = post_param_integer('pinned', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $open = post_param_integer('open', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $validated = post_param_integer('validated', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $title = post_param_string('title');

        require_code('cns_topics_action');
        require_code('cns_topics_action2');

        require_code('content2');
        $metadata = actual_metadata_get_fields('topic', strval($topic_id), ['submitter', 'add_time', 'edit_time']);

        cns_edit_topic($topic_id, post_param_string('description', STRING_MAGIC_NULL), post_param_string('emoticon', STRING_MAGIC_NULL), $validated, $open, $pinned, $cascading, post_param_string('reason', STRING_MAGIC_NULL), $title, null, true, $metadata['views']);

        require_code('fields');
        if (has_tied_catalogue('topic')) {
            save_form_custom_fields('topic', strval($topic_id));
        }

        if (addon_installed('awards')) {
            require_code('awards');
            handle_award_setting('topic', strval($topic_id));
        }

        return $this->redirect_to('EDIT_TOPIC', $topic_id);
    }

    /**
     * The UI to delete a topic.
     *
     * @return Tempcode The UI
     */
    public function delete_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        $post_url = build_url(['page' => '_SELF', 'type' => '_delete_topic', 'id' => $topic_id], '_SELF');

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('DELETE_TOPIC'));

        $this->check_has_mod_access($topic_id);

        // Certain aspects relating to the posting system
        $fields = new Tempcode();
        $hidden = new Tempcode();
        $hidden->attach(build_keep_post_fields());
        $hidden->attach(build_keep_form_fields());

        $set_name = 'destination';
        $required = false;
        $set_title = do_lang_tempcode('DESTINATION_TOPIC');
        $field_set = alternate_fields_set__start($set_name);

        $field_set->attach(form_input_tree_list(do_lang_tempcode('CHOOSE'), '', 'select_topic_id', null, 'choose_topic', [], false));

        $field_set->attach(form_input_integer(do_lang_tempcode('DESTINATION_TOPIC_ID'), '', 'manual_topic_id', null, false));

        $fields->attach(alternate_fields_set__end($set_name, $set_title, do_lang_tempcode('DESCRIPTION_DESTINATION_TOPIC'), $field_set, $required));

        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'reason', '', false));

        if (addon_installed('points')) {
            require_lang('points');
            $fields->attach(form_input_tick(do_lang_tempcode('REVERSE_TRANSACTION'), do_lang_tempcode('REVERSE_TRANSACTION_DESCRIPTION_CATEGORY', 'post', 'topic'), 'reverse_point_transaction', false));
        }

        $topic_title = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $topic_id]);
        $title = get_screen_title('_DELETE_TOPIC', true, [escape_html($topic_title)]);
        $submit_name = do_lang_tempcode('DELETE');
        $text = paragraph(do_lang_tempcode('DELETE_TOPIC_TEXT'));

        require_javascript('cns_forum');

        return do_template('FORM_SCREEN', [
            '_GUID' => '00b84f337de3683bfcdb60ea3086afa0',
            'SKIP_WEBSTANDARDS' => true,
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'admin/delete3',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
            'JS_FUNCTION_CALLS' => ['topicDeleteScreen'],
        ]);
    }

    /**
     * The actualiser to delete a topic.
     *
     * @return Tempcode The UI
     */
    public function _delete_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        $post_target_topic_id = post_param_integer('select_topic_id', null);
        if ($post_target_topic_id === null) {
            $post_target_topic_id = post_param_integer('manual_topic_id', null);
        }
        $reverse_point_transaction = (post_param_integer('reverse_point_transaction', 0) == 1);

        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        $forum_id = cns_delete_topic($topic_id, post_param_string('reason'), $post_target_topic_id, true, $reverse_point_transaction);

        require_code('fields');
        if (has_tied_catalogue('topic')) {
            delete_form_custom_fields('topic', strval($topic_id));
        }

        return $this->redirect_to_forum('DELETE_TOPIC', $forum_id);
    }

    /**
     * The UI to invite a member to a PT.
     *
     * @return Tempcode The UI
     */
    public function invite_member() : object
    {
        $topic_id = get_param_integer('id');

        $fields = new Tempcode();
        $fields->attach(form_input_username(do_lang_tempcode('USERNAME'), do_lang_tempcode('MEMBER_TO_INVITE'), 'username', '', false));

        $title = get_screen_title('INVITE_MEMBER_TO_PT');

        $submit_name = do_lang_tempcode('INVITE_MEMBER_TO_PT');

        $text = paragraph(do_lang_tempcode('INVITE_MEMBER_TO_PT_TEXT'));

        $post_url = build_url(['page' => '_SELF', 'type' => '_invite_member', 'topic_id' => $topic_id], '_SELF');

        return do_template('FORM_SCREEN', [
            '_GUID' => '9f28869bd74262ae20ba79ace14b87ca',
            'SKIP_WEBSTANDARDS' => true,
            'STAFF_HELP_URL' => get_tutorial_url('tut_correspondence'),
            'HIDDEN' => '',
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to invite a member to a PT.
     *
     * @return Tempcode The UI
     */
    public function _invite_member() : object
    {
        $username = post_param_string('username', false, INPUT_FILTER_POST_IDENTIFIER);
        $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($username);
        if (($member_id === null) || (is_guest($member_id))) {
            warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($username)), false, false, 404);
        }
        $topic_id = get_param_integer('topic_id');

        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        require_code('notifications');
        enable_notifications('cns_topic', strval($topic_id), $member_id);
        cns_invite_to_pt($member_id, $topic_id);

        return $this->redirect_to('EDIT_TOPIC', $topic_id);
    }

    /**
     * The UI to edit a poll.
     *
     * @return Tempcode The UI
     */
    public function edit_poll() : object // Type
    {
        $topic_id = get_param_integer('id');
        $poll_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_poll_id', ['id' => $topic_id]);
        if ($poll_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }

        $this->check_has_mod_access($topic_id);

        $post_url = build_url(['page' => '_SELF', 'type' => '_edit_poll', 'id' => $poll_id], '_SELF');

        $_poll_info = $GLOBALS['FORUM_DB']->query_select('f_polls', ['*'], ['id' => $poll_id], '', 1);
        if (!array_key_exists(0, $_poll_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $poll_info = $_poll_info[0];

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('EDIT_TOPIC_POLL'));

        $answers = collapse_1d_complexity('pa_answer', $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['pa_answer'], ['pa_poll_id' => $poll_id]));
        $question = $poll_info['po_question'];
        $is_private = $poll_info['po_is_private'];
        $is_open = $poll_info['po_is_open'];
        $requires_reply = $poll_info['po_requires_reply'];
        $minimum_selections = $poll_info['po_minimum_selections'];
        $maximum_selections = $poll_info['po_maximum_selections'];
        $poll_closing_time = $poll_info['po_closing_time'];
        $view_member_votes = $poll_info['po_view_member_votes'];
        $vote_revocation = $poll_info['po_vote_revocation'];
        $guests_can_vote = $poll_info['po_guests_can_vote'];
        $point_weighting = $poll_info['po_point_weighting'];
        $fields = $this->get_poll_form_fields($topic_info['t_forum_id'], false, $question, $answers, $is_private, $is_open, $requires_reply, $minimum_selections, $maximum_selections, $poll_closing_time, $view_member_votes, $vote_revocation, $guests_can_vote, $point_weighting);

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['TITLE' => do_lang_tempcode('ACTIONS')]));
        $fields->attach(form_input_tick(do_lang_tempcode('ERASE_VOTES'), do_lang_tempcode('DESCRIPTION_ERASE_VOTES'), 'erase_votes', false));
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'reason', '', false));

        $title = get_screen_title('EDIT_TOPIC_POLL');
        $submit_name = do_lang_tempcode('SAVE');

        list($warning_details, $ping_url) = handle_conflict_resolution();

        return do_template('FORM_SCREEN', [
            '_GUID' => '992a1bfd025e3fabea9d13307cfd2a91',
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'PREVIEW' => true,
            'PING_URL' => $ping_url,
            'WARNING_DETAILS' => $warning_details,
            'HIDDEN' => '',
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => '',
            'SUBMIT_ICON' => 'admin/edit_this',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to edit a poll.
     *
     * @return Tempcode The UI
     */
    public function _edit_poll() : object // Type
    {
        $poll_id = get_param_integer('id');
        $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['t_poll_id' => $poll_id]);
        if ($topic_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }

        $question = post_param_string('question', STRING_MAGIC_NULL);
        $is_private = post_param_integer('is_private', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $is_open = post_param_integer('is_open', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $minimum_selections = post_param_integer('minimum_selections', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $maximum_selections = post_param_integer('maximum_selections', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $closing_time = post_param_date('closing_time');
        $reason = post_param_string('reason', STRING_MAGIC_NULL);
        $requires_reply = post_param_integer('requires_reply', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $view_member_votes = post_param_integer('view_member_votes', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $vote_revocation = post_param_integer('vote_revocation', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $guests_can_vote = post_param_integer('guests_can_vote', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $erase_votes = post_param_integer('erase_votes', fractional_edit() ? INTEGER_MAGIC_NULL : 0);
        $point_weighting = post_param_integer('point_weighting', fractional_edit() ? INTEGER_MAGIC_NULL : 0);

        if (fractional_edit()) {
            $answers = collapse_1d_complexity('pa_answer', $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['pa_answer'], ['pa_poll_id' => $poll_id]));
            foreach ($answers as $i => $answer) {
                $answers[$i] = post_param_string('answer_' . strval($i), $answer);
            }
        } else {
            $answers = [];
            foreach ($_POST as $key => $val) {
                if (!is_string($val)) {
                    continue;
                }

                if (substr($key, 0, 7) == 'answer_') {
                    if ($val != '') {
                        $answers[] = $val;
                    }
                }
            }
        }

        require_code('cns_polls_action');
        require_code('cns_polls_action2');
        cns_edit_poll($poll_id, $question, $is_private, $is_open, $minimum_selections, $maximum_selections, $requires_reply, $answers, $view_member_votes, $vote_revocation, $guests_can_vote, $point_weighting, $reason, $closing_time, $erase_votes == 1);
        return $this->redirect_to('EDIT_TOPIC_POLL', $topic_id);
    }

    /**
     * The UI to grab a reason for deleting a poll.
     *
     * @return Tempcode The UI
     */
    public function delete_poll() : object // Type
    {
        require_code('cns_polls_action2');
        require_code('cns_polls_action3');

        $topic_id = get_param_integer('id');
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];

        $default_poll_options = [];
        $default_poll_options = cns_get_default_poll_options($topic_info['t_forum_id']);
        if ($default_poll_options['requireTopicPoll']) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }

        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('DELETE_TOPIC_POLL'));

        return $this->relay_with_reason('DELETE_TOPIC_POLL');
    }

    /**
     * The actualiser to delete a poll.
     *
     * @return Tempcode The UI
     */
    public function _delete_poll() : object // Type
    {
        $topic_id = get_param_integer('id');
        $poll_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_poll_id', ['id' => $topic_id]);
        if ($poll_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }

        require_code('cns_polls_action');
        require_code('cns_polls_action2');

        cns_delete_poll($poll_id, post_param_string('reason'));
        return $this->redirect_to('DELETE_TOPIC_POLL', $topic_id);
    }

    /**
     * The UI to move a topic.
     *
     * @return Tempcode The UI
     */
    public function move_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['t_forum_id', 't_cache_first_title'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $forum_id = $topic_info['t_forum_id'];

        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('MOVE_TOPIC'));

        $this->check_has_mod_access($topic_id);

        $post_url = build_url(['page' => '_SELF', 'type' => '_move_topic', 'id' => $topic_id], '_SELF');

        require_code('cns_forums2');

        // Certain aspects relating to the posting system
        $fields = new Tempcode();
        $fields->attach(form_input_line(do_lang_tempcode('TITLE'), '', 'title', $topic_info['t_cache_first_title'], false));
        $fields->attach(form_input_tree_list(do_lang_tempcode('DESTINATION_FORUM'), do_lang_tempcode('DESCRIPTION_DESTINATION_FORUM'), 'to', null, 'choose_forum', [], true, strval($forum_id)));
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'description', '', false));

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '20a9918ec1abc48c55dd7ba9ce5545a8', 'TITLE' => do_lang_tempcode('ACTIONS')]));
        $fields->attach(form_input_tick(do_lang_tempcode('REDIRECT_TO_TOPIC'), do_lang_tempcode('DESCRIPTION_REDIRECT_TO_TOPIC'), 'redir_topic', false));

        $topic_title = $topic_info['t_cache_first_title'];
        $title = get_screen_title('_MOVE_TOPIC', true, [escape_html($topic_title)]);
        $submit_name = do_lang_tempcode('MOVE_TOPIC');

        return do_template('FORM_SCREEN', [
            '_GUID' => '313fd175ccd376caa32794fedad21ac6',
            'SKIP_WEBSTANDARDS' => true,
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'HIDDEN' => '',
            'TITLE' => $title,
            'FIELDS' => $fields,
            'TEXT' => '',
            'SUBMIT_ICON' => 'admin/move',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to move a topic.
     *
     * @return Tempcode The UI
     */
    public function _move_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        $to = post_param_integer('to');
        $from = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $topic_id]);
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_move_topics($from, $to, [$topic_id]);
        cns_edit_topic($topic_id, null, null, null, null, null, null, '', post_param_string('title'));
        return (post_param_integer('redir_topic', 0) == 0) ? $this->redirect_to_forum('MOVE_TOPIC', $from) : $this->redirect_to('MOVE_TOPIC', $topic_id);
    }

    /**
     * The actualiser to pin a topic.
     *
     * @return Tempcode The UI
     */
    public function pin_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_edit_topic($topic_id, null, null, null, null, 1, null, '');
        return $this->redirect_to('PIN_TOPIC', $topic_id);
    }

    /**
     * The actualiser to unpin a topic.
     *
     * @return Tempcode The UI
     */
    public function unpin_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_edit_topic($topic_id, null, null, null, null, 0, null, '');
        return $this->redirect_to('UNPIN_TOPIC', $topic_id);
    }

    /**
     * The actualiser to cascade a topic.
     *
     * @return Tempcode The UI
     */
    public function cascade_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_edit_topic($topic_id, null, null, null, null, null, 1, '');
        return $this->redirect_to('CASCADE_TOPIC', $topic_id);
    }

    /**
     * The actualiser to uncascade a topic.
     *
     * @return Tempcode The UI
     */
    public function uncascade_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_edit_topic($topic_id, null, null, null, null, null, 0, '');
        return $this->redirect_to('UNCASCADE_TOPIC', $topic_id);
    }

    /**
     * The actualiser to open a topic.
     *
     * @return Tempcode The UI
     */
    public function open_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_edit_topic($topic_id, null, null, null, 1, null, null, '');
        return $this->redirect_to('OPEN_TOPIC', $topic_id);
    }

    /**
     * The actualiser to close a topic.
     *
     * @return Tempcode The UI
     */
    public function close_topic() : object // Type
    {
        $topic_id = get_param_integer('id');
        require_code('cns_topics_action');
        require_code('cns_topics_action2');
        cns_edit_topic($topic_id, null, null, null, 0, null, null, '');
        return $this->redirect_to('CLOSE_TOPIC', $topic_id);
    }

    /**
     * The UI to run a multi-moderation.
     *
     * @return Tempcode The UI
     */
    public function multimod() : object // Type
    {
        require_lang('cns_multi_moderations');

        $mm_id = intval(substr(get_param_string('type', 'browse'), 3));
        $topic_id = get_param_integer('id');

        $this->check_has_mod_access($topic_id);

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];
        $topic_title = $topic_info['t_cache_first_title'];
        $this->handle_topic_breadcrumbs($topic_info['t_forum_id'], $topic_id, $topic_info['t_cache_first_title'], do_lang_tempcode('_PERFORM_MULTI_MODERATION', escape_html($topic_title)));

        $title = get_screen_title('_PERFORM_MULTI_MODERATION', true, [escape_html($topic_title)]);
        $mm = $GLOBALS['FORUM_DB']->query_select('f_multi_moderations', ['*'], ['id' => $mm_id], '', 1);
        if (!array_key_exists(0, $mm)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'multi_moderation'));
        }
        $_mm = $mm[0];
        $post_text = $_mm['mm_post_text'];
        $submit_name = do_lang_tempcode('PERFORM_MULTI_MODERATION');
        $post_url = build_url(['page' => '_SELF', 'type' => '_multimod', 'id' => $topic_id, 'mm_id' => $mm_id], '_SELF', [], true);
        $fields = new Tempcode();
        $hidden = new Tempcode();
        $hidden->attach(build_keep_post_fields());
        $hidden->attach(build_keep_form_fields());
        $fields->attach(form_input_text(do_lang_tempcode('MM_POST_TEXT'), do_lang_tempcode('DESCRIPTION_MM_POST_TEXT'), 'post_text', $post_text, false));
        $options = [];
        if (addon_installed('cns_signatures')) {
            if (get_option('enable_skip_sig') == '1') {
                $options[] = [do_lang_tempcode('SKIP_SIGNATURE'), 'skip_sig', false, do_lang_tempcode('DESCRIPTION_SKIP_SIGNATURE')];
            }
        }
        if (get_option('enable_post_emphasis') == '1') {
            $options[] = [do_lang_tempcode('EMPHASISED'), 'is_emphasised', true, do_lang_tempcode('DESCRIPTION_EMPHASISED')];
        }
        $fields->attach(form_input_various_ticks($options, ''));
        $fields->attach(form_input_line(do_lang_tempcode('REASON'), do_lang_tempcode('OPTIONAL_REASON'), 'reason', '', false));

        $mm_title = get_translated_text($_mm['mm_name'], $GLOBALS['FORUM_DB']);
        $action_list = new Tempcode();
        if ($_mm['mm_open_state'] == 1) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_OPEN'));
        }
        if ($_mm['mm_open_state'] == 0) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_CLOSE'));
        }
        if ($_mm['mm_pin_state'] == 1) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_PIN'));
        }
        if ($_mm['mm_pin_state'] == 0) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_UNPIN'));
        }
        if ($_mm['mm_title_suffix'] != '') {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_TITLE_SUFFIX', escape_html($_mm['mm_title_suffix'])));
        }
        if ($_mm['mm_move_to'] !== null) {
            $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_MOVE', span(breadcrumb_segments_to_tempcode(cns_forum_breadcrumbs($_mm['mm_move_to'])), '', 'breadcrumbs')));
        }
        $action_list->attach(do_lang_tempcode('MULTI_MODERATION_WILL_POST'));
        $text = do_lang_tempcode('MULTI_MODERATION_WILL', make_string_tempcode($mm_title), $action_list);

        return do_template('FORM_SCREEN', [
            '_GUID' => '2eef0c445d207bb10ff3fd28ea32ef8c',
            'STAFF_HELP_URL' => get_tutorial_url('tut_moderation'),
            'PREVIEW' => true,
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'TEXT' => $text,
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'menu/adminzone/structure/forum/multi_moderations',
            'SUBMIT_NAME' => $submit_name,
            'SUPPORT_AUTOSAVE' => true,
            'CANCEL_URL' => build_url(['page' => 'topicview', 'type' => 'browse', 'id' => $topic_id, 'clear_autosave' => 1], '_SELF'),
        ]);
    }

    /**
     * The actualiser to run a Multi Moderation.
     *
     * @return Tempcode The UI
     */
    public function _multimod() : object // Type
    {
        require_lang('cns_multi_moderations');

        $topic_id = get_param_integer('id');
        $mm_id = get_param_integer('mm_id');
        require_code('cns_moderation_action');
        require_code('cns_moderation_action2');
        cns_perform_multi_moderation($mm_id, $topic_id, post_param_string('reason'), post_param_string('post_text'), post_param_integer('is_emphasised', 0), post_param_integer('skip_sig', 0));

        return $this->redirect_to('PERFORM_MULTI_MODERATION', $topic_id);
    }

    /**
     * A redirect for viewing post history: made like this so the history button can fit into the same URL architecture as the other post buttons.
     *
     * @return Tempcode The UI
     */
    public function topic_history() : object // Type
    {
        $title = get_screen_title('actionlog:REVISIONS');

        // We should be somewhere else entirely - it's just our moderator action list took us here
        $url = build_url(['page' => 'admin_revisions', 'type' => 'browse', 'resource_types' => 'topic,post', 'category_id' => get_param_integer('id')], get_module_zone('admin_revisions'));
        return redirect_screen($title, $url);
    }

    /**
     * The actualiser to mark a forum as read.
     *
     * @return Tempcode The UI
     */
    public function mark_read() : object // Type
    {
        $_forum_id = get_param_string('id');
        if ($_forum_id == '') {
            $forum_id = null;
        } else {
            $forum_id = intval($_forum_id);
        }

        require_code('cns_forums_action2');
        cns_ping_forum_read_all($forum_id);

        if ($forum_id != db_get_first_id()) {
            // Take user to parent forum
            $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'f_parent_forum', ['id' => $forum_id]);
        }

        return $this->redirect_to_forum('MARK_READ', $forum_id);
    }

    /**
     * The UI to make a normal topic a Private Topic.
     *
     * @return Tempcode The UI
     */
    public function make_private() : object
    {
        $topic_id = get_param_integer('id');

        $this->check_has_mod_access($topic_id);

        $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $_topic_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }
        $topic_info = $_topic_info[0];

        $a = $topic_info['t_cache_first_username'];
        $b = $GLOBALS['FORUM_DRIVER']->get_username(get_member());

        $title = get_screen_title('MAKE_PERSONAL');
        $text = do_lang_tempcode('MAKE_PERSONAL_DESCRIPTION');
        $submit_name = do_lang_tempcode('MAKE_PERSONAL');
        $post_url = build_url(['page' => '_SELF', 'type' => '_make_private'], '_SELF');
        $fields = new Tempcode();
        $hidden = form_input_hidden('id', strval($topic_id));
        $fields->attach(form_input_username(do_lang_tempcode('FROM'), '', 'a', $a, true));
        $fields->attach(form_input_username(do_lang_tempcode('TO'), '', 'b', $b, true));

        return do_template('FORM_SCREEN', [
            '_GUID' => '9416df197ee157510e9d6be7458d510f',
            'STAFF_HELP_URL' => get_tutorial_url('tut_correspondence'),
            'HIDDEN' => $hidden,
            'TITLE' => $title,
            'TEXT' => $text,
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
        ]);
    }

    /**
     * The actualiser to make a normal topic a Private Topic.
     *
     * @return Tempcode The UI
     */
    public function _make_private() : object
    {
        $topic_id = post_param_integer('id');
        $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $topic_id]);
        if ($forum_id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
        }

        if (!cns_may_moderate_forum($forum_id, get_member())) {
            access_denied('I_ERROR');
        }

        $_a = post_param_string('a');
        $_b = post_param_string('b');
        $a = $GLOBALS['FORUM_DRIVER']->get_member_from_username($_a);
        if (($a === null) || (is_guest($a))) {
            warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($_a)), false, false, 404);
        }
        $b = $GLOBALS['FORUM_DRIVER']->get_member_from_username($_b);
        if (($b === null) || (is_guest($b))) {
            warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($_b)), false, false, 404);
        }

        $GLOBALS['FORUM_DB']->query_update('f_topics', ['t_pt_from' => $a, 't_pt_to' => $b, 't_forum_id' => null], ['id' => $topic_id], '', 1);

        require_code('notifications');
        enable_notifications('cns_topic', strval($topic_id), $a); // from
        enable_notifications('cns_topic', strval($topic_id), $b); // to

        // Update forum cache view
        require_code('cns_posts_action2');
        cns_force_update_forum_caching($forum_id, -1);

        return $this->redirect_to('MAKE_PERSONAL', $topic_id);
    }

    /**
     * Redirect to a screen suitable for celebrating a members birthday (existing topic, if possible).
     *
     * @return Tempcode The UI
     */
    public function birthday() : object
    {
        $id = get_param_string('id');
        $topic_id = $GLOBALS['FORUM_DB']->query_value_if_there('SELECT id FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_topics WHERE t_cache_first_time>' . strval(time() - 60 * 60 * 24 * 3) . ' AND ' . db_string_equal_to('t_cache_first_title', do_lang('HAPPY_BIRTHDAY_PERSON', $id)));
        if ($topic_id !== null) {
            $title = get_screen_title('VIEW_TOPIC');
            $url = $GLOBALS['FORUM_DRIVER']->topic_url($topic_id, '', true);
            return redirect_screen($title, $url, do_lang_tempcode('REDIRECTING_TO_BIRTHDAY_TOPIC'));
        }
        $_POST['title'] = do_lang('HAPPY_BIRTHDAY_PERSON', $id);
        $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'id', ['f_name' => get_option('main_forum_name')]);
        if ($forum_id === null) {
            $forum_id = db_get_first_id();
        }
        $_GET['id'] = strval($forum_id);
        return $this->new_topic(false, null, 'cns_emoticons/birthday');
    }
}
