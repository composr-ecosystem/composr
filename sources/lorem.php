<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_themeing
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__lorem()
{
    global $LOREM_RANDOM_VAR, $LOREM_AVOID_GLOBALISE;
    $LOREM_RANDOM_VAR = 0;
    $LOREM_AVOID_GLOBALISE = false;

    global $KNOWN_TEMPLATE_PARAMETERS;
    $KNOWN_TEMPLATE_PARAMETERS = [];
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function lorem_word() : string
{
    return 'Lorem';
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function lorem_word_2() : string
{
    return 'Ipsum';
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function lorem_phrase() : string
{
    return 'Lorem ipsum dolor';
}

/**
 * Get suitable placeholder text: title.
 *
 * @return Tempcode Place holder text
 */
function lorem_screen_title() : object
{
    return get_screen_title('Lorem Ipsum Dolor', false);
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function placeholder_ip() : string
{
    return '123.45.6.4';
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function placeholder_ip_uk() : string
{
    return '5.71.169.1';
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function lorem_sentence() : string
{
    return 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.';
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function lorem_paragraph() : string
{
    return 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';
}

/**
 * Get suitable placeholder text.
 *
 * @return string Place holder text
 */
function lorem_chunk() : string
{
    return 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ultricies cursus egestas. Nunc orci lacus, viverra a ultrices nec, volutpat eu velit. Maecenas imperdiet tortor eget eros varius mattis. Nullam eget lacus in tellus mollis ornare in lobortis sapien. Duis lectus felis, consequat in ullamcorper at, elementum sed est. In viverra tellus turpis, in tincidunt leo. Donec sagittis rhoncus urna quis eleifend. Nam imperdiet, orci quis bibendum porta, odio neque ullamcorper erat, sed malesuada ante libero vel ligula. Ut porttitor est egestas erat placerat eget placerat lectus ultricies. Morbi eu dolor metus, nec vestibulum nisl. Praesent eget massa tortor, in consequat velit. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Pellentesque eget eros ut erat vestibulum facilisis. Duis eleifend odio in neque pellentesque semper pulvinar dolor feugiat. Proin sed lectus et lectus fringilla gravida. Aliquam a nisl metus. In risus risus, tempus interdum viverra ac, laoreet at sem. Sed sem nunc, rutrum quis convallis eu, hendrerit non libero.\n\nSed sollicitudin, dolor ac posuere bibendum, tellus eros hendrerit magna, non accumsan ligula sapien at enim. Curabitur hendrerit lacinia ligula, et dapibus diam porttitor sit amet. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec nisi arcu, placerat vel ullamcorper non, hendrerit cursus nisl. Aliquam tincidunt, magna sed tempus auctor, enim dolor consequat massa, rhoncus euismod tortor orci fringilla arcu. Nulla et egestas augue. Fusce non enim vitae dolor imperdiet pulvinar vitae sed neque. Sed augue neque, volutpat non tincidunt ac, volutpat eu tellus. Suspendisse sollicitudin nulla eu leo placerat posuere id sit amet metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean fermentum sollicitudin porttitor. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed imperdiet scelerisque turpis, eleifend tristique justo euismod non. Pellentesque at elit tristique sem venenatis auctor eu vitae dui. Nam hendrerit sapien sit amet risus suscipit vitae interdum arcu blandit. Phasellus quis massa sed mi mollis hendrerit.\n\nNunc at elit eget elit convallis auctor sit amet non nisi. Curabitur consequat, nisl sed venenatis feugiat, felis purus vehicula purus, sed scelerisque nulla tellus ac neque. Morbi convallis semper pulvinar. Integer auctor mi ante. Cras aliquam egestas lobortis. Maecenas sodales mi at felis ullamcorper tristique. Fusce viverra laoreet sapien, et vestibulum purus interdum sit amet. Sed at ante quis ipsum pellentesque pretium. Praesent volutpat justo in orci ullamcorper cursus. In non nulla sit amet turpis ultrices dignissim eu cursus justo. Etiam lacinia lacinia odio sit amet fringilla. Vestibulum at auctor nisl.';
}

/**
 * Get suitable placeholder text.
 *
 * @return Tempcode Place holder text
 */
function lorem_phrase_html() : object
{
    $text = '<strong>Lorem ipsum</strong> dolor'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get suitable placeholder text.
 *
 * @return Tempcode Place holder text
 */
function lorem_sentence_html() : object
{
    $text = '<strong>Lorem ipsum</strong> dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get suitable placeholder text.
 *
 * @return Tempcode Place holder text
 */
function lorem_paragraph_html() : object
{
    $text = '<strong>Lorem ipsum</strong> dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get suitable placeholder text.
 *
 * @return Tempcode Place holder text
 */
function lorem_chunk_html() : object
{
    $text = '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ultricies cursus egestas. Nunc orci lacus, viverra a ultrices nec, volutpat eu velit. Maecenas imperdiet tortor eget eros varius mattis. Nullam eget lacus in tellus mollis ornare in lobortis sapien. Duis lectus felis, consequat in ullamcorper at, elementum sed est. In viverra tellus turpis, in tincidunt leo. Donec sagittis rhoncus urna quis eleifend. Nam imperdiet, orci quis bibendum porta, odio neque ullamcorper erat, sed malesuada ante libero vel ligula. Ut porttitor est egestas erat placerat eget placerat lectus ultricies. Morbi eu dolor metus, nec vestibulum nisl. Praesent eget massa tortor, in consequat velit. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Pellentesque eget eros ut erat vestibulum facilisis. Duis eleifend odio in neque pellentesque semper pulvinar dolor feugiat. Proin sed lectus et lectus fringilla gravida. Aliquam a nisl metus. In risus risus, tempus interdum viverra ac, laoreet at sem. Sed sem nunc, rutrum quis convallis eu, hendrerit non libero.</p><p>Sed sollicitudin, dolor ac posuere bibendum, tellus eros hendrerit magna, non accumsan ligula sapien at enim. Curabitur hendrerit lacinia ligula, et dapibus diam porttitor sit amet. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec nisi arcu, placerat vel ullamcorper non, hendrerit cursus nisl. Aliquam tincidunt, magna sed tempus auctor, enim dolor consequat massa, rhoncus euismod tortor orci fringilla arcu. Nulla et egestas augue. Fusce non enim vitae dolor imperdiet pulvinar vitae sed neque. Sed augue neque, volutpat non tincidunt ac, volutpat eu tellus. Suspendisse sollicitudin nulla eu leo placerat posuere id sit amet metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean fermentum sollicitudin porttitor. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed imperdiet scelerisque turpis, eleifend tristique justo euismod non. Pellentesque at elit tristique sem venenatis auctor eu vitae dui. Nam hendrerit sapien sit amet risus suscipit vitae interdum arcu blandit. Phasellus quis massa sed mi mollis hendrerit.</p><p>Nunc at elit eget elit convallis auctor sit amet non nisi. Curabitur consequat, nisl sed venenatis feugiat, felis purus vehicula purus, sed scelerisque nulla tellus ac neque. Morbi convallis semper pulvinar. Integer auctor mi ante. Cras aliquam egestas lobortis. Maecenas sodales mi at felis ullamcorper tristique. Fusce viverra laoreet sapien, et vestibulum purus interdum sit amet. Sed at ante quis ipsum pellentesque pretium. Praesent volutpat justo in orci ullamcorper cursus. In non nulla sit amet turpis ultrices dignissim eu cursus justo. Etiam lacinia lacinia odio sit amet fringilla. Vestibulum at auctor nisl.</p>'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get suitable placeholder text.
 *
 * @return Tempcode Place holder text
 */
function placeholder_form() : object
{
    require_css('forms');

    $text = '<p>(A form would go here.)</p>'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get fields.
 *
 * @return Tempcode Place holder text
 */
function placeholder_fields() : object
{
    require_css('forms');

    $text = '<tr><th>(Some field key would go here.)</th><td>(Some field value would go here.)</td></tr>'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get form with a field.
 *
 * @param  ID_TEXT $field_name The field name wanted
 * @return Tempcode Place holder text
 */
function placeholder_form_with_field(string $field_name) : object
{
    require_css('forms');

    $text = '<p>(A form would go here.)</p>'; // XHTMLXHTML

    require_code('form_templates');
    $hidden = form_input_hidden($field_name, '0');

    $form = do_lorem_template('FORM', [
        'TABINDEX' => placeholder_number(),
        'HIDDEN' => $hidden,
        'TEXT' => $text,
        'FIELDS' => placeholder_fields(),
        'URL' => placeholder_url(),
        'SUBMIT_ICON' => 'buttons/proceed',
        'SUBMIT_NAME' => 'proceed',
        'SUBMIT_BUTTON_CLASS' => null,
        'JS_FUNCTION_CALLS' => [],
        'SKIP_WEBSTANDARDS' => null,
        'SKIP_REQUIRED' => null,
        'GET' => null,
        'SUPPORT_AUTOSAVE' => null,
        'ANALYTIC_EVENT_CATEGORY' => null,
        'MODSECURITY_WORKAROUND' => null,
        'SECONDARY_FORM' => false,
        'NO_SIZING' => null,
        'PREVIEW' => null,
        'TITLE' => null,
    ]);

    return $form;
}

/**
 * Get suitable placeholder text.
 *
 * @return Tempcode Place holder text
 */
function placeholder_table() : object
{
    $text = '<table class="results-table wide-table"><tbody><tr><th>(Cell 1)</th><td>(Cell 2)</td></tr><tr><td>(Cell 3)</td><td>(Cell 4)</td></tr></tbody></table>'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get suitable placeholder URL.
 *
 * @return Tempcode Place holder URL
 */
function placeholder_url() : object
{
    $text = 'http://www.example.com/';
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get suitable placeholder link.
 *
 * @return Tempcode Place holder link
 */
function placeholder_link() : object
{
    $text = '<a href="http://www.example.com/">test link</a>'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get a random number.
 *
 * @return string Random number
 */
function placeholder_random() : string
{
    global $LOREM_RANDOM_VAR;
    $x = $LOREM_RANDOM_VAR;
    $LOREM_RANDOM_VAR++;
    return strval($x);
}

/**
 * Get a random ID.
 *
 * @return string Random ID
 */
function placeholder_random_id() : string
{
    global $LOREM_RANDOM_VAR;
    $x = $LOREM_RANDOM_VAR;
    $LOREM_RANDOM_VAR++;
    return 'id_' . strval($x);
}

/**
 * Get a button.
 *
 * @return Tempcode Button
 */
function placeholder_button() : object
{
    $text = '<p>( Buttons would go here.)</p>'; // XHTMLXHTML
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get a placeholder for a comma-list.
 *
 * @return string Place holder comma-list
 */
function placeholder_comma_list() : string
{
    return 'lorem=Lorem,ipsum=Ipsum';
}

/**
 * Get options for drop-down box.
 *
 * @return string Place holder text
 */
function placeholder_options() : string
{
    $text = '';
    for ($i = 1; $i <= 3; $i++) {
        $text .= '<option value="' . lorem_word() . '">' . lorem_word() . '</option>'; // XHTMLXHTML
    }

    return $text;
}

/**
 * Get an array.
 *
 * @param  integer $num_elements Number of array elements
 * @return array Place holder array
 */
function placeholder_array(int $num_elements = 3) : array
{
    $array = [];
    for ($i = 1; $i <= $num_elements; $i++) {
        $array[] = 'test' . strval($i);
    }

    return $array;
}

/**
 * Get a list.
 *
 * @return string Place holder text
 */
function placeholder_list_item() : string
{
    return '<li>A list will display here</li>'; // XHTMLXHTML
}

/**
 * Get some set of data.
 *
 * @return string Place holder text
 */
function placeholder_types() : string
{
    return 'Type 1, type 2, type3 etc';
}

/**
 * Get an image.
 *
 * @return Tempcode Place holder text
 */
function placeholder_image() : object
{
    $text = '<img src="' . escape_html(placeholder_image_url()) . '" title="test" alt="test" />';
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($text);
    }
    return make_string_tempcode($text);
}

/**
 * Get time.
 *
 * @return string Place holder text
 */
function placeholder_date() : string
{
    return get_timezoned_date_time(123456789);
}

/**
 * Get suitable placeholder timestamp.
 *
 * @return string Place holder text
 */
function placeholder_date_raw() : string
{
    return strval(123456789);
}

/**
 * Get suitable placeholder number.
 *
 * @return string Place holder text
 */
function placeholder_number() : string
{
    return strval(123);
}

/**
 * Get suitable placeholder codename.
 *
 * @return string Place holder codename
 */
function placeholder_codename() : string
{
    return 'x' . strval(123);
}

/**
 * Get suitable numeric placeholder ID.
 *
 * @return string Numeric place holder ID
 */
function placeholder_numeric_id() : string
{
    return strval(123);
}

/**
 * Get suitable placeholder filesize.
 *
 * @return string Place holder text
 */
function placeholder_filesize() : string
{
    require_code('files');
    return clean_file_size(123);
}

/**
 * Get javascript code.
 *
 * @return string Place holder text
 */
function placeholder_javascript_code() : string
{
    return "alert('test');";
}

/**
 * Get image URL.
 *
 * @return string Image URL
 */
function placeholder_image_url() : string
{
    return find_theme_image('no_image');
}

/**
 * Get a blank screen, for a parameter which is not visible and typically blank.
 *
 * @return string Place holder text
 */
function placeholder_blank() : string
{
    return '';
}

/**
 * Get suitable placeholder breadcrumbs.
 *
 * @return Tempcode Place holder text
 */
function placeholder_breadcrumbs() : object
{
    $out = new Tempcode();
    $out->attach(do_lorem_template('BREADCRUMB_LINK_WRAP', ['URL' => placeholder_url(), 'TOOLTIP' => '', 'LABEL' => lorem_phrase()]));
    $out->attach(do_lorem_template('BREADCRUMB_SEPARATOR', []));
    $out->attach(do_lorem_template('BREADCRUMB_LONE_WRAP', ['LABEL' => lorem_phrase()]));
    return $out;
}

/**
 * Lorem version of do_template. It will reprocess the template into something that is "stable XHTML" and thus can work inside an XHTML editor.
 *
 * @param  ID_TEXT $codename The codename of the template being loaded
 * @param  array $parameters A map of parameters for the template (key to value)
 * @param  ?LANGUAGE_NAME $lang The language to load the template in (templates can embed language references) (null: users own language)
 * @param  boolean $light_error Whether to not produce a stack trace if the template is missing
 * @param  ?ID_TEXT $fallback Alternate template to use if the primary one does not exist (null: none)
 * @param  string $suffix File type suffix of template file (e.g. .tpl)
 * @param  string $directory Subdirectory type to look in
 * @set templates css javascript xml text
 * @return Tempcode The Tempcode for this template
 */
function do_lorem_template(string $codename, array $parameters = [], ?string $lang = null, bool $light_error = false, ?string $fallback = null, string $suffix = '.tpl', string $directory = 'templates') : object
{
    global $KNOWN_TEMPLATE_PARAMETERS;
    $KNOWN_TEMPLATE_PARAMETERS[$codename] = array_keys($parameters);

    global $THEME_BEING_TESTED;
    $theme = isset($THEME_BEING_TESTED) ? $THEME_BEING_TESTED : $GLOBALS['FORUM_DRIVER']->get_theme();
    return do_template($codename, $parameters, $lang, $light_error, $fallback, $suffix, $directory, $theme);
}

/**
 * Lorem version of globalise. It will wrap the input into something that is "stable XHTML" and thus can work inside an XHTML editor.
 *
 * @param  Tempcode $middle The Tempcode to put into a nice frame
 * @param  ?mixed $message 'Additional' message (null: none)
 * @param  string $type The type of special message
 * @set inform warn ""
 * @param  boolean $include_header_and_footer Whether to include the header/footer/panels
 * @return Tempcode Standalone page
 */
function lorem_globalise(object $middle, $message = null, string $type = '', bool $include_header_and_footer = false) : object
{
    restore_output_state(true); // Here we reset some Tempcode environmental stuff, because template compilation or preprocessing may have dirtied things

    global $LOREM_AVOID_GLOBALISE;
    if ($LOREM_AVOID_GLOBALISE) {
        return $middle;
    }

    if ($include_header_and_footer) {
        $out = do_lorem_template('GLOBAL_HTML_WRAP', [
            'MIDDLE' => $middle,
        ]);
    } else {
        $out = do_lorem_template('STANDALONE_HTML_WRAP', [
            'TITLE' => lorem_phrase(),
            'FRAME' => false,
            'TARGET' => '_self',
            'CONTENT' => $middle,
            'NOINDEX' => false,
        ]);
    }

    $out->handle_symbol_preprocessing();

    return $out;
}

/**
 * Get tags templating.
 *
 * @return Tempcode Tags
 */
function placeholder_tags() : object
{
    if (!addon_installed('search')) {
        return new Tempcode();
    }

    $_tags = [];
    foreach (placeholder_array() as $k => $v) {
        $_tags[] = [
            'TAG' => lorem_word(),
            'LINK_LIMITEDSCOPE' => placeholder_url(),
            'LINK_FULLSCOPE' => placeholder_url(),
        ];
    }
    return do_lorem_template('TAGS', [
        'TAGS' => $_tags,
        'TYPE' => '',
    ]);
}

/**
 * Get an array of emoticons.
 *
 * @return array Emoticons
 */
function placeholder_emoticons() : array
{
    $emoticons = [];
    $emoticons[':constipated:'][] = 'EMOTICON_IMG_CODE_THEMED';
    $emoticons[':constipated:'][] = 'cns_emoticons/constipated';
    $emoticons[':constipated:'][] = ':constipated:';

    $emoticons[':upsidedown:'][] = 'EMOTICON_IMG_CODE_THEMED';
    $emoticons[':upsidedown:'][] = 'cns_emoticons/upsidedown';
    $emoticons[':upsidedown:'][] = ':upsidedown:';

    $emoticons[':depressed:'][] = 'EMOTICON_IMG_CODE_THEMED';
    $emoticons[':depressed:'][] = 'cns_emoticons/depressed';
    $emoticons[':depressed:'][] = ':depressed:';

    $emoticons[':christmas:'][] = 'EMOTICON_IMG_CODE_THEMED';
    $emoticons[':christmas:'][] = 'cns_emoticons/christmas';
    $emoticons[':christmas:'][] = ':christmas:';

    return $emoticons;
}

/**
 * Get an avatar image.
 *
 * @return URLPATH Image
 */
function placeholder_avatar() : string
{
    return find_theme_image('cns_default_avatars/system', true);
}

/**
 * Get a table of emoticons.
 *
 * @return Tempcode Emoticons
 */
function placeholder_emoticon_chooser() : object
{
    $em = new Tempcode();
    foreach (placeholder_emoticons() as $emo) {
        $code = $emo[2];
        $em->attach(do_lorem_template('EMOTICON_CLICK_CODE', ['_GUID' => '93968e9ff0308fff92d1d45e433557e2', 'FIELD_NAME' => 'post', 'CODE' => $code, 'IMAGE' => apply_emoticons($code)]));
    }
    return $em;
}

/**
 * Get a theme image code.
 *
 * @param  string $type The theme image directory to find a code under
 * @return string The code
 */
function placeholder_img_code(string $type = '') : string
{
    $path = get_file_base() . '/themes/default/images/' . $type;
    if (!file_exists($path)) {
        $path = get_file_base() . '/themes/default/images/' . fallback_lang() . '/' . $type;
    }
    $dh = @opendir($path);
    if ($dh === false) {
        fatal_exit('Cannot find theme image directory: ' . $type);
    }
    while (($f = readdir($dh)) !== false) {
        $ext = get_file_extension($f);

        if ($ext == 'svg') {
            return basename($f, '.svg');
        }
        if ($ext == 'png') {
            return basename($f, '.png');
        }
        if ($ext == 'jpg') {
            return basename($f, '.jpg');
        }
        if ($ext == 'jpeg') {
            return basename($f, '.jpeg');
        }
        if ($ext == 'gif') {
            return basename($f, '.gif');
        }
    }
    closedir($dh);

    return '';
}

/**
 * Get a placeholder diff HTML.
 *
 * @return string The diff HTML
 */
function placeholder_diff_html() : string
{
    return 'Lorem ipsum <del>Lorem ipsum dolor</del><ins>dolor</ins>';
}

/**
 * Get a placeholder comments posting form.
 * Be sure to require_javascript editing or posting where necessary.
 *
 * @param  boolean $reviews Whether to show reviews
 * @param  boolean $first_post Include placeholder first post info
 * @param  SHORT_TEXT $display The CSS display mode
 * @param  ID_TEXT $expand_type The expansion type
 * @set expand
 * @return Tempcode The placeholder comment form
 */
function placeholder_comments_form(bool $reviews = true, bool $first_post = false, string $display = 'block', string $expand_type = 'expand') : object
{
    $rules = do_lorem_template('COMMENTS_DEFAULT_TEXT', []);

    return do_lorem_template('COMMENTS_POSTING_FORM', [
        'TITLE' => lorem_phrase(),
        'JOIN_BITS' => lorem_phrase_html(),
        'USE_CAPTCHA' => false,
        'GET_EMAIL' => true,
        'EMAIL_OPTIONAL' => true,
        'GET_TITLE' => true,
        'TITLE_OPTIONAL' => true,
        'DEFAULT_TITLE' => '',
        'POST_WARNING' => '',
        'RULES_TEXT' => $rules,
        'ATTACHMENTS' => null,
        'ATTACH_SIZE_FIELD' => null,
        'TRUE_ATTACHMENT_UI' => false,
        'EMOTICONS' => placeholder_emoticon_chooser(),
        'EXPAND_TYPE' => $expand_type,
        'DISPLAY' => $display,
        'FIRST_POST_URL' => $first_post ? placeholder_url() : '',
        'FIRST_POST' => $first_post ? lorem_paragraph_html() : '',
        'COMMENT_URL' => placeholder_url(),
        'REVIEWS' => $reviews,
        'ANALYTIC_EVENT_CATEGORY' => null,
    ]);
}

/**
 * Get placeholder comments.
 *
 * @param  ?Tempcode $placeholder_comments_form A placeholder_comments_form to include (null: do not include a form)
 * @return Tempcode The placeholder comments
 */
function placeholder_comments(?object $placeholder_comments_form = null) : object
{
    require_lang('comcode');

    require_javascript('plupload');
    require_javascript('posting');
    require_javascript('editing');

    require_css('forms');

    $review_titles = [];
    $review_titles[] = [
        'REVIEW_TITLE' => lorem_phrase(),
        '_NUM_REVIEW_RATINGS' => placeholder_number(),
        'NUM_REVIEW_RATINGS' => placeholder_number(),
        '_REVIEW_RATING' => float_to_raw_string(10.0),
        'REVIEW_RATING' => float_format(10.0),
    ];
    $comments = new Tempcode();
    foreach (placeholder_array() as $i => $comment) {
        $map = [
            'INDIVIDUAL_REVIEW_RATINGS' => [],
            'REVIEW_RATING' => strval(10),
            'HIGHLIGHT' => ($i == 1),
            'TITLE' => lorem_phrase(),
            'TIME_RAW' => placeholder_date_raw(),
            'TIME' => placeholder_date(),
            'POSTER_ID' => placeholder_first_admin_id(),
            'POSTER_URL' => placeholder_url(),
            'POSTER_NAME' => lorem_word(),
            'POSTER' => null,
            'POSTER_DETAILS' => new Tempcode(),
            'ID' => placeholder_numeric_id() . strval($i),
            'POST' => lorem_phrase(),
            'IS_UNREAD' => false,
            'POST_COMCODE' => lorem_phrase(),
            'CHILDREN' => lorem_phrase(),
            'OTHER_IDS' => [
                placeholder_numeric_id(),
            ],
            'RATING' => new Tempcode(),
            'EMPHASIS' => new Tempcode(),
            'BUTTONS' => new Tempcode(),
            'LAST_EDITED_RAW' => '',
            'LAST_EDITED' => new Tempcode(),
            'UNVALIDATED' => new Tempcode(),
            'TOPIC_ID' => placeholder_numeric_id(),
            'IS_SPACER_POST' => false,
            'IS_THREADED' => false,
            'NUM_TO_SHOW_LIMIT' => placeholder_number(),
        ];
        $comments->attach(do_lorem_template('POST', $map));
        do_lorem_template('POST_CHILD_LOAD_LINK', $map); // INCLUDE'd in above, but test set needs to see it run direct
    }

    $out = do_lorem_template('COMMENTS_WRAPPER', [
        'TYPE' => lorem_phrase(),
        'ID' => placeholder_codename(),
        'REVIEW_RATING_CRITERIA' => $review_titles,
        'AUTHORISED_FORUM_URL' => placeholder_url(),
        'FORM' => (($placeholder_comments_form !== null) ? $placeholder_comments_form : ''),
        'COMMENTS' => $comments,
        'SORT' => 'relevance',
        'TOTAL_POSTS' => placeholder_number(),
        'IS_THREADED' => false,
        'FORUM_LINK' => null,
        'HASH' => '',
        'SERIALIZED_OPTIONS' => '',
    ]);

    $out->attach(do_lorem_template('COMMENT_AJAX_HANDLER', [
        'OPTIONS' => '',
        'IS_THREADED' => false,
        'HASH' => '',
        'CONTENT_TYPE' => lorem_word(),
        'SELF_URL_ENCODED' => placeholder_url(),
    ]));

    return $out;
}

/**
 * Get placeholder trackbacks.
 *
 * @param  integer $num_trackbacks The number of trackbacks to generate
 * @return Tempcode The trackbacks
 */
function placeholder_trackbacks(int $num_trackbacks = 3) : object
{
    $trackbacks = new Tempcode();
    foreach (placeholder_array($num_trackbacks) as $k => $value) {
        $trackbacks->attach(do_lorem_template('TRACKBACK', [
            'ID' => strval($k),
            '_DATE' => placeholder_date_raw(),
            'DATE' => placeholder_date(),
            'URL' => placeholder_url(),
            'TITLE' => lorem_phrase(),
            'EXCERPT' => lorem_paragraph(),
            'NAME' => $value,
        ]));
    }

    return $trackbacks;
}

/**
 * Get placeholder trackbacks in a wrapper.
 *
 * @param  integer $num_trackbacks The number of trackbacks to generate
 * @return Tempcode The trackback wrapper
 */
function placeholder_trackbacks_wrapper(int $num_trackbacks = 3) : object
{
    require_lang('trackbacks');

    $trackbacks = do_lorem_template('TRACKBACK_WRAPPER', [
        'TRACKBACKS' => placeholder_trackbacks($num_trackbacks),
        'TRACKBACK_FEEDBACK_TYPE' => lorem_word(),
        'TRACKBACK_ID' => placeholder_codename(),
        'TRACKBACK_TITLE' => lorem_phrase(),
    ]);

    return $trackbacks;
}

/**
 * Get placeholder ratings.
 *
 * @param  ID_TEXT $content_type The content type
 * @param  ID_TEXT $template The template to use
 * @return Tempcode The ratings
 */
function placeholder_rating(string $content_type, string $template = 'RATING_BOX') : object
{
    $all_rating_criteria = [];
    $all_rating_criteria[] = [
        'TITLE' => lorem_phrase(),
        'RATING' => make_string_tempcode('6'),
        '_NUM_RATINGS' => placeholder_number(),
        'NUM_RATINGS' => placeholder_number(),
        'TYPE' => lorem_word(),
    ];
    $rating_form = do_lorem_template('RATING_FORM', [
        'LIKES' => true,
        'CONTENT_TYPE' => $content_type,
        'ID' => placeholder_codename(),
        'URL' => placeholder_url(),
        'ALLOW_RATING' => true,
        'ALL_RATING_CRITERIA' => $all_rating_criteria,
        'HAS_RATINGS' => true,
        '_OVERALL_NUM_RATINGS' => placeholder_number(),
        'OVERALL_NUM_RATINGS' => placeholder_number(),
        'SIMPLISTIC' => true,
        'ERROR' => '',
        'CONTENT_URL' => placeholder_url(),
        'CONTENT_TITLE' => lorem_phrase(),
    ]);

    return do_lorem_template($template, [
        '_OVERALL_NUM_RATINGS' => placeholder_number(),
        'OVERALL_NUM_RATINGS' => placeholder_number(),
        'LIKES' => true,
        'CONTENT_TYPE' => $content_type,
        'ID' => placeholder_codename(),
        'HAS_RATINGS' => true,
        'ALL_RATING_CRITERIA' => $all_rating_criteria,
        '_NUM_RATINGS' => '10',
        'NUM_RATINGS' => '10',
        'RATING_FORM' => $rating_form,
        'ERROR' => '',
    ]);
}

/**
 * Get a placeholder member box.
 *
 * @return Tempcode The member box
 */
function placeholder_member_box() : object
{
    $custom_fields = do_lorem_template('CNS_MEMBER_BOX_CUSTOM_FIELD', [
        'NAME' => lorem_word(),
        'RAW' => lorem_phrase(),
        'VALUE' => lorem_phrase(),
        'MEMBER_ID' => placeholder_first_admin_id(),
    ]);

    $map = [
        'GIVE_CONTEXT' => false,
        'MEMBER_ID' => placeholder_first_admin_id(),
        'USERNAME' => lorem_word(),
        '_POSTS' => placeholder_number(),
        'POSTS' => placeholder_number(),
        '_POINTS' => placeholder_number(),
        'POINTS' => placeholder_number(),
        'JOIN_DATE_RAW' => placeholder_date_raw(),
        'JOIN_DATE' => placeholder_date(),
        'PRIMARY_GROUP_NAME' => lorem_word(),
        'SECONDARY_GROUPS' => [lorem_word(), lorem_word_2()],
        'CUSTOM_FIELDS' => $custom_fields,
        'ONLINE' => false,
        'AVATAR_URL' => placeholder_avatar(),
        'IP_ADDRESS' => placeholder_ip(),
        'GALLERIES' => placeholder_number(),
        'DOB_LABEL' => lorem_word(),
        'DOB' => placeholder_date(),
        '_DOB' => placeholder_date_raw(),
        '_DOB_CENSORED' => false,
    ];
    if (addon_installed('cns_warnings')) {
        $map['_NUM_WARNINGS'] = placeholder_number();
        $map['NUM_WARNINGS'] = placeholder_number();
    }
    return do_lorem_template('CNS_MEMBER_BOX', $map);
}

/**
 * Get pagination.
 *
 * @return Tempcode Pagination
 */
function placeholder_pagination() : object
{
    $selectors = new Tempcode();
    foreach (placeholder_array() as $k => $v) {
        $selectors->attach(do_lorem_template('PAGINATION_PER_PAGE_OPTION', [
            'SELECTED' => true,
            'VALUE' => strval($k),
            'NAME' => $v,
        ]));
    }
    $per_page = do_lorem_template('PAGINATION_PER_PAGE', [
        'HIDDEN' => '',
        'URL' => placeholder_url(),
        'MAX_NAME' => 'max',
        'SELECTORS' => $selectors,
    ]);

    $parts = new Tempcode();
    foreach (placeholder_array() as $k => $v) {
        $j = $k + 1;
        if ($k == 0) {
            $parts->attach(do_lorem_template('PAGINATION_PAGE_NUMBER', [
                'P' => strval($j),
            ]));
        } else {
            $parts->attach(do_lorem_template('PAGINATION_PAGE_NUMBER_LINK', [
                'P' => strval($j),
                'URL' => placeholder_url(),
                'TITLE' => lorem_phrase(),
                'NOFOLLOW' => null,
                'REL' => lorem_word(),
            ]));
        }
    }
    $first = do_lorem_template('PAGINATION_CONTINUE_FIRST', [
        'TITLE' => lorem_phrase(),
        'P' => placeholder_number(),
        'FIRST_URL' => placeholder_url(),
    ]);
    $previous = do_lorem_template('PAGINATION_PREVIOUS_LINK', [
        'TITLE' => lorem_phrase(),
        '_P' => placeholder_number(),
        'P' => placeholder_number(),
        'URL' => placeholder_url(),
        'NOFOLLOW' => null,
    ]);
    $previous->attach(do_lorem_template('PAGINATION_PREVIOUS'));
    $next = do_lorem_template('PAGINATION_NEXT_LINK', [
        'REL' => null,
        'TITLE' => lorem_phrase(),
        '_NUM_PAGES' => placeholder_number(),
        'NUM_PAGES' => placeholder_number(),
        '_P' => placeholder_number(),
        'P' => placeholder_number(),
        'URL' => placeholder_url(),
        'NOFOLLOW' => null,
    ]);
    $next->attach(do_lorem_template('PAGINATION_NEXT'));
    $continues = do_lorem_template('PAGINATION_CONTINUE', []);
    $last = do_lorem_template('PAGINATION_CONTINUE_LAST', [
        'TITLE' => lorem_phrase(),
        'P' => placeholder_number(),
        'LAST_URL' => placeholder_url(),
    ]);
    $pages_list = do_lorem_template('PAGINATION_LIST_PAGES', [
        'URL' => placeholder_url(),
        'HIDDEN' => '',
        'START_NAME' => 'start',
        'LIST' => placeholder_options(),
    ]);

    return do_lorem_template('PAGINATION_WRAP', [
        'TEXT_ID' => placeholder_random_id(),
        'PER_PAGE' => $per_page,
        'PREVIOUS' => $previous,
        'CONTINUES_LEFT' => $continues,
        'CONTINUES_RIGHT' => $continues,
        'NEXT' => $next,
        'PARTS' => $parts,
        'FIRST' => $first,
        'LAST' => $last,
        'PAGES_LIST' => $pages_list,
        'START' => placeholder_number(),
        'MAX' => placeholder_number(),
        'MAX_ROWS' => placeholder_number(),
        'NUM_PAGES' => placeholder_number(),
    ]);
}

/**
 * Get suitable numeric placeholder ID for member ID.
 *
 * @return string Numeric place holder ID of the first admin
 */
function placeholder_first_admin_id() : string
{
    require_code('users_active_actions');
    return strval(get_first_admin_user());
}

/**
 * Get all Comcode files.
 *
 * @return array List of Comcode files
 */
function find_comcodes() : array
{
    $zones = find_all_zones();
    $files = [];
    foreach ($zones as $zone) {
        $z = ($zone == '') ? 'pages' : $zone;
        $files[$z] = find_all_pages($zone, 'comcode/' . fallback_lang(), 'txt');
    }
    return $files;
}

/**
 * Get all HTML files.
 *
 * @return array List of HTML files
 */
function find_html() : array
{
    $zones = find_all_zones();
    $files = [];
    foreach ($zones as $zone) {
        $z = ($zone == '') ? 'pages' : $zone;
        $files[$z] = find_all_pages($zone, 'html/' . fallback_lang(), 'htm');
    }
    return $files;
}

/**
 * Find the template/screen previews: by template.
 *
 * @return array The map of previews (template to a tuple of preview details)
 */
function find_all_previews__by_template() : array
{
    $all_previews = [];

    $hooks = find_all_hook_obs('systems', 'addon_registry', 'Hook_addon_registry_');
    ksort($hooks);
    foreach ($hooks as $hook => $ob) {
        if (method_exists($ob, 'tpl_previews')) {
            $previews = $ob->tpl_previews();

            foreach ($previews as $tpl => $function) {
                $all_previews[$tpl] = [$hook, 'tpl_preview__' . $function];
            }
        }
    }

    ksort($all_previews);

    return $all_previews;
}

/**
 * Find the template/screen previews: by screen.
 *
 * @return array The map of previews (screen to a list of templates)
 */
function find_all_previews__by_screen() : array
{
    $all_previews = [];

    $hooks = find_all_hooks('systems', 'addon_registry');
    foreach ($hooks as $hook => $hook_dir) {
        $path = get_file_base() . '/' . $hook_dir . '/hooks/systems/addon_registry/' . filter_naughty_harsh($hook) . '.php';
        $_hook_bits = extract_module_functions($path, ['tpl_previews', 'tpl_previews_extra'], [], false, 'Hook_addon_registry_' . $hook);

        if (isset($_hook_bits[0])) {
            $previews = is_array($_hook_bits[0]) ? call_user_func_array($_hook_bits[0][0], $_hook_bits[0][1]) : cms_eval($_hook_bits[0], $path);
            foreach ($previews as $tpl => $function) {
                if (!array_key_exists('tpl_preview__' . $function, $all_previews)) {
                    $all_previews['tpl_preview__' . $function] = [$hook, []];
                }
                $all_previews['tpl_preview__' . $function][1][] = $tpl;
            }
        }

        if (isset($_hook_bits[1])) {
            $previews = is_array($_hook_bits[1]) ? call_user_func_array($_hook_bits[1][0], $_hook_bits[1][1]) : cms_eval($_hook_bits[1], $path);
            foreach ($previews as $function) {
                if (!array_key_exists('tpl_preview__' . $function, $all_previews)) {
                    $all_previews['tpl_preview__' . $function] = [$hook, []];
                }
            }
        }
    }

    ksort($all_previews);

    return $all_previews;
}

/**
 * Shows the preview of a screen.
 *
 * @param  ?ID_TEXT $hook The hook the preview is in (null: search)
 * @param  ID_TEXT $function The name of the screen preview
 * @param  ?ID_TEXT $template The template to be previewed (e.g. templates/DOWNLOAD_BOX.tpl) (null: do not consider template)
 * @return Tempcode The previewed screen
 */
function render_screen_preview(?string $hook, string $function, ?string $template = null) : object
{
    if ($hook === null) {
        $hooks = find_all_hook_obs('systems', 'addon_registry', 'Hook_addon_registry_');
        foreach ($hooks as $hook => $ob) {
            if (method_exists($ob, 'tpl_previews')) {
                $previews = $ob->tpl_previews();
                foreach ($previews as $_function) {
                    if ($function == 'tpl_preview__' . $_function) {
                        break 2;
                    }
                }
            }
        }
    }

    require_code('hooks/systems/addon_registry/' . filter_naughty_harsh($hook));
    $ob = object_factory('Hook_addon_registry_' . filter_naughty_harsh($hook));

    if ((!is_file(get_file_base() . '/sources/hooks/systems/addon_registry/' . $hook . '.php')) && (!is_file(get_file_base() . '/sources_custom/hooks/systems/addon_registry/' . $hook . '.php'))) {
        fatal_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }

    // Load all .ini/.js/.css
    $files = $ob->get_file_list();
    foreach ($files as $path) {
        if ((substr($path, -4) == '.ini') && ((substr($path, 0, 8) == 'lang/EN/') || (substr($path, 0, 15) == 'lang_custom/EN/'))) {
            require_lang(basename($path, '.ini'));
        }

        if ((substr($path, -4) == '.css') && (substr($path, 0, 7) == 'themes/')) {
            require_css(basename($path, '.css'));
        }

        if ((substr($path, -3) == '.js') && (substr($path, 0, 7) == 'themes/')) {
            $basename = basename($path, '.js');
            if (substr($basename, 0, 1) != '_') {
                require_javascript(cms_strtolower_ascii($basename));
            }
        }
    }

    if (!method_exists($ob, $function)) {
        fatal_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }

    // Set the screen title as the name of the template
    if ($template !== null) {
        set_short_title($template);
    }

    // Render preview(s)
    $preview = call_user_func([$ob, $function]);

    // Show as plain text if needed
    $text = (($template !== null) && (is_raw_code_template($template)));
    if ($text) {
        $out = with_whitespace($preview, false, true);
    } else {
        $out = $preview;
    }
    return $out;
}

/**
 * Checks if the template is to be previewed as displayed raw code.
 *
 * @param  string $temp_name Name of the template
 * @return boolean Whether it is
 */
function is_raw_code_template(string $temp_name) : bool
{
    return in_array($temp_name, [
        // Building blocks
        'templates/POLL_RSS_SUMMARY.tpl',

        // Code/metadata injection, mainly for <head>
        'templates/CSS_NEED_FULL.tpl',
        'templates/CSS_NEED_INLINE.tpl',
        'templates/JAVASCRIPT_NEED_FULL.tpl',
        'templates/JS_REFRESH.tpl',
        'templates/META_REFRESH_LINE.tpl',
        'templates/TRANSLATION_LINKS.tpl',

        // Data/structure injection
        'templates/PREVIEW_SCRIPT_CODE.tpl',
        'templates/HANDLE_CONFLICT_RESOLUTION.tpl',
        'templates/CHAT_SITEWIDE_IM.tpl',
        'templates/NOTIFICATION_POLLER.tpl',
        'templates/CAPTCHA_LOOSE.tpl',
        'templates/JS_BLOCK.tpl',
        'templates/WYSIWYG_LOAD.tpl',

        // Nothing visible to see for other reasons
        'templates/ANCHOR.tpl',

        // XML
        'xml/TRACKBACK_XML_LISTING.xml',
        'xml/ATOM_WRAPPER.xml',
        'xml/ATOM_ENTRY.xml',
        'xml/RSS_ENTRY_COMMENTS.xml',
        'xml/RSS_CLOUD.xml',
        'xml/RSS_WRAPPER.xml',
        'xml/RSS_ENTRY.xml',
        'xml/RSS_ABBR.xml'
    ]);
}
