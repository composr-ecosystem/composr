<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    cns_warnings
 */

/**
* Generate comcode text containing an explanation of the punitive actions being taken based on what was entered in the warning form.
*
* @return string comcode to be included in the warning private topic
*/
function generate_punitive_text() : string
{
    $message_punitive = post_param_integer('include_punitive_text', 0);

    // Return an empty string immediately if user does not want auto-generated punitive text
    if ($message_punitive == 0) {
        return '';
    }

    require_code('temporal');

    // Gather post parameters for punitive actions
    $member_id = post_param_integer('member_id');
    $charged_points = post_param_integer('charged_points', 0);
    $silence_from_topic = post_param_integer('topic_id', null);
    $_silence_from_topic = post_param_date('silence_from_topic');
    $silence_from_forum = post_param_integer('forum_id', null);
    $_silence_from_forum = post_param_date('silence_from_forum');
    $probation = post_param_integer('probation', 0);
    $banned_member = post_param_integer('banned_member', 0);
    $stopforumspam = post_param_integer('stopforumspam', 0);
    $banned_ip = post_param_integer('banned_ip', 0);
    $changed_usergroup_to = post_param_integer('changed_usergroup_to');

    // Prepare punitive actions
    $punitive_messages = [];

    // Stop Forum Spam report
    if ($stopforumspam == 1) {
        array_push($punitive_messages, do_lang('PUNITIVE_STOP_FORUM_SPAM', null, null, null, null, false));
    }

    // IP ban
    if (addon_installed('securitylogging')) {
        if (has_actual_page_access(get_member(), 'admin_ip_ban')) {
            if ($banned_ip == 1) {
                array_push($punitive_messages, do_lang('PUNITIVE_BAN_IP', null, null, null, null, false));
            }
        }
    }

    // Member ban
    if (has_privilege(get_member(), 'member_maintenance')) {
        if ($banned_member == 1) {
            array_push($punitive_messages, do_lang('PUNITIVE_BAN_ACCOUNT', null, null, null, null, false));
        }
    }

    // Probation
    if (has_privilege(get_member(), 'probate_members')) {
        if ($probation != 0) {
            $on_probation_until = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_on_probation_until');
            if (($on_probation_until === null) || ($on_probation_until < time())) {
                $on_probation_until = time();
            }
            $on_probation_until += $probation * 60 * 60 * 24;
            array_push($punitive_messages, do_lang('PUNITIVE_PROBATION', strval($probation), strval(get_timezoned_date_time($on_probation_until, false, false, $member_id)), null, null, false));
        }
    }

    // Usergroup change
    if (has_privilege(get_member(), 'member_maintenance')) {
        if ($changed_usergroup_to !== null) {
            $_changed_usergroup_to = cns_get_group_name($changed_usergroup_to, true);
            array_push($punitive_messages, do_lang('PUNITIVE_CHANGE_USERGROUP', $_changed_usergroup_to, null, null, null, false));
        }
    }

    // Forum silencing
    if ($silence_from_forum !== null && $_silence_from_forum !== null) {
        $silence_from_forum_title = strval($silence_from_forum);
        if (get_forum_type() == 'cns') {
            $silence_from_forum_title = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_name', ['id' => $silence_from_forum]);
        }
        array_push($punitive_messages, do_lang('PUNITIVE_SILENCE_FROM_FORUM', $silence_from_forum_title, do_lang('PUNITIVE_UNTIL', get_timezoned_date_time($_silence_from_forum, false, false, $member_id)), null, null, false));
    }

    // Topic silencing
    if ($silence_from_topic !== null && $_silence_from_topic !== null) {
        $silence_from_topic_title = strval($silence_from_topic);
        if (get_forum_type() == 'cns') {
            $silence_from_topic_title = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $silence_from_topic]);
        }
        array_push($punitive_messages, do_lang('PUNITIVE_SILENCE_FROM_TOPIC', strval($silence_from_topic_title), strval(do_lang('PUNITIVE_UNTIL', strval(get_timezoned_date_time($_silence_from_topic, false, false, $member_id)))), null, null, false));
    }

    // Post deletion
    if (has_delete_permission('mid', get_member(), $member_id, 'topics')) {
        $where = ['p_poster' => $member_id];
        $sup = 'ORDER BY p_time';
        if (!has_privilege(get_member(), 'view_other_pt')) {
            $sup = ' AND p_cache_forum_id IS NOT NULL ' . $sup;
        }
        $posts_already_deleted = [];
        $posts_by_member = $GLOBALS['FORUM_DB']->query_select('f_posts', ['id', 'p_title', 'p_topic_id', 'p_time'], $where, $sup);
        foreach ($posts_by_member as $post) {
            $p_title = do_lang('POST_IN_TITLED', strval($post['p_title']), $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $GLOBALS['FORUM_DB']->query_select_value('f_posts', 'p_topic_id', ['id' => intval($post['id'])])]));
            if (empty($post['p_title'])) {
                $p_title = do_lang('POST_IN_NUMBERED', strval($post['id']), $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $GLOBALS['FORUM_DB']->query_select_value('f_posts', 'p_topic_id', ['id' => intval($post['id'])])]));
            }
            $post_action = post_param_string('handle_post__' . strval($post['id']), '');
            switch ($post_action) {
                case 'delete_post':
                    array_push($punitive_messages, do_lang('PUNITIVE_DELETE_POST', strval($p_title), null, null, null, false));
                    break;
                case 'delete_post_and_following':
                    array_push($punitive_messages, do_lang('PUNITIVE_DELETE_POST_AND_FOLLOWING', strval($p_title), null, null, null, false));
                    break;
            }
        }
    }

    // Content deletion
    if (addon_installed('commandr')) {
        $content = find_member_content($member_id);
        foreach ($content as $content_details) {
            list($content_type_title, $content_type, $content_id, $content_title, $content_url, $content_timestamp, $auto_selected) = $content_details;

            if (post_param_integer('delete__' . $content_type . '_' . $content_id, 0) == 1) {
                require_all_lang();
                require_code('resource_fs');
                $object_fs = get_resource_commandr_fs_object($content_type);
                if ($object_fs !== null) {
                    $filename = $object_fs->convert_id_to_filename($content_type, $content_id);
                    if ($filename !== null) {
                        array_push($punitive_messages, do_lang('PUNITIVE_DELETE_CONTENT', strval(do_lang($content_type_title)), strval($content_title), null, null, false));
                    }
                }
            }
        }
    }

    // Charge points
    if (addon_installed('points')) {
        if (has_actual_page_access(get_member(), 'admin_points')) {
            if ($charged_points != 0) {
                array_push($punitive_messages, do_lang('PUNITIVE_CHARGE_POINTS', strval($charged_points), null, null, null, false));
            }
        }
    }

    // Actualise message text
    $message = '';
    if (count($punitive_messages) > 0) {
        $message = '[title="4" base="2"]' . do_lang('PUNITIVE_HEADER', null, null, null, null, false) . '[/title]';
        $message .= do_lang('PUNITIVE_HEADER_DESCRIPTION', null, null, null, null, false) . "\n";
        foreach ($punitive_messages as $value) {
            $message .= ' - ' . $value . "\n";
        }
    }

    return $message;
}

/**
* Find a member's content.
*
* @param  MEMBER $member_id Member ID
* @param  integer $max Maximum results
* @return array List of content rows
*/
function find_member_content(int $member_id, int $max = 30) : array
{
    if (!has_privilege(get_member(), 'delete_highrange_content')) {
        return [];
    }

    require_code('content');

    $content = [];

    if (is_guest($member_id)) {
        return $content;
    }

    // All content using hooks...

    $content_types = [];
    $hooks = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
    foreach ($hooks as $hook => $ob) {
        $cma_info = $ob->info();
        if (
            (!in_array($hook, ['member', 'topic', 'post'/*topics and posts handled with special support elsewhere*/])) &&
            ($cma_info['table'] !== null) &&
            ($cma_info['submitter_field'] !== null) &&
            ($cma_info['id_field'] !== null) &&
            ($cma_info['add_time_field'] !== null) &&
            ($cma_info['commandr_filesystem_hook'] !== null)
        ) {
            $content_types[] = $hook;
        }
    }

    require_code('content');
    list($rows) = content_rows_for_multi_type($content_types, null, '', '', 'recent DESC', 0, $max);

    foreach ($rows as $row) {
        $ob = get_content_object($row['content_type']);

        $content_id = $ob->get_id($row);
        $content_title = $ob->get_title($row);
        $content_url = $ob->get_view_url($row);
        $content_add_time = $ob->get_add_time($row);

        $content[] = [
            $ob->get_content_type_label($row),
            $hook,
            $content_id,
            $content_title,
            $content_url,
            $content_add_time,
            false
        ];
    }

    return $content;
}
