<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    cns_warnings
 */

/**
 * Find a member's content.
 *
 * @param  MEMBER $member_id Member ID
 * @param  ?integer $days Only consider content posted in the last specified days (null: do not consider)
 * @param  ?integer $max Maximum results (null: no maximum; you should specify $days in this case)
 * @return array List of content rows
 */
function find_member_content(int $member_id, ?int $days = null, ?int $max = 30) : array
{
    if (!has_privilege(get_member(), 'delete_highrange_content')) {
        return [];
    }

    require_code('content');

    $content = [];

    if (is_guest($member_id)) {
        return $content;
    }

    // All content using hooks...

    $content_types = [];
    $hooks = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
    foreach ($hooks as $hook => $ob) {
        $cma_info = $ob->info();
        if (
            (!in_array($hook, ['member', 'topic', 'post'/*topics and posts handled with special support elsewhere*/])) &&
            ($cma_info['table'] !== null) &&
            ($cma_info['submitter_field'] !== null) &&
            ($cma_info['id_field'] !== null) &&
            ($cma_info['add_time_field'] !== null) &&
            ($cma_info['commandr_filesystem_hook'] !== null)
        ) {
            $content_types[] = $hook;
        }
    }

    require_code('content');
    list($rows) = content_rows_for_multi_type($content_types, $days, '', '', 'recent DESC', 0, $max * 10);

    foreach ($rows as $row) {
        $ob = get_content_object($row['content_type']);

        $submitter = $ob->get_submitter($row);
        if (($submitter === null) || ($submitter != $member_id)) {
            continue;
        }

        $content_id = $ob->get_id($row);
        $content_title = $ob->get_title($row);
        $content_url = $ob->get_view_url($row);
        $content_add_time = $ob->get_add_time($row);

        $content[] = [
            $ob->get_content_type_label($row),
            $row['content_type'],
            $content_id,
            $content_title,
            $content_url,
            $content_add_time,
            false
        ];

        if (count($content) >= $max) {
            break;
        }
    }

    return $content;
}

/**
 * Script for loading presets from saved warnings.
 */
function warnings_script()
{
    if (!addon_installed('cns_warnings')) {
        warn_exit(do_lang_tempcode('MISSING_ADDON', escape_html('cns_warnings')));
    }

    if (get_forum_type() != 'cns') {
        warn_exit(do_lang_tempcode('NO_CNS'));
    }

    cns_require_all_forum_stuff();

    require_lang('cns_warnings');

    if (!cns_may_warn_members()) {
        access_denied('PRIVILEGE', 'warn_members');
    }

    $type = get_param_string('type');

    if ($type == 'delete') { // Delete a saved warning
        $_title = post_param_string('title');
        $GLOBALS['FORUM_DB']->query_delete('f_saved_warnings', ['s_title' => $_title], '', 1);
        $content = paragraph(do_lang_tempcode('SUCCESS'));
        $echo = do_template('STANDALONE_HTML_WRAP', ['_GUID' => 'dc97492788a5049e697a296ca10a0390', 'TITLE' => do_lang_tempcode('DELETE_SAVED_WARNING'), 'POPUP' => true, 'CONTENT' => $content]);
        $echo->evaluate_echo();
        return;
    }

    // Show list of saved warnings
    // ---------------------------

    require_javascript('cns_warnings');

    $content = new Tempcode();
    $rows = $GLOBALS['FORUM_DB']->query_select('f_saved_warnings', ['*'], [], 'ORDER BY s_title');
    $keep = symbol_tempcode('KEEP');
    $delete_url = find_script('warnings_browse') . '?type=delete' . $keep->evaluate();
    foreach ($rows as $myrow) {
        $content->attach(do_template('CNS_SAVED_WARNING', [
            '_GUID' => '537a5e28bfdc3f2d2cb6c06b0a939b51',
            'MESSAGE' => $myrow['s_message'],
            'MESSAGE_HTML' => comcode_to_tempcode($myrow['s_message'], $GLOBALS['FORUM_DRIVER']->get_guest_id()),
            'EXPLANATION' => $myrow['s_explanation'],
            'TITLE' => $myrow['s_title'],
            'DELETE_URL' => $delete_url,
        ]));
    }
    if ($content->is_empty()) {
        $content = paragraph(do_lang_tempcode('NO_ENTRIES'), 'rfdsfsdf3t45', 'nothing-here');
    }

    $echo = do_template('STANDALONE_HTML_WRAP', ['_GUID' => '90c86490760cee23a8d5b8a5d14122e9', 'TITLE' => do_lang_tempcode('CHOOSE_SAVED_WARNING'), 'POPUP' => true, 'NOINDEX' => true, 'CONTENT' => $content]);
    $echo->evaluate_echo();
}

/**
 * Whether a certain member may give formal warnings to other members.
 *
 * @param  ?MEMBER $member_id The member (null: current member)
 * @return boolean Answer
 */
function cns_may_warn_members(?int $member_id = null) : bool
{
    if ($member_id === null) {
        $member_id = get_member();
    }

    return has_privilege($member_id, 'warn_members');
}

/**
 * Get all the warning and warnings_punitive rows for a certain member.
 *
 * @param  MEMBER $member_id The member
 * @return array The warning rows
 */
function cns_get_warnings(int $member_id) : array
{
    if (!addon_installed('cns_warnings')) {
        return [];
    }

    // Get warnings
    $warnings = $GLOBALS['FORUM_DB']->query_select('f_warnings', ['*'], ['w_member_id' => $member_id, 'w_is_warning' => 1], 'ORDER BY w_time');

    // Load in punitive actions via the 'punitive' key of each warning
    foreach ($warnings as $i => $warning) {
        $warnings[$i]['punitive'] = $GLOBALS['FORUM_DB']->query_select('f_warnings_punitive', ['*'], ['p_warning_id' => $warning['id']], '');
    }

    return $warnings;
}
