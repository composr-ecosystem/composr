<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_cns
 */

/**
 * Get a count of members in a group.
 *
 * @param  GROUP $group_id The ID of the group
 * @param  boolean $include_primaries Whether to include those in the group as a primary member
 * @param  boolean $non_validated Whether to include those applied to join the group, but not validated in
 * @param  boolean $include_secondaries Whether to include those in the group as a secondary member
 * @param  boolean $include_nonvalidated_members Whether to include those members who are not validated as site members at all yet (parameter currently ignored)
 * @return integer The count
 */
function cns_get_group_members_raw_count(int $group_id, bool $include_primaries = true, bool $non_validated = false, bool $include_secondaries = true, bool $include_nonvalidated_members = true) : int
{
    // Find groups for conventional members
    $a = $GLOBALS['FORUM_DB']->query_select_value('f_group_members', 'COUNT(*)', ['gm_group_id' => $group_id]);
    if ($non_validated) {
        $a += $GLOBALS['FORUM_DB']->query_select_value('f_group_approvals', 'COUNT(*)', ['ga_new_group_id' => $group_id, 'ga_status' => 0]);
    }
    if ($include_primaries) {
        $map = ['m_primary_group' => $group_id];
        if (!$include_nonvalidated_members) {
            //$map['m_validated_confirm_code']=''; Actually we don't want to consider this here
            $map['m_validated'] = 1;
        }
        $b = $GLOBALS['FORUM_DB']->query_select_value('f_members', 'COUNT(*)', $map);
    } else {
        $b = 0;
    }

    // Now implicit usergroup hooks
    if ($include_secondaries) {
        $hooks = find_all_hook_obs('systems', 'cns_implicit_usergroups', 'Hook_implicit_usergroups_');
        foreach ($hooks as $ob) {
            if (in_array($group_id, $ob->get_bound_group_ids())) {
                $c = $ob->get_member_list_count($group_id);
                if ($c !== null) {
                    $a += $c;
                }
            }
        }
    }

    // Find for LDAP members
    global $LDAP_CONNECTION;
    if ($LDAP_CONNECTION !== null) {
        $members = [];
        cns_get_group_members_raw_ldap($members, $group_id, $include_primaries, $non_validated, $include_secondaries);
        $c = count($members);
    } else {
        $c = 0;
    }

    // Now for probation
    $d = 0;
    if ($include_secondaries) {
        $probation_group = get_probation_group();
        if ($probation_group === $group_id) {
            $d = $GLOBALS['FORUM_DB']->query_value_if_there('SELECT COUNT(*) FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members WHERE m_on_probation_until>' . strval(time()));
        }
    }

    return $a + $b + $c + $d;
}

/**
 * Get a list of members in a group (or more full details if $non_validated is true).
 *
 * @param  GROUP $group_id The ID of the group
 * @param  boolean $include_primaries Whether to include those in the as a primary member
 * @param  boolean $non_validated Whether to include those applied to join the group, but not validated in (also causes it to return maps that contain this info)
 * @param  boolean $include_secondaries Whether to include those in the as a secondary member
 * @param  boolean $include_nonvalidated_members Whether to include those members who are not validated as site members at all yet (parameter currently ignored)
 * @param  ?integer $max Return up to this many entries for primary members and this many entries for secondary members and all LDAP members (null: no limit, only use no limit if querying very restricted usergroups!)
 * @param  integer $start Return primary members after this offset and secondary members after this offset
 * @return array The list
 */
function cns_get_group_members_raw(int $group_id, bool $include_primaries = true, bool $non_validated = false, bool $include_secondaries = true, bool $include_nonvalidated_members = true, ?int $max = null, int $start = 0) : array
{
    // Find groups for conventional members
    $members = [];
    if ($include_secondaries) {
        $_members = $GLOBALS['FORUM_DB']->query_select('f_group_members', ['gm_member_id'], ['gm_group_id' => $group_id], 'ORDER BY gm_member_id', $max, $start);
        foreach ($_members as $member) {
            $members[$member['gm_member_id']] = $non_validated ? ($member + ['implicit' => false, 'validated' => true]) : $member['gm_member_id'];
        }

        if ($non_validated) {
            $_members = $GLOBALS['FORUM_DB']->query_select('f_group_approvals', ['ga_member_id AS gm_member_id'], ['ga_new_group_id' => $group_id, 'ga_status' => 0], 'ORDER BY ga_member_id', $max, $start);
            foreach ($_members as $member) {
                $members[$member['gm_member_id']] = $non_validated ? ($member + ['implicit' => false, 'validated' => false]) : $member['gm_member_id'];
            }
        }
    }

    if ($include_primaries) {
        $map = ['m_primary_group' => $group_id];
        if (!$include_nonvalidated_members) {
            //$map['m_validated_confirm_code']=''; Actually we don't want to consider this here
            $map['m_validated'] = 1;
        }
        $_members2 = $GLOBALS['FORUM_DB']->query_select('f_members', ['id', 'm_username'], $map, '', $max, $start);
        foreach ($_members2 as $member) {
            $members[$member['id']] = $non_validated ? ['gm_member_id' => $member['id'], 'validated' => true, 'm_username' => $member['m_username'], 'implicit' => false] : $member['id'];
        }
    }

    // Now implicit usergroup hooks
    if ($include_secondaries) {
        $hooks = find_all_hook_obs('systems', 'cns_implicit_usergroups', 'Hook_implicit_usergroups_');
        foreach ($hooks as $ob) {
            if (in_array($group_id, $ob->get_bound_group_ids())) {
                $c = $ob->get_member_list($group_id, $max, $start);
                if ($c !== null) {
                    foreach ($c as $member_id => $member_row) {
                        $members[$member_id] = $non_validated ? ['gm_member_id' => $member_id, 'validated' => true, 'm_username' => $member_row['m_username'], 'implicit' => true] : $member_id;
                    }
                }
            }
        }
    }

    // Find for LDAP members
    global $LDAP_CONNECTION;
    if ($LDAP_CONNECTION !== null) {
        cns_get_group_members_raw_ldap($members, $group_id, $include_primaries, $non_validated, $include_secondaries);
    }

    // Now for probation
    if ($include_secondaries) {
        $probation_group = get_probation_group();
        if ($probation_group === $group_id) {
            $d = $GLOBALS['FORUM_DB']->query('SELECT id,m_username FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members WHERE m_on_probation_until>' . strval(time()), $max);
            foreach ($d as $member_row) {
                $member_id = $member_row['id'];
                $members[] = $non_validated ? ['gm_member_id' => $member_id, 'validated' => true, 'm_username' => $member_row['m_username'], 'implicit' => false] : $member_id;
            }
        }
    }

    return array_values($members);
}

/**
 * Get the usergroups in the rank ladder.
 *
 * @return array Rank ladder groups
 */
function get_default_rank_ladder_groups() : array
{
    $groups = [];
    $group = get_first_default_group();
    do {
        $groups[] = $group;
        $group = $GLOBALS['FORUM_DB']->query_select_value('f_groups', 'g_promotion_target', ['id' => $group]);
    } while ($group !== null);
    return $groups;
}

/**
 * Get a list of groups we should not delete.
 *
 * @param  boolean $only_preserve_first_admin_groups Whether to only preserve the first admin/moderator group
 * @return array Preserved groups
 */
function get_all_preserved_groups(bool $only_preserve_first_admin_groups = false) : array
{
    require_code('cns_groups');
    $all_groups_to_preserve = [];
    $all_groups_to_preserve[] = db_get_first_id();
    $probation_group = get_probation_group();
    if ($probation_group !== null) {
        $all_groups_to_preserve[] = $probation_group;
    }
    $super_admin_groups = $GLOBALS['FORUM_DRIVER']->get_super_admin_groups();
    $moderator_groups = $GLOBALS['FORUM_DRIVER']->get_moderator_groups();
    if ($only_preserve_first_admin_groups) {
        if (array_key_exists(0, $super_admin_groups)) {
            $all_groups_to_preserve[] = $super_admin_groups[0];
        }
        if (array_key_exists(0, $moderator_groups)) {
            $all_groups_to_preserve[] = $moderator_groups[0];
        }
    } else {
        $all_groups_to_preserve = array_merge($all_groups_to_preserve, $super_admin_groups);
        $all_groups_to_preserve = array_merge($all_groups_to_preserve, $moderator_groups);
    }
    $all_groups_to_preserve = array_merge($all_groups_to_preserve, get_default_rank_ladder_groups());
    return $all_groups_to_preserve;
}
