<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_cns
 */

/*EXTRA FUNCTIONS: simplexml_.**/

/*
    Each control could/should have the following private functions in the Parental_controls_loader class:
    - pcv__* (required): A validation function to validate the XML for this specific control (global parameters are already checked) and to return parsed data
    - pcc__* (required): The execution function to process the control (base age and region filters have already been applied)
    - pcppp__* (optional but recommended): Generate 'positive' Privacy Policy entries for this control based on the configuration
    - pcppg__* (optional but recommended): Generate 'general' Privacy Policy entries for this control based on the configuration
*/

/**
 * Standard initialisation for parental controls code.
 *
 * @ignore
 */
function init__cns_parental_controls()
{
    require_lang('cns');
}

/**
 * Initialise the parental control settings (or simply return the class if already initialised).
 *
 * @param  boolean $show_errors Whether to attach validation errors as messages
 * @return object The parental control class
 */
function load_parental_control_settings(bool $show_errors = false) : object
{
    static $parental_controls = [];
    if (!isset($parental_controls[$show_errors])) {
        $parental_controls[$show_errors] = new Parental_controls_loader($show_errors);
    }

    return $parental_controls[$show_errors];
}

/**
 * Parental control settings loader.
 *
 * @package core_cns
 */
class Parental_controls_loader
{
    private $options = []; // Base options (parsed)
    private $show_errors = false; // Whether to show parse errors
    private $xml_path = null; // The path to the XML file we are using
    private $controls = []; // Array of valid parental controls (parsed)
    private $_controls = []; // Array of XML controls (not parsed)

    /**
     * Upon construction of the class, parse and validate the XML file.
     *
     * @param  boolean $show_errors Whether to attach validation errors as messages (true: will also bypass persistent cache)
     */
    public function __construct(bool $show_errors = false)
    {
        require_code('global3');

        $this->show_errors = $show_errors;

        // Determine which XML file we will be loading, and the cache identifier based on the files' modification times
        $cache_id = [];
        $full_path_custom = get_custom_file_base() . '/data_custom/xml_config/parental_controls.xml';
        $full_path_orig = get_custom_file_base() . '/data/xml_config/parental_controls.xml';
        if (is_file($full_path_orig)) {
            if (support_smart_decaching(true)) {
                $cache_id['original'] = filemtime($full_path_orig);
            }
            $this->xml_path = $full_path_orig;
        }
        if (is_file($full_path_custom)) {
            if (support_smart_decaching(true)) {
                $cache_id['custom'] = filemtime($full_path_custom);
            }
            $this->xml_path = $full_path_custom;
        }
        if ($this->xml_path === null) { // Should never happen; this means both the original and custom XML files do not exist
            warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('59a6daa4e8745ff4a1cfaa253c3d38cc')));
        }

        // Try cache (but only if not showing errors)
        if (!$show_errors) {
            require_code('caches');
            $cache = get_cache_entry('cns_parental_controls', md5(serialize($cache_id)), CACHE_AGAINST_NOTHING_SPECIAL, (60 * 60));
            if ($cache !== null) {
                $this->options = $cache['options'];
                $this->controls = $cache['controls'];
                return;
            }
        }

        require_code('global4');

        // Begin parsing the XML file
        $ob = false;
        $contents = null;

        $contents = cms_file_get_contents_safe($this->xml_path);
        $ob = @simplexml_load_string($contents); // NB: Try/catch does not work
        if (!$ob) {
            // Remove the custom file to prevent site lock-out
            @unlink($full_path_custom . '.bak');
            @copy($full_path_custom, $full_path_custom . '.bak');
            @unlink($full_path_custom);

            if ($show_errors) {
                warn_exit(do_lang_tempcode('PARENTAL_CONTROLS_INVALID_XML'));
            } else { // Critical, so we must do an internal error at the very least
                warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('d41668e69ab95cb399313d5da6b30c79')));
            }
        }

        // Attributes on the primary XML tag are options; parse those
        $attributes = $ob->attributes();
        foreach ($attributes as $key => $attribute) {
            $this->options[$key] = (string)$attribute[0];
        }

        // Validation and loading
        foreach ($ob->control as $control) {
            $c_name = (string)$control['name'];
            $c_name = filter_naughty_harsh($c_name, true);

            // Check for required methods on the control, and skip / error if they do not exist
            if (!method_exists($this, 'pcv__' . $c_name)) {
                if ($show_errors) {
                    attach_message(do_lang_tempcode('PARENTAL_CONTROLS_INVALID_CONTROL', escape_html($c_name)), 'warn');
                }
                continue;
            }
            if (!method_exists($this, 'pcc__' . $c_name)) {
                if ($show_errors) {
                    attach_message(do_lang_tempcode('PARENTAL_CONTROLS_INVALID_CONTROL', escape_html($c_name)), 'warn');
                }
                continue;
            }

            $guid = generate_guid();

            // Parse global attributes on all controls
            $this->_controls[$guid] = $control;
            $this->controls[$guid] = [
                'name' => (string)$control['name'],
                'age_threshold' => (string)$control['age_threshold'],
                'regions' => (string)$control['regions'],
            ];

            // Age threshold is required on all controls; skip controls without it
            if (!is_numeric($this->controls[$guid]['age_threshold'])) {
                if ($show_errors) {
                    attach_message(do_lang_tempcode('PARENTAL_CONTROLS_NO_AGE', escape_html($c_name)), 'warn');
                }
                unset($this->controls[$guid]);
                continue;
            }

            // Send the rest of the processing to the control's validation function
            call_user_func_array([$this, 'pcv__' . $c_name], [$guid]); // Should be parsing $this->_controls[$guid] into $this->controls[$guid]
        }

        // Once everything is parsed, we do not need the XML controls anymore
        unset($this->_controls);

        // Cache the data
        require_code('caches2');
        set_cache_entry('cns_parental_controls', (60 * 60), md5(serialize($cache_id)), ['options' => $this->options, 'controls' => $this->controls], CACHE_AGAINST_NOTHING_SPECIAL);
    }

    /**
     * Find out whether the parental control configuration has defined a given control.
     *
     * @param  ID_TEXT $name The name of the control to check
     * @return boolean Whether this control has been defined at least once in the parental controls configuration
     */
    public function has_control(string $name) : bool
    {
        foreach ($this->controls as $guid => $control) {
            $c_name = $control['name'];
            if ($c_name === $name) {
                return true;
            }
        }

        return false;
    }

    /**
     * Get an attribute value on the main parental_controls tag.
     *
     * @param  string $name The name of the option
     * @return ?string The value of the option (null: option not found)
     */
    public function get_attribute(string $name) : ?string
    {
        return isset($this->options[$name]) ? $this->options[$name] : null;
    }

    /**
     * Run a parental control.
     *
     * @param  ID_TEXT $name The control name to run
     * @param  integer $age The age of the member for which we are checking
     * @param  ?ID_TEXT $region The ISO code of the region in which the member is located (null: do not check on region-specific controls)
     * @param  array $params Additional parameters to pass to the control function
     * @return ?array Map of information from the control if this member is restricted (null: this member is not restricted by the given parental control)
     */
    public function run(string $name, int $age, ?string $region = null, array $params = []) : ?array
    {
        require_code('locations');

        $f_name = filter_naughty_harsh($name, true);

        $matched_region = false;

        // Determine which parental controls might apply to this member
        foreach ($this->controls as $guid => $control) {
            $c_name = $control['name'];
            $c_age_threshold = intval($control['age_threshold']);
            $_c_regions = $control['regions'];
            $c_regions = [];
            if (trim($_c_regions) != '') {
                $c_regions = explode(',', trim($_c_regions));
            }

            if ($c_name != $f_name) {
                continue;
            }

            if (count($c_regions) > 0) { // Region-specific controls
                // Skip region-specific controls if no region passed
                if ($region === null) {
                    continue;
                }

                // If we already matched against a region, skip
                if ($matched_region === true) {
                    continue;
                }

                // The provided region does not match any of the given regions, so skip
                if (!is_location_within($region, $c_regions)) {
                    continue;
                }

                // Log that we matched against a region (we will not match against any other region-specific controls)
                $matched_region = true;
            }

            // Skip if we are old enough that this control does not apply
            if ($age >= $c_age_threshold) {
                continue;
            }

            // Run the control; if it does not return false, it applies to this member
            $value = call_user_func_array([$this, 'pcc__' . $f_name], [$guid, $age, $region, $params]);
            if ($value !== false) {
                return $value;
            }
        }

        // None of them applied for this member
        return null;
    }

    /**
     * Generate 'positive' items for the automatic Privacy Policy with the given control name.
     *
     * @param  ID_TEXT $name The name of the control for which to generate info
     * @return array Array of privacy policy maps
     */
    public function generate_privacy_policy_positive(string $name) : array
    {
        if (!method_exists($this, 'pcppp__' . $name)) {
            return [];
        }

        $value = call_user_func([$this, 'pcppp__' . $name]);
        if (is_array($value)) {
            return $value;
        }

        return [];
    }

    /**
     * Generate 'general' items for the automatic Privacy Policy with the given control name.
     *
     * @param  ID_TEXT $name The name of the control for which to generate info
     * @return array Array of privacy policy maps
     */
    public function generate_privacy_policy_general(string $name) : array
    {
        if (!method_exists($this, 'pcppg__' . $name)) {
            return [];
        }

        $value = call_user_func([$this, 'pcppg__' . $name]);
        if (is_array($value)) {
            return $value;
        }

        return [];
    }

    /**
     * Generate general 'general' Privacy Policy information.
     *
     * @return array Array of privacy policy maps
     */
    private function pcppg__root() : array
    {
        require_lang('cns');

        $ret = [];

        if ($this->get_attribute('require_dob') !== null) {
            $ret[] = [
                'heading' => do_lang('PARENTAL_CONTROLS'),
                'action' => do_lang_tempcode('PRIVACY_PARENTAL_CONTROLS__REQUIRE_DOB_ACTION'),
                'reason' => do_lang_tempcode('PRIVACY_PARENTAL_CONTROLS__REASON'),
            ];
        }

        if ($this->get_attribute('require_timezone') !== null) {
            $ret[] = [
                'heading' => do_lang('PARENTAL_CONTROLS'),
                'action' => do_lang_tempcode('PRIVACY_PARENTAL_CONTROLS__REQUIRE_TIMEZONE_ACTION'),
                'reason' => do_lang_tempcode('PRIVACY_PARENTAL_CONTROLS__REASON'),
            ];
        }

        if ($this->get_attribute('require_region') !== null) {
            $ret[] = [
                'heading' => do_lang('PARENTAL_CONTROLS'),
                'action' => do_lang_tempcode('PRIVACY_PARENTAL_CONTROLS__REQUIRE_REGION_ACTION'),
                'reason' => do_lang_tempcode('PRIVACY_PARENTAL_CONTROLS__REASON'),
            ];
        }

        return $ret;
    }

    /**
     * Validate / parse the parental_consent control.
     *
     * @param  ID_TEXT $guid The GUID of the control to parse
     */
    private function pcv__parental_consent(string $guid)
    {
        if (!isset($this->_controls[$guid])) {
            return;
        }
        if (!isset($this->controls[$guid]) || ($this->controls[$guid]['name'] != 'parental_consent')) {
            return;
        }

        // Parse optional body tags
        $this->controls[$guid]['mail'] = (string)$this->_controls[$guid]->mail;
        $this->controls[$guid]['privacy_policy'] = (string)$this->_controls[$guid]->privacy_policy;
    }

    /**
     * Run the parental_consent control.
     * If $params contains member_id, we will also check consent status / send e-mail if necessary, and log them out of they do not have consent.
     *
     * @param  ID_TEXT $guid The GUID of the control to run
     * @param  integer $age The age of the member
     * @param  ?ID_TEXT $region The ISO code of the region in which the member is located (null: do not check on region-specific controls)
     * @param  array $params Array of additional parameters
     * @return ~array Details about the parental control restriction (false: member is not subject to restriction based on criteria)
     */
    private function pcc__parental_consent(string $guid, int $age, ?string $region, array $params)
    {
        if (!isset($this->controls[$guid]) || ($this->controls[$guid]['name'] != 'parental_consent')) {
            return false;
        }

        $body_content = $this->controls[$guid]['mail'];
        $ret = ['extra_text' => trim($body_content)];

        // Not checking on specific member, so we automatically assume they are subject to restriction
        if (!isset($params['member_id'])) {
            return $ret;
        }

        $member_id = $params['member_id'];

        $consent_status = $GLOBALS['CNS_DRIVER']->get_member_row_field($member_id, 'm_parental_consent');
        if ($consent_status === 2) { // The member already has parental consent to use the site
            return false;
        } elseif ($consent_status === 1) { // We already sent out a consent e-mail
            // Log the member out
            require_code('users_active_actions');
            delete_session_by_member_id($member_id);

            return $ret;
        }

        require_code('lang');
        require_code('cns_members');
        require_code('cns_members_action2');
        require_code('fields');
        require_code('mail');
        require_lang('cns');

        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        $email_address = $GLOBALS['FORUM_DRIVER']->get_member_email_address($member_id);
        $language = get_lang($member_id);

        // Get fields for which the member filled out
        $custom_fields = cns_get_all_custom_fields_match(
            null, // groups
            null, // public view
            null, // owner view
            null, // owner set
            null, // required
            null, // show in posts
            null, // show in post previews
            null, // special start
            true // show on join form
        );
        $actual_custom_fields = cns_read_in_custom_fields($custom_fields);
        $fields_done = [];
        $fields_done[] = ['LABEL' => do_lang('USERNAME'), 'VALUE' => make_string_tempcode(escape_html($username))];
        foreach ($custom_fields as $custom_field) {
            if (isset($actual_custom_fields[$custom_field['id']])) {
                $fields_ob = get_fields_hook($custom_field['cf_type']);
                $ev = $actual_custom_fields[$custom_field['id']];
                $rendered = $fields_ob->render_field_value($custom_field, $ev);
                $fields_done[] = ['LABEL' => $custom_field['trans_name'], 'VALUE' => escape_html_in_comcode(is_object($rendered) ? $rendered->evaluate($language) : $rendered)];
            }
        }

        // URLs
        $privacy_policy_url = build_url(['page' => 'privacy'], '_SEARCH', [], false, false, true);
        $rules_url = build_url(['page' => 'rules'], '_SEARCH', [], false, false, true);

        // Construct and send the message
        $message = do_template('PARENTAL_CONSENT_MAIL', [
            '_GUID' => 'a35c7a16288baec9ec6260d9d7195465',
            'FAX' => get_option('privacy_fax'),
            'POSTAL_ADDRESS' => get_option('privacy_postal_address'),
            'EMAIL_ADDRESS' => get_option('staff_address'),
            'FIELDS_DONE' => $fields_done,
            'PRIVACY_POLICY_URL' => $privacy_policy_url,
            'RULES_URL' => $rules_url,
            'EXTRA_TEXT' => $body_content,
        ], $language, false, null, '.txt', 'text');

        dispatch_mail(do_lang('PARENTAL_CONSENT_JOIN_SUBJECT', $username, get_site_name(), null, $language), $message->evaluate($language), '', [$email_address], $username);

        // Update the member settings to indicate we sent the notification
        $GLOBALS['FORUM_DB']->query_update('f_members', ['m_parental_consent' => 1], ['id' => $member_id], '', 1);
        unset($GLOBALS['FORUM_DRIVER']->MEMBER_ROWS_CACHED[$member_id]);

        // Log the member out
        require_code('users_active_actions');
        delete_session_by_member_id($member_id);

        return $ret;
    }

    /**
     * Return a positive Privacy Policy entry for the parental_consent configuration.
     *
     * @return array Array of privacy policy maps
     */
    private function pcppp__parental_consent() : array
    {
        if (!$this->has_control('parental_consent')) {
            return [];
        }

        require_code('comcode');
        require_code('locations');
        require_lang('cns');

        $ret = [
            [
                'heading' => do_lang('PRIVACY_PARENTAL_CONSENT'),
                'explanation' => do_lang_tempcode('DESCRIPTION_PRIVACY_PARENTAL_CONSENT'),
            ]
        ];

        foreach ($this->controls as $guid => $control) {
            $c_name = $control['name'];
            if ($c_name != 'parental_consent') {
                continue;
            }

            $c_age_threshold = $control['age_threshold'];
            $_body_content = $control['privacy_policy'];
            $body_content = comcode_to_tempcode($_body_content, null, true);

            $_c_regions = $control['regions'];
            $c_regions = [];
            if (trim($_c_regions) != '') {
                $c_regions = explode(',', trim($_c_regions));
            }

            if (count($c_regions) == 0) {
                $ret[] = [
                    'heading' => do_lang('PRIVACY_PARENTAL_CONSENT'),
                    'explanation' => do_lang_tempcode('PRIVACY_PARENTAL_CONSENT__DEFAULT', escape_html(strval($c_age_threshold)), $body_content),
                ];
            } else {
                // Get human-readable locations from regions
                $locations = [];
                foreach ($c_regions as $region) {
                    $location = '';
                    $region_bits = explode('-', $region, 2);
                    $country_name = find_country_name_from_iso($region_bits[0]);
                    if ($country_name === null) {
                        continue;
                    }
                    $location = $country_name;

                    if (array_key_exists(1, $region_bits)) {
                        $region_name = find_region_name_from_iso($region);
                        if ($region_name !== null) {
                            $location .= ' >> ' . $region_name;
                        }
                    }

                    $locations[] = $location;
                }

                $ret[] = [
                    'heading' => do_lang('PRIVACY_PARENTAL_CONSENT'),
                    'explanation' => do_lang_tempcode('PRIVACY_PARENTAL_CONSENT__REGIONAL', escape_html(strval($c_age_threshold)), escape_html(implode(', ', $locations)), $body_content),
                ];
            }
        }

        return $ret;
    }

    /**
     * Validate / parse the lockout control.
     *
     * @param  ID_TEXT $guid The GUID of the control to parse
     */
    private function pcv__lockout(string $guid)
    {
        if (!isset($this->_controls[$guid])) {
            return;
        }
        if (!isset($this->controls[$guid]) || ($this->controls[$guid]['name'] != 'lockout')) {
            return;
        }

        // Parse optional body tags
        $this->controls[$guid]['message'] = (string)$this->_controls[$guid]->message;
        $this->controls[$guid]['privacy_policy'] = (string)$this->_controls[$guid]->privacy_policy;
    }

    /**
     * Run the lockout control.
     * If $params contains member_id, we will also log that member out if they are to be locked out.
     *
     * @param  ID_TEXT $guid The GUID of the control to run
     * @param  integer $age The age of the member
     * @param  ?ID_TEXT $region The ISO code of the region in which the member is located (null: do not check on region-specific controls)
     * @param  array $params Array of additional parameters
     * @return ~array Details about the parental control restriction (false: member is not subject to restriction based on criteria)
     */
    private function pcc__lockout(string $guid, int $age, ?string $region, array $params)
    {
        if (!isset($this->controls[$guid]) || ($this->controls[$guid]['name'] != 'lockout')) {
            return false;
        }

        if (isset($params['member_id'])) {
            $member_id = $params['member_id'];
        } else {
            $member_id = get_member();
        }

        require_code('comcode');

        $message = comcode_to_tempcode(trim($this->controls[$guid]['message']), null, true);
        if ($message->is_empty()) {
            require_lang('cns');
            require_code('crypt');
            $staff_address = obfuscate_email_address(get_option('staff_address'));
            $message = do_lang_tempcode('PARENTAL_CONTROLS_LOCKOUT_DEFAULT_MESSAGE', escape_html(strval($this->controls[$guid]['age_threshold'])), protect_from_escaping($staff_address));
        }

        // Log the member out if one was specified
        if (isset($params['member_id'])) {
            require_code('users_active_actions');
            delete_session_by_member_id($member_id);
        }

        return ['message' => $message];
    }

    /**
     * Return a positive Privacy Policy entry for the lockout configuration.
     *
     * @return array Array of privacy policy maps
     */
    private function pcppp__lockout() : array
    {
        if (!$this->has_control('lockout')) {
            return [];
        }

        require_code('comcode');
        require_code('locations');
        require_lang('cns');

        $ret = [
            [
                'heading' => do_lang('PARENTAL_CONTROLS_LOCKOUT'),
                'explanation' => do_lang_tempcode('DESCRIPTION_PARENTAL_CONTROLS_LOCKOUT'),
            ]
        ];

        foreach ($this->controls as $guid => $control) {
            $c_name = $control['name'];
            if ($c_name != 'lockout') {
                continue;
            }

            $c_age_threshold = $control['age_threshold'];
            $_body_content = $control['privacy_policy'];
            $body_content = comcode_to_tempcode($_body_content, null, true);

            $_c_regions = $control['regions'];
            $c_regions = [];
            if (trim($_c_regions) != '') {
                $c_regions = explode(',', trim($_c_regions));
            }

            if (count($c_regions) == 0) {
                $ret[] = [
                    'heading' => do_lang('PARENTAL_CONTROLS_LOCKOUT'),
                    'explanation' => do_lang_tempcode('PRIVACY_PARENTAL_LOCKOUT__DEFAULT', escape_html(strval($c_age_threshold)), $body_content),
                ];
            } else {
                // Get human-readable locations from regions
                $locations = [];
                foreach ($c_regions as $region) {
                    $location = '';
                    $region_bits = explode('-', $region, 2);
                    $country_name = find_country_name_from_iso($region_bits[0]);
                    if ($country_name === null) {
                        continue;
                    }
                    $location = $country_name;

                    if (array_key_exists(1, $region_bits)) {
                        $region_name = find_region_name_from_iso($region);
                        if ($region_name !== null) {
                            $location .= ' >> ' . $region_name;
                        }
                    }

                    $locations[] = $location;
                }

                $ret[] = [
                    'heading' => do_lang('PARENTAL_CONTROLS_LOCKOUT'),
                    'explanation' => do_lang_tempcode('PRIVACY_PARENTAL_LOCKOUT__REGIONAL', escape_html(strval($c_age_threshold)), escape_html(implode(', ', $locations)), $body_content),
                ];
            }
        }

        return $ret;
    }
}
