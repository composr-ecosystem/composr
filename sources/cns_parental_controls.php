<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_cns
 */

function init__cns_parental_controls()
{
    require_lang('cns');
}

/**
 * Initialise the parental control settings (or simply return the class if already initialised).
 *
 * @param  boolean $show_errors Whether to attach validation errors as messages
 * @return Parental_controls_loader The parental control class
 */
function load_parental_control_settings(bool $show_errors = false) : object
{
    static $parental_controls = null;
    if ($parental_controls === null) {
        $parental_controls = new Parental_controls_loader($show_errors);
    }

    return $parental_controls;
}

/**
 * Parental control settings loader.
 * NB: Each control should have a private function pcv__name for validation, and pcc__name for execution.
 *
 * @package core_cns
 */
class Parental_controls_loader
{
    private $options = []; // Base options
    private $show_errors; // Whether to show parse errors
    private $xml_path; // The path to the XML file we are using
    private $controls = []; // Array of valid parental controls

    /**
     * Upon construction of the class, parse and validate the XML file.
     *
     * @param  boolean $show_errors Whether to attach validation errors as messages
     */
    public function __construct(bool $show_errors = false)
    {
        $this->show_errors = $show_errors;

        // Determine which XML file we will be loading
        $full_path_custom = get_custom_file_base() . '/data_custom/xml_config/parental_controls.xml';
        $full_path_orig = get_custom_file_base() . '/data/xml_config/parental_controls.xml';
        $this->xml_path = $full_path_custom;
        if (!is_file($full_path_custom)) {
            $this->xml_path = $full_path_orig;
        }

        require_code('global3');
        require_code('global4');

        // Begin parsing the XML file
        $contents = cms_file_get_contents_safe($this->xml_path);
        $ob = simplexml_load_string($contents);
        if ($ob === false) {
            if ($show_errors) {
                warn_exit(do_lang_tempcode('PARENTAL_CONTROLS_INVALID_XML'));
            } else { // Critical, so we must do an internal error at the very least
                warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('d41668e69ab95cb399313d5da6b30c79')));
            }
        }

        // Attributes
        $attributes = $ob->attributes();
        foreach ($attributes as $key => $attribute) {
            $this->options[$key] = (string)$attribute[0];
        }

        // Validation and loading
        foreach ($ob->control as $control) {
            $c_name = (string)$control['name'];
            $c_name = filter_naughty_harsh($c_name, true);

            if (method_exists($this, 'pcc__' . $c_name)) {
                // Age threshold is required on all controls
                if (!is_numeric((string)$control['age_threshold'])) {
                    if ($show_errors) {
                        attach_message(do_lang_tempcode('PARENTAL_CONTROLS_NO_AGE', escape_html($c_name)), 'warn');
                    }
                    continue;
                }

                $guid = generate_guid();
                $this->controls[$guid] = $control;

                if (method_exists($this, 'pcv__' . $c_name)) {
                    call_user_func_array([$this, 'pcv__' . $c_name], [$guid]); // NB: should unset $this->controls[$guid] if not valid
                }
            } else {
                if ($show_errors) {
                    attach_message(do_lang_tempcode('PARENTAL_CONTROLS_INVALID_CONTROL', escape_html($c_name)), 'warn');
                }
            }
        }
    }

    /**
     * Get an option value.
     *
     * @param  string $name The name of the option
     * @return ?string The value of the option (null: option not found)
     */
    public function get_option(string $name) : ?string
    {
        return isset($this->options[$name]) ? $this->options[$name] : null;
    }

    /**
     * Run a parental control.
     *
     * @param  ID_TEXT $name The control name to run
     * @param  integer $age The age of the member for which we are checking
     * @param  ?ID_TEXT $region The ISO code of the region in which the member is located (null: do not check on region-specific controls)
     * @param  array $params Additional parameters to pass to the control function
     * @return ?array Map of information from the control if this member is restricted (null: this member is not restricted by the given parental control)
     */
    public function run(string $name, int $age, ?string $region = null, array $params = []) : ?array
    {
        $f_name = filter_naughty_harsh($name, true);

        $matched_region = false;

        // Determine which parental controls might apply to this member
        foreach ($this->controls as $guid => $control) {
            $c_name = (string)$control['name'];
            $c_age_threshold = (int)$control['age_threshold'];
            $_c_regions = (string)$control['regions'];
            $c_regions = [];
            if (trim($_c_regions) != '') {
                $c_regions = explode(',', trim($_c_regions));
            }

            if ($c_name != $f_name) {
                continue;
            }

            if (count($c_regions) > 0) { // Region-specific controls
                // Skip region-specific controls if no region passed
                if ($region === null) {
                    continue;
                }

                // If we already matched against a region, skip
                if ($matched_region === true) {
                    continue;
                }

                // The provided region does not match any of the given regions, so skip
                if (!in_array($region, $c_regions)) {
                    continue;
                }

                // Log that we matched against a region (we will not match against any other region-specific controls)
                $matched_region = true;
            }

            // Skip if we are old enough that this control does not apply
            if ($age >= $c_age_threshold) {
                continue;
            }

            // Run the control; if it does not return false, it applies to this member
            $value = call_user_func_array([$this, 'pcc__' . $f_name], [$guid, $age, $region, $params]);
            if ($value !== false) {
                return $value;
            }
        }

        // None of them applied for this member
        return null;
    }

    /**
     * Run parental consent control.
     * If $params contains a member_id, we will also check their consent status and send a consent e-mail if they did not yet receive one.
     *
     * @param  ID_TEXT $guid The GUID of the control to run
     * @param  integer $age The age of the member
     * @param  ?ID_TEXT $region The ISO code of the region in which the member is located (null: do not check on region-specific controls)
     * @param  array $params Array of additional parameters
     * @return ~array Details about the parental control restriction (false: member is not subject to restriction based on criteria)
     */
    private function pcc__parental_consent(string $guid, int $age, ?string $region, array $params)
    {
        $body_content = (string)$this->controls[$guid];
        $ret = ['extra_text' => trim($body_content)];

        // Not checking on specific member, so we automatically assume they are subject to restriction
        if (!isset($params['member_id'])) {
            return $ret;
        }

        // If a Member ID is specified, then we are checking their parental consent status and sending an e-mail if necessary

        $member_id = $params['member_id'];

        $consent_status = $GLOBALS['CNS_DRIVER']->get_member_row_field($member_id, 'm_parental_consent');
        if ($consent_status === 2) {
            return false; // The member already has parental consent to use the site
        } elseif ($consent_status === 1) {
            return $ret; // We already sent out a consent e-mail
        }

        require_code('lang');
        require_code('cns_members');
        require_code('cns_members_action2');
        require_code('fields');
        require_code('mail');
        require_lang('cns');

        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        $email_address = $GLOBALS['FORUM_DRIVER']->get_member_email_address($member_id);
        $language = get_lang($member_id);

        // Get fields for which the member filled out
        $custom_fields = cns_get_all_custom_fields_match(
            null, // groups
            null, // public view
            null, // owner view
            null, // owner set
            null, // required
            null, // show in posts
            null, // show in post previews
            null, // special start
            true, // show on join form
        );
        $actual_custom_fields = cns_read_in_custom_fields($custom_fields);
        $fields_done = [];
        $fields_done[] = ['LABEL' => do_lang('USERNAME'), 'VALUE' => make_string_tempcode(escape_html($username))];
        foreach ($custom_fields as $custom_field) {
            if (isset($actual_custom_fields[$custom_field['id']])) {
                $fields_ob = get_fields_hook($custom_field['cf_type']);
                $ev = $actual_custom_fields[$custom_field['id']];
                $rendered = $fields_ob->render_field_value($custom_field, $ev);
                $fields_done[] = ['LABEL' => $custom_field['trans_name'], 'VALUE' => escape_html_in_comcode(is_object($rendered) ? $rendered->evaluate($language) : $rendered)];
            }
        }

        // URLs
        $privacy_policy_url = build_url(['page' => 'privacy'], '_SEARCH', [], false, false, true);
        $rules_url = build_url(['page' => 'rules'], '_SEARCH', [], false, false, true);

        // Construct and send the message
        $message = do_template('PARENTAL_CONSENT_MAIL', [
            '_GUID' => 'a35c7a16288baec9ec6260d9d7195465',
            'FAX' => get_option('privacy_fax'),
            'POSTAL_ADDRESS' => get_option('privacy_postal_address'),
            'EMAIL_ADDRESS' => get_option('staff_address'),
            'FIELDS_DONE' => $fields_done,
            'PRIVACY_POLICY_URL' => $privacy_policy_url,
            'RULES_URL' => $rules_url,
            'EXTRA_TEXT' => $body_content,
        ], $language, false, null, '.txt', 'text');

        dispatch_mail(do_lang('PARENTAL_CONSENT_JOIN_SUBJECT', $username, get_site_name(), null, $language), $message->evaluate($language), '', [$email_address], $username);

        // Update the member settings to indicate we sent the notification
        $GLOBALS['FORUM_DB']->query_update('f_members', ['m_parental_consent' => 1], ['id' => $member_id], '', 1);
        unset($GLOBALS['FORUM_DRIVER']->MEMBER_ROWS_CACHED[$member_id]);

        return $ret;
    }
}
