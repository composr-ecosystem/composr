<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Returns a list of pairs, for which permissions are false by default for ordinary usergroups.
 *
 * @return array List of pairs
 */
function get_false_permissions()
{
    return array(
        array('_COMCODE', 'allow_html'),
        array('_COMCODE', 'comcode_dangerous'),
        array('_COMCODE', 'comcode_nuisance'),
        array('_COMCODE', 'use_very_dangerous_comcode'),
        array('STAFF_ACTIONS', 'access_closed_site'),
        array('STAFF_ACTIONS', 'bypass_bandwidth_restriction'),
        array('STAFF_ACTIONS', 'see_stack_trace'),
        array('STAFF_ACTIONS', 'view_profiling_modes'),
        array('STAFF_ACTIONS', 'access_overrun_site'),
        array('SUBMISSION', 'feature'),
        array('SUBMISSION', 'bypass_validation_highrange_content'),
        array('SUBMISSION', 'bypass_validation_midrange_content'),
        array('SUBMISSION', 'edit_highrange_content'),
        array('SUBMISSION', 'edit_midrange_content'),
        array('SUBMISSION', 'edit_lowrange_content'),
        array('SUBMISSION', 'edit_own_highrange_content'),
        array('SUBMISSION', 'edit_own_midrange_content'),
        array('SUBMISSION', 'delete_highrange_content'),
        array('SUBMISSION', 'delete_midrange_content'),
        array('SUBMISSION', 'delete_lowrange_content'),
        array('SUBMISSION', 'delete_own_highrange_content'),
        array('SUBMISSION', 'delete_own_midrange_content'),
        array('SUBMISSION', 'delete_own_lowrange_content'),
        array('SUBMISSION', 'can_submit_to_others_categories'),
        array('SUBMISSION', 'search_engine_links'),
        array('SUBMISSION', 'submit_cat_highrange_content'),
        array('SUBMISSION', 'submit_cat_midrange_content'),
        array('SUBMISSION', 'submit_cat_lowrange_content'),
        array('SUBMISSION', 'edit_cat_highrange_content'),
        array('SUBMISSION', 'edit_cat_midrange_content'),
        array('SUBMISSION', 'edit_cat_lowrange_content'),
        array('SUBMISSION', 'delete_cat_highrange_content'),
        array('SUBMISSION', 'delete_cat_midrange_content'),
        array('SUBMISSION', 'delete_cat_lowrange_content'),
        array('SUBMISSION', 'edit_own_cat_highrange_content'),
        array('SUBMISSION', 'edit_own_cat_midrange_content'),
        array('SUBMISSION', 'edit_own_cat_lowrange_content'),
        array('SUBMISSION', 'delete_own_cat_highrange_content'),
        array('SUBMISSION', 'delete_own_cat_midrange_content'),
        array('SUBMISSION', 'delete_own_cat_lowrange_content'),
        array('SUBMISSION', 'mass_import'),
        array('SUBMISSION', 'scheduled_publication_times'),
        array('SUBMISSION', 'mass_delete_from_ip'),
        array('SUBMISSION', 'exceed_filesize_limit'),
        array('SUBMISSION', 'draw_to_server'),
        array('GENERAL_SETTINGS', 'open_virtual_roots'),
        array('GENERAL_SETTINGS', 'sees_javascript_error_alerts'),
        array('GENERAL_SETTINGS', 'see_software_docs'),
        array('GENERAL_SETTINGS', 'see_unvalidated'),
        array('GENERAL_SETTINGS', 'may_enable_staff_notifications'),
        array('GENERAL_SETTINGS', 'bypass_flood_control'),
        array('GENERAL_SETTINGS', 'remove_page_split'),
        array('GENERAL_SETTINGS', 'bypass_wordfilter'),
        array('SUBMISSION', 'perform_keyword_check'),
        array('SUBMISSION', 'have_personal_category'),
    );
}

/**
 * Returns a list of pairs, for which permissions are true by default for ordinary usergroups.
 *
 * @return array List of pairs
 */
function get_true_permissions()
{
    return array(
        array('SUBMISSION', 'edit_own_lowrange_content'),
        array('SUBMISSION', 'submit_highrange_content'),
        array('SUBMISSION', 'submit_midrange_content'),
        array('SUBMISSION', 'submit_lowrange_content'),
        array('SUBMISSION', 'bypass_validation_lowrange_content'),
        array('_FEEDBACK', 'rate'),
        array('_FEEDBACK', 'comment'),
        array('VOTE', 'vote_in_polls'),
        array('GENERAL_SETTINGS', 'jump_to_unvalidated'),
        array('_COMCODE', 'reuse_others_attachments'),
        array('GENERAL_SETTINGS', 'see_php_errors'),
    );
}

/**
 * Check if a privilege exists.
 *
 * @param  ID_TEXT $name The name of the option
 * @return boolean Whether it exists
 */
function privilege_exists($name)
{
    $test = $GLOBALS['SITE_DB']->query_select_value_if_there('privilege_list', 'the_name', array('the_name' => $name));
    return $test !== null;
}

/**
 * Add a privilege, and apply it to every usergroup.
 *
 * @param  ID_TEXT $section The section the privilege is filled under
 * @param  ID_TEXT $name The codename for the privilege
 * @param  boolean $default Whether this privilege is granted to all usergroups by default
 * @param  boolean $not_even_mods Whether this privilege is not granted to supermoderators by default (something very sensitive); only applies if $default is true
 * @param  boolean $not_for_probation An exception for if $default is true, don't assign the privilege to the probation group
 */
function add_privilege($section, $name, $default = false, $not_even_mods = false, $not_for_probation = false)
{
    if (get_forum_type() == 'cns') {
        require_code('cns_groups');
        $probation_group = get_probation_group();
    } else {
        $probation_group = false;
    }

    // We do bulk inserts, for performance reasons
    $ins_privilege = array();
    $ins_group_id = array();
    $ins_the_page = array();
    $ins_module_the_name = array();
    $ins_category_name = array();
    $ins_the_value = array();

    $usergroups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);
    $admin_groups = array_merge($GLOBALS['FORUM_DRIVER']->get_super_admin_groups(), $GLOBALS['FORUM_DRIVER']->get_moderator_groups());
    foreach (array_keys($usergroups) as $id) {
        if ((($default) && ((!$not_for_probation) || ($id !== $probation_group))) || ((in_array($id, $admin_groups)) && (!$not_even_mods))) {
            $ins_privilege[] = $name;
            $ins_group_id[] = $id;
            $ins_the_page[] = '';
            $ins_module_the_name[] = '';
            $ins_category_name[] = '';
            $ins_the_value[] = 1;
        }
    }

    $GLOBALS['SITE_DB']->query_insert('group_privileges', array(
        'privilege' => $ins_privilege,
        'group_id' => $ins_group_id,
        'the_page' => $ins_the_page,
        'module_the_name' => $ins_module_the_name,
        'category_name' => $ins_category_name,
        'the_value' => $ins_the_value,
    ));

    $GLOBALS['SITE_DB']->query_insert('privilege_list', array('p_section' => $section, 'the_name' => $name, 'the_default' => ($default ? 1 : 0)));
}

/**
 * Sets the privilege of a usergroup.
 *
 * @param  GROUP $group_id The usergroup having the permission set
 * @param  ID_TEXT $permission The codename of the permission
 * @param  boolean $value Whether the usergroup has the permission
 * @param  ?ID_TEXT $page The ID code for the page being checked (null: current page)
 * @param  ?ID_TEXT $category_type The category-type for the permission (null: none required)
 * @param  ?ID_TEXT $category_name The category-name/value for the permission (null: none required)
 */
function set_privilege($group_id, $permission, $value, $page = null, $category_type = null, $category_name = null)
{
    if ($page === null) {
        $page = '';
    }
    if ($category_type === null) {
        $category_type = '';
    }
    if ($category_name === null) {
        $category_name = '';
    }

    $db = $GLOBALS[((($category_type == 'forums') || ($category_type == 'topics')) && (get_forum_type() == 'cns')) ? 'FORUM_DB' : 'SITE_DB'];

    $db->query_delete('group_privileges', array('privilege' => $permission, 'group_id' => $group_id, 'the_page' => $page, 'module_the_name' => $category_type, 'category_name' => $category_name), '', 1);
    $db->query_insert('group_privileges', array('privilege' => $permission, 'group_id' => $group_id, 'the_page' => $page, 'module_the_name' => $category_type, 'category_name' => $category_name, 'the_value' => $value ? 1 : 0));

    global $PRIVILEGE_CACHE;
    $PRIVILEGE_CACHE = array();
}

/**
 * Rename a privilege.
 *
 * @param  ID_TEXT $old The old name
 * @param  ID_TEXT $new The new name
 */
function rename_privilege($old, $new)
{
    $GLOBALS['SITE_DB']->query_update('privilege_list', array('the_name' => $new), array('the_name' => $old), '', 1);
    $GLOBALS['SITE_DB']->query_update('group_privileges', array('privilege' => $new), array('privilege' => $old), '', 1);
    $GLOBALS['SITE_DB']->query_update('member_privileges', array('privilege' => $new), array('privilege' => $old), '', 1);
}

/**
 * Delete a privilege.
 *
 * @param  ID_TEXT $name The codename of the permission
 */
function delete_privilege($name)
{
    $GLOBALS['SITE_DB']->query_delete('privilege_list', array('the_name' => $name), '', 1);
    $GLOBALS['SITE_DB']->query('DELETE FROM ' . get_table_prefix() . 'group_privileges WHERE ' . db_string_equal_to('privilege', $name));
}
