<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_notifications
 */

/**
 * Get a map of notification types available to our member.
 *
 * @param  ?MEMBER $member_id_of Member this is for (null: just check globally)
 * @return array Map of notification types (integer code to language string codename)
 * @ignore
 */
function _get_available_notification_types(?int $member_id_of = null) : array
{
    $__notification_types = [
        A_INSTANT_EMAIL => 'INSTANT_EMAIL',
        A_INSTANT_PT => 'INSTANT_PT',
        A_INSTANT_SMS => 'INSTANT_SMS',
        A_DAILY_EMAIL_DIGEST => 'DAILY_EMAIL_DIGEST',
        A_WEEKLY_EMAIL_DIGEST => 'WEEKLY_EMAIL_DIGEST',
        A_MONTHLY_EMAIL_DIGEST => 'MONTHLY_EMAIL_DIGEST',
        A_WEB_NOTIFICATION => 'WEB_NOTIFICATION',
    ];
    $_notification_types = [];
    foreach ($__notification_types as $notification_type_constant => $notification_type_codename) {
        if (_notification_setting_available($notification_type_constant, $member_id_of)) {
            $_notification_types[$notification_type_constant] = $notification_type_codename;
        }
    }

    global $HOOKS_NOTIFICATION_TYPES_EXTENDED;
    foreach ($HOOKS_NOTIFICATION_TYPES_EXTENDED as $hook => $ob) {
        $_notification_types += $ob->_get_available_notification_types($member_id_of);
    }

    return $_notification_types;
}

/**
 * Put out a user interface for managing notifications overall.
 *
 * @param  MEMBER $member_id_of Member this is for
 * @return Tempcode UI
 */
function notifications_ui(int $member_id_of) : object
{
    push_query_limiting(false);

    require_css('notifications');
    require_code('notifications');
    require_lang('notifications');

    if (is_guest($member_id_of)) {
        access_denied('NOT_AS_GUEST');
    }

    // UI fields
    $fields = new Tempcode();

    $_notification_types = _get_available_notification_types($member_id_of);
    if (empty($_notification_types)) {
        return new Tempcode();
    }

    $lockdown = collapse_2d_complexity('l_notification_code', 'l_setting', $GLOBALS['SITE_DB']->query_select('notification_lockdown', ['*']));

    $has_interesting_post_fields = has_interesting_post_fields();

    $notification_sections = [];
    $all_notification_codes = [];
    $hooks = find_all_hooks('systems', 'notifications');
    foreach (array_keys($hooks) as $hook) {
        $hook_lockdown = array_key_exists($hook, $lockdown) ? $lockdown[$hook] : null;

        if ((substr($hook, 0, 4) == 'cns_') && (get_forum_type() != 'cns')) {
            continue;
        }
        require_code('hooks/systems/notifications/' . filter_naughty_harsh($hook));
        $ob = object_factory('Hook_notification_' . filter_naughty_harsh($hook));
        $_notification_codes = $ob->list_handled_codes();
        foreach ($_notification_codes as $notification_code => $notification_details) {
            $notification_code_lockdown = array_key_exists($notification_code, $lockdown) ? $lockdown[$notification_code] : null;

            if ($ob->member_could_potentially_enable($notification_code, $member_id_of)) {
                $all_notification_codes[$notification_code] = [];

                $current_setting = notifications_setting($notification_code, null, $member_id_of);
                if ($current_setting == A__STATISTICAL) {
                    $current_setting = _find_member_statistical_notification_type($member_id_of, $notification_code);
                }
                $allowed_setting = $ob->allowed_settings($notification_code);

                $supports_categories = $ob->supports_categories($notification_code);

                if ($supports_categories) {
                    $if_there_query = 'SELECT l_setting FROM ' . get_table_prefix() . 'notifications_enabled WHERE l_member_id=' . strval($member_id_of) . ' AND ' . db_string_equal_to('l_notification_code', $notification_code) . ' AND ' . db_string_not_equal_to('l_code_category', '');
                    $is_there_test = $GLOBALS['SITE_DB']->query($if_there_query);
                }

                $notification_types = [];
                foreach ($_notification_types as $notification_type_constant => $notification_type_codename) {
                    $available = (($hook_lockdown === null) && ($notification_code_lockdown === null) && (($notification_type_constant & $allowed_setting) != 0));

                    $all_notification_codes[$notification_code][$notification_type_constant] = $notification_type_codename;

                    if ($available && $has_interesting_post_fields) {
                        $checked = post_param_integer('notification_' . $notification_code . '_' . $notification_type_codename, 0);
                    } else {
                        $checked = (($notification_type_constant & $current_setting) != 0) ? 1 : 0;
                    }

                    $type_has_children_set = false;
                    if (($supports_categories) && ($available)) {
                        foreach ($is_there_test as $_is) {
                            if (($_is['l_setting'] & $notification_type_constant) != 0) {
                                $type_has_children_set = true;
                            }
                        }
                    }

                    $notification_types[] = [
                        'NTYPE' => $notification_type_codename,
                        'LABEL' => do_lang_tempcode('ENABLE_NOTIFICATIONS_' . $notification_type_codename),
                        'CHECKED' => ($checked == 1),
                        'RAW' => strval($notification_type_constant),
                        'AVAILABLE' => $available,
                        'SCOPE' => $notification_code,
                        'TYPE_HAS_CHILDREN_SET' => $type_has_children_set,
                    ];
                }

                $notification_types_tempcode = do_template('NOTIFICATION_TYPES', ['_GUID' => 'b6bd5df8c3e20d64d97ab88bb46f765c', 'NOTIFICATION_TYPES' => $notification_types]);

                if (!isset($notification_sections[$notification_details[0]])) {
                    $notification_sections[$notification_details[0]] = [
                        'NOTIFICATION_SECTION' => $notification_details[0],
                        'NOTIFICATION_CODES' => [],
                    ];
                }
                $notification_sections[$notification_details[0]]['NOTIFICATION_CODES'][] = [
                    'NOTIFICATION_CODE' => $notification_code,
                    'NOTIFICATION_LABEL' => $notification_details[1],
                    'NOTIFICATION_TYPES' => $notification_types_tempcode,
                    'SUPPORTS_CATEGORIES' => ($supports_categories && ($hook_lockdown === null) && ($notification_code_lockdown === null)),
                ];
            }
        }
    }
    if (empty($notification_sections)) {
        return new Tempcode();
    }

    // Sort labels
    cms_mb_ksort($notification_sections, SORT_NATURAL | SORT_FLAG_CASE);
    foreach (array_keys($notification_sections) as $i) {
        sort_maps_by($notification_sections[$i]['NOTIFICATION_CODES'], 'NOTIFICATION_LABEL', false, true);
    }

    // Save via form post (for top-level notification code, not under a notification category)
    if (has_interesting_post_fields()) {
        $changes_made = false;
        foreach ($all_notification_codes as $notification_code => $notification_types) {
            $new_setting = A_NA;
            foreach ($notification_types as $notification_type_constant => $notification_type_codename) {
                if (post_param_integer('notification_' . $notification_code . '_' . $notification_type_codename, 0) == 1) {
                    $new_setting = $new_setting | $notification_type_constant;
                }
            }
            $_changes_made = set_notifications($notification_code, null, $member_id_of, $new_setting);
            if ($_changes_made) {
                $changes_made = true;
            }
        }

        // Treat as a high-impact change and send an e-mail alert if any changes were made
        if ((get_member() == $member_id_of) || ((has_privilege(get_member(), 'member_maintenance')) && (post_param_integer('sensitive_change_alert', 0) == 0))) {
            $sensitive_change_alert = false;
        } else {
            $sensitive_change_alert = true;
        }
        if ($changes_made) {
            _dispatch_notifications_notification($member_id_of, $sensitive_change_alert);
        }
    }

    // Main UI...

    $notification_types_titles = [];
    foreach ($_notification_types as $notification_type_constant => $notification_type_codename) {
        $notification_types_titles[] = [
            'NTYPE' => $notification_type_codename,
            'LABEL' => do_lang_tempcode('ENABLE_NOTIFICATIONS_' . $notification_type_codename),
            'RAW' => strval($notification_type_constant),
        ];
    }

    require_code('themes2');
    $color = ltrim(find_theme_seed($GLOBALS['FORUM_DRIVER']->get_theme()), '#');

    $auto_monitor_contrib_content = null;
    $smart_topic_notification = null;
    $mailing_list_style = null;
    $mlsn_description = new Tempcode();
    if (get_forum_type() == 'cns') {
        require_lang('cns_mailinglists');

        $auto_monitor_contrib_content = ($GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id_of, 'm_auto_monitor_contrib_content') == 1);

        if (addon_installed('cns_forum')) {
            $smart_topic_notification = ($GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id_of, 'm_smart_topic_notification') == 1);

            require_code('cns_forums2');
            $test = cns_has_mailing_list_style();
            if ($test[0] > 0) {
                $mailing_list_style = ($GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id_of, 'm_mailing_list_style') == 1);
            }
            $mlsn_description_caveat = $test[1] ? new Tempcode() : do_lang_tempcode('DESCRIPTION_MAILING_LIST_STYLE_CAVEAT');
            $mlsn_description = do_lang_tempcode('DESCRIPTION_MAILING_LIST_STYLE', $mlsn_description_caveat);
        }
    }

    $custom_fields = $GLOBALS['FORUM_DRIVER']->get_custom_fields($member_id_of);
    $smart_topic_notification_content = (array_key_exists('smart_topic_notification', $custom_fields)) && ($custom_fields['smart_topic_notification'] == '1');

    $ret = do_template('NOTIFICATIONS_MANAGE', [
        '_GUID' => '838165ca739c45c2dcf994bed6fefe3e',
        'COLOR' => $color,
        'INTRO' => do_lang_tempcode('NOTIFICATIONS_INTRO'),
        'AUTO_NOTIFICATION_CONTRIB_CONTENT' => $auto_monitor_contrib_content,
        'NOTIFICATION_TYPES_TITLES' => $notification_types_titles,
        'NOTIFICATION_SECTIONS' => $notification_sections,
        'SMART_TOPIC_NOTIFICATION' => $smart_topic_notification,
        'MAILING_LIST_STYLE' => $mailing_list_style,
        'MAILING_LIST_STYLE_DESCRIPTION' => $mlsn_description,
        'MEMBER_ID' => strval($member_id_of),
        'ADVANCED_COLUMN' => true,
        'SHOW_PRIVILEGES' => false,
    ]);

    $ret = make_string_tempcode($ret->evaluate());

    return $ret;
}

/**
 * Put out a user interface for managing notifications for a notification-category supporting content type. Also toggle notifications if an ID is passed.
 *
 * @param  ID_TEXT $notification_code The notification code to work with
 * @param  ?Tempcode $enable_message Special message to output if we have toggled to enable (null: use standard)
 * @param  ?Tempcode $disable_message Special message to output if we have toggled to disable (null: use standard)
 * @return Tempcode UI
 */
function notifications_ui_advanced(string $notification_code, ?object $enable_message = null, ?object $disable_message = null) : object
{
    require_css('notifications');
    require_code('notifications');
    require_lang('notifications');
    require_javascript('core_notifications');
    require_all_lang();

    $test = notification_locked_down($notification_code);
    if ($test !== null) {
        warn_exit(do_lang_tempcode('NOTIFICATION_CODE_LOCKED_DOWN'));
    }

    $ob = _get_notification_ob_for_code($notification_code);
    if ($ob === null) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }
    $info_details = $ob->list_handled_codes();

    $title = get_screen_title('NOTIFICATION_MANAGEMENT_FOR', true, [escape_html($info_details[$notification_code][1])]);

    if (is_guest()) {
        access_denied('NOT_AS_GUEST');
    }

    if ($enable_message === null) {
        $enable_message = do_lang_tempcode('NOW_ENABLED_NOTIFICATIONS');
    }
    if ($disable_message === null) {
        $disable_message = do_lang_tempcode('NOW_DISABLED_NOTIFICATIONS');
    }

    $_notification_types = _get_available_notification_types(get_member());

    $notification_category = get_param_string('id', null);
    if ($notification_category === null) {
        if (has_interesting_post_fields()) { // If we've just saved via form POST - this is after editing all the category selections for $notification_code
            $changes_made = false;

            $_changes_made_a = set_notifications($notification_code, null, null, A_NA); // Make it clear we've overridden the general value by doing this
            if ($_changes_made_a) {
                $changes_made = true;
            }

            foreach (array_keys($_POST) as $key) {
                $matches = [];
                if (preg_match('#^notification_' . preg_quote($notification_code) . '_category_(.*)#', $key, $matches) != 0) {
                    $notification_category = $matches[1];

                    $new_setting = A_NA;
                    foreach ($_notification_types as $notification_type_constant => $notification_type_codename) {
                        if (post_param_integer('notification_' . $notification_category . '_' . $notification_type_codename, 0) == 1) {
                            $new_setting = $new_setting | $notification_type_constant;
                        }
                    }

                    $_changes_made_b = set_notifications($notification_code, $notification_category, null, $new_setting);
                    if ($_changes_made_b) {
                        $changes_made = true;
                    }
                }
            }

            // Treat as a high-impact change and send an e-mail alert if any changes were made
            if ($changes_made) {
                _dispatch_notifications_notification(get_member(), false);
            }

            attach_message(do_lang_tempcode('SUCCESS'), 'inform');

            // Redirect them back
            $redirect = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
            if ($redirect != '') {
                return redirect_screen($title, $redirect, do_lang_tempcode('SUCCESS'));
            }
        }
    } else {
        // Put in content title to message
        $_tree = $ob->create_category_tree($notification_code, $notification_category); // Save via GET may happen within here
        foreach ($_tree as $tree_pos) {
            $_notification_category = (is_integer($tree_pos['id']) ? strval($tree_pos['id']) : $tree_pos['id']);

            if ($_notification_category == $notification_category) {
                $disable_message = protect_from_escaping(str_replace('{1}', escape_html($tree_pos['title']), $disable_message->evaluate()));
                $enable_message = protect_from_escaping(str_replace('{1}', escape_html($tree_pos['title']), $enable_message->evaluate()));
                break;
            }
        }
        $disable_message = protect_from_escaping(str_replace('{1}', do_lang('UNKNOWN'), $disable_message->evaluate()));
        $enable_message = protect_from_escaping(str_replace('{1}', do_lang('UNKNOWN'), $enable_message->evaluate()));

        if (notifications_enabled($notification_code, $notification_category)) {
            attach_message($disable_message, 'warn');
        } else {
            attach_message($enable_message, 'inform');
        }
    }

    $done_get_change = false;
    $tree = _notifications_build_category_tree($_notification_types, $notification_code, $ob, null, 0, null, $done_get_change);
    $notification_category_being_changed = get_param_string('id', null);
    if (($notification_category_being_changed !== null) && (!$done_get_change)) {
        // The tree has been pruned due to over-sizeness issue (too much content to list), so we have to set a notification here rather than during render.
        set_notifications($notification_code, $notification_category_being_changed);

        // Re-render too
        $tree = _notifications_build_category_tree($_notification_types, $notification_code, $ob, null, 0, null, $done_get_change);
    }

    $notification_types_titles = [];
    foreach ($_notification_types as $notification_type_constant => $notification_type_codename) {
        $notification_types_titles[] = [
            'NTYPE' => $notification_type_codename,
            'LABEL' => do_lang_tempcode('ENABLE_NOTIFICATIONS_' . $notification_type_codename),
            'RAW' => strval($notification_type_constant),
        ];
    }

    require_code('themes2');
    $color = ltrim(find_theme_seed($GLOBALS['FORUM_DRIVER']->get_theme()), '#');

    return do_template('NOTIFICATIONS_MANAGE_ADVANCED_SCREEN', [
        '_GUID' => '21337e54cc87d82269bec89e70690543',
        'TITLE' => $title,
        '_TITLE' => $info_details[$notification_code][1],
        'COLOR' => $color,
        'ACTION_URL' => get_self_url(false, false, ['id' => null]),
        'NOTIFICATION_TYPES_TITLES' => $notification_types_titles,
        'TREE' => $tree,
        'NOTIFICATION_CODE' => $notification_code,
    ]);
}

/**
 * Build a tree UI for all categories available.
 *
 * @param  array $_notification_types Notification types
 * @param  ID_TEXT $notification_code The notification code to work with
 * @param  object $ob Notification hook object
 * @param  ?ID_TEXT $id Category we're looking under (null: root)
 * @param  integer $depth Recursion depth
 * @param  ?boolean $force_change_children_to Value to change setting to (null: do not change)
 * @param  boolean $done_get_change Whether we have made a change to the settings
 * @return Tempcode UI
 *
 * @ignore
 */
function _notifications_build_category_tree(array $_notification_types, string $notification_code, object $ob, ?string $id, int $depth, ?bool $force_change_children_to, bool &$done_get_change) : object
{
    $_notification_categories = $ob->create_category_tree($notification_code, $id);

    $allowed_setting = $ob->allowed_settings($notification_code);

    $notification_categories = [];
    foreach ($_notification_categories as $c) {
        $notification_category = (is_integer($c['id']) ? strval($c['id']) : $c['id']);

        $current_setting = notifications_setting($notification_code, $notification_category);
        if ($current_setting == A__STATISTICAL) {
            $current_setting = _find_member_statistical_notification_type(get_member(), $notification_code);
        }

        $notification_category_being_changed = get_param_string('id', null);
        if (($notification_category_being_changed === $notification_category) || ($force_change_children_to !== null)) {
            if (!$done_get_change) {
                // A change being called by GET URL
                if (($force_change_children_to === false/*If recursively disabling*/) || (($force_change_children_to === null) && ($current_setting != A_NA)/*If explicitly toggling this one to disabled*/)) {
                    set_notifications($notification_code, $notification_category, null, A_NA);
                    $force_change_children_to_children = false;
                } else {
                    set_notifications($notification_code, $notification_category);
                    $force_change_children_to_children = true;
                }

                $done_get_change = true;

                // Need to reload setting
                $current_setting = notifications_setting($notification_code, $notification_category);
                if ($current_setting == A__STATISTICAL) {
                    $current_setting = _find_member_statistical_notification_type(get_member(), $notification_code);
                }
            } else {
                $force_change_children_to_children = false;
            }
        } else {
            $force_change_children_to_children = $force_change_children_to;
        }

        $notification_types = [];
        foreach ($_notification_types as $notification_type_constant => $notification_type_codename) {
            $available = (($notification_type_constant & $allowed_setting) != 0);

            if (has_interesting_post_fields()) {
                $checked = post_param_integer('notification_' . $notification_category . '_' . $notification_type_codename, 0);
            } else {
                $checked = (($notification_type_constant & $current_setting) != 0) ? 1 : 0;
            }

            $notification_types[] = [
                'NTYPE' => $notification_type_codename,
                'LABEL' => do_lang_tempcode('ENABLE_NOTIFICATIONS_' . $notification_type_codename),
                'CHECKED' => ($checked == 1),
                'RAW' => strval($notification_type_constant),
                'AVAILABLE' => $available,
                'SCOPE' => $notification_category,
            ];
        }

        if ((!array_key_exists('num_children', $c)) && (array_key_exists('child_count', $c))) {
            $c['num_children'] = $c['child_count'];
        }
        if ((!array_key_exists('num_children', $c)) && (array_key_exists('children', $c))) {
            $c['num_children'] = count($c['children']);
        }
        $children = new Tempcode();
        if ((array_key_exists('num_children', $c)) && ($c['num_children'] != 0)) {
            $children = _notifications_build_category_tree($_notification_types, $notification_code, $ob, $notification_category, $depth + 1, $force_change_children_to_children, $done_get_change);
        }

        $notification_categories[] = [
            'NUM_CHILDREN' => strval(array_key_exists('num_children', $c) ? $c['num_children'] : 0),
            'DEPTH' => strval($depth),
            'NOTIFICATION_CATEGORY' => $notification_category,
            'NOTIFICATION_TYPES' => $notification_types,
            'CATEGORY_TITLE' => $c['title'],
            'CHECKED' => notifications_enabled($notification_code, $notification_category),
            'CHILDREN' => $children,
        ];
    }

    $tree = do_template('NOTIFICATIONS_TREE', [
        '_GUID' => 'a370837b5ffb3d80989a34ad2a71b6c1',
        'NOTIFICATION_CODE' => $notification_code,
        'NOTIFICATION_CATEGORIES' => $notification_categories,
    ]);

    return $tree;
}

/**
 * Copy notification settings from a parent category to a child category.
 *
 * @param  ID_TEXT $notification_code Parent category type
 * @param  ID_TEXT $id Parent category ID
 * @param  ID_TEXT $child_id Child category ID
 */
function copy_notifications_to_new_child(string $notification_code, string $id, string $child_id)
{
    require_code('notifications');
    $db = get_notification_code_db($notification_code);

    // Copy notifications over to new children
    $_start = 0;
    do {
        $notifications_to = $db->query_select('notifications_enabled', ['l_member_id', 'l_setting'], ['l_notification_code' => substr($notification_code, 0, 80), 'l_code_category' => $id], '', 100, $_start);

        foreach ($notifications_to as $notification_to) {
            $db->query_insert('notifications_enabled', [
                'l_member_id' => $notification_to['l_member_id'],
                'l_notification_code' => substr($notification_code, 0, 80),
                'l_code_category' => $child_id,
                'l_setting' => $notification_to['l_setting'],
            ]);
        }

        $_start += 100;
    } while (!empty($notifications_to));
}
