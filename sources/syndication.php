<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Syndicate a content object out, and also send out activities relating to the same content.
 *
 * @param  string $content_type Content type
 * @param  string $content_id Content ID
 * @param  array $activities A list of activity tuples, each tuple having the language string, optionally the activity member, and optionally up to 3 labels
 * @param  ?array $syndication_context A serialisable representation of data set via get_syndication_option_fields (null: read from environment)
 */
function syndicate_content($content_type, $content_id, $activities, $syndication_context = null)
{
    if (running_script('install')) {
        return;
    }

    if ($syndication_context === null) {
        $syndication_context = read_get_syndication_option_fields($content_type);
    }

    require_code('content');
    list($title, $submitter, $cma_info, $content_row, $url, $url_safe, $content_ob) = content_get_details($content_type, $content_id);

    // Syndicate content...

    $hooks = find_all_hook_obs('systems', 'syndication', 'Hook_syndication_');
    foreach ($hooks as $ob) {
        if (!method_exists($ob, 'syndicate_content')) {
            continue;
        }

        if (get_param_integer('keep_debug_notifications', 0) == 1) {
            $ob->syndicate_content($content_type, $content_id, $title, $submitter, $cma_info, $content_row, $url_safe, $content_ob, $syndication_context);
        } else {
            cms_register_shutdown_function_safe([$ob, 'syndicate_content'], $content_type, $content_id, $title, $submitter, $cma_info, $content_row, $url_safe, $content_ob, $syndication_context);
        }
    }

    // Send activities...

    $sitewide_too = true;

    foreach ($activities as $activity) {
        $language_string_code = $activity[0];
        $submitter = array_key_exists(1, $activity) ? $activity[1] : null;
        $label_1 = array_key_exists(2, $activity) ? $activity[2] : $content_ob->get_title($content_row);
        $label_2 = array_key_exists(3, $activity) ? $activity[3] : '';
        $label_3 = array_key_exists(4, $activity) ? $activity[4] : '';
        $page_link_1 = $content_ob->get_view_page_link($content_row);
        $addon = $cma_info['addon_name'];

        syndicate_described_activity($language_string_code, $label_1, $label_2, $label_3, $page_link_1, '', '', $addon, 1, $submitter, $sitewide_too);
    }
}

/**
 * Delete syndicated content, due to it being deleted locally.
 *
 * @param  string $content_type Content type
 * @param  string $content_id Content ID
 */
function unsyndicate_content($content_type, $content_id)
{
    $hooks = find_all_hook_obs('systems', 'syndication', 'Hook_syndication_');
    foreach ($hooks as $ob) {
        if (!method_exists($ob, 'unsyndicate_content')) {
            continue;
        }

        if (get_param_integer('keep_debug_notifications', 0) == 1) {
            $ob->unsyndicate_content($content_type, $content_id);
        } else {
            cms_register_shutdown_function_safe([$ob, 'unsyndicate_content'], $content_type, $content_id);
        }
    }
}

/**
 * Syndicate human-intended descriptions of activities performed to the internal feed, and external listeners.
 *
 * @param  string $language_string_code Language string codename
 * @param  string $label_1 Label 1 (given as a parameter to the language string codename)
 * @param  string $label_2 Label 2 (given as a parameter to the language string codename)
 * @param  string $label_3 Label 3 (given as a parameter to the language string codename)
 * @param  string $page_link_1 Page-link 1
 * @param  string $page_link_2 Page-link 2
 * @param  string $page_link_3 Page-link 3
 * @param  string $addon Addon that caused the event
 * @param  BINARY $is_public Whether this post should be public or friends-only
 * @param  ?MEMBER $member_id Member being written for (null: current member)
 * @param  boolean $sitewide_too Whether to push this out as a site event if user requested
 * @param  ?MEMBER $also_involving Member also 'intimately' involved, such as a content submitter who is a friend (null: none)
 * @param  ?array $syndication_context A serialisable representation of data set via get_syndication_option_fields (null: read from environment)
 */
function syndicate_described_activity($language_string_code = '', $label_1 = '', $label_2 = '', $label_3 = '', $page_link_1 = '', $page_link_2 = '', $page_link_3 = '', $addon = '', $is_public = 1, $member_id = null, $sitewide_too = false, $also_involving = null, $syndication_context = null)
{
    if (running_script('install')) {
        return;
    }

    if ($syndication_context === null) {
        $syndication_context = read_get_syndication_option_fields(null);
    }

    $hooks = find_all_hook_obs('systems', 'syndication', 'Hook_syndication_');
    foreach ($hooks as $ob) {
        if (!method_exists($ob, 'syndicate_described_activity')) {
            continue;
        }

        if (get_param_integer('keep_debug_notifications', 0) == 1) {
            $ob->syndicate_described_activity($language_string_code, $label_1, $label_2, $label_3, $page_link_1, $page_link_2, $page_link_3, $addon, $is_public, $member_id, $sitewide_too, $also_involving, $syndication_context);
        } else {
            cms_register_shutdown_function_safe([$ob, 'syndicate_described_activity'], $language_string_code, $label_1, $label_2, $label_3, $page_link_1, $page_link_2, $page_link_3, $addon, $is_public, $member_id, $sitewide_too, $also_involving, $syndication_context);
        }
    }
}

/**
 * Get syndication field UI.
 *
 * @param  ?string $content_type The content type this is for (null: none)
 * @param  boolean $is_edit If these options are for an edit
 * @return Tempcode Syndication fields (or empty)
 */
function get_syndication_option_fields($content_type, $is_edit = false)
{
    $ret = new Tempcode();
    $hooks = find_all_hook_obs('systems', 'syndication', 'Hook_syndication_');
    foreach ($hooks as $ob) {
        if (method_exists($ob, 'get_syndication_option_fields')) {
            $ret->attach($ob->get_syndication_option_fields($content_type, $is_edit));
        }
    }
    return $ret;
}

/**
 * Get syndication field settings, and other context we may need to serialise.
 *
 * @param  ?string $content_type The content type this is for (null: none)
 * @return array Syndication field context
 */
function read_get_syndication_option_fields($content_type)
{
    $ret = [];
    $hooks = find_all_hook_obs('systems', 'syndication', 'Hook_syndication_');
    foreach ($hooks as $ob) {
        if (method_exists($ob, 'read_get_syndication_option_fields')) {
            $ret += $ob->read_get_syndication_option_fields($content_type);
        }
    }
    return $ret;
}
