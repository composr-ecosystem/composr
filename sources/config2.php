<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Build the UI for inputting a config option.
 *
 * @param  string $name Option name
 * @param  array $details Option details
 * @param  ?string $current_value Current value (null: get from live config)
 * @param  boolean $is_override Whether this is an override (which may change inputting style)
 * @return Tempcode Inputter
 */
function build_config_inputter($name, $details, $current_value = null, $is_override = false)
{
    if ($current_value === null) {
        $current_value = get_option($name);
    }

    $default = get_default_option($name);

    // Language strings
    $human_name = do_lang_tempcode($details['human_name']);
    $_explanation = do_lang($details['explanation'], isset($details['explanation_param_a']) ? $details['explanation_param_a'] : null, isset($details['explanation_param_b']) ? $details['explanation_param_b'] : null, isset($details['explanation_param_c']) ? $details['explanation_param_c'] : null, null, false);
    if ($_explanation === null) {
        $_explanation = do_lang('CONFIG_GROUP_DEFAULT_DESCRIP_' . $details['group'], null, null, null, null, false);
        if ($_explanation === null) {
            // So an error shows
            $_explanation = do_lang($details['explanation'], isset($details['explanation_param_a']) ? $details['explanation_param_a'] : null, isset($details['explanation_param_b']) ? $details['explanation_param_b'] : null, isset($details['explanation_param_c']) ? $details['explanation_param_c'] : null);
            $explanation = do_lang_tempcode($details['explanation'], isset($details['explanation_param_a']) ? $details['explanation_param_a'] : null, isset($details['explanation_param_b']) ? $details['explanation_param_b'] : null, isset($details['explanation_param_c']) ? $details['explanation_param_c'] : null);
        } else {
            $explanation = do_lang_tempcode('CONFIG_GROUP_DEFAULT_DESCRIP_' . $details['group']);
        }
    } else {
        $explanation = do_lang_tempcode($details['explanation'], isset($details['explanation_param_a']) ? $details['explanation_param_a'] : null, isset($details['explanation_param_b']) ? $details['explanation_param_b'] : null, isset($details['explanation_param_c']) ? $details['explanation_param_c'] : null);
    }
    if (!$is_override ) {
        if (!empty($details['theme_override'])) {
            $explanation = do_lang_tempcode('IS_ALSO_THEME_SETTING', $explanation);
        }
    }
    if (!empty($details['maintenance_code'])) {
        $explanation = is_maintained_description($details['maintenance_code'], $explanation);
    }
    if ($is_override) {
        $explanation_with_default = $explanation;
    } else {
        $explanation_with_default = do_lang_tempcode('EXPLANATION_WITH_DEFAULT', $explanation, ($default == '') ? do_lang_tempcode('BLANK_EM') : make_string_tempcode(escape_html($default)));
    }

    $required = isset($details['required']) ? $details['required'] : false;
    if ($is_override) {
        $required = false;
    }

    // Render field inputter
    switch ($details['type']) {
        case 'special':
            $ob = $details['ob'];
            return $ob->field_inputter($name, $details, $human_name, $explanation_with_default);

        case 'integer':
            $explanation_with_default = do_lang_tempcode('EXPLANATION_WITH_DEFAULT', $explanation, escape_html(($default == '') ? do_lang_tempcode('BLANK_EM') : make_string_tempcode(integer_format(intval($default)))));
            return form_input_integer($human_name, $explanation_with_default, $name, ($current_value == '') ? null : intval($current_value), $required);

        case 'float':
            $explanation_with_default = do_lang_tempcode('EXPLANATION_WITH_DEFAULT', $explanation, escape_html(($default == '') ? do_lang_tempcode('BLANK_EM') : make_string_tempcode(float_format(floatval($default)))));
            return form_input_float($human_name, $explanation_with_default, $name, ($current_value == '') ? null : floatval($current_value), $required);

        case 'tax_code':
            if (addon_installed('ecommerce')) {
                require_code('ecommerce');
                return form_input_tax_code($human_name, $explanation_with_default, $name, $current_value, $required);
            }
            // no break
        case 'line':
        case 'transline':
            return form_input_line($human_name, $explanation_with_default, $name, $current_value, $required, null, 100000);

        case 'text':
        case 'transtext':
            return form_input_text($human_name, $explanation_with_default, $name, $current_value, $required, null, true);

        case 'comcodeline':
            return form_input_line_comcode($human_name, $explanation_with_default, $name, $current_value, $required);

        case 'comcodetext':
            return form_input_text_comcode($human_name, $explanation_with_default, $name, $current_value, $required, null, true);

        case 'list':
            $_default = make_string_tempcode(escape_html($default));
            $list = '';
            $_value = $current_value;
            if ($_value == '' || !$required) {
                $list .= static_evaluate_tempcode(form_input_list_entry('', false, do_lang_tempcode('NA_EM')));
            }
            $values = explode('|', $details['list_options']);
            foreach ($values as $value) {
                $__value = str_replace(' ', '__', $value);
                $_option_text = do_lang('CONFIG_OPTION_' . $name . '_VALUE_' . $__value, null, null, null, null, false);
                if ($_option_text !== null) {
                    $details_text = do_lang_tempcode('CONFIG_OPTION_' . $name . '_VALUE_' . $__value);
                    if ($value == $default) {
                        $_default = $details_text;
                    }
                } else {
                    $details_text = make_string_tempcode($value);
                }
                $list .= static_evaluate_tempcode(form_input_list_entry($value, $_value == $value, $details_text));
            }
            $explanation_with_default = do_lang_tempcode('EXPLANATION_WITH_DEFAULT', $explanation, ($default == '') ? do_lang_tempcode('BLANK_EM') : $_default);
            return form_input_list($human_name, $explanation_with_default, $name, make_string_tempcode($list), null, false, $required);

        case 'tick':
            if ($is_override) {
                $list = '';
                $list .= static_evaluate_tempcode(form_input_list_entry('', $current_value == '', do_lang_tempcode('NA_EM')));
                $list .= static_evaluate_tempcode(form_input_list_entry('0', $current_value == '0', do_lang_tempcode('NO')));
                $list .= static_evaluate_tempcode(form_input_list_entry('1', $current_value == '1', do_lang_tempcode('YES')));
                return form_input_list($human_name, $explanation, $name, make_string_tempcode($list), null, false, false);
            }

            $explanation_with_default = do_lang_tempcode('EXPLANATION_WITH_DEFAULT', $explanation, escape_html(($default == '1') ? do_lang('YES') : do_lang('NO')));
            return form_input_tick($human_name, $explanation_with_default, $name, $current_value == '1');

        case 'username':
            return form_input_username($human_name, $explanation_with_default, $name, $current_value, $required, false);

        case 'colour':
            return form_input_colour($human_name, $explanation_with_default, $name, $current_value, $required);

        case 'date':
            return form_input_date($human_name, $explanation_with_default, $name, $required, false, false, ($current_value == '') ? null : intval($current_value), 40, intval(date('Y')) - 20, null);

        case 'datetime':
            return form_input_date($human_name, $explanation_with_default, $name, $required, false, true, ($current_value == '') ? null : intval($current_value), 40, intval(date('Y')) - 20, null);

        case 'forum':
            if ((get_forum_type() == 'cns') && (addon_installed('cns_forum'))) {
                $current_setting = $current_value;
                if (!is_numeric($current_setting)) {
                    $_current_setting = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'id', ['f_name' => $current_setting]);
                    if ($_current_setting === null) {
                        if ($required) {
                            $current_setting = strval(db_get_first_id());
                            attach_message(do_lang_tempcode('FORUM_CURRENTLY_UNSET', $human_name), 'notice');
                        } else {
                            $current_setting = null;
                        }
                    } else {
                        $current_setting = strval($_current_setting);
                    }
                }
                return form_input_tree_list($human_name, $explanation_with_default, $name, null, 'choose_forum', [], $required, $current_setting);
            }
            return form_input_line($human_name, $explanation_with_default, $name, $current_value, $required);

        case 'country':
            require_code('locations');
            $_list = new Tempcode();
            $_list->attach(form_input_list_entry('', false, do_lang_tempcode('NA_EM')));
            $_list->attach(create_country_selection_list([$current_value]));
            return form_input_list($human_name, $explanation_with_default, $name, $_list, null, false, $required);

        case 'country_multi':
            require_code('locations');
            $list = static_evaluate_tempcode(create_country_selection_list(explode(',', $current_value)));
            return form_input_multi_list($human_name, $explanation_with_default, $name, make_string_tempcode($list));

        case 'forum_grouping':
            if (get_forum_type() == 'cns') {
                $tmp_value = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forum_groupings', 'id', ['c_title' => $current_value]);

                require_code('cns_forums2');
                $_list = new Tempcode();
                $_list->attach(form_input_list_entry('', false, do_lang_tempcode('NA_EM')));
                $_list->attach(cns_create_selection_list_forum_groupings(null, $tmp_value));
                return form_input_list($human_name, $explanation_with_default, $name, $_list, null, false, $required);
            }
            return form_input_line($human_name, $explanation_with_default, $name, $current_value, $required);

        case 'usergroup':
        case 'usergroup_not_guest':
            if (get_forum_type() == 'cns') {
                $tmp_value = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_groups', 'id', [$GLOBALS['FORUM_DB']->translate_field_ref('g_name') => $current_value]);

                require_code('cns_groups');
                $_list = new Tempcode();
                $_list->attach(form_input_list_entry('', false, do_lang_tempcode('NA_EM')));
                $_list->attach(cns_create_selection_list_usergroups($tmp_value, $details['type'] == 'usergroup'));
                return form_input_list($human_name, $explanation_with_default, $name, $_list, null, false, $required);
            }
            return form_input_line($human_name, $explanation_with_default, $name, $current_value, $required);
    }

    fatal_exit('Invalid config option type: ' . $details['type'] . ' (for ' . $name . ')');
}

/**
 * Get the submitted value for a config option.
 *
 * @param  string $name Option name
 * @param  array $details Option details
 * @return string Value
 */
function get_submitted_config_value($name, $details)
{
    // Work out new value
    if ($details['type'] == 'tax_code') {
        if (addon_installed('ecommerce')) {
            require_code('ecommerce');
            $value = post_param_tax_code($name);
        } else {
            $value = post_param_string($name, '0%');
        }
    } elseif ($details['type'] == 'float') {
        $_value = post_param_string($name, '');
        $value = ($_value == '') ? '' : float_to_raw_string(float_unformat($_value));
    } elseif ($details['type'] == 'tick') {
        $value = strval(post_param_integer($name, 0));
    } elseif (($details['type'] == 'date') || ($details['type'] == 'datetime')) {
        $date_value = post_param_date($name);
        $value = ($date_value === null) ? '' : strval($date_value);
    } elseif ((($details['type'] == 'forum') || ($details['type'] == '?forum')) && (get_forum_type() == 'cns')) {
        $value = post_param_string($name, null);
        if (is_numeric($value)) {
            $value = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'f_name', ['id' => post_param_integer($name)]);
        }
        if ($value === null) {
            $value = '';
        }
    } elseif (($details['type'] == 'forum_grouping') && (get_forum_type() == 'cns')) {
        $value = post_param_string($name, null);
        if (is_numeric($value)) {
            $value = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forum_groupings', 'c_title', ['id' => post_param_integer($name)]);
        }
        if ($value === null) {
            $value = '';
        }
    } elseif ((($details['type'] == 'usergroup') || ($details['type'] == 'usergroup_not_guest')) && (get_forum_type() == 'cns')) {
        $value = post_param_string($name, null);
        if (is_numeric($value)) {
            $_value = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_groups', 'g_name', ['id' => post_param_integer($name)]);
        } else {
            $_value = ($value === null) ? null : $value;
        }
        if ($_value === null) {
            $value = '';
        } else {
            $value = get_translated_text($_value);
        }
    } else {
        $value = post_param_string($name, '');
    }

    return $value;
}

/**
 * An option has disappeared somehow - find it via searching our code-base for it's install code. It doesn't get returned, just loaded up. This function will produce a fatal error if we cannot find it.
 *
 * @return boolean Whether to run in multi-lang mode
 *
 * @ignore
 */
function _multi_lang()
{
    global $MULTI_LANG_CACHE;

    $_dir = opendir(get_file_base() . '/lang/');
    $_langs = [];
    while (false !== ($file = readdir($_dir))) {
        if (($file != fallback_lang()) && ($file[0] != '.') && ($file[0] != '_') && ($file != 'index.html') && ($file != 'langs.ini') && ($file != 'map.ini')) {
            if (is_dir(get_file_base() . '/lang/' . $file)) {
                $_langs[$file] = 'lang';
            }
        }
    }
    closedir($_dir);
    if (!in_safe_mode()) {
        $_dir = @opendir(get_custom_file_base() . '/lang_custom/');
        if ($_dir !== false) {
            while (false !== ($file = readdir($_dir))) {
                if (($file != fallback_lang()) && ($file[0] != '.') && ($file[0] != '_') && ($file != 'index.html') && ($file != 'langs.ini') && ($file != 'map.ini') && (!isset($_langs[$file]))) {
                    if (is_dir(get_custom_file_base() . '/lang_custom/' . $file)) {
                        $_langs[$file] = 'lang_custom';
                    }
                }
            }
            closedir($_dir);
        }
        if (get_custom_file_base() != get_file_base()) {
            $_dir = @opendir(get_file_base() . '/lang_custom/');
            if ($_dir !== false) {
                while (false !== ($file = readdir($_dir))) {
                    if (($file != fallback_lang()) && ($file[0] != '.') && ($file[0] != '_') && ($file != 'index.html') && ($file != 'langs.ini') && ($file != 'map.ini') && (!isset($_langs[$file]))) {
                        if (is_dir(get_file_base() . '/lang_custom/' . $file)) {
                            $_langs[$file] = 'lang_custom';
                        }
                    }
                }
                closedir($_dir);
            }
        }
    }

    foreach ($_langs as $lang => $dir) {
        if (/*optimisation*/is_file((($dir == 'lang_custom') ? get_custom_file_base() : get_file_base()) . '/' . $dir . '/' . $lang . '/global.ini')) {
            $MULTI_LANG_CACHE = true;
            break;
        }

        $_dir2 = @opendir((($dir == 'lang_custom') ? get_custom_file_base() : get_file_base()) . '/' . $dir . '/' . $lang);
        if ($_dir2 !== false) {
            while (false !== ($file2 = readdir($_dir2))) {
                if (substr($file2, -4) == '.ini') {
                    $MULTI_LANG_CACHE = true;
                    break;
                }
            }
            closedir($_dir2);
        }
    }

    return $MULTI_LANG_CACHE;
}

/**
 * Get the default value of a config option.
 *
 * @param  ID_TEXT $name The name of the option
 * @return ?SHORT_TEXT The value (null: disabled / no such option)
 */
function get_default_option($name)
{
    $path = 'hooks/systems/config/' . filter_naughty_harsh($name, true);
    clearstatcache();
    if (!is_file(get_file_base() . '/sources/' . $path . '.php') && !is_file(get_file_base() . '/sources_custom/' . $path . '.php')) {
        return null;
    }

    require_code($path);
    $ob = object_factory('Hook_config_' . filter_naughty_harsh($name, true));

    $value = $ob->get_default();
    if ($value === null) {
        $value = ''; // Cannot save a null. We don't need to save as null anyway, options are only disabled when they wouldn't have been used anyway
    }

    return $value;
}

/**
 * Set a configuration option with the specified values.
 * Note that you may wish to also empty the template cache after running this function. Config options may have been set into template(s).
 *
 * @param  ID_TEXT $name The name of the value
 * @param  LONG_TEXT $value The value
 * @param  BINARY $will_be_formally_set Whether this was a human-set value
 */
function set_option($name, $value, $will_be_formally_set = 1)
{
    global $CONFIG_OPTIONS_CACHE;

    if ($will_be_formally_set == 1) {
        $previous_value = get_option($name);
    }

    require_code('hooks/systems/config/' . filter_naughty_harsh($name));
    $ob = object_factory('Hook_config_' . filter_naughty_harsh($name), true);
    if ($ob === null) {
        return;
    }
    $details = $ob->get_details();

    $needs_dereference = ($details['type'] == 'transtext' || $details['type'] == 'transline' || $details['type'] == 'comcodetext' || $details['type'] == 'comcodeline') ? 1 : 0;

    if (!isset($CONFIG_OPTIONS_CACHE[$name])) {
        // If not installed with a DB setting row, install it; even if it's just the default, we need it for performance
        $map = [
            'c_name' => $name,
            'c_set' => $will_be_formally_set,
            'c_value' => $value,
            'c_needs_dereference' => $needs_dereference,
        ];
        if ($needs_dereference == 1) {
            $map = insert_lang('c_value_trans', $value, 1) + $map;
        } else {
            $map['c_value_trans'] = multi_lang_content() ? null : '';
        }

        // For use by get_option during same script execution
        $CONFIG_OPTIONS_CACHE[$name] = $map + ['_cached_string_value' => $value];

        if ($will_be_formally_set == 0 && $GLOBALS['IN_MINIKERNEL_VERSION']) {
            return; // Don't save in the installer
        }

        // Save insert
        $GLOBALS['SITE_DB']->query_insert('config', $map, false, true/*block race condition errors*/);
    } else {
        // Save edit
        $map = [
            'c_set' => $will_be_formally_set,
            'c_value' => $value,
        ];
        if ($needs_dereference == 1) { // Translated
            $current_value = multi_lang_content() ? $CONFIG_OPTIONS_CACHE[$name]['c_value_trans'] : $CONFIG_OPTIONS_CACHE[$name]['c_value'];
            if ($current_value === null) {
                $map += insert_lang('c_value_trans', $value, 1);
            } else {
                $map += lang_remap('c_value_trans', $current_value, $value);
            }
            $GLOBALS['SITE_DB']->query_update('config', $map, ['c_name' => $name], '', 1);
        } else { // Not translated
            $GLOBALS['SITE_DB']->query_update('config', $map, ['c_name' => $name], '', 1);
        }

        // For use by get_option during same script execution
        $CONFIG_OPTIONS_CACHE[$name] = $map + ['_cached_string_value' => $value] + $CONFIG_OPTIONS_CACHE[$name];
    }

    // Log it
    if ((function_exists('log_it')) && ($will_be_formally_set == 1) && ($previous_value != $value)) {
        require_lang('config');
        log_it('CONFIGURATION', $name, $value);
    }

    // Clear caches
    if (function_exists('persistent_cache_delete')) {
        persistent_cache_delete('OPTIONS');
    }
    if (class_exists('Self_learning_cache')) {
        Self_learning_cache::erase_smart_cache();
    }
}

/**
 * Update a reference stored in a config option.
 *
 * @param  SHORT_TEXT $old_setting The old value
 * @param  SHORT_TEXT $setting The name value
 * @param  ID_TEXT $type The type
 */
function config_update_value_ref($old_setting, $setting, $type)
{
    $hooks = find_all_hook_obs('systems', 'config', 'Hook_config_');
    $all_options = [];
    foreach ($hooks as $hook => $ob) {
        $details = $ob->get_details();
        if (($details['type'] == $type) && (get_option($hook) == $old_setting)) {
            $GLOBALS['SITE_DB']->query_update('config', ['c_value' => $setting], ['c_name' => $hook], '', 1);
        }
    }
}

/**
 * Get a URL to where to edit a config option.
 *
 * @param  ID_TEXT $name The config option name
 * @return ?URLPATH URL to set the config option (null: no such option exists)
 */
function config_option_url($name)
{
    $value = get_option($name, true);
    if ($value === null) {
        return null;
    }

    require_code('hooks/systems/config/' . filter_naughty_harsh($name));
    $ob = object_factory('Hook_config_' . filter_naughty_harsh($name));
    $details = $ob->get_details();

    $_config_url = build_url(['page' => 'admin_config', 'type' => 'category', 'id' => $details['category']], get_module_zone('admin_config'));
    $config_url = $_config_url->evaluate();
    $config_url .= '#group_' . $details['group'];

    return $config_url;
}

/**
 * Deletes a specified config option permanently from the database.
 *
 * @param  ID_TEXT $name The codename of the config option
 */
function delete_config_option($name)
{
    $rows = $GLOBALS['SITE_DB']->query_select('config', ['*'], ['c_name' => $name], '', 1);
    if (array_key_exists(0, $rows)) {
        $myrow = $rows[0];
        if (($myrow['c_needs_dereference'] == 1) && (is_numeric($myrow['c_value']))) {
            delete_lang($myrow['c_value_trans']);
        }
        $GLOBALS['SITE_DB']->query_delete('config', ['c_name' => $name], '', 1);
        /*global $CONFIG_OPTIONS_CACHE;  Don't do this, it will cause problems in some parts of the code
        unset($CONFIG_OPTIONS_CACHE[$name]);*/
    }
    if (function_exists('persistent_cache_delete')) {
        persistent_cache_delete('OPTIONS');
    }
}

/**
 * Rename a config option.
 *
 * @param  ID_TEXT $old The old name
 * @param  ID_TEXT $new The new name
 */
function rename_config_option($old, $new)
{
    $GLOBALS['SITE_DB']->query_delete('config', ['c_name' => $new], '', 1);

    $GLOBALS['SITE_DB']->query_update('config', ['c_name' => $new], ['c_name' => $old], '', 1);

    if (function_exists('persistent_cache_delete')) {
        persistent_cache_delete('OPTIONS');
    }
}
