<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_locations
 */

/**
 * Standard locations code initialisation function.
 *
 * @ignore
 */
function init__locations()
{
    require_code('isocodes/vendor/autoload');

    global $ISO_CODES;
    $ISO_CODES = new \Sokil\IsoCodes\IsoCodesFactory();
}

/**
 * Find list of countries.
 *
 * @return array List of countries
 */
function find_countries() : array
{
    global $ISO_CODES;
    return $ISO_CODES->getCountries()->toArray();
}

/**
 * Find list of regions.
 *
 * @param  ID_TEXT $iso The country code for which to get regions
 * @return array List of regions
 */
function find_regions_by_country(string $iso) : array
{
    global $ISO_CODES;
    return $ISO_CODES->getSubdivisions()->getAllByCountryCode($iso);
}

/**
 * Find the ISO country code from a country name.
 *
 * @param  string $country Country name
 * @return ?string ISO country code (null: not found)
 */
function find_iso_country_from_name(string $country) : ?string
{
    global $ISO_CODES;
    $country = $ISO_CODES->getCountries()->find('name', $country);
    if ($country === null) {
        return null;
    }

    return $country->getAlpha2();
}

/**
 * Find the country name of an ISO country code.
 *
 * @param  ?string $iso ISO country code (null: unknown)
 * @return ?string Country name (null: not found)
 */
function find_country_name_from_iso(?string $iso) : ?string
{
    global $ISO_CODES;

    $country = null;

    switch (strlen($iso)) {
        case 2:
            $country = $ISO_CODES->getCountries()->getByAlpha2($iso);
            break;
        case 3:
            $country = $ISO_CODES->getCountries()->getByAlpha3($iso);
            break;
    }

    if ($country === null) {
        return null;
    }

    return $country->getLocalName();
}

/**
 * Find the region name of an ISO code.
 *
 * @param  ?string $iso ISO code (null: unknown)
 * @return ?string Region name (null: not found)
 */
function find_region_name_from_iso(?string $iso) : ?string
{
    global $ISO_CODES;
    $subdivision = $ISO_CODES->getSubdivisions()->getByCode($iso);
    if ($subdivision === null) {
        return null;
    }

    return $subdivision->getLocalName();
}

/**
 * Get a nice, formatted HTML list of countries.
 *
 * @param  array $selected_countries The currently selected countries
 * @return Tempcode The list of countries
 */
function create_country_selection_list(array $selected_countries = []) : object
{
    require_code('templates');

    $countries = find_countries();

    $list = new Tempcode();

    foreach ($countries as $country) {
        $list->attach(form_input_list_entry($country->getAlpha2(), in_array($country->getAlpha2(), $selected_countries), $country->getLocalName()));
    }

    return $list;
}

/**
 * Get a nice, formatted HTML list of regions.
 *
 * @param  ID_TEXT $iso The country ISO code
 * @param  array $selected_regions The currently selected regions
 * @return Tempcode The list of regions
 */
function create_region_selection_list(string $iso, array $selected_regions = []) : object
{
    require_code('templates');

    $subdivisions = find_regions_by_country($iso);

    $list = new Tempcode();

    foreach ($subdivisions as $subdivision) {
        $list->attach(form_input_list_entry($subdivision->getCode(), in_array($subdivision->getCode(), $selected_regions), $subdivision->getLocalName()));
    }

    return $list;
}

/**
 * Get a nice, formatted HTML list of USA states.
 *
 * @param  array $selected_states The currently selected states
 * @return Tempcode The list of states
 */
function create_usa_state_selection_list(array $selected_states = []) : object
{
    // TODO: need upgrade code on state field to change values so they all start with 'US-' and to migrate them to new region field
    return create_region_selection_list('US', $selected_states);
}

/**
 * Find the active region.
 * Might return the country if a specific region could not be found.
 *
 * @param  ?MEMBER $member_id The member to fetch (null: current member)
 * @return ?string The active region (null: none found, unfiltered)
 */
function get_region(?int $member_id = null) : ?string
{
    $region = get_param_string('keep_region', null);
    if ($region !== null) {
        if ($region == '') {
            return null;
        }
        return $region;
    }

    if (running_script('install')) {
        return get_country();
    }

    if ($member_id === null) {
        $member_id = get_member();
    }

    if (!is_guest($member_id)) {
        $region = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_region');
        if (!cms_empty_safe($region)) {
            return $region;
        }
    }

    return get_country();
}

/**
 * Find the active ISO country.
 *
 * @param  ?MEMBER $member_id The member to fetch (null: current member)
 * @return ?string The active region (null: none found, unfiltered)
 */
function get_country(?int $member_id = null) : ?string
{
    $country = get_param_string('keep_country', null);
    if ($country !== null) {
        if ($country == '') {
            return null;
        }
        return $country;
    }

    if (running_script('install')) {
        $ip = get_ip_address();
        $country = geolocate_ip($ip);
        return $country;
    }

    if ($member_id === null) {
        $member_id = get_member();
    }

    if (($member_id !== null) && !is_guest($member_id)) {
        $country = get_cms_cpf('country', $member_id);
        if ((!empty($country)) && (strpos($country, '|') === false)) {
            return $country;
        }
    }

    if ($member_id === null) {
        $ip = get_ip_address();
    } else {
        $ip = $GLOBALS['FORUM_DRIVER']->get_member_ip($member_id);
        if ($ip === null) {
            $ip = '127.0.0.1';
        }
    }

    $country = geolocate_ip($ip);
    if ($country !== null) {
        return $country;
    }

    return null;
}

/**
 * Find the country an IP address long is located in.
 *
 * @param  ?IP $ip The IP to geolocate (null: current user's IP)
 * @return ?string The country initials (null: unknown)
 */
function geolocate_ip(?string $ip = null) : ?string
{
    static $result = [];

    if ($ip === null) {
        $ip = get_ip_address();
    }

    if (array_key_exists($ip, $result)) {
        return $result[$ip];
    }

    if (get_db_type() == 'xml') { // Too much data
        return null;
    }

    $long_ip = ip2long($ip);
    if ($long_ip === false) {
        $result[$ip] = null;
        return null; // No IP6 support
    }

    if (running_script('install')) {
        $result[$ip] = null;
        return null;
    }

    $query = 'SELECT * FROM ' . get_table_prefix() . 'ip_country WHERE begin_num<=' . sprintf('%u', $long_ip) . ' AND end_num>=' . sprintf('%u', $long_ip);
    $results = $GLOBALS['SITE_DB']->query($query, 1);

    if (!array_key_exists(0, $results)) {
        $result[$ip] = null;
    } elseif ($results[0]['country'] !== null) {
        $result[$ip] = $results[0]['country'];
    } else {
        $result[$ip] = null;
    }

    return $result[$ip];
}

/**
 * Get a field inputter for a region.
 *
 * @param  mixed $pretty_name The human-readable name for this field (Comcode or Tempcode)
 * @param  mixed $description The description for this field (Comcode or Tempcode)
 * @param  ID_TEXT $stub The field name stub
 * @param  ?ID_TEXT $default The region ISO code which will be populated in the field by default (null: none)
 * @param  boolean $required Whether the field is required
 * @param  boolean $read_only Whether the field cannot be edited
 * @param  ?integer $tabindex The tab index for this field (null: determine for us)
 * @param  integer $input_size The size of the field
 * @param  ~?string $autocomplete The autocomplete field to use (false: explicitly disable) (null: use the default for this field if applicable)
 * @return Tempcode The field
 */
function form_input_region($pretty_name, $description, string $stub, ?string $default = null, bool $required = false, bool $read_only = false, ?int $tabindex = null, int $input_size = 10, $autocomplete = null) : object
{
    require_code('form_templates');

    $field_tabindex = get_form_field_tabindex($tabindex);

    list($country_input, $region_input) = _form_input_region($stub, $default, $required, $read_only, $input_size);

    // Put it all together
    $form_content = new Tempcode();
    $form_content->attach($country_input);
    $form_content->attach($region_input);
    return _form_input($stub, $pretty_name, $description, $form_content, $required, false, $field_tabindex);
}

/**
 * Get the Tempcode for a country and region selection.
 *
 * @param  ID_TEXT $stub The field name stub
 * @param  ?ID_TEXT $default The region ISO code which will be populated in the field by default (null: none)
 * @param  boolean $required Whether the field is required
 * @param  boolean $read_only Whether the field cannot be edited
 * @param  integer $input_size The size of the field
 * @return array A double; the country field and the region field
 * @ignore
 */
function _form_input_region(string $stub, ?string $default = null, bool $required = false, bool $read_only = false, int $input_size = 10) : array
{
    require_code('form_templates');
    require_lang('locations');

    if ($default == '') { // Treat blank default as null as it is generally not acceptable
        $default = null;
    }

    $selected_countries = [];
    if ($default !== null) {
        $region_parts = explode('-', $default, 2);
        $selected_countries = [$region_parts[0]];
    }

    if (count($selected_countries) == 0) {
        $geo_country = get_country();
        if ($geo_country !== null) {
            $selected_countries = [$geo_country];
        }
    }

    // Input for country
    $country_list = form_input_list_entry('', ($default === null), do_lang_tempcode('CHOOSE_COUNTRY'));
    $country_list->attach(create_country_selection_list($selected_countries));
    $country_input = do_template('FORM_SCREEN_INPUT_LIST', [
        '_GUID' => '68441865957e5f07b44c27e7eb0a2ab8',
        'TABINDEX' => strval(get_form_field_tabindex()),
        'REQUIRED' => $required,
        'NAME' => $stub . '_country',
        'CONTENT' => $country_list,
        'INLINE_LIST' => false,
        'IMAGES' => null,
        'SIZE' => strval($input_size),
        'AUTOCOMPLETE' => null,
        'READ_ONLY' => (($read_only) ? '1' : '0'),
        'ON_CHANGE' => 'js-onchange-country-region',
    ]);

    // Input for region
    $region_list = form_input_list_entry('', true, do_lang_tempcode('REGION_MUST_CHOOSE_COUNTRY'));
    $region_input = new Tempcode();

    if (array_key_exists(0, $selected_countries)) {
        $region_list = create_region_selection_list($selected_countries[0], (($default !== null) ? [$default] : []));
    }
    $region_input = do_template('FORM_SCREEN_INPUT_LIST', [
        '_GUID' => '3cc8c1f83c0c56dfa810ce97c2fe65af',
        'TABINDEX' => strval(get_form_field_tabindex()),
        'REQUIRED' => $required,
        'NAME' => $stub . '_region',
        'CONTENT' => $region_list,
        'INLINE_LIST' => false,
        'IMAGES' => null,
        'SIZE' => strval($input_size),
        'AUTOCOMPLETE' => null,
        'READ_ONLY' => (($read_only) ? '1' : '0')
    ]);

    return [$country_input, $region_input];
}

/**
 * Retrieve a POSTed region ISO code from a single region field.
 *
 * @param  ID_TEXT $stub The parameter name stub
 * @param  ~?string $default The default value (false: none, and require the parameter to be provided) (null: none, and do not require)
 * @param  integer $filters A bitmask of INPUT_FILTER_* filters
 * @return ?string The ISO region code (null: not provided and was not required)
 */
function post_param_region(string $stub, $default, int $filters = INPUT_FILTER_DEFAULT_POST) : ?string
{
    require_lang('locations');

    $name = $stub . '_region';

    $region = post_param_string($name, $default, $filters);

    // Do not accept blank / null regions unless a default value is specified
    if ((($region === '') || ($region === null)) && ($default === false)) {
        require_code('failure');
        improperly_filled_in_post($name);
    }

    // Integrity check; make sure the region code is valid
    if (($region !== null) && ($region != '') && (find_region_name_from_iso($region) === null)) {
        warn_exit(do_lang_tempcode('NOT_VALID_REGION', escape_html($region)));
    }

    return $region;
}

/**
 * Get an input for multiple region codes. A new line is added when the prior one isn't blank.
 * This renders as multiple lines of text where region codes can be typed. Additionally, a region selection is rendered at the top which can populate the codes according to country and region name.
 *
 * @param  mixed $pretty_name A human intelligible name for this input field, provided in plain-text format (string or Tempcode)
 * @param  mixed $description A description for this input field, provided in HTML format (string or Tempcode)
 * @param  ID_TEXT $name The base parameter name which this input field is for (as this takes multiple parameters, they are named <name><x>). This name must end with '_'.
 * @param  array $_default_array An array or map of lines to use as default (at least this many lines, filled by this array, will be presented by default) (map format: [name=>string, readonly=>boolean])
 * @param  integer $num_required The minimum number of inputs allowed
 * @param  ?integer $tabindex The tab index of the field (null: not specified)
 * @param  ?string $pattern Custom regex pattern, covers whole field value (null: none)
 * @param  ?string $pattern_error Custom regex pattern validation error (null: none)
 * @return Tempcode The input field
 */
function form_input_region_multi($pretty_name, $description, string $name, array $_default_array, int $num_required, ?int $tabindex = null, ?string $pattern = null, ?string $pattern_error = null) : object
{
    require_code('form_templates');

    $field_tabindex = get_form_field_tabindex($tabindex);

    // Multi-line maintenance (must match what we have in form_input_line_multi)
    if (substr($name, -1) != '_' && substr($name, -2) != '[]') {
        $name .= '_';
    }

    if ($num_required == 0) {
        $required = filter_form_field_required($name, false);
        if ($required) {
            $num_required = 1;
        }
    }

    // TODO: Region selection with special behaviour
    /*
    list($country_input, $region_input) = _form_input_region(preg_replace('#\[\]$#', '', $name) . '_select', null, false, false, 10);
    $button_input = do_template('BUTTON_SCREEN', [
        '_GUID' => '853d6cf22ed9547a99893e221d32fbc6',
        'IMMEDIATE' => false,
        'URL' => null,
        'TITLE' => do_lang_tempcode('SELECT'),
        'IMG' => 'buttons/proceed',
        'HIDDEN' => new Tempcode(),
        'JS_BTN' => 'js-btn-region-multi',
        'NAME' => preg_replace('#\[\]$#', '', $name) . '_select_btn',
    ]);
    */

    // Multi-line maintenance; must match what we have in form_input_line_multi
    $tabindex = get_form_field_tabindex($tabindex);
    $default_array = [];

    // Convert answers to a map.
    $i = 0;
    foreach ($_default_array as $default) {
        $_required = ($i < $num_required) ? '-required' : '';
        if (is_array($default) && array_key_exists('name', $default)) {
            $default_array[] = [
                'NAME' => $default['name'],
                'I' => strval($i),
                'REQUIRED' => $_required,
                'READONLY' => array_key_exists('readonly', $default)
            ];
        } else {
            $default_array[] = [
                'NAME' => $default,
                'I' => strval($i),
                'REQUIRED' => $_required,
                'READONLY' => false
            ];
        }
        $i++;
    }

    // Add in blank / initial lines where applicable
    $num_to_show_initially = max($num_required, count($default_array) + 1);
    for (; $i < $num_to_show_initially; $i++) {
        $default_array[] = [
            'NAME' => ($i === 0) ? filter_form_field_default($name, '') : '',
            'I' => strval($i),
            'REQUIRED' => ($i >= $num_required) ? '' : '-required',
            'READONLY' => false
        ];
        $i++;
    }

    // Multi-line input for region codes
    $region_multi_input = do_template('FORM_SCREEN_INPUT_LINE_MULTI', [
        '_GUID' => '8898fb81b2da5093bae3a351c57a6934',
        'CLASS' => 'line',
        'MAXLENGTH' => get_field_restrict_property('maxlength', $name),
        'PRETTY_NAME' => $pretty_name,
        'TABINDEX' => strval($tabindex),
        'NAME_STUB' => $name,
        'DEFAULT_ARRAY' => $default_array,
        'PATTERN' => $pattern,
        'NUM_REQUIRED' => strval($num_required),
    ]);

    // Put it all together
    $form_content = new Tempcode();
    //$form_content->attach($country_input);
    //$form_content->attach($region_input);
    //$form_content->attach($button_input);
    $form_content->attach($region_multi_input);
    return _form_input(preg_replace('#\[\]$#', '', $name), $pretty_name, $description, $form_content, $num_required > 0, false, $field_tabindex, false, true, '', $pattern_error);
}

/**
 * Retrieve POSTed regions / countries from a multi-region field.
 *
 * @param  ID_TEXT $stub The parameter name stub
 * @param  ~?string $default The default value (false: none, and require the parameter to be provided) (null: none, and do not require)
 * @param  integer $filters A bitmask of INPUT_FILTER_* filters
 * @return ?string The ISO region / country codes separated by a new line (null: not provided and was not required)
 */
function post_param_regions(string $stub, $default, int $filters = INPUT_FILTER_DEFAULT_POST) : ?string
{
    require_lang('locations');

    $i = 0;
    $values = [];
    $countries_included = [];
    do {
        $tmp_name = $stub . '_' . strval($i);

        // NB: We cannot use post_param_region because that comes from the single-item field
        $_value = post_param_string($tmp_name, null, $filters);
        if (($_value === null) && ($i == 0)) {
            return '';
        }
        if (!cms_empty_safe($_value)) {
            $_value = cms_strtoupper_ascii($_value);

            // Integrity check; make sure the region / country code is valid. If not, ignore it but attach a message.
            if ((find_region_name_from_iso($_value) !== null) || (find_country_name_from_iso($_value) !== null)) {
                $values[] = $_value;

                if (strpos($_value, '-') === false) {
                    $countries_included[] = $_value;
                }
            } else {
                attach_message(do_lang_tempcode('NOT_VALID_REGION_COUNTRY', escape_html($_value)), 'warn');
            }
        }
        $i++;
    } while ($_value !== null);

    // Clean out regions that belong in the same countries as full country codes provided
    foreach ($values as $i => $value) {
        $region_parts = explode('-', $value, 2);
        if (count($region_parts) < 2) {
            continue;
        }
        if (in_array($region_parts[0], $countries_included)) {
            unset($values[$i]);
        }
    }

    // Remove duplicates
    $values = array_unique($values);

    // Do not accept blank / null final values unless a default value is specified
    if ((count($values) == 0) && ($default === false)) {
        require_code('failure');
        improperly_filled_in_post($stub);
    }

    return implode("\n", $values);
}

/**
 * Determine if a given country or region ISO code is within the given country/region ISO conditions.
 * A country location passes if any country conditions match; it ignores region conditions.
 * A region location passes if any country conditions are in the same country, or any region conditions match.
 *
 * @param  ?ID_TEXT $_location The country or region ISO code to check (null: use the region of the member)
 * @param  array $conditions Array of country and region ISO codes which result in a pass for this check
 * @return boolean Whether the location is within any of the given conditions
 */
function is_location_within(?string $_location, array $conditions) : bool
{
    if ($_location === null) {
        $_location = get_region();
    }
    if ($_location === null) { // Failsafe; return false to reject access
        return false;
    }

    $location = cms_strtoupper_ascii($_location);
    $location_parts = explode('-', $location, 2);

    foreach ($conditions as $_condition) {
        $condition = cms_strtoupper_ascii($_condition);
        $condition_parts = explode('-', $condition, 2);

        // Location is a region
        if (array_key_exists(1, $location_parts)) {
            if (array_key_exists(1, $condition_parts)) {
                if ($condition == $location) {
                    return true;
                }
            } else {
                if ($condition_parts[0] == $location_parts[0]) {
                    return true;
                }
            }
        }

        // Condition is a country (and location is also a country)
        if (!array_key_exists(1, $condition_parts)) {
            if ($location == $condition_parts[0]) {
                return true;
            }
        }
    }

    return false;
}

/**
 * Get SQL to add to wider SQL query, for region filtering.
 * If the provided region is a region, it will match against any content specifying said region or the full country.
 * If the provided region is a country, it will only match against country-wide content in the same country (it will not match region-specific content).
 *
 * @param  string $content_type The content type
 * @param  string $field_name_to_join Field name for content ID in table being connected to
 * @param  ?string $region Region or country code to show for (null: auto-detect)
 * @return string SQL
 */
function sql_region_filter(string $content_type, string $field_name_to_join, ?string $region = null) : string
{
    if ($region === null) {
        $region = get_region();
    }
    if ($region === null) {
        return '';
    }

    $region_parts = explode('-', $region, 2);

    $ret = ' AND (';
    $ret .= 'NOT EXISTS(SELECT * FROM ' . get_table_prefix() . 'content_regions cr WHERE ' . db_cast($field_name_to_join, 'CHAR') . '=cr.content_id AND ' . db_string_equal_to('content_type', $content_type) . ')';

    // Exact region match
    $ret .= ' OR ';
    $ret .= 'EXISTS(SELECT * FROM ' . get_table_prefix() . 'content_regions cr WHERE ' . db_cast($field_name_to_join, 'CHAR') . '=cr.content_id AND ' . db_string_equal_to('cr.region', $region) . ' AND ' . db_string_equal_to('content_type', $content_type) . ')';

    // Provided region is actually a region, so also match against any country-wide content
    if (array_key_exists(1, $region_parts)) {
        $ret .= ' OR ';
        $ret .= 'EXISTS(SELECT * FROM ' . get_table_prefix() . 'content_regions cr WHERE ' . db_cast($field_name_to_join, 'CHAR') . '=cr.content_id AND ' . db_string_equal_to('cr.region', $region_parts[0]) . ' AND ' . db_string_equal_to('content_type', $content_type) . ')';
    }

    $ret .= ')';

    return $ret;
}

/**
 * Find whether geolocation data is installed.
 *
 * @return boolean Whether it is
 */
function has_geolocation_data() : bool
{
    static $ret = null;
    if ($ret !== null) {
        return $ret;
    }

    // An entry with the country '00' is added by the task as the last row simply to indicate the data has been fully installed
    $ret = ($GLOBALS['SITE_DB']->query_select_value_if_there('ip_country', 'id', ['country' => '00']) !== null);

    return $ret;
}
