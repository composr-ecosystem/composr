<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_locations
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__locations()
{
    require_code('isocodes/vendor/autoload');

    global $ISO_CODES;
    $ISO_CODES = new \Sokil\IsoCodes\IsoCodesFactory();
}

/**
 * TODO: Find structure of continents and countries.
 *
 * @return object
 */
function find_continents_and_countries() : object
{
    global $ISO_CODES;
    return $ISO_CODES->getCountries();
}

/**
 * TODO: Find list of continents.
 *
 * @return array List of continents
 */
function find_continents() : array
{
    return []; // TODO
}

/**
 * Find list of countries.
 *
 * @return array List of countries
 */
function find_countries() : array
{
    global $ISO_CODES;
    return $ISO_CODES->getCountries()->toArray();
}

/**
 * Find list of regions.
 *
 * @param  ID_TEXT $iso The country code for which to get regions
 * @return array List of regions
 */
function find_regions_by_country(string $iso) : array
{
    global $ISO_CODES;
    return $ISO_CODES->getSubdivisions()->getAllByCountryCode($iso);
}

/**
 * TODO: Find continent of a country.
 *
 * @param  string $country ISO country code
 * @return ?string Continent (null: not found)
 */
function find_continent(string $country) : ?string
{
    return null; // TODO
}

/**
 * Find the ISO country code from a country name.
 *
 * @param  string $country Country name
 * @return ?string ISO country code (null: not found)
 */
function find_iso_country_from_name(string $country) : ?string
{
    global $ISO_CODES;
    $country = $ISO_CODES->getCountries()->find('name', $country);
    if ($country === null) {
        return null;
    }

    return $country->getAlpha2();
}

/**
 * Find the country name of an ISO country code.
 *
 * @param  ?string $iso ISO country code (null: unknown)
 * @return ?string Country name (null: not found)
 */
function find_country_name_from_iso(?string $iso) : ?string
{
    global $ISO_CODES;

    switch (strlen($iso)) {
        case 2:
            $country = $ISO_CODES->getCountries()->getByAlpha2($iso);
            break;
        case 3:
            $country = $ISO_CODES->getCountries()->getByAlpha3($iso);
            break;
    }

    if ($country === null) {
        return null;
    }

    return $country->getLocalName();
}

/**
 * Find the region name of an ISO code.
 *
 * @param  ?string $iso ISO code (null: unknown)
 * @return ?string Region name (null: not found)
 */
function find_region_name_from_iso(?string $iso) : ?string
{
    global $ISO_CODES;
    $subdivision = $ISO_CODES->getSubdivisions()->getByCode($iso);
    if ($subdivision === null) {
        return null;
    }

    return $subdivision->getLocalName();
}

/**
 * Get a nice, formatted HTML list of countries.
 *
 * @param  array $selected_countries The currently selected countries
 * @return Tempcode The list of countries
 */
function create_country_selection_list(array $selected_countries = []) : object
{
    require_code('templates');

    $countries = find_countries();

    $list = new Tempcode();

    foreach ($countries as $country) {
        $list->attach(form_input_list_entry($country->getAlpha2(), in_array($country->getAlpha2(), $selected_countries), $country->getLocalName()));
    }

    return $list;
}

/**
 * Get a nice, formatted HTML list of regions.
 *
 * @param  ID_TEXT $iso The country ISO code
 * @param  array $selected_regions The currently selected regions
 * @return Tempcode The list of regions
 */
function create_region_selection_list(string $iso, array $selected_regions = []) : object
{
    require_code('templates');

    $subdivisions = find_regions_by_country($iso);

    $list = new Tempcode();

    foreach ($subdivisions as $subdivision) {
        $list->attach(form_input_list_entry($subdivision->getCode(), in_array($subdivision->getCode(), $selected_regions), $subdivision->getLocalName()));
    }

    return $list;
}

/**
 * Get a nice, formatted HTML list of USA states.
 *
 * @param  array $selected_states The currently selected states
 * @return Tempcode The list of states
 */
function create_usa_state_selection_list(array $selected_states = []) : object
{
    // TODO: need upgrade code on state field to change values so they all start with 'US-' and to migrate them to new region field
    return create_region_selection_list('US', $selected_states);
}

/**
 * Find the active region for the current user.
 * Might return the country if a specific region could not be found.
 *
 * @return ?string The active region (null: none found, unfiltered)
 */
function get_region() : ?string
{
    $region = get_param_string('keep_region', null);
    if ($region !== null) {
        if ($region == '') {
            return null;
        }
        return $region;
    }

    if (!is_guest()) {
        $region = get_cms_cpf('region'); // TODO: implement
        if ((!empty($region)) && (strpos($region, '|') === false)) {
            return $region;
        }
    }

    return get_country();
}

/**
 * Find the active ISO country for the current user.
 *
 * @return ?string The active region (null: none found, unfiltered)
 */
function get_country() : ?string
{
    $country = get_param_string('keep_country', null);
    if ($country !== null) {
        if ($country == '') {
            return null;
        }
        return $country;
    }

    if (!is_guest()) {
        $country = get_cms_cpf('country');
        if ((!empty($country)) && (strpos($country, '|') === false)) {
            return $country;
        }
    }

    $country = geolocate_ip();
    if ($country !== null) {
        return $country;
    }

    return null;
}

/**
 * Find the country an IP address long is located in.
 *
 * @param  ?IP $ip The IP to geolocate (null: current user's IP)
 * @return ?string The country initials (null: unknown)
 */
function geolocate_ip(?string $ip = null) : ?string
{
    static $result = [];

    if ($ip === null) {
        $ip = get_ip_address();
    }

    if (array_key_exists($ip, $result)) {
        return $result[$ip];
    }

    if (get_db_type() == 'xml') { // Too much data
        return null;
    }

    $long_ip = ip2long($ip);
    if ($long_ip === false) {
        $result[$ip] = null;
        return null; // No IP6 support
    }

    if (running_script('install')) {
        $result[$ip] = null;
        return null;
    }

    $query = 'SELECT * FROM ' . get_table_prefix() . 'ip_country WHERE begin_num<=' . sprintf('%u', $long_ip) . ' AND end_num>=' . sprintf('%u', $long_ip);
    $results = $GLOBALS['SITE_DB']->query($query, 1);

    if (!array_key_exists(0, $results)) {
        $result[$ip] = null;
    } elseif ($results[0]['country'] !== null) {
        $result[$ip] = $results[0]['country'];
    } else {
        $result[$ip] = null;
    }

    return $result[$ip];
}

/**
 * Get a region inputter.
 *
 * @param  array $regions The currently selected regions
 * @return Tempcode The region inputter
 */
function form_input_regions(array $regions = []) : object
{
    require_code('form_templates');
    $list_groups = create_region_selection_list($regions);
    return form_input_multi_list(do_lang_tempcode('FILTER_REGIONS'), do_lang_tempcode('DESCRIPTION_FILTER_REGIONS'), 'regions', $list_groups, null, 10);
}

/**
 * Get SQL to add to wider SQL query, for region filtering.
 *
 * @param  string $content_type The content type
 * @param  string $field_name_to_join Field name for content ID in table being connected to
 * @param  ?string $region Region to show for (null: auto-detect)
 * @return string SQL
 */
function sql_region_filter(string $content_type, string $field_name_to_join, ?string $region = null) : string
{
    if ($region === null) {
        $region = get_region();
    }
    if ($region === null) {
        return '';
    }
    $ret = ' AND (';
    $ret .= 'NOT EXISTS(SELECT * FROM ' . get_table_prefix() . 'content_regions cr WHERE ' . db_cast($field_name_to_join, 'CHAR') . '=cr.content_id AND ' . db_string_equal_to('content_type', $content_type) . ')';
    $ret .= ' OR ';
    $ret .= 'EXISTS(SELECT * FROM ' . get_table_prefix() . 'content_regions cr WHERE ' . db_cast($field_name_to_join, 'CHAR') . '=cr.content_id AND ' . db_string_equal_to('cr.region', $region) . ' AND ' . db_string_equal_to('content_type', $content_type) . ')';
    $ret .= ')';
    return $ret;
}

/**
 * Find whether geolocation data is installed.
 *
 * @return boolean Whether it is
 */
function has_geolocation_data() : bool
{
    static $ret = null;
    if ($ret !== null) {
        return $ret;
    }

    // An entry with the country '00' is added by the task as the last row simply to indicate the data has been fully installed
    $ret = ($GLOBALS['SITE_DB']->query_select_value_if_there('ip_country', 'id', ['country' => '00']) !== null);

    return $ret;
}
