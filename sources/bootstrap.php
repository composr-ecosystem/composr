<?php /*

Composr
Copyright (c) Christopher Graham, 2004-2024

See docs/LICENSE.md for full licensing information.


NOTE TO PROGRAMMERS:
  Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
  **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*
    This is the primary bootstrap script for loading in the Composr system. It should be required by any and all front-end scripts.
    This file should be kept to an absolute minimum because it cannot be strict-typed.
    After requiring, use require_code__bootstrap to load your first bootstrap script (whether global or minikernel) which contains the require_code function. Use require_code from that point forward.
*/

ini_set('display_errors', '0');
ini_set('html_errors', '1');
@header_remove('x-powered-by'); // Security

global $DEV_MODE, $FILE_BASE, $REQUIRED_BEFORE;
$REQUIRED_BEFORE = [];

/** Site base configuration settings.
 *
 * @global array $SITE_INFO
 */
global $SITE_INFO;
$SITE_INFO = [];

// Load up config file
// NB: We ignore any issues for now and let global.php do the error handling for this (e.g. it's fine if it's missing if, say, we are running the installer
if (is_file($FILE_BASE . '/_config.php')) {
    @include($FILE_BASE . '/_config.php');
    if (!is_array($SITE_INFO) || (count($SITE_INFO) == 0) || (empty($SITE_INFO))) {
        // LEGACY
        if ((!is_file($FILE_BASE . '/_config.php')) && (is_file($FILE_BASE . '/info.php'))) {
            @copy($FILE_BASE . '/info.php', $FILE_BASE . '/_config.php');
            if (is_file($FILE_BASE . '/_config.php')) {
                $new_config_file = file_get_contents($FILE_BASE . '/_config.php');
                $new_config_file = str_replace(['ocf_table_prefix', 'use_mem_cache', 'ocp_member_id', 'ocp_member_hash', 'ocf', 'admin_password', 'master_password'], ['cns_table_prefix', 'use_persistent_cache', 'cms_member_id', 'cms_member_hash', 'cns', 'maintenance_password', 'maintenance_password'], $new_config_file);
                $new_config_file = str_replace(']=\'', '] = \'', $new_config_file); // Clean up formatting to new convention
                file_put_contents($FILE_BASE . '/_config.php', $new_config_file, LOCK_EX);
            } else {
                exit('Error, cannot rename info.php to _config.php: check the Composr upgrade instructions');
            }
            @include($FILE_BASE . '/_config.php');
        }
    }
}

/** Whether the software is running in development mode
 *
 * @global boolean $DEV_MODE
 */
$DEV_MODE = (((!array_key_exists('dev_mode', $SITE_INFO) || ($SITE_INFO['dev_mode'] == '1')) && (is_dir($FILE_BASE . '/.git') || (function_exists('ocp_mark_as_escaped')))) && ((!array_key_exists('keep_dev_mode', $_GET) || ($_GET['keep_dev_mode'] == '1'))));

/**
 * Load up a script in safe mode (without overrides, unless there is only a custom file present).
 * This supports the file array for the quick installer.
 *
 * @param  ID_TEXT $codename The sources script to load
 */
function require_code__bootstrap(string $codename)
{
    if (function_exists('error_clear_last')) {
        error_clear_last();
    }
    $errormsg = '';
    $errormsg_before = error_get_last();

    global $FILE_ARRAY, $REQUIRED_BEFORE, $FILE_BASE;

    if (array_key_exists($codename, $REQUIRED_BEFORE)) { // We already required it
        return;
    }

    try {
        if (!array_key_exists('type', $_GET)) {
            $prior = memory_get_usage();
            //echo '<' . '!-- Memory: ' . number_format($prior) . ' --' . '>' . "\n"; Can break JS validity if we inject this
            //echo '<' . '!-- Loading code file: ' . $codename . ' --' . '>' . "\n";
            //cms_flush_safe();
        }

        // Check original code first (we do not support overrides)
        $path = $FILE_BASE . ((strpos($codename, '.php') === false) ? ('/sources/' . $codename . '.php') : ('/' . preg_replace('#(sources|modules|minimodules)_custom#', '${1}', $codename)));
        $relative_path = str_replace($FILE_BASE . '/', '', $path);

        $file_exists = false;
        if ((@is_array($FILE_ARRAY)) && (!isset($_GET['keep_quick_hybrid']))) {
            $file_exists = file_array_exists($relative_path);
        }
        if (($file_exists === false) && (!@is_array($FILE_ARRAY)) || (isset($_GET['keep_quick_hybrid']))) {
            $file_exists = file_exists($path);
        }

        // Check custom code next
        if ($file_exists === false) {
            $path = $FILE_BASE . ((strpos($codename, '.php') === false) ? ('/sources_custom/' . $codename . '.php') : ('/' . $codename));
            $relative_path = str_replace($FILE_BASE . '/', '', $path);

            $file_exists = false;
            if ((@is_array($FILE_ARRAY)) && (!isset($_GET['keep_quick_hybrid']))) {
                $file_exists = file_array_exists($relative_path);
            }
            if (($file_exists === false) && (!@is_array($FILE_ARRAY)) || (isset($_GET['keep_quick_hybrid']))) {
                $file_exists = file_exists($path);
            }
        }

        // We still do not have a file, so bail
        if ($file_exists === false) {
            throw new \Exception('A required file, ' . $relative_path . ', could not be located. This is almost always due to an incomplete upload of the Composr package, so please check all files are uploaded correctly.</p><p>Only once all Composr files are in place can the software function. Please note, in the event you are installing, that we have a quick installer package which requires uploading only two files, so you might consider using that instead.');
        }

        $REQUIRED_BEFORE[$codename] = true;

        // For file array files, we must load up its contents and compile it
        $code = null;
        if ((@is_array($FILE_ARRAY)) && ((!isset($_GET['keep_quick_hybrid'])) || (!file_exists($path)))) {
            $code = file_array_get($relative_path);
            $code = clean_php_file_for_eval__bootstrap($code);
        }

        // Inject strict types if we are running in development mode
        if (($GLOBALS['DEV_MODE']) && (!@is_array($FILE_ARRAY))) {
            if ($code === null) {
                $code = clean_php_file_for_eval__bootstrap(file_get_contents($path));
            }
            $code = 'declare(strict_types=1); ' . "\n" . $code;
        }

        // Save to compiled if we need to do so
        if ($code !== null) {
            $compiled_relative_path = '_compiled/' . $relative_path;
            $compiled_path = $FILE_BASE . '/_compiled/' . $relative_path;

            // Create missing directories
            if (!is_dir(dirname($compiled_path))) {
                if (@mkdir(dirname($compiled_path), 0777, true) === false) {
                    if (!is_dir(dirname($compiled_path))) { // Maybe another process beat us to creating it?
                        throw new \Exception('Cannot create directory ' . dirname($compiled_relative_path) . ' for compiling source PHP scripts. Maybe you do not have the correct file permissions?');
                    }
                } else {
                    file_put_contents(dirname($compiled_path) . '/index.html', '');
                }
            }

            $code_warning = ' /* DO NOT EDIT THIS FILE; this is a temporary compiled file. Instead, edit ' . $codename . '.php and its overrides. */ ';
            $code = '<' . '?php' . $code_warning . "\n" . $code;

            // Only write if the file changed
            $file_hash = @hash_file('crc32', $compiled_path);
            if ((!is_string($file_hash)) || ($file_hash != hash('crc32', $code))) {
                // Keep trying to write for 5 seconds; there might be parallel processes compiling files
                $time = microtime(true);
                while (file_put_contents($compiled_path, $code, LOCK_EX | LOCK_NB) === false) {
                    if ((microtime(true) - $time) > 5.0) {
                        throw new \Exception('Cannot compile (write) file ' . $compiled_relative_path);
                    }

                    usleep(250000);
                }

                clearstatcache(true, $compiled_path);
            }

            $path = $compiled_path;
            $relative_path = $compiled_relative_path;
        }

        // We need to wait (but not too long) for locks to be released before we can include the file
        $time = microtime(true);
        $file = fopen($path, 'r');
        while (flock($file, LOCK_SH | LOCK_NB) === false) {
            if ((microtime(true) - $time) > 5.0) {
                throw new \Exception('Cannot read file ' . $relative_path . '; a lock was not released on the file in a timely manner.');
            }

            usleep(100000);
        }

        $result = require_once $path;

        // Release the lock / close the file
        if ($file !== false) {
            fclose($file);
            $file = false;
        }

        if ($result === false) {
            $errormsg = error_get_last();
            if (($errormsg == '') || ($errormsg === $errormsg_before)) {
                $errormsg = '';
            }
            if (stripos($errormsg, 'deprecated') !== false) {
                $errormsg = ''; // Deprecated errors can leak through because even though we return true in our error handler, error handlers won't run recursively, so if this code is loaded during an error it'll stream through deprecated stuff here
            }
        } else {
            $errormsg = '';

            // Call init function
            if (function_exists('init__' . str_replace('/', '__', $codename))) {
                call_user_func('init__' . str_replace('/', '__', $codename));
            }

            /*if (!array_key_exists('type', $_GET))   Memory usage debugging. Not safe, as can mess up Tempcode generation (mixed echos) {
                echo '<' . '!-- Memory diff for ' . $codename . ' was: ' . @number_format(memory_get_usage() - $prior) . ' --' . '>' . "\n";
            }*/
        }
    } catch (Exception $e) {
        $result = false;

        $errormsg = $e->getMessage();
        $errormsg .= '. ' . $e->getTraceAsString();
    } catch (Error $e) {
        $result = false;

        $errormsg = $e->getMessage();
        $errormsg .= '. ' . $e->getTraceAsString();
    }

    if ($errormsg != '') {
        $clean_error = str_replace([$FILE_BASE . '/', $FILE_BASE . '\\'], ['', ''], $errormsg);

        if (!headers_sent()) {
            http_response_code(500);
        }

        // Standard error logging
        @error_log('Composr: CRITICAL ' . str_replace("\n", '', $errormsg), 0);

        exit('<!DOCTYPE html>' . "\n" . '<html lang="EN"><head><title>Critical startup error</title></head><body><h1>Composr startup error</h1><p>' . $clean_error . '.</p><p>The core developers maintain full documentation for all procedures and tools, especially those for installation. These may be found on the <a href="https://composr.app">Composr website</a>. If you are unable to easily solve this problem, we may be contacted from our website and can help resolve it for you.</p><hr /><p style="font-size: 0.8em">Composr is a website engine created by Christopher Graham.</p></body></html>');
    }
}

/**
 * Make a PHP file evaluable.
 *
 * @param  string $c File contents
 * @param  ?string $path File path (null: N/A)
 * @return string Cleaned up file
 */
function clean_php_file_for_eval__bootstrap(string $c, ?string $path = null) : string
{
    $reps = [];
    $reps['?' . '>'] = '';
    $reps['<' . '?php'] = '';
    if ($path !== null) {
        $reps['__FILE__'] = "'" . addslashes($path) . "'";
        $reps['__DIR__'] = "'" . addslashes(dirname($path)) . "'";
    }

    return str_replace(array_keys($reps), array_values($reps), $c);
}

/**
 * Get the file base for your installation of the software.
 *
 * @return PATH The file base, without a trailing slash
 */
function get_file_base__bootstrap() : string
{
    global $FILE_BASE;
    return $FILE_BASE;
}
