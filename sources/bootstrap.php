<?php /*

Composr
Copyright (c) Christopher Graham, 2004-2024

See docs/LICENSE.md for full licensing information.


NOTE TO PROGRAMMERS:
  Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
  **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*
    This is the primary bootstrap script for loading in the Composr system. It should be required by any and all front-end scripts.
    This file should be kept to an absolute minimum because it cannot be strict-typed.
    After requiring, use require_code__bootstrap to load your first bootstrap script (whether global or minikernel) which contains the require_code function. Use require_code from that point forward.
*/

global $DEV_MODE, $SITE_INFO, $FILE_BASE;

// Load in site config if we can so we can determine if we are in DEV_MODE
if (empty($SITE_INFO) || (count($SITE_INFO) == 0)) {
    if (is_file($FILE_BASE . '/_config.php')) { // Just ignore if the file does not exist; it is not critical (yet) if it does not.
        @include($FILE_BASE . '/_config.php');
        if (empty($SITE_INFO)) {
            // LEGACY
            if ((!is_file($FILE_BASE . '/_config.php')) && (is_file($FILE_BASE . '/info.php'))) {
                @copy($FILE_BASE . '/info.php', $FILE_BASE . '/_config.php');
                if (is_file($FILE_BASE . '/_config.php')) {
                    $new_config_file = file_get_contents($FILE_BASE . '/_config.php');
                    $new_config_file = str_replace(['ocf_table_prefix', 'use_mem_cache', 'ocp_member_id', 'ocp_member_hash', 'ocf', 'admin_password', 'master_password'], ['cns_table_prefix', 'use_persistent_cache', 'cms_member_id', 'cms_member_hash', 'cns', 'maintenance_password', 'maintenance_password'], $new_config_file);
                    $new_config_file = str_replace(']=\'', '] = \'', $new_config_file); // Clean up formatting to new convention
                    file_put_contents($FILE_BASE . '/_config.php', $new_config_file, LOCK_EX);
                } else {
                    exit('Error, cannot rename info.php to _config.php: check the Composr upgrade instructions');
                }
                @include($FILE_BASE . '/_config.php');
            }
        }
    }
}

/** Whether the software is running in development mode
 *
 * @global boolean $DEV_MODE
 */
$DEV_MODE = (((!array_key_exists('dev_mode', $SITE_INFO) || ($SITE_INFO['dev_mode'] == '1')) && (is_dir($FILE_BASE . '/.git') || (function_exists('ocp_mark_as_escaped')))) && ((!array_key_exists('keep_dev_mode', $_GET) || ($_GET['keep_dev_mode'] == '1'))));

/**
 * Load up an entry script (usually global or minikernel).
 * This does not support overrides, but it does support strict_types.
 *
 * @param  ID_TEXT $codename The sources script to load
 */
function require_code__bootstrap(string $codename)
{
    $codename = filter_naughty_harsh__bootstrap($codename);

    $path = get_file_base__bootstrap() . '/sources/' . $codename . '.php';

    if (!is_file($path)) {
        exit('<!DOCTYPE html>' . "\n" . '<html lang="EN"><head><title>Critical startup error</title></head><body><h1>Composr startup error</h1><p>An error occurred trying to bootstrap the software: the file \'sources/' . $codename . '.php\', which is necessary to run the software, could not be found.</p><p>The core developers maintain full documentation for all procedures and tools, especially those for installation. These may be found on the <a href="https://composr.app">Composr website</a>. If you are unable to easily solve this problem, we may be contacted from our website and can help resolve it for you.</p><hr /><p style="font-size: 0.8em">Composr is a website engine created by Christopher Graham.</p></body></html>');
    }

    // Inject strict types if we are running in development mode
    if ($GLOBALS['DEV_MODE']) {
        $code = file_get_contents($path);
        $code_warning = ' /* DO NOT EDIT THIS FILE; this is a temporary compiled file. Instead, edit ' . $codename . '.php and its overrides. */ ';
        $code = str_replace('<' . '?php ', '<' . '?php declare(strict_types=1);' . $code_warning, $code);

        $_path = str_replace(["/", "\\"], ['_', '_'], $codename) . '.php';
        file_put_contents(get_file_base__bootstrap() . '/sources_compiled/' . $_path, $code);

        $path = get_file_base__bootstrap() . '/sources_compiled/' . $_path;
    }

    require_once $path;
}

/**
 * This function is similar to filter_naughty, except it requires the parameter to be strictly alphanumeric. It is intended for use on text that will be put into an eval.
 *
 * @param  string $in String to test
 * @return string Same as input string
 */
function filter_naughty_harsh__bootstrap(string $in) : string
{
    if (preg_match('#^[\w\-]*$#', $in) != 0) {
        return $in;
    }
    exit();
}

/**
 * Make a PHP file evaluable.
 *
 * @param  string $c File contents
 * @param  ?string $path File path (null: N/A)
 * @return string Cleaned up file
 */
function clean_php_file_for_eval__bootstrap(string $c, ?string $path = null) : string
{
    $reps = [];
    $reps['?' . '>'] = '';
    $reps['<' . '?php'] = '';
    if ($path !== null) {
        $reps['__FILE__'] = "'" . addslashes($path) . "'";
        $reps['__DIR__'] = "'" . addslashes(dirname($path)) . "'";
    }

    return str_replace(array_keys($reps), array_values($reps), $c);
}

/**
 * Get the file base for your installation of the software.
 *
 * @return PATH The file base, without a trailing slash
 */
function get_file_base__bootstrap() : string
{
    global $FILE_BASE;
    return $FILE_BASE;
}
