<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * UI to choose a language.
 *
 * @param  Tempcode $title Title for the form
 * @param  boolean $tip Whether to give a tip about edit order
 * @param  boolean $allow_all_selection Whether to add an 'all' entry to the list
 * @return mixed The UI (Tempcode) or the language to use (string/LANGUAGE_NAME)
 * @ignore
 */
function _choose_language(object $title, bool $tip = false, bool $allow_all_selection = false)
{
    if (!multi_lang()) {
        return user_lang();
    }

    $lang = get_param_string('lang', /*get_param_string('keep_lang', null)*/null);
    if ($lang !== null) {
        return filter_naughty($lang);
    }

    if (!$tip) {
        $text = do_lang_tempcode('CHOOSE_LANG_DESCRIP');
    } else {
        global $LANGS_MAP_CACHE;
        if ($LANGS_MAP_CACHE === null) {
            require_code('files');
            $map_a = get_file_base() . '/lang/langs.ini';
            $map_b = get_custom_file_base() . '/lang_custom/langs.ini';
            if (!is_file($map_b)) {
                $map_b = $map_a;
            }
            $LANGS_MAP_CACHE = cms_parse_ini_file_fast($map_b);
        }

        $lang_name = get_site_default_lang();
        if (array_key_exists($lang_name, $LANGS_MAP_CACHE)) {
            $lang_name = $LANGS_MAP_CACHE[$lang_name];
        }

        $text = do_lang_tempcode('CHOOSE_LANG_DESCRIP_ADD_TO_MAIN_LANG_FIRST', escape_html($lang_name));
    }

    $langs = new Tempcode();
    if ($allow_all_selection) {
        $langs->attach(form_input_list_entry('', false, do_lang_tempcode('_ALL')));
    }
    $langs->attach(create_selection_list_langs());
    require_code('form_templates');
    $fields = form_input_huge_list(do_lang_tempcode('LANGUAGE'), do_lang_tempcode('DESCRIPTION_LANGUAGE'), 'lang', $langs, null, true);

    $hidden = build_keep_post_fields();
    $url = get_self_url(false, false, ['lang' => null]);

    breadcrumb_set_self(do_lang_tempcode('LANGUAGE'));

    return do_template('FORM_SCREEN', [
        '_GUID' => '1a2823d450237aa299c095bf9c689a2a',
        'SKIP_WEBSTANDARDS' => true,
        'GET' => true,
        'HIDDEN' => $hidden,
        'SUBMIT_ICON' => 'buttons/proceed',
        'SUBMIT_NAME' => do_lang_tempcode('PROCEED'),
        'TITLE' => $title,
        'FIELDS' => $fields,
        'URL' => $url,
        'TEXT' => $text,
    ]);
}

/**
 * Inform user if the user is implicitly translating content.
 */
function attach_translation_notice()
{
    if (!multi_lang_content()) {
        return;
    }

    if (get_param_string('lang', '') != '') {
        return; // Explicitly translating
    }

    $user_lang = user_lang();
    $default_lang = get_site_default_lang();
    if ($user_lang != $default_lang) {
        require_code('lang2');
        require_lang('lang');
        $_user_lang = lookup_language_full_name($user_lang);
        $_default_lang = lookup_language_full_name($default_lang);
        $default_lang_url = get_self_url(true, false, ['keep_lang' => $default_lang], true);
        $notice = do_lang_tempcode('TRANSLATING_IN_LANGUAGE', escape_html($_user_lang), escape_html($_default_lang), escape_html($default_lang_url));
        attach_message($notice, 'notice');
    }
}

/**
 * Get an array of all the installed languages that can be found in root/lang/ and root/lang_custom/.
 *
 * @param  boolean $even_empty_langs Whether to even find empty languages
 * @return array The installed languages (map, lang=>type)
 * @ignore
 */
function _find_all_langs(bool $even_empty_langs = false) : array
{
    require_code('files');

    static $cached = [];
    if (isset($cached[$even_empty_langs])) {
        return $cached[$even_empty_langs];
    }

    // NB: This code is heavily optimised

    $_langs = [fallback_lang() => 'lang'];

    if (!in_safe_mode()) {
        $test = persistent_cache_get('LANGS_LIST');
        if ($test !== null) {
            $cached[$even_empty_langs] = $test;
            return $test;
        }

        $_dir = @opendir(get_custom_file_base() . '/lang_custom/');
        if ($_dir !== false) {
            while (false !== ($file = readdir($_dir))) {
                if ((!isset($file[5])) && ($file[0] != '.') && (($file == 'EN') || (!should_ignore_file('lang_custom/' . $file, IGNORE_ACCESS_CONTROLLERS)))) {
                    if (is_dir(get_custom_file_base() . '/lang_custom/' . $file)) {
                        if (($even_empty_langs) || (/*optimisation*/is_file(get_custom_file_base() . '/lang_custom/' . $file . '/global.ini'))) {
                            $_langs[$file] = 'lang_custom';
                        } else {
                            $_dir2 = @opendir(get_custom_file_base() . '/lang_custom/' . $file);
                            if ($_dir2 !== false) {
                                while (false !== ($file2 = readdir($_dir2))) {
                                    if (substr($file2, -4) == '.ini') {
                                        $_langs[$file] = 'lang_custom';
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            closedir($_dir);
        }
        if (get_custom_file_base() != get_file_base()) {
            $_dir = @opendir(get_file_base() . '/lang_custom/');
            if ($_dir !== false) {
                while (false !== ($file = readdir($_dir))) {
                    if ((!isset($file[5])) && ($file[0] != '.') && (($file == 'EN') || (!should_ignore_file('lang_custom/' . $file, IGNORE_ACCESS_CONTROLLERS)))) {
                        if (is_dir(get_file_base() . '/lang_custom/' . $file)) {
                            if ($even_empty_langs) {
                                $_langs[$file] = 'lang_custom';
                            } else {
                                $_dir2 = opendir(get_file_base() . '/lang_custom/' . $file);
                                while (false !== ($file2 = readdir($_dir2))) {
                                    if (substr($file2, -4) == '.ini') {
                                        $_langs[$file] = 'lang_custom';
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                closedir($_dir);
            }
        }
    }
    $_dir = @opendir(get_file_base() . '/lang/');
    if ($_dir !== false) {
        while (false !== ($file = readdir($_dir))) {
            if ((!isset($_langs[$file])) && ($file[0] != '.') && (!isset($file[5])) && (($file == 'EN') || (!should_ignore_file('lang/' . $file, IGNORE_ACCESS_CONTROLLERS)))) {
                if (is_dir(get_file_base() . '/lang/' . $file)) {
                    $_langs[$file] = 'lang';
                }
            }
        }
        closedir($_dir);
    }

    if (!in_safe_mode()) {
        persistent_cache_set('LANGS_LIST', $_langs);
    }

    $cached[$even_empty_langs] = $_langs;
    return $_langs;
}

/**
 * Get a nice formatted XHTML listed language selector.
 *
 * @param  ?LANGUAGE_NAME $select_lang The language to have selected by default (null: uses the current language)
 * @param  boolean $show_unset Whether to show languages that have no language details currently defined for them
 * @return Tempcode The language selector
 *
 * @ignore
 */
function _create_selection_list_langs(?string $select_lang = null, bool $show_unset = false) : object
{
    $langs = new Tempcode();
    $_langs = find_all_langs();

    if ($select_lang === null) {
        $select_lang = user_lang();
    }

    require_code('lang2');

    foreach (array_keys($_langs) as $lang) {
        $_langs[$lang] = lookup_language_full_name($lang);
    }
    cms_mb_asort($_langs, SORT_NATURAL | SORT_FLAG_CASE);

    foreach ($_langs as $lang => $full_name) {
        $langs->attach(form_input_list_entry($lang, ($lang == $select_lang), $full_name));
    }

    if ($show_unset) {
        global $LANGS_MAP_CACHE;
        if ($LANGS_MAP_CACHE !== null) {
            cms_mb_asort($LANGS_MAP_CACHE, SORT_NATURAL | SORT_FLAG_CASE);
            foreach ($LANGS_MAP_CACHE as $lang => $full) {
                if (!array_key_exists($lang, $_langs)) {
                    $_full = make_string_tempcode($full);
                    $_full->attach(do_lang_tempcode('_UNSET'));
                    $langs->attach(form_input_list_entry($lang, false, protect_from_escaping($_full)));
                }
            }
        }
    }

    return $langs;
}

/**
 * Take a language string and save it into a content language string in the database, for all translations.
 *
 * @param  ID_TEXT $field_name The field name
 * @param  ID_TEXT $code The language string codename
 * @param  boolean $comcode Whether the given codes value is to be parsed as Comcode
 * @param  integer $level The level of importance this content language string holds
 * @param  ?object $db The database connector to use (null: standard site connector)
 * @param  ?mixed $parameter1 The first parameter [string or Tempcode] (replaces {1}) (null: none)
 * @param  ?mixed $parameter2 The second parameter [string or Tempcode] (replaces {2}) (null: none)
 * @param  ?mixed $parameter3 The third parameter (replaces {3}). May be an array of [of string or Tempcode], to allow any number of additional args (null: none)
 * @return array The content language string save fields
 */
function lang_code_to_default_content(string $field_name, string $code, bool $comcode = false, int $level = 2, ?object $db = null, $parameter1 = null, $parameter2 = null, $parameter3 = null) : array
{
    $insert_map = insert_lang($field_name, do_lang($code, $parameter1, $parameter2, $parameter3), $level, $db, $comcode);
    if (multi_lang_content()) {
        $langs = find_all_langs();
        foreach ($langs as $lang => $lang_type) {
            if ($lang != user_lang()) {
                if ((is_file(get_file_base() . '/lang/' . $lang . '/critical_error.ini')) || (is_file(get_file_base() . '/lang_custom/' . $lang . '/critical_error.ini'))) { // Make sure it's a reasonable looking pack, not just a stub
                    insert_lang($field_name, do_lang($code, $parameter1, $parameter2, $parameter3, $lang), $level, $db, $comcode, $insert_map[$field_name], $lang);
                }
            }
        }
    }
    return $insert_map;
}

/**
 * Take a static string and save it into a content language string in the database, for all translations.
 *
 * @param  ID_TEXT $field_name The field name
 * @param  ID_TEXT $str The static string
 * @param  boolean $comcode Whether the given codes value is to be parsed as Comcode
 * @param  integer $level The level of importance this content language string holds
 * @param  ?object $db The database connector to use (null: standard site connector)
 * @return array The content language string save fields
 */
function lang_code_to_static_content(string $field_name, string $str, bool $comcode = false, int $level = 2, ?object $db = null) : array
{
    $insert_map = insert_lang($field_name, $str, $level, $db, $comcode);
    if (multi_lang_content()) {
        $langs = find_all_langs();
        foreach ($langs as $lang => $lang_type) {
            if ($lang != user_lang()) {
                if ((is_file(get_file_base() . '/lang/' . $lang . '/critical_error.ini')) || (is_file(get_file_base() . '/lang_custom/' . $lang . '/critical_error.ini'))) { // Make sure it's a reasonable looking pack, not just a stub
                    insert_lang($field_name, $str, $level, $db, $comcode, $insert_map[$field_name], $lang);
                }
            }
        }
    }
    return $insert_map;
}

/**
 * Insert a content language string into the translation table, and returns the ID.
 *
 * @param  ID_TEXT $field_name The field name
 * @param  string $text The text
 * @param  integer $level The level of importance this content language string holds
 * @set 1 2 3 4
 * @param  ?object $db The database connector to use (null: standard site connector)
 * @param  boolean $comcode Whether it is to be parsed as Comcode
 * @param  ?integer $id The ID to use for the content language string (null: work out next available)
 * @param  ?LANGUAGE_NAME $lang The language (null: uses the current language)
 * @param  boolean $insert_as_admin Whether to insert it as an admin (any Comcode parsing will be carried out with admin privileges)
 * @param  ?string $pass_id The special identifier for this content language string on the page it will be displayed on; this is used to provide an explicit binding between languaged elements and greater templated areas (null: none)
 * @param  ?string $text_parsed Assembled Tempcode portion (null: work it out)
 * @param  boolean $preparse_mode Whether to generate a fatal error if there is invalid Comcode
 * @param  boolean $save_as_volatile Whether we are saving as a 'volatile' file extension (used in the XML DB driver, to mark things as being non-syndicated to Git)
 * @return array The content language string save fields
 *
 * @ignore
 */
function _insert_lang(string $field_name, string $text, int $level, ?object $db = null, bool $comcode = false, ?int $id = null, ?string $lang = null, bool $insert_as_admin = false, ?string $pass_id = null, ?string $text_parsed = null, bool $preparse_mode = true, bool $save_as_volatile = false) : array
{
    if ($db === null) {
        $db = $GLOBALS['SITE_DB'];
    }

    if ($lang === null) {
        $lang = get_param_string('lang', user_lang());
    }
    $_text_parsed = null;

    $source_user = (function_exists('get_member')) ? get_member() : $GLOBALS['FORUM_DRIVER']->get_guest_id();

    if ($comcode && !get_mass_import_mode()) {
        if ($text_parsed === null) {
            if ((function_exists('get_member')) && (!$insert_as_admin)) {
                $comcode_member_id = get_member();
            } else {
                // During installation, or when $insert_as_admin explicitly set
                if (is_object($GLOBALS['FORUM_DRIVER'])) {
                    require_code('users_active_actions');
                    $comcode_member_id = get_first_admin_user();
                } else {
                    $comcode_member_id = db_get_first_id() + 1;
                }
                $insert_as_admin = true;
                $source_user = $comcode_member_id;
            }

            global $OVERRIDE_MEMBER_ID_COMCODE;
            if ($OVERRIDE_MEMBER_ID_COMCODE !== null) {
                $comcode_member_id = $OVERRIDE_MEMBER_ID_COMCODE;
                $insert_as_admin = false;
                $source_user = $OVERRIDE_MEMBER_ID_COMCODE;
            }

            require_code('comcode');
            $_text_parsed = comcode_to_tempcode($text, $comcode_member_id, $insert_as_admin, $pass_id, $db, $preparse_mode ? COMCODE_PREPARSE_MODE : COMCODE_NORMAL);
            $text_parsed = $_text_parsed->to_assembly();
        }
    } else {
        $text_parsed = '';
    }

    if (!multi_lang_content()) {
        $ret = [];
        $ret[$field_name] = $text;
        if ($comcode) {
            $ret[$field_name . '__text_parsed'] = $text_parsed;
            $ret[$field_name . '__source_user'] = $source_user;
        }
        return $ret;
    }

    $lock = false;
    table_id_locking_start($db, $id, $lock);

    if ($lang == 'Gibb') { // Debug code to help us spot language layer bugs. We expect &keep_lang=EN to show EnglishEnglish content, but otherwise no EnglishEnglish content.
        $map = ['source_user' => $source_user, 'broken' => 0, 'importance_level' => $level, 'text_original' => 'EnglishEnglishWarningWrongLanguageWantGibberishLang', 'text_parsed' => '', 'language' => 'EN'];
        if ($id === null) {
            $id = $db->query_insert('translate', $map, true, false, $save_as_volatile);
        } else {
            $db->query_insert('translate', ['id' => $id] + $map, false, false, $save_as_volatile);
        }
    }

    $map = ['source_user' => $source_user, 'broken' => 0, 'importance_level' => $level, 'text_original' => $text, 'text_parsed' => $text_parsed, 'language' => $lang];
    if (($id === null) || ($id === 0)) { //==0 because unless MySQL NO_AUTO_VALUE_ON_ZERO is on, 0 insertion is same as null is same as "use autoincrement"
        $id = $db->query_insert('translate', $map, true, false, $save_as_volatile);
    } else {
        $db->query_insert('translate', ['id' => $id] + $map, false, false, $save_as_volatile);
    }

    table_id_locking_end($db, $id, $lock);

    if (count($db->text_lookup_cache) < 5000) {
        if ($_text_parsed !== null) {
            $db->text_lookup_cache[$id] = $_text_parsed;
        } else {
            $db->text_lookup_original_cache[$id] = $text;
        }
    }

    return [
        $field_name => $id,
    ];
}

/**
 * Remap the specified content language string, and return details of the content language string.
 *
 * @param  ID_TEXT $field_name The field name
 * @param  mixed $id The ID (if multi-lang-content on), or the string itself
 * @param  string $text The text to remap to
 * @param  ?object $db The database connector to use (null: standard site connector)
 * @param  boolean $comcode Whether it is to be parsed as Comcode
 * @param  ?string $pass_id The special identifier for this content language string on the page it will be displayed on; this is used to provide an explicit binding between languaged elements and greater templated areas (null: none)
 * @param  ?MEMBER $for_member The member that owns the content this is for (null: current member)
 * @param  boolean $as_admin Whether to generate Comcode as arbitrary admin
 * @param  boolean $leave_source_user Whether to leave the source member as-is (as opposed to resetting it to the current member)
 * @return array The content language string save fields
 *
 * @ignore
 */
function _lang_remap(string $field_name, $id, string $text, ?object $db = null, bool $comcode = false, ?string $pass_id = null, ?int $for_member = null, bool $as_admin = false, bool $leave_source_user = false) : array
{
    if ($id === 0) {
        return insert_lang($field_name, $text, 3, $db, $comcode, null, null, $as_admin, $pass_id);
    }

    if ($text === STRING_MAGIC_NULL) {
        return [
            $field_name => $id,
        ];
    }

    if ($db === null) {
        $db = $GLOBALS['SITE_DB'];
    }

    $lang = get_param_string('lang', user_lang());

    $member_id = (function_exists('get_member')) ? get_member() : $GLOBALS['FORUM_DRIVER']->get_guest_id(); // This updates the Comcode reference to match the current user, which may not be the owner of the content this is for. This is for a reason - we need to parse with the security token of the current user, not the original content submitter.
    if (($for_member === null) || ($GLOBALS['FORUM_DRIVER']->get_username($for_member, false, USERNAME_DEFAULT_NULL) === null)) {
        $for_member = $member_id;
    }

    if ($leave_source_user) {
        $source_user = null;
    } else {
        /*
        We set the Comcode user to the editing user (not the content owner) if the editing user does not have full HTML/Dangerous-Comcode privileges.
        The Comcode user is set to the content owner if the editing user does have those privileges (which is the idealised, consistent state).
        This is necessary as editing admin's content shouldn't let you write content with admin's privileges, even if you have privilege to edit their content
         - yet also, if the source_user is changed, when admin edits it has to change back again.
        */
        if ((function_exists('cms_admirecookie')) && ((cms_admirecookie('use_wysiwyg', '1') == '0') && (get_value('edit_with_my_comcode_perms') === '1')) || (!has_privilege($member_id, 'allow_html')) || (!has_privilege($member_id, 'comcode_dangerous')) || (!has_privilege($member_id, 'use_very_dangerous_comcode'))) {
            $source_user = $member_id;
        } else {
            $source_user = $for_member; // Reset to latest submitter for main record
        }
    }

    global $OVERRIDE_MEMBER_ID_COMCODE;
    if ($OVERRIDE_MEMBER_ID_COMCODE !== null) {
        $for_member = $OVERRIDE_MEMBER_ID_COMCODE;
        $insert_as_admin = false;
        $source_user = $OVERRIDE_MEMBER_ID_COMCODE;
    }

    if ($comcode) {
        $_text_parsed = comcode_to_tempcode($text, ($source_user === null) ? $for_member : $source_user, $as_admin, $pass_id, $db);
        $db->text_lookup_cache[$id] = $_text_parsed;
        $text_parsed = $_text_parsed->to_assembly();
    } else {
        $text_parsed = '';
    }

    if (!multi_lang_content()) {
        $ret = [];
        $ret[$field_name] = $text;
        if ($comcode) {
            $ret[$field_name . '__text_parsed'] = $text_parsed;
            if ($source_user !== null) {
                $ret[$field_name . '__source_user'] = $source_user;
            }
        }
        return $ret;
    }

    $test = $db->query_select_value_if_there('translate', 'text_original', ['id' => $id, 'language' => $lang]);

    // Mark old as out-of-date
    if ($test !== $text) {
        $GLOBALS['SITE_DB']->query_update('translate', ['broken' => 1], ['id' => $id]);
    }

    $remap = [
        'broken' => 0,
        'text_original' => $text,
        'text_parsed' => $text_parsed,
    ];
    if ($source_user !== null) {
        $remap['source_user'] = $source_user;
    }

    if ($test !== null) { // Good, we save into our own language, as we have a translation for the lang entry setup properly
        $db->query_update('translate', $remap, ['id' => $id, 'language' => $lang], '', 1);
    } else { // Darn, we'll have to save over whatever we did load from
        $db->query_update('translate', $remap, ['id' => $id], '', 1);
    }

    $db->text_lookup_original_cache[$id] = $text;

    return [
        $field_name => $id,
    ];
}

/**
 * get_translated_tempcode was asked for a lang entry that had not been parsed into Tempcode yet.
 *
 * @param  ID_TEXT $table The table name
 * @param  array $row The database row
 * @param  ID_TEXT $field_name The field name
 * @param  ?object $db The database connector to use (null: standard site connector)
 * @param  ?LANGUAGE_NAME $lang The language (null: uses the current language)
 * @param  boolean $force Whether to force it to the specified language
 * @param  boolean $as_admin Whether to force as_admin, even if the content language string isn't stored against an admin (designed for Comcode page caching)
 * @return ?Tempcode The parsed Comcode (null: the text couldn't be looked up)
 */
function parse_translated_text(string $table, array &$row, string $field_name, ?object $db, ?string $lang, bool $force, bool $as_admin) : ?object
{
    global $SEARCH_QUERY_TERMS;

    push_query_limiting(false);

    $entry = $row[$field_name];

    $result = null;
    if (multi_lang_content()) {
        $_result = $db->query_select('translate', ['text_original', 'source_user'], ['id' => $entry, 'language' => $lang], '', 1);
        if (array_key_exists(0, $_result)) {
            $result = $_result[0];
        }

        if ($result === null) { // A missing translation
            if ($force) {
                pop_query_limiting();
                return null;
            }

            $result = $db->query_select_value_if_there('translate', 'text_parsed', ['id' => $entry, 'language' => get_site_default_lang()]);
            if ($result === null) {
                $result = $db->query_select_value_if_there('translate', 'text_parsed', ['id' => $entry]);
            }

            if (!cms_empty_safe($result)) {
                $db->text_lookup_cache[$entry] = new Tempcode();
                if (!$db->text_lookup_cache[$entry]->from_assembly($result, true)) {
                    $result = null;
                }
            }

            if (($result === null) || ($result == '')) {
                require_code('comcode'); // might not have been loaded for a quick-boot
                require_code('permissions');

                $result = $db->query_select('translate', ['text_original', 'source_user'], ['id' => $entry, 'language' => get_site_default_lang()], '', 1);
                if (!array_key_exists(0, $result)) {
                    $result = $db->query_select('translate', ['text_original', 'source_user'], ['id' => $entry], '', 1);
                }
                $result = array_key_exists(0, $result) ? $result[0] : null;

                push_lax_comcode(true);
                _lang_remap($field_name, $entry, ($result === null) ? '' : $result['text_original'], $db, true, null, ($result === null) ? null : $result['source_user'], $as_admin, true);
                if ($SEARCH_QUERY_TERMS !== null) {
                    $ret = comcode_to_tempcode($result['text_original'], $result['source_user'], $as_admin, null, $db, COMCODE_NORMAL, $SEARCH_QUERY_TERMS);
                    pop_lax_comcode();
                    pop_query_limiting();
                    return $ret;
                }
                pop_lax_comcode();
                $ret = get_translated_tempcode($table, $row, $field_name, $db, $lang);
                pop_query_limiting();
                return $ret;
            }

            pop_query_limiting();
            return $db->text_lookup_cache[$entry];
        }
    }

    // Missing parsed Comcode...

    require_code('comcode'); // might not have been loaded for a quick-boot
    require_code('permissions');

    push_lax_comcode(true);

    if (multi_lang_content()) {
        _lang_remap($field_name, $entry, $result['text_original'], $db, true, null, $result['source_user'], $as_admin, true);

        if ($SEARCH_QUERY_TERMS !== null) {
            $ret = comcode_to_tempcode($result['text_original'], $result['source_user'], $as_admin, null, $db, COMCODE_NORMAL, $SEARCH_QUERY_TERMS);
            pop_lax_comcode();
            pop_query_limiting();
            return $ret;
        }
    } else {
        $map = _lang_remap($field_name, $entry, $row[$field_name], $db, true, null, $row[$field_name . '__source_user'], $as_admin, true);
        $row_simplified = [];
        foreach ($row as $key => $val) {
            if ((preg_match('#__(text_parsed|source_user)$#', $key) == 0) && ($key != $field_name)) {
                $row_simplified[$key] = $val;
            }
        }
        $db->query_update($table, $map, $row_simplified, '', 1);
        $row = $map + $row;

        if ($SEARCH_QUERY_TERMS !== null) {
            $ret = comcode_to_tempcode($row[$field_name], $row[$field_name . '__source_user'], $as_admin, null, $db, COMCODE_NORMAL, $SEARCH_QUERY_TERMS);
            pop_lax_comcode();
            pop_query_limiting();
            return $ret;
        }
    }

    pop_lax_comcode();
    $ret = get_translated_tempcode($table, $row, $field_name, $db, $lang, false, false, false, true);
    pop_query_limiting();
    return $ret;
}

/**
 * Convert a language string that is Comcode to Tempcode, with potential caching in the db.
 *
 * @param  ID_TEXT $lang_code The language string codename
 * @return Tempcode The parsed Comcode
 *
 * @ignore
 */
function _comcode_lang_string(string $lang_code) : object
{
    global $COMCODE_LANG_STRING_CACHE;
    if (array_key_exists($lang_code, $COMCODE_LANG_STRING_CACHE)) {
        return $COMCODE_LANG_STRING_CACHE[$lang_code];
    }

    if (multi_lang_content()) {
        $comcode_page = $GLOBALS['SITE_DB']->query_select('cached_comcode_pages p LEFT JOIN ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'translate t ON t.id=string_index AND ' . db_string_equal_to('t.language', user_lang()), ['string_index', 'text_parsed', 'source_user'], ['the_page' => $lang_code, 'the_zone' => '!'], '', 1);
        if ((array_key_exists(0, $comcode_page)) && (!is_browser_decaching())) {
            $comcode_page_row_cached_only = [
                'the_zone' => '!',
                'the_page' => $lang_code,
                'the_theme' => $GLOBALS['FORUM_DRIVER']->get_theme(),
                'string_index' => $comcode_page[0]['string_index'],
                'string_index__text_parsed' => $comcode_page[0]['text_parsed'],
                'string_index__source_user' => $comcode_page[0]['source_user'],
            ];
            if (!cms_empty_safe($comcode_page[0]['text_parsed'])) {
                $parsed = new Tempcode();
                if (!$parsed->from_assembly($comcode_page[0]['text_parsed'], true)) {
                    $ret = get_translated_tempcode('cached_comcode_pages', $comcode_page_row_cached_only, 'string_index');
                    unset($GLOBALS['RECORDED_CONTENT_LANG_STRINGS'][$comcode_page[0]['string_index']]);
                }
            } else {
                $ret = get_translated_tempcode('cached_comcode_pages', $comcode_page_row_cached_only, 'string_index', null, null, true);
                if ($ret === null) { // Not existent in our language, we'll need to lookup and insert, and get again
                    $looked_up = do_lang($lang_code, null, null, null, null, false);
                    if ($looked_up === null) {
                        return make_string_tempcode(escape_html('{!' . $lang_code . '}'));
                    }
                    $GLOBALS['SITE_DB']->query_insert('translate', ['id' => $comcode_page[0]['string_index'], 'source_user' => get_member(), 'broken' => 0, 'importance_level' => 1, 'text_original' => $looked_up, 'text_parsed' => '', 'language' => user_lang()], true, false, true); // errors suppressed in case of race condition
                    $ret = get_translated_tempcode('cached_comcode_pages', $comcode_page_row_cached_only, 'string_index');
                }
                unset($GLOBALS['RECORDED_CONTENT_LANG_STRINGS'][$comcode_page[0]['string_index']]);
                return $ret;
            }
            $COMCODE_LANG_STRING_CACHE[$lang_code] = $parsed;
            return $parsed;
        } elseif (array_key_exists(0, $comcode_page)) {
            $GLOBALS['SITE_DB']->query_delete('cached_comcode_pages', ['the_page' => $lang_code, 'the_zone' => '!']);
            delete_lang($comcode_page[0]['string_index']);
            $GLOBALS['COMCODE_PAGE_RUNTIME_CACHE'] = [];
        }
    } else {
        $comcode_page = $GLOBALS['SITE_DB']->query_select('cached_comcode_pages', ['*'], ['the_page' => $lang_code, 'the_zone' => '!'], '', 1);
        if ((array_key_exists(0, $comcode_page)) && (!is_browser_decaching())) {
            $ret = get_translated_tempcode('cached_comcode_pages', $comcode_page[0], 'string_index');
            $COMCODE_LANG_STRING_CACHE[$lang_code] = $ret;
            return $ret;
        } elseif (array_key_exists(0, $comcode_page)) {
            $GLOBALS['SITE_DB']->query_delete('cached_comcode_pages', ['the_page' => $lang_code, 'the_zone' => '!']);
            $GLOBALS['COMCODE_PAGE_RUNTIME_CACHE'] = [];
        }
    }

    push_query_limiting(false);

    $looked_up = do_lang($lang_code, null, null, null, null, false);
    if ($looked_up === null) {
        return make_string_tempcode(escape_html('{!' . $lang_code . '}'));
    }
    $map = [
        'the_zone' => '!',
        'the_page' => $lang_code,
        'the_theme' => $GLOBALS['FORUM_DRIVER']->get_theme(),
        'cc_page_title' => multi_lang_content() ? null : '',
    ];
    $map += insert_lang_comcode('string_index', $looked_up, 4, null, true, null, false, true);
    $GLOBALS['SITE_DB']->query_insert('cached_comcode_pages', $map, false, true); // Race conditions
    $parsed = get_translated_tempcode('cached_comcode_pages', $map, 'string_index');
    $COMCODE_LANG_STRING_CACHE[$lang_code] = $parsed;

    pop_query_limiting();

    return $parsed;
}

/**
 * Deletes all content language strings linked to by the specified table and attribute identifiers, if they exist.
 *
 * @param  ID_TEXT $table The table
 * @param  array $attrs The attributes
 * @param  ?object $db The database connector to use (null: standard site connector)
 */
function mass_delete_lang(string $table, array $attrs, ?object $db)
{
    if (empty($attrs)) {
        return;
    }

    if ($db === null) {
        $db = $GLOBALS['SITE_DB'];
    }

    $start = 0;
    do {
        $rows = $db->query_select($table, $attrs, [], '', 1000, $start, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                foreach ($attrs as $attr) {
                    if ($row[$attr] !== null) {
                        delete_lang($row[$attr], $db);
                    }
                }
            }
        }
        $start += 1000;
    } while (($rows !== null) && (!empty($rows)));
}
