<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    validation
 */

/**
 * Check if the given member has the privilege to access the given content by means of validation.
 * This function will throw an access denied if the given member does not have the privilege.
 *
 * @param  ID_TEXT $content_type The content type being accessed
 * @param  ID_TEXT $content_id The content ID being accessed
 * @param  MEMBER $member_viewing The member trying to view the content
 * @param  array $bypass_members Array of members that should be granted access even if they don't have the privilege, such as the submitters
 * @param  boolean $ret Whether not to error with access denied and simply return a boolean instead
 * @return boolean Whether we have the privilege
 */
function check_jump_to_not_validated(string $content_type, string $content_id, int $member_viewing, array $bypass_members = [], bool $ret = false) : bool
{
    // Check the privilege
    if (has_privilege($member_viewing, 'jump_to_not_validated')) {
        return true;
    }

    // Check our bypass array, but only if the person viewing is not a guest
    if (!is_guest($member_viewing)) {
        if (in_array($member_viewing, $bypass_members)) {
            return true;
        }
    }

    // Check additional validation hooks
    $_hooks = find_all_hook_obs('systems', 'validation', 'Hook_validation_');
    foreach ($_hooks as $hook => $ob) {
        if (method_exists($ob, 'check_jump_to_not_validated')) {
            $result = $ob->check_jump_to_not_validated($content_type, $content_id, $member_viewing, $bypass_members, $ret);
            if ($result) {
                return true;
            }
        }
    }

    // By this point, no access
    if ($ret === false) {
        access_denied('PRIVILEGE', 'jump_to_not_validated');
    }
    return false;
}

/**
 * Schedule a piece of content for validation.
 *
 * @param  ID_TEXT $content_type The content type to be validated
 * @param  ID_TEXT $content_id The content ID to be validated
 * @param  ?array $validation_time The UTC date components specifying when the content should be validated (null: remove the schedule)
 */
function schedule_validation(string $content_type, string $content_id, ?array $validation_time = null)
{
    if (!addon_installed('commandr')) {
        return;
    }

    if (!has_privilege(get_member(), 'scheduled_publication_times')) {
        return;
    }

    require_code('content');
    require_code('temporal');

    $cma_ob = get_content_object($content_type);
    if ($cma_ob === null) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('49621183f630591e81094702c1cb120e')));
    }

    $cma_info = $cma_ob->info();

    if ($cma_info === null) {
        return;
    }
    if (!isset($cma_info['validation_time_field'])) {
        return;
    }

    $db = $cma_info['db'];
    $table = $cma_info['table'];
    $id_field = is_array($cma_info['id_field']) ? $cma_info['id_field'] : [$cma_info['id_field']];
    $id_field_numeric = $cma_info['id_field_numeric'];
    $validation_time_field = $cma_info['validation_time_field'];

    $where_map = [];
    $id_field = array_reverse($id_field);
    $id_parts = explode(':', $content_id);
    foreach ($id_field as $i => $field) {
        $where_map[$field] = ($id_field_numeric ? intval($id_parts[$i]) : $id_parts[$i]);
    }

    // Un-setting the schedule
    if ($validation_time === null) {
        $db->query_update($table, [$validation_time_field => null], $where_map);
        return;
    }

    // Setting the schedule
    list($year, $month, $day, $hour, $minute, $second) = $validation_time;
    $timestamp = cms_gmmktime($hour, $minute, $second, $month, $day, $year);
    $db->query_update($table, [$validation_time_field => $timestamp], $where_map);
}

/**
 * Get an array of content needing validation.
 * This is a crude method that uses the database directly for performance reasons.
 *
 * @return array Array of pairs: content type, content ID
 */
function get_content_needing_validation() : array
{
    require_code('content');
    require_code('zones');

    $ret = [];

    $_hooks = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
    foreach ($_hooks as $hook => $object) {
        $info = $object->info();
        if ($info === null) {
            continue;
        }
        if ($info['validated_field'] === null) {
            continue;
        }

        $db = $info['db'];
        $rows = $db->query_select($info['table'], ['*'], [$info['validated_field'] => 0]);

        foreach ($rows as $row) {
            if ($info['id_field_numeric']) {
                $ret[] = [$hook, strval($row[$info['id_field']])];
            } elseif (is_array($info['id_field'])) {
                $label = '';
                $is_first = true;
                foreach (array_reverse($info['id_field']) as $field) {
                    if (!$is_first) {
                        $label .= ':';
                    }
                    $is_first = false;
                    $label .= $row[$field];
                }
                $ret[] = [$hook, $label];
            } else {
                $ret[] = [$hook, $row[$info['id_field']]];
            }
        }
    }

    return $ret;
}

/**
 * Get the number of items which are not validated.
 *
 * @return array A pair: Number of major things, number of minor things
 */
function get_count_content_needing_validation() : array
{
    require_code('content');

    $sum = 0;
    $sum2 = 0;

    $_hooks = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
    foreach ($_hooks as $object) {
        $info = $object->info();
        if ($info === null) {
            continue;
        }
        if ($info['validated_field'] === null) {
            continue;
        }

        $db = $info['db'];
        $amount = $db->query_select_value($info['table'], 'COUNT(*)', [$info['validated_field'] => 0]);

        if (!empty($info['validation_is_minor'])) {
            $sum2 += $amount;
        } else {
            $sum += $amount;
        }
    }

    return [$sum, $sum2];
}
