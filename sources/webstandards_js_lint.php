<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_webstandards
 */

/*
No support for:
 - new('foo'). / new('foo')[  REASON: no good reason to do it really
 - (function foo())(). / (function foo())()[ REASON: no good reason to do it really
 - if...(then)...catch...else REASON: seen it, doubt it's valid
 - Full DOM REASON: not implemented on any browser. If however, conditional testing is used, the checker will let it pass
 - (Most) HTML attributes hardcoded into DOM objects  REASON: no reason to do it, and less compatible and clear than getAttribute
 - ";" insertion  REASON: very sloppy
 - New 'HTML5' APIs (not well supported yet)
 - checking against argument types  REASON: JavaScript extension, but we could do. Not a lot of advantage, quite a lot of work
 - checking for locked  REASON: JavaScript extension, but we could do. Not a lot of advantage, quite a lot of work

Some checks are commented out, as practical JavaScript does not tend to be at all type-strict.
*/

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__webstandards_js_lint()
{
    if (function_exists('require_code')) {
        require_code('webstandards_js_lex');
    }
    if (function_exists('require_code')) {
        require_code('webstandards_js_parse');
    }

    global $JS_PARSING_CONDITIONAL;
    $JS_PARSING_CONDITIONAL = false;

    // These are default prototypes. More may be added dynamically, but we can't check against those for consistency.
    global $JS_PROTOTYPES; // Note that '!' prefixed methods are static (only belong to the prototype). All objects also have a constructor, which is what is called when they are called as a function.
    $JS_PROTOTYPES = [
        // Each entry is a pair: inherit-from, properties array. Each property is a list: type, name, [function-return-type]. Types prefixed with ! are "this type or anything inherited from it"

        /* ECMA */
        'Object' => [null, [['!', 'prototype'],/*['String', 'Value'], ['function', 'Get', '!Object'], ['function', 'Put'], ['function', 'CanPut', 'Boolean'], ['function', 'HasProperty', 'Boolean'], ['function', 'Delete'], ['String', 'DefaultValue'], ['function', 'Construct', '!Object'], ['function', 'Match', 'Boolean'],*/ ['function', '!constructor', '!Object'], ['function', '!toString', 'String'], ['function', '!toLocaleString', 'String'], ['function', '!valueOf', '!Object'], ['function', '!hasOwnProperty', 'Boolean'], ['function', '!isPrototypeOf', 'Boolean'], ['function', '!propertyIsEnumerable', 'Boolean'],]],
        'function' => ['Object', [['arguments', 'arguments'], ['function', 'Call', '!Object'], ['function', 'HasInstance', 'Boolean'],]], // Has special language support
        'Function' => ['function', []],
        'Array' => ['Object', [['Number', 'length'], ['function', 'concat', 'Array'], ['function', 'join', 'String'], ['function', 'pop', '!Object'], ['function', 'push', 'Number'], ['function', 'reverse'], ['function', 'shift', '!Object'], ['function', 'slice', 'Array'], ['function', 'sort'], ['function', 'splice', 'Array'], ['function', 'unshift', 'Number'],]], // Has special language support
        'String' => ['Object', [['Number', 'length'], ['function', '!fromCharCode', 'String'], ['function', 'charAt', 'String'], ['function', 'charCodeAt', 'String'], ['function', 'concat', 'String'], ['function', 'indexOf', 'Number'], ['function', 'lastIndexOf', 'Number'], ['function', 'localeCompare', 'Boolean'], ['function', 'match', 'Boolean'], ['function', 'replace', 'String'], ['function', 'search', 'Boolean'], ['function', 'slice', 'String'], ['function', 'split', 'StringArray'], ['function', 'substr', 'String'], ['function', 'substring', 'String'], ['function', 'toLowerCase', 'String'], ['function', 'toUpperCase', 'String'], ['function', 'toLocaleLowerCase', 'String'], ['function', 'toLocaleUpperCase', 'String'],]], // Has special language support
        'Boolean' => ['Object', [['function', 'toString', 'String'],]], // Has special language support
        'Number' => ['Object', [['Number', '!MAX_VALUE'], ['Number', '!MIN_VALUE'], ['Number', '!NaN'], ['Number', '!NEGATIVE_INFINITY'], ['Number', '!POSITIVE_INFINITY'], ['function', 'toString', 'String'], ['function', 'toLocaleString', 'String'], ['function', 'toFixed', 'String'], ['function', 'toExponential', 'String'], ['function', 'toPrecision', 'String'],]], // Has special language support
        'Math' => ['Object', [['Number', '!E'], ['Number', '!LN10'], ['Number', '!LN2'], ['Number', '!LOG2E'], ['Number', '!LOG10E'], ['Number', '!PI'], ['Number', '!SQRT1_2'], ['Number', '!SQRT2'], ['function', '!abs', 'Number'], ['function', '!acos', 'Number'], ['function', '!asin', 'Number'], ['function', '!atan', 'Number'], ['function', '!atan2', 'Number'], ['function', '!ceil', 'Number'], ['function', '!cos', 'Number'], ['function', '!exp', 'Number'], ['function', '!floor', 'Number'], ['function', '!log', 'Number'], ['function', '!max', 'Number'], ['function', '!min', 'Number'], ['function', '!pox', 'Number'], ['function', '!random', 'Number'], ['function', '!round', 'Number'], ['function', '!sin', 'Number'], ['function', '!sqrt', 'Number'], ['function', '!tan', 'Number'],]],
        'Date' => ['Object', [['function', '!parse', 'Number'], ['function', '!UTC', 'Number'], ['function', 'toDateString', 'String'], ['function', 'toTimeString', 'String'], ['function', 'toLocaleString', 'String'], ['function', 'toLocaleDateString', 'String'], ['function', 'toLocaleTimeString', 'String'], ['function', 'getTime', 'Number'], ['function', 'getFullYear', 'Number'], ['function', 'getUTCFullYear', 'Number'], ['function', 'getMonth', 'Number'], ['function', 'getUTCMonth', 'Number'], ['function', 'getDate', 'Number'], ['function', 'getUTCDate', 'Number'], ['function', 'getDay', 'Number'], ['function', 'getUTCDay', 'Number'], ['function', 'getHours', 'Number'], ['function', 'getUTCHours', 'Number'], ['function', 'getMinutes', 'Number'], ['function', 'getUTCMinutes', 'Number'], ['function', 'getSeconds', 'Number'], ['function', 'getUTCSeconds', 'Number'], ['function', 'getMilliseconds', 'Number'], ['function', 'getUTCMilliseconds', 'Number'], ['function', 'getTimezoneOffset', 'Number'], ['function', 'setTime'], ['function', 'setMilliseconds'], ['function', 'setUTCMilliseconds'], ['function', 'setSeconds'], ['function', 'setUTCSeconds'], ['function', 'setMinutes'], ['function', 'setUTCMinutes'], ['function', 'setHours'], ['function', 'setUTCHours'], ['function', 'setDate'], ['function', 'setUTCDate'], ['function', 'setMonth'], ['function', 'setUTCMonth'], ['function', 'setFullYear'], ['function', 'setUTCFullYear'], ['function', 'toUTCString', 'String'],]],
        'RegExp' => ['Object', [['String', '$1'],/*['function', 'compile'],*/ ['String', '$2'], ['String', '$3'], ['String', '$4'], ['String', '$5'], ['function', 'exec', 'Boolean'], ['function', 'test', 'Boolean'], ['String', 'source'], ['Boolean', 'global'], ['Boolean', 'ignoreCase'], ['Boolean', 'multiline'], ['Number', 'lastIndex'],]], // Has special language support
        'Error' => ['Object', [['String', '!name'], ['String', '!message'],]],
        'EvalError' => ['Error', []],
        'RangeError' => ['Error', []],
        'ReferenceError' => ['Error', []],
        'SyntaxError' => ['Error', []],
        'TypeError' => ['Error', []],
        'URIError' => ['Error', []],
        'Null' => ['Object', []],
        'Infinity' => ['Object', []],
        'Undefined' => ['Object', []],
        'Promise' => ['Object', [['function', 'all', 'Promise'], ['function', 'race', 'Promise'], ['function', 'reject', 'Promise'], ['function', 'resolve', 'Promise'], ['function', 'then', 'Promise'], ['function', 'catch', 'Promise']]],

        /* Browser-Library / DOM */
        'Node' => ['Object', [['String', 'nodeName'], ['Number', 'nodeType'], ['String', 'nodeValue'], ['NodeArray', 'childNodes'], ['!Node', 'firstChild'], ['!Node', 'lastChild'], ['!Node', 'nextSibling'], ['!Node', 'parentNode'], ['!Node', 'previousSibling'], ['!XMLDocument', 'ownerDocument'], ['function', 'appendChild', '!Node'], ['function', 'cloneNode', '!Node'], ['function', 'insertBefore', '!Node'], ['function', 'removeChild', '!Node'], ['function', 'replaceChild', '!Node'], ['function', 'hasChildNodes', 'Boolean'],]], // nodeType: 1=Element,2=Attribute,3=Text,9=Document
        'XMLDocument' => ['Node', [['Implementation', 'implementation'], ['function', 'createElement', '!Element'], ['function', 'createTextNode', 'TextNode'], ['function', 'getElementById', '!Element'], ['function', 'createAttribute', 'Attribute'], ['HTML', 'documentElement'], ['Boolean', 'async'], ['function', 'load'], ['function', 'loadXML'], ['function', 'importNode', '!Node'], ['function', 'cloneNode', '!Node'],]],
        'Document' => ['XMLDocument', [['String', 'referrer'], ['String', 'title'], ['String', 'URL'], ['String', 'cookie'], ['Body', 'body'], ['function', 'getElementsByName', 'ElementArray'], ['function', 'getElementsByTagName', 'ElementArray'], ['ElementArray', 'images'], ['ElementArray', 'links'], ['FormArray', 'forms'], ['Selection', 'selection'], ['function', 'createRange', 'Range'], ['function', 'open'], ['function', 'write'], ['function', 'close'], ['Boolean', 'designMode'], ['function', 'execCommand', 'Boolean'], ['function', 'queryCommandEnabled', 'Boolean'], ['function', 'queryCommandState', 'Boolean'], ['function', 'queryCommandValue', '!Object'],]],
        'Element' => ['Node', [['function', 'addEventListener', 'Boolean'], ['function', 'attachEvent', 'Boolean'], ['function', 'getElementsByTagName', 'ElementArray'], ['function', 'setAttribute'], ['function', 'getAttribute'], ['function', 'Attribute'], ['Array', 'attributes'], ['function', 'onresize'], ['function', 'onmouseup'], ['function', 'onmouseover'], ['function', 'onmouseout'], ['function', 'onmousemove'], ['function', 'onmousedown'], ['function', 'onkeyup'], ['function', 'onkeypress'], ['function', 'onkeydown'], ['function', 'ondblclick'], ['function', 'onclick'], ['Number', 'selectionStart'], ['Number', 'selectionEnd'], ['String', 'className'], ['String', 'id'], ['String', 'innerHTML'], ['String', 'innerText'], ['!Object', 'style'], ['Number', 'selectionStart'], ['Number', 'selectionEnd'], ['Number', 'offsetWidth'], ['Number', 'offsetHeight'], ['Number', 'offsetLeft'], ['Number', 'offsetTop'], ['String', 'role'], ['!Element', 'offsetParent'],]],
        'TextNode' => ['Node', [['function', 'appendData'], ['function', 'deleteData'], ['function', 'insertData'], ['function', 'replaceData'], ['function', 'substringData', 'String'], ['function', 'splitText', 'TextNode'], ['String', 'data'],]],
        'Attribute' => ['Object', [['String', 'name'], ['String', 'value'],]],
        'Body' => ['Element', [['function', 'onmousewheel'], ['function', 'onpagehide'], ['function', 'onpageshow'], ['function', 'onunload'], ['function', 'onload'], ['Number', 'offsetWidth'], ['Number', 'offsetHeight'], ['Number', 'scrollWidth'], ['Number', 'scrollHeight'], ['Number', 'scrollTop'], ['Number', 'scrollLeft'],]],
        'Caption' => ['Element', []],
        'HTML' => ['Element', [['Number', 'clientWidth'], ['Number', 'clientHeight'], ['Number', 'scrollWidth'], ['Number', 'scrollHeight'], ['Number', 'scrollTop'], ['Number', 'scrollLeft'],]],
        'Form' => ['Element', [['String', 'method'], ['String', 'action'], ['String', 'title'], ['Array', 'elements'], ['function', 'submit'], ['function', 'reset'],]],
        'Img' => ['Element', [['String', 'alt'], ['String', 'title'], ['String', 'src'], ['Boolean', 'complete'], ['Number', 'naturalWidth'], ['Number', 'naturalHeight'],]],
        'FormField' => ['Element', [['Form', 'form'], ['function', 'focus'], ['function', 'onfocus'], ['function', 'onchange'], ['function', 'onblur'], ['Boolean', 'disabled'], ['String', 'name'],]],
        'Select' => ['FormField', [['function', 'onselect'], ['function', 'select'], ['Number', 'selectedIndex'], ['Boolean', 'multiple'], ['Array', 'options'],]],
        'Option' => ['FormField', [['String', 'value'], ['Boolean', 'defaultSelected'], ['Boolean', 'selected'],]],
        'Checkbox' => ['FormField', [['String', 'value'], ['Boolean', 'defaultChecked'], ['Boolean', 'checked'],]],
        'InputRadio' => ['FormField', [['String', 'value'], ['Boolean', 'defaultChecked'], ['Boolean', 'checked'],]],
        'InputText' => ['FormField', [['String', 'value'], ['Boolean', 'readOnly'],]],
        'TextArea' => ['FormField', [['String', 'value'], ['Number', 'scrollWidth'], ['Number', 'scrollHeight'], ['Number', 'scrollTop'], ['Number', 'scrollLeft'],]],
        'Frame' => ['Element', [['HTML', 'contentDocument'], ['Window', 'contentWindow'],]],
        'Table' => ['Element', [['TableRowArray', 'rows'], ['TableRowArray', 'tBodies'], ['TableFooter', 'tFoot'], ['TableHeader', 'tHead'], ['function', 'createCaption', 'Caption'], ['function', 'createTFoot', 'TableFooter'], ['function', 'createTHead', 'TableHeader'], ['function', 'insertRow', 'TableRow'], ['function', 'deleteCaption'], ['function', 'deleteRow'], ['function', 'deleteTFoot'], ['function', 'deleteTHead'],]],
        'TableRow' => ['Element', [['ElementArray', 'cells'], ['Number', 'sectionRowIndex'], ['Number', 'rowIndex'], ['function', 'insertCell', 'TableData'], ['function', 'deleteCell'],]],
        'Self' => ['Window', [['Number', 'outerHeight'], ['Number', 'outerWidth'], ['Number', 'screenTop'], ['Number', 'screenLeft'], ['Number', 'screenX'], ['Number', 'screenY'],]],
        'Screen' => ['Object', [['Number', 'availWidth'], ['Number', 'availHeight'], ['Number', 'colorDepth'], ['Number', 'width'], ['Number', 'height'],]],
        'Window' => ['Object', [['JSON', 'JSON'], ['Console', 'console'], ['Storage', 'sessionStorage'], ['Storage', 'localStorage'], ['function', 'onmousewheel'], ['function', 'onpagehide'], ['function', 'onpageshow'], ['function', 'onunload'], ['function', 'onload'], ['History', 'history'], ['Event', 'event'], ['String', 'status'], ['Document', 'document'], ['WindowArray', 'frames'], ['Navigator', 'navigator'], ['Location', 'location'], ['Screen', 'screen'], ['Boolean', 'closed'], ['Window', 'opener'], ['Window', 'parent'], ['Self', 'self'], ['Window', 'top']/*, ['function', 'alert']*/, ['function', 'blur'], ['function', 'focus'], ['function', 'clearInterval'], ['function', 'clearTimeout'], ['function', 'close']/*, ['function', 'confirm', 'Boolean']*/, ['function', 'moveBy'], ['function', 'open', 'Window'], ['function', 'print']/*, ['function', 'prompt', '!Object']*/, ['function', 'scrollBy'], ['function', 'scrollTo'], ['function', 'setInterval', 'Number'], ['function', 'setTimeout', 'Number'], ['function', 'encodeURIComponent', 'String'], ['function', 'encodeURI', 'String'], ['function', 'decodeURIComponent', 'String'], ['function', 'decodeURI', 'String'], ['function', 'isFinite', 'Boolean'], ['function', 'isNaN', 'Boolean'], ['function', 'parseFloat', 'Number'], ['function', 'parseInt', 'Number'], ['function', 'eval', '!Object'], ['function', 'void', 'undefined'],]],
        'Event' => ['Object', [['function', 'stopPropagation'], ['Boolean', 'cancelBubble'], ['!Element', 'target'], ['!Element', 'srcElement'], ['!Element', 'fromElement'], ['!Element', 'relatedTarget'], ['Number', 'clientX'], ['Number', 'clientY'], ['Number', 'offsetX'], ['Number', 'offsetY'], ['Number', 'pageX'], ['Number', 'pageY'], ['Number', 'screenX'], ['Number', 'screenY'], ['Boolean', 'altKey'], ['Boolean', 'metaKey'], ['Boolean', 'ctrlKey'], ['Boolean', 'shiftKey'], ['Number', 'keyCode'], ['Number', 'which'], ['Number', 'charCode'], ['Number', 'button'], ['String', 'type'],]],
        'History' => ['Object', [['Number', 'length'], ['function', 'back'], ['function', 'forward'], ['function', 'go'],]],
        'Location' => ['Object', [['String', 'hash'], ['String', 'host'], ['String', 'hostname'], ['String', 'href'], ['String', 'pathname'], ['Number', 'port'], ['String', 'protocol'], ['String', 'search'], ['function', 'assign'], ['function', 'reload'], ['function', 'replace'],]],
        'Navigator' => ['Object', [['String', 'appCodeName'], ['String', 'appName'], ['Number', 'appVersion'], ['Boolean', 'cookieEnabled'], ['String', 'platform'], ['String', 'userAgent'], ['function', 'javaEnabled', 'Boolean'], ['StringArray', 'plugins'],]],
        'XMLHttpRequest' => ['Object', [['function', 'abort'], ['function', 'getAllResponseHeaders', 'String'], ['function', 'getResponseHeader', 'String'], ['function', 'open'], ['function', 'send'], ['function', 'setRequestHeader'], ['Function', 'onreadystatechange'], ['Number', 'readyState'], ['String', 'responseText'], ['XMLDocument', 'responseXML'], ['Number', 'status'], ['String', 'statusText'],]],
        'ActiveXObject' => ['Object', []],
        'DOMParser' => ['Object', [['function', 'parseFromString', 'String']]],
        'Range' => ['Object', [['Number', 'endOffset'], ['Number', 'startOffset'], ['function', 'setStart'], ['function', 'setEnd'], ['function', 'collapse'], ['Boolean', 'collapsed'],]],
        'Implementation' => ['Object', [['function', 'createDocument', 'XMLDocument'],]],
        'EmbedLiveAudioOrActiveMovie' => ['Object', [['function', 'play'], ['function', 'pause'], ['function', 'stop'],]],
        'EmbedActiveXFlash' => ['Object', [['Number', 'ReadyState'], ['Number', 'TotalFrames'], ['Number', 'FrameNum'], ['Boolean', 'Playing'], ['String', 'Quality'], ['Number', 'ScaleMode'], ['Number', 'AlignMode'], ['String', 'Backgroundcolor'], ['Boolean', 'Loop'], ['String', 'Movie'], ['function', 'Play'], ['function', 'Stop'], ['function', 'Back'], ['function', 'Forward'], ['function', 'Rewind'],]],
        'EmbedLiveConnectFlash' => ['Object', [['function', 'LoadMovie'], ['function', 'GetVariable', '!Object'], ['function', 'Play'], ['function', 'StopPlay'], ['function', 'IsPlaying', 'Boolean'], ['function', 'GotoFrame'], ['function', 'TotalFrames', 'Number'], ['function', 'Rewind'], ['function', 'SetZoomRect'], ['function', 'Zoom'], ['function', 'Pan'], ['function', 'PercentLoaded', 'Number'],]],
        'DomException' => ['Error', [['Number', 'code'], ['Number', '!INDEX_SIZE_ERR'], ['Number', '!DOMSTRING_SIZE_ERR'], ['Number', '!HIERARCHY_REQUEST_ERR'], ['Number', '!WRONG_DOCUMENT_ERR'], ['Number', '!INVALID_CHARACTER_ERR'], ['Number', '!NO_DATA_ALLOWED_ERR'], ['Number', '!NO_MODIFICATION_ALLOWED_ERR'], ['Number', '!NOT_FOUND_ERR'], ['Number', '!NOT_SUPPORTED_ERR'], ['Number', '!INUSE_ATTRIBUTE_ERR'], ['Number', '!INVALID_STATE_ERR'], ['Number', '!SYNTAX_ERR'], ['Number', '!INVALID_MODIFICATION_ERR'], ['Number', '!NAMESPACE_ERR'], ['Number', '!INVALID_ACCESS_ERR'], ['Number', '!WEBSTANDARDS_ERR'], ['Number', '!TYPE_MISMATCH_ERR'],]],
        'Storage' => ['Object', [['Number', 'length'], ['function', 'getItem', 'Object'], ['function', 'setItem'], ['function', 'removeItem'], ['function', 'clear']]],
        'Console' => ['Object', [['function', 'log']]],
        'JSON' => ['Object', [['function', 'parse', 'Object'], ['function', 'stringify', 'String']]],

        /* Some aggregate types */
        'StringArray' => ['Array', []],
        'NodeArray' => ['Array', []],
        'ElementArray' => ['Array', []],
        'FormArray' => ['Array', []],
        'TableRowArray' => ['Array', []],
        'WindowArray' => ['Array', []],

        /* Composr-specific */
        '$cms' => ['Object', []],
        '$dom' => ['Object', []],
        'strVal' => ['function', []],
        'objVal' => ['function', []],
        'arrayVal' => ['function', []],
        'boolVal' => ['function', []],
        'intVal' => ['function', []],
        'numVal' => ['function', []],

        /* De facto-standard */
        'jQuery' => ['Object', []],

        // Future things coming, but not currently here (may not be added, not strictly needed as we ignore missing properties/methods, and the API scope has mushroomed since 'HTML5'):
        //  Audio, Video, Canvas, File, WebRTC, SVG, WebGL, Crypto, HTML5 DOM APIs, Device, devicePixelRatio, Web Workers, Web Sockets
    ];

    // Hard-code all the inheritance
    $found_one = false;
    do {
        $found_one = false;
        foreach ($JS_PROTOTYPES as $prototype => $details) {
            if (($details[0] !== null) && ($details[0] != '')) {
                if (!array_key_exists(2, $JS_PROTOTYPES[$details[0]])) {
                    $JS_PROTOTYPES[$details[0]][2] = []; // This is an inverse-list of all the classes inheriting from self
                }

                $t = $details[0];
                do {
                    $JS_PROTOTYPES[$t][2] += [$prototype => true];
                    $t = isset($JS_PROTOTYPES[$t][3]) ? $JS_PROTOTYPES[$t][3] : $JS_PROTOTYPES[$t][0];
                } while ($t !== null);
                $details[1] = array_merge($JS_PROTOTYPES[$details[0]][1], $details[1]);
                if (!isset($details[2])) {
                    $details[3] = $details[0];
                }
                $details[0] = $JS_PROTOTYPES[$details[0]][0];
                $found_one = true;

                $JS_PROTOTYPES[$prototype] = $details;
            }
        }
    } while ($found_one);
    reset_js_global_variables();
}

/**
 * Return the global variable array to the defaults.
 */
function reset_js_global_variables()
{
    // These are the global JavaScript objects (static prototypes like 'Math') are also used but those are difference because they can be instantiated, and because some, like Array, can act like functions). In actual fact, everything is "window.", but we don't want to force qualifying into window because it would block our detection
    global $JS_GLOBAL_VARIABLES;
    $JS_GLOBAL_VARIABLES = [
        'window' => ['function_return' => null, 'unused_value' => null, 'first_mention' => 0, 'is_global' => true, 'types' => ['Window']],
    ];
    global $JS_PROTOTYPES;
    foreach (array_keys($JS_PROTOTYPES) as $name) {
        $JS_GLOBAL_VARIABLES[$name] = ['function_return' => null, 'unused_value' => null, 'first_mention' => 0, 'is_global' => true, 'types' => [$name]];
    }
    foreach ($JS_PROTOTYPES['Window'][1] as $t) {
        $JS_GLOBAL_VARIABLES[$t[1]] = ['function_return' => isset($t[2]) ? $t[2] : null, 'unused_value' => null, 'first_mention' => 0, 'is_global' => true, 'types' => [$t[0]]];
    }
}

/**
 * Check some JS code for conformance.
 *
 * @param  string $data Code
 * @param  boolean $raw_errors Whether to return raw-errors
 * @return array Parse information
 */
function check_js(string $data, bool $raw_errors = false) : array
{
    global $JS_ERRORS, $JS_TAG_RANGES, $JS_VALUE_RANGES;
    $JS_ERRORS = [];
    $JS_TAG_RANGES = [];
    $JS_VALUE_RANGES = [];
    $lexed = webstandards_js_lex($data);
    if ($lexed !== null) {
        $parsed = webstandards_js_parse();
        if ($parsed !== null) {
            _check_js($parsed);
        }
    }

    unset($GLOBALS['JS_LEX_TOKENS']);

    $errors = [];
    if ($raw_errors) {
        foreach ($JS_ERRORS as $error) {
            $out = [0 => $error[0], 'raw' => true, 'pos' => $error[3]];
            $errors[] = $out;
        }
        unset($GLOBALS['JS_ERRORS']);
        return $errors;
    }
    foreach ($JS_ERRORS as $error) {
        $out = [];
        $out['line'] = $error[2];
        $out['pos'] = $error[1];
        $out['global_pos'] = $error[3];
        $out['error'] = $error[0];
        $errors[] = $out;
    }
    unset($GLOBALS['JS_ERRORS']);
    return ['level_ranges' => null, 'tag_ranges' => $JS_TAG_RANGES, 'value_ranges' => $JS_VALUE_RANGES, 'errors' => $errors];
}

/**
 * Do the actual code check on the parse structure.
 *
 * @param  array $structure Parse structure
 *
 * @ignore
 */
function _check_js(array $structure)
{
    global $JS_GLOBAL_VARIABLES, $JS_LOCAL_VARIABLES;

    // Put all functions in as local variables
    foreach ($structure['functions'] as $function) {
        $JS_GLOBAL_VARIABLES[$function['name']] = ['function_return' => '!Object', 'is_global' => true, 'types' => ['function'], 'unused_value' => null, 'first_mention' => $function['offset']];
    }

    // Check global commands
    $JS_LOCAL_VARIABLES = $JS_GLOBAL_VARIABLES;
    js_check_command($structure['main'], 0);

    // Update global variables for changes within the global commands
    foreach ($JS_LOCAL_VARIABLES as $name => $v) {
        if (isset($JS_GLOBAL_VARIABLES[$name])) {
            $JS_GLOBAL_VARIABLES[$name]['types'] = array_unique(array_merge($JS_GLOBAL_VARIABLES[$name]['types'], $v['types']));
        } else {
            $JS_GLOBAL_VARIABLES[$name] = $v;
            $JS_GLOBAL_VARIABLES[$name]['is_global'] = true;
        }
    }

    // Check all functions
    foreach ($structure['functions'] as $function) {
        $JS_LOCAL_VARIABLES = $JS_GLOBAL_VARIABLES;
        js_check_function($function);
    }

    // Check for type conflicts in the global variables
    js_check_variable_list($JS_GLOBAL_VARIABLES);
}

/**
 * Check a function declaration.
 *
 * @param  array $function The function details
 */
function js_check_function(array $function)
{
    global $JS_LOCAL_VARIABLES, $JS_GLOBAL_VARIABLES;
    $old_local = $JS_LOCAL_VARIABLES;

    // Initialise any local variables that come from parameters
    foreach ($function['parameters'] as $p) {
        js_add_variable_reference($p[1], $function['offset'], true);
    }
    js_add_variable_reference('arguments', $function['offset'], true);
    js_set_composr_type('arguments', 'Array');
    js_add_variable_reference('this', $function['offset'], true);
    js_add_variable_reference('event', $function['offset'], true);

    // Check commands
    js_check_command($function['code'], 0);

    // Check for type conflicts in the variables
    foreach ($JS_LOCAL_VARIABLES as $variable => $vinfo) {
        if (isset($old_local[$variable])) {
            $old_local[$variable]['unused_value'] = $vinfo['unused_value'];
            unset($JS_LOCAL_VARIABLES[$variable]);
        }
    }
    js_check_variable_list($JS_LOCAL_VARIABLES);

    $JS_LOCAL_VARIABLES = $old_local;
}

/**
 * Check a variable list for consistency.
 *
 * @param  array $JS_LOCAL_VARIABLES The variable list
 */
function js_check_variable_list(array $JS_LOCAL_VARIABLES)
{
    global $JS_PROTOTYPES;
    foreach ($JS_LOCAL_VARIABLES as $name => $v) {
        // Check for type conflicts
        $conflict = false;
        $unique = array_unique($v['types']);
        foreach ($unique as $t1) {
            foreach ($unique as $t2) {
                if ($t1 == '') {
                    continue; // Weird
                }
                if ($t2 == '') {
                    continue; // Weird
                }
                if ($t1 == 'Null') {
                    continue;
                }
                if ($t2 == 'Null') {
                    continue;
                }
                if ($t1 == $t2) {
                    continue;
                }

                if (($t1[0] != '!') && ($t2[0] != '!')) {
                    $conflict = true;
                    break;
                }

                $_t1 = ($t1[0] == '!') ? substr($t1, 1) : $t1;
                $_t2 = ($t2[0] == '!') ? substr($t2, 1) : $t2;
                $potentials1 = [$_t1 => true];
                $potentials2 = [$_t2 => true];
                if (($t1[0] == '!') && (isset($JS_PROTOTYPES[substr($t1, 1)][2]))) {
                    $potentials1 += $JS_PROTOTYPES[substr($t1, 1)][2];
                }
                if (($t2[0] == '!') && (isset($JS_PROTOTYPES[substr($t2, 1)][2]))) {
                    $potentials2 += $JS_PROTOTYPES[substr($t2, 1)][2];
                }
                if (empty(array_intersect(array_keys($potentials1), array_keys($potentials2)))) {
                    $conflict = true;
                }
            }
        }
        if ($conflict) {
            $a = implode(',', array_unique($v['types']));
            $both = array_unique($v['types']);
            sort($both);
            if (($both != ['ActiveXObject', 'XMLHttpRequest']) && ($both != ['ActiveXObject', 'XMLDocument'])) {
                js_log_warning('CHECKER', 'Type conflict for variable: ' . $name . ' (' . $a . ')', $v['first_mention']);
            }
        }

        // Check for non-used variables
        if (($v['unused_value']) && ($name != '__return') && ($name != '_') && (!$v['is_global']) && (!in_array($name, ['this', 'arguments', 'event']))) {
            //js_log_warning('CHECKER', 'Non-used ' . ($v['unused_value'] ? 'value' : 'variable') . ' (\'' . $name . '\')', $v['first_mention']);   Annoying error, unneeded, inaccurate
        }
    }
}

/**
 * Check a parsed command.
 *
 * @param  array $command The command
 * @param  integer $depth The block depth we are searching at
 */
function js_check_command(array $command, int $depth)
{
    if (empty($command)) {
        return;
    }

    global $JS_LOCAL_VARIABLES, $CURRENT_CLASS;

    // Need to load up functions in advance
    foreach ($command as $i => $c) {
        if (empty($c)) {
            continue;
        }

        if (is_integer($c[count($c) - 1])) {
            $c_pos = $c[count($c) - 1];
        } else {
            $c_pos = $c[count($c) - 2];
        }

        switch ($c[0]) {
            case 'INNER_FUNCTION':
                js_add_variable_reference($c[1]['name'], $c_pos, true);
                js_set_composr_type($c[1]['name'], 'function');
                break;
        }
    }

    // Scan rest of commands
    foreach ($command as $i => $c) {
        if (empty($c)) {
            continue;
        }

        if (is_integer($c[count($c) - 1])) {
            $c_pos = $c[count($c) - 1];
            $or = false;
        } else {
            $c_pos = $c[count($c) - 2];
            $or = true;
        }

        switch ($c[0]) {
            case 'INNER_FUNCTION':
                js_check_function($c[1]);
                break;
            case 'RETURN':
                $ret_type = js_check_expression($c[1]);
                js_add_variable_reference('__return', $c_pos, false, true);
                js_set_composr_type('__return', $ret_type);
                if (!isset($JS_LOCAL_VARIABLES['__return']['mentions'])) {
                    $JS_LOCAL_VARIABLES['__return']['mentions'] = [];
                }
                $JS_LOCAL_VARIABLES['__return']['mentions'][] = $c_pos;
                if (count($command) - 1 > $i) {
                    // Annoying js_log_warning('CHECKER', 'There is unreachable code', $c_pos);
                }
                break;
            case 'SWITCH':
                $switch_type = js_check_expression($c[1]);
                foreach ($c[2] as $case) {
                    /*
                    if ($case[0] !== null) {
                        $passes = js_ensure_type([$switch_type], js_check_expression($case[0]), $c_pos, 'Switch type inconsistency');    We are not so type-strict in JS
                        if ($passes) {
                            js_infer_expression_type_to_variable_type($switch_type, $case[0]);
                        }
                    }
                    */
                    js_check_command($case[1], $depth + 1);
                }
                break;
            case 'WITH':
                js_log_warning('CHECKER', '\'with\' is deprecated and slow - and the checker will not take it into account when checking vars', $c_pos);
                js_check_variable($c[1]);
                js_check_command($c[2], $depth);
                break;
            case 'IF':
                $rem = $GLOBALS['JS_PARSING_CONDITIONAL'];
                $GLOBALS['JS_PARSING_CONDITIONAL'] = true;
                $t = js_check_expression($c[1]);
                $GLOBALS['JS_PARSING_CONDITIONAL'] = $rem;
                /*$passes = js_ensure_type(['Boolean'], $t, $c_pos, 'Conditionals must be Boolean (if) [is ' . $t . ']');    We are not so type-strict in JS
                if ($passes) {
                    js_infer_expression_type_to_variable_type('Boolean', $c[1]);
                }*/
                js_check_command($c[2], $depth);
                break;
            case 'IF_ELSE':
                $rem = $GLOBALS['JS_PARSING_CONDITIONAL'];
                $GLOBALS['JS_PARSING_CONDITIONAL'] = true;
                $t = js_check_expression($c[1]);
                $GLOBALS['JS_PARSING_CONDITIONAL'] = $rem;
                /*$passes = js_ensure_type(['Boolean'], $t, $c_pos, 'Conditionals must be Boolean (if-else)');    We are not so type-strict in JS
                if ($passes) {
                    js_infer_expression_type_to_variable_type('Boolean', $c[1]);
                }*/
                js_check_command($c[2], $depth);
                js_check_command($c[3], $depth);
                break;
            case 'FOREACH_list':
                /*$passes = js_ensure_type(['Array'], js_check_expression($c[1]), $c_pos, 'FOR-OF must take Array');    Could be any object in JS
                if ($passes) {
                    js_infer_expression_type_to_variable_type('Array', $c[1]);
                }*/
                js_add_variable_reference($c[2][1], $c_pos, true);
                js_check_command($c[3], $depth + 1);
                break;
            case 'FOR':
                if ($c[1] !== null) {
                    foreach ($c[1] as $init_command) {
                        js_check_command([$init_command], $depth + 1);
                    }
                }
                if ($c[3] !== null) {
                    foreach ($c[3] as $control_command) {
                        js_check_command([$control_command], $depth + 1);
                    }
                }
                $passes = js_ensure_type(['Boolean'], js_check_expression($c[2]), $c_pos, 'Loop conditionals must be Boolean (for)');
                //if ($passes) js_infer_expression_type_to_variable_type('Boolean', $c[2]);
                if ($c[4] !== null) {
                    js_check_command($c[4], $depth + 1);
                }
                break;
            case 'DO':
                js_check_command($c[2], $depth + 1);
                $passes = js_ensure_type(['Boolean'], js_check_expression($c[1]), $c_pos, 'Loop conditionals must be Boolean (do)');
                //if ($passes) js_infer_expression_type_to_variable_type('Boolean', $c[1]);
                break;
            case 'WHILE':
                $passes = js_ensure_type(['Boolean'], js_check_expression($c[1]), $c_pos, 'Loop conditionals must be Boolean (while)');
                //if ($passes) js_infer_expression_type_to_variable_type('Boolean', $c[1]);
                js_check_command($c[2], $depth + 1);
                $rem = $GLOBALS['JS_PARSING_CONDITIONAL'];
                $GLOBALS['JS_PARSING_CONDITIONAL'] = true;
                js_check_expression($c[1]); // To fixup "unused variable" issues (might double report, but that's better that false-positives)
                $GLOBALS['JS_PARSING_CONDITIONAL'] = $rem;
                break;
            case 'TRY':
                js_check_command($c[1], $depth + 1);
                break;
            case 'CATCH':
                js_add_variable_reference($c[1], $c[3], true);
                js_set_composr_type($c[1], 'Error');
                js_check_command($c[2], $depth + 1);
                break;
            case 'FINALLY':
                js_check_command($c[1], $depth + 1);
                break;
            case 'THROW':
                js_check_expression($c[1]);
                break;
            case 'DELETE':
                js_check_variable($c[1]);
                break;
            case 'CONTINUE':
                break;
            case 'BREAK':
                break;
            case 'VAR':
                foreach ($c[1] as $var) {
                    js_add_variable_reference($var[1], $c_pos, true);
                    if ($var[2] !== null) {
                        js_set_composr_type($var[1], js_check_expression($var[2]));
                    }
                }
                break;

            default:
                js_check_expression($c, true);
        }

        if ($or) {
            js_check_command([$c[count($c) - 1]], $depth);
        }
    }
}

/**
 * Check an assignment statement.
 *
 * @param  array $c The complex assignment details
 * @param  integer $c_pos The position this is at in the parse
 * @return string The assigned type
 */
function js_check_assignment(array $c, int $c_pos) : string
{
    $e_type = js_check_expression($c[3]);
    $op = $c[1];
    $target = $c[2];

    // Special assignment operational checks
    if (in_array($op, ['PLUS_EQUAL'])) {
        js_ensure_type(['Array', 'Number', 'String'], $e_type, $c_pos, 'Can only perform addition to strings or arrays or numbers (not ' . $e_type . ')');
        if ($target[0] == 'VARIABLE') {
            $v_type = js_get_variable_type($target);
            js_ensure_type(['Array', 'Number', 'String'], $v_type, $c_pos, 'Can only perform addition to strings or arrays or numbers (not ' . $v_type . ')');
        }
    }
    if (in_array($op, ['DIV_EQUAL', 'MUL_EQUAL', 'SUBTRACT_EQUAL', 'SL_EQUAL', 'SR_EQUAL', 'ZSR_EQUAL', 'BW_AND_EQUAL', 'BW_OR_EQUAL'])) {
        js_ensure_type(['Number'], $e_type, $c_pos, 'Can only perform relative arithmetic with numbers (not ' . $e_type . ')');
        if ($target[0] == 'VARIABLE') {
            $v_type = js_get_variable_type($target);
            js_ensure_type(['Number'], $v_type, $c_pos, 'Can only perform relative arithmetic with numbers (not ' . $v_type . ')');
        }
    }

    // js_check_variable will do the internalised checks. Type conflict checks will be done at the end of the function, based on all the types the variable has been set with. Variable type usage checks are done inside expressions.
    if ($target[0] == 'VARIABLE') {
        if (($op == 'EQUAL') && (empty($target[2])) && (is_string($target[1]))) {
            if ($target[1] == 'this') {
                js_log_warning('CHECKER', '\'this\' is immutable', $c_pos);
            }

            js_add_variable_reference($target[1], $c_pos, true, $e_type == 'Null');
            js_set_composr_type($target[1], $e_type);
        }
        $type = js_check_variable($target);
        return $type;
    }

    // Should never get here
    return '!Object';
}

/**
 * Check an expression.
 *
 * @param  array $e The complex expression
 * @param  boolean $secondary Whether the expression is being used as a command (i.e. whether the expression is not used for the result, but rather, the secondary consequences of calculating it)
 * @param  boolean $is_guarded Whether the expression is being guarded and hence is not a proper reference
 * @return string The type
 */
function js_check_expression(array $e, bool $secondary = false, bool $is_guarded = false) : string
{
    $c_pos = $e[count($e) - 1];

    if ($e[0] == 'VARIABLE_REFERENCE') {
        $e[0] = 'VARIABLE'; // Handled in the same way
    }
    if ($e[0] == 'SOLO') {
        $type = js_check_expression($e[1], false, $is_guarded);
        return $type;
    }
    if ($e[0] == 'TERNARY_IF') {
        $rem = $GLOBALS['JS_PARSING_CONDITIONAL'];
        $GLOBALS['JS_PARSING_CONDITIONAL'] = true;
        $t = js_check_expression($e[1], false, $is_guarded);
        $GLOBALS['JS_PARSING_CONDITIONAL'] = $rem;
        //$passes = js_ensure_type(['Boolean'], $t, $c_pos, 'Conditionals must be Boolean (ternary)');    We are not so type-strict in JS
        //if ($passes) js_infer_expression_type_to_variable_type('Boolean', $e[1]);
        $type_a = js_check_expression($e[2][0]);
        $type_b = js_check_expression($e[2][1]);
        /*if (($type_a != 'Null') && ($type_b != 'Null'))
        {
            $passes = js_ensure_type([$type_a], $type_b, $c_pos, 'Type symmetry error in ternary operator');    We are not so type-strict in JS
            //if ($passes) js_infer_expression_type_to_variable_type($type_a, $e[2][1]);
        }*/
        return $type_a;
    }
    if (in_array($e[0], ['BOOLEAN_AND', 'BOOLEAN_OR'])) {
        $exp = js_check_expression($e[1], false, $is_guarded);
        //$passes = js_ensure_type(['Boolean'], $exp, $c_pos - 1, 'Can only use Boolean combinators with Booleans');    We are not so type-strict in JS
        //if ($passes) js_infer_expression_type_to_variable_type('Boolean', $e[1]);
        $exp = js_check_expression($e[2]);
        //$passes = js_ensure_type(['Boolean'], $exp, $c_pos, 'Can only use Boolean combinators with Booleans');    We are not so type-strict in JS
        //if ($passes) js_infer_expression_type_to_variable_type('Boolean', $e[2]);
        return '!Object'; // JS is weird, ORing actually returns the first "truey" element
    }
    if (in_array($e[0], ['BW_XOR', 'BW_AND', 'BW_OR', 'SL', 'SR', 'ZSR', 'REMAINDER'])) {
        $passes = js_ensure_type(['Number'], js_check_expression($e[1], false, $is_guarded), $c_pos - 1, 'Can only use integer combinators with Numbers');
        //if ($passes) js_infer_expression_type_to_variable_type('Number', $e[1]);
        $passes = js_ensure_type(['Number'], js_check_expression($e[2]), $c_pos, 'Can only use integer combinators with Numbers');
        //if ($passes) js_infer_expression_type_to_variable_type('Number', $e[2]);
        return 'Number';
    }
    if (in_array($e[0], ['CONC'])) {
        $type_a = js_check_expression($e[1], false, $is_guarded);
        $type_b = js_check_expression($e[2]);
        $passes = js_ensure_type(['String'], $type_a, $c_pos - 1, 'Can only use string combinators with Strings (1) (not ' . $type_a . ')');
        //if ($passes) js_infer_expression_type_to_variable_type('String', $e[1]);
        $passes = js_ensure_type(['String'], $type_b, $c_pos, 'Can only use string combinators with Strings (2) (not ' . $type_b . ')');
        //if ($passes) js_infer_expression_type_to_variable_type('String', $e[2]);
        return 'String';
    }
    if (in_array($e[0], ['SUBTRACT', 'MULTIPLY', 'DIVIDE'])) {
        $type_a = js_check_expression($e[1], false, $is_guarded);
        $t = js_check_expression($e[2]);
        js_ensure_type(['Number', 'Date'], $type_a, $c_pos - 1, 'Can only use arithmetical combinators with Numbers (1) (not ' . $type_a . ')');
        js_ensure_type(['Number', 'Date'], $t, $c_pos, 'Can only use arithmetical combinators with Numbers (2) (not ' . $t . ')');
        return ($e[0] == 'DIVIDE') ? 'Number' : $type_a;
    }
    if (in_array($e[0], ['ADD'])) {
        $type_a = js_check_expression($e[1], false, $is_guarded);
        $t = js_check_expression($e[2]);
        js_ensure_type(['Number', 'Array', 'String', 'Date', 'Location'], $type_a, $c_pos - 1, 'Can only use + combinator with Strings/Numbers/Arrays (1) (not ' . $type_a . ')');
        js_ensure_type(['Number', 'Array', 'String', 'Date', 'Location'], $t, $c_pos, 'Can only use + combinator with Strings/Numbers/Arrays (2) (not ' . $t . ')');
        if ($type_a == 'Location') {
            $type_a = 'String';
        }
        return $type_a;
    }
    if (in_array($e[0], ['IS_GREATER_OR_EQUAL', 'IS_SMALLER_OR_EQUAL', 'IS_GREATER', 'IS_SMALLER'])) {
        $type_a = js_check_expression($e[1], false, $is_guarded);
        $type_b = js_check_expression($e[2]);
        js_ensure_type(['Number', 'String', 'Date'], $type_a, $c_pos - 1, 'Can only use arithmetical comparators with Numbers or Strings (not ' . $type_a . ')');
        js_ensure_type(['Number', 'String', 'Date'], $type_b, $c_pos, 'Can only use arithmetical comparators with Numbers or Strings (not ' . $type_b . ')');
        js_ensure_type([$type_a], $type_b, $c_pos, 'Comparators must have type symmetric operands (' . $type_a . ' vs ' . $type_b . ')');
        return 'Boolean';
    }
    if (in_array($e[0], ['IS_IDENTICAL', 'IS_NOT_IDENTICAL'])) {
        return 'Boolean';
    }
    if (in_array($e[0], ['IS_EQUAL', 'IS_NOT_EQUAL'])) {
        $type_a = js_check_expression($e[1], false, $is_guarded);
        $type_b = js_check_expression($e[2]);
        if (($e[0] == 'IS_EQUAL') && ($e[2][0] == 'LITERAL') && ($e[2][1][0] == 'Boolean')) {
            js_log_warning('CHECKER', 'It\'s redundant to equate to truths', $c_pos);
        }
        $passes = js_ensure_type([$type_a], $type_b, $c_pos, 'Comparators must have type symmetric operands (' . $type_a . ' vs ' . $type_b . ')');
        //if ($passes) js_infer_expression_type_to_variable_type($type_a, $e[2]);
        return 'Boolean';
    }
    if (($e[0] == 'INSTANCEOF') || ($e[0] == 'IN')) {
        if (($e[0] == 'IN') && ($e[1][0] == 'LITERAL')) {
            js_ensure_type(['String'], js_check_expression($e[1], false, $is_guarded), $c_pos, 'Can only use \'in\' on strings');
        } else {
            js_check_variable($e[1], false, $is_guarded);
        }
        return 'Boolean';
    }
    $inner = $e;
    switch ($inner[0]) {
        case 'PRE_DEC':
            js_ensure_type(['Number'], js_check_variable($inner[1], false, $is_guarded), $c_pos, 'Can only decrement numbers');
            break;
        case 'PRE_INC':
            js_ensure_type(['Number'], js_check_variable($inner[1], false, $is_guarded), $c_pos, 'Can only increment numbers');
            break;
        case 'DEC':
            js_ensure_type(['Number'], js_check_variable($inner[1], false, $is_guarded), $c_pos, 'Can only decrement numbers');
            break;
        case 'INC':
            js_ensure_type(['Number'], js_check_variable($inner[1], false, $is_guarded), $c_pos, 'Can only increment numbers');
            break;
        case 'ASSIGNMENT':
            $ret = js_check_assignment($inner, $c_pos);
            return $ret;
        case 'OBJECT_OPERATOR':
            $class = js_check_expression($inner[1], false, $is_guarded);
            if ($class === null) {
                return 'Null';
            }
            if ($inner[2][0] == 'CALL') {
                $ret = js_check_call($inner[2], $c_pos, $class);
                if ($ret === null) {
                    if (!$secondary) {
                        js_log_warning('CHECKER', '(Function (\'' . (is_array($inner[1]) ? '(complex)' : $inner[1]) . '\') that returns no value used in an expression', $c_pos);
                    }
                    return '!Object';
                }
            } elseif ($inner[2][0] == 'VARIABLE') {
                $ret = js_check_variable($inner[2], true, false, $class);
            } else {
                global $JS_LOCAL_VARIABLES;
                $tmp = $JS_LOCAL_VARIABLES;
                js_check_expression($inner[2], false, true); // Chains with guarded on, because things further in the chain are not free expressions so we can't ground them to run checks
                $JS_LOCAL_VARIABLES = $tmp;
                $ret = '!Object';
            }
            return $ret;
        case 'CALL':
            $ret = js_check_call($inner, $c_pos, $is_guarded ? 'Object' : null);
            if ($ret === null) {
                if (!$secondary) {
                    js_log_warning('CHECKER', '(Function (\'' . (is_array($inner[1]) ? '(complex)' : $inner[1]) . '\') that returns no value used in an expression', $c_pos);
                }
                return '!Object';
            }
            return $ret;
        case 'PARENTHESISED':
            return js_check_expression($inner[1], false, $is_guarded);
        case 'BOOLEAN_NOT':
            $expression = js_check_expression($inner[1], false, $is_guarded);
            //$passes = js_ensure_type(['Boolean'], $expression, $c_pos, 'Can only \'NOT\' a Boolean');    We are not so type-strict in JS
            //if ($passes) js_infer_expression_type_to_variable_type('Boolean', $inner[1]);
            return 'Boolean';
        case 'TYPEOF':
            js_check_expression($inner[1], false, true);
            return 'String';
        case 'BW_NOT':
            $type = js_check_expression($inner[1], false, $is_guarded);
            js_ensure_type(['Number'], $type, $c_pos, 'Can only negate a Number');
            return $type;
        case 'NEGATE':
            $type = js_check_expression($inner[1], false, $is_guarded);
            js_ensure_type(['Number'], $type, $c_pos, 'Can only negate a Number');
            return $type;
        case 'LITERAL':
            $type = $inner[1][0];
            return $type;
        case 'NEW_OBJECT_FUNCTION':
            js_check_function($inner[1]);
            return 'function';
        case 'NEW_OBJECT':
            foreach ($inner[2] as $param) {
                js_check_expression($param);
            }
            if (!empty($inner[2])) {
                js_check_call(['CALL', ['VARIABLE', $inner[1], [], $c_pos], $inner[2]], $c_pos, $inner[1]);
            }
            if ($inner[1] == 'Array') {
                return '!Array';
            }
            return $inner[1];
        case 'VARIABLE':
            if (!$is_guarded) {
                return js_check_variable($inner, true);
            }
            break;
    }
    return '!Object';
}

/**
 * Check a function call.
 *
 * @param  array $c The (possibly complex) variable that is the function identifier
 * @param  integer $c_pos The position this is at in the parse
 * @param  ?string $class The class the given variable is in (null: global/as-specified-internally-in-c)
 * @return ?string The return type (null: nothing returned)
 */
function js_check_call(array $c, int $c_pos, ?string $class = null) : ?string
{
    list($type, $ret) = js_check_variable($c[1], true, true, $class, false, true);
    if (($type != 'function') && ($type != '!Object') && ($c[1][1] != $type)) { // Latter check for case of calling a prototype as a function (e.g. Array)  [a shorthand for construction]
        js_log_warning('CHECKER', 'Calling an object that does not seem to be of type \'function\' (\'' . $type . '\')', $c_pos);
    }

    foreach ($c[2] as $param) {
        js_check_expression($param);
    }
    if ($type != 'function') {
        return '!Object';
    }
    return $ret;
}

/**
 * Check a variable.
 *
 * @param  array $variable The (possibly complex) variable
 * @param  boolean $reference Whether the variable is being used referentially (i.e. not being set)
 * @param  boolean $function_duality Whether to return the type and function-return-type pair, rather than just the type
 * @param  ?string $class The class the variable is referencing within (null: global)
 * @param  boolean $allow_static Whether the given class is being referenced directly in static form
 * @param  boolean $is_call Whether this is for a function call
 * @return mixed The return type and possibly function return type (if requested)
 */
function js_check_variable(array $variable, bool $reference = false, bool $function_duality = false, ?string $class = null, bool $allow_static = false, bool $is_call = false)
{
    global $JS_LOCAL_VARIABLES;

    $identifier = $variable[1];
    if (is_array($identifier)) { // Normally just a string, but JS is awkward and allows expression :S
        $exp_type = js_check_expression($identifier, false, true);
        $variable[1] = $exp_type;
        return js_check_variable($variable, $reference, $function_duality, null, false, $is_call);
    }

    $_class = null;

    if ($class === null) {
        if ($identifier[0] != '!') { // Sometimes we use fake static objects (like !Object), and we can't start referencing these as real variables
            // Add to reference count if: this specifically is a reference, or it's complex therefore the base is explicitly a reference, or we are forced to add it because it is yet unseen
            if (($reference) || (!empty($variable[2])) || (!isset($JS_LOCAL_VARIABLES[$identifier]))) {
                js_add_variable_reference($identifier, $variable[count($variable) - 1], !$reference, ($reference) || (!empty($variable[2])), null, $is_call && empty($variable[2]));
            } else {
                js_mention_undeclared_variables($identifier, $variable[3]); // js_add_variable_reference would have itself called this, but as that was not called we must do it here instead
            }
        }
    } else {
        global $JS_PROTOTYPES;
        if (isset($JS_PROTOTYPES[$class])) {
            $found = null;
            foreach ($JS_PROTOTYPES[$class][1] as $_class => $_found) {
                if (($_found[1] == $identifier) || (($_found[1] == '!' . $identifier) && ($allow_static))) {
                    $found = $_found;
                    break;
                }
            }
            if (($class != 'self') && ($class != 'Window') && ($identifier != $class) && ($class != 'Object')) { // We're allowed to freely add to Object because we need to to make our own. It's also not likely people will "mistakingly" handle things they think Object has but it doesn't.
                if (($GLOBALS['JS_PARSING_CONDITIONAL']) && (empty($variable[2]))) { // We're running a conditional on this, meaning the user is likely checking to see if it exists (if it's a boolean that doesn't exist, we're in trouble, but unfortunately it's ambiguous).
                    // We add the variable, because it might have been guaranteed. We're screwed if it is not a guaranteeing conditional, but it's impossible to test that ("the halting problem")
                    if (($class == 'Window') || ($class == 'Self')) {
                        //js_add_variable_reference($identifier, $variable[count($variable) - 1], true, false, null, true); Causes confusion
                    }
                    $JS_PROTOTYPES[$class][1][] = ['!Object', $identifier]; // Could be any type
                }
            }
            if ($found === null) {
                if (($class != 'self') && ($class != 'Window') && ($identifier != $class) && ($class != 'Object')) { // We're allowed to freely add to Object because we need to to make our own. It's also not likely people will "mistakingly" handle things they think Object has but it doesn't.
                    if ((!$GLOBALS['JS_PARSING_CONDITIONAL']) || (!empty($variable[2]))) { // We're running a conditional on this, meaning the user is likely checking to see if it exists (if it's a boolean that doesn't exist, we're in trouble, but unfortunately it's ambiguous).
                        if ($GLOBALS['WEBSTANDARDS_MANUAL']) {
                            if ($reference) {
                                js_log_warning('CHECKER', '\'' . $identifier . '\' is an unknown member of the class \'' . $class . '\'', $variable[3]);
                            }
                        }
                    }
                }
                if ($function_duality) {
                    return ['!Object', '!Object'];
                }
                return '!Object';
            } else {
                $_class = $found[0];
                if (empty($variable[2])) {
                    if ($function_duality) {
                        return [$found[0], isset($found[2]) ? $found[2] : null];
                    }
                    return $found[0];
                }
            }
        } else {
            if ($function_duality) {
                return ['!Object', '!Object'];
            }
            return '!Object';
        }
    }

    if (!empty($variable[2])) { // Complex: we must perform checks to make sure the base is of the correct type for the complexity to be valid. We must also note any deep variable references used in array index expressions
        // Further depth to scan extractive expressions for?
        if ((in_array($variable[2][0], ['ARRAY_AT', 'OBJECT_OPERATOR'])) && (!empty($variable[2][2]))) {
            js_scan_extractive_expressions($variable[2][2]);
        }

        if ($variable[2][0] == 'ARRAY_AT') {
            js_check_expression($variable[2][1]);
            $exp_type = js_check_variable(['VARIABLE', $identifier, [], $variable[count($variable) - 1]], true, false, $class);

            $pos = strpos($exp_type, 'Array');
            if ($pos !== false) {
                $exp_type = substr($exp_type, 0, $pos);
                if (($exp_type == '') || ($exp_type == '!')) {
                    $exp_type = '!Object';
                }
            } else {
                $exp_type = '!Object';
            }
            if (!empty($variable[2][2])) {
                return js_check_variable(['VARIABLE', $exp_type, $variable[2][2], $variable[count($variable) - 1]], true, $function_duality, $exp_type, true);
            }
            if ($function_duality) {
                return [$exp_type, '!Object'];
            }
            return $exp_type;
        }
        if ($variable[2][0] == 'OBJECT_OPERATOR') {
            if (!empty($variable[2][1][2])) {
                if ($function_duality) {
                    return ['!Object', '!Object'];
                }
                return '!Object';
            }
            if ($_class === null) {
                $_class = js_check_variable(['VARIABLE', $identifier, [], $variable[count($variable) - 1]]);
            }
            return js_check_variable(['VARIABLE', $variable[2][1][1], $variable[2][2], $variable[count($variable) - 1]], $reference, $function_duality, $_class, $_class == $identifier);
        }
        if ($variable[2][0] == 'CALL') {
            $ret = js_check_call($variable[2], $variable[3], js_get_variable_type($variable));
            if ($ret === null) {
                return '!Object';
            }
            return $ret;
        }

        // Something very complex
        return '!Object';
    }

    $function_return = isset($JS_LOCAL_VARIABLES[$identifier]['function_return']) ? $JS_LOCAL_VARIABLES[$identifier]['function_return'] : null;
    if ($function_return === null) {
        if (isset($JS_PROTOTYPES[$identifier])) {
            return $identifier;
        } else {
            $function_return = '!Object';
        }
    }
    if ($function_duality) {
        return [js_get_variable_type($variable), $function_return];
    }
    return js_get_variable_type($variable);
}

/**
 * Scan through a complex variable, checking any expressions embedded in it.
 *
 * @param  array $variable The complex variable
 */
function js_scan_extractive_expressions(array $variable)
{
    if ($variable[0] == 'ARRAY_AT') {
        js_check_expression($variable[1]);
    }

    if ((($variable[0] == 'ARRAY_AT') || ($variable[0] == 'OBJECT_OPERATOR')) && (!empty($variable[2]))) {
        js_scan_extractive_expressions($variable[2]);
    }
}

/**
 * Get the type of a JavaScript variable.
 *
 * @param  array $variable The variable
 * @return string The type
 */
function js_get_variable_type(array $variable) : string
{
    global $JS_LOCAL_VARIABLES;

    $identifier = $variable[1];

    if (!empty($variable[2])) {
        return '!Object'; // Too complex
    }

    if (!isset($JS_LOCAL_VARIABLES[$identifier])) {
        return '!Object';
    }

    if (empty($JS_LOCAL_VARIABLES[$identifier]['types'])) {
        return '!Object'; // There is a problem, but it will be identified elsewhere.
    }

    $temp = array_unique(array_values(array_diff($JS_LOCAL_VARIABLES[$identifier]['types'], ['Null', 'Undefined'])));
    if (!empty($temp)) {
        return $temp[0]; // We'll assume the first set type is the actual type
    }
    return '!Object';
}

/**
 * Add a type to the list of used types for a variable.
 *
 * @param  string $identifier The variable name
 * @param  string $type The type
 */
function js_set_composr_type(string $identifier, string $type)
{
    global $JS_LOCAL_VARIABLES;
    $JS_LOCAL_VARIABLES[$identifier]['types'][] = $type;
}

/**
 * Put out a warning if a variable was not declared.
 *
 * @param  string $identifier The variable name
 * @param  integer $c_pos Current parse position
 */
function js_mention_undeclared_variables(string $identifier, int $c_pos)
{
    global $JS_LOCAL_VARIABLES;
    if ((!isset($JS_LOCAL_VARIABLES[$identifier])) && ($identifier != 'this') && ($identifier != '_') && ($identifier != '__return')) {
        js_log_warning('CHECKER', 'Variable (' . $identifier . ') was used without being declared', $c_pos);
    }
}

/**
 * Add a reference to a named variable.
 *
 * @param  string $identifier The variable name
 * @param  integer $first_mention Where the first mention of the variable is
 * @param  boolean $instantiation Whether this is an instantiation reference
 * @param  boolean $reference Whether this is a reference (as opposed to instantiation/setting)
 * @param  ?string $function_return The result-type (null: not a function)
 * @param  boolean $is_call Whether this is a function call
 */
function js_add_variable_reference(string $identifier, int $first_mention, bool $instantiation = true, bool $reference = false, ?string $function_return = null, bool $is_call = false)
{
    if ((!$instantiation) && (!is_numeric($identifier))) {
        js_mention_undeclared_variables($identifier, $first_mention);
    }

    global $JS_LOCAL_VARIABLES;
    if (!isset($JS_LOCAL_VARIABLES[$identifier])) {
        $JS_LOCAL_VARIABLES[$identifier] = ['function_return' => $function_return, 'is_global' => false, 'types' => [], 'unused_value' => !$reference && !$instantiation, 'first_mention' => $first_mention];
    } else {
        $JS_LOCAL_VARIABLES[$identifier]['unused_value'] = !$reference && !$instantiation;
    }
}

/**
 * If the given expression is a direct variable expression, this function will infer the type as the given type. This therefore allows type inferring on usage as well as on assignment.
 *
 * @param  string $type The type
 * @param  array $expr The expression
 */
function js_infer_expression_type_to_variable_type(string $type, array $expr)
{
    /* Not reliable enough, JS is very dynamic
    if (($expression[0] == 'VARIABLE') && (empty($expression[1][2]))) {
        $identifier = $expression[1][1];
        js_set_composr_type($identifier, $type);
    }
    */
}

/**
 * Do type checking for something specific.
 *
 * @param  array $_allowed_types List of allowed types
 * @param  string $actual_type Actual type involved
 * @param  integer $pos Current parse position
 * @param  ?string $alt_error Specific error message to give (null: use default)
 * @return boolean Whether it type-checks
 */
function js_ensure_type(array $_allowed_types, string $actual_type, int $pos, ?string $alt_error = null) : bool
{
    if (($actual_type == '!Object')) {
        return true; // We can't check it
    }

    global $JS_PROTOTYPES;

    // Tidy up our allow list to be a nice map
    $allowed_types = ['Undefined' => true, 'Null' => true, 'Infinity' => true];
    foreach ($_allowed_types as $type) {
        if ($type == '') {
            continue; // Weird
        }

        if ($type[0] == '!') {
            $allowed_types += $JS_PROTOTYPES[substr($type, 1)][2];
            $allowed_types[substr($type, 1)] = true;
        } else {
            $allowed_types[$type] = true;
        }
    }

    // The check
    if (substr($actual_type, 0, 1) == '!') {
        $actual_type = substr($actual_type, 1);
    }
    if (isset($allowed_types[$actual_type])) {
        return true;
    }

    js_log_warning('CHECKER', ($alt_error === null) ? 'Type mismatch' : $alt_error, $pos);
    return false;
}
