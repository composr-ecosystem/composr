<?php /*

Composr
Copyright (c) ocProducts, 2004-2022

See docs/LICENSE.md for full licensing information.


NOTE TO PROGRAMMERS:
  Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
  **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
* @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
* @copyright  ocProducts Ltd
* @package    core_cns
*/

/**
 * Get default poll options for a specified forum.
 *
 * @param  ?AUTO_LINK $forum_id The ID of the forum for which we are getting default poll options (null: private topic)
 * @return array Map of default poll options [options=>[[name=>string, mandatory=>boolean]], attribute=>value]
 */
function cns_get_default_poll_options(?int $forum_id = null) : array
{
    $default_options = [
        'requireTopicPoll' => false,
        'confined' => false,
        'votingEnabled' => false,
        'votingPeriodHours' => null,
        'requiresReply' => null,
        'resultsHidden' => false,
        'minimumSelections' => null,
        'maximumSelections' => null,
        'viewMemberVotes' => null,
        'voteRevocation' => null,
        'guestsCanVote' => null,
        'options' => []
    ];

    // For private topics, there are no default poll options.
    if ($forum_id === null) {
        return $default_options;
    }

    require_code('xml');
    require_lang('cns_polls');

    $_forum = $GLOBALS['FORUM_DB']->query_select('f_forums', ['*'], ['id' => $forum_id], '', 1);
    if (!array_key_exists(0, $_forum)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'forum'));
    }
    $forum = $_forum[0];

    // If poll options are empty, return empty array.
    if (!array_key_exists('f_poll_default_options_xml', $forum)) {
        return $default_options;
    }
    if (trim($forum['f_poll_default_options_xml']) == '') {
        return $default_options;
    }

    $parsed = new CMS_simple_xml_reader($forum['f_poll_default_options_xml']);
    list($root_tag, $root_attributes, , $this_children) = $parsed->gleamed;

    // Skip if defaultPollOptions is not the root tag.
    if ($root_tag != 'defaultPollOptions') {
        return $default_options;
    }

    // Populate / parse attributes
    foreach ($root_attributes as $attribute => $_value) {
        $value_lcase = cms_strtolower_ascii($_value);
        switch ($attribute) {
            // Attributes that only pay attention to the "true" value.
            case 'confined':
            case 'requireTopicPoll':
            case 'votingEnabled':
            case 'resultsHidden':
                if ($value_lcase == 'true') {
                    $default_options[$attribute] = true;
                }
                break;
            // Attributes that pay attention to "true" or "false" value
            case 'requiresReply':
            case 'viewMemberVotes':
            case 'voteRevocation':
            case 'guestsCanVote':
                if ($value_lcase == 'false') {
                    $default_options[$attribute] = false;
                }
                if ($value_lcase == 'true') {
                    $default_options[$attribute] = true;
                }
                break;
            // Attributes that pay attention to a number or "false" value
            case 'votingPeriodHours':
                if ($value_lcase == 'false') {
                    $default_options[$attribute] = false;
                } elseif (is_numeric($value_lcase)) {
                    $default_options[$attribute] = (float)$value_lcase;
                }
                break;
            // Attributes that pay attention to a number value
            case 'minimumSelections':
            case 'maximumSelections':
                if (is_numeric($value_lcase)) {
                    $default_options[$attribute] = (int)$value_lcase;
                }
                break;
        }
    }

    foreach ($this_children as $_child) {
        if (!is_array($_child)) {
            continue;
        }
        list($row_tag, $row_attributes, $row_value, $row_children) = $_child;
        if ($row_tag != 'option') {
            continue;
        }

        $map = [
            'name' => $row_value,
        ];
        foreach ($row_attributes as $attribute => $value) {
            if ($attribute == "mandatory" && cms_strtolower_ascii($value) == 'true') {
                $map['mandatory'] = true;
            } else {
                $map['mandatory'] = false;
            }
        }
        array_push($default_options['options'], $map);
    }

    return $default_options;
}

/**
 * Warn_exit on any invalid poll answers. Also enforces poll options via parameter return by reference where applicable.
 *
 * @param  AUTO_LINK $topic_id The ID of the topic to which this poll is being added or edited
 * @param  ?AUTO_LINK $poll_id If editing a poll, the ID of the poll being edited (null: adding a new poll)
 * @param  array $answers A list of pairs of the potential voteable answers and the number of votes
 * @param  BINARY $is_private Whether the result tallies are kept private until the poll is made non-private (returned by reference)
 * @param  BINARY $is_open Whether the poll is open for voting (returned by reference)
 * @param  integer $minimum_selections The minimum number of selections that may be made (returned by reference)
 * @param  integer $maximum_selections The maximum number of selections that may be made (returned by reference)
 * @param  BINARY $requires_reply Whether members must have a post in the topic before they made vote (returned by reference)
 * @param  ?TIME $closing_time The time at which voting for this poll will close (returned by reference) (null: the poll will not close automatically)
 * @param  BINARY $view_member_votes Whether others should be allowed to see which members voted for each option on the results (returned by reference)
 * @param  BINARY $vote_revocation Whether to allow voters to revoke their vote while voting is open
 * @param  BINARY $guests_can_vote Whether guests can vote on the poll without logging in
 */
function cns_validate_poll(int $topic_id, ?int $poll_id, array $answers, int &$is_private, int &$is_open, int &$minimum_selections, int &$maximum_selections, int &$requires_reply, ?int &$closing_time, int &$view_member_votes, int &$vote_revocation, int &$guests_can_vote)
{
    require_lang('cns_polls');

    $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
    $default_options = cns_get_default_poll_options($forum_id);

    $default_options_answers = array_column($default_options['options'], 'name');
    $answers_text = [];
    foreach ($answers as $answer) {
        if (is_array($answer)) {
            list($answer, $num_votes) = $answer;
        }

        // Check for duplicate answers
        if ($answer !== '') {
            if (in_array($answer, $answers_text)) {
                warn_exit('POLL_NO_DUPLICATE_OPTIONS', $answer);
            }
            array_push($answers_text, $answer);
        }
    }

    $poll_info = [];
    if ($poll_id !== null) {
        $_poll_info = $GLOBALS['FORUM_DB']->query_select('f_polls', ['po_is_open', 'po_minimum_selections', 'po_maximum_selections', 'po_requires_reply', 'po_question', 'po_is_private', 'po_closing_time', 'po_view_member_votes'], ['id' => $poll_id], '', 1);
        if (!array_key_exists(0, $_poll_info)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $poll_info = $_poll_info[0];
    }

    // Make sure all mandatory options are specified in answers
    foreach ($default_options['options'] as $option) {
        if (array_key_exists('mandatory', $option) && $option['mandatory'] && !in_array($option['name'], $answers_text)) {
            warn_exit(do_lang_tempcode('POLL_MISSING_MANDATORY_OPTION', $option['name']));
        }
    }

    // If poll is confined, make sure all of the specified answers exist as an option in the default options
    if ($default_options['confined']) {
        foreach ($answers_text as $answer) {
            if (!in_array($answer, $default_options_answers)) {
                warn_exit(do_lang_tempcode('POLL_INVALID_OPTION', $answer));
            }
        }
    }

    // Enforce poll options
    if (is_string($default_options['resultsHidden']) && cms_strtolower_ascii($default_options['resultsHidden']) == 'true') {
        if ($poll_id === null) {
            $is_private = true;
        } else {
            $is_private = $poll_info['po_is_private'];
        }
    }
    if (is_string($default_options['votingEnabled']) && cms_strtolower_ascii($default_options['votingEnabled']) == 'true') {
        if ($poll_id === null) {
            $is_open = true;
        } else {
            $is_open = $poll_info['po_is_open'];
        }
    }
    if ($default_options['minimumSelections'] !== null) {
        $minimum_selections = $default_options['minimumSelections'];
    }
    if ($default_options['maximumSelections'] !== null) {
        $maximum_selections = $default_options['maximumSelections'];
    }
    if ($default_options['requiresReply'] !== null) {
        $requires_reply = $default_options['requiresReply'] ? 1 : 0;
    }
    if ($default_options['viewMemberVotes'] !== null) {
        $view_member_votes = $default_options['viewMemberVotes'] ? 1 : 0;
    }
    if ($default_options['voteRevocation'] !== null) {
        $vote_revocation = $default_options['voteRevocation'] ? 1 : 0;
    }
    if ($default_options['guestsCanVote'] !== null) {
        $guests_can_vote = $default_options['guestsCanVote'] ? 1 : 0;
    }
    if ($default_options['votingPeriodHours'] !== null) {
        if ($poll_id === null) {
            $actual_poll_closing_time = time();

            // If votingPeriodHours is false, do not allow setting a closing time
            if ($default_options['votingPeriodHours'] === false) {
                $actual_poll_closing_time = null;

            // If a topic ID was provided, add votingPeriodHours to t_cache_first_time
            } elseif ($topic_id !== null) {
                $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $topic_id], '', 1);
                if (!array_key_exists(0, $_topic_info)) {
                    warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
                }
                $topic_info = $_topic_info[0];

                $actual_poll_closing_time = $topic_info['t_cache_first_time'] + intval(round(($default_options['votingPeriodHours'] * 60 * 60)));

            // Otherwise, add votingPeriodHours to the current time
            } else {
                $actual_poll_closing_time += intval(round(($default_options['votingPeriodHours'] * 60 * 60)));
            }
            $closing_time = $actual_poll_closing_time;
        } else {
            $closing_time = $poll_info['po_closing_time'];
        }
    }
}

/**
 * Validate whether or not the XML markup passed in for default poll options is valid.
 *
 * @param  LONG_TEXT $xml The XML to validate
 * @return ?Tempcode Error message if invalid (null: XML is valid)
 */
function cns_validate_default_poll_options_xml(string $xml = '') : ?object
{
    // Empty XML is valid
    if (trim($xml) == '') {
        return null;
    }

    require_code('xml');
    require_lang('cns_polls');

    $parsed = new CMS_simple_xml_reader($xml);
    list($root_tag, $root_attributes, , $this_children) = $parsed->gleamed;

    // Check for invalid root tag
    if ($root_tag != 'defaultPollOptions') {
        return do_lang_tempcode('POLL_XML_INVALID_ROOT');
    }

    $allowed_root_attributes = [
        'requireTopicPoll' => 'boolean',
        'confined' => 'boolean',
        'votingEnabled' => 'boolean',
        'votingPeriodHours' => '0<numberOrFalse',
        'requiresReply' => 'boolean',
        'resultsHidden' => 'boolean',
        'minimumSelections' => '0<number<maximumSelections',
        'maximumSelections' => '0<number',
        'viewMemberVotes' => 'boolean',
        'voteRevocation' => 'boolean',
        'guestsCanVote' => 'boolean'
    ];
    $allowed_root_attribute_names = array_keys($allowed_root_attributes);
    foreach ($root_attributes as $attribute => $value) {
        // Check for invalid attributes on root tag
        if (!in_array($attribute, $allowed_root_attribute_names)) {
            return do_lang_tempcode('POLL_XML_INVALID_ROOT_ATTRIBUTE', $attribute);
        }

        // Validate attribute values
        switch ($allowed_root_attributes[$attribute]) {
            // true or false
            case 'boolean':
                if (!in_array(cms_strtolower_ascii($value), ['true', 'false'])) {
                    return do_lang_tempcode('POLL_XML_TRUE_FALSE_ONLY', $attribute);
                }
                break;
            // Any number greater than 0
            case '0<number':
                if (!is_numeric($value) || $value <= 0) {
                    return do_lang_tempcode('POLL_XML_NUMBER_ONLY', $attribute);
                }
                break;
            // Any number greater than 0 but less than maximumSelections
            case '0<number<maximumSelections':
                if (!is_numeric($value) || $value <= 0) {
                    return do_lang_tempcode('POLL_XML_NUMBER_ONLY', $attribute);
                }
                if (array_key_exists('maximumSelections', $root_attributes) && is_numeric($root_attributes['maximumSelections']) && intval($value) > intval($root_attributes['maximumSelections'])) {
                    return do_lang_tempcode('POLL_XML_MINSELECTIONS_GREATERTHAN_MAXSELECTIONS', $attribute);
                }
                break;
            // Any number greater than 0, or false
            case '0<numberOrFalse':
                if ((!is_numeric($value) || $value <= 0) && cms_strtolower_ascii($value) != 'false') {
                    return do_lang_tempcode('POLL_XML_NUMBER_FALSE_ONLY', $attribute);
                }
                break;
        }
    }

    // If confined is true, make sure we have at least 1 option defined (or if minimumSelections is defined, we have at least that number of options defined)
    if (array_key_exists('confined', $root_attributes) && cms_strtolower_ascii($root_attributes['confined']) == 'true') {
        $minimum_options = 1;
        if (array_key_exists('minimumSelections', $root_attributes) && is_numeric($root_attributes['minimumSelections'])) {
            $minimum_options = intval($root_attributes['minimumSelections']);
        }
        if (count($this_children) < $minimum_options) {
            return do_lang_tempcode('POLL_XML_TOO_FEW_OPTIONS', $minimum_options);
        }
    }

    foreach ($this_children as $_child) {
        if (!is_array($_child)) {
            continue;
        }
        list($row_tag, $row_attributes, $row_value, $row_children) = $_child;

        // Check if any children are not an option tag
        if ($row_tag != 'option') {
            return do_lang_tempcode('POLL_XML_INVALID_CHILD', $row_tag);
        }

        // Check for attributes on children. Only mandatory is allowed, and it must be true or false.
        if (count($row_attributes) > 0) {
            foreach ($row_attributes as $attribute => $value) {
                if ($attribute != "mandatory") {
                    return do_lang_tempcode('POLL_XML_INVALID_ROW_ATTRIBUTE', $attribute);
                } elseif (!in_array(cms_strtolower_ascii($value), ['true', 'false'])) {
                    return do_lang_tempcode('POLL_XML_TRUE_FALSE_ONLY', $attribute);
                }
            }
        }
    }

    return null;
}
