<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/*

Notes about hook info...
 - id_field may be array (which means that ":" works as a delimiter) (if so, the first one is the main ID, while the second one is assumed to be a qualifier)
  - unless, parent_spec__table_name!=table, where we require a single id_field, knowing it is a join field in all tables
 - category_field may be array of two (if so, the second one is assumed the main category, while the first is assumed to be for supplemental permission checking)
 - category_field may be null
 - category_type may be array
 - category_type may be '<page>' or '<zone>' (meaning "use page/zone permissions instead")
 - category_type may be null
 - category_type may be missing
 - add_url may contain '!' (meaning "parent category ID goes here")
 - submitter_field may be a field:regexp

*/

/**
 * Given a particular bit of feedback content, check if the user may access it.
 *
 * @param  MEMBER $member_id User to check
 * @param  ID_TEXT $content_type Content type
 * @param  ID_TEXT $content_id Content ID
 * @param  ID_TEXT $type_has Content type type
 * @return boolean Whether there is permission
 */
function may_view_content_behind($member_id, $content_type, $content_id, $type_has = 'content_type')
{
    $permission_type_code = convert_composr_type_codes($type_has, $content_type, 'permissions_type_code');

    $module = convert_composr_type_codes($type_has, $content_type, 'module');
    if ($module == '') {
        $module = $content_id;
    }

    $category_id = null;
    $content_type = convert_composr_type_codes($type_has, $content_type, 'content_type');
    if ($content_type != '') {
        $content_type_ob = get_content_object($content_type);
        $info = $content_type_ob->info();
        if (isset($info['category_field'])) {
            list(, , , $content) = content_get_details($content_type, $content_id);
            if ($content !== null) {
                $category_field = $info['category_field'];
                if (is_array($category_field)) {
                    $category_field = array_pop($category_field);
                    $category_id = is_integer($content[$category_field]) ? strval($content[$category_field]) : $content[$category_field];
                    if ($content_type == 'catalogue_entry') {
                        $catalogue_name = $GLOBALS['SITE_DB']->query_select_value('catalogue_categories', 'c_name', ['id' => $category_id]);
                        if (!has_category_access($member_id, 'catalogues_catalogue', $catalogue_name)) {
                            return false;
                        }
                    }
                } else {
                    $category_id = is_integer($content[$category_field]) ? strval($content[$category_field]) : $content[$category_field];
                }
            }
        }
    }

    // FUDGE: Extra check for private topics
    $topic_id = null;
    if (($content_type == 'post') && (get_forum_type() == 'cns')) {
        $post_rows = $GLOBALS['FORUM_DB']->query_select('f_posts', ['p_topic_id', 'p_intended_solely_for', 'p_poster'], ['id' => intval($content_id)], '', 1);
        if (!array_key_exists(0, $post_rows)) {
            return false;
        }
        if (($post_rows[0]['p_intended_solely_for'] !== null) && (($post_rows[0]['p_intended_solely_for'] != $member_id) && ($post_rows[0]['p_poster'] != $member_id) || (is_guest($member_id)))) {
            return false;
        }
        $topic_id = $post_rows[0]['p_topic_id'];
    }
    if (($content_type == 'topic') && (get_forum_type() == 'cns')) {
        $topic_id = intval($content_id);
    }
    if ($topic_id !== null) {
        $topic_rows = $GLOBALS['FORUM_DB']->query_select('f_topics', ['t_forum_id', 't_pt_from', 't_pt_to'], ['id' => $topic_id], '', 1);
        if (!array_key_exists(0, $topic_rows)) {
            return false;
        }
        require_code('cns_topics');
        if (($topic_rows[0]['t_forum_id'] === null) && (($topic_rows[0]['t_pt_from'] != $member_id) && ($topic_rows[0]['t_pt_to'] != $member_id) && (!cns_has_special_pt_access($topic_id, $member_id)) || (is_guest($member_id)))) {
            return false;
        }
    }

    return ((has_actual_page_access($member_id, $module)) && (($permission_type_code == '') || ($category_id === null) || (has_category_access($member_id, $permission_type_code, $category_id))));
}

/**
 * Get the CMA hook object for a content type. Also works for resource types (i.e. if it's a resource, although not actually considered content technically).
 *
 * @param  ID_TEXT $content_type The content type
 * @return ?object The object (null: could not get one)
 */
function get_content_object($content_type)
{
    static $cache = [];
    if (isset($cache[$content_type])) {
        return $cache[$content_type];
    }

    $path = 'hooks/systems/content_meta_aware/' . filter_naughty_harsh($content_type, true);
    if ((file_exists(get_file_base() . '/sources/' . $path . '.php')) || (file_exists(get_file_base() . '/sources_custom/' . $path . '.php'))) {
        require_code($path);
        $ob = object_factory('Hook_content_meta_aware_' . filter_naughty_harsh($content_type, true), true);
    } else {
        // Okay, maybe it's a resource type (more limited functionality).
        $path = 'hooks/systems/resource_meta_aware/' . filter_naughty_harsh($content_type, true);
        if ((file_exists(get_file_base() . '/sources/' . $path . '.php')) || (file_exists(get_file_base() . '/sources_custom/' . $path . '.php'))) {
            require_code('hooks/systems/resource_meta_aware/' . filter_naughty_harsh($content_type, true));
            $ob = object_factory('Hook_resource_meta_aware_' . filter_naughty_harsh($content_type, true), true);
        } else {
            $ob = null;
        }
    }

    $cache[$content_type] = $ob;
    return $ob;
}

/**
 * Find a different content type code from the one had.
 *
 * @param  ID_TEXT $type_has Content type type we know
 * @set addon content_type meta_hook search_hook seo_type_code feedback_type_code permissions_type_code module table commandr_filesystem_hook rss_hook attachment_hook unvalidated_hook notification_hook sitemap_hook
 * @param  ID_TEXT $type_id Content type ID we know
 * @param  ID_TEXT $type_wanted Desired content type
 * @set addon content_type meta_hook search_hook seo_type_code feedback_type_code permissions_type_code module table commandr_filesystem_hook rss_hook attachment_hook unvalidated_hook notification_hook sitemap_hook
 * @return ID_TEXT Corrected content type type (blank: could not find)
 */
function convert_composr_type_codes($type_has, $type_id, $type_wanted)
{
    $real_type_wanted = $type_wanted;

    $type_id = preg_replace('#^catalogues__[' . URL_CONTENT_REGEXP . ']+_#', 'catalogues_', $type_id);

    // Search content-meta-aware hooks
    $found_type_id = '';
    $cma_hooks = find_all_hooks('systems', 'content_meta_aware') + find_all_hooks('systems', 'resource_meta_aware');
    foreach (array_keys($cma_hooks) as $content_type) {
        if ((($type_has == 'content_type') && ($content_type == $type_id)) || ($type_has != 'content_type')) {
            $cma_ob = get_content_object($content_type);
            $cma_info = $cma_ob->info();
            $cma_info['content_type'] = $content_type;
            if ((isset($cma_info[$type_has], $cma_info[$type_wanted])) && (($cma_info[$type_has] == $type_id) || ($cma_info[$type_has] == preg_replace('#__.*$#', '', $type_id)))) {
                $found_type_id = $cma_info[$type_wanted];
                break;
            }
        }
    }

    if ($found_type_id === null) {
        $found_type_id = '';
    }
    return $found_type_id;
}

/**
 * Find content type info, for a particular content type type we know.
 *
 * @param  ID_TEXT $type_has Content type type we know
 * @set addon content_type meta_hook search_hook seo_type_code feedback_type_code permissions_type_code module table commandr_filesystem_hook rss_hook attachment_hook unvalidated_hook notification_hook sitemap_hook
 * @param  ID_TEXT $type_id Content type ID we know
 * @return array Content type info list (blank: could not find)
 */
function convert_composr_type_codes_multiple($type_has, $type_id)
{
    $type_id = preg_replace('#^catalogues__[' . URL_CONTENT_REGEXP . ']+_#', 'catalogues_', $type_id);

    // Search content-meta-aware hooks
    $found_type_ids = [];
    $cma_hooks = find_all_hooks('systems', 'content_meta_aware') + find_all_hooks('systems', 'resource_meta_aware');
    foreach (array_keys($cma_hooks) as $content_type) {
        if ((($type_has == 'content_type') && ($content_type == $type_id)) || ($type_has != 'content_type')) {
            $cma_ob = get_content_object($content_type);
            $cma_info = $cma_ob->info();
            $cma_info['content_type'] = $content_type;
            if ((isset($cma_info[$type_has])) && (($cma_info[$type_has] == $type_id) || ($cma_info[$type_has] == preg_replace('#__.*$#', '', $type_id)))) {
                $found_type_ids[] = $cma_info;
            }
        }
    }

    return $found_type_ids;
}

/**
 * Get meta details of a content item.
 *
 * @param  ID_TEXT $content_type Content type
 * @param  ID_TEXT $content_id Content ID
 * @param  boolean $resource_fs_style Whether to use the content API as resource-fs requires (may be slightly different)
 * @return array Tuple: title, submitter, content hook info, the content row, URL (for use within current browser session), URL (for use in e-mails / sharing)
 */
function content_get_details($content_type, $content_id, $resource_fs_style = false)
{
    $cma_ob = get_content_object($content_type);
    if (!is_object($cma_ob)) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }
    $cma_info = $cma_ob->info();

    if ($cma_info === null) {
        return [null, null, null, null, null, null];
    }

    $db = $cma_info['db'];

    $content_row = content_get_row($content_id, $cma_info);
    if ($content_row === null) {
        if (($content_type == 'comcode_page') && (strpos($content_id, ':') !== false) && (!$resource_fs_style)) {
            list($zone, $page) = explode(':', $content_id, 2);

            require_code('users_active_actions');
            $submitter_id = get_first_admin_user();

            require_code('global4');
            $content_row = [
                'the_zone' => $zone,
                'the_page' => $page,
                'p_parent_page' => '',
                'p_validated' => 1,
                'p_edit_date' => null,
                'p_add_date' => time(),
                'p_submitter' => $submitter_id,
                'p_show_as_edit' => 0,
                'p_include_on_sitemap' => comcode_page_include_on_sitemap($zone, $page) ? 1 : 0,
            ];

            $content_url = build_url(['page' => $page], $zone, [], false, false, false);
            $content_url_email_safe = build_url(['page' => $page], $zone, [], false, false, true);

            $_content_title = $GLOBALS['SITE_DB']->query_select_value_if_there('cached_comcode_pages', 'cc_page_title', ['the_zone' => $zone, 'the_page' => $page]);
            if ($_content_title !== null) {
                $content_title = get_translated_text($_content_title);
            } else {
                $content_title = $zone . ':' . $page;
            }

            return [$content_title, $submitter_id, $cma_info, $content_row, $content_url, $content_url_email_safe];
        }

        return [null, null, $cma_info, null, null, null];
    }

    $content_title = get_content_title($cma_info, $content_row, $content_type, $content_id, $resource_fs_style);

    if ($cma_info['submitter_field'] !== null) {
        if (strpos($cma_info['submitter_field'], ':') !== false) {
            $bits = explode(':', $cma_info['submitter_field']);
            $matches = [];
            if (preg_match('#' . $bits[1] . '#', $content_row[$bits[0]], $matches) != 0) {
                $submitter_id = intval($matches[1]);
            } else {
                $submitter_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
        } else {
            $submitter_id = $content_row[$cma_info['submitter_field']];
        }
    } else {
        $submitter_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
    }

    $content_url = null;
    $content_url_email_safe = null;
    if ($cma_info['view_page_link_pattern'] !== null) {
        list($zone, $url_bits, $hash) = page_link_decode(str_replace('_WILD', $content_id, $cma_info['view_page_link_pattern']));
        $content_url = build_url($url_bits, $zone, [], false, false, false, $hash);
        $content_url_email_safe = build_url($url_bits, $zone, [], false, false, true, $hash);
    }

    return [$content_title, $submitter_id, $cma_info, $content_row, $content_url, $content_url_email_safe];
}

/**
 * Get the title of a content item.
 *
 * @param  array $cma_info The info array for the content type
 * @param  array $content_row Content row
 * @param  ID_TEXT $content_type Content type
 * @param  ?ID_TEXT $content_id Content ID (null: find from row)
 * @param  boolean $resource_fs_style Whether to use the content API as resource-fs requires (may be slightly different)
 * @return string Title
 */
function get_content_title($cma_info, $content_row, $content_type, $content_id = null, $resource_fs_style = false)
{
    $db = $cma_info['db'];

    if ($content_id === null) {
        $content_id = @strval($content_row[$cma_info['id_field']]);
    }

    $title_field = $cma_info['title_field'];
    $title_field_dereference = $cma_info['title_field_dereference'];
    if (($resource_fs_style) && (array_key_exists('title_field__resource_fs', $cma_info))) {
        $title_field = $cma_info['title_field__resource_fs'];
        $title_field_dereference = $cma_info['title_field_dereference__resource_fs'];
    }
    if ($title_field === null) {
        $content_title = do_lang($cma_info['content_type_label']);
    } else {
        if (strpos($title_field, 'CALL:') !== false) {
            $content_title = call_user_func(trim(substr($title_field, 5)), ['id' => $content_id], $resource_fs_style);
        } else {
            $_content_title = $content_row[$title_field];
            $content_title = $title_field_dereference ? get_translated_text($_content_title, $db) : $_content_title;
            if (($content_title == '') && (!$resource_fs_style)) {
                $content_title = do_lang($cma_info['content_type_label']) . ' (#' . (is_string($content_id) ? $content_id : strval($content_id)) . ')';
                if (($content_type == 'image' || $content_type == 'video') && (addon_installed('galleries'))) { // A bit of a fudge, but worth doing
                    require_lang('galleries');
                    $fullname = $GLOBALS['SITE_DB']->query_select_value_if_there('galleries', 'fullname', ['name' => $content_row['cat']]);
                    if ($fullname !== null) {
                        $content_title = do_lang('VIEW_' . strtoupper($content_type) . '_IN', get_translated_text($fullname));
                    }
                }
            }
        }
    }

    if (($content_type == 'post') && ($content_title == '')) {
        $content_title = do_lang('cns:FORUM_POST_NUMBERED', $content_id);
    }

    if ($content_title == '') {
        $content_title = $content_type . ' #' . $content_id;
    }

    return $content_title;
}

/**
 * Get the content row of a content item.
 *
 * @param  ID_TEXT $content_id The content ID
 * @param  array $cma_info The info array for the content type
 * @return ?array The row (null: not found)
 */
function content_get_row($content_id, $cma_info)
{
    static $cache = [];
    $cache_key = $cma_info['table'] . '.' . $content_id;
    if (isset($cache[$cache_key])) {
        return $cache[$cache_key];
    }

    $db = $cma_info['db'];

    $id_field_numeric = array_key_exists('id_field_numeric', $cma_info) ? $cma_info['id_field_numeric'] : true;
    $where = get_content_where_for_str_id($content_id, $cma_info);
    $_content = $db->query_select($cma_info['table'] . ' r', ['r.*'], $where, '', 1);

    $ret = array_key_exists(0, $_content) ? $_content[0] : null;
    $cache[$cache_key] = $ret;
    return $ret;
}

/**
 * Get the string content ID for some data.
 *
 * @param  array $data The data row
 * @param  array $cma_info The info array for the content type
 * @return ID_TEXT The ID
 */
function extract_content_str_id_from_data($data, $cma_info)
{
    $id_field = $cma_info['id_field'];
    $id = '';
    $id_field_parts = is_array($id_field) ? $id_field : [$id_field];
    $id_field_parts = array_reverse($id_field_parts);
    foreach ($id_field_parts as $id_field_part) {
        if ($id != '') {
            $id .= ':';
        }
        $id .= (is_integer($data[$id_field_part]) ? strval($data[$id_field_part]) : $data[$id_field_part]);
    }
    return $id;
}

/**
 * Given the string content ID get a mapping we could use as a WHERE map.
 *
 * @param  ID_TEXT $str_id The ID
 * @param  array $cma_info The info array for the content type
 * @param  ?string $table_alias The table alias (null: none)
 * @return array The mapping
 */
function get_content_where_for_str_id($str_id, $cma_info, $table_alias = null)
{
    $where = [];
    $id_field = $cma_info['id_field'];
    $id_parts = is_array($id_field) ? explode(':', $str_id) : [$str_id];
    $id_parts = array_reverse($id_parts);
    foreach (is_array($id_field) ? $id_field : [$id_field] as $i => $id_field_part) {
        $val = array_key_exists($i, $id_parts) ? $id_parts[$i] : '';
        $where[(($table_alias === null) ? '' : ($table_alias . '.')) . $id_field_part] = $cma_info['id_field_numeric'] ? @intval($val) : $val;
    }
    return $where;
}

/**
 * Given the string content ID get a list of fields for use in a SELECT clause.
 *
 * @param  array $select The ID
 * @param  array $cma_info The info array for the content type
 * @param  ?string $table_alias The table alias (null: none)
 */
function append_content_select_for_id(&$select, $cma_info, $table_alias = null)
{
    foreach (is_array($cma_info['id_field']) ? $cma_info['id_field'] : [$cma_info['id_field']] as $id_field_part) {
        $select[] = (($table_alias === null) ? '' : ($table_alias . '.')) . $id_field_part;
    }
}

/**
 * Get an action language string for a particular content type based on a stub.
 * If it can't get a match it'll just use the stub.
 *
 * @param  string $content_type The content type
 * @param  string $string The language string stub (must itself be a valid language string)
 * @return Tempcode Tempcode of language string
 */
function content_language_string($content_type, $string)
{
    $object = get_content_object($content_type);
    $info = $object->info();
    $regexp = $info['actionlog_regexp'];

    do_lang($info['content_type_label']); // This forces the language file to load if there is one, as it'll include the language file reference within content_type_label

    $string_custom = str_replace('\w+', $string, $regexp);
    $test = do_lang($string_custom, null, null, null, null, false);
    if ($test === null) {
        $test = do_lang($string);
    }

    //return do_lang_tempcode($string_custom); // Assumes that the lang string stays memory resident, but our probing only guarantees it's resident NOW
    return protect_from_escaping($test); // But this should work as the string is rolled into the Tempcode permanently
}

/**
 * Get content rows matching certain parameters, across multiple content types.
 *
 * @param  array $content_types List of content types to return for
 * @param  ?integer $days Day limit for recency (null: no limit)
 * @param  string $extra_where Extra WHERE SQL
 * @param  string $extra_join Extra JOIN SQL
 * @param  string $sort URL-style sort parameter
 * @param  integer $start Start offset
 * @param  ?integer $max Maximum results to return (null: no limit)
 * @param  mixed $select Selectcode (either a string, or a map between content types and strings)
 * @param  string $select_b Selectcode for secondary category
 * @param  mixed $filter Filtercode (either a string, or a map between content types and strings)
 * @param  boolean $check_perms Whether to check permissions
 * @param  array $pinned A list of pinned award IDs
 * @param  ?array $allowed_sorts List of allowed sorts (null: auto-detected for content type)
 * @param  ?MEMBER $member_id Member ID to run as (null: current member)
 * @return array A pair: Rows, Max count
 */
function content_rows_for_multi_type($content_types, $days, $extra_where, $extra_join, $sort, $start, $max, $select = '', $select_b = '', $filter = '', $check_perms = true, $pinned = [], $allowed_sorts = null, $member_id = null)
{
    $combined_rows = [];
    $pinned_rows = [];
    $combined_max_rows = 0;

    foreach ($content_types as $content_type) {
        $_start = 0;
        $_max = ($max === null) ? null : ($max + $start); // This is so we can sort the first $max results against those of other content types to get a consistent combined sort order
        $_select = is_array($select) ? (array_key_exists($content_type, $select) ? $select[$content_type] : '') : $select;
        $_filter = is_array($filter) ? (array_key_exists($content_type, $filter) ? $filter[$content_type] : '') : $filter;
        list($rows, $max_rows, $pinned_rows) = content_rows_for_type($content_type, $days, $extra_where, $extra_join, $sort, $_start, $_max, $_select, $select_b, $_filter, $check_perms, $pinned, $allowed_sorts);
        foreach ($rows as $row) {
            $combined_rows[] = $row + ['content_type' => $content_type];
        }
        foreach ($pinned_rows as $i => $row) {
            $pinned_rows[$i] = $row + ['content_type' => $content_type];
        }
        $combined_max_rows += $max_rows;
    }

    ksort($pinned_rows);

    list($url_sort, $dir) = read_abstract_sorting_params($sort, $allowed_sorts);
    sort_maps_by($combined_rows, ($dir == 'DESC') ? '!sort_order' : 'sort_order', false, ($url_sort == 'title'));

    $final_rows = array_slice(array_merge($pinned_rows, $combined_rows), $start, $max);

    return [$final_rows, $combined_max_rows];
}

/**
 * Get content rows matching certain parameters.
 *
 * @param  ID_TEXT $content_type Content type to get records for
 * @param  ?integer $days Day limit for recency (null: no limit)
 * @param  string $extra_where Extra WHERE SQL
 * @param  string $extra_join Extra JOIN SQL
 * @param  string $sort URL-style sort parameter
 * @param  integer $start Start offset
 * @param  ?integer $max Maximum results to return; pinned rows do not count towards it (null: no limit)
 * @param  string $select Selectcode
 * @param  string $select_b Selectcode for secondary category
 * @param  string $filter Filtercode
 * @param  boolean $check_perms Whether to check permissions
 * @param  array $pinned A list of pinned award IDs
 * @param  ?array $allowed_sorts List of allowed sorts (null: auto-detected for content type)
 * @param  ?MEMBER $member_id Member ID to run as (null: current member)
 * @return array A tuple: Rows, Max count, Pinned rows
 */
function content_rows_for_type($content_type, $days, $extra_where, $extra_join, $sort, $start, $max, $select = '', $select_b = '', $filter = '', $check_perms = true, $pinned = [], $allowed_sorts = null, $member_id = null)
{
    require_code('content');

    if ($member_id === null) {
        $member_id = get_member();
    }

    // Fix invalid parameters
    if ($max < 1) {
        $max = 1;
    }

    // Read content object
    $object = get_content_object($content_type);
    $info = $object->info();
    if ($info === null) {
        warn_exit(do_lang_tempcode('NO_SUCH_CONTENT_TYPE', escape_html($content_type)));
    }
    $first_id_field = is_array($info['id_field']) ? $info['id_field'][0] : $info['id_field'];

    // Special clauses for content type
    if (array_key_exists('extra_where_sql', $info)) {
        $extra_where .= ' AND ' . $info['extra_where_sql'];
    }

    // Permissions check
    $category_type_access = null;
    $category_type_select = null;
    if (is_array($info['category_field'])) {
        $category_field_access = $info['category_field'][0];
        $category_field_select = $info['category_field'][1];
    } else {
        $category_field_access = $info['category_field'];
        $category_field_select = $info['category_field'];
    }
    if (array_key_exists('category_type', $info)) {
        if (is_array($info['category_type'])) {
            $category_type_access = $info['category_type'][0];
            $category_type_select = $info['category_type'][1];
        } else {
            $category_type_access = $info['category_type'];
            $category_type_select = $info['category_type'];
        }
    }
    // Actually for categories we check access on category ID
    if ($info['is_category'] && $category_type_access !== null) {
        $category_field_access = $first_id_field;
    }
    if ((!$GLOBALS['FORUM_DRIVER']->is_super_admin($member_id)) && ($check_perms)) {
        if (addon_installed('content_privacy')) {
            require_code('content_privacy');
            list($privacy_join, $privacy_where) = get_privacy_where_clause($content_type, 'r', $member_id);
            $extra_join .= $privacy_join;
            $extra_where .= $privacy_where;
        }

        $groups = get_permission_where_clause_groups($member_id, true, 'a.');
        if ($category_field_access !== null) {
            if ($category_type_access === '<zone>') {
                $extra_where .= get_zone_permission_where_clause($category_field_access, $member_id, $groups);
            } elseif ($category_type_access === '<page>') {
                $extra_where .= get_page_permission_where_clause($category_field_access, $category_field_select, $member_id, $groups);
            } else {
                $extra_where .= get_category_permission_where_clause($category_type_access, $category_field_access, $member_id, $groups);
            }
        }
        if (($category_field_select !== null) && ($category_field_select != $category_field_access) && ($info['category_type'] !== '<page>') && ($info['category_type'] !== '<zone>')) {
            $extra_where .= get_category_permission_where_clause($category_type_select, $category_field_select, $member_id, $groups);
        }
    }

    // Selectcode support
    if (($select != '') && ($category_field_select !== null)) {
        if ($select == '-1') {
            return [[], 0, []]; // Optimisation: Will never match
        }

        $selectcode_extra_where = build_selectcode_select_for_content_type($select, $info, $category_field_select);
        $parent_spec__table_name = array_key_exists('parent_spec__table_name', $info) ? $info['parent_spec__table_name'] : $info['table'];
        if (($parent_spec__table_name !== null) && ($parent_spec__table_name != $info['table'])) {
            $extra_join .= ' LEFT JOIN ' . $info['db']->get_table_prefix() . $parent_spec__table_name . ' parent ON parent.' . $info['parent_spec__field_name'] . '=r.' . $first_id_field;
        }
        if ($selectcode_extra_where != '') {
            if ($selectcode_extra_where == '1=0' || $selectcode_extra_where == '0=1') {
                return [[], 0, []]; // Optimisation: Will never match
            }
            $extra_where .= ' AND (' . $selectcode_extra_where . ')';
        }
    }
    if (($select_b != '') && ($category_field_access !== null)) {
        if ($select_b == '-1') {
            return [[], 0, []]; // Optimisation: Will never match
        }

        $selectcode_extra_where = build_selectcode_select_for_content_type($select_b, $info, $category_field_access);
        if ($selectcode_extra_where != '') {
            if ($selectcode_extra_where == '1=0' || $selectcode_extra_where == '0=1') {
                return [[], 0, []]; // Optimisation: Will never match
            }
            $extra_where .= ' AND (' . $selectcode_extra_where . ')';
        }
    }

    // Filtercode support
    if ($filter != '') {
        global $BLOCK_OCPRODUCTS_ERROR_EMAILS;
        $BLOCK_OCPRODUCTS_ERROR_EMAILS = true;

        // Convert the filters to SQL
        require_code('filtercode');
        list($filtercode_extra_join, $filtercode_extra_where) = filtercode_to_sql($info['db'], parse_filtercode($filter), $content_type);
        $extra_join .= implode('', $filtercode_extra_join);
        $extra_where .= $filtercode_extra_where;
    }

    // Region filter
    if (get_option('filter_regions') == '1') {
        require_code('locations');
        $extra_where .= sql_region_filter($content_type, 'r.' . $first_id_field);
    }

    // Validation check
    if ((array_key_exists('validated_field', $info)) && (addon_installed('unvalidated')) && ($info['validated_field'] != '') && (has_privilege($member_id, 'see_unvalidated'))) {
        $extra_where .= ' AND r.' . $info['validated_field'] . '=1';
    }

    // Time range
    if (($days !== null) && ($info['date_field'] !== null)) {
        $extra_where .= ' AND r.' . $info['date_field'] . '>=' . strval(time() - 60 * 60 * 24 * $days);
    }

    // Find requested pinned awards
    $pinned_rows = [];
    if ((!empty($pinned)) && (addon_installed('awards'))) {
        $pinned_where = '';
        foreach ($pinned as $p) {
            if ($pinned_where != '') {
                $pinned_where .= ' OR ';
            }
            $pinned_where .= 'a_type_id=' . strval($p);
        }
        if ($pinned_where == '') {
            $awarded_content_ids = [];
        } else {
            $pinned_where = '(' . db_string_equal_to('a_content_type', $content_type) . ') AND ' . $pinned_where;
            // Complex query to find the most recent, works on assumption you can't just order by timestamp due to possibility of too many matches
            $award_sql = 'SELECT a.a_type_id,a.content_id FROM ' . get_table_prefix() . 'award_archive a';
            $award_sql .= ' JOIN (SELECT MAX(date_and_time) AS max_date,a_type_id FROM ' . get_table_prefix() . 'award_archive WHERE ' . $pinned_where . ' GROUP BY a_type_id) b ON b.a_type_id=a.a_type_id AND a.date_and_time=b.max_date';
            $award_sql .= ' WHERE ' . str_replace('a_type_id', 'a.a_type_id', $pinned_where);
            $awarded_content_ids = collapse_2d_complexity('a_type_id', 'content_id', $GLOBALS['SITE_DB']->query($award_sql, null, 0, false, true));
        }

        foreach ($pinned as $i => $award_id) {
            if (!isset($awarded_content_ids[$p])) {
                continue;
            }
            $awarded_content_id = $awarded_content_ids[$p];
            $award_content_row = content_get_row($awarded_content_id, $info);
            if ($award_content_row !== null) {
                if (is_integer($awarded_content_id)) {
                    $extra_where .= ' AND ' . $first_id_field . '<>' . strval($awarded_content_id);
                } else {
                    $extra_where .= ' AND ' . db_string_not_equal_to($first_id_field, $awarded_content_id);
                }
                if ((!addon_installed('unvalidated')) || (!isset($info['validated_field'])) || ($award_content_row[$info['validated_field']] != 0)) {
                    $pinned_rows[$i] = $award_content_row;
                }
            }
        }
    }

    // Put query together
    global $TABLE_LANG_FIELDS_CACHE;
    $lang_fields = isset($TABLE_LANG_FIELDS_CACHE[$info['table']]) ? $TABLE_LANG_FIELDS_CACHE[$info['table']] : [];
    foreach ($lang_fields as $lang_field => $lang_field_type) {
        unset($lang_fields[$lang_field]);
        $lang_fields['r.' . $lang_field] = $lang_field_type;
    }
    $query = ' FROM ' . get_table_prefix() . $info['table'] . ' r WHERE 1=1' . $extra_where;
    list($sql_sort, $dir, $url_sort) = handle_abstract_sorting($sort, $info);

    // Run queries
    $max_rows = $info['db']->query_value_if_there('SELECT COUNT(DISTINCT r.' . $first_id_field . ') ' . $query, false, true);
    if ($max == 0) {
        $rows = []; // Optimisation
    } else {
        $rows = $info['db']->query('SELECT DISTINCT r.*,' . $sql_sort . ' AS sort_order ' . $query . ' ORDER BY ' . $sql_sort, $max, $start, false, true, $lang_fields);
    }
    return [$rows, $max_rows + count($pinned_rows), $pinned_rows];
}

/**
 * Make a selectcode SQL fragment.
 *
 * @param  string $select The select string
 * @param  array $info Map of details of our content type
 * @param  string $category_field_select The field name of the category to select against
 * @return string SQL fragment
 */
function build_selectcode_select_for_content_type($select, $info, $category_field_select)
{
    $parent_spec__table_name = array_key_exists('parent_spec__table_name', $info) ? $info['parent_spec__table_name'] : $info['table'];
    $parent_field_name = $info['is_category'] ? (is_array($info['id_field']) ? implode(',', $info['id_field']) : $info['id_field']) : $category_field_select;
    if ($parent_field_name === null) {
        $parent_spec__table_name = null;
    }
    $parent_spec__parent_name = array_key_exists('parent_spec__parent_name', $info) ? $info['parent_spec__parent_name'] : null;
    $parent_spec__field_name = array_key_exists('parent_spec__field_name', $info) ? $info['parent_spec__field_name'] : null;
    $id_field_numeric = ((!array_key_exists('id_field_numeric', $info)) || ($info['id_field_numeric']));
    $category_is_string = ((array_key_exists('category_is_string', $info)) && (is_array($info['category_is_string']) ? $info['category_is_string'][1] : $info['category_is_string']));

    require_code('selectcode');
    return selectcode_to_sqlfragment($select, 'r.' . (is_array($info['id_field']) ? implode(',', $info['id_field']) : $info['id_field']), $parent_spec__table_name, $parent_spec__parent_name, 'r.' . $parent_field_name, $parent_spec__field_name, $id_field_numeric, !$category_is_string);
}

/**
 * Remap a simple URL-style sort string with something SQL-compatible. Recognising rating sort order only, but does also support breaking the string down.
 *
 * @param  string $sort The URL sort string
 * @param  array $info Map of details of our content type
 * @param  ?array $allowed_sorts List of allowed sort types (null: default set)
 * @param  boolean $strict_error Provide a hack-attack error on invalid input
 * @return array A tuple: The SQL-style sort order, The sort direction, The URL-style sort order
 */
function handle_abstract_sorting($sort, $info, $allowed_sorts = null, $strict_error = true)
{
    $feedback_type = isset($info['feedback_type_code']) ? $info['feedback_type_code'] : null;
    $first_id_field = is_array($info['id_field']) ? $info['id_field'][0] : $info['id_field'];

    if ($allowed_sorts === null) {
        $allowed_sorts = [];

        if (isset($info['order_field'])) {
            $allowed_sorts[] = 'natural';
        }

        if ($info['add_time_field'] !== null) {
            $allowed_sorts[] = 'recent';
        }

        if ((isset($info['title_field'])) && (strpos($info['title_field'], ':') === false)) {
            $allowed_sorts[] = 'title';
        }

        $allowed_sorts = array_merge($allowed_sorts, [
            'random',
            'fixed_random',
        ]);

        if (isset($info['views_field'])) {
            $allowed_sorts[] = 'views';
        }

        if ($feedback_type !== null) {
            $allowed_sorts = array_merge($allowed_sorts, [
                'average_rating',
                'compound_rating',
            ]);
        }
    }

    list($url_sort, $dir) = read_abstract_sorting_params($sort, $allowed_sorts, $strict_error);

    if ($url_sort == 'recent') {
        $sql_sort = 'r.' . $info['add_time_field'];
    } elseif ($url_sort == 'title') {
        if ($info['title_field_dereference']) {
            $sql_sort = $GLOBALS['SITE_DB']->translate_field_ref($info['title_field']);
        } else {
            $sql_sort = 'r.' . $info['title_field'];
        }
    } elseif ($url_sort == 'natural') {
        $sql_sort = 'r.' . $info['order_field'];
    } elseif ($url_sort == 'views') {
        $sql_sort = 'r.' . $info['views_field'];
    } elseif ($url_sort == 'average_rating') {
        $sql_sort = '(SELECT AVG(rating) FROM ' . get_table_prefix() . 'rating WHERE ' . db_string_equal_to('rating_for_type', $feedback_type) . ' AND rating_for_id=r.' . $first_id_field . ')';
    } elseif ($url_sort == 'compound_rating') {
        $sql_sort = '(SELECT SUM(rating-1) FROM ' . get_table_prefix() . 'rating WHERE ' . db_string_equal_to('rating_for_type', $feedback_type) . ' AND rating_for_id=r.' . $first_id_field . ')';
    } elseif ($url_sort == 'random') {
        $sql_sort = '(' . db_function('RAND') . ')';
    } elseif ($url_sort == 'fixed_random') {
        if ($info['id_field_numeric']) {
            $sql_sort = '(' . db_function('MOD', [$first_id_field, date('d')]) . ')';
        } else {
            $sql_sort = '(' . db_function('CONCAT', [db_function('MD5', [$first_id_field]), '\'' . db_escape_string(date('d')) . '\'']) . ')';
        }
    } else {
        $sql_sort = 'r.' . $url_sort;
    }

    return [$sql_sort, $dir, $url_sort];
}

/**
 * Clean up and verify URL sort parameters.
 *
 * @param  string $sort The URL sort string
 * @param  ?array $allowed_sorts List of allowed sort types (null: don't check)
 * @param  boolean $strict_error Provide a hack-attack error on invalid input
 * @return array A pair: The URL-style sort order, The URL-style sort direction
 */
function read_abstract_sorting_params($sort, $allowed_sorts, $strict_error = true)
{
    $banal_default_sorts = [
        'natural',
        'recent',
        'title',
        'random',
        'fixed_random',
        'views',
        'average_rating',
        'compound_rating',
    ];

    $parts = explode(' ', $sort, 2);
    if (count($parts) == 1) {
        $parts[] = 'DESC';
    }
    list($url_sort, $dir) = $parts;
    if (($allowed_sorts !== null) && (!in_array($url_sort, $allowed_sorts))) {
        if (($strict_error) && (!in_array($url_sort, $banal_default_sorts))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
        }
        $url_sort = $allowed_sorts[0];
    }
    if (!in_array($dir, ['ASC', 'DESC'])) {
        if ($strict_error) {
            log_hack_attack_and_exit('ORDERBY_HACK');
        }
        $dir = 'ASC';
    }
    return [$url_sort, $dir];
}
