<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*EXTRA FUNCTIONS: PDO*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_database_drivers
 */

require_code('database/shared/mysql');

/**
 * Database driver class.
 *
 * @package core_database_drivers
 */
class Database_Static_mysql_pdo extends Database_super_mysql
{
    protected $cache_db = [];
    public $last_select_db = null;
    public $reconnected_once = false;

    /**
     * Get a database connection. This function shouldn't be used by you, as a connection to the database is established automatically.
     *
     * @param  boolean $persistent Whether to create a persistent connection
     * @param  string $db_name The database name
     * @param  string $db_host The database host (the server)
     * @param  string $db_user The database connection username
     * @param  string $db_password The database connection password
     * @param  boolean $fail_ok Whether to on error echo an error and return with a null, rather than giving a critical error
     * @return ?object A database connection (null: error)
     */
    public function get_connection($persistent, $db_name, $db_host, $db_user, $db_password, $fail_ok = false)
    {
        if ((!class_exists('PDO')) || (!defined('PDO::MYSQL_ATTR_USE_BUFFERED_QUERY'))) {
            $error = 'The \'pdo_mysql\' PHP extension is not installed (anymore?). You need to contact the system administrator of this server, or use a different MySQL database driver (drivers can be chosen by editing _config.php).';
            if ($fail_ok) {
                echo ((running_script('install')) && (get_param_string('type', '') == 'ajax_db_details')) ? strip_html($error) : $error;
                return null;
            }
            critical_error('PASSON', $error);
        }

        $init_queries = $this->get_init_queries();

        // Potential caching
        $x = serialize([$db_user, $db_host, $db_name]);
        if (array_key_exists($x, $this->cache_db)) {
            return $this->cache_db[$x];
        }
        $db_port = 3306;
        if (strpos($db_host, ':') !== false) {
            list($db_host, $_db_port) = explode(':', $db_host);
            $db_port = intval($_db_port);
        }
        try {
            global $SITE_INFO;
            $dsn = 'mysql:host=' . $db_host . ';port=' . strval($db_port) . ';dbname=' . $db_name;
            $pdo_options = [
                PDO::ATTR_PERSISTENT => $persistent,
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES ' . $SITE_INFO['database_charset'],
            ];
            $db_link = @new PDO($dsn, $db_user, $db_password, $pdo_options);
        } catch (PDOException $e) {
            $error = 'Could not connect to database (' . $e->getMessage() . ')';
            if ($fail_ok) {
                echo ((running_script('install')) && (get_param_string('type', '') == 'ajax_db_details')) ? strip_html($error) : $error;
                return null;
            }
            critical_error('PASSON', $error); //warn_exit(do_lang_tempcode('CONNECT_ERROR'));
        }

        $this->last_select_db = $db_link;

        $this->cache_db[$x] = $db_link;

        foreach ($init_queries as $init_query) {
            try {
                $db_link->query($init_query);
            } catch (PDOException $e) {
            }
        }

        return $db_link;
    }

    /**
     * This function is a very basic query executor. It shouldn't usually be used by you, as there are abstracted versions available.
     *
     * @param  string $query The complete SQL query
     * @param  mixed $connection The DB connection
     * @param  ?integer $max The maximum number of rows to affect (null: no limit)
     * @param  integer $start The start row to affect
     * @param  boolean $fail_ok Whether to output an error on failure
     * @param  boolean $get_insert_id Whether to get the autoincrement ID created for an insert query
     * @return ?mixed The results (null: no results), or the insert ID
     */
    public function query($query, $connection, $max = null, $start = 0, $fail_ok = false, $get_insert_id = false)
    {
        if (!$this->query_may_run($query, $connection, $get_insert_id)) {
            return null;
        }

        static $version = null;
        if ($version === null) {
            $version = ''; // Temporary, to avoid infinite recursion
            $_version = $this->query('SELECT version() AS version', $connection, null, 0, true);
            if (array_key_exists(0, $_version)) {
                $version = $_version[0]['version'];
            } else {
                $version = '';
            }
        }
        if ($version != '') {
            if (version_compare($version, '8', '>=')) {
                $query = $this->fix_mysql8_query($query); // LEGACY: This can be removed once all user DBs are upgraded to MySQL 8 (as ALTER TABLE calls themselves are now MySQL 8 compatible by default
            }
        }

        $this->apply_sql_limit_clause($query, $max, $start);

        try {
            $results = $connection->query($query);
        } catch (PDOException $e) {
            if (!$fail_ok) {
                $this->handle_failed_query($query, $e->getMessage(), $connection);
            }
            return null;
        }

        $sub = substr(ltrim($query), 0, 4);
        if (($results !== true) && (($sub === '(SEL') || ($sub === 'SELE') || ($sub === 'sele') || ($sub === 'CHEC') || ($sub === 'EXPL') || ($sub === 'REPA') || ($sub === 'DESC') || ($sub === 'SHOW')) && ($results !== false)) {
            return $this->get_query_rows($results, $query, $start);
        }

        if ($get_insert_id) {
            if (strtoupper(substr($query, 0, 7)) === 'UPDATE ') {
                return $results->rowCount();
            }
            $ins = intval($connection->lastInsertId());
            if ($ins === 0) {
                $table = substr($query, 12, strpos($query, ' ', 12) - 12);
                $rows = $this->query('SELECT MAX(id) AS x FROM ' . $table, $connection, 1, 0, false, false);
                return $rows[0]['x'];
            }
            return $ins;
        }

        return null;
    }

    /**
     * Get the rows returned from a SELECT query.
     *
     * @param  object $results The query result pointer
     * @param  string $query The complete SQL query (useful for debugging)
     * @param  integer $start Where to start reading from
     * @return array A list of row maps
     */
    protected function get_query_rows($results, $query, $start)
    {
        $names = [];
        $types = [];
        $column_count = $results->columnCount();
        for ($i = 0; $i < $column_count; $i++) {
            $field = $results->getColumnMeta($i);
            $names[$i] = $field['name'];
            $types[$i] = $field['native_type'];
        }

        $out = [];
        $newrow = [];
        while (($row = $results->fetch(PDO::FETCH_NUM)) !== false) {
            foreach ($row as $j => $v) {
                $name = $names[$j];
                $type = $types[$j];

                if (!is_string($v)) {
                    $newrow[$name] = $v;
                } else {
                    switch ($type) {
                        case 'TINY':
                        case 'SHORT':
                        case 'LONG':
                        case 'INT24':
                        case 'LONGLONG':
                            $newrow[$name] = intval($v);
                            break;

                        case 'BIT':
                            $newrow[$name] = ($v === 1 || $v === true || $v === '1') ? 1 : 0;
                            break;

                        case 'DECIMAL':
                        case 'NEWDECIMAL':
                        case 'FLOAT':
                        case 'DOUBLE':
                            $newrow[$name] = floatval($v);
                            break;

                        case 'NULL':
                            $newrow[$name] = null;
                            break;

                        default:
                            $newrow[$name] = $v;
                            break;
                    }
                }
            }

            $out[] = $newrow;
        }
        $results->closeCursor();

        return $out;
    }

    /**
     * Escape a string so it may be inserted into a query. If SQL statements are being built up and passed using db_query then it is essential that this is used for security reasons. Otherwise, the abstraction layer deals with the situation.
     *
     * @param  string $string The string
     * @return string The escaped string
     */
    public function escape_string($string)
    {
        if (function_exists('ctype_alnum')) {
            if (ctype_alnum($string)) {
                return $string; // No non-trivial characters
            }
        }
        if (preg_match('#[^a-zA-Z0-9\.]#', $string) === 0) {
            return $string; // No non-trivial characters
        }

        $string = fix_bad_unicode($string);

        if ($this->last_select_db === null) {
            return addslashes($string);
        }
        return preg_replace("#^'(.*)'$#", '$1', $this->last_select_db->quote($string));
    }
}
