<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_forum_drivers
 */

/**
 * Forum driver class.
 *
 * @package core_forum_drivers
 */
class Forum_driver_wbb22 extends Forum_driver_base
{
    /**
     * Check the connected DB is valid for this forum driver.
     *
     * @return boolean Whether it is valid
     */
    public function check_db() : bool
    {
        $test = $this->db->query('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'users', null, 0, true); // Suppress errors as we're checking to see if the table is there
        return $test !== null;
    }

    /**
     * Get the rows for the top given number of posters on the forum.
     *
     * @param  integer $limit The limit to the number of top posters to fetch
     * @return array The rows for the given number of top posters in the forum
     */
    public function get_top_posters(int $limit) : array
    {
        return $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'users WHERE userid<>' . strval($this->get_guest_id()) . ' ORDER BY userposts DESC', $limit);
    }

    /**
     * Attempt to to find the member's language from their forum profile. It converts between language-identifiers using a map (lang/map.ini).
     *
     * @param  MEMBER $member_id The member who's language needs to be fetched
     * @return ?LANGUAGE_NAME The member's language (null: unknown)
     */
    public function get_lang(int $member_id) : ?string
    {
        return null;
    }

    /**
     * Find the member ID of the forum guest member.
     *
     * @return MEMBER The member ID of the forum guest member
     */
    public function get_guest_id() : int
    {
        return 0;
    }

    /**
     * Get the forums' table prefix for the database.
     *
     * @return string The forum database table prefix
     */
    public function get_drivered_table_prefix() : string
    {
        global $SITE_INFO;
        return 'bb' . $SITE_INFO['bb_forum_number'] . '_';
    }

    /**
     * Add the specified custom field to the forum (some forums implemented this using proper Custom Profile Fields, others through adding a new field).
     *
     * @param  string $name The name of the new custom field
     * @param  integer $length The length of the new custom field (ignored for Conversr, $type used instead)
     * @param  BINARY $locked Whether the field is locked, e.g. cannot be deleted
     * @param  BINARY $viewable Whether the field is for viewing by the owner and the public (0: cannot be viewed unless the viewing member has view_any_profile_field privilege)
     * @param  BINARY $settable Whether the field is for setting by the owner
     * @param  BINARY $required Whether the field is required
     * @param  string $description Description
     * @param  string $type The field type (it's the same as the Composr field types, although we only expect forum drivers to specifically support short_text/long_text/integer/float and for the rest to be mapped to long_text)
     * @param  BINARY $encrypted Whether the field is encrypted
     * @param  ?string $default Default field value (null: standard for field type)
     * @param  SHORT_TEXT $options Field options
     * @param  BINARY $include_in_main_search Whether to include in main keyword search
     * @param  BINARY $allow_template_search Whether to allow template search
     * @param  ID_TEXT $icon An icon to show the CPF with on the member profiles
     * @param  ID_TEXT $section A section to show with on the member-links part of member profiles
     * @param  LONG_TEXT $tempcode This is Tempcode that is used for displaying the field. See the DESCRIPTION_CPF_CODE language string.
     * @param  ID_TEXT $autofill_type Autofill field name from https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-field
     * @param  ID_TEXT $autofill_hint Autofill hint: '' or 'shipping' or 'billing'
     * @return boolean Whether the custom field was created successfully
     */
    public function install_create_custom_field(string $name, int $length, int $locked = 1, int $viewable = 0, int $settable = 0, int $required = 0, string $description = '', string $type = 'long_text', int $encrypted = 0, ?string $default = null, string $options = '', int $include_in_main_search = 0, int $allow_template_search = 0, string $icon = '', string $section = '', string $tempcode = '', string $autofill_type = '', string $autofill_hint = '') : bool
    {
        $name = 'cms_' . $name;
        $test = $this->db->query('profilefields', ['profilefieldid'], ['title' => $name]);
        if (!array_key_exists(0, $test)) {
            $this->db->query_insert('profilefields', ['title' => $name, 'description' =>'', 'required' => $required, 'hidden' => 1 - $viewable, 'maxlength' => $length, 'fieldsize' => $length]);
            $key = $this->db->query_select_value('profilefields', 'MAX(profilefieldid)');
            list($db_type, $db_default) = $this->remap_composr_field_type_to_db_type($type, $default);
            $query = $this->db->driver->add_table_field__sql($this->db->get_table_prefix() . 'userfields', 'field' . strval($key), $db_type, $db_default);
            $this->db->query($query, null, 0, true); // Suppress errors in case field already exists

            return true;
        }
        return false;
    }

    /**
     * Edit the specified custom field in the forum (some forums implemented this using proper Custom Profile Fields, others through adding a new field).
     *
     * @param  string $old_name The name of the existing custom field to edit
     * @param  string $name The new name of the custom field
     * @param  integer $length The length of the custom field (ignored for Conversr, $type used instead)
     * @param  BINARY $locked Whether the field is locked, e.g. cannot be deleted
     * @param  BINARY $viewable Whether the field is for viewing by the owner and the public (0: cannot be viewed unless the viewing member has view_any_profile_field privilege)
     * @param  BINARY $settable Whether the field is for setting by the owner
     * @param  BINARY $required Whether the field is required
     * @param  string $description Description
     * @param  string $type The field type (it's the same as the Composr field types, although we only expect forum drivers to specifically support short_text/long_text/integer/float and for the rest to be mapped to long_text)
     * @param  BINARY $encrypted Whether the field is encrypted
     * @param  ?string $default Default field value (null: standard for field type)
     * @param  SHORT_TEXT $options Field options
     * @param  BINARY $include_in_main_search Whether to include in main keyword search
     * @param  BINARY $allow_template_search Whether to allow template search
     * @param  ID_TEXT $icon An icon to show the CPF with on the member profiles
     * @param  ID_TEXT $section A section to show with on the member-links part of member profiles
     * @param  LONG_TEXT $tempcode This is Tempcode that is used for displaying the field. See the DESCRIPTION_CPF_CODE language string.
     * @param  ID_TEXT $autofill_type Autofill field name from https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-field
     * @param  ID_TEXT $autofill_hint Autofill hint: '' or 'shipping' or 'billing'
     * @return boolean Whether the custom field was edited successfully
     */
    public function install_edit_custom_field(string $old_name, string $name, int $length, int $locked = 1, int $viewable = 0, int $settable = 0, int $required = 0, string $description = '', string $type = 'long_text', int $encrypted = 0, ?string $default = null, string $options = '', int $include_in_main_search = 0, int $allow_template_search = 0, string $icon = '', string $section = '', string $tempcode = '', string $autofill_type = '', string $autofill_hint = '') : bool
    {
        if (!array_key_exists('bb_forum_number', $_POST)) {
            $_POST['bb_forum_number'] = ''; // for now
        }

        $old_name = 'cms_' . $old_name;
        $name = 'cms_' . $name;
        $test = $this->db->query('profilefields', ['profilefieldid'], ['title' => $old_name]);
        if (array_key_exists(0, $test)) {
            $this->db->query_update('profilefields', ['title' => $name, 'description' => '', 'required' => $required, 'hidden' => 1 - $viewable, 'maxlength' => $length, 'fieldsize' => $length], ['title' => $old_name], '', 1);
            return true;
        }
        return false;
    }

    /**
     * Get an array of attributes to take in from the installer. Almost all forums require a table prefix, which the requirement there-of is defined through this function.
     * The attributes have 4 values in an array:
     * - name, the name of the attribute for _config.php
     * - default, the default value (perhaps obtained through autodetection from forum config)
     * - description, a textual description of the attributes
     * - title, a textual title of the attribute
     *
     * @return array The attributes for the forum
     */
    public function install_specifics() : array
    {
        global $PROBED_FORUM_CONFIG;
        $a = [];
        $a['name'] = 'bb_forum_number';
        $a['default'] = array_key_exists('sql_tbl_prefix', $PROBED_FORUM_CONFIG) ? $PROBED_FORUM_CONFIG['sql_tbl_prefix'] : '1';
        $a['description'] = do_lang('MOST_DEFAULT');
        $a['title'] = do_lang('BOARD_INSTALL_NUMBER');
        return [$a];
    }

    /**
     * Searches for forum auto-config at this path.
     *
     * @param  PATH $path The path in which to search
     * @return boolean Whether the forum auto-config could be found
     */
    public function install_test_load_from(string $path) : bool
    {
        global $PROBED_FORUM_CONFIG;
        if (@file_exists($path . '/acp/lib/config.inc.php')) {
            $sqlhost = '';
            $sqldb = '';
            $sqluser = '';
            $sqlpassword = '';
            $n = '';
            @include($path . '/acp/lib/config.inc.php');
            $PROBED_FORUM_CONFIG['sql_host'] = $sqlhost;
            $PROBED_FORUM_CONFIG['sql_database'] = $sqldb;
            $PROBED_FORUM_CONFIG['sql_user'] = $sqluser;
            $PROBED_FORUM_CONFIG['sql_pass_exists'] = ($sqlpassword != '');
            $PROBED_FORUM_CONFIG['sql_tbl_prefix'] = $n;
            $PROBED_FORUM_CONFIG['board_url'] = '';
            $PROBED_FORUM_CONFIG['cookie_member_id'] = 'wbb_userid';
            $PROBED_FORUM_CONFIG['cookie_member_hash'] = 'wbb_userpassword';
            return true;
        }
        return false;
    }

    /**
     * Get an array of paths to search for config at.
     *
     * @return array The paths in which to search for the forum config
     */
    public function install_get_path_search_list() : array
    {
        return [
            'bb',
            'bb2',
            'burningboard',
            'wbb',
            'forums',
            'forum',
            'boards',
            'board',
            '../forums/bb',
            '../forums/bb2',
            '../forums/burningboard',
            '../forums/wbb',
            '../bb',
            '../bb2',
            '../burningboard',
            '../wbb',
            '../forums',
            '../forum',
            '../boards',
            '../board',
        ];
    }

    /**
     * Get an emoticon chooser template.
     *
     * @param  string $field_name The ID of the form field the emoticon chooser adds to
     * @return Tempcode The emoticon chooser template
     */
    public function get_emoticon_chooser(string $field_name = 'post') : object
    {
        require_code('comcode_compiler');
        $emoticons = $this->db->query_select('smilies', ['*']);
        $em = new Tempcode();
        foreach ($emoticons as $emo) {
            $code = $emo['smiliecode'];
            $em->attach(do_template('EMOTICON_CLICK_CODE', ['_GUID' => 'c016421840b36b3f70bf5da34740dfaf', 'FIELD_NAME' => $field_name, 'CODE' => $code, 'IMAGE' => apply_emoticons($code)]));
        }

        return $em;
    }

    /**
     * Pin a topic.
     *
     * @param  AUTO_LINK $topic_id The topic ID
     * @param  boolean $pin True: pin it, False: unpin it
     */
    public function pin_topic(int $topic_id, bool $pin = true)
    {
        $this->db->query_update('threads', ['important' => $pin ? 1 : 0], ['threadid' => $topic_id], '', 1);
    }

    /**
     * From a member row, get the member's member ID.
     *
     * @param  array $r The profile-row
     * @return MEMBER The member ID
     */
    public function mrow_member_id(array $r) : int
    {
        return $r['userid'];
    }

    /**
     * From a member row, get the member's last visit date.
     *
     * @param  array $r The profile-row
     * @return TIME The last visit date
     */
    public function mrow_lastvisit(array $r) : int
    {
        return $r['lastvisit'];
    }

    /**
     * From a member row, get the member's name.
     *
     * @param  array $r The profile-row
     * @return string The username
     */
    public function mrow_username(array $r) : string
    {
        return $r['username'];
    }

    /**
     * From a member row, get the member's e-mail address.
     *
     * @param  array $r The profile-row
     * @return SHORT_TEXT The member e-mail address
     */
    public function mrow_email_address(array $r) : string
    {
        return $r['email'];
    }

    /**
     * Get a URL to the specified member's home (control panel).
     *
     * @param  MEMBER $member_id The member ID
     * @return URLPATH The URL to the members home
     */
    public function member_home_url(int $member_id) : string
    {
        return get_forum_base_url() . '/usercp.php';
    }

    /**
     * Get the photo URL for the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @param  boolean $full Get full photo
     * @return URLPATH The URL (blank: none)
     */
    public function get_member_photo_url(int $member_id, bool $full = false) : string
    {
        return '';
    }

    /**
     * Get the avatar URL for the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @param  boolean $fallback_support Whether fallback support should be allowed (passed by reference)
     * @return URLPATH The URL (blank: none)
     */
    protected function _get_member_avatar_url(int $member_id, bool &$fallback_support) : string
    {
        $avatar = $this->db->query_select_value_if_there('avatars', 'avatarname', ['userid' => $member_id]);
        if ((empty($avatar)) || (!url_is_local($avatar))) {
            return $avatar;
        }
        return get_forum_base_url() . '/images/avatars/' . $avatar;
    }

    /**
     * Get a URL to the specified member's profile.
     *
     * @param  MEMBER $member_id The member ID
     * @return URLPATH The URL to the member profile
     */
    protected function _member_profile_url(int $member_id) : string
    {
        return get_forum_base_url() . '/profile.php?userid=' . strval($member_id);
    }

    /**
     * Get a URL to the registration page (for people to create member accounts).
     *
     * @return URLPATH The URL to the registration page
     */
    protected function _join_url() : string
    {
        return get_forum_base_url() . '/register.php';
    }

    /**
     * Get a URL to the members-online page.
     *
     * @return URLPATH The URL to the members-online page
     */
    protected function _users_online_url() : string
    {
        return get_forum_base_url() . '/wiw.php';
    }

    /**
     * Get a URL to send a private/personal message to the given member.
     *
     * @param  MEMBER $member_id The member ID
     * @return URLPATH The URL to the private/personal message page
     */
    protected function _member_pm_url(int $member_id) : string
    {
        return get_forum_base_url() . '/pms.php?action=newpm&userid=' . strval($member_id);
    }

    /**
     * Get a URL to the specified forum.
     *
     * @param  integer $forum_id The forum ID
     * @return URLPATH The URL to the specified forum
     */
    protected function _forum_url(int $forum_id) : string
    {
        return get_forum_base_url() . '/board.php?boardid=' . strval($forum_id);
    }

    /**
     * Get the forum ID from a forum name. Numeric forum names are considered to be usable as IDs.
     *
     * @param  SHORT_TEXT $forum_name The forum name
     * @return ?integer The forum ID (null: not found)
     */
    public function forum_id_from_name(string $forum_name) : ?int
    {
        return is_numeric($forum_name) ? intval($forum_name) : $this->db->query_select_value_if_there('boards', 'boardid', ['title' => $forum_name]);
    }

    /**
     * Get the topic ID from a topic identifier in the specified forum. It is used by comment topics, which means that the unique-topic-name assumption holds valid.
     *
     * @param  string $forum The forum name / ID
     * @param  SHORT_TEXT $topic_identifier The topic identifier
     * @return ?integer The topic ID (null: not found)
     */
    public function find_topic_id_for_topic_identifier(string $forum, string $topic_identifier) : ?int
    {
        if (is_integer($forum)) {
            $forum_id = intval($forum);
        } else {
            $forum_id = $this->forum_id_from_name($forum);
        }
        return $this->db->query_value_if_there('SELECT threadid FROM ' . $this->db->get_table_prefix() . 'threads WHERE boardid=' . strval($forum_id) . ' AND (' . db_string_equal_to('topic', $topic_identifier) . ' OR topic LIKE \'' . db_encode_like('%: #' . $topic_identifier) . '\')');
    }

    /**
     * Makes a post in the specified forum, in the specified topic according to the given specifications. If the topic doesn't exist, it is created along with a spacer-post.
     * Spacer posts exist in order to allow staff to delete the first true post in a topic. Without spacers, this would not be possible with most forum systems. They also serve to provide meta information on the topic that cannot be encoded in the title (such as a link to the content being commented upon).
     *
     * @param  SHORT_TEXT $forum_name The forum name
     * @param  SHORT_TEXT $topic_identifier The topic identifier (usually <content-type>_<content-id>)
     * @param  MEMBER $member_id The member ID
     * @param  LONG_TEXT $post_title The post title
     * @param  LONG_TEXT $post The post content in Comcode format
     * @param  string $content_title The topic title; must be same as content title if this is for a comment topic
     * @param  string $topic_identifier_encapsulation_prefix This is put together with the topic identifier to make a more-human-readable topic title or topic description (hopefully the latter and a $content_title title, but only if the forum supports descriptions)
     * @param  ?URLPATH $content_url URL to the content (null: do not make spacer post)
     * @param  ?TIME $time The post time (null: use current time)
     * @param  ?IP $ip The post IP address (null: use current members IP address)
     * @param  ?BINARY $validated Whether the post is validated (null: unknown, find whether it needs to be marked non-validated initially). This only works with the Conversr driver.
     * @param  ?BINARY $topic_validated Whether the topic is validated (null: unknown, find whether it needs to be marked non-validated initially). This only works with the Conversr driver.
     * @param  boolean $skip_post_checks Whether to skip post checks
     * @param  SHORT_TEXT $poster_name_if_guest The name of the poster
     * @param  ?AUTO_LINK $parent_id ID of post being replied to (null: N/A)
     * @param  boolean $staff_only Whether the reply is only visible to staff
     * @return array Topic ID (may be null), and whether a hidden post has been made
     */
    public function make_post_forum_topic(string $forum_name, string $topic_identifier, int $member_id, string $post_title, string $post, string $content_title, string $topic_identifier_encapsulation_prefix, ?string $content_url = null, ?int $time = null, ?string $ip = null, ?int $validated = null, ?int $topic_validated = 1, bool $skip_post_checks = false, string $poster_name_if_guest = '', ?int $parent_id = null, bool $staff_only = false) : array
    {
        if ($time === null) {
            $time = time();
        }
        if ($ip === null) {
            $ip = get_ip_address();
        }
        $forum_id = $this->forum_id_from_name($forum_name);
        if ($forum_id === null) {
            warn_exit(do_lang_tempcode('MISSING_FORUM', escape_html($forum_name)), false, true);
        }
        $username = $this->get_username($member_id);
        $topic_id = $this->find_topic_id_for_topic_identifier($forum_name, $topic_identifier);
        $is_new = ($topic_id === null);
        if ($is_new) {
            $topic_id = $this->db->query_insert('threads', ['topic' => $content_title . ', ' . $topic_identifier_encapsulation_prefix . ': #' . $topic_identifier, 'starttime' => $time, 'boardid' => $forum_id, 'closed' => 0, 'starter' => $username, 'starterid' => $member_id, 'lastposter' => $username, 'lastposttime' => $time, 'visible' => 1], true);
            $home_link = '[url]' . $content_url . '[/url]';
            $this->db->query_insert('posts', ['threadid' => $topic_id, 'username' => do_lang('SYSTEM', '', '', '', get_site_default_lang()), 'userid' => 0, 'posttopic' => '', 'posttime' => $time, 'message' => do_lang('SPACER_POST', $home_link, '', '', get_site_default_lang()), 'allowsmilies' => 1, 'ipaddress' => '127.0.0.1', 'visible' => 1]);
            $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'boards SET threadcount=(threadcount+1), postcount=(postcount+1) WHERE boardid=' . strval($forum_id), 1);
        }

        $GLOBALS['LAST_TOPIC_ID'] = $topic_id;
        $GLOBALS['LAST_TOPIC_IS_NEW'] = $is_new;

        if ($post == '') {
            return [$topic_id, false];
        }

        $this->db->query_insert('posts', ['threadid' => $topic_id, 'username' => $username, 'userid' => $member_id, 'posttopic' => $post_title, 'posttime' => $time, 'message' => $post, 'allowsmilies' => 1, 'ipaddress' => $ip, 'visible' => 1]);
        $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'boards SET lastthreadid=' . strval($topic_id) . ', postcount=(postcount+1), lastposttime=' . strval($time) . ', lastposterid=' . strval($member_id) . ', lastposter=\'' . db_escape_string($username) . '\' WHERE boardid=' . strval($forum_id) . '', 1);
        $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'threads SET replycount=(replycount+1), lastposttime=' . strval($time) . ', lastposterid=' . strval($member_id) . ', lastposter=\'' . db_escape_string($username) . '\' WHERE threadid=' . strval($topic_id), 1);

        return [$topic_id, false];
    }

    /**
     * Get an array of maps for the topic in the given forum.
     *
     * @param  integer $topic_id The topic ID
     * @param  ?integer $count The comment count will be returned here by reference (null: do not gather it)
     * @param  ?integer $max Maximum comments to returned (null: no limit)
     * @param  integer $start Comment to start at
     * @param  boolean $mark_read Whether to mark the topic read (ignored for this forum driver)
     * @param  boolean $reverse Whether to show in reverse
     * @return mixed The array of maps (Each map is: title, message, member, date) (-1 for no such forum, -2 for no such topic)
     */
    public function get_forum_topic_posts(int $topic_id, ?int &$count = null, ?int $max = 100, int $start = 0, bool $mark_read = true, bool $reverse = false)
    {
        if ($topic_id === null) {
            return (-2);
        }
        $order = $reverse ? 'posttime DESC' : 'posttime';
        $rows = $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'posts WHERE threadid=' . strval($topic_id) . ' AND message NOT LIKE \'' . db_encode_like(substr(do_lang('SPACER_POST', '', '', '', get_site_default_lang()), 0, 20) . '%') . '\' ORDER BY ' . $order, $max, $start);
        if ($count !== null) {
            $count = $this->db->query_value_if_there('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'posts WHERE threadid=' . strval($topic_id) . ' AND message NOT LIKE \'' . db_encode_like(substr(do_lang('SPACER_POST', '', '', '', get_site_default_lang()), 0, 20) . '%') . '\'');
        }
        $out = [];
        foreach ($rows as $myrow) {
            $temp = [];
            $temp['title'] = $myrow['posttopic'];
            if ($temp['title'] === null) {
                $temp['title'] = '';
            }
            push_lax_comcode(true);
            $temp['message'] = comcode_to_tempcode($myrow['message'], $myrow['userid']);
            pop_lax_comcode();
            $temp['member'] = $myrow['userid'];
            $temp['date'] = $myrow['posttime'];

            $out[] = $temp;
        }

        return $out;
    }

    /**
     * Get a URL to the specified topic ID. Most forums don't require the second parameter, but some do, so it is required in the interface.
     *
     * @param  integer $topic_id The topic ID
     * @param  string $forum The forum ID
     * @return URLPATH The URL to the topic
     */
    public function topic_url(int $topic_id, string $forum) : string
    {
        return get_forum_base_url() . '/thread.php?threadid=' . strval($topic_id);
    }

    /**
     * Get a URL to the specified post ID.
     *
     * @param  integer $post_id The post ID
     * @param  ?mixed $forum The forum ID (null: private topic)
     * @return URLPATH The URL to the post
     */
    public function post_url(int $post_id, $forum) : string
    {
        return get_forum_base_url() . '/thread.php?postid=' . strval($post_id) . '#post' . strval($post_id);
    }

    /**
     * Get an array of topics in the given forum. Each topic is an array with the following attributes:
     * - id, the topic ID
     * - title, the topic title
     * - lastusername, the username of the last poster
     * - lasttime, the timestamp of the last reply
     * - closed, a Boolean for whether the topic is currently closed or not
     * - firsttitle, the title of the first post
     * - firstpost, the first post (only set if $show_first_posts was true)
     *
     * @param  mixed $name The forum name or forum ID or an array of forum IDs (in such an array the KEYS are forum IDs, and the values ignored)
     * @param  integer $limit The limit
     * @param  integer $start The start position
     * @param  integer $max_rows The total rows (not a parameter: returns by reference)
     * @param  SHORT_TEXT $filter_topic_title The topic title filter (blank: no filter)
     * @param  SHORT_TEXT $filter_topic_description The topic description filter; may apply to the topic title if there is no separate description field with additional wildcarding to match what make_post_forum_topic is doing (blank: no filter)
     * @param  boolean $show_first_posts Whether to show the first posts
     * @param  string $date_key The date key to sort by
     * @set lasttime firsttime
     * @param  boolean $hot Whether to limit to hot topics
     * @param  boolean $only_open Open topics only
     * @return ?array The array of topics (null: error)
     */
    public function show_forum_topics($name, int $limit, int $start, int &$max_rows, string $filter_topic_title = '', string $filter_topic_description = '', bool $show_first_posts = false, string $date_key = 'lasttime', bool $hot = false, bool $only_open = false) : ?array
    {
        // Build forum ID query
        if (is_integer($name)) { // Forum ID
            $id_list = 'boardid=' . strval($name);
        } elseif (!is_array($name)) { // Forum name
            $id = $this->forum_id_from_name($name);
            if ($id === null) {
                return null;
            }
            $id_list = 'boardid=' . strval($id);
        } else { // Array of forum IDs
            $id_list = '';
            foreach (array_keys($name) as $id) {
                if ($id_list != '') {
                    $id_list .= ' OR ';
                }
                $id_list .= 'boardid=' . strval($id);
            }
            if ($id_list == '') {
                return null;
            }
        }

        $topic_filter = '';
        if ($filter_topic_title != '') {
            $topic_filter .= ' AND topic LIKE \'' . db_encode_like($filter_topic_title . ', %') . '\'';
        }
        if ($filter_topic_description != '') {
            $topic_filter .= ' AND topic LIKE \'' . db_encode_like('%, ' . $filter_topic_description) . '\'';
        }
        if ($only_open) {
            $topic_filter .= ' AND closed=0';
        }

        $rows = $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'threads WHERE (' . $id_list . ')' . $topic_filter . ' ORDER BY ' . (($date_key == 'lasttime') ? 'lastposttime' : 'starttime') . ' DESC', $limit, $start);
        $max_rows = $this->db->query_value_if_there('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'threads WHERE (' . $id_list . ')' . $topic_filter);

        // Generate output
        $out = [];
        foreach ($rows as $i => $r) {
            $out[$i] = [];
            $out[$i]['id'] = $r['threadid'];
            $out[$i]['num'] = $r['replycount'] + 1;
            $out[$i]['title'] = $r['topic'];
            $out[$i]['description'] = $r['topic'];
            $out[$i]['firstusername'] = $r['starter'];
            $out[$i]['lastusername'] = $r['lastposter'];
            $out[$i]['firsttime'] = $r['starttime'];
            $out[$i]['lasttime'] = $r['lastposttime'];
            $out[$i]['closed'] = ($r['closed'] == 1);

            // Get first non-spacer post
            $fp_rows = $this->db->query('SELECT posttopic,message,userid,posttime FROM ' . $this->db->get_table_prefix() . 'posts WHERE message NOT LIKE \'' . db_encode_like(do_lang('SPACER_POST', '', '', '', get_site_default_lang()) . '%') . '\' AND threadid=' . strval($out[$i]['id']) . ' ORDER BY posttime ASC', 1);

            // Filter topics without any posts
            if (!array_key_exists(0, $fp_rows)) {
                unset($out[$i]);
                continue;
            }

            // Correct title according to the first non-spacer post
            $out[$i]['firsttitle'] = $fp_rows[0]['posttopic'];

            // Render first post if applicable
            if ($show_first_posts) {
                push_lax_comcode(true);
                $out[$i]['firstpost'] = comcode_to_tempcode($fp_rows[0]['message'], $fp_rows[0]['userid']);
                pop_lax_comcode();
            }
        }
        if (!empty($out)) {
            return $out;
        }
        return null;
    }

    /**
     * Get rows of members before the given one.
     * It cannot be assumed there are no gaps in member IDs, as members may be deleted.
     *
     * @param  MEMBER $member_id The member ID to paginate back from
     * @param  integer $total Number of members to retrieve
     * @return array Member rows
     */
    public function get_previous_members(int $member_id, int $total = 1) : array
    {
        $sql = 'SELECT userid FROM ' . $this->db->get_table_prefix() . 'users WHERE userid<>0';
        $sql .= ' AND userid<' . strval($member_id);
        $sql .= ' ORDER BY userid DESC';
        $rows = $this->db->query($sql, $total);
        return $rows;
    }

    /**
     * Get rows of members after the given one.
     * It cannot be assumed there are no gaps in member IDs, as members may be deleted.
     *
     * @param  ?MEMBER $member_id The member ID to increment (null: find the very first members)
     * @param  integer $total Number of members to retrieve
     * @return array Member rows
     */
    public function get_next_members(?int $member_id, int $total = 1) : array
    {
        $sql = 'SELECT userid FROM ' . $this->db->get_table_prefix() . 'users WHERE userid<>0';
        if ($member_id !== null) {
            $sql .= ' AND userid>' . strval($member_id);
        }
        $sql .= ' ORDER BY userid DESC';
        $rows = $this->db->query($sql, $total);
        return $rows;
    }

    /**
     * Try to find a member with the given IP address.
     *
     * @param  IP $ip The IP address
     * @return array The distinct rows found
     */
    public function probe_ip(string $ip) : array
    {
        return $this->db->query_select('posts', ['DISTINCT userid AS id'], ['ipaddress' => $ip]);
    }

    /**
     * Get the name relating to the specified member ID.
     * If this returns null, then the member has been deleted. Always take potential null output into account.
     *
     * @param  MEMBER $member_id The member ID
     * @return ?SHORT_TEXT The username (null: member deleted)
     */
    protected function _get_username(int $member_id) : ?string
    {
        if ($member_id == $this->get_guest_id()) {
            return do_lang('GUEST');
        }
        return $this->get_member_row_field($member_id, 'username');
    }

    /**
     * Get the e-mail address for the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @return SHORT_TEXT The e-mail address
     */
    protected function _get_member_email_address(int $member_id) : string
    {
        return $this->get_member_row_field($member_id, 'email');
    }

    /**
     * Find if this member may have e-mails sent to them.
     *
     * @param  MEMBER $member_id The member ID
     * @return boolean Whether the member may have e-mails sent to them
     */
    public function get_member_email_allowed(int $member_id) : bool
    {
        $v = $this->get_member_row_field($member_id, 'emailnotify');
        if ($v == 1) {
            return true;
        }
        return false;
    }

    /**
     * Get the timestamp of a member's join date.
     *
     * @param  MEMBER $member_id The member ID
     * @return TIME The timestamp
     */
    public function get_member_join_timestamp(int $member_id) : int
    {
        return $this->get_member_row_field($member_id, 'regdate');
    }

    /**
     * Find all members with a name matching the given SQL LIKE string.
     *
     * @param  string $pattern The pattern
     * @param  ?integer $limit Maximum number to return (limits to the most recent active) (null: no limit)
     * @return ?array The array of matched members (null: none found)
     */
    public function get_matching_members(string $pattern, ?int $limit = null) : ?array
    {
        $rows = $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'users WHERE username LIKE \'' . db_encode_like($pattern) . '\' AND userid<>' . strval($this->get_guest_id()) . ' ORDER BY lastactivity DESC', $limit);
        sort_maps_by($rows, 'username');
        return $rows;
    }

    /**
     * Get the given member's post count.
     *
     * @param  MEMBER $member_id The member ID
     * @return integer The post count
     */
    public function get_post_count(int $member_id) : int
    {
        $c = $this->get_member_row_field($member_id, 'userposts');
        if ($c === null) {
            $c = 0;
        }
        return $c;
    }

    /**
     * Get the given member's topic count.
     *
     * @param  MEMBER $member_id The member ID
     * @return integer The topic count
     */
    public function get_topic_count(int $member_id) : int
    {
        return $this->db->query_select_value('threads', 'COUNT(*)', ['starterid' => $member_id]);
    }

    /**
     * Find the base URL to the emoticons.
     *
     * @return URLPATH The base URL
     */
    public function get_emo_dir() : string
    {
        return get_forum_base_url() . '/';
    }

    /**
     * Get a map between emoticon codes and templates representing the HTML-image-code for this emoticon. The emoticons presented of course depend on the forum involved.
     *
     * @return array The map
     */
    public function find_emoticons() : array
    {
        if ($this->EMOTICON_CACHE !== null) {
            return $this->EMOTICON_CACHE;
        }
        $rows = $this->db->query_select('smilies', ['*']);
        $this->EMOTICON_CACHE = [];
        foreach ($rows as $myrow) {
            $src = str_replace('{imagefolder}' . '/', 'images/', $myrow['smiliepath']);
            if (url_is_local($src)) {
                $src = $this->get_emo_dir() . $src;
            }
            $this->EMOTICON_CACHE[$myrow['smiliecode']] = ['EMOTICON_IMG_CODE_DIR', $src, $myrow['smiliecode']];
        }
        return $this->EMOTICON_CACHE;
    }

    /**
     * Get the number of members currently online on the forums.
     *
     * @return integer The number of members
     */
    public function get_num_users_forums() : int
    {
        return $this->db->query_value_if_there('SELECT COUNT(DISTINCT userid) FROM ' . $this->db->get_table_prefix() . 'sessions WHERE lastactivity>' . strval(time() - 60 * intval(get_option('users_online_time'))));
    }

    /**
     * Get the number of members registered on the forum.
     *
     * @return integer The number of members
     */
    public function get_num_members() : int
    {
        return $this->db->query_select_value('users', 'COUNT(*)');
    }

    /**
     * Get the total topics ever made on the forum.
     *
     * @return integer The number of topics
     */
    public function get_num_topics() : int
    {
        return $this->db->query_select_value('threads', 'COUNT(*)');
    }

    /**
     * Get the total posts ever made on the forum.
     *
     * @return integer The number of posts
     */
    public function get_num_forum_posts() : int
    {
        return $this->db->query_select_value('posts', 'COUNT(*)');
    }

    /**
     * Get the number of new forum posts.
     *
     * @return integer The number of posts
     */
    protected function _get_num_new_forum_posts() : int
    {
        return $this->db->query_value_if_there('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'posts WHERE posttime>' . strval(time() - 60 * 60 * 24));
    }

    /**
     * Set a Custom Profile Field's value, if the custom field exists. Only works on specially-named (titled) fields.
     *
     * @param  MEMBER $member_id The member ID
     * @param  string $field The field name (e.g. "firstname" for the CPF with a title of "cms_firstname")
     * @param  string $value The value
     */
    public function set_custom_field(int $member_id, string $field, string $value)
    {
        $id = $this->db->query_select_value_if_there('profilefields', 'profilefieldid', ['title' => 'cms_' . $field]);
        if ($id === null) {
            return;
        }
        $this->db->query_update('userfields', ['field' . strval($id) => $value], ['userid' => $member_id], '', 1);
    }

    /**
     * Get Custom Profile Fields values for all 'cms_' prefixed keys.
     *
     * @param  MEMBER $member_id The member ID
     * @return ?array A map of the Custom Profile Fields, key_suffix=>value (null: no fields)
     */
    public function get_custom_fields(int $member_id) : ?array
    {
        $rows = $this->db->query('SELECT profilefieldid,title FROM ' . $this->db->get_table_prefix() . 'profilefields WHERE title LIKE \'' . db_encode_like('cms\_%') . '\'');
        $values = $this->db->query_select('userfields', ['*'], ['userid' => $member_id], '', 1);
        if (!array_key_exists(0, $values)) {
            return null;
        }

        $out = [];
        foreach ($rows as $row) {
            $title = substr($row['title'], 4);
            $out[$title] = $values[0]['field' . strval($row['profilefieldid'])];
        }
        return $out;
    }

    /**
     * Get a member ID from the given member's username.
     *
     * @param  SHORT_TEXT $username The username
     * @return ?MEMBER The member ID (null: not found)
     */
    public function get_member_from_username(string $username) : ?int
    {
        if ($username == do_lang('GUEST')) {
            return $this->get_guest_id();
        }

        return $this->db->query_select_value_if_there('users', 'userid', ['username' => $username]);
    }

    /**
     * Get a member ID from the given member's e-mail address.
     *
     * @param  SHORT_TEXT $email_address The member e-mail address
     * @return ?MEMBER The member ID (null: not found)
     */
    public function get_member_from_email_address(string $email_address) : ?int
    {
        $results = $this->db->query_select('users', ['userid', 'regdate'], ['email' => $email_address], 'ORDER BY regdate DESC', 1);
        return array_key_exists(0, $results) ? $results[0]['userid'] : null;
    }

    /**
     * Create a member login cookie.
     *
     * @param  MEMBER $member_id The member ID
     * @param  ?SHORT_TEXT $username The username (null: lookup)
     * @param  string $password_raw The password (note this is sometimes not used by forum drivers, as they can also do something with what is already in the database instead)
     */
    public function create_login_cookie(int $member_id, ?string $username, string $password_raw)
    {
        if ($username === null) {
            $username = $this->get_username($member_id);
        }

        cms_setcookie(get_member_cookie(), $username, false, true);
        $_COOKIE[get_member_cookie()] = $username;

        cms_setcookie(get_pass_cookie(), md5($password_raw), false, true);
    }

    /**
     * Try and log in using a member cookie.
     * Should only be called if the cookie exists.
     *
     * @return ?array A map of 'id' and 'error'. If 'id' is null, an error occurred and 'error' is set (null: no cookie)
     */
    public function authorise_cookie_login() : ?array
    {
        if ((!isset($_COOKIE[get_member_cookie()])) || (!isset($_COOKIE[get_pass_cookie()]))) {
            return null;
        }

        $username = $_COOKIE[get_member_cookie()];
        $password_hashed = $_COOKIE[get_pass_cookie()];

        return $this->_authorise_login($username, null, $password_hashed, true);
    }

    /**
     * Find if the given member ID and password is valid. If username is null, then the member ID is used instead.
     *
     * @param  ?SHORT_TEXT $username The member username (null: use $member_id)
     * @param  ?MEMBER $member_id The member ID (null: use $username)
     * @param  string $password_raw The raw password
     * @return array A map of 'id' and 'error'. If 'id' is null, an error occurred and 'error' is set
     */
    public function authorise_login(?string $username, ?int $member_id, string $password_raw) : array
    {
        return $this->_authorise_login($username, $member_id, $password_raw, false);
    }

    /**
     * Find if the given member ID and password is valid. If username is null, then the member ID is used instead.
     * All authorisation, cookies, and form-logins, are passed through this function.
     *
     * @param  ?SHORT_TEXT $username The member username (null: use $member_id)
     * @param  ?MEMBER $member_id The member ID (null: use $username)
     * @param  string $password_mixed If $cookie_login is true then this is the value of the password cookie, otherwise it's the password the user tried to log in with
     * @param  boolean $cookie_login Whether this is a cookie login, determines how the hashed password is treated for the value passed in
     * @return array A map of 'id' and 'error'. If 'id' is null, an error occurred and 'error' is set
     */
    protected function _authorise_login(?string $username, ?int $member_id, string $password_mixed, bool $cookie_login = false) : array
    {
        $out = [];
        $out['id'] = null;

        if ($member_id === null) {
            $rows = $this->db->query_select('users', ['*'], ['username' => $username], '', 1);
            if (array_key_exists(0, $rows)) {
                $this->MEMBER_ROWS_CACHED[$rows[0]['userid']] = $rows[0];
            }
        } else {
            $rows = [];
            $rows[0] = $this->get_member_row($member_id);
        }

        if (!array_key_exists(0, $rows) || $rows[0] === null) { // All hands to lifeboats
            $out['error'] = (do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($username)));
            return $out;
        }
        $row = $rows[0];
        if ($this->is_banned($row['userid'])) { // All hands to the guns
            $out['error'] = (do_lang_tempcode('YOU_ARE_BANNED'));
            return $out;
        }

        $password_hashed = $cookie_login ? $password_mixed : md5($password_mixed);

        if (!hash_equals($row['password'], $password_hashed)) {
            $out['error'] = (do_lang_tempcode('MEMBER_BAD_PASSWORD'));
            return $out;
        }

        require_code('users_active_actions');
        cms_eatcookie('cookiehash');

        $out['id'] = $row['userid'];
        return $out;
    }

    /**
     * Get a first known IP address of the given member.
     *
     * @param  MEMBER $member_id The member ID
     * @return IP The IP address
     */
    public function get_member_ip(int $member_id) : string
    {
        return $this->get_member_row_field($member_id, 'ipaddress');
    }

    /**
     * Gets a whole member row from the database.
     *
     * @param  MEMBER $member_id The member ID
     * @return ?array The member row (null: no such member)
     */
    public function get_member_row(int $member_id) : ?array
    {
        if (array_key_exists($member_id, $this->MEMBER_ROWS_CACHED)) {
            return $this->MEMBER_ROWS_CACHED[$member_id];
        }

        $rows = $this->db->query_select('users', ['*'], ['userid' => $member_id], '', 1);
        if ($member_id == $this->get_guest_id()) {
            $rows[0]['username'] = do_lang('GUEST');
            $rows[0]['email'] = null;
            $rows[0]['avatar'] = '';
            $rows[0]['emailnotify'] = 0;
            $rows[0]['regdate'] = time();
            $rows[0]['userposts'] = 0;
            $rows[0]['groupid'] = $this->_get_guest_group();
            $rows[0]['userid'] = $this->get_guest_id();
            $rows[0]['styleid'] = null;
        }
        if (!array_key_exists(0, $rows)) {
            return null;
        }
        $this->MEMBER_ROWS_CACHED[$member_id] = $rows[0];
        return $this->MEMBER_ROWS_CACHED[$member_id];
    }

    /**
     * Gets a named field of a member row from the database.
     *
     * @param  MEMBER $member_id The member ID
     * @param  string $field The field identifier
     * @return mixed The field
     */
    public function get_member_row_field(int $member_id, string $field)
    {
        $row = $this->get_member_row($member_id);
        return ($row === null) ? null : $row[$field];
    }

    /**
     * Get the ID of the usergroup that is for guests.
     *
     * @return GROUP The guest usergroup
     */
    protected function _get_guest_group() : int
    {
        $guest_group = $this->db->query_select_value_if_there('groups', 'groupid', ['title' => 'Guests']);
        if ($guest_group === null) {
            $guest_group = 5;
        }
        return $guest_group;
    }

    /**
     * From a member row, get the member's primary usergroup.
     *
     * @param  array $r The profile-row
     * @return GROUP The member's primary usergroup
     */
    public function mrow_primary_group(array $r) : int
    {
        return $this->db->query_select_value('user2groups', 'groupid', ['userid' => $r['userid']]);
    }

    /**
     * Get an array of members who are in at least one of the given array of usergroups.
     *
     * @param  array $groups The array of usergroups
     * @param  ?integer $max Return up to this many entries for primary members and this many entries for secondary members (null: no limit, only use no limit if querying very restricted usergroups!)
     * @param  integer $start Return primary members after this offset and secondary members after this offset
     * @return ?array The array of members (null: no members)
     */
    public function member_group_query(array $groups, ?int $max = null, int $start = 0) : ?array
    {
        $_groups = '';
        foreach ($groups as $group) {
            if ($_groups != '') {
                $_groups .= ' OR ';
            }
            $_groups .= 'groupid=' . strval($group);
        }
        return $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'user2groups g LEFT JOIN ' . $this->db->get_table_prefix() . 'users u ON g.userid=u.userid WHERE ' . $_groups . ' ORDER BY groupid ASC', $max, $start, false, true);
    }

    /**
     * Find out if the given member ID is banned.
     *
     * @param  MEMBER $member_id The member ID
     * @param  ?ID_TEXT $reasoned_ban Ban reasoning returned by reference (null: none)
     * @return boolean Whether the member is banned
     */
    public function is_banned(int $member_id, ?string &$reasoned_ban = null) : bool
    {
        return false;
    }

    /**
     * Find a list of all forum skins (aka themes).
     *
     * @return array The list of skins
     */
    public function get_skin_list() : array
    {
        $table = 'styles';
        $codename = 'stylename';

        $rows = $this->db->query_select($table, [$codename]);
        return collapse_1d_complexity($codename, $rows);
    }

    /**
     * Try to find the theme that the logged-in/guest member is using, and map it to a Composr theme.
     * The themes/map.ini file functions to provide this mapping between forum themes, and Composr themes, and has a slightly different meaning for different forum drivers. For example, some drivers map the forum themes theme directory to the Composr theme name, while others made the humanly readable name.
     *
     * @param  boolean $skip_member_specific Whether to avoid member-specific lookup (i.e. find via what forum theme is currently configured as the default)
     * @param  ?MEMBER $member_id The member to find for (null: current member)
     * @return ID_TEXT The theme
     */
    public function _get_theme(bool $skip_member_specific = false, ?int $member_id = null) : string
    {
        // Cache
        $def = '';

        // Load in remapper
        require_code('files');
        $map = file_exists(get_file_base() . '/themes/map.ini') ? cms_parse_ini_file_fast(get_file_base() . '/themes/map.ini') : [];

        if (!$skip_member_specific) {
            // Work out
            if ($member_id === null) {
                $member_id = get_member();
            }
            if ($member_id > 0) {
                $skin = $this->get_member_row_field($member_id, 'styleid');
            } else {
                $skin = 0;
            }
            if ($skin > 0) { // User has a custom theme
                $bb = $this->db->query_select_value('styles', 'stylename', ['styleid' => $skin]);
                $def = ($map[$bb] !== null) ? $map[$bb] : $bb;
            }
        }

        // Look for a skin according to our site name (we bother with this instead of 'default' because Composr itself likes to never choose a theme when forum-theme integration is on: all forum [via map] or all Composr seems cleaner, although it is complex)
        if ((!(strlen($def) > 0)) || (!file_exists(get_custom_file_base() . '/themes/' . $def))) {
            $bb = $this->db->query_select_value_if_there('styles', 'stylename', ['stylename' => get_site_name()]);
            if ($bb !== null) {
                $def = ($map[$bb] !== null) ? $map[$bb] : $bb;
            }
        }

        // Default then!
        if ((!(strlen($def) > 0)) || (!file_exists(get_custom_file_base() . '/themes/' . $def))) {
            $def = array_key_exists('default', $map) ? $map['default'] : 'default';
        }

        return $def;
    }

    /**
     * Find if the specified member ID is marked as staff or not.
     *
     * @param  MEMBER $member_id The member ID
     * @return boolean Whether the member is staff
     */
    protected function _is_staff(int $member_id) : bool
    {
        $rows = $this->db->query_select('user2groups', ['groupid'], ['userid' => $member_id]);
        foreach ($rows as $g) {
            $usergroup = $g['groupid'];
            if ($this->db->query_select_value_if_there('groups', 'securitylevel', ['groupid' => $usergroup]) >= 2) {
                return true;
            }
        }
        return false;
    }

    /**
     * Find if the specified member ID is marked as a super admin or not.
     *
     * @param  MEMBER $member_id The member ID
     * @return boolean Whether the member is a super admin
     */
    protected function _is_super_admin(int $member_id) : bool
    {
        $rows = $this->db->query_select('user2groups', ['groupid'], ['userid' => $member_id]);
        foreach ($rows as $g) {
            $usergroup = $g['groupid'];
            if ($this->db->query_select_value_if_there('groups', 'securitylevel', ['groupid' => $usergroup]) >= 3) {
                return true;
            }
        }
        return false;
    }

    /**
     * Get the IDs of the admin usergroups.
     *
     * @return array The admin usergroup IDs
     */
    protected function _get_super_admin_groups() : array
    {
        return collapse_1d_complexity('groupid', $this->db->query('SELECT groupid FROM ' . $this->db->get_table_prefix() . 'groups WHERE securitylevel>=4'));
    }

    /**
     * Get the IDs of the moderator usergroups.
     * It should not be assumed that a member only has one usergroup - this depends upon the forum the driver works for. It also does not take the staff site filter into account.
     *
     * @return array The moderator usergroup IDs
     */
    protected function _get_moderator_groups() : array
    {
        return collapse_1d_complexity('groupid', $this->db->query('groups', ['groupid'], ['securitylevel' => 3]));
    }

    /**
     * Get the forum usergroup list.
     *
     * @return array The usergroup list
     */
    protected function _get_usergroup_list() : array
    {
        return collapse_2d_complexity('groupid', 'title', $this->db->query_select('groups', ['groupid', 'title']));
    }

    /**
     * Get the forum usergroup relating to the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @return array The array of forum usergroups
     */
    protected function _get_members_groups(int $member_id) : array
    {
        if ($member_id == $this->get_guest_id()) {
            return [$this->get_member_row_field($member_id, 'groupid')];
        }

        $groups = $this->db->query_select('user2groups', ['groupid'], ['userid' => $member_id]);
        $out = [];
        foreach ($groups as $group) {
            $out[] = $group['groupid'];
        }
        $p = $this->get_member_row_field($member_id, 'groupid');
        if (!in_array($p, $out)) {
            $out[] = $p;
        }

        return $out;
    }
}
