<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_forum_drivers
 */

/**
 * Forum driver class.
 *
 * @package core_forum_drivers
 */
class Forum_driver_ipb3 extends Forum_driver_base
{
    /**
     * Check the connected DB is valid for this forum driver.
     *
     * @return boolean Whether it is valid
     */
    public function check_db() : bool
    {
        $test = $this->db->query('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'groups', null, 0, true); // Suppress errors as we're checking to see if the table is there
        return $test !== null;
    }

    /**
     * Get the rows for the top given number of posters on the forum.
     *
     * @param  integer $limit The limit to the number of top posters to fetch
     * @return array The rows for the given number of top posters in the forum
     */
    public function get_top_posters(int $limit) : array
    {
        return $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'members WHERE id<>' . strval($this->get_guest_id()) . ' ORDER BY posts DESC', $limit);
    }

    /**
     * Attempt to to find the member's language from their forum profile. It converts between language-identifiers using a map (lang/map.ini).
     *
     * @param  MEMBER $member_id The member who's language needs to be fetched
     * @return ?LANGUAGE_NAME The member's language (null: unknown)
     */
    public function get_lang(int $member_id) : ?string
    {
        $lang = $this->get_member_row_field($member_id, 'language');
        if (!is_string($lang)) {
            return null;
        }
        return $lang;
    }

    /**
     * Escape a value for HTML embedding, IPB style.
     *
     * @param  string $val The value to escape
     * @return string The escaped value
     */
    public function ipb_escape(string $val) : string
    {
        $val = str_replace('&#032;', '', $val);
        $val = str_replace('&', '&amp;', $val);
        $val = str_replace('<!--', '&#60;&#33;--', $val);
        $val = str_replace('-->', '--&#62;', $val);
        $val = preg_replace('/<script/i', '&#60;script', $val);
        $val = str_replace('>', '&gt;', $val);
        $val = str_replace('<', '&lt;', $val);
        $val = str_replace('\"', '&quot;', $val);
        $val = preg_replace("/\n/", '<br>', $val);
        $val = preg_replace('/\\$/', '&#036;', $val);
        $val = preg_replace('/\r/', '', $val);
        $val = str_replace('!', '&#33;', $val);
        $val = str_replace('\'', '&#39;', $val);
        $val = preg_replace('/\\\(?!&amp;#|\?#)/', '&#092;', $val);

        return $val;
    }

    /**
     * preg callback for removing hex entities.
     *
     * @param  array $matches Matches
     * @return string Replacement
     */
    public function unentity_1(array $matches) : string
    {
        $x = hexdec($matches[1]);
        if ($x >= 128) {
            return '?';
        }
        return chr($x);
    }

    /**
     * preg callback for removing decimal entities.
     *
     * @param  array $matches Matches
     * @return string Replacement
     */
    public function unentity_2(array $matches) : string
    {
        $x = intval($matches[1]);
        if ($x >= 128) {
            return '?';
        }
        return chr($x);
    }

    /**
     * Unescape from IPB escaping.
     *
     * @param  string $val The value to unescape
     * @return string The unescaped value
     */
    public function ipb_unescape(string $val) : string
    {
        $val = @html_entity_decode($val, ENT_QUOTES);

        $val = preg_replace_callback('/&#x([0-9a-f]+);/i', [$this, 'unentity_1'], $val);
        $val = preg_replace_callback('/&#([0-9]+);/', [$this, 'unentity_2'], $val);

        return $val;
    }

    /**
     * Find the member ID of the forum guest member.
     *
     * @return MEMBER The member ID of the forum guest member
     */
    public function get_guest_id() : int
    {
        return 0;
    }

    /**
     * Get the forums' table prefix for the database.
     *
     * @return string The forum database table prefix
     */
    public function get_drivered_table_prefix() : string
    {
        global $SITE_INFO;
        return array_key_exists('ipb_table_prefix', $SITE_INFO) ? $SITE_INFO['ipb_table_prefix'] : 'ibf_';
    }

    /**
     * Get an array of attributes to take in from the installer. Almost all forums require a table prefix, which the requirement there-of is defined through this function.
     * The attributes have 4 values in an array:
     * - name, the name of the attribute for _config.php
     * - default, the default value (perhaps obtained through autodetection from forum config)
     * - description, a textual description of the attributes
     * - title, a textual title of the attribute
     *
     * @return array The attributes for the forum
     */
    public function install_specifics() : array
    {
        global $PROBED_FORUM_CONFIG;
        $a = [];
        $a['name'] = 'ipb_table_prefix';
        $a['default'] = array_key_exists('sql_tbl_prefix', $PROBED_FORUM_CONFIG) ? $PROBED_FORUM_CONFIG['sql_tbl_prefix'] : 'ibf_';
        $a['description'] = do_lang('MOST_DEFAULT');
        $a['title'] = 'IPB ' . do_lang('TABLE_PREFIX');
        return [$a];
    }

    /**
     * Get an emoticon chooser template.
     *
     * @param  string $field_name The ID of the form field the emoticon chooser adds to
     * @return Tempcode The emoticon chooser template
     */
    public function get_emoticon_chooser(string $field_name = 'post') : object
    {
        require_code('comcode_compiler');
        $emoticons = $this->db->query_select('emoticons', ['*'], ['clickable' => 1]);
        $em = new Tempcode();
        foreach ($emoticons as $emo) {
            $code = $this->ipb_unescape($emo['typed']);
            $em->attach(do_template('EMOTICON_CLICK_CODE', ['_GUID' => '0d84b3bc399b53c6dda24ae6369e641d', 'FIELD_NAME' => $field_name, 'CODE' => $code, 'IMAGE' => apply_emoticons($code)]));
        }

        return $em;
    }

    /**
     * Pin a topic.
     *
     * @param  AUTO_LINK $topic_id The topic ID
     * @param  boolean $pin True: pin it, False: unpin it
     */
    public function pin_topic(int $topic_id, bool $pin = true)
    {
        $this->db->query_update('topics', ['pinned' => $pin ? 1 : 0], ['tid' => $topic_id], '', 1);
    }

    /**
     * From a member row, get the member's last visit date.
     *
     * @param  array $r The profile-row
     * @return TIME The last visit date
     */
    public function mrow_lastvisit(array $r) : int
    {
        return $r['last_visit'];
    }

    /**
     * From a member row, get the member's e-mail address.
     *
     * @param  array $r The profile-row
     * @return SHORT_TEXT The member e-mail address
     */
    public function mrow_email_address(array $r) : string
    {
        return $r['email'];
    }

    /**
     * Get a URL to the specified member's profile.
     *
     * @param  MEMBER $member_id The member ID
     * @return URLPATH The URL to the member profile
     */
    protected function _member_profile_url(int $member_id) : string
    {
        return get_forum_base_url() . '/index.php?showuser=' . strval($member_id);
    }

    /**
     * Get a URL to the specified forum.
     *
     * @param  integer $forum_id The forum ID
     * @return URLPATH The URL to the specified forum
     */
    protected function _forum_url(int $forum_id) : string
    {
        return get_forum_base_url() . '/index.php?showforum=' . strval($forum_id);
    }

    /**
     * Get the forum ID from a forum name. Numeric forum names are considered to be usable as IDs.
     *
     * @param  SHORT_TEXT $forum_name The forum name
     * @return ?integer The forum ID (null: not found)
     */
    public function forum_id_from_name(string $forum_name) : ?int
    {
        return is_numeric($forum_name) ? intval($forum_name) : $this->db->query_select_value_if_there('forums', 'id', ['name' => $this->ipb_escape($forum_name)]);
    }

    /**
     * Get the topic ID from a topic identifier in the specified forum. It is used by comment topics, which means that the unique-topic-name assumption holds valid.
     *
     * @param  string $forum The forum name / ID
     * @param  SHORT_TEXT $topic_identifier The topic identifier
     * @return ?integer The topic ID (null: not found)
     */
    public function find_topic_id_for_topic_identifier(string $forum, string $topic_identifier) : ?int
    {
        if (is_integer($forum)) {
            $forum_id = intval($forum);
        } else {
            $forum_id = $this->forum_id_from_name($forum);
        }
        $query = 'SELECT tid FROM ' . $this->db->get_table_prefix() . 'topics WHERE forum_id=' . strval($forum_id);
        $query .= ' AND (' . db_string_equal_to('description', $topic_identifier) . ' OR description LIKE \'' . db_encode_like('%: #' . $topic_identifier) . '\')';

        return $this->db->query_value_if_there($query);
    }

    /**
     * Get a URL to the specified topic ID. Most forums don't require the second parameter, but some do, so it is required in the interface.
     *
     * @param  integer $topic_id The topic ID
     * @param  string $forum The forum ID
     * @return URLPATH The URL to the topic
     */
    public function topic_url(int $topic_id, string $forum) : string
    {
        return get_forum_base_url() . '/index.php?showtopic=' . strval($topic_id) . '&view=getnewpost';
    }

    /**
     * Get a URL to the specified post ID.
     *
     * @param  integer $post_id The post ID
     * @param  ?mixed $forum The forum ID (null: private topic)
     * @return URLPATH The URL to the post
     */
    public function post_url(int $post_id, $forum) : string
    {
        $topic_id = $this->db->query_select_value_if_there('posts', 'topic_id', ['pid' => $post_id]);
        if ($topic_id === null) {
            return '?';
        }
        $url = get_forum_base_url() . '/index.php?act=findpost&pid=' . strval($post_id);
        return $url;
    }

    /**
     * Get rows of members before the given one.
     * It cannot be assumed there are no gaps in member IDs, as members may be deleted.
     *
     * @param  MEMBER $member_id The member ID to paginate back from
     * @param  integer $total Number of members to retrieve
     * @return array Member rows
     */
    public function get_previous_members(int $member_id, int $total = 1) : array
    {
        $sql = 'SELECT id FROM ' . $this->db->get_table_prefix() . 'members WHERE id<>0';
        $sql .= ' AND id<' . strval($member_id);
        $sql .= ' ORDER BY id DESC';
        $rows = $this->db->query($sql, $total);
        return $rows;
    }

    /**
     * Get rows of members after the given one.
     * It cannot be assumed there are no gaps in member IDs, as members may be deleted.
     *
     * @param  ?MEMBER $member_id The member ID to increment (null: find the very first members)
     * @param  integer $total Number of members to retrieve
     * @return array Member rows
     */
    public function get_next_members(?int $member_id, int $total = 1) : array
    {
        $sql = 'SELECT id FROM ' . $this->db->get_table_prefix() . 'members WHERE id<>0';
        if ($member_id !== null) {
            $sql .= ' AND id>' . strval($member_id);
        }
        $sql .= ' ORDER BY id DESC';
        $rows = $this->db->query($sql, $total);
        return $rows;
    }

    /**
     * Try to find a member with the given IP address.
     *
     * @param  IP $ip The IP address
     * @return array The distinct rows found
     */
    public function probe_ip(string $ip) : array
    {
        $a = $this->db->query_select('members', ['DISTINCT id'], ['ip_address' => $ip]);
        $b = $this->db->query_select('posts', ['DISTINCT author_id AS id'], ['ip_address' => $ip]);
        return array_merge($a, $b);
    }

    /**
     * Get the e-mail address for the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @return SHORT_TEXT The e-mail address
     */
    protected function _get_member_email_address(int $member_id) : string
    {
        return $this->get_member_row_field($member_id, 'email');
    }

    /**
     * Get the photo URL for the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @param  boolean $full Get full photo
     * @return URLPATH The URL (blank: none)
     */
    public function get_member_photo_url(int $member_id, bool $full = false) : string
    {
        $pic = $this->db->query_select_value_if_there('member_extra', 'photo_location', ['id' => $member_id]);
        if ($pic === null) {
            $pic = '';
        } elseif ((url_is_local($pic)) && ($pic != '')) {
            $pic = get_forum_base_url() . '/uploads/' . $pic;
        }

        return $pic;
    }

    /**
     * Find if this member may have e-mails sent to them.
     *
     * @param  MEMBER $member_id The member ID
     * @return boolean Whether the member may have e-mails sent to them
     */
    public function get_member_email_allowed(int $member_id) : bool
    {
        $v = $this->get_member_row_field($member_id, 'email_pm');
        if ($v == 1) {
            return true;
        }
        return false;
    }

    /**
     * Get the timestamp of a member's join date.
     *
     * @param  MEMBER $member_id The member ID
     * @return TIME The timestamp
     */
    public function get_member_join_timestamp(int $member_id) : int
    {
        return $this->get_member_row_field($member_id, 'joined');
    }

    /**
     * Get the given member's post count.
     *
     * @param  MEMBER $member_id The member ID
     * @return integer The post count
     */
    public function get_post_count(int $member_id) : int
    {
        $c = $this->get_member_row_field($member_id, 'posts');
        if ($c === null) {
            $c = 0;
        }
        return $c;
    }

    /**
     * Get the given member's topic count.
     *
     * @param  MEMBER $member_id The member ID
     * @return integer The topic count
     */
    public function get_topic_count(int $member_id) : int
    {
        return $this->db->query_select_value('topics', 'COUNT(*)', ['starter_id' => $member_id]);
    }

    /**
     * Get the number of members currently online on the forums.
     *
     * @return integer The number of members
     */
    public function get_num_users_forums() : int
    {
        return $this->db->query_value_if_there('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'sessions WHERE running_time>' . strval(time() - 60 * intval(get_option('users_online_time'))));
    }

    /**
     * Get the number of new forum posts.
     *
     * @return integer The number of posts
     */
    protected function _get_num_new_forum_posts() : int
    {
        return $this->db->query_value_if_there('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'posts WHERE post_date>' . strval(time() - 60 * 60 * 24));
    }

    /**
     * Get the IDs of the admin usergroups.
     *
     * @return array The admin usergroup IDs
     */
    protected function _get_super_admin_groups() : array
    {
        return collapse_1d_complexity('g_id', $this->db->query_select('groups', ['g_id'], ['g_access_cp' => 1]));
    }

    /**
     * Get the IDs of the moderator usergroups.
     * It should not be assumed that a member only has one usergroup - this depends upon the forum the driver works for. It also does not take the staff site filter into account.
     *
     * @return array The moderator usergroup IDs
     */
    protected function _get_moderator_groups() : array
    {
        return collapse_1d_complexity('g_id', $this->db->query_select('groups', ['g_id'], ['g_access_cp' => 0, 'g_is_supmod' => 1]));
    }

    /**
     * Get the forum usergroup list.
     *
     * @return array The usergroup list
     */
    protected function _get_usergroup_list() : array
    {
        $results = $this->db->query_select('groups', ['g_id', 'g_title']);
        $out = [];
        foreach ($results as $g) {
            $out[$g['g_id']] = $this->ipb_unescape($g['g_title']);
        }
        return $out;
    }

    /**
     * Get a first known IP address of the given member.
     *
     * @param  MEMBER $member_id The member ID
     * @return IP The IP address
     */
    public function get_member_ip(int $member_id) : string
    {
        return $this->get_member_row_field($member_id, 'ip_address');
    }

    /**
     * Gets a named field of a member row from the database.
     *
     * @param  MEMBER $member_id The member ID
     * @param  string $field The field identifier
     * @return mixed The field
     */
    public function get_member_row_field(int $member_id, string $field)
    {
        $row = $this->get_member_row($member_id);
        return ($row === null) ? null : (array_key_exists($field, $row) ? $row[$field] : null);
    }

    /**
     * From a member row, get the member's name.
     *
     * @param  array $r The profile-row
     * @return string The username
     */
    public function mrow_username(array $r) : string
    {
        return $this->ipb_unescape($r['name']);
    }

    /**
     * Get the name relating to the specified member ID.
     * If this returns null, then the member has been deleted. Always take potential null output into account.
     *
     * @param  MEMBER $member_id The member ID
     * @return ?SHORT_TEXT The username (null: member deleted)
     */
    protected function _get_username(int $member_id) : ?string
    {
        return $this->ipb_unescape($this->get_member_row_field($member_id, 'name'));
    }

    /**
     * Get the display name of a username.
     * If no display name generator is configured, this will be the same as the username.
     *
     * @param  ID_TEXT $username The username
     * @return SHORT_TEXT The display name
     */
    public function get_displayname(string $username) : string
    {
        return $this->db->query_select_value_if_there('members', 'members_display_name', ['name' => $this->ipb_escape($username)]);
    }

    /**
     * From a member row, get the member's primary usergroup.
     *
     * @param  array $r The profile-row
     * @return GROUP The member's primary usergroup
     */
    public function mrow_primary_group(array $r) : int
    {
        return $r['member_group_id'];
    }

    /**
     * From a member row, get the member's member ID.
     *
     * @param  array $r The profile-row
     * @return MEMBER The member ID
     */
    public function mrow_member_id(array $r) : int
    {
        return $r['member_id'];
    }

    /**
     * Find all members with a name matching the given SQL LIKE string.
     *
     * @param  string $pattern The pattern
     * @param  ?integer $limit Maximum number to return (limits to the most recent active) (null: no limit)
     * @return ?array The array of matched members (null: none found)
     */
    public function get_matching_members(string $pattern, ?int $limit = null) : ?array
    {
        $query = 'SELECT * FROM ' . $this->db->get_table_prefix() . 'members WHERE name LIKE \'' . db_encode_like($this->ipb_escape($pattern)) . '\' AND member_id<>' . strval($this->get_guest_id()) . ' ORDER BY last_post DESC';
        $rows = $this->db->query($query, $limit);
        sort_maps_by($rows, 'name');
        return $rows;
    }

    /**
     * Get a member ID from the given member's username.
     *
     * @param  SHORT_TEXT $username The username
     * @return ?MEMBER The member ID (null: not found)
     */
    public function get_member_from_username(string $username) : ?int
    {
        if ($username == do_lang('GUEST')) {
            return $this->get_guest_id();
        }

        return $this->db->query_select_value_if_there('members', 'member_id', ['name' => $this->ipb_escape($username)]);
    }

    /**
     * Get a member ID from the given member's e-mail address.
     *
     * @param  SHORT_TEXT $email_address The member e-mail address
     * @return ?MEMBER The member ID (null: not found)
     */
    public function get_member_from_email_address(string $email_address) : ?int
    {
        $results = $this->db->query_select('members', ['member_id', 'member_banned', 'joined'], ['email' => $email_address], 'ORDER BY member_banned,joined DESC', 1);
        return array_key_exists(0, $results) ? $results[0]['member_id'] : null;
    }

    /**
     * Get a list of custom BBcode tags.
     *
     * @return array The list of tags (each list entry being a map, containing various standard named parameters)
     */
    public function get_custom_bbcode() : array
    {
        $tags = $this->db->query_select('custom_bbcode', ['bbcode_replace', 'bbcode_tag']);
        $ret = [];
        foreach ($tags as $tag) {
            $ret[] = ['tag' => $tag['bbcode_tag'], 'replace' => $tag['bbcode_replace'], 'block_tag' => 0, 'textual_tag' => 0, 'dangerous_tag' => 0, 'parameters' => ''];
        }
        return $ret;
    }

    /**
     * Add the specified custom field to the forum (some forums implemented this using proper Custom Profile Fields, others through adding a new field).
     *
     * @param  string $name The name of the new custom field
     * @param  integer $length The length of the new custom field (ignored for Conversr, $type used instead)
     * @param  BINARY $locked Whether the field is locked
     * @param  BINARY $viewable Whether the field is for viewing
     * @param  BINARY $settable Whether the field is for setting
     * @param  BINARY $required Whether the field is required
     * @param  string $description Description
     * @param  string $type The field type (it's the same as the Composr field types, although we only expect forum drivers to specifically support short_text/long_text/integer/float and for the rest to be mapped to long_text)
     * @param  BINARY $encrypted Whether the field is encrypted
     * @param  ?string $default Default field value (null: standard for field type)
     * @param  SHORT_TEXT $options Field options
     * @param  BINARY $include_in_main_search Whether to include in main keyword search
     * @param  BINARY $allow_template_search Whether to allow template search
     * @param  ID_TEXT $icon An icon to show the CPF with on the member profiles
     * @param  ID_TEXT $section A section to show with on the member-links part of member profiles
     * @param  LONG_TEXT $tempcode This is Tempcode that is used for displaying the field. See the DESCRIPTION_CPF_CODE language string.
     * @param  ID_TEXT $autofill_type Autofill field name from https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-field
     * @param  ID_TEXT $autofill_hint Autofill hint: '' or 'shipping' or 'billing'
     * @return boolean Whether the custom field was created successfully
     */
    public function install_create_custom_field(string $name, int $length, int $locked = 1, int $viewable = 0, int $settable = 0, int $required = 0, string $description = '', string $type = 'long_text', int $encrypted = 0, ?string $default = null, string $options = '', int $include_in_main_search = 0, int $allow_template_search = 0, string $icon = '', string $section = '', string $tempcode = '', string $autofill_type = '', string $autofill_hint = '') : bool
    {
        $name = 'cms_' . $name;
        $id = $this->db->query_select_value_if_there('pfields_data', 'pf_id', ['pf_title' => $name]);
        if ($id === null) {
            $id = $this->db->query_insert('pfields_data', ['pf_group_id' => 1, 'pf_input_format' => '', 'pf_topic_format' => '{title} : {content}', 'pf_content' => '', 'pf_title' => $name, 'pf_type' => 'text', 'pf_member_hide' => 1 - $viewable, 'pf_max_input' => $length, 'pf_member_edit' => $settable, 'pf_position' => 0], true);
            list($db_type, $db_default) = $this->remap_composr_field_type_to_db_type($type, $default);
            $query = $this->db->driver->add_table_field__sql($this->db->get_table_prefix() . 'pfields_content', 'field_' . strval($id), $db_type, $db_default);
            $this->db->query($query, null, 0, true); // Suppress errors in case field already exists
        }
        return $id !== null;
    }

    /**
     * Edit the specified custom field in the forum (some forums implemented this using proper Custom Profile Fields, others through adding a new field).
     *
     * @param  string $old_name The name of the existing custom field to edit
     * @param  string $name The new name of the custom field
     * @param  integer $length The length of the custom field (ignored for Conversr, $type used instead)
     * @param  BINARY $locked Whether the field is locked
     * @param  BINARY $viewable Whether the field is for viewing
     * @param  BINARY $settable Whether the field is for setting
     * @param  BINARY $required Whether the field is required
     * @param  string $description Description
     * @param  string $type The field type (it's the same as the Composr field types, although we only expect forum drivers to specifically support short_text/long_text/integer/float and for the rest to be mapped to long_text)
     * @param  BINARY $encrypted Whether the field is encrypted
     * @param  ?string $default Default field value (null: standard for field type)
     * @param  SHORT_TEXT $options Field options
     * @param  BINARY $include_in_main_search Whether to include in main keyword search
     * @param  BINARY $allow_template_search Whether to allow template search
     * @param  ID_TEXT $icon An icon to show the CPF with on the member profiles
     * @param  ID_TEXT $section A section to show with on the member-links part of member profiles
     * @param  LONG_TEXT $tempcode This is Tempcode that is used for displaying the field. See the DESCRIPTION_CPF_CODE language string.
     * @param  ID_TEXT $autofill_type Autofill field name from https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill-field
     * @param  ID_TEXT $autofill_hint Autofill hint: '' or 'shipping' or 'billing'
     * @return boolean Whether the custom field was edited successfully
     */
    public function install_edit_custom_field(string $old_name, string $name, int $length, int $locked = 1, int $viewable = 0, int $settable = 0, int $required = 0, string $description = '', string $type = 'long_text', int $encrypted = 0, ?string $default = null, string $options = '', int $include_in_main_search = 0, int $allow_template_search = 0, string $icon = '', string $section = '', string $tempcode = '', string $autofill_type = '', string $autofill_hint = '') : bool
    {
        $old_name = 'cms_' . $old_name;
        $name = 'cms_' . $name;
        $id = $this->db->query_select_value_if_there('pfields_data', 'pf_id', ['pf_title' => $old_name]);
        if ($id === null) {
            return false;
        }

        $this->db->query_update('pfields_data', ['pf_group_id' => 1, 'pf_input_format' => '', 'pf_topic_format' => '{title} : {content}', 'pf_content' => '', 'pf_title' => $name, 'pf_type' => 'text', 'pf_member_hide' => 1 - $viewable, 'pf_max_input' => $length, 'pf_member_edit' => $settable, 'pf_position' => 0], ['id' => $id], '', 1);
        return true;
    }

    /**
     * Set a Custom Profile Field's value, if the custom field exists. Only works on specially-named (titled) fields.
     *
     * @param  MEMBER $member_id The member ID
     * @param  string $field The field name (e.g. "firstname" for the CPF with a title of "cms_firstname")
     * @param  string $value The value
     */
    public function set_custom_field(int $member_id, string $field, string $value)
    {
        $id = $this->db->query_select_value_if_there('pfields_data', 'pf_id', ['pf_title' => 'cms_' . $field]);
        if ($id === null) {
            return;
        }
        $old = $this->db->query_select_value_if_there('pfields_content', 'member_id', ['member_id' => $member_id]);
        if ($old === null) {
            $this->db->query_insert('pfields_content', ['member_id' => $member_id]);
        }
        $this->db->query_update('pfields_content', ['field_' . strval($id) => $value], ['member_id' => $member_id], '', 1);
    }

    /**
     * Get Custom Profile Fields values for all 'cms_' prefixed keys.
     *
     * @param  MEMBER $member_id The member ID
     * @return ?array A map of the Custom Profile Fields, key_suffix=>value (null: no fields)
     */
    public function get_custom_fields(int $member_id) : ?array
    {
        $rows = $this->db->query('SELECT pf_id,pf_title FROM ' . $this->db->get_table_prefix() . 'pfields_data WHERE pf_title LIKE \'' . db_encode_like('cms\_%') . '\'');
        $values = $this->db->query_select('pfields_content', ['*'], ['member_id' => $member_id], '', 1);
        if (!array_key_exists(0, $values)) {
            return null;
        }

        $out = [];
        foreach ($rows as $row) {
            $title = substr($row['pf_title'], 4);
            $out[$title] = $values[0]['field_' . strval($row['pf_id'])];
        }
        return $out;
    }

    /**
     * Searches for forum auto-config at this path.
     *
     * @param  PATH $path The path in which to search
     * @return boolean Whether the forum auto-config could be found
     */
    public function install_test_load_from(string $path) : bool
    {
        global $PROBED_FORUM_CONFIG;
        if (@file_exists($path . '/conf_global.php')) {
            if (!@file_exists($path . '/conf_shared.php')) { // We can't work with ipb->site bound forums
                global $INFO;
                @include($path . '/conf_global.php');
                $PROBED_FORUM_CONFIG['sql_host'] = $INFO['sql_host'];
                $PROBED_FORUM_CONFIG['sql_database'] = $INFO['sql_database'];
                $PROBED_FORUM_CONFIG['sql_user'] = $INFO['sql_user'];
                $PROBED_FORUM_CONFIG['sql_pass_exists'] = ($PROBED_FORUM_CONFIG['sql_pass'] != '');
                $PROBED_FORUM_CONFIG['sql_tbl_prefix'] = $INFO['sql_tbl_prefix'];
                $PROBED_FORUM_CONFIG['board_url'] = $INFO['board_url'];
                $PROBED_FORUM_CONFIG['cookie_member_id'] = 'member_id';
                $PROBED_FORUM_CONFIG['cookie_member_hash'] = 'pass_hash';
                return true;
            }
        }
        return false;
    }

    /**
     * Get an array of paths to search for config at.
     *
     * @return array The paths in which to search for the forum config
     */
    public function install_get_path_search_list() : array
    {
        return [
            'ipb3',
            'ipb',
            'ipboard',
            'forums',
            'forum',
            'boards',
            'board',
            '../forums/ipb3',
            '../forums/ipb',
            '../forums/ipboard',
            '../ipb3',
            '../ipb',
            '../ipboard',
            '../forums',
            '../forum',
            '../boards',
            '../board',
        ];
    }

    /**
     * Get the avatar URL for the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @param  boolean $fallback_support Whether fallback support should be allowed (passed by reference)
     * @return URLPATH The URL (blank: none)
     */
    protected function _get_member_avatar_url(int $member_id, bool &$fallback_support) : string
    {
        $member_extra_rows = $this->db->query_select('profile_portal', ['avatar_location', 'avatar_type'], ['pp_member_id' => $member_id]);
        if (!array_key_exists(0, $member_extra_rows)) {
            return '';
        }

        $avatar = $member_extra_rows[0]['avatar_location'];
        if ($avatar === null) {
            return '';
        }
        if (substr($avatar, 0, 7) == 'upload:') {
            $avatar = substr($avatar, 7);
        }
        if ($avatar == 'noavatar') {
            $avatar = '';
        }
        if ($avatar == '') {
            return '';
        }
        switch ($member_extra_rows[0]['avatar_type']) {
            case 'gravatar':
                $gravatar_img = md5(cms_strtolower_ascii(trim($avatar)));
                $avatar = 'http://www.gravatar.com/avatar/' . $gravatar_img;
                break;
            case 'local':
                $avatar = get_forum_base_url() . '/style_avatars/' . $avatar;
                break;
            case 'upload':
                $avatar = get_forum_base_url() . '/uploads/' . $avatar;
                break;
            default:
                if (url_is_local($avatar)) {
                    $avatar = get_forum_base_url() . '/uploads/' . $avatar;
                }
                break;
        }

        return $avatar;
    }

    /**
     * Makes a post in the specified forum, in the specified topic according to the given specifications. If the topic doesn't exist, it is created along with a spacer-post.
     * Spacer posts exist in order to allow staff to delete the first true post in a topic. Without spacers, this would not be possible with most forum systems. They also serve to provide meta information on the topic that cannot be encoded in the title (such as a link to the content being commented upon).
     *
     * @param  SHORT_TEXT $forum_name The forum name
     * @param  SHORT_TEXT $topic_identifier The topic identifier (usually <content-type>_<content-id>)
     * @param  MEMBER $member_id The member ID
     * @param  LONG_TEXT $post_title The post title
     * @param  LONG_TEXT $_post The post content in Comcode format
     * @param  string $content_title The topic title; must be same as content title if this is for a comment topic
     * @param  string $topic_identifier_encapsulation_prefix This is put together with the topic identifier to make a more-human-readable topic title or topic description (hopefully the latter and a $content_title title, but only if the forum supports descriptions)
     * @param  ?URLPATH $content_url URL to the content (null: do not make spacer post)
     * @param  ?TIME $time The post time (null: use current time)
     * @param  ?IP $ip The post IP address (null: use current members IP address)
     * @param  ?BINARY $validated Whether the post is validated (null: unknown, find whether it needs to be marked non-validated initially). This only works with the Conversr driver.
     * @param  ?BINARY $topic_validated Whether the topic is validated (null: unknown, find whether it needs to be marked non-validated initially). This only works with the Conversr driver.
     * @param  boolean $skip_post_checks Whether to skip post checks
     * @param  SHORT_TEXT $poster_name_if_guest The name of the poster
     * @param  ?AUTO_LINK $parent_id ID of post being replied to (null: N/A)
     * @param  boolean $staff_only Whether the reply is only visible to staff
     * @return array Topic ID (may be null), and whether a hidden post has been made
     */
    public function make_post_forum_topic(string $forum_name, string $topic_identifier, int $member_id, string $post_title, string $_post, string $content_title, string $topic_identifier_encapsulation_prefix, ?string $content_url = null, ?int $time = null, ?string $ip = null, ?int $validated = null, ?int $topic_validated = 1, bool $skip_post_checks = false, string $poster_name_if_guest = '', ?int $parent_id = null, bool $staff_only = false) : array
    {
        $__post = comcode_to_tempcode($_post);
        $post = $__post->evaluate();

        if ($time === null) {
            $time = time();
        }
        if ($ip === null) {
            $ip = get_ip_address();
        }
        $forum_id = $this->forum_id_from_name($forum_name);
        if ($forum_id === null) {
            warn_exit(do_lang_tempcode('MISSING_FORUM', escape_html($forum_name)), false, true);
        }
        $username = $this->get_username($member_id);

        $topic_id = $this->find_topic_id_for_topic_identifier($forum_name, $topic_identifier);

        $is_new = ($topic_id === null);
        if ($is_new) {
            $topic_id = $this->db->query_insert('topics', ['moved_to' => 0, 'pinned' => 0, 'views' => 0, 'description' => $topic_identifier_encapsulation_prefix . ': #' . $topic_identifier, 'title' => $this->ipb_escape($content_title), 'state' => 'open', 'posts' => 1, 'starter_id' => $member_id, 'start_date' => $time, 'icon_id' => 0, 'starter_name' => $this->ipb_escape($username), 'poll_state' => 0, 'last_vote' => 0, 'forum_id' => $forum_id, 'approved' => 1, 'author_mode' => 1], true);
            $home_link = '[url]' . $content_url . '[/url]';
            $this->db->query_insert('posts', ['author_id' => $member_id, 'author_name' => $this->ipb_escape($username), 'ip_address' => '127.0.0.1', 'post_date' => $time, 'icon_id' => 0, 'post' => do_lang('SPACER_POST', $home_link, '', '', get_site_default_lang()), 'queued' => 0, 'topic_id' => $topic_id, 'new_topic' => 1, 'post_htmlstate' => 1, 'post_title' => $post_title, 'post_key' => md5(microtime(false))]);
            $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'forums SET topics=(topics+1) WHERE id=' . strval($forum_id), 1);
            $first_post = true;
        } else {
            $first_post = false;
        }

        $GLOBALS['LAST_TOPIC_ID'] = $topic_id;
        $GLOBALS['LAST_TOPIC_IS_NEW'] = $is_new;

        if ($post == '') {
            return [$topic_id, false];
        }

        $post_id = $this->db->query_insert('posts', ['author_id' => $member_id, 'author_name' => $this->ipb_escape($username), 'ip_address' => $ip, 'post_date' => $time, 'icon_id' => 0, 'post' => $post, 'queued' => 0, 'topic_id' => $topic_id, 'new_topic' => 1, 'post_htmlstate' => 1, 'post_title' => $post_title, 'post_key' => md5(microtime(false))], true);
        $test = $this->db->query_select('forums', ['*'], [], '', 1);
        if (array_key_exists('newest_title', $test[0])) {
            $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'forums SET posts=(posts+1), last_post=' . strval($time) . ', last_poster_id=' . strval($member_id) . ', last_poster_name=\'' . db_escape_string($this->ipb_escape($username)) . '\', newest_id=' . strval($topic_id) . ', newest_title=\'' . db_escape_string($this->ipb_escape($post_title)) . '\', last_id=' . strval($topic_id) . ', last_title=\'' . db_escape_string($this->ipb_escape($post_title)) . '\' WHERE id=' . strval($forum_id), 1);
        } else {
            $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'forums SET posts=(posts+1), last_post=' . strval($time) . ', last_poster_id=' . strval($member_id) . ', last_poster_name=\'' . db_escape_string($this->ipb_escape($username)) . '\', last_id=' . strval($topic_id) . ', last_title=\'' . db_escape_string($this->ipb_escape($post_title)) . '\' WHERE id=' . strval($forum_id), 1);
        }
        if ($first_post) {
            $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'topics SET topic_firstpost=' . strval($post_id) . ', posts=(posts+1), last_post=' . strval($time) . ', last_poster_id=' . strval($member_id) . ', last_poster_name=\'' . db_escape_string($this->ipb_escape($username)) . '\' WHERE tid=' . strval($topic_id), 1);
        } else {
            $this->db->query('UPDATE ' . $this->db->get_table_prefix() . 'topics SET posts=(posts+1), last_post=' . strval($time) . ', last_poster_id=' . strval($member_id) . ', last_poster_name=\'' . db_escape_string($this->ipb_escape($username)) . '\' WHERE tid=' . strval($topic_id), 1);
        }

        return [$topic_id, false];
    }

    /**
     * Get an array of maps for the topic in the given forum.
     *
     * @param  integer $topic_id The topic ID
     * @param  ?integer $count The comment count will be returned here by reference (null: do not gather it)
     * @param  ?integer $max Maximum comments to returned (null: no limit)
     * @param  integer $start Comment to start at
     * @param  boolean $mark_read Whether to mark the topic read (ignored for this forum driver)
     * @param  boolean $reverse Whether to show in reverse
     * @return mixed The array of maps (Each map is: title, message, member, date) (-1 for no such forum, -2 for no such topic)
     */
    public function get_forum_topic_posts(int $topic_id, ?int &$count = null, ?int $max = 100, int $start = 0, bool $mark_read = true, bool $reverse = false)
    {
        if ($topic_id === null) {
            return (-2);
        }
        $order = $reverse ? 'post_date DESC' : 'post_date';
        $rows = $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'posts WHERE topic_id=' . strval($topic_id) . ' AND post NOT LIKE \'' . db_encode_like(substr(do_lang('SPACER_POST', '', '', '', get_site_default_lang()), 0, 20) . '%') . '\' ORDER BY ' . $order, $max, $start);
        if ($count !== null) {
            $count = $this->db->query_value_if_there('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'posts WHERE topic_id=' . strval($topic_id) . ' AND post NOT LIKE \'' . db_encode_like(substr(do_lang('SPACER_POST', '', '', '', get_site_default_lang()), 0, 20) . '%') . '\'');
        }
        $out = [];
        $emoticons_set_dir = $this->get_emo_dir();
        foreach ($rows as $myrow) {
            $temp = [];

            $temp['title'] = $this->ipb_unescape($myrow['post_title']);
            if ($temp['title'] === null) {
                $temp['title'] = '';
            }
            $post = preg_replace('#public/style_emoticons/<\#EMO_DIR\#>(.+?)\'#is', $emoticons_set_dir . '\\1\'', $myrow['post']);
            $temp['message'] = $post;
            $temp['member'] = $myrow['author_id'];
            $temp['date'] = $myrow['post_date'];

            $out[] = $temp;
        }

        return $out;
    }

    /**
     * Get an array of topics in the given forum. Each topic is an array with the following attributes:
     * - id, the topic ID
     * - title, the topic title
     * - lastusername, the username of the last poster
     * - lasttime, the timestamp of the last reply
     * - closed, a Boolean for whether the topic is currently closed or not
     * - firsttitle, the title of the first post
     * - firstpost, the first post (only set if $show_first_posts was true)
     *
     * @param  mixed $name The forum name or forum ID or an array of forum IDs (in such an array the KEYS are forum IDs, and the values ignored)
     * @param  integer $limit The limit
     * @param  integer $start The start position
     * @param  integer $max_rows The total rows (not a parameter: returns by reference)
     * @param  SHORT_TEXT $filter_topic_title The topic title filter (blank: no filter)
     * @param  SHORT_TEXT $filter_topic_description The topic description filter; may apply to the topic title if there is no separate description field with additional wildcarding to match what make_post_forum_topic is doing (blank: no filter)
     * @param  boolean $show_first_posts Whether to show the first posts
     * @param  string $date_key The date key to sort by
     * @set lasttime firsttime
     * @param  boolean $hot Whether to limit to hot topics
     * @param  boolean $only_open Open topics only
     * @return ?array The array of topics (null: error)
     */
    public function show_forum_topics($name, int $limit, int $start, int &$max_rows, string $filter_topic_title = '', string $filter_topic_description = '', bool $show_first_posts = false, string $date_key = 'lasttime', bool $hot = false, bool $only_open = false) : ?array
    {
        require_code('xhtml');

        // Build forum ID query
        if (is_integer($name)) { // Forum ID
            $id_list = 'forum_id=' . strval($name);
        } elseif (!is_array($name)) { // Forum name
            if (($name == '<announce>') || ($name === null)) {
                $id_list = '(forum_id IS NULL)';
            } else {
                $id = $this->forum_id_from_name($name);
                if ($id === null) {
                    return null;
                }
                $id_list = 'forum_id=' . strval($id);
            }
        } else { // Array of forum IDs
            $id_list = '';
            $id_list_2 = '';
            foreach (array_keys($name) as $id) {
                if ($id_list != '') {
                    $id_list .= ' OR ';
                }
                if (($id === null) || ($id === '')) {
                    $id_list .= '(forum_id IS NULL)';
                } else {
                    $id_list .= 'forum_id=' . strval($id);
                }
            }
            if ($id_list == '') {
                return null;
            }
        }

        $topic_filter = '';
        if ($filter_topic_title != '') {
            $topic_filter .= ' AND subject LIKE \'' . db_encode_like($this->ipb_escape($filter_topic_title)) . '\'';
        }
        if ($filter_topic_description != '') {
            $topic_filter .= ' AND description LIKE \'' . db_encode_like($this->ipb_escape($filter_topic_description)) . '\'';
        }
        if ($only_open) {
            $topic_filter .= ' AND state<>\'closed\'';
        }

        $rows = $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'topics WHERE (' . $id_list . ')' . $topic_filter . ' ORDER BY ' . (($date_key == 'lasttime') ? 'last_post' : 'start_date') . ' DESC', $limit, $start);
        $max_rows = $this->db->query_value_if_there('SELECT COUNT(*) FROM ' . $this->db->get_table_prefix() . 'topics WHERE (' . $id_list . ')' . $topic_filter);
        $emoticons_set_dir = $this->get_emo_dir();

        // Generate output
        $out = [];
        foreach ($rows as $i => $r) {
            $out[$i] = [];
            $out[$i]['id'] = $r['tid'];
            $out[$i]['num'] = $r['posts'];
            $out[$i]['title'] = $this->ipb_unescape($r['title']);
            $out[$i]['firstusername'] = $this->ipb_unescape($r['starter_name']);
            $out[$i]['lastusername'] = $this->ipb_unescape($r['last_poster_name']);
            $out[$i]['firstmemberid'] = $r['starter_id'];
            $out[$i]['lastmemberid'] = $r['last_poster_id'];
            $out[$i]['firsttime'] = $r['start_date'];
            $out[$i]['lasttime'] = $r['last_post'];
            $out[$i]['closed'] = ($r['state'] == 'closed');

            // Get non-spacer posts
            $fp_rows = $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'posts WHERE post NOT LIKE \'' . db_encode_like(do_lang('SPACER_POST', '', '', '', get_site_default_lang()) . '%') . '\' AND topic_id=' . strval($out[$i]['id']) . ' ORDER BY post_date', 1);

            // Filter topics without any posts
            if (!array_key_exists(0, $fp_rows)) {
                unset($out[$i]);
                continue;
            }

            // Determine correct title from first non-spacer post
            $out[$i]['firsttitle'] = $this->ipb_unescape($fp_rows[0]['post_title']);

            // Render first post when applicable
            if ($show_first_posts) {
                $post_id = $fp_rows[0]['pid'];
                $post = $fp_rows[0]['post'];
                if ((array_key_exists('post_htmlstate', $fp_rows[0])) && ($fp_rows[0]['post_htmlstate'] != 0)) {
                    if ($fp_rows[0]['post_htmlstate'] == 1) {
                        $post = str_replace('<br />', '', $post);
                    }
                    $post = @html_entity_decode($post, ENT_QUOTES);
                }
                $post = preg_replace('#public/style_emoticons/<\#EMO_DIR\#>(.+?)\'#is', $emoticons_set_dir . '\\1\'', $post);

                $post = str_replace("class='quotetop'", "class='comcode-quote'", $post);
                $post = str_replace("class='quotemain'", "class='comcode-quote-inner'", $post);

                // Attachments
                $attachments = $this->db->query_select('attachments', ['attach_member_id', 'attach_id', 'attach_file', 'attach_location', 'attach_thumb_location', 'attach_is_image', 'attach_filesize', 'attach_hits'], ['attach_post_key' => $fp_rows[0]['post_key']/*, 'attach_approved' => true Gone in IPB3? */]);
                foreach ($attachments as $attachment) {
                    if (($attachment['attach_thumb_location'] != '') || ($attachment['attach_is_image'] == 0)) { // Not fully inline
                        $url = get_forum_base_url() . '/index.php?act=Attach&type=post&id=' . urlencode($attachment['attach_id']);
                        if ($attachment['attach_thumb_location'] != '') {
                            $special = do_template('FORUM_ATTACHMENT_IMAGE_THUMB', [
                                '_GUID' => 'f06760e3325efd9be27e2d5c89611d43',
                                'FULL' => $url,
                                'URL' => get_forum_base_url() . '/uploads/' . $attachment['attach_thumb_location'],
                            ]);
                        } else {
                            require_code('files');
                            $special = do_template('FORUM_ATTACHMENT_LINK', [
                                '_GUID' => '344b0b127433938302118b2ca7572452',
                                'FULL' => $url,
                                'FILENAME' => $attachment['attach_file'],
                                'CLEAN_SIZE' => clean_file_size($attachment['attach_filesize']),
                                '_NUM_DOWNLOADS' => strval($attachment['attach_hits']),
                                'NUM_DOWNLOADS' => integer_format($attachment['attach_hits'], 0),
                            ]);
                        }
                    } else { // Must be an inline image
                        $special = do_template('FORUM_ATTACHMENT_IMAGE', ['_GUID' => '22f1e3e5a9e156afc53d847cabe4a754', 'URL' => get_forum_base_url() . '/uploads/' . $attachment['attach_location']]);
                    }

                    // See if we have to place it somewhere special inside the post
                    $old_post = $post;
                    $post = str_replace('[attachmentid=' . $attachment['attach_id'] . ']', $special->evaluate(), $post);
                    if ($old_post == $post) {
                        $post .= $special->evaluate();
                    }
                }

                push_lax_comcode(true);
                $end = 0;
                while (($pos = strpos($post, '[right]', $end)) !== false) {
                    $e_pos = strpos($post, '[/right]', $pos);
                    if ($e_pos === false) {
                        break;
                    }
                    $end = $e_pos + strlen('[/right]');
                    $segment = substr($post, $pos, $end - $pos);
                    $comcode = comcode_to_tempcode($segment, $r['starter_id']);
                    $post = substr($post, 0, $pos) . $comcode->evaluate() . substr($post, $end);
                }
                $out[$i]['firstpost'] = comcode_to_tempcode(xhtmlise_html($post), $r['starter_id'], false, null, null, COMCODE_IS_ALL_SEMIHTML); // Assumes HTML for posts
                pop_lax_comcode();
            }
        }
        if (!empty($out)) {
            return $out;
        }
        return null;
    }

    /**
     * Find the base URL to the emoticons.
     *
     * @return URLPATH The base URL
     */
    public function get_emo_dir() : string
    {
        static $emoticon_set_dir = null;
        if ($emoticon_set_dir === null) {
            $emoticon_set_dir = $this->db->query_select_value_if_there('skin_collections', 'set_emo_dir', ['set_image_dir' => $this->get_theme()]);
            if ($emoticon_set_dir === null) {
                $emoticon_set_dir = 'default';
            }
        }
        return get_forum_base_url() . '/public/style_emoticons/' . $emoticon_set_dir . '/';
    }

    /**
     * Get a map between emoticon codes and templates representing the HTML-image-code for this emoticon. The emoticons presented of course depend on the forum involved.
     *
     * @return array The map
     */
    public function find_emoticons() : array
    {
        if ($this->EMOTICON_CACHE !== null) {
            return $this->EMOTICON_CACHE;
        }
        $rows = $this->db->query_select('emoticons', ['*']);
        if (!is_array($rows)) {
            return []; // weird importer trouble
        }
        $this->EMOTICON_CACHE = [];
        foreach ($rows as $myrow) {
            if (strlen($myrow['image']) > 0) {
                $src = $myrow['image'];
                if (url_is_local($src)) {
                    $src = $this->get_emo_dir() . $src;
                }
                $this->EMOTICON_CACHE[$this->ipb_unescape($myrow['typed'])] = ['EMOTICON_IMG_CODE_DIR', $src, $myrow['typed']];
            }
        }
        return $this->EMOTICON_CACHE;
    }

    /**
     * Find a list of all forum skins (aka themes).
     *
     * @return array The list of skins
     */
    public function get_skin_list() : array
    {
        $table = 'skin_collections';
        $codename = 'set_image_dir';

        $rows = $this->db->query_select($table, [$codename]);
        return collapse_1d_complexity($codename, $rows);
    }

    /**
     * Try to find the theme that the logged-in/guest member is using, and map it to a Composr theme.
     * The themes/map.ini file functions to provide this mapping between forum themes, and Composr themes, and has a slightly different meaning for different forum drivers. For example, some drivers map the forum themes theme directory to the Composr theme name, while others made the humanly readable name.
     *
     * @param  boolean $skip_member_specific Whether to avoid member-specific lookup (i.e. find via what forum theme is currently configured as the default)
     * @param  ?MEMBER $member_id The member to find for (null: current member)
     * @return ID_TEXT The theme
     */
    public function _get_theme(bool $skip_member_specific = false, ?int $member_id = null) : string
    {
        $def = '';

        // Load in remapper
        require_code('files');
        $map = file_exists(get_file_base() . '/themes/map.ini') ? cms_parse_ini_file_fast(get_file_base() . '/themes/map.ini') : [];

        if (!$skip_member_specific) {
            // Work out
            if ($member_id === null) {
                $member_id = get_member();
            }
            if ($member_id > 0) {
                $skin = $this->get_member_row_field($member_id, 'skin');
            } else {
                $skin = 0;
            }
            if ($skin > 0) { // User has a custom theme
                $ipb = $this->db->query_select_value_if_there('skin_collections', 'set_image_dir', ['set_id' => $skin]);
                if ($ipb !== null) {
                    $def = array_key_exists($ipb, $map) ? $map[$ipb] : $ipb;
                }
            }
        }

        // Look for a skin according to our site name (we bother with this instead of 'default' because Composr itself likes to never choose a theme when forum-theme integration is on: all forum [via map] or all Composr seems cleaner, although it is complex)
        if ((!(strlen($def) > 0)) || (!file_exists(get_custom_file_base() . '/themes/' . $def))) {
            $ipb = $this->db->query_select_value_if_there('skin_collections', 'set_image_dir', ['set_name' => get_site_name()]);
            if ($ipb !== null) {
                $def = array_key_exists($ipb, $map) ? $map[$ipb] : $ipb;
            }
        }

        // Hmm, just the very-default then
        if ((!(strlen($def) > 0)) || (!file_exists(get_custom_file_base() . '/themes/' . $def))) {
            $ipb = $this->db->query_select_value_if_there('skin_collections', 'set_image_dir', ['set_is_default' => 1]);
            if ($ipb !== null) {
                $def = array_key_exists($ipb, $map) ? $map[$ipb] : $ipb;
            }
        }

        // Default then!
        if ((!(strlen($def) > 0)) || (!file_exists(get_custom_file_base() . '/themes/' . $def))) {
            $def = array_key_exists('default', $map) ? $map['default'] : 'default';
        }

        return $def;
    }

    /**
     * Get a URL to the registration page (for people to create member accounts).
     *
     * @return URLPATH The URL to the registration page
     */
    protected function _join_url() : string
    {
        return get_forum_base_url() . '/index.php?app=core&module=global&section=register';
    }

    /**
     * Get a URL to the specified member's home (control panel).
     *
     * @param  MEMBER $member_id The member ID
     * @return URLPATH The URL to the members home
     */
    public function member_home_url(int $member_id) : string
    {
        return get_forum_base_url() . '/index.php?app=core&module=usercp';
    }

    /**
     * Get a URL to the members-online page.
     *
     * @return URLPATH The URL to the members-online page
     */
    protected function _users_online_url() : string
    {
        return get_forum_base_url() . '/index.php?app=members&module=online&sort_order=desc';
    }

    /**
     * Get a URL to send a private/personal message to the given member.
     *
     * @param  MEMBER $member_id The member ID
     * @return URLPATH The URL to the private/personal message page
     */
    protected function _member_pm_url(int $member_id) : string
    {
        return get_forum_base_url() . '/index.php?app=members&module=messaging&section=send&do=form&fromMemberID=' . strval($member_id);
    }

    /**
     * Get the number of members registered on the forum.
     *
     * @return integer The number of members
     */
    public function get_num_members() : int
    {
        $r = $this->db->query('SELECT COUNT(*) AS a FROM ' . $this->db->get_table_prefix() . 'members WHERE member_group_id<>1');
        return $r[0]['a'];
    }

    /**
     * Get the total topics ever made on the forum.
     *
     * @return integer The number of topics
     */
    public function get_num_topics() : int
    {
        return $this->db->query_select_value('topics', 'COUNT(*)');
    }

    /**
     * Get the total posts ever made on the forum.
     *
     * @return integer The number of posts
     */
    public function get_num_forum_posts() : int
    {
        return $this->db->query_select_value('posts', 'COUNT(*)');
    }

    /**
     * Get the forum usergroup relating to the specified member ID.
     *
     * @param  MEMBER $member_id The member ID
     * @return array The array of forum usergroups
     */
    protected function _get_members_groups(int $member_id) : array
    {
        $group = $this->get_member_row_field($member_id, 'member_group_id');
        $secondary = [$group];
        $more = $this->get_member_row_field($member_id, 'mgroup_others');
        if (($more != '') && ($more !== null)) {
            $secondary = array_merge($secondary, explode(',', $more));
        }
        return $secondary;
    }

    /**
     * Get an array of members who are in at least one of the given array of usergroups.
     *
     * @param  array $groups The array of usergroups
     * @param  ?integer $max Return up to this many entries for primary members and this many entries for secondary members (null: no limit, only use no limit if querying very restricted usergroups!)
     * @param  integer $start Return primary members after this offset and secondary members after this offset
     * @return ?array The array of members (null: no members)
     */
    public function member_group_query(array $groups, ?int $max = null, int $start = 0) : ?array
    {
        $_groups = '';
        foreach ($groups as $group) {
            if ($_groups != '') {
                $_groups .= ' OR ';
            }
            $_groups .= 'member_group_id=' . strval($group);
        }
        return $this->db->query('SELECT * FROM ' . $this->db->get_table_prefix() . 'members WHERE ' . $_groups . ' ORDER BY member_group_id,member_id ASC', $max, $start);
    }

    /**
     * Find if the specified member ID is marked as staff or not.
     *
     * @param  MEMBER $member_id The member ID
     * @return boolean Whether the member is staff
     */
    protected function _is_staff(int $member_id) : bool
    {
        $usergroup = $this->get_member_row_field($member_id, 'member_group_id');
        if (($usergroup !== null) && ($this->db->query_select_value_if_there('groups', 'g_is_supmod', ['g_id' => $usergroup]) == 1)) {
            return true;
        }
        return false;
    }

    /**
     * Find if the specified member ID is marked as a super admin or not.
     *
     * @param  MEMBER $member_id The member ID
     * @return boolean Whether the member is a super admin
     */
    protected function _is_super_admin(int $member_id) : bool
    {
        $usergroup = $this->get_member_row_field($member_id, 'member_group_id');
        if (($usergroup !== null) && ($this->db->query_select_value_if_there('groups', 'g_access_cp', ['g_id' => $usergroup]) == 1)) {
            return true;
        }
        return false;
    }

    /**
     * Create a member login cookie.
     *
     * @param  MEMBER $member_id The member ID
     * @param  ?SHORT_TEXT $username The username (null: lookup)
     * @param  string $password_raw The password (note this is sometimes not used by forum drivers, as they can also do something with what is already in the database instead)
     */
    public function create_login_cookie(int $member_id, ?string $username, string $password_raw)
    {
        // User
        cms_setcookie(get_member_cookie(), strval($member_id), false, true);

        // Password
        $_password = $this->get_member_row_field($member_id, 'member_login_key');
        cms_setcookie(get_pass_cookie(), $_password, false, true);

        // Set stronghold
        global $SITE_INFO;
        if (!empty($SITE_INFO['stronghold_cookies'])) {
            $ip_octets = explode('.', $_SERVER['REMOTE_ADDR']);
            $crypt_salt = md5(get_db_forums_password() . get_db_forums_user());
            $a = get_member_cookie();
            $b = get_pass_cookie();
            for ($i = 0; $i < strlen($a) && $i < strlen($b); $i++) {
                if ($a[$i] != $b[$i]) {
                    break;
                }
            }
            $cookie_prefix = substr($a, 0, $i);
            $stronghold = md5(md5(strval($member_id) . '-' . $ip_octets[0] . '-' . $ip_octets[1] . '-' . $_password) . $crypt_salt);
            cms_setcookie($cookie_prefix . 'ipb_stronghold', $stronghold, false, true);
        }
    }

    /**
     * Try and log in using a member cookie.
     * Should only be called if the cookie exists.
     *
     * @return ?array A map of 'id' and 'error'. If 'id' is null, an error occurred and 'error' is set (null: no cookie)
     */
    public function authorise_cookie_login() : ?array
    {
        if ((!isset($_COOKIE[get_member_cookie()])) || (!isset($_COOKIE[get_pass_cookie()]))) {
            return null;
        }

        $username = $_COOKIE[get_member_cookie()];
        $password_hashed = $_COOKIE[get_pass_cookie()];

        return $this->_authorise_login($username, null, $password_hashed, true);
    }

    /**
     * Find if the given member ID and password is valid. If username is null, then the member ID is used instead.
     *
     * @param  ?SHORT_TEXT $username The member username (null: use $member_id)
     * @param  ?MEMBER $member_id The member ID (null: use $username)
     * @param  string $password_raw The raw password
     * @return array A map of 'id' and 'error'. If 'id' is null, an error occurred and 'error' is set
     */
    public function authorise_login(?string $username, ?int $member_id, string $password_raw) : array
    {
        return $this->_authorise_login($username, $member_id, $password_raw, false);
    }

    /**
     * Find if the given member ID and password is valid. If username is null, then the member ID is used instead.
     * All authorisation, cookies, and form-logins, are passed through this function.
     *
     * @param  ?SHORT_TEXT $username The member username (null: use $member_id)
     * @param  ?MEMBER $member_id The member ID (null: use $username)
     * @param  string $password_mixed If $cookie_login is true then this is the value of the password cookie, otherwise it's the password the user tried to log in with
     * @param  boolean $cookie_login Whether this is a cookie login, determines how the hashed password is treated for the value passed in
     * @return array A map of 'id' and 'error'. If 'id' is null, an error occurred and 'error' is set
     */
    protected function _authorise_login(?string $username, ?int $member_id, string $password_mixed, bool $cookie_login = false) : array
    {
        $out = [];
        $out['id'] = null;

        if ($member_id === null) {
            $rows = $this->db->query_select('members', ['*'], ['name' => $this->ipb_escape($username)], '', 1);
            if (array_key_exists(0, $rows)) {
                $this->MEMBER_ROWS_CACHED[$rows[0]['member_id']] = $rows[0];
            }
        } else {
            $rows = [];
            $rows[0] = $this->get_member_row($member_id);
        }

        if (!array_key_exists(0, $rows) || $rows[0] === null) { // All hands to lifeboats
            $out['error'] = do_lang_tempcode((get_option('login_error_secrecy') == '1') ? 'MEMBER_INVALID_LOGIN' : '_MEMBER_NO_EXIST', $username);
            return $out;
        }
        $row = $rows[0];
        if ($row['member_banned'] == 1) { // All hands to the guns
            $out['error'] = do_lang_tempcode('YOU_ARE_BANNED');
            return $out;
        }

        if ($cookie_login) {
            if (!hash_equals($password_mixed, $row['member_login_key'])) {
                $out['error'] = do_lang_tempcode((get_option('login_error_secrecy') == '1') ? 'MEMBER_INVALID_LOGIN' : 'MEMBER_BAD_PASSWORD');
                return $out;
            }

            // Check stronghold
            global $SITE_INFO;
            if (!empty($SITE_INFO['stronghold_cookies'])) {
                $ip_octets = explode('.', $_SERVER['REMOTE_ADDR']);
                $crypt_salt = md5(get_db_forums_password() . get_db_forums_user());
                $a = get_member_cookie();
                $b = get_pass_cookie();
                for ($i = 0; $i < strlen($a) && $i < strlen($b); $i++) {
                    if ($a[$i] != $b[$i]) {
                        break;
                    }
                }
                $cookie_prefix = substr($a, 0, $i);
                $cookie = cms_admirecookie($cookie_prefix . 'ipb_stronghold');
                $stronghold = md5(md5(strval($row['member_id']) . '-' . $ip_octets[0] . '-' . $ip_octets[1] . '-' . $row['member_login_key']) . $crypt_salt);
                if (!hash_equals($cookie, $stronghold)) {
                    $out['error'] = do_lang_tempcode('MEMBER_BAD_STRONGHOLD');
                    return $out;
                }
            }
        } else {
            if (!hash_equals(md5(md5($row['members_pass_salt']) . $password_mixed), $row['members_pass_hash'])) {
                $out['error'] = do_lang_tempcode((get_option('login_error_secrecy') == '1') ? 'MEMBER_INVALID_LOGIN' : 'MEMBER_BAD_PASSWORD');
                return $out;
            }
        }

        if (substr(get_member_cookie(), 0, 5) != 'cms__') {
            $pos = strpos(get_member_cookie(), 'member_id');
            require_code('users_active_actions');
            cms_eatcookie(substr(get_member_cookie(), 0, $pos) . 'session_id');
        }

        $out['id'] = $row['member_id'];
        return $out;
    }

    /**
     * Find out if the given member ID is banned.
     *
     * @param  MEMBER $member_id The member ID
     * @param  ?ID_TEXT $reasoned_ban Ban reasoning returned by reference (null: none)
     * @return boolean Whether the member is banned
     */
    public function is_banned(int $member_id, ?string &$reasoned_ban = null) : bool
    {
        // Are they banned
        $banned = $this->db->query_select_value_if_there('members', 'member_banned', ['member_id' => $member_id]);
        if ($banned === null) {
            return false;
        }
        return $banned == 1;
    }

    /**
     * Gets a whole member row from the database.
     *
     * @param  MEMBER $member_id The member ID
     * @return ?array The member row (null: no such member)
     */
    public function get_member_row(int $member_id) : ?array
    {
        if (array_key_exists($member_id, $this->MEMBER_ROWS_CACHED)) {
            return $this->MEMBER_ROWS_CACHED[$member_id];
        }

        if ($member_id == 0) {
            $rows = [];
            $rows[0] = [];
            $rows[0]['member_id'] = 0;
            $rows[0]['name'] = $this->ipb_escape(do_lang('GUEST'));
            $rows[0]['members_display_name'] = $this->ipb_escape(do_lang('GUEST'));
            $rows[0]['member_group_id'] = 2;
            $rows[0]['language'] = null;
        } else {
            $rows = $this->db->query_select('members', ['*'], ['member_id' => $member_id], '', 1);
        }

        $this->MEMBER_ROWS_CACHED[$member_id] = array_key_exists(0, $rows) ? $rows[0] : null;
        return $this->MEMBER_ROWS_CACHED[$member_id];
    }
}
