<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    tickets
 */

/**
 * Add a ticket type.
 *
 * @param  SHORT_TEXT $ticket_type_name The ticket type name
 * @param  BINARY $guest_emails_mandatory Whether guest e-mail addresses are mandatory for new tickets
 * @param  BINARY $search_faq Whether the FAQ should be searched before submitting a new ticket
 * @return AUTO_LINK The ticket type ID
 */
function add_ticket_type($ticket_type_name, $guest_emails_mandatory = 0, $search_faq = 0)
{
    require_code('global4');
    prevent_double_submit('ADD_TICKET_TYPE', null, $ticket_type_name);

    $map = [
        'guest_emails_mandatory' => $guest_emails_mandatory,
        'search_faq' => $search_faq,
        'cache_lead_time' => null,
    ];
    $map += insert_lang('ticket_type_name', $ticket_type_name, 1);
    $ticket_type_id = $GLOBALS['SITE_DB']->query_insert('ticket_types', $map, true);

    log_it('ADD_TICKET_TYPE', strval($ticket_type_id), $ticket_type_name);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('ticket_type', strval($ticket_type_id), null, null, true);
    }

    return $ticket_type_id;
}

/**
 * Edit a ticket type, keeping the integer ID the same.
 *
 * @param  AUTO_LINK $ticket_type_id The ticket type ID
 * @param  ?SHORT_TEXT $ticket_type_name The new ticket type text (null: do not change)
 * @param  BINARY $guest_emails_mandatory Whether guest e-mail addresses are mandatory for new tickets
 * @param  BINARY $search_faq Whether the FAQ should be searched before submitting a new ticket
 */
function edit_ticket_type($ticket_type_id, $ticket_type_name, $guest_emails_mandatory, $search_faq)
{
    $rows = $GLOBALS['SITE_DB']->query_select('ticket_types', ['*'], ['id' => $ticket_type_id], '', 1);
    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'ticket_type'));
    }

    $old_ticket_type_name = $rows[0]['ticket_type_name'];

    $map = [
        'guest_emails_mandatory' => $guest_emails_mandatory,
        'search_faq' => $search_faq,
    ];
    $map += lang_remap('ticket_type_name', $old_ticket_type_name, $ticket_type_name);
    $GLOBALS['SITE_DB']->query_update('ticket_types', $map, ['id' => $ticket_type_id], '', 1);

    log_it('EDIT_TICKET_TYPE', strval($ticket_type_id), $ticket_type_name);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('ticket_type', strval($ticket_type_id), $ticket_type_name);
    }
}

/**
 * Delete a ticket type.
 *
 * @param  AUTO_LINK $ticket_type_id The ticket type ID
 */
function delete_ticket_type($ticket_type_id)
{
    $rows = $GLOBALS['SITE_DB']->query_select('ticket_types', ['*'], ['id' => $ticket_type_id], '', 1);
    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'ticket_type'));
    }

    $GLOBALS['SITE_DB']->query_delete('group_category_access', ['module_the_name' => 'tickets', 'category_name' => strval($ticket_type_id)]);
    $GLOBALS['SITE_DB']->query_delete('group_privileges', ['module_the_name' => 'tickets', 'category_name' => strval($ticket_type_id)]);

    $ticket_type_name = $rows[0]['ticket_type_name'];
    $_ticket_type_name = get_translated_text($ticket_type_name);

    $GLOBALS['SITE_DB']->query_delete('ticket_types', ['id' => $ticket_type_id], '', 1);

    delete_lang($ticket_type_name);

    log_it('DELETE_TICKET_TYPE', strval($ticket_type_id), $_ticket_type_name);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        expunge_resource_fs_moniker('ticket_type', strval($ticket_type_id));
    }

    if (addon_installed('ecommerce')) {
        require_code('ecommerce_permission_products');
        delete_prod_permission('ticket_type', strval($ticket_type_id));
    }
}

/**
 * Build a list of ticket types.
 *
 * @param  ?AUTO_LINK $selected_ticket_type_id The current selected ticket type (null: none)
 * @param  array $ticket_types_to_let_through List of ticket types to show regardless of access permissions
 * @return array A map between ticket types, and template-ready details about them
 */
function build_types_list($selected_ticket_type_id, $ticket_types_to_let_through = [])
{
    $_types = $GLOBALS['SITE_DB']->query_select('ticket_types', ['*'], [], 'ORDER BY ' . $GLOBALS['SITE_DB']->translate_field_ref('ticket_type_name'));
    $types = [];
    foreach ($_types as $type) {
        if ((!has_category_access(get_member(), 'tickets', strval($type['id']))) && (!in_array($type['id'], $ticket_types_to_let_through))) {
            continue;
        }

        if ($type['cache_lead_time'] === null) {
            $lead_time = do_lang('UNKNOWN');
        } else {
            $lead_time = display_time_period($type['cache_lead_time']);
        }
        $types[$type['id']] = [
            'TICKET_TYPE_ID' => strval($type['id']),
            'SELECTED' => ($type['id'] === $selected_ticket_type_id),
            'NAME' => get_translated_text($type['ticket_type_name']),
            'LEAD_TIME' => $lead_time,
        ];
    }
    return $types;
}

/**
 * Get a map of properties for the given ticket type.
 *
 * @param  ?AUTO_LINK $ticket_type_id The ticket type (null: fallback for malformed tickets)
 * @return array Array of properties
 */
function get_ticket_type($ticket_type_id)
{
    $default = [
        'ticket_type' => null,
        'ticket_type_name' => do_lang('UNKNOWN'),
        'ticket_type_name_trans' => do_lang('UNKNOWN'),
        'guest_emails_mandatory' => 0,
        'search_faq' => 0,
        'cache_lead_time' => null,
    ];

    if ($ticket_type_id === null) {
        // Malformed ticket
        return $default;
    }

    $rows = $GLOBALS['SITE_DB']->query_select('ticket_types', ['*'], ['id' => $ticket_type_id], '', 1);
    if (empty($rows)) {
        return $default;
    }

    $rows[0]['ticket_type_name_trans'] = get_translated_text($rows[0]['ticket_type_name']);
    return $rows[0];
}

/**
 * Generate a new ticket ID.
 *
 * @param  ?MEMBER $member_id Member ID ticket is for (null: current member)
 * @param  ?ID_TEXT $stem Ticket ID stem (null: randomise)
 * @return string New ticket ID
 */
function ticket_generate_new_id($member_id = null, $stem = null)
{
    if ($member_id === null) {
        $member_id = get_member();
    }
    if ($stem === null) {
        $stem = uniqid('', false);
    }
    return strval($member_id) . '_' . $stem;
}

/**
 * Add a new post to a ticket, or create a new ticket if a ticket with the given ID doesn't exist.
 * It has the same return value as make_post_forum_topic().
 *
 * @param  string $ticket_id The ticket ID (doesn't have to exist)
 * @param  ?AUTO_LINK $ticket_type_id The ticket type (null: reply to ticket)
 * @param  LONG_TEXT $title The post title
 * @param  LONG_TEXT $post The post content in Comcode format
 * @param  boolean $staff_only Whether the reply is staff only (invisible to ticket owner, only on Conversr)
 * @param  ?AUTO_LINK $member_id The member ID (null: current member)
 * @param  ?TIME $time_post The post time (null: use current time)
 * @return URLPATH The ticket URL
 */
function ticket_add_post($ticket_id, $ticket_type_id, $title, $post, $staff_only = false, $member_id = null, $time_post = null)
{
    $ticket_url = ticket_url($ticket_id);

    // Get the forum ID first
    $fid = $GLOBALS['SITE_DB']->query_select_value_if_there('tickets', 'forum_id', ['ticket_id' => $ticket_id]);
    if ($fid === null) {
        $fid = get_ticket_forum_id($ticket_type_id);
    }

    // Find member ID
    if ($member_id === null) {
        $member_id = get_active_support_user();
    }

    // Make post
    $GLOBALS['FORUM_DRIVER']->make_post_forum_topic(
        $fid,
        $ticket_id,
        $member_id,
        $title,
        $post,
        $title,
        do_lang('SUPPORT_TICKET'),
        $ticket_url,
        null,
        null,
        1,
        1,
        false,
        '',
        null,
        $staff_only,
        null,
        null,
        $time_post
    );

    // Save metadata
    $topic_id = $GLOBALS['LAST_TOPIC_ID'];
    $is_new = $GLOBALS['LAST_TOPIC_IS_NEW'];
    if (($is_new) && ($ticket_type_id !== null)) {
        $GLOBALS['SITE_DB']->query_insert('tickets', ['ticket_id' => $ticket_id, 'forum_id' => $fid, 'topic_id' => $topic_id, 'ticket_type' => $ticket_type_id]);
    }

    return $ticket_url;
}

/**
 * Wrap a ticket with a guest e-mail address, if provided.
 *
 * @param  string $post The ticket post
 * @param  EMAIL $email The e-mail address
 * @param  boolean $mandatory_guest_email Whether an e-mail address is mandatory for guests
 * @return string The wrapped ticket post
 */
function ticket_wrap_with_email_address($post, $email, $mandatory_guest_email = false)
{
    // Do we need to tack on an e-mail address?
    if ($email != '') {
        $body = '> ' . str_replace("\n", "\n" . '> ', $post);
        if (substr($body, -2) == '> ') {
            $body = substr($body, 0, strlen($body) - 2);
        }
        $email_comcode = do_lang('GUEST_TICKET_REPLY_LINK', comcode_escape(post_param_string('title')), comcode_escape(get_site_name()), [comcode_escape($body), $email]);
        $new_post = '';
        $new_post .= $email_comcode;
        $new_post .= "\n";
        $new_post .= $post;
        return $new_post;
    }

    if ((is_guest()) && ($mandatory_guest_email)) {
        // Error if the e-mail address is required for this ticket type
        warn_exit(do_lang_tempcode('ERROR_GUEST_EMAILS_MANDATORY'));
    }

    return $post;
}

/**
 * Send an e-mail notification for a new post in a support ticket, either to the staff or to the ticket's owner.
 *
 * @param  string $ticket_id The ticket ID
 * @param  LONG_TEXT $title The ticket title
 * @param  LONG_TEXT $post The ticket post's content
 * @param  mixed $ticket_url The home URL (to view the ticket) (URLPATH or Tempcode URL)
 * @param  EMAIL $uid_email Ticket owner's e-mail address, in the case of a new ticket
 * @param  ?AUTO_LINK $ticket_type_id_if_new The new ticket type (null: it is a reply to an existing ticket)
 * @param  ?MEMBER $new_poster Posting member (null: current member)
 * @param  boolean $auto_created Whether the ticket was auto-created
 */
function send_ticket_email($ticket_id, $title, $post, $ticket_url, $uid_email = '', $ticket_type_id_if_new = null, $new_poster = null, $auto_created = false)
{
    if ($new_poster === null) {
        $new_poster = get_active_support_user();
        $new_poster_real = get_member();
    } else {
        $new_poster_real = $new_poster;
    }

    require_lang('tickets');
    require_code('notifications');

    // Lookup user details
    $_temp = explode('_', $ticket_id, 2);
    $uid = intval($_temp[0]);
    $uid_displayname = $GLOBALS['FORUM_DRIVER']->get_username($uid, true);
    $uid_username = $GLOBALS['FORUM_DRIVER']->get_username($uid);

    // Clarify some details about this ticket
    if ($title == '') {
        $title = do_lang('UNKNOWN');
    }
    $new_ticket = ($ticket_type_id_if_new !== null);

    // Lookup ticket type details
    if ($new_ticket) {
        $ticket_type_id = $ticket_type_id_if_new;
    } else {
        $ticket_type_id = $GLOBALS['SITE_DB']->query_select_value_if_there('tickets', 'ticket_type', ['ticket_id' => $ticket_id]);
    }
    $_ticket_type_name = $GLOBALS['SITE_DB']->query_select_value_if_there('ticket_types', 'ticket_type_name', ['id' => $ticket_type_id]);
    if ($_ticket_type_name === null) {
        $ticket_type_name = do_lang('UNKNOWN');
    } else {
        $ticket_type_name = get_translated_text($_ticket_type_name);
    }

    if ($uid != $new_poster) {
        // Reply from staff, notification to member
        $post_tempcode = comcode_to_tempcode($post);
        if (trim($post_tempcode->evaluate()) != '') {
            $staff_displayname = $GLOBALS['FORUM_DRIVER']->get_username($new_poster, true);
            $staff_username = $GLOBALS['FORUM_DRIVER']->get_username($new_poster);

            if ((get_option('ticket_mail_on') == '1') && (cron_installed()) && (function_exists('imap_open'))) {
                if ($uid_email == '') {
                    $uid_email = $GLOBALS['FORUM_DRIVER']->get_member_email_address($uid);
                }
                require_code('mail_integration');
                require_code('tickets_email_integration');
                $email_ob = new TicketsEmailIntegration();
                $email_ob->outgoing_message($ticket_id, $ticket_url, $ticket_type_name, $title, $post, $uid, $uid_displayname, $uid_email, $staff_displayname);
            } elseif (!is_guest($uid)) {
                $uid_lang = get_lang($uid);

                $subject = do_lang(
                    'TICKET_REPLY',
                    $ticket_type_name,
                    $title,
                    null,
                    $uid_lang
                );

                $message = do_notification_lang(
                    'TICKET_REPLY_MESSAGE',
                    comcode_escape($title),
                    comcode_escape($ticket_url),
                    [
                        comcode_escape($staff_displayname),
                        $post,
                        comcode_escape($ticket_type_name),
                        strval($new_poster),
                        comcode_escape($staff_username),
                    ],
                    $uid_lang
                );

                dispatch_notification(
                    'ticket_reply',
                    ($ticket_type_id === null) ? '' : strval($ticket_type_id),
                    $subject,
                    $message,
                    [$uid]
                );
            }
        }
    } else {
        // Reply from member, notification to staff
        if (is_object($ticket_url)) {
            $ticket_url = $ticket_url->evaluate();
        }

        $subject = do_lang(
            $new_ticket ? 'TICKET_NEW_STAFF' : 'TICKET_REPLY_STAFF',
            $ticket_type_name,
            $title,
            null,
            get_site_default_lang()
        );

        $message = do_notification_lang(
            $new_ticket ? 'TICKET_NEW_MESSAGE_FOR_STAFF' : 'TICKET_REPLY_MESSAGE_FOR_STAFF',
            comcode_escape($title),
            comcode_escape($ticket_url),
            [
                comcode_escape($uid_displayname),
                $post,
                comcode_escape($ticket_type_name),
                strval($new_poster),
                comcode_escape($uid_username),
            ],
            get_site_default_lang()
        );

        $attachments = [];
        if ($new_ticket) {
            if (addon_installed('securitylogging')) {
                require_code('lookup');
                $user_metadata_path = save_user_metadata();
                $attachments[$user_metadata_path] = 'user_metadata.txt';
            }
        }

        dispatch_notification(
            $new_ticket ? 'ticket_new_staff' : 'ticket_reply_staff',
            strval($ticket_type_id),
            $subject,
            $message,
            null,
            null,
            ['attachments' => $attachments]
        );

        // ALSO: Tell member that their message was received
        if (($uid_email != '') && (get_option('message_received_emails') == '1')) {
            if ((get_option('ticket_mail_on') == '1') && (cron_installed()) && (function_exists('imap_open')) && ($new_ticket) && ($auto_created)) {
                require_code('mail_integration');
                require_code('tickets_email_integration');
                $email_ob = new TicketsEmailIntegration();
                $email_ob->outgoing_message($ticket_id, $ticket_url, $ticket_type_name, $title, $post, $uid, $uid_displayname, $uid_email, '', true);
            } else {
                require_code('mail');
                dispatch_mail(do_lang('YOUR_MESSAGE_WAS_SENT_SUBJECT', $title), do_lang('YOUR_MESSAGE_WAS_SENT_BODY', $post), [$uid_email], cms_empty_safe($uid_displayname) ? null : $uid_displayname, '', '', ['require_recipient_valid_since' => $new_poster]);
            }
        }
    }

    // Notification to any staff monitoring, in general

    if (!$new_ticket) {
        $subject = do_lang(
            'TICKET_ACTIVITY_SUBJECT',
            $title,
            $GLOBALS['FORUM_DRIVER']->get_username($new_poster_real, true),
            $GLOBALS['FORUM_DRIVER']->get_username($new_poster_real),
            get_site_default_lang()
        );

        $message = do_notification_lang(
            'TICKET_ACTIVITY_BODY',
            comcode_escape($title),
            comcode_escape($ticket_url),
            [
                $post,
                comcode_escape($GLOBALS['FORUM_DRIVER']->get_username($new_poster_real, true)),
                comcode_escape($GLOBALS['FORUM_DRIVER']->get_username($new_poster_real)),
            ],
            get_site_default_lang()
        );

        dispatch_notification(
            'ticket_assigned_staff',
            $ticket_id,
            $subject,
            $message
        );
    }
}

/**
 * Remove a ticket from the database. This does not remove the associated forum topic.
 *
 * @param  AUTO_LINK $topic_id The associated topic ID
 */
function delete_ticket_by_topic_id($topic_id)
{
    $GLOBALS['SITE_DB']->query_delete('tickets', ['topic_id' => $topic_id], '', 1);
}

/**
 * Get ticket details, except actual posts or ticket type information.
 *
 * @param  string $ticket_id The ticket ID
 * @param  boolean $hard_error Exit with an error message if it cannot find the ticket
 * @return ?array A tuple: The ticket title, the topic ID, the ticket type ID, the ticket owner (null: not found)
 */
function get_ticket_meta_details($ticket_id, $hard_error = true)
{
    $forum = 0; // Returned by reference
    $topic_id = 0; // Returned by reference
    $total_ticket_posts = 1; // Returned by reference
    $ticket_posts = get_ticket_posts($ticket_id, $forum, $topic_id, $total_ticket_posts, 0, 1);
    if (empty($ticket_posts)) {
        if ($hard_error) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'ticket'));
        }

        return null;
    }

    $ticket_title = $ticket_posts[0]['title'];

    $_temp = explode('_', $ticket_id, 2);
    $uid = intval($_temp[0]);

    return [$ticket_title, $topic_id, $forum, $uid];
}

/**
 * Get the posts from a given ticket, and also return the IDs of the forum and topic containing it. The return value is the same as that of get_forum_topic_posts(), except in error conditions.
 *
 * @param  string $ticket_id The ticket ID
 * @param  ?AUTO_LINK $forum Return location for the forum ID (null: don't collect)
 * @param  ?AUTO_LINK $topic_id Return location for the topic ID (null: don't collect)
 * @param  ?integer $total_ticket_posts Return total number of posts in the ticket (null: don't collect)
 * @param  integer $start Start offset in pagination
 * @param  ?integer $max Max per page in pagination (null: no limit)
 * @return ?mixed The array of maps (Each map is: title, message, member, date) (null: no such ticket)
 */
function get_ticket_posts($ticket_id, &$forum = null, &$topic_id = null, &$total_ticket_posts = null, $start = 0, $max = null)
{
    $ticket = $GLOBALS['SITE_DB']->query_select('tickets', ['*'], ['ticket_id' => $ticket_id], '', 1);
    if (count($ticket) == 1) {
        // We know about it, so grab details from tickets table...

        $ticket_type_id = $ticket[0]['ticket_type'];
        if (has_privilege(get_member(), 'view_others_tickets')) {
            if (!has_category_access(get_member(), 'tickets', strval($ticket_type_id))) {
                access_denied('CATEGORY_ACCESS_LEVEL');
            }
        }

        $forum = $ticket[0]['forum_id'];
        $topic_id = $ticket[0]['topic_id'];
    } else {
        // It must be a ticket with no row (normal topic moved in?), so find via residing in the root ticket forum...

        $forum = get_ticket_forum_id();
        $topic_id = $GLOBALS['FORUM_DRIVER']->find_topic_id_for_topic_identifier(get_option('ticket_forum_name'), $ticket_id, do_lang('SUPPORT_TICKET'));
    }

    $topic_id = $GLOBALS['FORUM_DRIVER']->find_topic_id_for_topic_identifier(strval($forum), $ticket_id, do_lang('SUPPORT_TICKET'));
    $ticket_posts = $GLOBALS['FORUM_DRIVER']->get_forum_topic_posts($topic_id, $total_ticket_posts, $max, $start);

    if ((!is_array($ticket_posts)) || (empty($ticket_posts))) {
        return null;
    }

    $ticket_title = &$ticket_posts[0]['title'];
    if ($ticket_title == '') {
        $ticket_title = do_lang('UNKNOWN');
    }

    return $ticket_posts;
}

/**
 * Find who a ticket is assigned to.
 *
 * @param  ID_TEXT $ticket_id Ticket ID
 * @return array Map of assigned members (member ID to display name)
 */
function find_ticket_assigned_to($ticket_id)
{
    $assigned = [];
    $where = ['l_notification_code' => 'ticket_assigned_staff', 'l_code_category' => $ticket_id];
    $_assigned = $GLOBALS['SITE_DB']->query_select('notifications_enabled', ['l_member_id', 'id'], $where, 'ORDER BY id DESC', 200/*reasonable limit*/);
    foreach ($_assigned as $__assigned) {
        $username = $GLOBALS['FORUM_DRIVER']->get_username($__assigned['l_member_id'], true, USERNAME_DEFAULT_NULL);
        if ($username !== null) {
            $assigned[$__assigned['l_member_id']] = $username;
        }
    }
    return $assigned;
}

/**
 * Update the cache of ticket type lead times (average time taken for a response to tickets of that type) in the database.
 * This is a query-intensive function, so should only be run occasionally.
 */
function update_ticket_type_lead_times()
{
    require_code('feedback');

    $ticket_types = $GLOBALS['SITE_DB']->query_select('ticket_types', ['*']);
    foreach ($ticket_types as $ticket_type) {
        $total_lead_time = 0;
        $tickets_counted = 0;

        $tickets = $GLOBALS['SITE_DB']->query_select('tickets', ['*'], ['ticket_type' => $ticket_type['id']]);
        foreach ($tickets as $ticket) {
            $max_rows = 0;
            $topic = $GLOBALS['FORUM_DRIVER']->show_forum_topics($ticket['forum_id'], 1, 0, $max_rows, $ticket['ticket_id'], true, 'lasttime', false, do_lang('SUPPORT_TICKET') . ': #' . $ticket['ticket_id']);
            if ($topic === null) {
                continue;
            }
            $topic = $topic[0];

            // We need to have two posts for new-style tickets, or three for old-style tickets (with spacers)
            if (($topic['num'] < 2) || (($topic['firstusername'] == do_lang('SYSTEM')) && ($topic['num'] < 3))) {
                continue;
            }

            $ticket_id = extract_topic_identifier($topic['description']);

            $forum = 0; // Returned by reference
            $topic_id = 0; // Returned by reference
            $total_ticket_posts = 1; // Returned by reference
            $ticket_posts = get_ticket_posts($ticket_id, $forum, $topic_id, $total_ticket_posts);

            // Differentiate between old- and new-style tickets
            if ($topic['firstusername'] == do_lang('SYSTEM')) {
                $first_key = 1;
            } else {
                $first_key = 0;
            }

            // Find the first post by someone other than the ticket owner
            $i = $first_key + 1;
            while ((array_key_exists($i, $ticket_posts)) && ($ticket_posts[$i]['member'] != $ticket_posts[$first_key]['member'])) {
                $i++;
            }

            if (array_key_exists($i, $ticket_posts)) {
                $total_lead_time += $ticket_posts[$i]['date'] - $ticket_posts[$first_key]['date'];
                $tickets_counted++;
            }
        }

        // Calculate the new lead time and store it in the DB
        if ($tickets_counted > 0) {
            $GLOBALS['SITE_DB']->query_update('ticket_types', ['cache_lead_time' => $total_lead_time / $tickets_counted], ['id' => $ticket_type['id']], '', 1);
        }
    }
}
