<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    points
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__points2()
{
    require_code('points');
}

/**
 * Credit points to a member from the system (use points_refund for refunds).
 *
 * @param  MEMBER $member_id The member to credit
 * @param  SHORT_TEXT $reason The reason for this credit in the logs
 * @param  integer $total_points The total points to credit (including gift points when applicable)
 * @param  BINARY $anonymous Whether this transaction should be anonymous
 * @param  ?boolean $send_notifications Whether to send notifications for this transaction (false: only the staff get it) (true: both the member and staff get it) (null: neither the member nor staff get it)
 * @param  BINARY $locked Whether this transaction is irreversible (Ignored / always 1 when $amount_gift_points is > 0)
 * @param  ID_TEXT $t_type An identifier to relate this transaction with other transactions of the same $type (e.g. content type)
 * @param  ID_TEXT $t_subtype An identifier to relate this transaction with other transactions of the same $type and $subtype (e.g. an action performed on the $type)
 * @param  ID_TEXT $t_type_id Some content or row ID of the specified $type
 * @param  ?TIME $time The time this transaction occurred (null: now)
 * @return ?AUTO_LINK The ID of the point transaction (null: no transaction took place)
 */
function points_credit_member(int $member_id, string $reason, int $total_points, int $anonymous = 0, ?bool $send_notifications = true, int $locked = 0, string $t_type = '', string $t_subtype = '', string $t_type_id = '', ?int $time = null) : ?int
{
    if (is_guest($member_id)) { // Disallow debiting from the system to the system; makes no sense
        return null;
    }
    if ($total_points <= 0) { // Negative transactions are never allowed; 0 transactions are ignored.
        return null;
    }

    $id = points_transact($GLOBALS['FORUM_DRIVER']->get_guest_id(), $member_id, $reason, $total_points, 0, $anonymous, $send_notifications, $locked, $t_type, $t_subtype, $t_type_id, $time);

    return $id;
}

/**
 * Debit points from a member to the system.
 *
 * @param  MEMBER $member_id The member to debit
 * @param  SHORT_TEXT $reason The reason for this debit in the logs
 * @param  integer $total_points The total points to debit (including gift points when applicable)
 * @param  ?integer $amount_gift_points The number of $total_points that should be debited from the gift points balance (null: use as many gift points as is available)
 * @param  BINARY $anonymous Whether this transaction should be anonymous
 * @param  ?boolean $send_notifications Whether to send notifications for this transaction (false: only the staff get it) (true: both the member and staff get it) (null: neither the member nor staff get it)
 * @param  BINARY $locked Whether this transaction is irreversible
 * @param  ID_TEXT $t_type An identifier to relate this transaction with other transactions of the same $type (e.g. content type)
 * @param  ID_TEXT $t_subtype An identifier to relate this transaction with other transactions of the same $type and $subtype (e.g. an action performed on the $type)
 * @param  ID_TEXT $t_type_id Some content or row ID of the specified $type
 * @param  ?TIME $time The time this transaction occurred (null: now)
 * @return ?AUTO_LINK The ID of the point transaction (null: no transaction took place)
 */
function points_debit_member(int $member_id, string $reason, int $total_points, ?int $amount_gift_points = 0, int $anonymous = 0, ?bool $send_notifications = true, int $locked = 0, string $t_type = '', string $t_subtype = '', string $t_type_id = '', ?int $time = null) : ?int
{
    if (is_guest($member_id)) { // Disallow debiting from the system to the system; makes no sense
        return null;
    }
    if ($total_points == 0) { // Negative transactions are never allowed; 0 transactions are ignored.
        return null;
    }

    $id = points_transact($member_id, $GLOBALS['FORUM_DRIVER']->get_guest_id(), $reason, $total_points, $amount_gift_points, $anonymous, $send_notifications, $locked, $t_type, $t_subtype, $t_type_id, $time);

    return $id;
}

/**
 * Transact points from one member to another. This uses gift points where possible and if enabled.
 *
 * @param  MEMBER $sender_id The ID of the member sending the points
 * @param  MEMBER $recipient_id The ID of the member receiving the points
 * @param  SHORT_TEXT $reason The reason for this transaction in the logs
 * @param  integer $total_points The total number of points to transact (includes gift points when applicable)
 * @param  ?integer $amount_gift_points The strict number of $total_points which should come from the sender's gift points balance (null: use as many gift points the sender has available)
 * @param  BINARY $anonymous Whether the sender should be hidden from those without the privilege to trace anonymous transactions
 * @param  ?boolean $send_notifications Whether to send notifications for this transaction (false: only the staff get it) (true: both the member and staff get it) (null: neither the member nor staff get it)
 * @param  BINARY $locked Whether this transaction is irreversible
 * @param  ID_TEXT $t_type An identifier to relate this transaction with other transactions of the same $type (e.g. content type)
 * @param  ID_TEXT $t_subtype An identifier to relate this transaction with other transactions of the same $type and $subtype (e.g. an action performed on the $type)
 * @param  ID_TEXT $t_type_id Some content or row ID of the specified $type
 * @param  ?TIME $time The time this transaction occurred (null: now)
 * @return ?AUTO_LINK The ID of the transaction (null: a transaction was not created)
 */
function points_transact(int $sender_id, int $recipient_id, string $reason, int $total_points, ?int $amount_gift_points = null, int $anonymous = 0, ?bool $send_notifications = true, int $locked = 0, string $t_type = '', string $t_subtype = '', string $t_type_id = '', ?int $time = null) : ?int
{
    // Negative transactions are never allowed; 0 transactions are ignored.
    if ($total_points <= 0) {
        return null;
    }

    // If more gift points than total points are specified, then limit it to total points
    if ($amount_gift_points !== null && $amount_gift_points > $total_points) {
        $amount_gift_points = $total_points;
    }

    // Determine how the points will be divided between gift and regular based on a member's available balance
    $points_to_process = _points_transact_calculate($sender_id, $total_points, $amount_gift_points);
    if ($points_to_process === null) {
        return null; // Not enough points to proceed
    }
    list($actual_points, $actual_gift_points) = $points_to_process;

    // Log / process the transaction
    $id = _points_transact($sender_id, $recipient_id, $reason, $actual_points, $actual_gift_points, $anonymous, LEDGER_STATUS_NORMAL, $locked, null, $t_type, $t_subtype, $t_type_id, $time);

    // Run post-transaction hooks
    $hook_obs = find_all_hook_obs('systems', 'points_transact', 'Hook_points_transact__');
    foreach ($hook_obs as $name => $hook_ob) {
        if (method_exists($hook_ob, 'points_transact')) {
            $hook_ob->points_transact($id, $sender_id, $recipient_id, $reason, $total_points, $amount_gift_points, $anonymous, $send_notifications, $locked, $t_type, $t_subtype, $t_type_id, $time);
        }
    }

    // Process notifications
    if ($send_notifications !== null) {
        points_dispatch_notification($id, $sender_id, $recipient_id, $reason, $actual_points, $actual_gift_points, $anonymous, $send_notifications, false);
    }

    // Process usergroup promotion
    if (get_forum_type() == 'cns') {
        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        cns_member_handle_promotion($recipient_id);
    }

    // Process activity syndication
    if ($anonymous == 0) {
        require_code('users2');
        if (has_actual_page_access(get_modal_user(), 'points')) {
            require_code('syndication');
            syndicate_described_activity((($recipient_id === null) || (is_guest($recipient_id))) ? 'points:_ACTIVITY_SEND_POINTS' : 'points:ACTIVITY_SEND_POINTS', $reason, integer_format($total_points), '', '_SEARCH:points:member:' . strval($recipient_id), '', '', 'points', 1, null, false, $recipient_id);
        }
    }

    return $id;
}

/**
 * Refund points from one member to another. This uses gift points where possible and if enabled.
 *
 * @param  MEMBER $sender_id The ID of the member refunding the points (e.g. the recipient_id in the original transaction)
 * @param  MEMBER $recipient_id The ID of the member receiving the refunded points (e.g. the sender_id in the original transaction)
 * @param  SHORT_TEXT $reason The reason for this refund in the logs
 * @param  integer $total_points The total number of points to refund (includes gift points when applicable)
 * @param  integer $amount_gift_points The number of $total_points which should be refunded as gift points (subtracted from gift_points_sent)
 * @param  BINARY $anonymous Whether the sender should be hidden from those without the privilege to trace anonymous transactions
 * @param  ?array $linked_to The database row of the points_ledger transaction being refunded by this (null: this refund is not related to any past ledger)
 * @param  ?boolean $send_notifications Whether to send notifications for this transaction (false: only the staff get it) (true: both the member and staff get it) (null: neither the member nor staff get it)
 * @param  ID_TEXT $t_type An identifier to relate this transaction with other transactions of the same $type (e.g. content type)
 * @param  ID_TEXT $t_subtype An identifier to relate this transaction with other transactions of the same $type and $subtype (e.g. an action performed on the $type)
 * @param  ID_TEXT $t_type_id Some content or row ID of the specified $type
 * @param  ?TIME $time The time this transaction occurred (null: now)
 * @param  integer $status The status to use for the record (see LEDGER_STATUS_*)
 * @return ?AUTO_LINK The ID of the transaction (null: a transaction was not created)
 */
function points_refund(int $sender_id, int $recipient_id, string $reason, int $total_points, int $amount_gift_points = 0, int $anonymous = 0, ?array $linked_to = null, ?bool $send_notifications = true, string $t_type = '', string $t_subtype = '', string $t_type_id = '', ?int $time = null, int $status = 3) : ?int
{
    // Do nothing if we are transacting 0 points
    if ($total_points == 0) {
        return null;
    }

    // Gift points should not be greater than total points to transact; that makes no sense
    if ($amount_gift_points !== null && $amount_gift_points > $total_points) {
        $amount_gift_points = $total_points;
    }

    // Determine how the points will be divided between gift and regular
    $points_to_process = _points_refund_calculate($total_points, $amount_gift_points);
    list($actual_points, $actual_gift_points) = $points_to_process;

    // Actualise the transaction
    $id = _points_transact($sender_id, $recipient_id, $reason, $actual_points, $actual_gift_points, $anonymous, $status, (($status == LEDGER_STATUS_REVERSING) ? 1 : 0), $linked_to, $t_type, $t_subtype, $t_type_id, $time);

    // Run post-transaction hooks
    $hook_obs = find_all_hook_obs('systems', 'points_transact', 'Hook_points_transact__');
    foreach ($hook_obs as $name => $hook_ob) {
        if (method_exists($hook_ob, 'points_refund')) {
            $hook_ob->points_refund($id, $sender_id, $recipient_id, $reason, $total_points, $amount_gift_points, $anonymous, $linked_to, $send_notifications, $t_type, $t_subtype, $t_type_id, $time, $status);
        }
    }

    // Link the other ledger / lock if applicable
    $map = [];
    if ($linked_to !== null) {
        $map['linked_to'] = $id;
    }
    if ($status == LEDGER_STATUS_REVERSING) {
        $map['status'] = LEDGER_STATUS_REVERSED;
        $map['locked'] = 1;
    }
    if (count($map) > 0) {
        $GLOBALS['SITE_DB']->query_update('points_ledger', $map, ['id' => $linked_to['id']], '', 1);
    }

    // Process notifications
    if ($send_notifications !== null) {
        points_dispatch_notification($id, $sender_id, $recipient_id, $reason, $actual_points, $actual_gift_points, $anonymous, $send_notifications, true);
    }

    // Process usergroup promotion
    if (get_forum_type() == 'cns') {
        require_code('cns_posts_action');
        require_code('cns_posts_action2');
        cns_member_handle_promotion($recipient_id);
    }

    return $id;
}

/**
 * Actualisation for processing the points transaction and putting it into the ledger.
 * This adds the points transaction into the ledger (officiating the points transaction) and re-calculates points CPFs and cache.
 *
 * @param  MEMBER $sender_id The member sending the points (use guest ID for a credit from the system)
 * @param  MEMBER $recipient_id The member receiving the points (use guest ID for a debit to the system)
 * @param  SHORT_TEXT $reason The reason for this transaction used in the logs
 * @param  integer $amount_points Number of regular points transacted (does not include gift points)
 * @param  integer $amount_gift_points Number of gift points transacted
 * @param  BINARY $anonymous Whether the sender_id for this transaction should be hidden
 * @param  integer $status The status of this transaction (see LEDGER_STATUS_*)
 * @set normal reversing reversed
 * @param  BINARY $locked Whether this transaction is irreversible
 * @param  ?array $linked_to The database row of the points_ledger this one relates to (null: does not relate to another ledger)
 * @param  ID_TEXT $t_type An identifier to relate this transaction with other transactions of the same $type (e.g. content type)
 * @param  ID_TEXT $t_subtype An identifier to relate this transaction with other transactions of the same $type and $subtype (e.g. an action performed on the $type)
 * @param  ID_TEXT $t_type_id Some content or row ID of the specified $type
 * @param  ?TIME $time The time this transaction occurred (null: now)
 * @return AUTO_LINK The ID of the point transaction in the ledger
 * @ignore
 */
function _points_transact(int $sender_id, int $recipient_id, string $reason, int $amount_points, int $amount_gift_points, int $anonymous = 0, int $status = 0, int $locked = 0, ?array $linked_to = null, string $t_type = '', string $t_subtype = '', string $t_type_id = '', ?int $time = null) : int
{
    if ($time === null) {
        $time = time();
    }

    $map = [
        'sender_id' => $sender_id,
        'recipient_id' => $recipient_id,
        'amount_gift_points' => $amount_gift_points,
        'amount_points' => $amount_points,
        'date_and_time' => $time,
        'anonymous' => $anonymous,
        'linked_to' => (($linked_to !== null) ? $linked_to['id'] : null),
        'status' => $status,
        'locked' => $locked,
        't_type' => $t_type,
        't_subtype' => $t_subtype,
        't_type_id' => $t_type_id,
    ];
    $map += insert_lang_comcode('reason', $reason, 4);
    $id = $GLOBALS['SITE_DB']->query_insert('points_ledger', $map, true);

    // Adjust points_balance
    $amount_total = $amount_points + $amount_gift_points;

    // Adjust CPFs (it is assumed we would never add a 'reversed' transaction; the transaction should have already existed and is being updated)
    switch ($status) {
        case LEDGER_STATUS_NORMAL:
            _points_adjust_cpf($sender_id, 'points_balance', -$amount_points);
            _points_adjust_cpf($recipient_id, 'points_balance', $amount_total);
            if (!is_guest($recipient_id)) {
                _points_adjust_cpf($recipient_id, 'points_lifetime', $amount_total);
            }
            break;
        case LEDGER_STATUS_REVERSING:
        case LEDGER_STATUS_REFUND:
            _points_adjust_cpf($sender_id, 'points_balance', -$amount_total);
            _points_adjust_cpf($recipient_id, 'points_balance', $amount_points);
            if (!is_guest($sender_id)) {
                _points_adjust_cpf($sender_id, 'points_lifetime', -$amount_total);
            }
            break;
        default: // LEDGER_STATUS_REVERSED (should never be added as a new transaction) or a non-valid status
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    // Flush cache
    points_flush_runtime_cache($sender_id);
    points_flush_runtime_cache($recipient_id);

    return $id;
}

/**
 * Calculate how many points will be transacted from the sender to the recipient.
 *
 * @param  MEMBER $sender_id The ID of the member sending the points
 * @param  integer $total_points The total number of points to transact (includes gift points when applicable)
 * @param  ?integer $amount_gift_points The strict number of $total_points which should come from the sender's gift points (null: use what gift points the sender has available)
 * @return ?array Duple containing the number of regular points (key 0) and number of gift points (key 1) that should be transacted from the sender (null: not enough points to satisfy the conditions specified)
 */
function _points_transact_calculate(int $sender_id, int $total_points, ?int $amount_gift_points = null) : ?array
{
    $actual_points = $total_points;
    $actual_gift_points = ($amount_gift_points !== null) ? $amount_gift_points : 0;

    // Calculate how many gift points to use
    if (get_option('enable_gift_points') == '1') {
        if (!is_guest($sender_id)) {
            if (($amount_gift_points === null) || ($amount_gift_points > 0)) {
                $sender_gift_points_balance = gift_points_balance($sender_id);
                if ($amount_gift_points !== null && $sender_gift_points_balance < $amount_gift_points) {
                    return null; // Not enough points to proceed
                }
                if ($amount_gift_points === null) {
                    $actual_gift_points = min($total_points, $sender_gift_points_balance);
                }
            } else {
                $actual_gift_points = 0;
            }
        }
        $actual_points = $total_points - $actual_gift_points;
    } else {
        $actual_points = $total_points;
        $actual_gift_points = 0;
    }

    // Make sure the member has enough points for the rest
    if (!is_guest($sender_id) && ($actual_points > 0)) { // If actual_points <=0, transaction should pass even if balance is <=0
        $points_balance = points_balance($sender_id);
        if ($points_balance < $actual_points) {
            return null; // Not enough points to proceed
        }
    }

    return [$actual_points, $actual_gift_points];
}

/**
 * Calculate how many points will be refunded to the recipient.
 *
 * @param  integer $total_points The total number of points to refund (includes gift points when applicable)
 * @param  integer $amount_gift_points The strict number of $total_points which should be refunded
 * @return array Duple containing the number of regular points (key 0) and number of gift points (key 1) that should be refunded
 */
function _points_refund_calculate(int $total_points, int $amount_gift_points = 0) : array
{
    $actual_points = $total_points;
    $actual_gift_points = $amount_gift_points;

    // Calculate how many gift points to use
    if (get_option('enable_gift_points') == '1') {
        $actual_points = $total_points - $amount_gift_points;
        $actual_gift_points = $amount_gift_points;
    } else {
        $actual_points = $total_points;
        $actual_gift_points = 0;
    }

    return [$actual_points, $actual_gift_points];
}

/**
 * Fully reverse a points transaction.
 * This creates a new transaction that reverses the old one (e.g. refunding points), links the two transactions, and locks them.
 *
 * @param  AUTO_LINK $id The ID of the transaction ledger to reverse
 * @param  ?boolean $send_notifications Whether to send notifications for this transaction (false: only the staff get it) (true: both the member and staff get it) (null: neither the member nor staff get it)
 * @param  boolean $fail_ok Whether having a missing resource or condition preventing transaction reversal should not warn_exit
 * @return ?array Tuple; the ID of the new transaction reversing, a boolean whether an escrow was also cancelled during the reversal, and an array of additional point transactions that were reversed because they had a reverse_link to this one (null: the transaction was not reversed and $fail_ok was true)
 */
function points_transaction_reverse(int $id, ?bool $send_notifications = true, bool $fail_ok = false) : ?array
{
    require_lang('points');

    $rows = $GLOBALS['SITE_DB']->query_select('points_ledger', ['*'], ['id' => $id], '', 1);
    if (!array_key_exists(0, $rows)) {
        if ($fail_ok) {
            return null;
        }
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }
    $myrow = $rows[0];

    // Cannot reverse locked transactions or transactions already reversed
    if (($myrow['locked'] == 1) || ($myrow['status'] == LEDGER_STATUS_REVERSED) || ($myrow['status'] == LEDGER_STATUS_REVERSING)) {
        if ($fail_ok) {
            return null;
        }
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    $amount_gift_points = $myrow['amount_gift_points'];
    $total_points = $myrow['amount_points'];
    $sender_id = $myrow['sender_id'];
    $recipient_id = $myrow['recipient_id'];
    $_reason = get_translated_tempcode('points_ledger', $myrow, 'reason');
    $reason = do_lang_tempcode('REVERSED_TRANSACTION', $_reason);

    // Process the reversal as a new 'reversing' transaction
    $new_record = points_refund($recipient_id, $sender_id, $reason->evaluate(), $total_points + $amount_gift_points, $amount_gift_points, $myrow['anonymous'], $myrow, $send_notifications, '', '', '', null, LEDGER_STATUS_REVERSING);

    // Log it
    log_it('REVERSE_TRANSACTION', strval($id), get_translated_text($myrow['reason']));

    // Also cancel active escrows relating to this transaction, but do not create refund transactions for them (the reversal already refunded them)
    $cancelled_escrow = false;
    require_code('points_escrow');
    $escrows = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['original_points_ledger_id' => $id]);
    foreach ($escrows as $escrow) {
        if ($escrow['status'] < ESCROW_STATUS_PENDING) {
            continue;
        }
        $reason = do_lang_tempcode('ESCROW_CANCELLED_LEDGER_REVERSED');
        cancel_escrow($escrow['id'], get_member(), $reason->evaluate(), $escrow, false);
        $cancelled_escrow = true;
    }

    // Also reverse any transactions with reverse_link to this one (cyclic links are averted by the additional status/locked check towards the beginning of this function)
    $also_reverse = $GLOBALS['SITE_DB']->query_select('points_ledger', ['id'], ['locked' => 0, 't_type' => 'reverse_link', 't_type_id' => strval($id)]);
    $also_reversed = [];
    foreach ($also_reverse as $row2) {
        points_transaction_reverse($row2['id'], true, true); // Do not warn_exit on errors pertaining to recursive reversals; just ignore them
        $also_reversed[] = $row2['id'];
    }

    return [$new_record, $cancelled_escrow, $also_reversed];
}

/**
 * Adjust a custom profile field for points and update the cache.
 * This API method should never be called outside _points_transact as doing so violates the tenets of the points system.
 *
 * @param  MEMBER $member_id The member to adjust
 * @param  ID_TEXT $field_name The custom field to adjust
 * @set points_balance points_lifetime
 * @param  integer $adjustment By how much to adjust the field (use a negative number to subtract)
 * @ignore
 */
function _points_adjust_cpf(int $member_id, string $field_name, int $adjustment) : void
{
    // Check for invalid field
    if (!in_array($field_name, ['points_balance', 'points_lifetime'])) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    // Skip if there is nothing to change
    if ($adjustment == 0) {
        return;
    }

    // Skip guests
    if (is_guest($member_id)) {
        return;
    }

    $values = $GLOBALS['FORUM_DRIVER']->get_custom_fields($member_id);
    if ($values === null) {
        $values = [];
    }
    $old = array_key_exists($field_name, $values) ? @intval($values[$field_name]) : 0;
    $new = max(-2147483648, min(2147483647, $old + $adjustment)); // TODO: #3046 in tracker
    $GLOBALS['FORUM_DRIVER']->set_custom_field($member_id, $field_name, strval($new));

    // Update cache
    global $POINT_INFO_CACHE;
    if ((array_key_exists($member_id, $POINT_INFO_CACHE)) && (array_key_exists($field_name, $POINT_INFO_CACHE[$member_id]))) {
        $POINT_INFO_CACHE[$member_id][$field_name] = $new;
    }
}

/**
 * Dispatch a points transaction notification to staff and optionally to the members involved.
 *
 * @param  AUTO_LINK $id The ID of the points ledger record pertaining to this notification
 * @param  MEMBER $sender_id The member sending points
 * @param  MEMBER $recipient_id The member receiving points
 * @param  SHORT_TEXT $reason The reason for this transaction
 * @param  integer $actual_points The actual number of regular points transacted
 * @param  integer $actual_gift_points The actual number of gift points transacted
 * @param  BINARY $anonymous Whether the sender should be kept hidden
 * @param  boolean $send_member_notifications Also send the notification to the members involved in this transaction
 * @param  boolean $is_refund Whether the transaction was a refund
 */
function points_dispatch_notification(int $id, int $sender_id, int $recipient_id, string $reason, int $actual_points, int $actual_gift_points, int $anonymous = 0, bool $send_member_notifications = true, bool $is_refund = false)
{
    require_code('notifications');
    require_lang('points');

    $your_username = $GLOBALS['FORUM_DRIVER']->get_username($sender_id);
    $your_displayname = $GLOBALS['FORUM_DRIVER']->get_username($sender_id, true);
    $total_points = $actual_points + $actual_gift_points;

    // Mask sender on anonymous transactions
    if ($anonymous == 1) {
        $_your_username = do_lang('NOTIFICATION_POINTS_TRANSACTION_ANON_L');
        $_your_displayname = do_lang('NOTIFICATION_POINTS_TRANSACTION_ANON_L');
    } else {
        $_your_username = $your_username;
        $_your_displayname = $your_displayname;
    }

    $their_username = $GLOBALS['FORUM_DRIVER']->get_username($recipient_id, false, USERNAME_DEFAULT_ERROR);
    $their_displayname = $GLOBALS['FORUM_DRIVER']->get_username($recipient_id, true, USERNAME_DEFAULT_ERROR);

    if ($send_member_notifications) {
        // Sender
        if (!is_guest($sender_id)) {
            $transaction_type = is_guest($recipient_id) ? do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_DEBITED_L') : do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_SENT_L');
            $url = points_url($sender_id);
            $message_raw = do_notification_lang(
                is_guest($recipient_id) ? 'NOTIFICATION_POINTS_TRANSACTION_GUEST' : 'NOTIFICATION_POINTS_TRANSACTION',
                $transaction_type,
                (($actual_gift_points !== 0) && (!$is_refund)) ? do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_GIFT_POINTS_L', comcode_escape(integer_format($actual_points)), comcode_escape(integer_format($actual_gift_points))) : do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_POINTS_L', comcode_escape(integer_format($total_points))),
                [
                    is_guest($recipient_id) ? '' : do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_TO_L', comcode_escape($their_displayname)),
                    comcode_escape($reason),
                    $url->evaluate(),
                    do_lang('_POINTS', comcode_escape($your_displayname)),
                ],
                get_lang($sender_id)
            );
            $subject = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_SUBJECT', $transaction_type);
            // Leave this comment: Any code overrides attaching additional information to the sender notification should go here.
            dispatch_notification('points_transaction', null, $subject->evaluate(get_lang($sender_id)), $message_raw->evaluate(get_lang($sender_id)), [$sender_id], A_FROM_SYSTEM_UNPRIVILEGED);
        }

        // Recipient
        if (!is_guest($recipient_id)) {
            $transaction_type = new Tempcode();
            if ($is_refund) {
                $transaction_type = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_REFUNDED_L');
            } elseif (is_guest($sender_id)) {
                $transaction_type = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_CREDITED_L');
            } else {
                $transaction_type = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_RECEIVED_L');
            }
            $url = points_url($recipient_id);
            $message_raw = do_notification_lang(
                is_guest($sender_id) ? 'NOTIFICATION_POINTS_TRANSACTION_GUEST' : 'NOTIFICATION_POINTS_TRANSACTION',
                $transaction_type,
                (($is_refund) && ($actual_gift_points !== 0)) ? do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_GIFT_POINTS_L', comcode_escape(integer_format($actual_points)), comcode_escape(integer_format($actual_gift_points))) : do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_POINTS_L', comcode_escape(integer_format($total_points))),
                [
                    is_guest($recipient_id) ? '' : do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_FROM_L', comcode_escape($_your_displayname)),
                    comcode_escape($reason),
                    $url->evaluate(),
                    do_lang('_POINTS', comcode_escape($their_displayname)),
                ],
                get_lang($recipient_id)
            );
            $subject = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_SUBJECT', $transaction_type);
            // Leave this comment: Any code overrides attaching additional information to the recipient notification should go here.
            dispatch_notification('points_transaction', null, $subject->evaluate(get_lang($recipient_id)), $message_raw->evaluate(get_lang($recipient_id)), [$recipient_id], A_FROM_SYSTEM_UNPRIVILEGED);
        }
    }

    // Staff notifications
    $transaction_type = new Tempcode();
    $subject = new Tempcode();
    $primary_member = '';
    $secondary_member = '';
    if ($is_refund) {
        $transaction_type = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_REFUNDED_L');
        $subject = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_SUBJECT_STAFF', escape_html($their_username), $transaction_type);
        $primary_member = $their_username;
    } elseif (is_guest($sender_id)) {
        $transaction_type = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_CREDITED_L');
        $subject = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_SUBJECT_STAFF', escape_html($their_username), $transaction_type);
        $primary_member = $their_username;
    } elseif (is_guest($recipient_id)) {
        $transaction_type = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_DEBITED_L');
        $subject = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_SUBJECT_STAFF', escape_html($_your_username), $transaction_type);
        $primary_member = $_your_username;
    } else {
        $transaction_type = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_RECEIVED_L');
        $subject = do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_SUBJECT_STAFF', escape_html($their_username), $transaction_type);
        $primary_member = $their_username;
        $secondary_member = do_lang('NOTIFICATION_POINTS_TRANSACTION_FROM_L', escape_html($_your_username));
    }
    $url = build_url(['page' => 'admin_points', 'type' => 'view', 'id' => $id], get_module_zone('admin_points'));
    $message_raw = do_notification_lang(
        ($secondary_member != '') ? 'NOTIFICATION_POINTS_TRANSACTION_STAFF' : 'NOTIFICATION_POINTS_TRANSACTION_STAFF_GUEST',
        $transaction_type,
        comcode_escape($primary_member),
        [
            (($is_refund) && ($actual_gift_points !== 0)) ? do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_GIFT_POINTS_L', comcode_escape(integer_format($actual_points)), comcode_escape(integer_format($actual_gift_points))) : do_lang_tempcode('NOTIFICATION_POINTS_TRANSACTION_POINTS_L', comcode_escape(integer_format($total_points))),
            comcode_escape($secondary_member),
            $url->evaluate(),
            comcode_escape($reason),
        ]
    );
    // Leave this comment: Any code overrides attaching additional information to the staff notification should go here.
    dispatch_notification('points_transaction_staff', null, $subject->evaluate(get_site_default_lang()), $message_raw->evaluate(get_site_default_lang()), null, A_FROM_SYSTEM_UNPRIVILEGED);
}
