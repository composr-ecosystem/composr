<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    calendar
 */

/**
 * Add a calendar event.
 *
 * @param  AUTO_LINK $type The event type
 * @param  SHORT_TEXT $recurrence The recurrence code (set to 'none' for no recurrences)
 * @param  ?integer $recurrences The number of recurrences (null: none/infinite)
 * @param  BINARY $seg_recurrences Whether to segregate the comment-topics/rating/trackbacks per-recurrence
 * @param  SHORT_TEXT $title The title of the event
 * @param  LONG_TEXT $content The full text describing the event
 * @param  integer $priority The priority
 * @range  1 5
 * @param  integer $start_year The year the event starts at
 * @param  integer $start_month The month the event starts at
 * @param  integer $start_day The day the event starts at
 * @param  ID_TEXT $start_monthly_spec_type In-month specification type for start date
 * @set day_of_month day_of_month_backwards dow_of_month dow_of_month_backwards
 * @param  ?integer $start_hour The hour the event starts at (null: all day)
 * @param  ?integer $start_minute The minute the event starts at (null: all day)
 * @param  ?integer $end_year The year the event ends at (null: not a multi day event)
 * @param  ?integer $end_month The month the event ends at (null: not a multi day event)
 * @param  ?integer $end_day The day the event ends at (null: not a multi day event)
 * @param  ID_TEXT $end_monthly_spec_type In-month specification type for end date
 * @set day_of_month day_of_month_backwards dow_of_month dow_of_month_backwards
 * @param  ?integer $end_hour The hour the event ends at (null: not a multi day event)
 * @param  ?integer $end_minute The minute the event ends at (null: not a multi day event)
 * @param  ?ID_TEXT $timezone The timezone for the event (null: current user's timezone)
 * @param  BINARY $do_timezone_conv Whether the time should be presented in the viewer's own timezone
 * @param  ?MEMBER $member_calendar The member's calendar it will be on (null: not on a specific member's calendar)
 * @param  BINARY $validated Whether the event has been validated
 * @param  BINARY $allow_rating Whether the event may be rated
 * @param  SHORT_INTEGER $allow_comments Whether comments are allowed (0=no, 1=yes, 2=review style)
 * @param  BINARY $allow_trackbacks Whether the event may be trackbacked
 * @param  LONG_TEXT $notes Hidden notes pertaining to the event
 * @param  ?MEMBER $submitter The event submitter (null: current member)
 * @param  integer $views The number of views so far
 * @param  ?TIME $add_time The add time (null: now)
 * @param  ?TIME $edit_time The edit time (null: never)
 * @param  ?AUTO_LINK $id Force an ID (null: don't force an ID)
 * @param  ?SHORT_TEXT $meta_keywords Meta keywords for this resource (null: do not edit) (blank: implicit)
 * @param  ?LONG_TEXT $meta_description Meta description for this resource (null: do not edit) (blank: implicit)
 * @param  array $regions The regions (empty: not region-limited)
 * @return AUTO_LINK The ID of the event
 */
function add_calendar_event(int $type, string $recurrence, ?int $recurrences, int $seg_recurrences, string $title, string $content, int $priority, int $start_year, int $start_month, int $start_day, string $start_monthly_spec_type, ?int $start_hour, ?int $start_minute, ?int $end_year = null, ?int $end_month = null, ?int $end_day = null, string $end_monthly_spec_type = 'day_of_month', ?int $end_hour = null, ?int $end_minute = null, ?string $timezone = null, int $do_timezone_conv = 1, ?int $member_calendar = null, int $validated = 1, int $allow_rating = 1, int $allow_comments = 1, int $allow_trackbacks = 1, string $notes = '', ?int $submitter = null, int $views = 0, ?int $add_time = null, ?int $edit_time = null, ?int $id = null, ?string $meta_keywords = '', ?string $meta_description = '', array $regions = []) : int
{
    if ($submitter === null) {
        $submitter = function_exists('get_member') ? get_member() : get_first_admin_user();
    }
    if ($add_time === null) {
        $add_time = time();
    }

    if ($timezone === null) {
        $timezone = get_users_timezone();
    }

    require_code('comcode_check');

    if ($type != db_get_first_id()) {
        check_comcode($content, null, false, null, true);
    }

    require_code('global4');
    prevent_double_submit('ADD_CALENDAR_EVENT', null, $title);

    if (!addon_installed('validation')) {
        $validated = 1;
    }
    $map = [
        'e_submitter' => $submitter,
        'e_member_calendar' => $member_calendar,
        'e_views' => $views,
        'e_content' => 0,
        'e_add_date' => $add_time,
        'e_edit_date' => $edit_time,
        'e_recurrence' => $recurrence,
        'e_recurrences' => $recurrences,
        'e_seg_recurrences' => $seg_recurrences,
        'e_start_year' => $start_year,
        'e_start_month' => $start_month,
        'e_start_day' => $start_day,
        'e_start_monthly_spec_type' => $start_monthly_spec_type,
        'e_start_hour' => $start_hour,
        'e_start_minute' => $start_minute,
        'e_end_year' => $end_year,
        'e_end_month' => $end_month,
        'e_end_day' => $end_day,
        'e_end_monthly_spec_type' => $end_monthly_spec_type,
        'e_end_hour' => $end_hour,
        'e_end_minute' => $end_minute,
        'e_timezone' => $timezone,
        'e_do_timezone_conv' => $do_timezone_conv,
        'e_priority' => $priority,
        'e_type' => $type,
        'validated' => $validated,
        'allow_rating' => $allow_rating,
        'allow_comments' => $allow_comments,
        'allow_trackbacks' => $allow_trackbacks,
        'notes' => $notes,
        'e_previous_recurrence_time' => null,
        'e_next_recurrence_time' => '?TIME',
    ];
    $map += insert_lang_comcode('e_title', $title, 2);
    if (multi_lang_content()) {
        $map['e_content'] = 0;
    } else {
        $map['e_content'] = '';
        $map['e_content__text_parsed'] = '';
        $map['e_content__source_user'] = get_member();
    }
    $map += insert_lang_comcode('e_title', $title, 2);
    if ($id !== null) {
        $map['id'] = $id;
    }

    require_code('calendar');
    $map['e_next_recurrence_time'] = get_calendar_event_first_date_wrap($map);

    $id = $GLOBALS['SITE_DB']->query_insert('calendar_events', $map, true);

    if ($type != db_get_first_id()) {
        require_code('attachments2');
        $comcode_lang_map = insert_lang_comcode_attachments('e_content', 3, $content, 'calendar', strval($id));
    } else {
        $comcode_lang_map = insert_lang('e_content', $content, 3);
    }
    $GLOBALS['SITE_DB']->query_update('calendar_events', $comcode_lang_map, ['id' => $id], '', 1);

    foreach ($regions as $region) {
        $GLOBALS['SITE_DB']->query_insert('content_regions', ['content_type' => 'event', 'content_id' => strval($id), 'region' => $region]);
    }

    require_code('content2');
    if (($meta_keywords == '') && ($meta_description == '')) {
        seo_meta_set_for_implicit('event', strval($id), [$title, $content], $content);
    } else {
        seo_meta_set_for_explicit('event', strval($id), $meta_keywords, $meta_description);
    }

    if (function_exists('delete_cache_entry')) {
        delete_cache_entry('side_calendar');
    }

    if ($validated == 1) {
        if (addon_installed('content_privacy')) {
            require_code('content_privacy');
            $privacy_limits = privacy_limits_for('event', strval($id));
        } else {
            $privacy_limits = null;
        }

        require_lang('calendar');
        require_code('calendar');
        require_code('notifications');
        list($date_range) = get_calendar_event_first_date($timezone, $do_timezone_conv, $start_year, $start_month, $start_day, $start_monthly_spec_type, $start_hour, $start_minute, $end_year, $end_month, $end_day, $end_monthly_spec_type, $end_hour, $end_minute, $recurrence, $recurrences);
        $subject = do_lang('CALENDAR_EVENT_NOTIFICATION_MAIL_SUBJECT', get_site_name(), strip_comcode($title), $date_range);
        $self_url = build_url(['page' => 'calendar', 'type' => 'view', 'id' => $id], get_module_zone('calendar'), [], false, false, true);
        $mail = do_notification_lang('CALENDAR_EVENT_NOTIFICATION_MAIL', comcode_escape(get_site_name()), comcode_escape($title), [$self_url->evaluate(), comcode_escape($date_range)]);
        dispatch_notification('calendar_event', strval($type), $subject, $mail, $privacy_limits);
    }

    if ($member_calendar !== null) {
        if ($submitter != $member_calendar) {
            require_lang('calendar');
            require_code('calendar');
            require_code('notifications');
            $username = $GLOBALS['FORUM_DRIVER']->get_username($submitter);
            list($date_range) = get_calendar_event_first_date($timezone, $do_timezone_conv, $start_year, $start_month, $start_day, $start_monthly_spec_type, $start_hour, $start_minute, $end_year, $end_month, $end_day, $end_monthly_spec_type, $end_hour, $end_minute, $recurrence, $recurrences);
            $subject = do_lang('MEMBER_CALENDAR_NOTIFICATION_NEW_EVENT_SUBJECT', get_site_name(), strip_comcode($title), [$date_range, $username]);
            $self_url = build_url(['page' => 'calendar', 'type' => 'view', 'id' => $id, 'member_id' => $member_calendar, 'private' => 1], get_module_zone('calendar'), [], false, false, true);
            $mail = do_notification_lang('MEMBER_CALENDAR_NOTIFICATION_NEW_EVENT_BODY', comcode_escape(get_site_name()), comcode_escape($title), [$self_url->evaluate(), comcode_escape($date_range), comcode_escape($username)]);
            dispatch_notification('member_calendar_changes', strval($member_calendar), $subject, $mail, [$member_calendar]);
        }
    }

    log_it('ADD_CALENDAR_EVENT', strval($id), $title);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('event', strval($id), null, null, true);
    }

    require_code('member_mentions');
    dispatch_member_mention_notifications('event', strval($id), $submitter);

    if ($validated == 1) {
        require_code('sitemap_xml');
        notify_sitemap_node_add('_SEARCH:calendar:view:' . strval($id));
    }

    return $id;
}

/**
 * Edit a calendar event.
 *
 * @param  AUTO_LINK $id The ID of the event
 * @param  ?AUTO_LINK $type The event type (null: default)
 * @param  SHORT_TEXT $recurrence The recurrence code
 * @param  ?integer $recurrences The number of recurrences (null: none/infinite)
 * @param  BINARY $seg_recurrences Whether to segregate the comment-topics/rating/trackbacks per-recurrence
 * @param  SHORT_TEXT $title The title of the event
 * @param  LONG_TEXT $content The full text describing the event
 * @param  integer $priority The priority
 * @range  1 5
 * @param  integer $start_year The year the event starts at
 * @param  integer $start_month The month the event starts at
 * @param  integer $start_day The day the event starts at
 * @param  ID_TEXT $start_monthly_spec_type In-month specification type for start date
 * @set day_of_month day_of_month_backwards dow_of_month dow_of_month_backwards
 * @param  ?integer $start_hour The hour the event starts at (null: all day)
 * @param  ?integer $start_minute The minute the event starts at (null: all day)
 * @param  ?integer $end_year The year the event ends at (null: not a multi day event)
 * @param  ?integer $end_month The month the event ends at (null: not a multi day event)
 * @param  ?integer $end_day The day the event ends at (null: not a multi day event)
 * @param  ID_TEXT $end_monthly_spec_type In-month specification type for end date
 * @set day_of_month day_of_month_backwards dow_of_month dow_of_month_backwards
 * @param  ?integer $end_hour The hour the event ends at (null: not a multi day event)
 * @param  ?integer $end_minute The minute the event ends at (null: not a multi day event)
 * @param  ?ID_TEXT $timezone The timezone for the event (null: current user's timezone)
 * @param  BINARY $do_timezone_conv Whether the time should be presented in the viewer's own timezone
 * @param  ?MEMBER $member_calendar The member's calendar it will be on (null: not on a specific member's calendar)
 * @param  SHORT_TEXT $meta_keywords Meta keywords
 * @param  LONG_TEXT $meta_description Meta description
 * @param  ?BINARY $validated Whether the event has been validated (null: don't change)
 * @param  BINARY $allow_rating Whether the event may be rated
 * @param  SHORT_INTEGER $allow_comments Whether comments are allowed (0=no, 1=yes, 2=review style)
 * @param  BINARY $allow_trackbacks Whether the event may be trackbacked
 * @param  LONG_TEXT $notes Hidden notes pertaining to the event
 * @param  ?TIME $edit_time Edit time (null: either means current time, or if $null_is_literal, means reset to to null)
 * @param  ?TIME $add_time Add time (null: do not change)
 * @param  ?integer $views Number of views (null: do not change)
 * @param  ?MEMBER $submitter Submitter (null: do not change)
 * @param  array $regions The regions (empty: not region-limited)
 * @param  boolean $null_is_literal Determines whether some nulls passed mean 'use a default' or literally mean 'set to null'
 */
function edit_calendar_event(int $id, ?int $type, string $recurrence, ?int $recurrences, int $seg_recurrences, string $title, string $content, int $priority, int $start_year, int $start_month, int $start_day, string $start_monthly_spec_type, ?int $start_hour, ?int $start_minute, ?int $end_year, ?int $end_month, ?int $end_day, string $end_monthly_spec_type, ?int $end_hour, ?int $end_minute, ?string $timezone, int $do_timezone_conv, ?int $member_calendar, string $meta_keywords, string $meta_description, ?int $validated, int $allow_rating, int $allow_comments, int $allow_trackbacks, string $notes, ?int $edit_time = null, ?int $add_time = null, ?int $views = null, ?int $submitter = null, array $regions = [], bool $null_is_literal = false)
{
    if ($edit_time === null) {
        $edit_time = $null_is_literal ? null : time();
    }

    $rows = $GLOBALS['SITE_DB']->query_select('calendar_events', ['*'], ['id' => $id], '', 1);
    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'event'));
    }
    $myrow = $rows[0];

    require_code('urls2');
    suggest_new_idmoniker_for('calendar', 'view', strval($id), '', $title);

    require_code('content2');
    seo_meta_set_for_explicit('event', strval($id), $meta_keywords, $meta_description);

    require_code('attachments2');
    require_code('attachments3');

    if (!addon_installed('validation')) {
        $validated = 1;
    }

    require_code('submit');
    $just_validated = (!content_validated('event', strval($id))) && ($validated == 1);
    if ($just_validated) {
        send_content_validated_notification('event', strval($id));
        $username = $GLOBALS['FORUM_DRIVER']->get_username(get_member());
        log_it('VALIDATE_CALENDAR_EVENT', strval($id), $username);
    }

    $scheduling_map = [
        'e_start_year' => $start_year,
        'e_start_month' => $start_month,
        'e_start_day' => $start_day,
        'e_start_monthly_spec_type' => $start_monthly_spec_type,
        'e_start_hour' => $start_hour,
        'e_start_minute' => $start_minute,
        'e_end_year' => $end_year,
        'e_end_month' => $end_month,
        'e_end_day' => $end_day,
        'e_end_monthly_spec_type' => $end_monthly_spec_type,
        'e_end_hour' => $end_hour,
        'e_end_minute' => $end_minute,
        'e_timezone' => $timezone,
    ];
    $rescheduled = false;
    foreach ($scheduling_map as $key => $val) {
        if ($myrow[$key] != $val) {
            $rescheduled = true;
        }
    }
    $update_map = [
        'e_recurrence' => $recurrence,
        'e_recurrences' => $recurrences,
        'e_seg_recurrences' => $seg_recurrences,
        'e_do_timezone_conv' => $do_timezone_conv,
        'e_priority' => $priority,
        'e_type' => $type,
        'allow_rating' => $allow_rating,
        'allow_comments' => $allow_comments,
        'allow_trackbacks' => $allow_trackbacks,
        'e_member_calendar' => $member_calendar,
        'notes' => $notes,
    ];
    $update_map += $scheduling_map;
    $update_map += lang_remap_comcode('e_title', $myrow['e_title'], $title);

    if ($type != db_get_first_id()) {
        require_code('attachments2');
        $update_map += update_lang_comcode_attachments('e_content', $myrow['e_content'], $content, 'calendar', strval($id), null, $myrow['e_submitter']);
    } else {
        $update_map += lang_remap('e_content', $myrow['e_content'], $content);
    }

    if ($validated !== null) {
        $update_map['validated'] = $validated;
    }
    $update_map['e_edit_date'] = $edit_time;
    if ($add_time !== null) {
        $update_map['e_add_date'] = $add_time;
    }
    if ($views !== null) {
        $update_map['e_views'] = $views;
    }
    if ($submitter !== null) {
        $update_map['e_submitter'] = $submitter;
    }

    $GLOBALS['SITE_DB']->query_update('calendar_events', $update_map, ['id' => $id], '', 1);

    $GLOBALS['SITE_DB']->query_delete('content_regions', ['content_type' => 'event', 'content_id' => strval($id)]);
    foreach ($regions as $region) {
        $GLOBALS['SITE_DB']->query_insert('content_regions', ['content_type' => 'event', 'content_id' => strval($id), 'region' => $region]);
    }

    $self_url = build_url(['page' => 'calendar', 'type' => 'view', 'id' => $id], get_module_zone('calendar'), [], false, false, true);

    if ($just_validated) {
        if (addon_installed('content_privacy')) {
            require_code('content_privacy');
            $privacy_limits = privacy_limits_for('event', strval($id));
        } else {
            $privacy_limits = null;
        }

        require_lang('calendar');
        require_code('calendar');
        require_code('notifications');
        list($date_range) = get_calendar_event_first_date($timezone, $do_timezone_conv, $start_year, $start_month, $start_day, $start_monthly_spec_type, $start_hour, $start_minute, $end_year, $end_month, $end_day, $end_monthly_spec_type, $end_hour, $end_minute, $recurrence, $recurrences);
        $subject = do_lang('CALENDAR_EVENT_NOTIFICATION_MAIL_SUBJECT', get_site_name(), strip_comcode($title), $date_range);
        $self_url = build_url(['page' => 'calendar', 'type' => 'view', 'id' => $id], get_module_zone('calendar'), [], false, false, true);
        $mail = do_notification_lang('CALENDAR_EVENT_NOTIFICATION_MAIL', comcode_escape(get_site_name()), comcode_escape($title), [$self_url->evaluate(), comcode_escape($date_range)]);
        dispatch_notification('calendar_event', strval($type), $subject, $mail, $privacy_limits);
    }

    if ($member_calendar !== null) {
        if ($submitter !== null) {
            $myrow['e_submitter'] = $submitter;
        }
        if ($member_calendar != $myrow['e_submitter']) {
            require_lang('calendar');
            require_code('calendar');
            require_code('notifications');
            $username = $GLOBALS['FORUM_DRIVER']->get_username(get_member());
            list($date_range) = get_calendar_event_first_date($timezone, $do_timezone_conv, $start_year, $start_month, $start_day, $start_monthly_spec_type, $start_hour, $start_minute, $end_year, $end_month, $end_day, $end_monthly_spec_type, $end_hour, $end_minute, $recurrence, $recurrences);
            $l_subject = $rescheduled ? 'MEMBER_CALENDAR_NOTIFICATION_RESCHEDULED_EVENT_SUBJECT' : 'MEMBER_CALENDAR_NOTIFICATION_EDITED_EVENT_SUBJECT';
            $subject = do_lang($l_subject, get_site_name(), strip_comcode($title), [$date_range, $username]);
            $self_url = build_url(['page' => 'calendar', 'type' => 'view', 'id' => $id, 'member_id' => $member_calendar, 'private' => 1], get_module_zone('calendar'), [], false, false, true);
            $l_body = $rescheduled ? 'MEMBER_CALENDAR_NOTIFICATION_RESCHEDULED_EVENT_BODY' : 'MEMBER_CALENDAR_NOTIFICATION_EDITED_EVENT_BODY';
            $mail = do_notification_lang($l_body, comcode_escape(get_site_name()), comcode_escape($title), [$self_url->evaluate(), comcode_escape($date_range), comcode_escape($username)]);
            dispatch_notification('member_calendar_changes', strval($member_calendar), $subject, $mail, [(get_member() == $member_calendar) ? $myrow['e_submitter'] : $member_calendar]);
        }
    }

    delete_cache_entry('side_calendar');

    require_code('feedback');
    update_spacer_post(
        $allow_comments != 0,
        'events',
        strval($id),
        $self_url,
        $title,
        process_overridden_comment_forum('calendar', strval($id), strval($type), strval($myrow['e_type']))
    );

    log_it('EDIT_CALENDAR_EVENT', strval($id), $title);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('event', strval($id));
    }

    require_code('sitemap_xml');
    if ($validated == 1) {
        notify_sitemap_node_edit('_SEARCH:calendar:view:' . strval($id));
    } else {
        notify_sitemap_node_delete('_SEARCH:calendar:view:' . strval($id));
    }
}

/**
 * Delete a calendar event.
 *
 * @param  AUTO_LINK $id The ID of the event
 */
function delete_calendar_event(int $id)
{
    $rows = $GLOBALS['SITE_DB']->query_select('calendar_events', ['*'], ['id' => $id], '', 1);

    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'event'));
    }

    $myrow = $rows[0];
    $e_title = get_translated_text($myrow['e_title']);

    $GLOBALS['SITE_DB']->query_delete('calendar_events', ['id' => $id], '', 1);

    $GLOBALS['SITE_DB']->query_delete('calendar_jobs', ['j_event_id' => $id]);
    $GLOBALS['SITE_DB']->query_delete('calendar_reminders', ['e_id' => $id]);

    require_code('content2');
    seo_meta_erase_storage('event', strval($id));

    $GLOBALS['SITE_DB']->query_delete('rating', ['rating_for_type' => 'events', 'rating_for_id' => strval($id)]);
    $GLOBALS['SITE_DB']->query_delete('trackbacks', ['trackback_for_type' => 'events', 'trackback_for_id' => strval($id)]);
    $GLOBALS['SITE_DB']->query_delete('content_regions', ['content_type' => 'event', 'content_id' => strval($id)]);
    require_code('notifications');
    delete_all_notifications_on('comment_posted', 'events_' . strval($id));

    delete_lang($myrow['e_title']);
    require_code('attachments2');
    require_code('attachments3');
    if ($myrow['e_content'] !== null) {
        if ($myrow['e_type'] != db_get_first_id()) {
            delete_lang_comcode_attachments($myrow['e_content'], 'e_content', strval($id));
        } else {
            delete_lang($myrow['e_content']);
        }
    }

    delete_cache_entry('side_calendar');

    $member_calendar = $myrow['e_member_calendar'];
    if ($member_calendar !== null) {
        if ($member_calendar != $myrow['e_submitter']) {
            $timezone = $myrow['e_timezone'];
            $do_timezone_conv = $myrow['e_do_timezone_conv'];
            $start_year = $myrow['e_start_year'];
            $start_month = $myrow['e_start_month'];
            $start_day = $myrow['e_start_day'];
            $start_monthly_spec_type = $myrow['e_start_monthly_spec_type'];
            $start_hour = $myrow['e_start_hour'];
            $start_minute = $myrow['e_start_minute'];
            $end_year = $myrow['e_end_year'];
            $end_month = $myrow['e_end_month'];
            $end_day = $myrow['e_end_day'];
            $end_monthly_spec_type = $myrow['e_end_monthly_spec_type'];
            $end_hour = $myrow['e_end_hour'];
            $end_minute = $myrow['e_end_minute'];
            $recurrence = $myrow['e_recurrence'];
            $recurrences = $myrow['e_recurrences'];

            require_lang('calendar');
            require_code('calendar');
            require_code('notifications');
            $username = $GLOBALS['FORUM_DRIVER']->get_username(get_member());
            list($date_range) = get_calendar_event_first_date($timezone, $do_timezone_conv, $start_year, $start_month, $start_day, $start_monthly_spec_type, $start_hour, $start_minute, $end_year, $end_month, $end_day, $end_monthly_spec_type, $end_hour, $end_minute, $recurrence, $recurrences);
            $subject = do_lang('MEMBER_CALENDAR_NOTIFICATION_DELETED_EVENT_SUBJECT', get_site_name(), strip_comcode($e_title), [$date_range, $username]);
            $mail = do_notification_lang('MEMBER_CALENDAR_NOTIFICATION_DELETED_EVENT_BODY', comcode_escape(get_site_name()), comcode_escape($e_title), [comcode_escape($date_range), comcode_escape($username)]);
            dispatch_notification('member_calendar_changes', strval($member_calendar), $subject, $mail, [(get_member() == $member_calendar) ? $myrow['e_submitter'] : $member_calendar]);
        }
    }

    if (addon_installed('catalogues')) {
        update_catalogue_content_ref('event', strval($id), '');
    }

    $GLOBALS['SITE_DB']->query_update('url_id_monikers', ['m_deprecated' => 1], ['m_resource_page' => 'calendar', 'm_resource_type' => 'view', 'm_resource_id' => strval($id)]);

    log_it('DELETE_CALENDAR_EVENT', strval($id), $e_title);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        expunge_resource_fs_moniker('event', strval($id));
    }

    require_code('sitemap_xml');
    notify_sitemap_node_delete('_SEARCH:calendar:view:' . strval($id));

    if (addon_installed('ecommerce')) {
        require_code('ecommerce_permission_products');
        delete_prod_permission('calendar_type', strval($id));
    }
}

/**
 * Add a calendar event type.
 *
 * @param  SHORT_TEXT $title The title of the event type
 * @param  ID_TEXT $logo The theme image code
 * @param  URLPATH $external_feed URL to external feed to associate with this event type
 * @return AUTO_LINK The ID of the event type
 */
function add_event_type(string $title, string $logo, string $external_feed = '') : int
{
    require_code('global4');
    prevent_double_submit('ADD_EVENT_TYPE', null, $title);

    $map = [
        't_logo' => $logo,
        't_external_feed_url' => $external_feed,
    ];
    $map += insert_lang_comcode('t_title', $title, 2);
    $id = $GLOBALS['SITE_DB']->query_insert('calendar_types', $map, true);

    log_it('ADD_EVENT_TYPE', strval($id), $title);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('calendar_type', strval($id), null, null, true);
    }

    require_code('member_mentions');
    dispatch_member_mention_notifications('calendar_type', strval($id));

    require_code('sitemap_xml');
    notify_sitemap_node_add('_SEARCH:calendar:browse:int_' . strval($id) . '=1');

    return $id;
}

/**
 * Edit a calendar event type.
 *
 * @param  AUTO_LINK $id The ID of the event type
 * @param  SHORT_TEXT $title The title of the event type
 * @param  ID_TEXT $logo The theme image code
 * @param  URLPATH $external_feed URL to external feed to associate with this event type
 */
function edit_event_type(int $id, string $title, string $logo, string $external_feed)
{
    $rows = $GLOBALS['SITE_DB']->query_select('calendar_types', ['*'], ['id' => $id], '', 1);
    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'calendar_type'));
    }
    $myrow = $rows[0];

    require_code('urls2');
    suggest_new_idmoniker_for('calendar', 'browse', strval($id), '', $title);

    $old_theme_img_code = $myrow['t_logo'];
    require_code('themes2');
    tidy_theme_img_code($logo, $old_theme_img_code, 'calendar_types', 't_logo');

    $map = [
        't_logo' => $logo,
        't_external_feed_url' => $external_feed,
    ];
    $map += lang_remap_comcode('t_title', $myrow['t_title'], $title);
    $GLOBALS['SITE_DB']->query_update('calendar_types', $map, ['id' => $id], '', 1);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('calendar_type', strval($id));
    }

    log_it('EDIT_EVENT_TYPE', strval($id), $title);

    require_code('sitemap_xml');
    notify_sitemap_node_edit('_SEARCH:calendar:browse:int_' . strval($id) . '=1');
}

/**
 * Delete a calendar event type.
 *
 * @param  AUTO_LINK $id The ID of the event type
 */
function delete_event_type(int $id)
{
    $rows = $GLOBALS['SITE_DB']->query_select('calendar_types', ['t_title', 't_logo'], ['id' => $id], '', 1);
    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'calendar_type'));
    }
    $myrow = $rows[0];

    $lowest = $GLOBALS['SITE_DB']->query_value_if_there('SELECT MIN(id) FROM ' . get_table_prefix() . 'calendar_types WHERE id<>' . strval($id) . ' AND id<>' . strval(db_get_first_id()));
    if ($lowest === null) {
        warn_exit(do_lang_tempcode('NO_DELETE_LAST_CATEGORY', 'calendar_type'));
    }
    $GLOBALS['SITE_DB']->query_update('calendar_events', ['e_type' => $lowest], ['e_type' => $id]);

    require_code('files2');
    delete_upload('themes/default/images_custom/calendar', 'calendar_types', 't_logo', 'id', $id);

    $old_theme_img_code = $myrow['t_logo'];
    require_code('themes2');
    tidy_theme_img_code(null, $old_theme_img_code, 'calendar_types', 't_logo');


    $GLOBALS['SITE_DB']->query_delete('calendar_types', ['id' => $id], '', 1);

    $GLOBALS['SITE_DB']->query_delete('calendar_interests', ['t_type' => $id]);

    if (addon_installed('catalogues')) {
        update_catalogue_content_ref('event_type', strval($id), '');
    }

    delete_lang($myrow['t_title']);

    $GLOBALS['SITE_DB']->query_delete('group_category_access', ['module_the_name' => 'calendar', 'category_name' => strval($id)]);

    log_it('DELETE_EVENT_TYPE', strval($id), get_translated_text($myrow['t_title']));

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        expunge_resource_fs_moniker('calendar_type', strval($id));
    }

    require_code('sitemap_xml');
    notify_sitemap_node_delete('_SEARCH:calendar:browse:int_' . strval($id) . '=1');
}

/**
 * Helper for getting the Commandr prefix for scheduled calendar events.
 *
 * @param  ID_TEXT $hook Hook to run under systems/commandr_scheduled
 * @param  string $id Unspecified identifier for the resource behind this scheduled event, for future querying to find said event; also passed to the Commandr hook
 * @return string Commandr command prefix before adding json parameters
 */
function _get_schedule_code_prefix(string $hook, string $id) : string
{
    return 'run_scheduled_action ' . $hook . ' "' . $id . '"';
}

/**
 * Create a calendar event containing a Commandr command to execute a scheduled task.
 *
 * @param  ID_TEXT $hook Hook to run under systems/commandr_scheduled
 * @param  string $id Unspecified identifier for the resource behind this scheduled event, for future querying to find said event; also passed to the Commandr hook
 * @param  array $parameters Array of parameters to pass through the Commandr command to the hook
 * @param  string $title Title of the calendar event to create
 * @param  integer $start_year Year which to execute the task
 * @param  integer $start_month Month which to execute the task
 * @param  integer $start_day Day of the month which to execute the task
 * @param  integer $start_hour Hour of the day which to execute the task
 * @param  integer $start_minute Minut of the hour which to execute the task
 * @return AUTO_LINK The ID of the event that was created
 */
function schedule_code(string $hook, string $id, array $parameters, string $title, int $start_year, int $start_month, int $start_day, int $start_hour, int $start_minute) : int
{
    // Parameters should be JSON encoded because it can contain a variety of array key lengths and value types.
    $_parameters = json_encode($parameters);

    // Escape the string
    $_parameters = str_replace(['\\', '<', '>', '"'], ['\\\\', '\\<', '\\>', '\\"'], $_parameters);

    $schedule_code = _get_schedule_code_prefix($hook, $id) . ' "' . $_parameters . '"';

    $event_id = add_calendar_event(db_get_first_id(), 'none', null, 0, $title, $schedule_code, 3, $start_year, $start_month, $start_day, 'day_of_month', $start_hour, $start_minute);
    regenerate_event_reminder_jobs($event_id);

    return $event_id;
}

/**
 * Get the ID of the calendar_events event for the provided scheduled hook and id.
 *
 * @param  ID_TEXT $hook Hook to run under systems/commandr_scheduled
 * @param  string $id Unspecified identifier for the resource behind this scheduled event, for future querying to find said event; also passed to the Commandr hook
 * @return ?AUTO_LINK calendar_events id (null: event was not scheduled)
 */
function _get_schedule_code_event_id(string $hook, string $id) : ?int
{
    $schedule_code = _get_schedule_code_prefix($hook, $id);
    $sql = 'SELECT e.id FROM ' . get_table_prefix() . 'calendar_events e WHERE ' . $GLOBALS['SITE_DB']->translate_field_ref('e_content') . ' LIKE \'' . db_encode_like($schedule_code) . ' %\'';
    return $GLOBALS['SITE_DB']->query_value_if_there($sql, false, true, ['e_content' => 'LONG_TRANS__COMCODE']);
}

/**
 * Remove a run_scheduled_action calendar event based on the provided hook and ID.
 *
 * @param  ID_TEXT $hook Hook to run under systems/commandr_scheduled
 * @param  string $id Unspecified identifier for the resource behind this scheduled event
 */
function unschedule_code(string $hook, string $id)
{
    $past_event = _get_schedule_code_event_id($hook, $id);
    if ($past_event !== null) {
        delete_calendar_event($past_event);
    }
}

/**
 * Get an array containing the time a scheduled event is set, or null if not scheduled.
 *
 * @param  ID_TEXT $hook Hook to run under systems/commandr_scheduled
 * @param  string $id Unspecified identifier for the resource behind this scheduled event, for future querying to find said event; also passed to the Commandr hook
 * @return ?array Array of minute, hour, month, day, and year if the event is scheduled (null: not scheduled)
 */
function get_schedule_code_event_time(string $hook, string $id) : ?array
{
    $past_event_id = _get_schedule_code_event_id($hook, $id);
    $scheduled = null;
    if ($past_event_id !== null) {
        $past_event = $GLOBALS['SITE_DB']->query_select('calendar_events', ['e_start_day', 'e_start_month', 'e_start_year', 'e_start_hour', 'e_start_minute'], ['id' => $past_event_id], '', 1);
        if (array_key_exists(0, $past_event)) {
            require_code('temporal');
            $scheduled = [$past_event[0]['e_start_minute'], $past_event[0]['e_start_hour'], $past_event[0]['e_start_month'], $past_event[0]['e_start_day'], $past_event[0]['e_start_year']];
            if (cms_mktime($scheduled[1], $scheduled[0], 0, $scheduled[2], $scheduled[3], $scheduled[4]) < time()) {
                $scheduled = null;
            }
        }
    }
    return $scheduled;
}
