<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core
 */

/*EXTRA FUNCTIONS: apache\_.+*/

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__users()
{
    global $SESSION_CACHE, $MEMBER_CACHED;
    global $USER_NAME_CACHE, $USERS_GROUPS_CACHE;
    global $SESSION_CONFIRMED_CACHE, $GETTING_MEMBER, $USER_THEME_CACHE, $EMOTICON_LEVELS;
    $EMOTICON_LEVELS = null;
    $USER_NAME_CACHE = [];
    $USERS_GROUPS_CACHE = [];
    $MEMBER_CACHED = null;
    $SESSION_CONFIRMED_CACHE = false;
    $GETTING_MEMBER = false;
    $USER_THEME_CACHE = null;
    global $IS_ACTUALLY;
    global $IS_ACTUALLY_ADMIN;
    /** Find whether the software is running in SU mode, and therefore the real user is an admin
     *
     * @global boolean $IS_ACTUALLY_ADMIN
     */
    $IS_ACTUALLY_ADMIN = false;
    $IS_ACTUALLY = null;
    global $IS_A_COOKIE_LOGIN;
    $IS_A_COOKIE_LOGIN = false;
    global $DOING_USERS_INIT;
    $DOING_USERS_INIT = true;
    global $IS_VIA_BACKDOOR;
    $IS_VIA_BACKDOOR = false;
    global $DID_CHANGE_SESSION_ID;
    $DID_CHANGE_SESSION_ID = false;
    global $SESSION_IS_NEW;
    $SESSION_IS_NEW = false;

    // Load all sessions into memory, if possible
    if (get_option('session_prudence') == '0' && function_exists('persistent_cache_get')) {
        $SESSION_CACHE = persistent_cache_get('SESSION_CACHE');
    } else {
        $SESSION_CACHE = null;
    }
    global $IN_MINIKERNEL_VERSION;
    if (!is_array($SESSION_CACHE)) {
        $SESSION_CACHE = [];
        if (!$IN_MINIKERNEL_VERSION) {
            if (get_option('session_prudence') == '0') {
                $where = 'last_activity_time>=' . strval(time() - 60 * 60 * max(1, intval(get_option('session_expiry_time'))));
            } else {
                $where = db_string_equal_to('the_session', get_session_id()) . ' OR ' . db_string_equal_to('ip', get_ip_address(3));
            }
            if ((get_forum_type() == 'cns') && (!is_on_multi_site_network())) {
                push_db_scope_check(false);
                $_s = $GLOBALS['SITE_DB']->query('SELECT s.*,m.m_primary_group FROM ' . get_table_prefix() . 'sessions s LEFT JOIN ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'f_members m ON m.id=s.member_id WHERE ' . $where . ' ORDER BY last_activity_time DESC', null, 0, true, true); // Suppress errors in case table does not exist yet
                if ($_s === null) {
                    $_s = [];
                }
                $SESSION_CACHE = list_to_map('the_session', $_s);
                pop_db_scope_check();
            } else {
                $SESSION_CACHE = list_to_map('the_session', $GLOBALS['SITE_DB']->query('SELECT * FROM ' . get_table_prefix() . 'sessions WHERE ' . $where . ' ORDER BY last_activity_time DESC'));
            }
            if (get_option('session_prudence') == '0' && function_exists('persistent_cache_set')) {
                persistent_cache_set('SESSION_CACHE', $SESSION_CACHE);
            }
        }
    }

    $DOING_USERS_INIT = null;
}

/**
 * Handles an attempted login or logout, and take care of all the sessions and cookies etc.
 */
function handle_logins()
{
    if (get_param_integer('httpauth', 0) == 1) {
        require_code('users_inactive_occasionals');
        force_httpauth();
    }

    if (post_param_integer('_active_login', 0) === 1) {
        $username = post_param_string('username', '', INPUT_FILTER_DEFAULT_POST & ~INPUT_FILTER_TRUSTED_SITES | INPUT_FILTER_TRIMMED);
        if (($username != '') && ($username != do_lang('GUEST'))) {
            require_code('users_active_actions');
            handle_active_login($username);
        }
    }

    // If it was a log out
    if ((currently_logging_in()) && (get_param_string('type', '', INPUT_FILTER_GET_COMPLEX) == 'logout')) {
        require_code('users_active_actions');
        handle_active_logout();
    }
}

/**
 * Find whether the current member is a guest.
 *
 * @param  ?MEMBER $member_id Member ID to check (null: current user)
 * @param  boolean $quick_only Whether to just do a quick check, don't establish new sessions
 * @return boolean Whether the current member is a guest
 */
function is_guest(?int $member_id = null, bool $quick_only = false) : bool
{
    if (!isset($GLOBALS['FORUM_DRIVER'])) {
        return true;
    }
    if ($member_id === null) {
        $member_id = get_member($quick_only);
    }
    return ($GLOBALS['FORUM_DRIVER']->get_guest_id() == $member_id);
}

/**
 * Get the ID of the currently active member.
 * It see's if the session exists / cookie is valid -- and gets the member ID accordingly.
 *
 * @param  boolean $quick_only Whether to just do a quick check, don't establish new sessions
 * @return MEMBER The member requesting this web page (possibly the guest member - which strictly speaking, is not a member)
 */
function get_member(bool $quick_only = false) : int
{
    global $SESSION_CACHE, $MEMBER_CACHED, $GETTING_MEMBER, $SITE_INFO;

    if ($MEMBER_CACHED !== null) {
        return $MEMBER_CACHED;
    }

    if (!isset($GLOBALS['FORUM_DRIVER'])) {
        load_user_stuff();
    }

    // Try via restricted_manually_enabled_backdoor that someone with full server access can place
    if (has_backdoor_ip_triggered()) {
        require_code('users_active_actions');
        if (function_exists('restricted_manually_enabled_backdoor')) { // May be trying to check in safe mode when doing above require_code, so recurse
            $MEMBER_CACHED = restricted_manually_enabled_backdoor();

            // Is there a su operation?
            $ks = get_param_string('keep_su', '');
            if ($ks != '') {
                require_code('users_inactive_occasionals');
                $MEMBER_CACHED = try_su_login($MEMBER_CACHED);
            }

            // Will have created a session in here already
            return $MEMBER_CACHED;
        }
    }

    if ($GETTING_MEMBER) {
        if (!isset($GLOBALS['FORUM_DRIVER'])) {
            return db_get_first_id(); // :S
        }
        return $GLOBALS['FORUM_DRIVER']->get_guest_id();
    }
    $GETTING_MEMBER = true;

    global $FORCE_INVISIBLE_GUEST;
    if ($FORCE_INVISIBLE_GUEST) {
        $GETTING_MEMBER = false;
        if (!isset($GLOBALS['FORUM_DRIVER'])) {
            fatal_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('8213be309a6a595daa8251901445eef4')));
        }
        $MEMBER_CACHED = $GLOBALS['FORUM_DRIVER']->get_guest_id();
        return $MEMBER_CACHED;
    }

    $member_id = null;

    $cookie_bits = explode(':', str_replace('|', ':', get_member_cookie()));
    $base = $cookie_bits[0];

    // Try by session
    $session = get_session_id(true);
    if (($session != '') && (get_param_integer('keep_force_htaccess', 0) == 0)) {
        $ip = get_ip_address(3);
        $allow_unbound_guest = true; // Note: Guest sessions are not IP bound
        $member_row = null;

        if (
            ($SESSION_CACHE !== null) &&
            (array_key_exists($session, $SESSION_CACHE)) &&
            ($SESSION_CACHE[$session] !== null) &&
            (array_key_exists('member_id', $SESSION_CACHE[$session])) &&
            (
                (get_option('ip_strict_for_sessions') == '0') ||
                ($SESSION_CACHE[$session]['ip'] == '0000:0000:0000:0000:0000:0000:*:*') && ($ip == '127.0.0.*') || // Conflicting network interfaces between server loopback choice and web browser inbound choice, when testing localhost
                ($SESSION_CACHE[$session]['ip'] == $ip) ||
                ((is_guest($SESSION_CACHE[$session]['member_id'])) && ($allow_unbound_guest)) ||
                (($SESSION_CACHE[$session]['session_confirmed'] == 0) && (!is_guest($SESSION_CACHE[$session]['member_id'])))
            ) &&
            ($SESSION_CACHE[$session]['last_activity_time'] > time() - intval(60.0 * 60.0 * max(0.017, floatval(get_option('session_expiry_time')))))
        ) {
            $member_row = $SESSION_CACHE[$session];
        }
        if (($member_row !== null) && ((!array_key_exists($base, $_COOKIE)) || (!is_guest($member_row['member_id'])))) {
            $member_id = $member_row['member_id'];

            global $SESSION_CONFIRMED_CACHE;
            $SESSION_CONFIRMED_CACHE = ($member_row['session_confirmed'] == 1);

            // Test this member still exists
            if ($GLOBALS['FORUM_DRIVER']->get_username($member_id, false, USERNAME_DEFAULT_NULL) === null) {
                $member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            if (array_key_exists($base, $_COOKIE)) {
                global $IS_A_COOKIE_LOGIN;
                $IS_A_COOKIE_LOGIN = true;
            }
        } else {
            require_code('users_inactive_occasionals');
            set_session_id('');
        }
    }

    if (($member_id === null) && (get_param_integer('keep_force_htaccess', 0) == 0)) {
        // Try by cookie (will defer to forum driver to authorise against detected cookie)
        require_code('users_inactive_occasionals');
        $member_id = try_cookie_login();

        // Can forum driver help more directly?
        if (method_exists($GLOBALS['FORUM_DRIVER'], 'get_member')) {
            $member_id = $GLOBALS['FORUM_DRIVER']->get_member();
        }
    }

    // Try via additional login providers. They can choose whether to respect existing $member_id of get_session_id() settings. Some may do an account linkage, so we need to let them decide what to do.
    require_code('zones');
    $hooks = find_all_hook_obs('systems', 'login_providers', 'Hook_login_provider_');
    foreach ($hooks as $ob) {
        $member_id = $ob->try_login($member_id, $quick_only);
    }

    // Try via GAE Console
    if (GOOGLE_APPENGINE) {
        if (gae_is_admin()) {
            require_code('users_active_actions');
            if (function_exists('restricted_manually_enabled_backdoor')) { // May be trying to check in safe mode when doing above require_code, so recurse
                $MEMBER_CACHED = restricted_manually_enabled_backdoor();
                // Will have created a session in here already
                return $MEMBER_CACHED;
            }
        }
    }

    // Guest or banned
    if ($member_id === null) {
        $member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
        $is_guest = true;
    } else {
        $is_guest = is_guest($member_id);
    }

    // If we are doing a very quick init, bomb out now - no need to establish session etc
    global $SITE_INFO;
    if ($quick_only) {
        $GETTING_MEMBER = false;
        return $member_id;
    }

    // If one of the try_* functions hasn't actually created the session, call it here
    $session = get_session_id(true);
    if ($session == '') {
        require_code('users_inactive_occasionals');
        create_session($member_id);
    }

    // If we are logged in, maybe do some further processing
    if (!$is_guest) {
        // Is there a su operation?
        $ks = get_param_string('keep_su', '');
        if ($ks != '') {
            require_code('users_inactive_occasionals');
            $member_id = try_su_login($member_id);
        }

        // Run hooks, if any exist
        $hooks = find_all_hook_obs('systems', 'upon_login', 'Hook_upon_login_');
        foreach ($hooks as $ob) {
            $ob->run(false, $GLOBALS['FORUM_DRIVER']->get_username($member_id), $member_id); // false means "not a new login attempt"
        }
    }

    // Ok we have our answer
    $MEMBER_CACHED = $member_id;
    $GETTING_MEMBER = false;

    // We call this to ensure any HTTP-auth specific code has a chance to run
    is_httpauth_login();

    if ($member_id !== null) {
        enforce_temporary_passwords($member_id);
        enforce_declarations($member_id);
        enforce_parental_controls($member_id);

        if (get_forum_type() == 'cns') {
            $GLOBALS['FORUM_DRIVER']->cns_flood_control($member_id);
        }
    }

    return $member_id;
}

/**
 * Make sure expired and temporary passwords restrict the member to the edit account or lost password page. Otherwise, redirect the member to change their password.
 *
 * @param  MEMBER $member_id The current member
 */
function enforce_temporary_passwords(int $member_id)
{
    // Enforcement is only supported by Conversr
    if (get_forum_type() !== 'cns') {
        return;
    }

    // No enforcement if using an external connection, such as Commandr or WebDAV
    if (!running_script('index')) {
        return;
    }

    // Guests should not have password enforcement
    if ($member_id == $GLOBALS['FORUM_DRIVER']->get_guest_id()) {
        return;
    }

    // If we are SUed into another member, do not enforce passwords
    if (($GLOBALS['IS_ACTUALLY_ADMIN']) && (get_param_string('keep_su', null) !== null)) {
        return;
    }

    // Only enforce passwords on software schemes
    $scheme = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_password_compat_scheme');
    if (!in_array($scheme, ['bcrypt', 'bcrypt_temporary', 'bcrypt_expired', '', 'temporary', 'expired'])) {
        return;
    }

    // If the member is trying to reset or change their password, do not enforce passwords
    if ((get_page_name() == 'lost_password') || ((get_page_name() == 'members') && (get_param_string('type', 'browse') == 'view'))) {
        return;
    }

    require_code('users_active_actions');
    _enforce_temporary_passwords($member_id);
}

/**
 * Make sure the current member has agreed to the current declarations.
 *
 * @param  MEMBER $member_id The current member
 */
function enforce_declarations(int $member_id)
{
    // No enforcement if we are checking a member other than ourselves
    if ($member_id != get_member()) {
        return;
    }

    // Enforcement is supported when not using Conversr, but Conversr must still be installed
    if (!addon_installed('core_cns')) {
        return;
    }

    // No enforcement if using an external connection, such as Commandr or WebDAV
    if (!running_script('index')) {
        return;
    }

    // Cannot enforce on guests
    if ($member_id == $GLOBALS['FORUM_DRIVER']->get_guest_id()) {
        return;
    }

    // If we are SUed into another member, do not enforce declarations; members should be accepting them on their own behalf
    if (($GLOBALS['IS_ACTUALLY_ADMIN']) && (get_param_string('keep_su', null) !== null)) {
        return;
    }

    // Bail to prevent infinite loops if the member is either on the join page (might be reviewing the rules) or on their own member profile (might be deleting their account)
    if ((get_page_name() == 'join') || ((get_page_name() == 'members') && ((get_param_string('id', '') == '') || (get_param_string('id', '') == strval($member_id))) && (get_param_string('type', 'browse') == 'view'))) {
        return;
    }

    // No need to enforce declarations if there aren't any configured
    if (trim(preg_replace('#\n+#', "\n", get_option('join_declarations'))) == '') {
        return;
    }

    // Also no need to enforce them if we are not requiring rule acceptance
    if (get_option('show_first_join_page') == '0') {
        return;
    }

    require_code('users_active_actions');
    _enforce_declarations($member_id);
}

/**
 * Enforce parental control policies that could affect a member's ability to access the site. Also enforce required fields for parental controls.
 *
 * @param  MEMBER $member_id The member to check
 */
function enforce_parental_controls(int $member_id)
{
    // No enforcement if we are checking a member other than ourselves
    if ($member_id != get_member()) {
        return;
    }

    // Enforcement is supported when not using Conversr, but Conversr must still be installed
    if (!addon_installed('core_cns')) {
        return;
    }

    // Cannot enforce on guests
    if ($member_id == $GLOBALS['FORUM_DRIVER']->get_guest_id()) {
        return;
    }

    // If we are SUed into another member, do not enforce
    if (($GLOBALS['IS_ACTUALLY_ADMIN']) && (get_param_string('keep_su', null) !== null)) {
        return;
    }

    // Load in parental controls and member data for checking
    require_code('cns_parental_controls');
    require_code('locations');
    require_code('temporal');

    $pc = load_parental_control_settings();

    $dob_day = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_dob_day');
    $dob_month = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_dob_month');
    $dob_year = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_dob_year');
    $age = to_epoch_interval_index(utctime_to_usertime(time()), 'years', utctime_to_usertime(cms_gmmktime(0, 0, 0, $dob_month, $dob_day, $dob_year)));

    // Check / enforce age lockout
    $lockout_info = $pc->run('lockout', $age, get_region(), ['member_id' => $member_id]); // Will automatically delete the session
    if ($lockout_info !== null) {
        warn_exit($lockout_info['message']);
    }

    // Check / enforce parental consent
    $consent_info = $pc->run('parental_consent', $age, get_region(), ['member_id' => $member_id]); // Will automatically delete the session
    if ($consent_info !== null) {
        require_lang('cns');
        require_code('crypt');
        $staff_address = obfuscate_email_address(get_option('staff_address'));
        warn_exit(do_lang_tempcode('LOCKED_OUT_PARENTAL_CONSENT', protect_from_escaping($staff_address)));
    }

    // No additional enforcement if using an external connection, such as Commandr or WebDAV
    if (!running_script('index')) {
        return;
    }

    // Bail to prevent infinite loops if the member is on their own member profile (might be filling in those fields)
    if (((get_page_name() == 'members') && ((get_param_string('id', '') == '') || (get_param_string('id', '') == strval($member_id))) && (get_param_string('type', 'browse') == 'view'))) {
        return;
    }

    require_code('urls');

    $redirect_url = build_url(['page' => 'members', 'type' => 'view'], get_module_zone('members'), [], false, false, false, '#tab--edit');

    // Check region geo-location enforcement
    require_code('cns_parental_controls');
    $pc = load_parental_control_settings();
    if ($pc->get_option('enforce_region') !== null) {
        require_code('locations');
        $geo = geolocate_ip(get_ip_address());
        if ($geo !== null) {
            $region = get_region();
            if (!cms_empty_safe($region) && (!is_location_within($region, [$geo]))) {
                require_code('site2');
                require_lang('locations');
                redirect_exit($redirect_url, null, do_lang_tempcode('PARENTAL_CONTROLS_ENFORCE_REGION_GEO', escape_html($geo)), false, 'warn');
            }
        }
    }

    $dob = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_dob_year');
    $timezone = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_timezone_offset');
    $region = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_region'); // NB: we don't use get_region because we want to explicitly check the setting

    // Optimisation: don't proceed if the member already populated all the fields we will be checking
    if (!cms_empty_safe($dob) && !cms_empty_safe($timezone) && !cms_empty_safe($region)) {
        return;
    }

    require_code('cns_members_action');
    require_code('cns_field_editability');
    require_lang('cns');

    $special_type = get_member_special_type($member_id);

    // DOB
    if (member_field_is_required($member_id, 'dob', $dob, null) && cns_field_editable('dob', $special_type)) {
        if ((cms_empty_safe($dob)) && (has_privilege(get_member(), 'bypass_dob_if_already_empty'))) {
            require_code('site2');
            require_lang('locations');
            redirect_exit($redirect_url, null, do_lang_tempcode('PARENTAL_CONTROLS_ENFORCE_DOB'), false, 'warn');
        }
    }

    // Time zone
    if (member_field_is_required($member_id, 'timezone_offset', $timezone, null) && cns_field_editable('timezone_offset', $special_type)) {
        if ((cms_empty_safe($timezone)) && (has_privilege(get_member(), 'bypass_timezone_offset_if_already_empty'))) {
            require_code('site2');
            require_lang('locations');
            redirect_exit($redirect_url, null, do_lang_tempcode('PARENTAL_CONTROLS_ENFORCE_TIMEZONE'), false, 'warn');
        }
    }

    // Region
    if (member_field_is_required($member_id, 'region', $region, null) && cns_field_editable('region', $special_type)) {
        if ((cms_empty_safe($region)) && (has_privilege(get_member(), 'bypass_region_if_already_empty'))) {
            require_code('site2');
            require_lang('locations');
            redirect_exit($redirect_url, null, do_lang_tempcode('PARENTAL_CONTROLS_ENFORCE_REGION'), false, 'warn');
        }
    }
}

/**
 * Get the display name of a username.
 * If no display name generator is configured, this will be the same as the username.
 *
 * @param  ID_TEXT $username The username
 * @return SHORT_TEXT The display name
 */
function get_displayname(string $username) : string
{
    if ($username == do_lang('UNKNOWN')) {
        return $username;
    }
    if ($username == do_lang('GUEST')) {
        return $username;
    }
    if ($username == do_lang('DELETED')) {
        return $username;
    }

    if (method_exists($GLOBALS['FORUM_DRIVER'], 'get_displayname')) {
        $displayname = $GLOBALS['FORUM_DRIVER']->get_displayname($username);
        return ($displayname === null) ? $username : $displayname;
    }

    return $username;
}

/**
 * Get the current session ID.
 *
 * @param  boolean $ignore_static_cache Whether to ignore the fact there may be a static cache; used to get true session ID during authentication code to break a paradoxs
 * @return ID_TEXT The current session ID (blank: none)
 */
function get_session_id(bool $ignore_static_cache = false) : string
{
    require_code('static_cache');

    global $SESSION_CACHE, $IN_MINIKERNEL_VERSION;

    $cookie_var = get_session_cookie();

    if (!empty($GLOBALS['INVALIDATED_FAST_SPIDER_CACHE'])) {
        $ignore_static_cache = true;
    }

    // Cookie sessions take priority
    if (isset($_COOKIE[$cookie_var])) {
        $ret = $_COOKIE[$cookie_var];
        if ((!$ignore_static_cache) && (substr($ret, 0, 1) == '[') && (substr($ret, -1) == ']') && (can_static_cache_request())) {
            return ''; // Shy session, so we do not retrieve it
        }

        // No validation in kinikernel
        if ($IN_MINIKERNEL_VERSION) {
            return $ret;
        }

        // Do not allow using invalid or expired session IDs passed in
        if (!isset($SESSION_CACHE[$ret])) {
            return '';
        }

        // No expired sessions
        if ($SESSION_CACHE[$ret]['last_activity_time'] < time() - intval(60.0 * 60.0 * max(0.017, floatval(get_option('session_expiry_time'))))) {
            return '';
        }

        // IP validation
        if (((get_option('ip_strict_for_sessions') == '1') || (is_guest())) && ($SESSION_CACHE[$ret]['ip'] != get_ip_address(3))) {
            return '';
        }

        return $ret;
    }

    // Try keep_session if it exists
    if (array_key_exists('keep_session', $_GET)) {
        $ret = get_param_string('keep_session');

        // No validation in kinikernel
        if ($IN_MINIKERNEL_VERSION) {
            return $ret;
        }

        // Do not allow using invalid or expired session IDs passed in
        if (!isset($SESSION_CACHE[$ret])) {
            return '';
        }

        // No expired sessions
        if ($SESSION_CACHE[$ret]['last_activity_time'] < time() - intval(60.0 * 60.0 * max(0.017, floatval(get_option('session_expiry_time'))))) {
            return '';
        }

        // IP validation
        if (((get_option('ip_strict_for_sessions') == '1') || (is_guest())) && ($SESSION_CACHE[$ret]['ip'] != get_ip_address(3))) {
            return '';
        }

        return $ret;
    }

    return '';
}

/**
 * Get the current session ID, or if there is none something that can roughly differentiate a session. Used by stats code.
 * Use very carefully, we don't want the output of this function to bias static cached pages in any way.
 *
 * @return ID_TEXT The current pseudo session ID
 */
function get_pseudo_session_id() : string
{
    $session_id = get_session_id();
    if ($session_id == '') {
        $session_id = get_ip_address();
    }
    return $session_id;
}

/**
 * Find whether the current member is logged in via httpauth.
 *
 * @return boolean Whether the current member is logged in via httpauth
 */
function is_httpauth_login() : bool
{
    if (get_forum_type() != 'cns') {
        return false;
    }
    if (is_guest()) {
        return false;
    }

    require_code('cns_members');
    return (!empty($_SERVER['PHP_AUTH_USER'])) && (cns_authusername_is_bound_via_httpauth(preg_replace('#@.*$#', '', $_SERVER['PHP_AUTH_USER'])) !== null);
}

/**
 * Make sure that the given URL contains a session if cookies are disabled.
 * NB: This is used for login redirection. It had to add the session ID into the redirect URL.
 *
 * @param  URLPATH $url The URL to enforce results in session persistence for the user
 * @return URLPATH The fixed URL (potentially nothing was done, depending on cookies)
 */
function enforce_sessioned_url(string $url) : string
{
    if ((!has_cookies()) && (get_bot_type() === null) && (get_option('sessions_in_urls') == '1')) {
        require_code('users_inactive_occasionals');
        return _enforce_sessioned_url($url);
    }
    return $url;
}

/**
 * Find what sessions are expired and delete them, and recover an existing one for $member_id if there is one.
 *
 * @param  ?MEMBER $member_id User to get a current session for (null: do not try, which guarantees a return result of null also)
 * @param  boolean $force_cleanup Force cleanup of expired sessions (otherwise happens randomly, to reduce load)
 * @return array A tuple: The session ID we rebound to (null means did not rebind), The number of member sessions, The number of Guest sessions
 */
function delete_expired_sessions_or_recover(?int $member_id = null, bool $force_cleanup = false) : array
{
    $new_session = null;

    $ip = get_ip_address(3);

    // Delete expired sessions; it's important we do this reasonably routinely, as the session table is loaded up and can get large -- unless we aren't tracking online users, in which case the table is never loaded up
    if (($force_cleanup) || (mt_rand(0, 100) == 1) || (intval(get_option('maximum_users')) > 0)) {
        cms_register_shutdown_function_safe(function () {
            if (!$GLOBALS['SITE_DB']->table_is_locked('sessions')) {
                $GLOBALS['SITE_DB']->query('DELETE FROM ' . get_table_prefix() . 'sessions WHERE last_activity_time<' . strval(time() - intval(60.0 * 60.0 * max(0.017, floatval(get_option('session_expiry_time'))))), 500/*to reduce lock times*/, 0, true); // Errors suppressed in case DB write access broken
            }
        });
    }

    // Look through sessions
    $dirty_session_cache = false;
    global $SESSION_CACHE;
    $_session = null;
    $num_guests = 0;
    $num_members = 0;
    foreach ($SESSION_CACHE as $_session => $row) {
        if (is_integer($_session)) {
            $_session = strval($_session);
        }

        // Delete expiry from cache
        if ($row['last_activity_time'] < time() - intval(60.0 * 60.0 * max(0.017, floatval(get_option('session_expiry_time'))))) {
            $dirty_session_cache = true;
            unset($SESSION_CACHE[$_session]);
            continue;
        }

        $is_guest = ($member_id == $GLOBALS['FORUM_DRIVER']->get_guest_id());
        if ($is_guest) {
            $num_guests++;
        } else {
            $num_members++;
        }

        // Get back to prior session if there was one (NB: we don't turn guest sessions into member sessions, as that would increase risk of there being a session fixation vulnerability)
        if (
            ($member_id !== null) &&
            ($new_session === null) &&
            ($row['member_id'] == $member_id) &&
            (((get_option('ip_strict_for_sessions') == '0') && (!$is_guest)) || ($row['ip'] == $ip)) &&
            ($row['last_activity_time'] > time() - intval(60.0 * 60.0 * max(0.017, floatval(get_option('session_expiry_time')))))
        ) {
            $new_session = $_session;
        }
    }
    if ($dirty_session_cache) {
        if (get_option('session_prudence') == '0' && function_exists('persistent_cache_set')) {
            persistent_cache_set('SESSION_CACHE', $SESSION_CACHE);
        }
    }

    return [$new_session, $num_members, $num_guests];
}

/**
 * Get the member cookie's name.
 *
 * @return string The member username/ID (depending on forum driver) cookie's name
 */
function get_member_cookie() : string
{
    global $SITE_INFO;
    if (empty($SITE_INFO['user_cookie'])) {
        $SITE_INFO['user_cookie'] = '__Secure-cms_member_id';
    }

    validate_special_cookie_prefix($SITE_INFO['user_cookie']);

    return $SITE_INFO['user_cookie'];
}

/**
 * Get the session cookie's name.
 *
 * @return string The session ID cookie's name
 */
function get_session_cookie() : string
{
    global $SITE_INFO;
    if (empty($SITE_INFO['session_cookie'])) {
        $SITE_INFO['session_cookie'] = '__Host-cms_session';
    }

    validate_special_cookie_prefix($SITE_INFO['session_cookie']);

    return $SITE_INFO['session_cookie'];
}

/**
 * Get the member password cookie's name.
 *
 * @return string The member password cookie's name
 */
function get_pass_cookie() : string
{
    global $SITE_INFO;
    if (empty($SITE_INFO['pass_cookie'])) {
        $SITE_INFO['pass_cookie'] = '__Secure-cms_member_hash';
    }

    validate_special_cookie_prefix($SITE_INFO['pass_cookie']);

    return $SITE_INFO['pass_cookie'];
}

/**
 * Ensure that if we are using a special cookie name prefix that we can actually do so, otherwise strip it.
 *
 * @param  ID_TEXT $cookie_name The name of the cookie (passed by reference; prefix will be stripped if it cannot be used)
 */
function validate_special_cookie_prefix(string &$cookie_name)
{
    global $SITE_INFO;

    // If __Host- prefixed, determine if we can use it
    if (strpos($cookie_name, '__Host-') === 0) {
        if (!empty(get_cookie_domain())) { // Cannot use __Host- if a domain is set
            $cookie_name = substr($cookie_name, 7);
            return;
        }

        if (strpos(get_base_url(), 'https://') !== 0) { // Cannot use __Host- if not running securely
            $cookie_name = substr($cookie_name, 7);
            return;
        }

        if (get_cookie_path() !== '/') { // Cannot use __Host- if path is not /
            $cookie_name = substr($cookie_name, 7);
            return;
        }
    }

    // If __Secure- prefixed, determine if we can use it
    if (strpos($cookie_name, '__Secure-') === 0) {
        if (strpos(get_base_url(), 'https://') !== 0) { // Cannot use __Secure- if not running securely
            $cookie_name = substr($cookie_name, 9);
            return;
        }
    }
}

/**
 * Get a cookie value.
 *
 * @param  string $name The name of the cookie
 * @param  ?string $default The default value (null: just use the value null)
 * @return ?string The value stored in the cookie (null: the default default)
 */
function cms_admirecookie(string $name, ?string $default = null) : ?string
{
    if (!isset($_COOKIE[$name])) {
        return $default;
    }
    $the_cookie = $_COOKIE[$name];
    return $the_cookie;
}

/**
 * Get the value of a special 'cms_' Custom Profile Field. For Conversr it can also do it for a pure field title, e.g. "Example Field".
 *
 * @param  ID_TEXT $cpf The CPF name stem
 * @param  ?MEMBER $member_id Member to lookup for (null: current member)
 * @return string The value (blank: has a blank value, or does not exist)
 */
function get_cms_cpf(string $cpf, ?int $member_id = null) : string
{
    if ($member_id === null) {
        $member_id = get_member();
    }

    $values = $GLOBALS['FORUM_DRIVER']->get_custom_fields($member_id);
    if ($values === null) {
        return '';
    }

    if (array_key_exists($cpf, $values)) {
        $ret = $values[$cpf];
        if (is_object($ret)) {
            $ret = $ret->evaluate();
        }
        return $ret;
    }

    if (get_forum_type() == 'cns') {
        $values = cns_get_all_custom_fields_match_member($member_id);
        if (array_key_exists($cpf, $values)) {
            return $values[$cpf]['RAW'];
        }
    }

    return '';
}

/**
 * Get the name of the default theme, assuming it exists. This is based on the site name.
 *
 * @return string Theme name
 */
function get_default_theme_name() : string
{
    return substr(preg_replace('#[^A-Za-z\d]#', '_', get_site_name()), 0, 80);
}
