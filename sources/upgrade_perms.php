<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_upgrader
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__upgrade_perms()
{
    require_lang('upgrade');
}

/**
 * Do upgrader screen: do permission checking.
 *
 * @ignore
 * @return string Output messages
 */
function upgrader_check_perms_screen()
{
    $out = '';

    $array = get_chmod_array_combined();
    foreach ($array as $chmod) {
        if (!file_exists(get_file_base() . '/' . $chmod)) {
            continue;
        }

        if (!cms_is_writable(get_file_base() . '/' . $chmod)) {
            $out .= '<li>' . do_lang('UPGRADER_NEEDS_CHMOD', '<kbd>' . escape_html($chmod) . '</kbd>') . '</li>';
        }
    }

    $excess_perms = get_excess_perms($array);
    foreach ($excess_perms as $chmod) {
        $out .= '<li>' . do_lang('UPGRADER_NEEDS_UNCHMOD', '<kbd>' . escape_html($chmod) . '</kbd>') . '</li>';
    }

    if ($out == '') {
        return do_lang('UPGRADER_ALL_CHMODDED_GOOD');
    }

    return do_lang('WARNING_FILE_CHMOD', $out);
}

/**
 * Do upgrader screen: do permission setting (using the AFM).
 *
 * @ignore
 * @return string Output messages
 */
function upgrader_fix_perms_screen()
{
    push_suppress_error_death(true);

    $array = get_chmod_array_combined();
    foreach ($array as $chmod) {
        if (!file_exists(get_file_base() . '/' . $chmod)) {
            continue;
        }

        if (!cms_is_writable(get_file_base() . '/' . $chmod)) {
            afm_set_perms($chmod, true);
        }
    }

    $excess_perms = get_excess_perms($array);
    foreach ($excess_perms as $chmod) {
        afm_set_perms($chmod, false);
    }

    $super_out = '';

    foreach ($GLOBALS['ATTACHED_MESSAGES_RAW'] as $_error) {
        $error = $_error[0];
        if (is_object($error)) {
            $error = $error->evaluate();
        }
        $super_out .= '<p>' . $error . '</p>';
    }

    $super_out .= '<p>' . do_lang('SUCCESS') . '</p>';

    pop_suppress_error_death();

    return $super_out;
}

/**
 * Find files and directories to chmod.
 *
 * @return array What to chmod
 */
function get_chmod_array_combined()
{
    require_code('inst_special');
    require_code('files');

    $array = array_merge(get_chmod_array(fallback_lang()), get_chmod_array_2());

    require_code('themes2');
    $themes = find_all_themes();
    for ($i = 0; $i < count($array); $i++) {
        $chmod = $array[$i];
        if (is_dir(get_file_base() . '/' . $chmod)) {
            // chmod ALL theme dirs
            if (strpos($chmod, 'themes/default') !== false) {
                foreach (array_keys($themes) as $theme) {
                    if ($theme != 'default') {
                        $array[] = str_replace('themes/default', 'themes/' . $theme, $chmod);
                    }
                }
            }

            // chmod contents of chmoddable directories
            $dh = @opendir(get_file_base() . '/' . $chmod);
            if ($dh !== false) {
                while (($file = readdir($dh)) !== false) {
                    if (!should_ignore_file($chmod . '/' . $file, IGNORE_ACCESS_CONTROLLERS)) {
                        $array[] = $chmod . '/' . $file;
                    }
                }
                closedir($dh);
            }
        }
    }

    return $array;
}

/**
 * Find extra directories to chmod.
 *
 * @return array Extra directories to chmod
 */
function get_chmod_array_2()
{
    $hooks = find_all_hook_obs('systems', 'chmod', 'Hook_chmod_');
    $directories = array();
    foreach ($hooks as $ob) {
        $directories = array_merge($directories, $ob->run());
    }
    return $directories;
}

/**
 * Find any excess permissions.
 *
 * @param  array $array Permissions that DO need to be set
 * @param  string $rel Where we are searching under
 * @return array List of files
 */
function get_excess_perms($array, $rel = '')
{
    $out = array();

    if (is_suexec_like()) {
        return $out;
    }

    require_code('files');

    $dir = get_file_base() . (($rel == '') ? '' : '/') . $rel;

    $dh = @opendir($dir);
    if ($dh !== false) {
        while (($file = readdir($dh)) !== false) {
            if (($file == '.') || ($file == '..')) {
                continue;
            }

            $is_dir = @is_dir($dir . '/' . $file);

            $relpath = $rel . (($rel == '') ? '' : '/') . $file;

            if (should_ignore_file($relpath, IGNORE_FLOATING)) {
                continue;
            }

            $ok_to_be_writable = (in_array($relpath, $array)) || (in_array(preg_replace('#^[^/]+/#', 'site/', $relpath), $array)) || (in_array(preg_replace('#^themes/[^/]+/#', 'themes/default/', $relpath), $array));
            if (!$ok_to_be_writable) {
                if ((php_function_allowed('posix_getuid')) && (cms_is_writable($dir . '/' . $file)) && (fileowner($dir . '/' . $file) != posix_getuid())) {
                    $out[] = $relpath;
                }
            }

            if ($is_dir) {
                $out = array_merge($out, get_excess_perms($array, $relpath));
            }
        }
        closedir($dh);
    }

    return $out;
}
