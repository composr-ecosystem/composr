<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

/**
 * Find if we have mailing-list-style forums.
 *
 * @param  ?AUTO_LINK $forum_id Forum ID of forum to check (null: no filter, find a count for all)
 * @return array A pair: How many that do, If all do
 */
function cns_has_mailing_list_style($forum_id = null)
{
    $sql = 'SELECT id,f_mail_username,f_mail_email_address,f_mail_server_type,f_mail_server_host,f_mail_server_port,f_mail_folder,f_mail_username,f_mail_password FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_forums';
    $sql_sup = ' WHERE ' . db_string_not_equal_to('f_mail_username', '') . ' AND ' . db_string_not_equal_to('f_mail_email_address', '');
    if ($forum_id !== null) {
        $sql_sup .= ' AND id=' . strval($forum_id);
    }

    // Optimisation: for a single forum, does it have it
    if ($forum_id !== null) {
        $test = $GLOBALS['FORUM_DB']->query($sql . $sql_sup, 1);
        if ((empty($test)) || (!cns_supports_mailing_list_style($test[0]))) {
            return [0, false];
        }
        return [1, true];
    }

    // Consider whether each has it or not
    $cnt_yes = 0;
    $cnt_no = 0;
    $rows = $GLOBALS['FORUM_DB']->query($sql);
    foreach ($rows as $row) {
        if (cns_supports_mailing_list_style($row)) {
            $cnt_yes++;
        } else {
            $cnt_no++;
        }
    }

    return [$cnt_yes, $cnt_no == 0];
}

/**
 * Whether a forum supports mailing-list style.
 *
 * @param  array $row The forum row
 * @return boolean Whether it does
 */
function cns_supports_mailing_list_style($row)
{
    $ret =
        ($row['f_mail_username'] != '') &&
        ($row['f_mail_email_address'] != '') &&
        (($row['f_mail_server_type'] != '') || (get_option('mail_server_type') != '')) &&
        (($row['f_mail_server_host'] != '') || (get_option('mail_server_host') != '')) &&
        (($row['f_mail_server_port'] !== null) || (get_option('mail_server_port') != '')) &&
        (($row['f_mail_folder'] != '') || (get_option('mail_folder') != '')) &&
        (($row['f_mail_username'] != '') || (get_option('mail_username') != '')) &&
        (($row['f_mail_password'] != '') || (get_option('mail_password') != ''));

    return $ret;
}

/**
 * Get a nice list for selection from the forum groupings.
 *
 * @param  ?AUTO_LINK $avoid Category to avoid putting in the list (null: don't avoid any)
 * @param  ?AUTO_LINK $it Category selected by default (null: no specific default)
 * @return Tempcode The list
 */
function cns_create_selection_list_forum_groupings($avoid = null, $it = null)
{
    $_m = $GLOBALS['FORUM_DB']->query_select('f_forum_groupings', ['*']);
    $entries = new Tempcode();
    foreach ($_m as $m) {
        if ($m['id'] !== $avoid) {
            $entries->attach(form_input_list_entry(strval($m['id']), $it === $m['id'], $m['c_title']));
        }
    }

    return $entries;
}

/**
 * Get a nice, formatted XHTML list of topics, in forum tree structure.
 *
 * @param  ?AUTO_LINK $it The currently selected topic (null: none selected)
 * @return Tempcode The list of topics
 */
function cns_create_selection_list_topic_tree($it = null)
{
    $tree = cns_get_topic_tree();

    $out = '';
    foreach ($tree as $forum) {
        foreach ($forum['entries'] as $topic_id => $ttitle) {
            $selected = ($topic_id == $it);
            $line = do_template('CNS_FORUM_TOPIC_LIST_LINE', ['_GUID' => 'd58e4176ef0efefa85c83a8b9fa2de51', 'PRE' => $forum['breadcrumbs'], 'TOPIC_TITLE' => $ttitle]);
            $out .= '<option value="' . strval($topic_id) . '"' . ($selected ? 'selected="selected"' : '') . '>' . $line->evaluate() . '</option>'; // XHTMLXHTML
        }
    }

    if ($GLOBALS['XSS_DETECT']) {
        ocp_mark_as_escaped($out);
    }

    return make_string_tempcode($out);
}

/**
 * Get a list of maps containing all the topics, and path information, under the specified forum - and those beneath it, recursively.
 *
 * @param  ?AUTO_LINK $forum_id The forum being at the root of our recursion (null: true root forum)
 * @param  ?string $breadcrumbs The breadcrumbs up to this point in the recursion (null: blank, as we are starting the recursion)
 * @param  ?ID_TEXT $title The forum name of the $forum_id we are currently going through (null: look it up). This is here for efficiency reasons, as finding children IDs to recurse to also reveals the child's title
 * @param  ?integer $levels The number of recursive levels to search (null: all)
 * @return array A list of maps for all forums. Each map entry containing the fields 'id' (forum ID) and 'breadcrumbs' (path to the forum, including the forums own title), and more.
 */
function cns_get_topic_tree($forum_id = null, $breadcrumbs = null, $title = null, $levels = null)
{
    if ($forum_id === null) {
        $forum_id = db_get_first_id();
    }
    if ($breadcrumbs === null) {
        $breadcrumbs = '';
    }

    if (!has_category_access(get_member(), 'forums', strval($forum_id))) {
        return [];
    }

    // Put our title onto our breadcrumbs
    if ($title === null) {
        $title = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_name', ['id' => $forum_id]);
    }
    $breadcrumbs .= $title;

    // We'll be putting all children in this entire tree into a single list
    $children = [];
    $children[0] = [];
    $children[0]['id'] = $forum_id;
    $children[0]['title'] = $title;
    $children[0]['breadcrumbs'] = $breadcrumbs;

    // Children of this forum
    $rows = $GLOBALS['FORUM_DB']->query_select('f_forums', ['id', 'f_name', 'f_forum_grouping_id', 'f_position'], ['f_parent_forum' => $forum_id], 'ORDER BY f_forum_grouping_id,f_position', 200);
    if (count($rows) == 200) {
        $rows = []; // Too many, this method will suck
    }
    $tmap = ['t_forum_id' => $forum_id];
    if ((!has_privilege(get_member(), 'see_unvalidated')) && (addon_installed('unvalidated'))) {
        $tmap['t_validated'] = 1;
    }
    $children[0]['entries'] = collapse_2d_complexity('id', 't_cache_first_title', $GLOBALS['FORUM_DB']->query_select('f_topics', ['id', 't_cache_first_title', 't_cache_first_time'], $tmap, 'ORDER BY t_cache_first_time DESC', 12));
    $children[0]['child_entry_count'] = count($children[0]['entries']);
    if ($levels === 0) { // We throw them away now because they're not on the desired level
        $children[0]['entries'] = [];
    }
    $children[0]['child_count'] = count($rows);
    $breadcrumbs .= ' > ';
    if ($levels !== 0) {
        foreach ($rows as $child) {
            $child_id = $child['id'];
            $child_title = $child['f_name'];
            $child_breadcrumbs = $breadcrumbs;

            $child_children = cns_get_topic_tree($child_id, $child_breadcrumbs, $child_title, ($levels === null) ? null : max(0, $levels - 1));

            $children = array_merge($children, $child_children);
        }
    }

    return $children;
}

/**
 * Generate a Tempcode tree based selection list for choosing a forum. Also capable of getting comma-separated ancestor forum lists.
 *
 * @param  ?MEMBER $member_id The member that the view privileges are done for (null: current member)
 * @param  ?AUTO_LINK $base_forum The forum we are starting from (null: capture the whole tree)
 * @param  ?array $selected_forum The forum(s) to select by default (null: no preference). An array of AUTO_LINK's (for IDs) or strings (for names).
 * @param  boolean $use_compound_list Whether to generate a compound list (a list of all the ancestors, for each point in the forum tree) as well as the tree
 * @param  ?integer $levels The number of recursive levels to search (null: all)
 * @param  ?TIME $updated_since Time from which content must be updated (null: no limit)
 * @return Tempcode Forum selection list
 */
function create_selection_list_forum_tree($member_id = null, $base_forum = null, $selected_forum = null, $use_compound_list = false, $levels = null, $updated_since = null)
{
    $tree = cns_get_forum_tree($member_id, $base_forum, '', null, null, $use_compound_list, $levels, $updated_since !== null, $updated_since);
    if ($use_compound_list) {
        list($tree) = $tree;
    }

    // Flatten out
    for ($i = 0; $i < count($tree); $i++) {
        array_splice($tree, $i + 1, 0, $tree[$i]['children']);
    }

    $real_out = ''; // XHTMLXHTML
    foreach ($tree as $t) {
        if (($updated_since !== null) && (($t['updated_since'] === null) || ($t['updated_since'] < $updated_since))) {
            continue;
        }

        $selected = false;
        if ($selected_forum !== null) {
            foreach ($selected_forum as $s) {
                if ((is_integer($s)) && ($s == $t['id'])) {
                    $selected = true;
                }
                if ((is_string($s)) && ($s == $t['title'])) {
                    $selected = true;
                }
            }
        }

        $line = do_template('CNS_FORUM_LIST_LINE', [
            '_GUID' => '2fb4bd9ed5c875de6155bef588c877f9',
            'PRE' => $t['breadcrumbs'],
            'NAME' => $t['title'],
            'CAT_BIT' => $t['second_cat'],
        ]);

        $real_out .= '<option value="' . (!$use_compound_list ? strval($t['id']) : $t['compound_list']) . '"' . ($selected ? ' selected="selected"' : '') . '>' . $line->evaluate() . '</option>' . "\n";
    }

    if ($GLOBALS['XSS_DETECT']) {
        ocp_mark_as_escaped($real_out);
    }
    return make_string_tempcode($real_out);
}

/**
 * Generate a map of details for choosing a forum. Also capable of getting comma-separated ancestor forum lists.
 *
 * @param  ?MEMBER $member_id The member that the view privileges are done for (null: current member)
 * @param  ?AUTO_LINK $base_forum The forum we are starting from (null: capture the whole tree)
 * @param  string $breadcrumbs The breadcrumbs at this point of the recursion (blank for the start)
 * @param  ?AUTO_LINK $skip ID of a forum to skip display/recursion for (null: none)
 * @param  ?array $forum_details Details of the current forum in the recursion (null: find from DB)
 * @param  boolean $use_compound_list Whether to generate a compound list (a list of all the ancestors, for each point in the forum tree) as well as the tree
 * @param  ?integer $levels The number of recursive levels to search (null: all)
 * @param  boolean $do_stats Whether to generate tree statistics
 * @param  ?TIME $updated_since Time from which content must be updated (null: no limit)
 * @return array A list of maps, OR (if $use_compound_list) a pair of the Tempcode and the compound list
 */
function cns_get_forum_tree($member_id = null, $base_forum = null, $breadcrumbs = '', $skip = null, $forum_details = null, $use_compound_list = false, $levels = null, $do_stats = false, $updated_since = null)
{
    if (($levels == -1) && (!$use_compound_list)) {
        return $use_compound_list ? [[], ''] : [];
    }

    static $forum_tree_secure_cache = null;

    if ($member_id === null) {
        $member_id = get_member();
    }

    if ($forum_details === null) {
        if ($base_forum === null) {
            $forum_details = ['f_order_sub_alpha' => 0]; // Optimisation
        } else {
            $_forum_details = $GLOBALS['FORUM_DB']->query_select('f_forums', ['f_order_sub_alpha'], ['id' => $base_forum], '', 1);
            if (!array_key_exists(0, $_forum_details)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'forum'));
            }
            $forum_details = $_forum_details[0];
        }
    }
    $order_sub_alpha = $forum_details['f_order_sub_alpha'];

    $out = [];
    $order = $order_sub_alpha ? 'f_name' : 'f_position,id';
    $forums = [];
    if ($forum_tree_secure_cache === null) {
        $forum_tree_secure_cache = mixed();
        $num_forums = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'COUNT(*)');
        $forum_tree_secure_cache = ($num_forums >= 300); // Mark it as 'huge'
    }
    if ($forum_tree_secure_cache === true) {
        $forums = $GLOBALS['FORUM_DB']->query('SELECT id,f_order_sub_alpha,f_name,f_forum_grouping_id,f_parent_forum,f_position,f_cache_last_time FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_forums WHERE id IS NOT NULL AND ' . db_string_equal_to('f_redirection', '') . ' AND ' . (($base_forum === null) ? 'f_parent_forum IS NULL' : ('f_parent_forum=' . strval($base_forum))) . ' ORDER BY f_position,f_name', intval(get_option('general_safety_listing_limit'))/*reasonable limit*/);
    } else {
        if (($forum_tree_secure_cache === null) || ($forum_tree_secure_cache === false)) {
            $forum_tree_secure_cache = $GLOBALS['FORUM_DB']->query('SELECT id,f_order_sub_alpha,f_name,f_forum_grouping_id,f_parent_forum,f_position,f_cache_last_time FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_forums WHERE id IS NOT NULL AND ' . db_string_equal_to('f_redirection', '') . ' ORDER BY f_position,f_name');
        }
        foreach ($forum_tree_secure_cache as $x) {
            if ($x['f_parent_forum'] === $base_forum) {
                $forums[] = $x;
            }
        }
    }
    sort_maps_by($forums, $order, false, ($order == 'f_name'));
    $compound_list = '';
    $child_breadcrumbs = ($breadcrumbs == '') ? '' : ($breadcrumbs . ' > ');
    foreach ($forums as $forum) {
        $access = has_category_access($member_id, 'forums', strval($forum['id']));
        $cat_sort_key = '!' . (($forum['f_forum_grouping_id'] === null) ? '' : strval($forum['f_forum_grouping_id']));

        if (($access) && ($skip !== $forum['id']) && ($levels !== 0)) {
            $cat_bit = '';
            if ($forum['f_forum_grouping_id'] !== null) {
                static $forum_groupings_titles_cache = null;
                if ($forum_groupings_titles_cache === null) {
                    $forum_groupings_titles_cache = collapse_2d_complexity('id', 'c_title', $GLOBALS['FORUM_DB']->query_select('f_forum_groupings', ['id', 'c_title']));
                }
                $cat_bit = array_key_exists($forum['f_forum_grouping_id'], $forum_groupings_titles_cache) ? $forum_groupings_titles_cache[$forum['f_forum_grouping_id']] : do_lang('NA');
            }

            $below = cns_get_forum_tree($member_id, $forum['id'], $child_breadcrumbs, $skip, $forum, $use_compound_list, ($levels === null) ? null : ($levels - 1), $do_stats, $updated_since);
            if ($use_compound_list) {
                list($below, $_compound_list) = $below;
                $compound_list .= strval($forum['id']) . ',' . $_compound_list;
            }

            $child = [
                'id' => $forum['id'],
                'title' => $forum['f_name'],
                'breadcrumbs' => $child_breadcrumbs,
                'compound_list' => (!$use_compound_list ? strval($forum['id']) : (strval($forum['id']) . ',' . $_compound_list)),
                'second_cat' => $cat_bit,
                'group' => $forum['f_forum_grouping_id'],
                'children' => $below,
            ];
            if ($do_stats) {
                $child['child_count'] = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'COUNT(*)', ['f_parent_forum' => $forum['id']]);
                $child['updated_since'] = $forum['f_cache_last_time'];
            }

            if (!array_key_exists($cat_sort_key, $out)) {
                $out[$cat_sort_key] = [];
            }
            $out[$cat_sort_key][] = $child;
        }
    }

    // Up to now we worked into an array, so we could benefit from how it would auto-sort into the grouping>forum-position ordering Composr uses. Now we need to unzip it
    $real_out = [];
    foreach ($out as $arr) {
        $real_out = array_merge($real_out, $arr);
    }

    if ($use_compound_list) {
        return [$real_out, $compound_list];
    } else {
        return $real_out;
    }
}
