<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core
 */

/**
 * Find the MD5 hash of the space-stripped copy of function within the given code.
 *
 * @param  string $code The code
 * @param  string $function Name of the function
 * @return SHORT_TEXT The MD5 hash (blank: no such function)
 */
function get_function_hash(string $code, string $function) : string
{
    $matches = [];
    if (preg_match('#^(function ' . $function . '\(.*\n\{.*\n\})#msU', $code, $matches) != 0) {
        return md5(preg_replace('#\s#', '', $matches[1]));
    }

    return '';
}

/**
 * Insert some code into a function in the given code snippet, by line number (before line number).
 *
 * @param  string $code The code
 * @param  string $function Name of the function
 * @param  integer $linenum Line number relative to start of function
 * @param  string $newcode Code to insert
 * @param  boolean $fail_ok Whether a failure should attach a message (false: a failure should cause a critical error)
 * @return boolean Success status if $fail_ok is true
 */
function insert_code_before__by_linenum(string &$code, string $function, int $linenum, string $newcode, bool $fail_ok = false) : bool
{
    // Force $fail_ok in the upgrader so corrupt non-bundled addons do not break it.
    if (running_script('upgrader')) {
        $fail_ok = true;
    }

    $pos = strpos($code, 'function ' . $function . '(');
    if ($pos === false) {
        _handle_corrupt_override($fail_ok);
        return false;
    }

    $pos = strpos($code, "\n", $pos) + 1;
    for ($i = 0; $i < $linenum; $i++) {
        $next = strpos($code, "\n", $pos);
        if ($next === false) {
            _handle_corrupt_override($fail_ok);
            return false;
        }
        $pos = $next + 1;
    }
    $code = substr($code, 0, $pos) . "\n\t" . $newcode . "\n" . substr($code, $pos);

    return true;
}

/**
 * Insert some code into a function in the given code snippet, by line number (after line number).
 *
 * @param  string $code The code
 * @param  string $function Name of the function
 * @param  integer $linenum Line number relative to start of function
 * @param  string $newcode Code to insert
 * @param  boolean $fail_ok Whether a failure should attach a message (false: a failure should cause a critical error)
 * @return boolean Success status
 */
function insert_code_after__by_linenum(string &$code, string $function, int $linenum, string $newcode, bool $fail_ok = false) : bool
{
    return insert_code_before__by_linenum($code, $function, $linenum + 1, $newcode, $fail_ok);
}

/**
 * Insert some code into a function in the given code snippet, by command (before command).
 *
 * @param  string $code The code
 * @param  string $function Name of the function
 * @param  string $command The command we're searching to insert by
 * @param  string $newcode Code to insert
 * @param  integer $instance_of_command We are inserting at this instance of the line (i.e. takes into account a literal line of code may exist in other places in a function).
 * @param  boolean $fail_ok Whether a failure should attach a message (false: a failure should cause a critical error)
 * @return boolean Success status
 */
function insert_code_before__by_command(string &$code, string $function, string $command, string $newcode, int $instance_of_command = 1, bool $fail_ok = false) : bool
{
    // Force $fail_ok in the upgrader so corrupt non-bundled addons do not break it.
    if (running_script('upgrader')) {
        $fail_ok = true;
    }

    $pos = strpos($code, 'function ' . $function . '(');
    if ($pos === false) {
        _handle_corrupt_override($fail_ok);
        return false;
    }

    for ($i = 0; $i < $instance_of_command; $i++) {
        $next = strpos($code, $command, $pos);
        if ($next === false) {
            _handle_corrupt_override($fail_ok);
            return false;
        }
        $pos = $next + 1;
    }
    $pos = strrpos(substr($code, 0, $pos), "\n");
    $code = substr($code, 0, $pos) . "\n\t" . $newcode . "\n" . substr($code, $pos);

    return true;
}

/**
 * Insert some code into a function in the given code snippet, by command (after command).
 *
 * @param  string $code The code
 * @param  string $function Name of the function
 * @param  string $command The command we're searching to insert by
 * @param  string $newcode Code to insert
 * @param  integer $instance_of_command We are inserting at this instance of the line (i.e. takes into account a literal line of code may exist in other places in a function).
 * @param  boolean $fail_ok Whether a failure should attach a message (false: a failure should cause a critical error)
 * @return boolean Success status
 */
function insert_code_after__by_command(string &$code, string $function, string $command, string $newcode, int $instance_of_command = 1, bool $fail_ok = false) : bool
{
    // Force $fail_ok in the upgrader so corrupt non-bundled addons do not break it.
    if (running_script('upgrader')) {
        $fail_ok = true;
    }

    $pos = strpos($code, 'function ' . $function . '(');
    if ($pos === false) {
        _handle_corrupt_override($fail_ok);
        return false;
    }

    for ($i = 0; $i < $instance_of_command; $i++) {
        $next = strpos($code, $command, $pos);
        if ($next === false) {
            _handle_corrupt_override($fail_ok);
            return false;
        }
        $pos = $next + 1;
    }
    $pos = strpos($code, "\n", $pos);
    $code = substr($code, 0, $pos) . "\n\t" . $newcode . "\n" . substr($code, $pos);

    return true;
}

/**
 * Remove some code from a function in the given code snippet.
 *
 * @param  string $code The code
 * @param  string $function Name of the function
 * @param  string $command The command we're searching to insert by
 * @param  integer $instance_of_command We remove the nth instance of this command
 * @param  boolean $fail_ok Whether a failure should attach a message (false: a failure should cause a critical error)
 * @return boolean Success status
 */
function remove_code(string &$code, string $function, string $command, int $instance_of_command = 1, bool $fail_ok = false) : bool
{
    // Force $fail_ok in the upgrader so corrupt non-bundled addons do not break it.
    if (running_script('upgrader')) {
        $fail_ok = true;
    }

    $pos = strpos($code, 'function ' . $function . '(');
    if ($pos === false) {
        _handle_corrupt_override($fail_ok);
        return false;
    }

    for ($i = 0; $i < $instance_of_command; $i++) {
        $next = strpos($code, $command, $pos);
        if ($next === false) {
            _handle_corrupt_override($fail_ok);
            return false;
        }
        $pos = $next + 1;
    }
    $old_pos = $pos;
    $pos = strpos($code, "\n", $pos);
    $code = substr($code, 0, $pos) . substr($code, $old_pos + 1);

    return true;
}

/**
 * Error handler for a corrupt override.
 *
 * @param  boolean $fail_ok Whether a failure should attach a message (false: a failure should cause a critical error)
 * @ignore
 */
function _handle_corrupt_override(bool $fail_ok)
{
    $lines = debug_backtrace();
    $relay = _sanitise_error_msg(preg_replace('#^' . preg_quote(get_file_base() . '/') . '#', '', $lines[1]['file']) . ':' . strval($lines[1]['line']));
    if ($fail_ok) {
        attach_message('An override seems to no longer be compatible, ' . htmlentities($relay), (running_script('upgrader') ? 'notice' : 'warn'), false, true);
        return;
    }
    critical_error('CORRUPT_OVERRIDE', $relay);
}
