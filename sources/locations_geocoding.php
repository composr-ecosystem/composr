<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__locations_geocoding()
{
    require_lang('locations');
}

/**
 * AJAX script for geocoding a position.
 *
 * @ignore
 */
function geocode_script()
{
    prepare_backend_response('application/json');

    cms_ini_set('ocproducts.xss_detect', '0');

    $location = get_param_string('location', null, INPUT_FILTER_GET_COMPLEX);
    if ($location !== null) {
        echo json_encode(geocode($location));
    } else {
        echo json_encode(reverse_geocode(floatval(get_param_string('latitude')), floatval(get_param_string('longitude'))));
    }

    cms_safe_exit_flow();
}

/**
 * Pick which geocoding service to use.
 *
 * @param  ?string $service Force geocoding through a particular service (null: not enforced)
 * @set google bing mapquest
 * @return ?object Service to use (null: no service, which should be impossible as there's always something)
 */
function choose_geocoding_service(?string &$service = null) : ?object
{
    $hook_obs = find_all_hook_obs('systems', 'geocoding', 'Hook_geocoding_');
    foreach ($hook_obs as $hook => $hook_ob) {
        if ($service !== null) {
            if ($service === $hook) {
                return $hook_ob;
            }
        } else {
            if ($hook_ob->is_available()) {
                $service = $hook;
                return $hook_ob;
            }
        }
    }
    return null;
}

/**
 * Geocode a written location.
 *
 * @param  string $location Written location
 * @param  ?Tempcode $errormsg Error message (returned by reference) (null: not set yet)
 * @param  ?string $service Force geocoding through a particular service (null: not enforced)
 * @set google bing mapquest
 * @return ?array A pair: Latitude, Longitude (null: error)
 */
function geocode(string $location, ?object &$errormsg = null, ?string $service = null) : ?array
{
    $ob = choose_geocoding_service($service);
    if ($ob === null) {
        $errormsg = do_lang_tempcode('API_NOT_CONFIGURED', '(any geocoding)');
        return null;
    }
    $ret = $ob->geocode($location, $errormsg);
    if ($errormsg !== null) {
        require_code('failure');
        cms_error_log($errormsg->evaluate(), 'error_occurred_api');
    }
    return $ret;
}

/**
 * Geocode a latitude & longitude.
 *
 * @param  float $latitude Latitude
 * @param  float $longitude Longitude
 * @param  ?Tempcode $errormsg Error message (returned by reference) (null: not set yet)
 * @param  ?string $service Force geocoding through a particular service (null: not enforced)
 * @set google bing mapquest
 * @return ?array A tuple: Formatted address, Street Address, City, County, State, Zip/Postcode, Country (null: error)
 */
function reverse_geocode(float $latitude, float $longitude, ?object &$errormsg = null, ?string $service = null) : ?array
{
    $ob = choose_geocoding_service($service);
    if ($ob === null) {
        $errormsg = do_lang_tempcode('API_NOT_CONFIGURED', '(any geocoding)');
        return null;
    }

    $ret = $ob->reverse_geocode($latitude, $longitude, $errormsg);
    if ($errormsg !== null) {
        require_code('failure');
        cms_error_log($errormsg->evaluate(), 'error_occurred_api');
    }
    return $ret;
}
