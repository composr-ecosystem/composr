<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    site_messaging
 */

/**
 * Add a new site message.
 *
 * @param  SHORT_TEXT $title The title
 * @param  LONG_TEXT $message The message
 * @param  ID_TEXT $type The message type
 * @set inform notice warn
 * @param  BINARY $validated Whether this entry is validated
 * @param  ?TIME $start_date_time The start time (null: not set)
 * @param  ?TIME $end_date_time The end time (null: not set)
 * @param  array $groups List of groups of which to limit the message (empty: no limit)
 * @param  array $page_links List of page links of which to limit the message (empty: no limit)
 * @return AUTO_LINK The ID of the site message created
 */
function add_site_message(string $title, string $message, string $type, int $validated = 1, ?int $start_date_time = null, ?int $end_date_time = null, array $groups = [], array $page_links = []) : int
{
    require_lang('site_messaging');

    // Process the insert
    $map = [
        'm_submitter' => get_member(),
        'm_title' => $title,
        'm_type' => $type,
        'm_validated' => $validated,
        'm_start_date_time' => $start_date_time,
        'm_end_date_time' => $end_date_time,
    ];
    $map += insert_lang_comcode('m_message', $message, 2);
    $id = $GLOBALS['SITE_DB']->query_insert('site_messages', $map, true);

    log_it('ADD_SITE_MESSAGE', strval($id), $title);

    // Process groups
    if (get_forum_type() == 'cns') {
        foreach ($groups as $group) {
            $GLOBALS['SITE_DB']->query_insert('site_messages_groups', ['message_id' => $id, 'group_id' => $group]);
        }
    }

    // Process page links
    foreach ($page_links as $page_link) {
        $GLOBALS['SITE_DB']->query_insert('site_messages_pages', ['message_id' => $id, 'page_link' => $page_link]);
    }

    // Clear the cache
    require_code('caches2');
    delete_cache_entry('site_messages');

    return $id;
}

/**
 * Edit a site message.
 *
 * @param  AUTO_LINK $id The ID of the message we are editing
 * @param  SHORT_TEXT $title The title
 * @param  LONG_TEXT $message The message
 * @param  ID_TEXT $type The message type
 * @set inform notice warn
 * @param  BINARY $validated Whether this entry is validated
 * @param  ?TIME $start_date_time The start time (null: clear it)
 * @param  ?TIME $end_date_time The end time (null: clear it)
 * @param  array $groups List of groups of which to limit the message (empty: no limit)
 * @param  array $page_links List of page links of which to limit the message (empty: no limit)
 */
function edit_site_message(int $id, string $title, string $message, string $type, int $validated = 1, ?int $start_date_time = null, ?int $end_date_time = null, array $groups = [], array $page_links = [])
{
    require_lang('site_messaging');

    // Get previous message
    $_message = $GLOBALS['SITE_DB']->query_select_value_if_there('site_messages', 'm_message', ['id' => $id]);
    if ($_message === null) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }

    // Process the insert
    $map = [
        'm_submitter' => get_member(),
        'm_title' => $title,
        'm_type' => $type,
        'm_validated' => $validated,
        'm_start_date_time' => $start_date_time,
        'm_end_date_time' => $end_date_time,
    ];
    $map += lang_remap_comcode('m_message', $_message, $message);
    $GLOBALS['SITE_DB']->query_update('site_messages', $map, ['id' => $id]);

    log_it('EDIT_SITE_MESSAGE', strval($id), $title);

    // Process groups
    if (get_forum_type() == 'cns') {
        $GLOBALS['SITE_DB']->query_delete('site_messages_groups', ['message_id' => $id]);
        foreach ($groups as $group) {
            $GLOBALS['SITE_DB']->query_insert('site_messages_groups', ['message_id' => $id, 'group_id' => $group]);
        }
    }

    // Process page links
    $GLOBALS['SITE_DB']->query_delete('site_messages_pages', ['message_id' => $id]);
    foreach ($page_links as $page_link) {
        $GLOBALS['SITE_DB']->query_insert('site_messages_pages', ['message_id' => $id, 'page_link' => $page_link]);
    }

    // Clear the cache
    require_code('caches2');
    delete_cache_entry('site_messages');
}

/**
 * Delete a site message.
 *
 * @param  AUTO_LINK $id The ID of the message we are deleting
 */
function delete_site_message(int $id)
{
    require_lang('site_messaging');

    // Get title
    $title = $GLOBALS['SITE_DB']->query_select_value_if_there('site_messages', 'm_title', ['id' => $id]);
    if ($title === null) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }

    // Delete the record
    $GLOBALS['SITE_DB']->query_delete('site_messages', ['id' => $id]);
    $GLOBALS['SITE_DB']->query_delete('site_messages_groups', ['message_id' => $id]);
    $GLOBALS['SITE_DB']->query_delete('site_messages_pages', ['message_id' => $id]);

    log_it('DELETE_SITE_MESSAGE', strval($id), $title);

    // Clear the cache
    require_code('caches2');
    delete_cache_entry('site_messages');
}
