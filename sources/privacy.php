<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_privacy
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__privacy()
{
    if (!defined('PRIVACY_METHOD__LEAVE')) {
        define('PRIVACY_METHOD__LEAVE', 1);
        define('PRIVACY_METHOD__ANONYMISE', 2);
        define('PRIVACY_METHOD__DELETE', 4);
        define('PRIVACY_METHOD__DOWNLOAD', 8);
    }

    require_lang('privacy');
}

/**
 * Fill in missing criteria from the criteria that was provided.
 *
 * @param  ID_TEXT $username The username from the search criteria (passed by reference) (blank: no username specified)
 * @param  array $ip_addresses The IP addresses from the search criteria (passed by reference)
 * @param  ?MEMBER $member_id The member ID of the search criteria (passed by reference) (null: no member specified)
 * @param  string $email_address The e-mail address from the search criteria (passed by reference) (blank: no e-mail address specified)
 */
function fill_in_missing_privacy_criteria(string &$username, array &$ip_addresses, ?int &$member_id, string &$email_address)
{
    // Cannot fill anything else in if member ID, username, and e-mail are not provided
    if (($username == '') && ($member_id === null) && ($email_address == '')) {
        return;
    }

    // Do not fill in any criteria if the provided member ID is a guest
    if (($member_id !== null) && is_guest($member_id)) {
        return;
    }

    $member_id_username = null;

    // If both member ID and username specified, but username matches a different member, do not allow that username in criteria.
    if (($member_id !== null) && ($username != '')) {
        $member_id_username = $GLOBALS['FORUM_DRIVER']->get_member_from_username($username);
        if (($member_id_username !== null) && ($member_id_username != $member_id)) {
            $username = '';
        }
    }

    $_username = '';
    $_ip_addresses = [];
    $_member_id = $member_id; // We need member ID set right away in case $_member_id is never checked for
    $_email_address = '';
    $_ip_address = '';

    // Use security logging to fill in missing information if we can, else use our own methods
    if (addon_installed('securitylogging')) {
        require_code('lookup');

        // Fill in data by priority of what was specified: member ID, then username, then e-mail.
        $__ip_addresses = [];
        if ($member_id !== null) {
            $__ip_addresses = lookup_user($member_id, $_username, $_member_id, $_ip_address, $_email_address);
        } elseif ($username != '') {
            $__ip_addresses = lookup_user($username, $_username, $_member_id, $_ip_address, $_email_address);
        } elseif ($email_address != '') {
            $__ip_addresses = lookup_user($email_address, $_username, $_member_id, $_ip_address, $_email_address);
        }

        // Null values are not allowed in the privacy API.
        if ($_username === null) {
            $_username = '';
        }
        if ($_member_id === null) {
            $_member_id = $member_id;
        }
        if ($_ip_address === null) {
            $_ip_address = '';
        }
        if ($_email_address === null) {
            $_email_address = '';
        }

        // We cannot safely use this criteria if our final member ID is a guest
        if (($_member_id !== null) && is_guest($_member_id)) {
            return;
        }

        // Merge in our known IP addresses
        $_ip_addresses = array_merge($_ip_addresses, collapse_1d_complexity('ip', $__ip_addresses));
        if (($_ip_address != '') && ($_ip_address != '127.0.0.1')) {
            $_ip_addresses[] = $_ip_address;
        }

        $username = $_username;
        $ip_addresses = $_ip_addresses;
        $member_id = $_member_id;
        $email_address = $_email_address;
    } else {
        // Fill in member ID from username if username provided but not member ID
        if (($member_id === null) && ($username != '')) {
            $member_id_username = $GLOBALS['FORUM_DRIVER']->get_member_from_username($username);
            if ($member_id_username !== null) {
                $_member_id = $member_id_username;
            }
        }

        if (($_member_id !== null)) {
            // Cannot safely use username nor fill in missing criteria if we received guest
            if (is_guest($_member_id)) {
                $username = '';
                return;
            }
            $member_id = $_member_id;
        }

        // Fill in member ID from e-mail if e-mail provided but not member ID
        if (($member_id === null) && ($email_address != '')) {
            $member_id_email = $GLOBALS['FORUM_DRIVER']->get_member_from_email_address($email_address);
            if ($member_id_email !== null) {
                $_member_id = $member_id_email;
            }
        }

        if (($_member_id !== null)) {
            // Cannot safely use e-mail nor fill in missing criteria if we received guest
            if (is_guest($_member_id)) {
                $email_address = ''; // Should honestly never happen as Guest does not have an e-mail
                return;
            }
            $member_id = $_member_id;
        }

        // Nothing more we can do if member ID is still null
        if ($member_id === null) {
            return;
        }

        // Fill in username from member ID if username not provided
        if ($username == '') {
            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id, false, USERNAME_DEFAULT_BLANK);
        }

        // Fill in e-mail address from member ID if e-mail not provided
        if ($email_address == '') {
            $_email_address = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_members', 'm_email_address', ['id' => $member_id]);
            if ($_email_address !== null) {
                $email_address = $_email_address;
            }
        }

        // Fill in IP addresses from member ID
        $rows = $GLOBALS['FORUM_DB']->query_select('f_member_known_login_ips', ['i_ip'], ['i_member_id' => $member_id]);
        foreach ($rows as $row) {
            if (in_array($row['i_ip'], $ip_addresses)) {
                continue;
            }
            if ($row['i_ip'] === null) {
                continue;
            }
            if (($row['i_ip'] == '') || ($row['i_ip'] != '127.0.0.1')) {
                continue;
            }

            $ip_addresses[] = $row['i_ip'];
        }
        $last_known_ip = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_members', 'm_ip_address', ['id' => $member_id]);
        if (($last_known_ip !== null) && ($last_known_ip != '') && ($last_known_ip != '127.0.0.1')) {
            $ip_addresses[] = $last_known_ip;
        }
    }
}

/**
 * Privacy details base class.
 *
 * @package core
 */
abstract class Hook_privacy_base
{
    /**
     * Find privacy details.
     *
     * @return ?array A map of privacy details in a standardised format (null: disabled)
     */
    abstract public function info() : ?array;

    /**
     * Modify table details according to special hook behaviour and given data before performing the method.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $table_details Details of the table from the info function, passed by reference
     * @param  ?array $row Row raw from the database (null: not applicable)
     * @patam  ID_TEXT $method The name of the Hook_privacy_base method which called this function
     */
    protected function modify_table_details(string $table_name, array &$table_details, ?array $row, string $method)
    {
        return;
    }

    /**
     * Get selection SQL for a particular search.
     * You should run fill_in_missing_privacy_criteria before running this.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $table_details Details from the info function for the given table
     * @param  integer $table_action A PRIVACY_METHOD_* constant which we plan to execute on this table
     * @param  boolean $purge_retention Whether to only return records which should no longer be retained (false: do not consider retention period)
     * @param  ID_TEXT $username Username to search for (blank: none)
     * @param  array $ip_addresses List of IP addresses to search for
     * @param  ?MEMBER $member_id Member ID to search for (null: none)
     * @param  string $email_address E-mail address to search for (blank: none)
     * @param  array $others List of other strings to search for, via additional-anonymise-fields
     * @return string The stem of the SQL query (blank: do not run this search as there are no filters)
     */
     public function get_selection_sql(string $table_name, array $table_details, int $table_action, bool $purge_retention = false, string $username = '', array $ip_addresses = [], ?int $member_id = null, string $email_address = '', array $others = []) : string
    {
        $this->modify_table_details($table_name, $table_details, null, 'get_selection_sql');

        $sql = '';

        $conditions = [];

        if ($username != '') {
            foreach ($table_details['username_fields'] as $username_field) {
                $conditions[] = db_string_equal_to($username_field, $username);
            }
        }

        if ($member_id !== null) {
            if ($table_details['owner_id_field'] !== null) {
                $conditions[] = $table_details['owner_id_field'] . '=' . strval($member_id);
            }
            foreach ($table_details['additional_member_id_fields'] as $member_id_field) {
                $conditions[] = $member_id_field . '=' . strval($member_id);
            }
        }

        foreach ($ip_addresses as $ip_address) {
            if (($ip_address == '') || ($ip_address == '127.0.0.1')) {
                continue;
            }

            foreach ($table_details['ip_address_fields'] as $ip_address_field) {
                $conditions[] = db_string_equal_to($ip_address_field, $ip_address);
            }
        }

        if ($email_address != '') {
            foreach ($table_details['email_fields'] as $email_address_field) {
                $conditions[] = db_string_equal_to($email_address_field, $email_address);
            }
        }

        foreach ($others as $other) {
            if ($other == '') {
                continue;
            }

            foreach ($table_details['additional_anonymise_fields'] as $other_field) {
                $conditions[] = db_string_equal_to($other_field, $other);
            }
        }

        // Return blank / do not run if we have no WHERE conditions by this point (unless purging by retention)
        if ((empty($conditions)) && (!$purge_retention)) {
            return '';
        }

        if (!empty($conditions)) {
            $sql .= ' WHERE (';
            foreach ($conditions as $i => $condition) {
                if ($i != 0) {
                    $sql .= ' OR ';
                }

                $sql .= $condition;
            }
            $sql .= ')';
        }

        if ($purge_retention) {
            if (($table_details['timestamp_field'] !== null) && ($table_details['retention_handle_method'] != PRIVACY_METHOD__LEAVE)) {
                $metadata = $this->get_field_metadata($table_name);

                if (strpos($sql, ' WHERE ') === false) {
                    $sql .= ' WHERE ';
                } else {
                    $sql .= ' AND ';
                }

                // Treat null as a never-expiring record
                if (strpos($metadata[$table_details['timestamp_field']], '?') != 0) {
                    $sql .= $table_details['timestamp_field'] . ' IS NOT NULL AND ';
                }

                $sql .= $table_details['timestamp_field'] . '<=' . strval(time() - 60 * 60 * 24 * $table_details['retention_days']);
            } elseif (empty($conditions)) { // Still no where clause, so we should not run this query
                return '';
            }
        }

        if (($table_details['extra_where'] !== null) && ($table_action != PRIVACY_METHOD__DOWNLOAD)) {
            $sql .= ' AND ';
            $sql .= $table_details['extra_where'];
        }

        return $sql;
    }

    /**
     * Get field metadata for a table.
     *
     * @param  ID_TEXT $table_name Table name
     * @return array Field metadata as field => type
     */
    protected function get_field_metadata(string $table_name) : array
    {
        $db = get_db_for($table_name);
        $fields = $db->query_select('db_meta', ['m_name', 'm_type'], ['m_table' => $table_name]);
        return collapse_2d_complexity('m_name', 'm_type', $fields);
    }

    /**
     * Serialise a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $row Row raw from the database
     * @return array Row in a cleanly serialised format
     */
    public function serialise(string $table_name, array $row) : array
    {
        $db = get_db_for($table_name);
        $metadata = $this->get_field_metadata($table_name);

        require_code('database_relations');
        $relation_map = get_relation_map();

        $row2 = [];
        foreach ($metadata as $key => $type) {
            if (!isset($row[$key])) {
               continue;
            }

            if (strpos($type, '_TRANS') !== false) {
                $row2[$key] = get_translated_text($row[$key], $db);
            } elseif (strpos($type, 'TIME') !== false) {
                $row2[$key] = ($row[$key] === null) ? null : get_timezoned_date_time($row[$key], false, false, $GLOBALS['FORUM_DRIVER']->get_guest_id());
            } elseif (strpos($type, 'BINARY') !== false) {
                $row2[$key] = ($row[$key] === null) ? null : ($row[$key] == 1);
            } elseif (strpos($type, 'MEMBER') !== false) {
                $row2[$key . '__dereferenced'] = $GLOBALS['FORUM_DRIVER']->get_username($row[$key], true);
            } elseif (strpos($type, 'GROUP') !== false) {
                require_code('cns_groups');
                $row2[$key . '__dereferenced'] = cns_get_group_name($row[$key]);
            } elseif ((strpos($type, 'AUTO_LINK') !== false) && (isset($relation_map[$table_name . '.' . $key]))) {
                $row2[$key] = $row[$key];
                $row2[$key . '__auto_link'] = $relation_map[$table_name . '.' . $key];
            } else {
                $row2[$key] = $row[$key];
            }
        }

        return $row2;
    }

    /**
     * Anonymise a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $table_details Details of the table from the info function
     * @param  array $row Row raw from the database
     * @param  ID_TEXT $username Only anonymise username fields containing this username (blank: do not filter by this)
     * @param  array $ip_addresses Only anonymise IP fields containing one of these IP addresses (empty: do not filter by this)
     * @param  ?MEMBER $member_id Only anonymise member fields containing this member ID (null: do not filter by this)
     * @param  string $email_address Only anonymise e-mail fields containing this e-mail address (blank: do not filter by this)
     * @param  array $others Only anonymise additional fields containing one of these strings (empty: do not filter by this)
     * @param  boolean $reverse_logic_return Whether to anonymise on fields that do not match the provided criteria instead of those that do, and return a modified $row instead of modifying the database
     * @return ?array Modified row, if $reverse_logic_return was true
     */
    public function anonymise(string $table_name, array $table_details, array $row, string $username = '', array $ip_addresses = [], ?int $member_id = null, string $email_address = '', array $others = [], bool $reverse_logic_return = false) : ?array
    {
        $this->modify_table_details($table_name, $table_details, $row, 'anonymise');

        $db = get_db_for($table_name);
        $metadata = $this->get_field_metadata($table_name);

        // Work out WHERE clause
        $where = [];
        if (!$reverse_logic_return) {
            foreach ($metadata as $key => $type) {
                if (strpos($type, '*') !== false) {
                    $where[$key] = $row[$key];
                }
            }
            if (empty($where)) {
                warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
            }
        }

        $update = [];

        // Anonymise owner ID
        $owner_id_field = $table_details['owner_id_field'];
        $should_anonymise = (($owner_id_field !== null) && ($row[$owner_id_field] === $member_id));
        if ($reverse_logic_return) {
            $should_anonymise = (($owner_id_field !== null) && ($row[$owner_id_field] !== $member_id));
        }
        if ($should_anonymise) {
            if (strpos($metadata[$owner_id_field], '?') !== false) {
                $anonymised_value = null;
            } else {
                $anonymised_value = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $update[$owner_id_field] = $anonymised_value;
        }

        // Anonymise member ID
        $member_id_fields = $table_details['additional_member_id_fields'];
        foreach ($member_id_fields as $member_id_field) {
            $should_anonymise = (($member_id !== null) && ($row[$member_id_field] === $member_id));
            if ($reverse_logic_return) {
                $should_anonymise = (($member_id !== null) && ($row[$member_id_field] !== $member_id));
            }

            // Don't anonymise the wrong members in case additional member fields were defined
            if (!$should_anonymise) {
                continue;
            }

            if (strpos($metadata[$member_id_field], '?') !== false) {
                $anonymised_value = null;
            } else {
                $anonymised_value = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $update[$member_id_field] = $anonymised_value;
        }

        // Anonymise IP address
        $ip_address_fields = $table_details['ip_address_fields'];
        foreach ($ip_address_fields as $ip_address_field) {
            $should_anonymise = ((count($ip_addresses) > 0) && (in_array($row[$ip_address_field], $ip_addresses)));
            if ($reverse_logic_return) {
                $should_anonymise = ((count($ip_addresses) > 0) && (!in_array($row[$ip_address_field], $ip_addresses)));
            }

            // Don't anonymise the wrong IP addresses in case additional IP fields were defined
            if (!$should_anonymise) {
                continue;
            }

            $update[$ip_address_field] = '';
        }

        // Anonymise e-mail address
        $email_fields = $table_details['email_fields'];
        foreach ($email_fields as $email_field) {
            $should_anonymise = (($email_address != '') && ($row[$email_field] === $email_address));
            if ($reverse_logic_return) {
                $should_anonymise = (($email_address != '') && ($row[$email_field] !== $email_address));
            }

            // Don't anonymise the wrong e-mail addresses in case additional e-mail fields were defined
            if (!$should_anonymise) {
                continue;
            }

            $update[$email_field] = '';
        }

        // Anonymise username
        $username_fields = $table_details['username_fields'];
        foreach ($username_fields as $username_field) {
            $should_anonymise = (($username != '') && ($row[$username_field] === $username));
            if ($reverse_logic_return) {
                $should_anonymise = (($username != '') && ($row[$username_field] !== $username));
            }

            // Don't anonymise the wrong usernames in case additional username fields were defined
            if (!$should_anonymise) {
                continue;
            }

            if (strpos($metadata[$username_field], '?') !== false) {
                $anonymised_value = null;
            } else {
                $anonymised_value = do_lang('GUEST');
            }
            $update[$username_field] = $anonymised_value;
        }

        // Anonymise additional fields
        $additional_anonymise_fields = $table_details['additional_anonymise_fields'];
        $is_owner = $this->is_owner($table_name, $table_details, $row, $member_id, $username, $email_address);
        foreach ($additional_anonymise_fields as $additional_anonymise_field) {
            // If this person is not the owner, then only anonymise fields matching given others criteria
            if (!$is_owner) {
                if ($reverse_logic_return) {
                    if (count($others) == 0) {
                        break;
                    }
                    if (in_array($row[$additional_anonymise_field], $others)) {
                        continue;
                    }
                } else {
                    if (!in_array($row[$additional_anonymise_field], $others)) {
                        continue;
                    }
                }
            } elseif ($reverse_logic_return) {
                break;
            }

            $update[$additional_anonymise_field] = do_lang('UNKNOWN');
        }

        if (!$reverse_logic_return) {
            // If any of our update fields are keys, then we have to delete rather than anonymise if allowed
            foreach ($update as $field => $value) {
                $type = $metadata[$field];
                if (strpos($type, '*') !== false) {
                    if (($table_details['allowed_handle_methods'] & PRIVACY_METHOD__DELETE) != 0) {
                        $this->delete($table_name, $table_details, $row);
                        return null;
                    }

                    // Must error at this point
                    warn_exit(do_lang_tempcode('PRIVACY_PURGE_COULD_NOT_ANONYMISE', escape_html($table_name), escape_html($field)));
                }
            }

            // Run query.
            $db->query_update($table_name, $update, $where/*, '', null, 0, false, true*/);

            /* Cannot do this because we might be deleting records that belong to multiple people
             $db->query_delete($table_name, $where); // In case there was some duplication error causing the above query to fail
             */

            return null;
        }

        foreach ($update as $field => $value) {
            $row[$field] = $value;
        }
        return $row;
    }

    /**
     * Delete a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $table_details Details of the table from the info function
     * @param  array $row Row raw from the database
     */
    public function delete(string $table_name, array $table_details, array $row)
    {
        $this->modify_table_details($table_name, $table_details, $row, 'delete');

        $info = $this->info();

        $db = get_db_for($table_name);
        $metadata = $this->get_field_metadata($table_name);

        // Work out WHERE clause
        $where = [];
        foreach ($metadata as $key => $type) {
            if (strpos($type, '*') !== false) {
                $where[$key] = $row[$key];
            }
        }
        if (empty($where)) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }

        // Delete language strings
        foreach ($metadata as $key => $type) {
            if (strpos($type, '_TRANS') !== false) {
                delete_lang($row[$key], $db);
            }
        }

        // Run query
        $db->query_delete($table_name, $where, '', 1);
    }

    /**
     * Determine if, given the provided criteria and content, we have high confidence this individual owns the content.
     * You should run fill_in_missing_privacy_criteria before running this.
     *
     * @param  ID_TEXT $table_name The name of the database table
     * @param  array $table_details The details of the table from the privacy hook; can be modified for special behaviour
     * @param  array $row The raw database row
     * @param  ?MEMBER $member_id The given member ID in search criteria (null: not provided)
     * @param  string $username The given username in search criteria (blank: not provided)
     * @param  string $email_address The given email address in search criteria (blank: not provided)
     * @return boolean Whether we are confident this individual owns this content
     */
    public function is_owner(string $table_name, array $table_details, array $row, ?int $member_id, string $username, string $email_address) : bool
    {
        $this->modify_table_details($table_name, $table_details, $row, 'is_owner');

        // Guest can never be owner
        if (($member_id !== null) && (is_guest($member_id))) {
            return false;
        }

        // If member ID matches owner_id_field, they are the owner
        if (($table_details['owner_id_field'] !== null) && ($member_id !== null) && ($row[$table_details['owner_id_field']] == $member_id)) {
            return true;
        }

        // If no owner ID field and exactly one username field, and username matches that field, they are owner
        if (($table_details['owner_id_field'] === null) && (count($table_details['username_fields']) == 1) && ($username != '') && ($row[$table_details['username_fields'][0]] == $username)) {
            return true;
        }

        // If no owner ID field, exactly one e-mail field, and e-mail provided matches that field, they are owner
        if (($table_details['owner_id_field'] === null) && (count($table_details['email_fields']) == 1) && ($email_address != '') && ($row[$table_details['email_fields'][0]] == $email_address)) {
            return true;
        }

        // If any criterium matches a database field that is a key, then consider them owner
        $metadata = $this->get_field_metadata($table_name);
        $criteria = [
            'additional_member_id_fields' => $member_id,
            'username_fields' => $username,
            'email_fields' => $email_address,
        ];
        foreach ($criteria as $field_name => $input) {
            if (($input === null) || ($input == '')) {
                continue;
            }
            foreach ($table_details[$field_name] as $field) {
                if (!isset($metadata[$field])) {
                    continue;
                }
                if (strpos($metadata[$field], '*') === false) {
                    continue;
                }

                if ($input == $row[$field]) {
                    return true;
                }
            }
        }

        // By this point, they are not owner
        return false;
    }
}
