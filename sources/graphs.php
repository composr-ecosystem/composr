<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_abstract_components
 */

/**
 * Generate a random graph ID.
 *
 * @return string Graph ID
 */
function _generate_graph_id() : string
{
    return md5(uniqid('', true));
}

/**
 * Normalise textual graph dimensions to something appropriate for CSS.
 *
 * @param  ?string $width Width (null: responsive)
 * @param  ?string $height Height (null: responsive)
 */
function _normalise_graph_dims(?string &$width, ?string &$height)
{
    if ($width === null) {
        $width = '';
    }
    if ($height === null) {
        $height = '';
    }
    // ^ If both are blank, it'll be responsive

    if (is_numeric($width)) {
        $width = $width . 'px';
    }
    if (is_numeric($height)) {
        $height = $height . 'px';
    }
}

/**
 * Parse a colour pool string.
 *
 * @param  string $str Colour pool string
 * @return array $color_pool Colour pool
 */
function _parse_color_pool_string(string $str) : array
{
    $original_color_pool = [];
    _generate_graph_color_pool($original_color_pool);

    $_color_pool = empty($str) ? [] : explode(',', $str);
    $color_pool = [];
    foreach ($_color_pool as $i => $x) {
        if (strpos($x, '=') !== false) {
            // Mapping labels directly to colors
            list($key, $val) = explode('=', $x, 2);
            $color_pool[$key] = $val;
        } elseif (substr($x, 0, 1) == '#') {
            // Straight forward color pool
            $color_pool[] = $x;
        } else {
            // Just map labels to the default color pool in the order given
            $color_pool[$x] = $original_color_pool[$i % count($original_color_pool)];
        }
    }
    return $color_pool;
}

/**
 * Extend/generate a colour pool of colours to use on graphs.
 *
 * @param  array $color_pool Existing colour pool
 */
function _generate_graph_color_pool(array &$color_pool)
{
    // Useful tool: http://phrogz.net/css/distinct-colors.html

    $color_pool[] = '#d15858';
    $color_pool[] = '#d18658';
    $color_pool[] = '#d1b558';
    $color_pool[] = '#58d17c';
    $color_pool[] = '#58c9d1';
    $color_pool[] = '#589bd1';
    $color_pool[] = '#586cd1';
    $color_pool[] = '#a158d1';
    $color_pool[] = '#d158a5';
}

/**
 * Get a colour from the colour pool.
 *
 * @param  integer $i Index
 * @param  array $color_pool Colour pool
 * @param  ?string $label Named colour label to look up (null: no named label)
 * @return string Colour
 */
function _search_graph_color_pool(int $i, array $color_pool, ?string $label = null) : string
{
    $_color_pool = array_values($color_pool);

    if (($label !== null) && (isset($color_pool[$label]))) {
        return $color_pool[$label];
    }

    return $_color_pool[$i % count($_color_pool)];
}

/**
 * Generate a scatter diagram.
 * 1 measure of scattered data across two uneven dimensions.
 *
 * @param  array $datapoints Data-points to render
 * @param  mixed $x_axis_label X-axis label, provided in plain-text format (string or Tempcode)
 * @param  mixed $y_axis_label Y-axis label, provided in plain-text format (string or Tempcode)
 * @param  array $options Map of additional fiddly options
 * @param  ?string $color Colour for plotting (null: get from default colour pool)
 * @param  ?string $width Width (null: responsive)
 * @param  ?string $height Height (null: responsive)
 * @return Tempcode The diagram
 */
function graph_scatter_diagram(array $datapoints, $x_axis_label = '', $y_axis_label = '', array $options = [], ?string $color = null, ?string $width = null, ?string $height = null) : object
{
    if ($color === null) {
        $color_pool = [];
        _generate_graph_color_pool($color_pool);
    }

    $id = isset($options['id']) ? $options['id'] : _generate_graph_id();

    _normalise_graph_dims($width, $height);

    $bubble = false;

    $max = 0.0;

    $_datapoints = [];
    foreach ($datapoints as $p) {
        $r = isset($p['r']) ? number_raw_string($p['r']) : null;

        $y_value = number_raw_string($p['y']);

        $category = isset($p['category']) ? $p['category'] : '';

        if (!isset($_datapoints[$category])) {
            $_datapoints[$category] = [];
        }
        $_datapoints[$category][] = [
            'X' => number_raw_string($p['x']),
            'Y' => $y_value,
            'R' => $r,
            'TOOLTIP' => array_key_exists('tooltip', $p) ? $p['tooltip'] : '',
        ];

        if ($r !== null) {
            $bubble = true;
        }

        $max = max($max, floatval($y_value));
    }

    ksort($_datapoints);

    $datasets = [];
    $i = 0;
    foreach ($_datapoints as $category => $__datapoints) {
        $datasets[] = [
            'DATAPOINTS' => $__datapoints,
            'CATEGORY' => $category,
            'COLOR' => ($color === null) ? $color_pool[$i % count($color_pool)] : $color,
        ];
        $i++;
    }

    $begin_at_zero = isset($options['begin_at_zero']) ? $options['begin_at_zero'] : false;

    $clamp_y_axis = isset($options['clamp_y_axis']) ? $options['clamp_y_axis'] : false;
    if ((isset($options['clamp_y_axis'])) && ($options['clamp_y_axis'] != '0')) {
        if (is_integer($options['clamp_y_axis'])) {
            $max += $options['clamp_y_axis'];
        }
        $clamp_y_axis = true;
    } else {
        $clamp_y_axis = false;
    }

    $has_wordwrap = isset($options['wordwrap_tooltip_at']);

    $logarithmic = isset($options['logarithmic']) ? $options['logarithmic'] : false;

    return do_template('GRAPH_SCATTER_DIAGRAM', [
        '_GUID' => 'a3fc255270253893b7550f18f9f94fca',
        'ID' => $id,
        'WIDTH' => $width,
        'HEIGHT' => $height,
        'X_AXIS_LABEL' => $x_axis_label,
        'Y_AXIS_LABEL' => $y_axis_label,
        'DATASETS' => $datasets,
        'BEGIN_AT_ZERO' => $begin_at_zero,
        'BUBBLE' => $bubble,
        'CLAMP_Y_AXIS' => $clamp_y_axis,
        'LOGARITHMIC' => $logarithmic,
        'MAX' => strval(intval(ceil($max))),
        'HAS_WORDWRAP' => $has_wordwrap,
    ]);
}

/**
 * Generate a line chart.
 * Multiple measures across one even dimension (x) and one uneven dimension (y).
 *
 * @param  array $datasets Data-sets to render
 * @param  ?array $x_labels Labels for X-axis (null: numeric sequence for each data point, based on first set of data points)
 * @param  mixed $x_axis_label X-axis label, provided in plain-text format (string or Tempcode)
 * @param  mixed $y_axis_label Y-axis label, provided in plain-text format (string or Tempcode)
 * @param  array $options Map of additional fiddly options
 * @param  ?array $color_pool Colour pool to use (null: default colour pool)
 * @param  ?string $width Width (null: responsive)
 * @param  ?string $height Height (null: responsive)
 * @return Tempcode The chart
 */
function graph_line_chart(array $datasets, ?array $x_labels = null, $x_axis_label = '', $y_axis_label = '', array $options = [], ?array $color_pool = [], ?string $width = null, ?string $height = null) : object
{
    _generate_graph_color_pool($color_pool);

    if (is_mobile()) {
        $show_data_labels = false;
    }

    $id = isset($options['id']) ? $options['id'] : _generate_graph_id();

    _normalise_graph_dims($width, $height);

    if (empty($datasets)) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    $max = 0.0;

    if ($x_labels === null) {
        $x_labels = range(0, count($datasets[0]['datapoints']));
    }

    $_datasets = [];
    foreach ($datasets as $i => $dataset) {
        if (count($dataset['datapoints']) != count($x_labels)) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }

        $datapoints = [];
        foreach ($dataset['datapoints'] as $p) {
            if (is_array($p)) {
                $value = number_raw_string($p['value']);

                $datapoints[] = [
                    'VALUE' => $value,
                    'TOOLTIP' => array_key_exists('tooltip', $p) ? $p['tooltip'] : '',
                ];
            } else {
                $value = number_raw_string($p);

                $datapoints[] = [
                    'VALUE' => $value,
                    'TOOLTIP' => '',
                ];
            }

            $max = max($max, floatval($value));
        }

        $_datasets[] = [
            'LABEL' => $dataset['label'],
            'COLOR' => isset($dataset['color']) ? $dataset['color'] : _search_graph_color_pool($i, $color_pool, $dataset['label']),
            'DATAPOINTS' => $datapoints,
        ];
    }

    $begin_at_zero = isset($options['begin_at_zero']) ? $options['begin_at_zero'] : false;
    $show_data_labels = isset($options['show_data_labels']) ? $options['show_data_labels'] : true;
    $fill = isset($options['fill']) ? $options['fill'] : false;

    if ((isset($options['clamp_y_axis'])) && ($options['clamp_y_axis'] != '0')) {
        if (is_integer($options['clamp_y_axis'])) {
            $max += $options['clamp_y_axis'];
        }
        $clamp_y_axis = true;
    } else {
        $clamp_y_axis = false;
    }

    $has_wordwrap = isset($options['wordwrap_tooltip_at']);

    $logarithmic = isset($options['logarithmic']) ? $options['logarithmic'] : false;

    return do_template('GRAPH_LINE_CHART', [
        '_GUID' => '4a45757f02c5356c6b87a1c8d6366d49',
        'ID' => $id,
        'WIDTH' => $width,
        'HEIGHT' => $height,
        'X_LABELS' => $x_labels,
        'X_AXIS_LABEL' => $x_axis_label,
        'Y_AXIS_LABEL' => $y_axis_label,
        'DATASETS' => $_datasets,
        'BEGIN_AT_ZERO' => $begin_at_zero,
        'SHOW_DATA_LABELS' => $show_data_labels,
        'FILL' => $fill,
        'CLAMP_Y_AXIS' => $clamp_y_axis,
        'LOGARITHMIC' => $logarithmic,
        'MAX' => strval(intval(ceil($max))),
        'HAS_WORDWRAP' => $has_wordwrap,
    ]);
}

/**
 * Generate a pie chart.
 * 1 measure across one small even dimension (different segments) and one uneven dimension (angle) [unlabelled dimensions].
 *
 * @param  array $datapoints Data-points to render
 * @param  array $options Map of additional fiddly options
 * @param  ?array $color_pool Colour pool to use (null: default colour pool)
 * @param  ?string $width Width (null: responsive)
 * @param  ?string $height Height (null: responsive)
 * @return Tempcode The chart
 */
function graph_pie_chart(array $datapoints, array $options = [], ?array $color_pool = [], ?string $width = null, ?string $height = null) : object
{
    _generate_graph_color_pool($color_pool);

    if (is_mobile()) {
        $show_data_labels = false;
    }

    $id = isset($options['id']) ? $options['id'] : _generate_graph_id();

    _normalise_graph_dims($width, $height);

    $i = 0;
    $_datapoints = [];
    foreach ($datapoints as $x => $p) {
        if (is_array($p)) {
            $value = number_raw_string($p['value']);

            $_datapoints[] = [
                'LABEL' => $p['label'],
                'VALUE' => $value,
                'TOOLTIP' => array_key_exists('tooltip', $p) ? $p['tooltip'] : '',
                'COLOR' => _search_graph_color_pool($i, $color_pool, $p['label']),
            ];
        } else {
            $value = is_string($x) ? $x : number_raw_string($x);

            $_datapoints[] = [
                'LABEL' => $value,
                'VALUE' => number_raw_string($p),
                'TOOLTIP' => '',
                'COLOR' => _search_graph_color_pool($i, $color_pool, @strval($x)),
            ];
        }
        $i++;
    }

    $show_data_labels = isset($options['show_data_labels']) ? $options['show_data_labels'] : true;
    $doughnut = isset($options['doughnut']) ? $options['doughnut'] : false;

    $has_wordwrap = isset($options['wordwrap_tooltip_at']);

    return do_template('GRAPH_PIE_CHART', [
        '_GUID' => '24a351a8cc04f0777b2016ab2ede35cc',
        'ID' => $id,
        'WIDTH' => $width,
        'HEIGHT' => $height,
        'DATAPOINTS' => $_datapoints,
        'SHOW_DATA_LABELS' => $show_data_labels,
        'DOUGHNUT' => $doughnut,
        'HAS_WORDWRAP' => $has_wordwrap,
    ]);
}

/**
 * Generate a bar chart.
 * 1 measure across one large even dimension (x) and one uneven dimension (y).
 *
 * @param  array $datapoints Data-points to render
 * @param  mixed $x_axis_label X-axis label, provided in plain-text format (string or Tempcode)
 * @param  mixed $y_axis_label Y-axis label, provided in plain-text format (string or Tempcode)
 * @param  array $options Map of additional fiddly options
 * @param  ?array $color_pool Colour pool to use (null: default colour pool)
 * @param  ?string $width Width (null: responsive)
 * @param  ?string $height Height (null: responsive)
 * @return Tempcode The chart
 */
function graph_bar_chart(array $datapoints, $x_axis_label = '', $y_axis_label = '', array $options = [], ?array $color_pool = [], ?string $width = null, ?string $height = null) : object
{
    _generate_graph_color_pool($color_pool);

    if (is_mobile()) {
        $show_data_labels = false;
    }

    $id = isset($options['id']) ? $options['id'] : _generate_graph_id();

    _normalise_graph_dims($width, $height);

    $max = 0.0;

    $i = 0;
    $_datapoints = [];
    foreach ($datapoints as $x => $p) {
        if (is_array($p)) {
            $value = number_raw_string($p['value']);

            $_datapoints[] = [
                'LABEL' => $p['label'],
                'VALUE' => $value,
                'TOOLTIP' => array_key_exists('tooltip', $p) ? $p['tooltip'] : '',
                'COLOR' => _search_graph_color_pool($i, $color_pool, $p['label']),
            ];
        } else {
            $value = number_raw_string($p);

            $_datapoints[] = [
                'LABEL' => is_string($x) ? $x : number_raw_string($x),
                'VALUE' => $value,
                'TOOLTIP' => '',
                'COLOR' => _search_graph_color_pool($i, $color_pool, @strval($x)),
            ];
        }

        $max = max($max, floatval($value));

        $i++;
    }

    $begin_at_zero = isset($options['begin_at_zero']) ? $options['begin_at_zero'] : false;
    $show_data_labels = isset($options['show_data_labels']) ? $options['show_data_labels'] : true;
    $horizontal = isset($options['horizontal']) ? $options['horizontal'] : false;

    if ((isset($options['clamp_y_axis'])) && ($options['clamp_y_axis'] != '0')) {
        if (is_integer($options['clamp_y_axis'])) {
            $max += $options['clamp_y_axis'];
        }
        $clamp_y_axis = true;
    } else {
        $clamp_y_axis = false;
    }

    $logarithmic = isset($options['logarithmic']) ? $options['logarithmic'] : false;

    $has_wordwrap = isset($options['wordwrap_tooltip_at']);

    return do_template('GRAPH_BAR_CHART', [
        '_GUID' => '173df546b9bcb31ca064910e1952e484',
        'ID' => $id,
        'WIDTH' => $width,
        'HEIGHT' => $height,
        'X_AXIS_LABEL' => $x_axis_label,
        'Y_AXIS_LABEL' => $y_axis_label,
        'DATAPOINTS' => $_datapoints,
        'BEGIN_AT_ZERO' => $begin_at_zero,
        'SHOW_DATA_LABELS' => $show_data_labels,
        'HORIZONTAL' => $horizontal,
        'CLAMP_Y_AXIS' => $clamp_y_axis,
        'LOGARITHMIC' => $logarithmic,
        'MAX' => strval(intval(ceil($max))),
        'HAS_WORDWRAP' => $has_wordwrap,
    ]);
}

/**
 * Generate a stacked bar chart.
 * Multiple measures across one large even dimension (x) and one uneven dimension (y).
 *
 * @param  array $datasets Data-sets to render
 * @param  array $labels List of labels for datasets
 * @param  mixed $x_axis_label X-axis label, provided in plain-text format (string or Tempcode)
 * @param  mixed $y_axis_label Y-axis label, provided in plain-text format (string or Tempcode)
 * @param  array $options Map of additional fiddly options
 * @param  ?array $color_pool Colour pool to use (null: default colour pool)
 * @param  ?string $width Width (null: responsive)
 * @param  ?string $height Height (null: responsive)
 * @return Tempcode The chart
 */
function graph_stacked_bar_chart(array $datasets, array $labels, $x_axis_label = '', $y_axis_label = '', array $options = [], ?array $color_pool = null, ?string $width = null, ?string $height = null) : object
{
    _generate_graph_color_pool($color_pool);

    if (is_mobile()) {
        $show_data_labels = false;
    }

    $id = isset($options['id']) ? $options['id'] : _generate_graph_id();

    _normalise_graph_dims($width, $height);

    $max = 0.0;

    $_datasets = [];
    foreach ($datasets as $i => $dataset) {
        $datapoints = [];
        foreach ($dataset['datapoints'] as $x => $p) {
            if (is_array($p)) {
                $value = number_raw_string($p['value']);

                $datapoints[] = [
                    'LABEL' => $p['label'],
                    'VALUE' => $value,
                    'TOOLTIP' => array_key_exists('tooltip', $p) ? $p['tooltip'] : '',
                    'COLOR' => _search_graph_color_pool($i, $color_pool, $p['label']),
                ];
            } else {
                $value = number_raw_string($p);

                $datapoints[] = [
                    'LABEL' => @strval($x),
                    'VALUE' => $value,
                    'TOOLTIP' => '',
                    'COLOR' => _search_graph_color_pool($i, $color_pool, @strval($x)),
                ];
            }

            $max = max($max, floatval($value));
        }

        $_datasets[] = [
            'LABEL' => $dataset['label'],
            'COLOR' => isset($dataset['color']) ? $dataset['color'] : _search_graph_color_pool($i, $color_pool, $dataset['label']),
            'DATAPOINTS' => $datapoints,
        ];
    }

    $_labels = [];
    foreach ($labels as $label) {
        $_labels[] = [
            'LABEL' => $label,
        ];
    }

    $begin_at_zero = isset($options['begin_at_zero']) ? $options['begin_at_zero'] : true;
    $show_data_labels = isset($options['show_data_labels']) ? $options['show_data_labels'] : true;
    $horizontal = isset($options['horizontal']) ? $options['horizontal'] : false;
    $stacked = isset($options['stacked']) ? $options['stacked'] : true;

    if ((isset($options['clamp_y_axis'])) && ($options['clamp_y_axis'] != '0')) {
        if (is_integer($options['clamp_y_axis'])) {
            $max += $options['clamp_y_axis'];
        }
        $clamp_y_axis = true;
    } else {
        $clamp_y_axis = false;
    }

    $logarithmic = isset($options['logarithmic']) ? $options['logarithmic'] : false;

    return do_template('GRAPH_STACKED_BAR_CHART', [
        '_GUID' => 'fda0ca8d168235248b4eee8028bd22ff',
        'ID' => $id,
        'WIDTH' => $width,
        'HEIGHT' => $height,
        'X_AXIS_LABEL' => $x_axis_label,
        'Y_AXIS_LABEL' => $y_axis_label,
        'DATASETS' => $_datasets,
        'LABELS' => $_labels,
        'BEGIN_AT_ZERO' => $begin_at_zero,
        'SHOW_DATA_LABELS' => $show_data_labels,
        'HORIZONTAL' => $horizontal,
        'STACKED' => $stacked,
        'CLAMP_Y_AXIS' => $clamp_y_axis,
        'LOGARITHMIC' => $logarithmic,
        'MAX' => strval(intval(ceil($max))),
    ]);
}

/**
 * Many multiple measures across one large even dimension (x) and one uneven dimension (y).
 *
 * @param  array $datasets Data-sets to render
 * @param  mixed $x_axis_label X-axis label, provided in plain-text format (string or Tempcode)
 * @param  mixed $y_axis_label Y-axis label, provided in plain-text format (string or Tempcode)
 * @param  mixed $z_axis_label Z-axis label, provided in plain-text format (string or Tempcode)
 * @param  string $title Title
 * @param  array $options Map of additional fiddly options
 * @param  ?array $color_pool Colour pool to use (null: default colour pool)
 * @param  ?string $width Width (null: responsive)
 * @param  ?string $height Height (null: responsive)
 * @return Tempcode The chart
 */
function graph_bubble_bar_chart(array $datasets, $x_axis_label = '', $y_axis_label = '', $z_axis_label = '', string $title = '', array $options = [], ?array $color_pool = null, ?string $width = null, ?string $height = null) : object
{
    _generate_graph_color_pool($color_pool);

    if (is_mobile()) {
        $show_data_labels = false;
    }

    $id = isset($options['id']) ? $options['id'] : _generate_graph_id();

    _normalise_graph_dims($width, $height);

    $max = null;
    $min = null;

    $labels = [];

    $_datasets = [];
    foreach ($datasets as $i => $dataset) {
        $datapoints = [];
        foreach ($dataset['datapoints'] as $x => $p) {
            if (is_array($p)) {
                $label = $p['label'];
                $value = number_raw_string($p['value']);

                $datapoints[] = [
                    'LABEL' => $label,
                    'VALUE' => $value,
                    'TOOLTIP' => array_key_exists('tooltip', $p) ? $p['tooltip'] : '',
                ];
            } else {
                $label = @strval($x);
                $value = number_raw_string($p);

                $datapoints[] = [
                    'LABEL' => $label,
                    'VALUE' => $value,
                    'TOOLTIP' => '',
                ];
            }

            if ($i == 0) {
                $labels[] = $label;
            }

            $_value = floatval($value);
            if (($max === null) || ($_value > $max)) {
                $max = $_value;
            }
            if (($min === null) || ($_value < $min)) {
                $min = $_value;
            }
        }

        $_datasets[] = [
            'Y_LABEL' => $dataset['label'],
            'DATASET_TOOLTIP' => $dataset['tooltip'],
            'DATAPOINTS' => $datapoints,
        ];
    }

    $show_data_labels = isset($options['show_data_labels']) ? $options['show_data_labels'] : true;

    $has_wordwrap = isset($options['wordwrap_tooltip_at']);

    return do_template('GRAPH_BUBBLE_BAR_CHART', [
        '_GUID' => 'ea48f3288b236e06db58af927c5ce0a2',
        'ID' => $id,
        'WIDTH' => $width,
        'HEIGHT' => $height,
        'X_AXIS_LABEL' => $x_axis_label,
        'Y_AXIS_LABEL' => $y_axis_label,
        'Z_AXIS_LABEL' => $z_axis_label,
        'TITLE' => $title,
        'LABELS' => $labels,
        'DATASETS' => $_datasets,
        'SHOW_DATA_LABELS' => $show_data_labels,
        'COLOR' => _search_graph_color_pool(0, $color_pool),
        'MIN' => float_to_raw_string($min, 2, true),
        'MAX' => float_to_raw_string($max, 2, true),
        'HAS_WORDWRAP' => $has_wordwrap,
    ]);
}

/**
 * Prepare a numeric value for display in a graph.
 *
 * @param  mixed $value Value
 * @return string Value for chart.js
 */
function number_raw_string($value) : string
{
    if (is_integer($value)) {
        return strval($value);
    }
    if (is_float($value)) {
        return float_to_raw_string($value, 2, true);
    }
    if ((is_string($value)) && (is_numeric($value))) {
        return $value;
    }
    return '0';
}
