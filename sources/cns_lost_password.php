<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_cns
 */

/**
 * Find what password reset process will be used.
 *
 * @return ID_TEXT Password reset process codename
 */
function get_password_reset_process() : string
{
    $password_reset_process = get_option('password_reset_process');
    if ($password_reset_process == 'ultra' && get_option('smtp_sockets_host') != '') {
        $password_reset_process = 'emailed';
    }
    return $password_reset_process;
}

/**
 * Logic and flow for sending out a lost password e-mail.
 *
 * @param  string $username Username to reset for (may be blank if other is not)
 * @param  EMAIL $email E-mail address to set for (may be blank if other is not)
 * @return array A tuple: e-mail address (may be blank), member ID (may be null if no member existed but we're not revealing such)
 */
function lost_password_emailer_step(string $username, string $email) : array
{
    require_lang('cns_lost_password');

    // No account specified
    if (($username == '') && ($email == '')) {
        warn_exit(do_lang_tempcode('PASSWORD_RESET_ERROR_NO_ACCOUNT_GIVEN'));
    }

    $password_reset_privacy = get_option('password_reset_privacy');
    $password_reset_process = get_password_reset_process();

    // Find member
    if ($username != '') {
        $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($username);
    } else {
        $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_email_address($email);
    }
    if (($member_id === null) || (is_guest($member_id))) {
        // No member found...

        if (($email == '') && ($password_reset_privacy == 'email')) {
            $password_reset_privacy = 'silent'; // Nothing to e-mail!
        }

        switch ($password_reset_privacy) {
            case 'disclose':
                warn_exit(do_lang_tempcode('PASSWORD_RESET_ERROR_ACCOUNT_NOT_FOUND'));
                break;

            case 'silent':
                return [$email, null];

            case 'email':
                require_code('mail');
                $subject = do_lang('LOST_PASSWORD_NO_ACCOUNT_SUBJECT', get_site_name());
                $message = do_lang('LOST_PASSWORD_NO_ACCOUNT_BODY', get_site_name());
                dispatch_mail($subject, $message, do_lang('mail:NO_MAIL_WEB_VERSION__SENSITIVE'), [$email], null, '', '', ['bypass_queue' => true]);

                return [$email, null];
        }
    }

    // Get account details from the $member_id we now know
    $email = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_email_address');
    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);

    // Check we are allowed to do a reset
    $error_msg = has_lost_password_error($member_id);
    if ($error_msg !== null) {
        switch ($password_reset_privacy) {
            case 'disclose':
                warn_exit($error_msg);
                break;

            case 'silent':
            case 'email':
                require_code('mail');
                $subject = do_lang('LOST_PASSWORD_RESET_ERROR_SUBJECT', get_site_name());
                $message = '[semihtml]' . $error_msg->evaluate() . '[/semihtml]';
                dispatch_mail($subject, $message, do_lang('mail:NO_MAIL_WEB_VERSION__SENSITIVE'), [$email], null, '', '', ['bypass_queue' => true]);

                return [$email, null];
        }
    }

    // Save new code
    $code = generate_and_save_password_reset_code($password_reset_process, $member_id);

    // Logging
    log_it('LOST_PASSWORD_INITIALISE', strval($member_id), $username);

    // Send confirm mail
    send_lost_password_reset_code($password_reset_process, $member_id, $code);

    // Done
    return [$email, $member_id];
}

/**
 * Find if there is something stopping password reset working for a given member.
 *
 * @param  MEMBER $member_id Member
 * @return ?Tempcode Error message (null: none)
 */
function has_lost_password_error(int $member_id) : ?object
{
    $email = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_email_address');
    if ($email == '') {
        return do_lang_tempcode('MEMBER_NO_EMAIL_ADDRESS_RESET_TO');
    }

    if ($GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_password_compat_scheme') == 'httpauth') {
        return do_lang_tempcode('NO_PASSWORD_RESET_HTTPAUTH');
    }

    $is_ldap = cns_is_ldap_member($member_id);
    $is_httpauth = cns_is_httpauth_member($member_id);
    if (($is_ldap)/* || ($is_httpauth  Actually covered more explicitly above - over mock-httpauth, like Facebook, may have passwords reset to break the integrations)*/) {
        return do_lang_tempcode('NO_PASSWORD_RESET_EXTERNAL_ARCHITECTURE');
    }

    if ((has_privilege($member_id, 'disable_lost_passwords')) && (!$GLOBALS['IS_ACTUALLY_ADMIN'])) {
        return do_lang_tempcode('NO_PASSWORD_RESET_ACCESS');
    }

    return null;
}

/**
 * Generate and save lost password reset code.
 *
 * @param  string $password_reset_process Password reset process being used
 * @param  MEMBER $member_id Member ID
 * @return ID_TEXT Reset code
 */
function generate_and_save_password_reset_code(string $password_reset_process, int $member_id) : string
{
    require_code('crypt');

    $code = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_password_change_code'); // Re-use existing code if possible, so that overlapping reset e-mails don't cause chaos
    $session_id = '';

    if ($code != '') {
        if ($password_reset_process == 'ultra') {
            list($code, $session_id) = explode('__', $code);
        }

        // If the code expired, treat as if we have no code to begin with so we generate a new one below
        $code_time = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_password_change_code_time');
        if ($code_time < (time() - 60 * intval(get_option('password_reset_minutes')))) {
            $code = '';
        }
    }

    if (($code == '') || ($password_reset_process == 'ultra') && ($session_id != get_session_id())) {
        $code = get_secure_random_string();
        if ($password_reset_process == 'ultra') {
            $GLOBALS['FORUM_DB']->query_update('f_members', ['m_password_change_code_time' => time(), 'm_password_change_code' => $code . '__' . get_session_id()], ['id' => $member_id], '', 1);
        } else {
            $GLOBALS['FORUM_DB']->query_update('f_members', ['m_password_change_code_time' => time(), 'm_password_change_code' => $code], ['id' => $member_id], '', 1);
        }
    }

    return $code;
}

/**
 * Send a lost password reset code.
 *
 * @param  string $password_reset_process Password reset process being used
 * @set emailed temporary ultra
 * @param  MEMBER $member_id Member ID
 * @param  ID_TEXT $code Reset code
 */
function send_lost_password_reset_code(string $password_reset_process, int $member_id, string $code)
{
    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
    $email = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_email_address');
    $join_time = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_join_time');

    $temporary_passwords = ($password_reset_process != 'emailed');

    if ($password_reset_process != 'ultra') {
        require_code('mail');
        $subject = do_lang('LOST_PASSWORD_SUBJECT', get_site_name(), null, null, get_lang($member_id));
        $zone = get_module_zone('lost_password');
        $_url = build_url(['page' => 'lost_password', 'type' => 'step3', 'code' => $code, 'member' => $member_id], $zone, [], false, false, true);
        $url = $_url->evaluate();
        $_url_simple = build_url(['page' => 'lost_password', 'type' => 'step3', 'code' => null, 'username' => null, 'member' => null], $zone, [], false, false, true);
        $url_simple = $_url_simple->evaluate();
        $message = do_lang(
            $temporary_passwords ? 'LOST_PASSWORD_TEXT_TEMPORARY' : 'LOST_PASSWORD_TEXT',
            comcode_escape(get_site_name()),
            comcode_escape($username),
            [
                $url,
                comcode_escape($url_simple),
                strval($member_id),
                $code,
                display_time_period(60 * intval(get_option('password_reset_minutes')))
            ],
            get_lang($member_id)
        );
        dispatch_mail($subject, $message, do_lang('mail:NO_MAIL_WEB_VERSION__SENSITIVE'), [$email], $GLOBALS['FORUM_DRIVER']->get_username($member_id, true), '', '', ['bypass_queue' => true, 'require_recipient_valid_since' => $join_time]);
    } else {
        $old_php_self = $_SERVER['PHP_SELF'];
        $old_server_name = $_SERVER['SERVER_NAME'];

        // Fiddle to try and anonymise details of the e-mail
        $_SERVER['PHP_SELF'] = '/';
        $_SERVER['SERVER_NAME'] = $_SERVER['SERVER_ADDR'];

        $from_email = get_option('website_email');
        //$from_email = 'noreply@' . $_SERVER['SERVER_ADDR'];  Won't work on most hosting
        $from_name = do_lang('PASSWORD_RESET_ULTRA_FROM');
        $subject = do_lang('PASSWORD_RESET_ULTRA_SUBJECT', $code, get_site_name());
        $body = do_lang('PASSWORD_RESET_ULTRA_BODY', $code, get_site_name());
        mail($email, $subject, $body, 'From: ' . $from_name . ' <' . $from_email . '>' . "\r\n" . 'Reply-To: ' . $from_name . ' <' . $from_email . '>');

        // Put env details back to how they should be
        $_SERVER['PHP_SELF'] = $old_php_self;
        $_SERVER['SERVER_NAME'] = $old_server_name;
    }
}

/**
 * Generate a message about how a reset code has been e-mailed (or potentially not).
 *
 * @param  string $password_reset_process Password reset process being used
 * @set emailed temporary ultra
 * @param  EMAIL $email E-mail address
 * @return Tempcode Message
 */
function lost_password_mailed_message(string $password_reset_process, string $email) : object
{
    require_code('crypt');
    $email_masked = mask_email_address($email);
    if ($password_reset_process == 'ultra') {
        $zone = get_module_zone('lost_password');
        $screen_message = do_lang_tempcode('RESET_CODE_ENTER_MANUALLY', escape_html(static_evaluate_tempcode(build_url(['page' => 'lost_password', 'type' => 'step3'], $zone))));
    } else {
        if (get_option('password_reset_privacy') == 'disclose') {
            $screen_message = do_lang_tempcode('RESET_CODE_MAILED', escape_html($email_masked), escape_html($email));
        } else {
            $screen_message = do_lang_tempcode('RESET_CODE_MAILED_IF_EXISTS', escape_html($email_masked), escape_html($email));
        }
    }
    return $screen_message;
}
