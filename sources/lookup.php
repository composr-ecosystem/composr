<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    securitylogging
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__lookup()
{
    require_code('submit'); // For the wrap_probe_ip function
}

/**
 * Get information about the specified member.
 *
 * @param  mixed $member The member for whom we are getting the page
 * @param  ?string $name The member's name (by reference) (null: unknown)
 * @param  ?AUTO_LINK $id The member's ID (by reference) (null: unknown)
 * @param  ?string $ip The member's IP (by reference) (null: unknown)
 * @return array The member's stats rows
 */
function lookup_member_page($member, &$name, &$id, &$ip)
{
    if (!addon_installed('stats')) {
        return array();
    }

    require_code('type_sanitisation');
    require_lang('submitban');

    if (is_numeric($member)) {
        // From member ID
        $name = $GLOBALS['FORUM_DRIVER']->get_username(intval($member), false, USERNAME_DEFAULT_NULL);
        if ($name === null) {
            return array();
        }
        $id = intval($member);
        $ip = $GLOBALS['FORUM_DRIVER']->get_member_ip($id);
        if ($ip === null) {
            $ip = '127.0.0.1';
        }
    } elseif (is_email_address($member)) {
        // From e-mail address
        $id = $GLOBALS['FORUM_DRIVER']->get_member_from_email_address($member);
        $name = $GLOBALS['FORUM_DRIVER']->get_username($id, false, USERNAME_DEFAULT_NULL);
        if ($id === null) {
            return array();
        }
        $ip = $GLOBALS['FORUM_DRIVER']->get_member_ip($id);
        if ($ip === null) {
            $ip = '127.0.0.1';
        }
    } elseif ((strpos($member, '.') !== false) || (strpos($member, ':') !== false)) {
        // From IP
        $ids = wrap_probe_ip($member);
        $ip = $member;
        if ($ip === null) {
            $ip = '127.0.0.1';
        }
        if (count($ids) == 0) {
            return array();
        } else {
            $id = $ids[0]['id'];
        }
        if (count($ids) != 1) {
            $also = new Tempcode();
            foreach ($ids as $t => $_id) {
                if ($t != 0) {
                    if (!$also->is_empty()) {
                        $also->attach(do_lang('LIST_SEP'));
                    }
                    $also->attach($GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($_id['id'], '', false));
                }
            }
            attach_message(do_lang_tempcode('MEMBERS_ALSO_ON_IP', $also), 'inform');
        }
        $name = $GLOBALS['FORUM_DRIVER']->get_username($id);
    } else {
        // From name
        $id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($member);
        $name = $member;
        if ($id === null) {
            return array();
        }
        $ip = $GLOBALS['FORUM_DRIVER']->get_member_ip($id);
        if ($ip === null) {
            $ip = '127.0.0.1';
        }
    }

    return $GLOBALS['SITE_DB']->query_select('stats', array('ip', 'MAX(date_and_time) AS date_and_time'), array('member_id' => $id), 'GROUP BY ip ORDER BY date_and_time DESC');
}

/**
 * Get a results table showing info about the member's travels around the site.
 *
 * @param  MEMBER $member The member we are getting travel stats for
 * @param  IP $ip The IP address of the member
 * @param  integer $start The current position in the browser
 * @param  integer $max The maximum number of rows to show per browser page
 * @param  ?ID_TEXT $sortable The current sortable (null: none)
 * @param  ?ID_TEXT $sort_order The order we are sorting in (null: none)
 * @set ASC DESC
 * @return Tempcode The results table
 */
function get_stats_track($member, $ip, $start = 0, $max = 50, $sortable = 'date_and_time', $sort_order = 'DESC')
{
    if (!addon_installed('stats')) {
        return new Tempcode();
    }

    $sortables = array('date_and_time' => do_lang_tempcode('DATE'), 'the_page' => do_lang_tempcode('PAGE'));
    if (((strtoupper($sort_order) != 'ASC') && (strtoupper($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
        log_hack_attack_and_exit('ORDERBY_HACK');
    }

    $query = '';
    if (!is_guest($member)) {
        $query .= 'member_id=' . strval($member) . ' OR ';
    }
    if (strpos($ip, '*') === false) {
        $query .= db_string_equal_to('ip', $ip);
    } else {
        $query .= 'ip LIKE \'' . db_encode_like(str_replace('*', '%', $ip)) . '\'';
    }
    $max_rows = $GLOBALS['SITE_DB']->query_value_if_there('SELECT COUNT(*) FROM ' . get_table_prefix() . 'stats WHERE ' . $query, false, true);
    $rows = $GLOBALS['SITE_DB']->query('SELECT the_page,date_and_time,s_get,post,browser,operating_system FROM ' . get_table_prefix() . 'stats WHERE ' . $query . ' ORDER BY ' . $sortable . ' ' . $sort_order, $max, $start, false, true);

    $out = new Tempcode();
    require_code('templates_results_table');
    $header_row = results_header_row(array(do_lang_tempcode('PAGE'), do_lang_tempcode('DATE'), do_lang_tempcode('PARAMETERS'), do_lang_tempcode('USER_AGENT'), do_lang_tempcode('USER_OS')), $sortables, 'sort', $sortable . ' ' . $sort_order);
    foreach ($rows as $myrow) {
        $date = get_timezoned_date_time($myrow['date_and_time']);
        $page = $myrow['the_page'];

        $page_converted = convert_page_string_to_page_link($myrow['the_page'], true);

        if ($myrow['s_get'] !== null) {
            $get = $myrow['s_get'];
            if (strpos($page_converted, ':') !== false) {
                $get = str_replace('<param>page=' . substr($page_converted, strpos($page_converted, ':') + 1) . '</param>' . "\n", '', $get);
            }
            $data = escape_html($get) . (($myrow['post'] == '') ? '' : ', ') . escape_html($myrow['post']);
            $data = str_replace('&lt;param&gt;', '', str_replace('&lt;/param&gt;', ', ', $data));
            if (substr($data, -3) == ', ' . "\n") {
                $data = substr($data, 0, strlen($data) - 3);
            }
            $parameters = symbol_truncator(array($data, 35, '1'), 'left');
        } else {
            $parameters = escape_html('?');
        }

        $out->attach(results_entry(array(escape_html($page_converted), escape_html($date), $parameters, escape_html($myrow['browser']), escape_html($myrow['operating_system'])), false));
    }
    return results_table(do_lang_tempcode('RESULTS'), $start, 'start', $max, 'max', $max_rows, $header_row, $out, $sortables, $sortable, $sort_order, 'sort');
}

/**
 * Get a results table showing security alerts matching WHERE constraints.
 *
 * @param  array $where WHERE constraints
 * @return array A pair: The results table, The number
 */
function find_security_alerts($where = array())
{
    require_lang('security');

    $start = get_param_integer('alert_start', 0);
    $max = get_param_integer('alert_max', 50);

    $sortables = array('date_and_time' => do_lang_tempcode('DATE_TIME'), 'ip' => do_lang_tempcode('IP_ADDRESS'));
    $test = explode(' ', get_param_string('alert_sort', 'date_and_time DESC', INPUT_FILTER_GET_COMPLEX));
    if (count($test) == 1) {
        $test[1] = 'DESC';
    }
    list($sortable, $sort_order) = $test;
    if (((strtoupper($sort_order) != 'ASC') && (strtoupper($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
        log_hack_attack_and_exit('ORDERBY_HACK');
    }

    $_fields = array(do_lang_tempcode('FROM'), do_lang_tempcode('DATE_TIME'), do_lang_tempcode('RISK'), do_lang_tempcode('IP_ADDRESS'), do_lang_tempcode('REASON'), new Tempcode());
    $header_row = results_header_row($_fields, $sortables, 'alert_sort', $sortable . ' ' . $sort_order);

    $max_rows = $GLOBALS['SITE_DB']->query_select_value('hackattack', 'COUNT(*)', $where);

    $rows = $GLOBALS['SITE_DB']->query_select('hackattack', array('*'), $where, 'AND percentage_score>=80 ORDER BY ' . $sortable . ' ' . $sort_order, $max, $start);

    $result_entries = new Tempcode();
    foreach ($rows as $row) {
        $date = get_timezoned_date_time($row['date_and_time']);

        $lookup_url = build_url(array('page' => 'admin_lookup', 'param' => $row['ip']), '_SELF');

        $member_url = build_url(array('page' => 'admin_lookup', 'param' => $row['member_id']), '_SELF');

        $full_url = build_url(array('page' => 'admin_security', 'type' => 'view', 'id' => $row['id']), '_SELF');

        $reason = do_lang($row['reason'], $row['reason_param_a'], $row['reason_param_b'], null, null, false);
        if ($reason === null) {
            $reason = $row['reason'];
        }
        $reason = symbol_truncator(array($reason, '50', '1'), 'left');

        $username = $GLOBALS['FORUM_DRIVER']->get_username($row['member_id']);

        $_row = array(
            hyperlink($member_url, $username, false, true),
            hyperlink($full_url, $date, false, true),
            integer_format($row['percentage_score']),
            hyperlink($lookup_url, $row['ip'], false, true),
            $reason
        );

        $deletion_tick = do_template('RESULTS_TABLE_TICK', array('_GUID' => '9d310a90afa8bd1817452e476385bc57', 'ID' => strval($row['id'])));
        $_row[] = $deletion_tick;

        $result_entries->attach(results_entry($_row, false));
    }

    return array(results_table(do_lang_tempcode('SECURITY_ALERTS'), $start, 'alert_start', $max, 'alert_max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order, 'alert_sort'), count($rows));
}

/**
 * Save analytics metadata for the current user's request into a file.
 *
 * @param  boolean $include_referer Whether to include the referer
 * @param  ?MEMBER $member_id Member to lookup (null: current user)
 * @param  ?IP $ip IP address (null: current / member's)
 * @return PATH The path of the file
 */
function save_user_metadata($include_referer = false, $member_id = null, $ip = null)
{
    $data = find_user_metadata($include_referer, $member_id, $ip);

    require_code('crypt');
    $path = get_custom_file_base() . '/temp/mail_' . get_secure_random_string() . '.txt';

    require_code('files');
    cms_file_put_contents_safe($path, json_encode($data, JSON_PRETTY_PRINT), FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE | FILE_WRITE_BOM);

    return $path;
}

/**
 * Find analytics metadata for the current user's request.
 *
 * @param  boolean $include_referer Whether to include the referer
 * @param  ?MEMBER $member_id Member to lookup (null: current user)
 * @param  ?IP $ip IP address (null: current / member's)
 * @param  boolean $advanced Whether to include advanced data
 * @return array Data
 */
function find_user_metadata($include_referer = true, $member_id = null, $ip = null, $advanced = false)
{
    if ($member_id === null) {
        $member_id = get_member();
        $current_user = true;
    } else {
        $current_user = false;
    }

    if ($ip === null) {
        if ($current_user) {
            $ip = get_ip_address();
        } else {
            $ip = $GLOBALS['FORUM_DRIVER']->get_member_ip($member_id);
        }
    }

    require_lang('lookup');

    $data = array();

    $member_data = array();
    $member_data[do_lang('USERNAME', null, null, null, get_site_default_lang())] = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
    if (!is_guest($member_id)) {
        $member_data[do_lang('MEMBER_ID', null, null, null, get_site_default_lang())] = '#' . strval($member_id);
    }
    if (!is_guest($member_id)) {
        $member_data[do_lang('cns:PROFILE', null, null, null, get_site_default_lang())] = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, false);
    }
    $data[do_lang('ACCOUNT', null, null, null, get_site_default_lang())] = $member_data;

    //$data['Session ID'] = get_session_id();   Don't want to pass this out too freely, not useful anyway

    $location_data = array();
    $got_geo_lookup = false;
    if (get_option('ipstack_api_key') != '') {
        $ip_stack_url = 'http://api.ipstack.com/' . rawurlencode($ip) . '?access_key=' . urlencode(get_option('ipstack_api_key'));
        $_json = http_get_contents($ip_stack_url, array('convert_to_internal_encoding' => true, 'trigger_error' => false));
        $json = @json_decode($_json, true);
        if (is_array($json)) {
            $useful_fields = array(
                'ip' => 'IP address',
                'country_name' => 'Country',
                'city' => 'City',
                'zip' => 'Postal code',
            );
            foreach ($useful_fields as $desired_key => $lang_str) {
                if (!empty($json[$desired_key])) {
                    $location_data[$lang_str] = $json[$desired_key];
                }
            }
            if (!@cms_empty_safe($json['latitude'])) {
                $location_data['GPS'] = float_format($json['latitude'], 6) . ',' . float_format($json['longitude'], 6);
            }

            $got_geo_lookup = true;
        }
    }
    if (!$got_geo_lookup) {
        $location_data[do_lang('IP_ADDRESS', null, null, null, get_site_default_lang())] = $ip;

        if ($ip != '') {
            $reverse_dns = cms_gethostbyaddr($ip);
            if (strpos($reverse_dns, 'NXDOMAIN') === false) {
                $location_data[do_lang('REVERSE_DNS_AND_WHOIS', null, null, null, get_site_default_lang())] = $reverse_dns;
            }
        }

        require_code('locations');
        if ($current_user) {
            $region = get_region();
        } else {
            if (!is_guest($member_id)) {
                $region = get_cms_cpf('country');
            }

            if ((empty($region)) && (addon_installed('stats'))) {
                $region = geolocate_ip($ip);
            }
        }
        if (!empty($region)) {
            $location_data['~' . do_lang('LOCATION', null, null, null, get_site_default_lang())] = $region;
        }

        require_code('temporal2');
        $location_data['~' . do_lang('TIMEZONE', null, null, null, get_site_default_lang())] = make_nice_timezone_name(get_users_timezone($member_id));
    }
    $data[do_lang('LOCATION', null, null, null, get_site_default_lang())] = $location_data;

    if ($current_user) {
        $lang = user_lang();
    } else {
        $lang = get_lang_member($member_id);
    }
    if (multi_lang()) {
        require_code('lang2');
        $data[do_lang('LANGUAGE', null, null, null, get_site_default_lang())] = lookup_language_full_name($lang);
    }

    if (($include_referer) && ($current_user)) {
        $referer = $_SERVER['HTTP_REFERER'];
        if ($referer != '') {
            $data[do_lang('REFERER', null, null, null, get_site_default_lang())] = $referer;
        }
    }

    $l_browser = do_lang('USER_AGENT', null, null, null, get_site_default_lang());
    $l_os = do_lang('USER_OS', null, null, null, get_site_default_lang());

    if ($current_user) {
        $ua_data = array();
        $ua_data[$l_browser] = get_browser_string();
        $ua_data[$l_os] = get_os_string();
        $data[$l_browser] = $ua_data;
    }

    if (((running_script('index')) || (running_script('form_to_email'))) && ($current_user)) {
        $data[do_lang('URL', null, null, null, get_site_default_lang())] = get_self_url_easy(true);
    }

    if (addon_installed('stats')) {
        $history = array();

        $select = 'a.the_page,a.s_get,a.date_and_time,a.title,a.member_id,a.ip,a.session_id,a.referer,a.browser,a.operating_system';

        $where = db_string_equal_to('ip', $ip) . ' AND member_id=' . strval($GLOBALS['FORUM_DRIVER']->get_guest_id());
        if (!is_guest($member_id)) {
            $where .= ' OR member_id=' . strval($member_id);
        }
        if ($current_user) {
            if (get_session_id() != '') {
                $where .= ' OR ' . db_string_equal_to('session_id', get_session_id());
            }
        }

        $tp = get_table_prefix();
        if ($advanced) {
            $sql = 'SELECT ' . $select . ' FROM ' . $tp . 'stats a WHERE ' . $where;
        } else { // Filter to one-result-per-page
            $inner_sql = 'SELECT the_page,MAX(date_and_time) AS date_and_time FROM ' . $tp . 'stats WHERE ' . $where . ' GROUP BY the_page';
            $sql = 'SELECT ' . $select . ' FROM ' . $tp . 'stats a JOIN (' . $inner_sql . ') b ON a.the_page=b.the_page AND a.date_and_time=b.date_and_time WHERE ' . $where . ' GROUP BY the_page';
        }

        $pages = $GLOBALS['SITE_DB']->query($sql . ' ORDER BY date_and_time DESC', 50);
        if (count($pages) == 50) { // We have more than 50, so we'll place in the bottom 50 too
            $pages2 = $GLOBALS['SITE_DB']->query($sql . ' ORDER BY date_and_time ASC', 50);
            $pages = array_merge($pages, array(null), array_reverse($pages2));
        }

        $l_date_time = do_lang('DATE_TIME', null, null, null, get_site_default_lang());
        $l_url = do_lang('URL', null, null, null, get_site_default_lang());
        $l_title = do_lang('TITLE', null, null, null, get_site_default_lang());
        $l_member_id = do_lang('MEMBER_ID', null, null, null, get_site_default_lang());
        $l_ip_address = do_lang('IP_ADDRESS', null, null, null, get_site_default_lang());
        $l_session_id = do_lang('SESSION_ID', null, null, null, get_site_default_lang());
        $l_referer = do_lang('REFERER', null, null, null, get_site_default_lang());

        $first_browser = null;

        foreach ($pages as $myrow) {
            if ($myrow === null) {
                $history[] = array('_' => do_lang('TOO_MANY_PAGES_LOGGED', null, null, null, get_site_default_lang()));
                continue;
            }

            if ($myrow['the_page'] == '/access_denied') {
                continue;
            }
            if (basename($myrow['the_page']) == '404.txt') {
                continue;
            }

            $h = array();

            $h[$l_date_time] = get_timezoned_date(tz_time($myrow['date_and_time'], get_server_timezone()), false);

            $page_link = convert_page_string_to_page_link($myrow['the_page']);
            list($zone, $attributes) = page_link_decode($page_link);
            $matches = array();
            $num_matches = preg_match_all('#<param>(\w+)=(.*)</param>#Us', $myrow['s_get'], $matches);
            for ($i = 0; $i < $num_matches; $i++) {
                if ($matches[1][$i] != 'page') {
                    $attributes[html_entity_decode($matches[1][$i], ENT_QUOTES)] = html_entity_decode($matches[2][$i], ENT_QUOTES);
                }
            }
            $h[$l_url] = static_evaluate_tempcode(build_url($attributes, $zone));

            $h[$l_title] = $myrow['title'];

            if (($myrow['member_id'] != $member_id) && (($advanced) || (!is_guest($myrow['member_id'])))) {
                if (is_guest($myrow['member_id'])) {
                    $h[$l_member_id] = do_lang('GUEST', null, null, null, get_site_default_lang());
                } else {
                    $h[$l_member_id] = '#' . strval($myrow['member_id']);
                }
            }

            if ($advanced) {
                if ($myrow['ip'] != $ip) {
                    $h[$l_ip_address] = $myrow['ip'];
                }

                $h[$l_session_id] = $myrow['session_id'];
            }

            if (($myrow['referer'] != '') && (($advanced) || (/*external referer*/@parse_url($myrow['referer'], HTTP_HOST) != get_base_url_hostname()))) {
                $h[$l_referer] = $myrow['referer'];
            }

            $ua_data = array();
            $ua_data[$l_browser] = $myrow['browser'];
            $ua_data[$l_os] = $myrow['operating_system'];
            $this_browser = preg_replace('#\d#', '', $myrow['browser'] . ' ' . $myrow['operating_system']);
            if ($first_browser === null) {
                $data[do_lang('BROWSING_ENVIRONMENT', null, null, null, get_site_default_lang())] = $ua_data;
            } elseif (($first_browser != $this_browser) && ($advanced)) {
                $h[do_lang('BROWSING_ENVIRONMENT', null, null, null, get_site_default_lang())] = $ua_data;
            }

            $history[] = $h;

            if ($first_browser === null) {
                $first_browser = $this_browser;
            }
        }
        $data[do_lang($advanced ? 'HISTORY' : 'PAGES_SEEN', null, null, null, get_site_default_lang())] = $history;
    }

    //$data['Cookie'] = $_COOKIE;   Don't want to pass this out too freely, not useful anyway

    return $data;
}

/**
 * Convert a stats page path to a page-link.
 *
 * @param  string $page The page string
 * @param  boolean $show_lang Whether to show the language (will not be a proper page-link in this case)
 * @return string Page-link
 */
function convert_page_string_to_page_link($page, $show_lang = false)
{
    $page_converted = preg_replace('#(^|/)pages/.*/#', '/', $page);
    if ($page_converted == '') {
        return ':';
    }
    if ((substr($page_converted, -4) == '.php') || (substr($page_converted, -4) == '.htm') || (substr($page_converted, -4) == '.txt')) {
        $page_converted = substr($page_converted, 0, strlen($page_converted) - 4);
    }
    if ((multi_lang_content()) && ($show_lang)) {
        $page_converted = str_replace('/', ': ', $page_converted);
    } else {
        $page_converted = str_replace('/', ':', preg_replace('#((.*)/)?pages/.*/[' . URL_CONTENT_REGEXP . ']+/(.*)#', '$2/$3', $page_converted));
    }
    return $page_converted;
}
