<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_upgrader
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__upgrade_themes()
{
    require_lang('upgrade');
}

/**
 * Do upgrader screen: upgrade all themes.
 *
 * @ignore
 * @return string Output messages
 */
function upgrader_theme_upgrade_screen()
{
    $test_run = (get_param_integer('live_run', 0) == 0);

    $str = '';

    $str .= '<h2>Theme upgrade: ' . ($test_run ? 'test run' : 'live results') . '</h2>';

    require_code('themes2');
    $themes = find_all_themes();
    $has_errors = false;
    foreach (array_keys($themes) as $theme) {
        $from = round(cms_version_number()) - 1;
        $to = cms_version_number();
        list($errors, $successes) = upgrade_theme($theme, $from, $to, $test_run);

        $str .= '<h3>' . escape_html($theme) . '</h3>';

        foreach ($errors as $error) {
            $str .= '<p style="background: #DDD; margin: 1em; padding: 1em">&#x2717; ' . $error->evaluate() . '</p>';
            $has_errors = true;
        }

        foreach ($successes as $success) {
            $str .= '<p style="background: #DDD; margin: 1em; padding: 1em">&#x2713; ' . $success->evaluate() . '</p>';
        }
    }

    if ($test_run) {
        if ($has_errors) {
            $str .= '<p>' . do_lang('UPGRADER_THEME_ERRORS') . '</p>';
        }

        $l_theme_upgrade = upgrader_link('upgrader.php?type=theme_upgrade&live_run=1', do_lang('UPGRADER_THEME_UPGRADE_FINAL'));
        $str .= $l_theme_upgrade;
    }

    return $str;
}

/**
 * Upgrade a theme automatically, using hand-coded migration arrays.
 *
 * @param  ID_TEXT $theme Theme to be upgraded
 * @param  float $from_version From version
 * @param  float $to_version Target version
 * @param  boolean $test_run Whether executing a test run (i.e. not do anything)
 * @return array A pair: List of errors, List of successes
 */
function upgrade_theme($theme, $from_version, $to_version, $test_run = true)
{
    $errors = array();
    $successes = array();

    if (!$test_run) {
        require_code('abstract_file_manager');
        force_have_afm_details(array(
            'themes/' . $theme . '/images_custom',
            'themes/' . $theme . '/images_custom/*',
            'themes/' . $theme . '/css_custom',
            'themes/' . $theme . '/css_custom/*.css',
            'themes/' . $theme . '/templates_custom',
            'themes/' . $theme . '/templates_custom/*.tpl',
            'themes/' . $theme . '/javascript_custom',
            'themes/' . $theme . '/javascript_custom/*.js',
            'themes/' . $theme . '/xml_custom',
            'themes/' . $theme . '/xml_custom/*.xml',
            'themes/' . $theme . '/text_custom',
            'themes/' . $theme . '/text_custom/*.txt',
        ));
    }

    $css_replace__single_match = array();
    $css_prepend__single_match = array();
    $css_append__single_match = array();
    $css_replace__multi_match = array();
    $css_prepend__multi_match = array();
    $css_append__multi_match = array();
    $css_file_append = array();
    $theme_images_new = array();
    $theme_images_renames = array();
    $templates_replace = array();
    $templates_rename = array();
    $templates_borked = array();

    if (false) {
        $css_recognition_string = '2004-2011'; // Must be defined. Ensures theme is right version.

        $css_replace__multi_match = array(
            '*' => array(),
            'global.css' => array(),
        );

        $css_replace__single_match = array();

        $css_prepend__single_match = array();

        $css_append__single_match = array();

        $css_file_append = array();

        // NB: This UNIX command can work out what theme images are added...
        // OLD=/Library/WebServer/Documents/test/themes/default/images ; NEW=/Library/WebServer/Documents/git/themes/default/images ; diff -r $OLD $NEW | grep "Only in $NEW" | grep -v .DS_Store | sed "s#Only in "$NEW"##g" | sed "s#: #/#g" | sed "s#^/##g" | sed "s#^EN/##g" | sed "s#\.*$##"
        // Obviously only theme-wizable images should go here
        $theme_images_new = array();

        $theme_images_renames = array();

        $templates_replace = array(
            '*' => array(),
        );

        /*Find deleted/renamed templates:
        OLD=/Library/WebServer/Documents/test/themes/default/templates ; NEW=/Library/WebServer/Documents/git/themes/default/templates ; diff -r $OLD $NEW | grep .tpl$ | grep "Only in "$OLD | sed "s#Only in "$OLD": ##"*/
        $templates_rename = array();

        /*Find diff of changes templates
        OLD=/Library/WebServer/Documents/test/themes/default/templates ; NEW=/Library/WebServer/Documents/git/themes/default/templates ; diff -u $OLD $NEW > ~/Desktop/diff.txt*/
        $templates_borked = array();
    } else {
        $errors[] = do_lang_tempcode('NO_DEFINED_THEME_UPGRADER');
        return array($errors, array());
    }

    if (addon_installed('themewizard')) {
        require_code('themewizard');
        $seed = find_theme_seed($theme);
        $dark = find_theme_dark($theme);
        list($colours, $landscape) = calculate_theme($seed, 'default', 'equations', 'colours', $dark);
    }

    // CSS
    $css_dir = get_custom_file_base() . '/themes/' . filter_naughty($theme) . '/css_custom/';
    $dh = @opendir($css_dir);
    if ($dh !== false) {
        while (($css_file = readdir($dh)) !== false) {
            if (substr($css_file, -4) != '.css') {
                continue;
            }
            if (substr($css_file, 0, 1) == '.') {
                continue;
            }

            $css_file_contents = cms_file_get_contents_safe($css_dir . $css_file, FILE_READ_LOCK | FILE_READ_UNIXIFIED_TEXT | FILE_READ_BOM);
            $orig_css_file_contents = $css_file_contents;
            if (strpos($css_file_contents, $css_recognition_string) === false) {
                $errors[] = do_lang_tempcode('NON_RECOGNISED_CSS_FILE', escape_html($css_file), escape_html(float_to_raw_string($from_version)));
                //continue;      Actually we'll let it pass
            }

            // Apply single match rules. First check single match rules apply exactly once (means rule is bogus if it matches more than once, or unusable if not at all)
            foreach (array('css_replace' => $css_replace__single_match, 'css_prepend' => $css_prepend__single_match, 'css_append' => $css_append__single_match) as $rule_set_type => $rule_set) {
                foreach ($rule_set as $target_file => $_rule_set) {
                    // If people have moved CSS into global.css, to optimise page load times
                    if (($target_file != '*') && ($target_file != 'global.css') && ($css_file == 'global.css')) {
                        if ((file_exists($css_dir . $target_file)) && (strlen(trim(cms_file_get_contents_safe($css_dir . $target_file, FILE_READ_LOCK | FILE_READ_BOM))) == 0)) {
                            $target_file = 'global.css';
                        }
                    }

                    if (($target_file == '*') || ($target_file == $css_file)) {
                        foreach ($_rule_set as $from => $to) {
                            // Apply theme wizard to $to
                            if (addon_installed('themewizard')) {
                                $to = themewizard_colours_to_css($to, $landscape, 'default', 'equations', $seed);
                            }

                            $occurrences = substr_count($css_file_contents, $from);
                            if ($occurrences == 0) { // Try after applying theme wizard
                                if (addon_installed('themewizard')) {
                                    $from = themewizard_colours_to_css($from, $landscape, 'default', 'equations', $seed);
                                    $occurrences = substr_count($css_file_contents, $from);
                                }
                            }
                            if ($occurrences == 0) {
                                $errors[] = do_lang_tempcode('CSS_RULE_UNMATCHED_' . $rule_set_type, escape_html($from), escape_html($to), escape_html($target_file));
                            } elseif ($occurrences > 1) {
                                $errors[] = do_lang_tempcode('CSS_RULE_OVERMATCHED_' . $rule_set_type, escape_html($from), escape_html($to), escape_html($target_file));
                            } else {
                                switch ($rule_set_type) {
                                    case 'css_replace':
                                        $css_file_contents = str_replace($from, $to, $css_file_contents);
                                        break;

                                    case 'css_prepend':
                                        $pos = strpos($css_file_contents, $from);
                                        if (substr($css_file_contents, $pos - strlen($to), strlen($to)) != $to) {
                                            $css_file_contents = substr($css_file_contents, 0, $pos) . $to . substr($css_file_contents, $pos);
                                        }
                                        break;

                                    case 'css_append':
                                        $pos = strpos($css_file_contents, $from) + strlen($from);
                                        if (substr($css_file_contents, $pos, strlen($to)) != $to) {
                                            $css_file_contents = substr($css_file_contents, 0, $pos) . $to . substr($css_file_contents, $pos);
                                        }
                                        break;
                                }
                            }
                        }
                    }
                }
            }

            // Apply multi-match rules
            foreach (array('css_replace' => $css_replace__multi_match, 'css_prepend' => $css_prepend__multi_match, 'css_append' => $css_append__multi_match) as $rule_set_type => $rule_set) {
                foreach ($rule_set as $target_file => $_rule_set) {
                    if (($target_file == '*') || ($target_file == $css_file)) {
                        foreach ($_rule_set as $from_a => $to) {
                            // Apply theme wizard to $to
                            if (addon_installed('themewizard')) {
                                $to = themewizard_colours_to_css($to, $landscape, 'default', 'equations', $seed);
                            }

                            $froms = array($from_a);
                            if (addon_installed('themewizard')) {
                                $froms[] = themewizard_colours_to_css($from_a, $landscape, 'default', 'equations', $seed);
                            }
                            foreach ($froms as $from) {
                                switch ($rule_set_type) {
                                    case 'css_replace':
                                        $css_file_contents = str_replace($from, $to, $css_file_contents);
                                        break;

                                    case 'css_prepend':
                                        $pos = 0;
                                        do {
                                            $pos = strpos($css_file_contents, $from, $pos);
                                            if ($pos !== false) {
                                                if (substr($css_file_contents, $pos, -strlen($to)) != $to) {
                                                    $css_file_contents = substr($css_file_contents, 0, $pos) . $to . substr($css_file_contents, $pos);
                                                    $pos += strlen($to) + strlen($from);
                                                } else {
                                                    $pos += strlen($from);
                                                }
                                            }
                                        } while ($pos !== false);
                                        break;

                                    case 'css_append':
                                        $pos = 0;
                                        do {
                                            $pos = strpos($css_file_contents, $from, $pos);
                                            if ($pos !== false) {
                                                if (substr($css_file_contents, $pos, strlen($to)) != $to) {
                                                    $pos += strlen($from);
                                                    $css_file_contents = substr($css_file_contents, 0, $pos) . $to . substr($css_file_contents, $pos);
                                                    $pos += strlen($to);
                                                } else {
                                                    $pos += strlen($from);
                                                }
                                            }
                                        } while ($pos !== false);
                                        break;
                                }
                            }
                        }
                    }
                }
            }

            // Apply unmatched rules
            foreach ($css_file_append as $target_file => $rule_set) {
                if (($target_file == '*') || ($target_file == $css_file)) {
                    foreach ($rule_set as $to) {
                        $css_file_contents .= $to;
                    }
                }
            }

            if (!$test_run) {
                // Take revision
                $revision_file = $css_dir . $css_file . '.' . strval(time());
                if (@copy($css_dir . $css_file, $revision_file) !== false) {
                    fix_permissions($revision_file);
                    sync_file($revision_file);
                }

                // Save
                if ($orig_css_file_contents != $css_file_contents) {
                    require_code('files');
                    cms_file_put_contents_safe($css_dir . $css_file, $css_file_contents, FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE | FILE_WRITE_BOM);
                }

                $successes[] = do_lang_tempcode('CSS_FILE_UPGRADED', escape_html($css_file));
            }
        }

        closedir($dh);
    }

    // Theme images
    require_code('themes2');
    require_code('themes3');
    $langs = array('EN' => 'lang');//find_all_langs();
    foreach ($theme_images_renames as $old => $new) {
        foreach (array_keys($langs) as $lang) {
            $path = urldecode(find_theme_image($old, true, true, $theme, $lang));
            if ($path != '') {
                $new_path = str_replace('/' . $old, '/' . $new, $path);
                if (!$test_run) {
                    if (!file_exists(get_custom_file_base() . '/' . $new_path)) {
                        if (file_exists($path)) {
                            afm_move($path, $new_path);
                        }

                        $where_map = array('theme' => $theme, 'id' => $new);
                        if (($lang != '') && ($lang !== null)) {
                            $where_map['lang'] = $lang;
                        }
                        $GLOBALS['SITE_DB']->query_delete('theme_images', $where_map);

                        actual_edit_theme_image($old, $theme, $lang, $new, $new_path);

                        $successes[] = do_lang_tempcode('THEME_IMAGE_RENAMED', escape_html($old), escape_html($new));
                    }
                }
            }
        }
    }
    if (addon_installed('themewizard')) {
        if ($theme != 'default') {
            foreach ($theme_images_new as $new) {
                foreach (array_keys($langs) as $lang) {
                    $path = urldecode(find_theme_image($new, true, true, 'default', $lang));
                    if ($path != '') {
                        $new_path = str_replace('themes/default/images/', 'themes/' . $theme . '/images/', $path);
                        if (!file_exists(get_custom_file_base() . '/' . $new_path)) {
                            if (!$test_run) {
                                afm_make_directory(dirname($new_path), true, true);
                            }

                            $image = calculate_theme($seed, 'default', 'equations', $new, $dark, $colours, $landscape, $lang);
                            if ($image !== null) {
                                if (!$test_run) {
                                    cms_imagesave($image, get_custom_file_base() . '/' . $new_path) or intelligent_write_error(get_custom_file_base() . '/' . $new_path);
                                    imagedestroy($image);

                                    $successes[] = do_lang_tempcode('THEME_IMAGE_NEW', escape_html($new));
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Templates
    $directories = array(
        'templates' => 'tpl',
        'javascript' => 'js',
        'xml' => 'xml',
        'text' => 'txt',
    );
    foreach ($directories as $directory => $ext) {
        $templates_dir = get_custom_file_base() . '/themes/' . filter_naughty($theme) . '/' . $directory . '_custom/';
        $dh = @opendir($templates_dir);
        if ($dh !== false) {
            while (($templates_file = readdir($dh)) !== false) {
                if (substr($templates_file, -4) != '.' . $ext) {
                    continue;
                }

                $templates_file_contents = cms_file_get_contents_safe($templates_dir . $templates_file, FILE_READ_LOCK | FILE_READ_UNIXIFIED_TEXT | FILE_READ_BOM);
                $orig_templates_file_contents = $templates_file_contents;

                foreach ($templates_replace as $target_file => $rule_set) {
                    if (($target_file == '*') || ($target_file == $templates_file)) {
                        foreach ($rule_set as $from => $to) {
                            $templates_file_contents = str_replace($from, $to, $templates_file_contents);
                        }
                    }
                }
                if (array_key_exists($templates_file, $templates_rename)) {
                    if (!$test_run) {
                        if (!file_exists($templates_dir . $templates_rename[$templates_file])) {
                            @rename($templates_dir . $templates_file, $templates_dir . $templates_rename[$templates_file]) or intelligent_write_error($templates_dir . $templates_rename[$templates_file]);
                            $successes[] = do_lang_tempcode('TEMPLATE_RENAMED', escape_html($templates_file), escape_html($templates_rename[$templates_file]));
                        }
                    }
                    $templates_file = $templates_rename[$templates_file];
                }
                if ($templates_file_contents != $orig_templates_file_contents) {
                    if (!$test_run) {
                        $successes[] = do_lang_tempcode('TEMPLATE_ALTERED', escape_html($templates_file));

                        // Save
                        require_code('files');
                        cms_file_put_contents_safe($templates_dir . $templates_file, $templates_file_contents, FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE | FILE_WRITE_BOM);
                    }
                }

                if (in_array($templates_file, $templates_borked)) {
                    $errors[] = do_lang_tempcode('TEMPLATE_WILL_NEED_RESTORING', escape_html($templates_file));
                }
            }

            closedir($dh);
        }
    }

    return array($errors, $successes);
}
