<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_webstandards
 */

/*
The webstandards checking is designed for a special blend between uber-modern-standards and cross-browser stability - to only allow XHTML5 and CSS3 that runs (or gracefully degrades) on the minimum Composr browser versions.

Some comments are throughout the code on what we don't support.

We favour the W3C standard over the WHATWG living document.

We continue to prohibit much of what was deprecated in XHTML but brought back into HTML5 (e.g. 'b' tag).

We have a few global flags to tweak behaviour:
 - MAIL_MODE
 - SPELLING
 - PEDANTIC
(other parameters are accepted to the check_xhtml function)
*/

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__webstandards()
{
    if (!defined('DOCTYPE_HTML')) {
        // These are old doctypes we'll recognise for gracefulness, but we don't accept them as valid
        define('DOCTYPE_HTML', '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">');
        define('DOCTYPE_HTML_STRICT', '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">');
        define('DOCTYPE_XHTML', '<!DOCTYPE html>');
        define('DOCTYPE_XHTML_STRICT', '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">');
        define('DOCTYPE_XHTML_11', '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">');

        // (X)HTML5, the future
        define('DOCTYPE_XHTML5', '<!DOCTYPE html>');
    }

    global $WEBSTANDARDS_CHECKER_OFF, $WELL_FORMED_ONLY, $WEBSTANDARDS_JAVASCRIPT, $WEBSTANDARDS_CSS, $WEBSTANDARDS_WCAG, $WEBSTANDARDS_COMPAT, $WEBSTANDARDS_EXT_FILES, $WEBSTANDARDS_MANUAL, $WEBSTANDARDS_CSP;
    $WEBSTANDARDS_JAVASCRIPT = true;
    $WEBSTANDARDS_CSS = true;
    $WEBSTANDARDS_WCAG = true;
    $WEBSTANDARDS_COMPAT = true;
    $WEBSTANDARDS_EXT_FILES = true;
    $WEBSTANDARDS_MANUAL = false;
    $WEBSTANDARDS_CSP = false;

    global $EXTRA_CHECK;
    $EXTRA_CHECK = [];

    global $VALIDATED_ALREADY;
    $VALIDATED_ALREADY = [];

    global $NO_XHTML_LINK_FOLLOW;
    $NO_XHTML_LINK_FOLLOW = false;

    global $CSS_TAG_RANGES, $CSS_VALUE_RANGES;
    $CSS_TAG_RANGES = [];
    $CSS_VALUE_RANGES = [];

    global $ENTITIES;
    $ENTITIES = [
        'quot' => true, 'amp' => true, 'lt' => true, 'gt' => true, 'nbsp' => true, 'iexcl' => true, 'cent' => true,
        'pound' => true, 'curren' => true, 'yen' => true, 'brvbar' => true, 'sect' => true, 'uml' => true,
        'copy' => true, 'ordf' => true, 'laquo' => true, 'not' => true, 'shy' => true, 'reg' => true, 'macr' => true,
        'deg' => true, 'plusmn' => true, 'sup2' => true, 'sup3' => true, 'acute' => true, 'micro' => true,
        'para' => true, 'middot' => true, 'cedil' => true, 'sup1' => true, 'ordm' => true, 'raquo' => true,
        'frac14' => true, 'frac12' => true, 'frac34' => true, 'iquest' => true,
        'Agrave' => true, 'Aacute' => true, 'Acirc' => true, 'Atilde' => true, 'Auml' => true, 'Aring' => true,
        'AElig' => true, 'Ccedil' => true, 'Egrave' => true, 'Eacute' => true,
        'Ecirc' => true, 'Euml' => true, 'Igrave' => true, 'Iacute' => true, 'Icirc' => true, 'Iuml' => true,
        'ETH' => true, 'Ntilde' => true, 'Ograve' => true, 'Oacute' => true, 'Ocirc' => true,
        'Otilde' => true, 'Ouml' => true, 'times' => true, 'Oslash' => true, 'Ugrave' => true, 'Uacute' => true,
        'Ucirc' => true, 'Uuml' => true, 'Yacute' => true, 'THORN' => true,
        'szlig' => true, 'agrave' => true, 'aacute' => true, 'acirc' => true, 'atilde' => true, 'auml' => true,
        'aring' => true, 'aelig' => true, 'ccedil' => true, 'egrave' => true,
        'eacute' => true, 'ecirc' => true, 'euml' => true, 'igrave' => true, 'iacute' => true, 'icirc' => true,
        'iuml' => true, 'eth' => true, 'ntilde' => true, 'ograve' => true, 'oacute' => true,
        'ocirc' => true, 'otilde' => true, 'ouml' => true, 'divide' => true, 'oslash' => true, 'ugrave' => true,
        'uacute' => true, 'ucirc' => true, 'uuml' => true, 'yacute' => true,
        'thorn' => true, 'yuml' => true, 'fnof' => true, 'Alpha' => true, 'Beta' => true, 'Gamma' => true,
        'Delta' => true, 'Epsilon' => true, 'Zeta' => true, 'Eta' => true, 'Theta' => true, 'Iota' => true,
        'Kappa' => true, 'Lambda' => true, 'Mu' => true, 'Nu' => true, 'Xi' => true, 'Omicron' => true, 'Pi' => true,
        'Rho' => true, 'Sigma' => true, 'Tau' => true, 'Upsilon' => true, 'Phi' => true, 'Chi' => true,
        'Psi' => true, 'Omega' => true, 'alpha' => true, 'beta' => true, 'gamma' => true, 'delta' => true,
        'epsilon' => true, 'zeta' => true, 'eta' => true, 'theta' => true, 'iota' => true, 'kappa' => true,
        'lambda' => true, 'mu' => true, 'nu' => true, 'xi' => true, 'omicron' => true, 'pi' => true, 'rho' => true,
        'sigmaf' => true, 'sigma' => true, 'tau' => true, 'upsilon' => true, 'phi' => true, 'chi' => true,
        'psi' => true, 'omega' => true, 'thetasym' => true, 'upsih' => true, 'piv' => true, 'bull' => true,
        'hellip' => true, 'prime' => true, 'Prime' => true, 'oline' => true, 'frasl' => true,
        'weierp' => true, 'image' => true, 'real' => true, 'trade' => true, 'alefsym' => true, 'larr' => true,
        'uarr' => true, 'rarr' => true, 'darr' => true, 'harr' => true, 'crarr' => true,
        'lArr' => true, 'uArr' => true, 'rArr' => true, 'dArr' => true, 'hArr' => true, 'forall' => true,
        'part' => true, 'exist' => true, 'empty' => true, 'nabla' => true, 'isin' => true, 'notin' => true,
        'ni' => true, 'prod' => true, 'sum' => true, 'minus' => true, 'lowast' => true, 'radic' => true, 'prop' => true,
        'infin' => true, 'ang' => true, 'and' => true, 'or' => true, 'cap' => true, 'cup' => true, 'int' => true,
        'there4' => true, 'sim' => true, 'cong' => true, 'asymp' => true, 'ne' => true, 'equiv' => true, 'le' => true,
        'ge' => true, 'sub' => true, 'sup' => true, 'nsub' => true, 'sube' => true, 'supe' => true,
        'oplus' => true, 'otimes' => true, 'perp' => true, 'sdot' => true, 'lceil' => true, 'rceil' => true,
        'lfloor' => true, 'rfloor' => true, 'lang' => true, 'rang' => true, 'loz' => true,
        'spades' => true, 'clubs' => true, 'hearts' => true, 'diams' => true, 'OElig' => true, 'oelig' => true,
        'Scaron' => true, 'scaron' => true, 'Yuml' => true, 'circ' => true, 'tidle' => true,
        'ensp' => true, 'emsp' => true, 'thinsp' => true, 'zwnj' => true, 'zwj' => true, 'lrm' => true, 'rlm' => true,
        'ndash' => true, 'mdash' => true, 'lsquo' => true, 'rsquo' => true, 'sbquo' => true,
        'ldquo' => true, 'rdquo' => true, 'bdquo' => true, 'dagger' => true, 'Dagger' => true, 'permil' => true,
        'lsaquo' => true, 'rsaquo' => true, 'euro' => true,
    ];

    $enforce_id = '[a-zA-Z][\w\-\:\.]*';
    $enforce_name = '[\w\-\:\.]+(\[\])?';
    $enforce_class = '[ \w\-]*';
    $enforce_character = '.';
    $enforce_functional_url = '(url\(\'.+\'\)|url\(".+"\)|url\([^\(\);]+\))';
    $enforce_functional_url_or_none = '(' . $enforce_functional_url . '|[\w\-]+-gradient\(.*\)|none)'; // Allow better gradient validation #3928
    if (function_exists('get_forum_type')) {
        require_code('crypt');
        $enforce_link = ((get_forum_type() == 'none') ? '(mailto:.*)?' : '') . '(mailto:.*|' . preg_quote(mailto_obfuscated(), '#') . '.*)?[^\s\#]*(\#[^\s\#]*)?';
    } else {
        $enforce_link = '.+';
    }
    $enforce_lang = '[a-zA-Z][a-zA-Z](-[a-zA-Z]+)?';
    $enforce_direction = '(ltr|rtl)';
    $enforce_javascript = '([^\n]+)';

    $enforce_number = '(-?[0-9]+)';
    $enforce_number_opt_fractional = '(-?[0-9]*(\.[0-9]+)?)';
    $enforce_inumber = '[0-9]+';
    $enforce_inumber_non_zero = '[1-9][0-9]*';
    $enforce_fraction = '(\d%|\d\d%|100%|0?\.\d+|1\.0|0|1)';
    $enforce_units = '(in|cm|mm|ex|em|vmin|vmax|rem|%|vw|vh|px)'; // |ex|pt|in|cm|mm|pc  We don't want these in our HTML... preferably we only want 'em' when it comes to font size!
    $enforce_length = '(' . $enforce_number_opt_fractional . $enforce_units . '|0)'; // 0 can happen with no units
    $enforce_normal_or_length = '(normal|' . $enforce_length . ')';
    $enforce_auto_or_length = '(auto|' . $enforce_length . ')';
    $enforce_potential_4d_length = $enforce_length . '( ' . $enforce_length . '( ' . $enforce_length . '( ' . $enforce_length . ')?)?)?';
    $enforce_potential_4d_length_clip = $enforce_length . '(,\s*' . $enforce_length . '(,\s*' . $enforce_length . '(,\s*' . $enforce_length . ')?)?)?';
    $enforce_potential_4d_length_auto = $enforce_auto_or_length . '( ' . $enforce_auto_or_length . '( ' . $enforce_auto_or_length . '( ' . $enforce_auto_or_length . ')?)?)?';

    $enforce_color = '(currentColor|darkgrey|slategrey|black|silver|gray|white|maroon|purple|fuchsia|green|lime|olive|yellow|navy|blue|teal|aqua|orange|red|(\#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])|(\#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]))'; // orange and red aren't 'official' -- but kind of handy ;). In reality, the colour codes were never properly defined, and these two are obvious names for obviously needed ones-- they'll be supported
    $color_types = [
        '(rgb\(' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?\))',
        '(rgba\(' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?,\s*[01]?(\.\d+)?\))',
        '(hsl\(' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?\))',
        '(hsla\(' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?,\s*' . $enforce_inumber . '%?,\s*[01]?(\.\d+)?\))',
        '(\#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])',
        $enforce_color,
        '(ActiveBorder|ActiveCaption|AppWorkspace|Background|Buttonface|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText)',
    ];
    $enforce_css_color = '(' . implode('|', $color_types) . ')';
    $enforce_transparent_or_color = '(transparent|' . $enforce_css_color . ')';

    $enforce_background_repeat = '(repeat|repeat-x|repeat-y|no-repeat)';
    $enforce_attachment = '(scroll|fixed)';
    $_enforce_background_position = '((' . $enforce_length . '|top( ' . $enforce_length . ')?|center|bottom( ' . $enforce_length . ')?)|(' . $enforce_length . '|left( ' . $enforce_length . ')?|center|right( ' . $enforce_length . ')?))';
    $enforce_background_position = '((' . $_enforce_background_position . ')|(' . $_enforce_background_position . ' ' . $_enforce_background_position . '))';

    $enforce_border_width = '(thin|medium|thick|' . $enforce_length . ')';
    $enforce_potential_4d_border_width = $enforce_border_width . '( ' . $enforce_border_width . '( ' . $enforce_border_width . '( ' . $enforce_border_width . ')?)?)?';
    $enforce_border_style = '(auto|none|dotted|dashed|solid|double|groove|ridge|inset|outset|transparent)'; // 'auto' may be used by shadow-dom
    $enforce_border = '((' . $enforce_border_width . '|' . $enforce_border_style . '|' . $enforce_css_color . ')( |$))+';

    $enforce_box_shadow = '((inset )?' . $enforce_length . '( ' . $enforce_length . '( ' . $enforce_length . '( ' . $enforce_length . ')?)?)? ' . $enforce_css_color . ')';

    $_enforce_font_list_standard = '((?i)cursive|fantasy|monospace|serif|sans-serif|Georgia|Times|Trebuchet|Tahoma|Geneva|Verdana|Arial|Helvetica|Courier|Courier New|Impact(?-i))'; // We only allow very standard web fonts to be outside quotes
    $_enforce_font_list_quoted = '(\'[\w\- ]+\'|"[\w\- ]+")';
    $_enforce_font_list_either = '(' . $_enforce_font_list_quoted . '|' . $_enforce_font_list_standard . ')';
    $enforce_font_list = $_enforce_font_list_either . '(,\s*' . $_enforce_font_list_either . ')*';
    $enforce_font_size = '(larger|smaller|xx-small|x-small|small|medium|large|x-large|xx-large|' . $enforce_length . '(/' . $enforce_length . ')?)';
    $enforce_font_style = '(normal|italic|oblique)';
    $enforce_font_variant = '(normal|small-caps)';
    $enforce_font_weight = '(lighter|normal|bold|bolder|((\d)+))';

    $enforce_list_style_position = '(inside|outside)';
    $enforce_list_style_type = '(none|disc|circle|square|decimal|lower-roman|upper-roman|lower-alpha|upper-alpha|decimal-leading-zero|lower-greek|lower-latin|upper-latin|hebrew|armenian|georgian|cjk-ideographic|hiragana|katakana|hiragana-iroha|katakana-iroha)';

    $_counter_increment = '((\w+( \d+)?)+)';
    $enforce_counter_increment = $_counter_increment . '( ' . $_counter_increment . ')*';
    $enforce_transition_timing_function = '(linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier\(' . $enforce_fraction . ' ' . $enforce_fraction . ' ' . $enforce_fraction . ' ' . $enforce_fraction . '\))';
    $enforce_time = '\d[\d\.]*s';
    $enforce_transition_property = '[\w,\-]+';
    $enforce_transition = $enforce_transition_property . '( ' . $enforce_time . '( ' . $enforce_transition_timing_function . '( ' . $enforce_time . ')?)?)?';

    $enforce_transform_origin = '(left|center|right|' . $enforce_length . ')';
    $enforce_transform_style = '(flat|preserve-3d)';

    $enforce_flex_align = '(start|end|flex-start|flex-end|center|left|right|normal|baseline|(first|last) baseline|space-between|space-around|space-evenly|stretch|safe|unsafe)';

    // Useful reference: https://www.w3schools.com/cssref/css3_browsersupport.asp

    global $CSS_PROPERTIES;
    $CSS_PROPERTIES = [
        'background' => '((' . $enforce_transparent_or_color . '|' . $enforce_functional_url_or_none . '|' . $enforce_background_repeat . '|' . $enforce_attachment . '|' . $enforce_background_position . ')( |$))+', // We don't want gradients on here, use background-image, for easier compatibility
        'background-attachment' => $enforce_attachment,
        'background-clip' => '(border-box|padding-box|content-box)',
        'background-color' => $enforce_transparent_or_color,
        'background-image' => $enforce_functional_url_or_none,
        'background-origin' => '(border-box|content-box)',
        'background-position' => $enforce_background_position,
        'background-repeat' => $enforce_background_repeat,
        'background-size' => '(cover|contain|((' . $enforce_length . ' )?' . $enforce_length . '))',
        'border' => $enforce_border,
        'border-bottom' => $enforce_border,
        'border-bottom-color' => $enforce_transparent_or_color,
        'border-bottom-left-radius' => $enforce_length,
        'border-bottom-right-radius' => $enforce_length,
        'border-bottom-style' => $enforce_border_style,
        'border-bottom-width' => $enforce_border_width,
        'border-collapse' => '(collapse|separate)',
        'border-color' => $enforce_transparent_or_color . '( ' . $enforce_transparent_or_color . '( ' . $enforce_transparent_or_color . '( ' . $enforce_transparent_or_color . ')?)?)?',
        'border-image' => $enforce_functional_url_or_none,
        'border-image-outset' => $enforce_length,
        'border-image-repeat' => '(stretch|repeat|round|space)',
        'border-image-slice' => $enforce_length,
        'border-image-source' => $enforce_functional_url_or_none,
        'border-image-width' => $enforce_length,
        'border-left' => $enforce_border,
        'border-left-color' => $enforce_transparent_or_color,
        'border-left-style' => $enforce_border_style,
        'border-left-width' => $enforce_border_width,
        'border-radius' => $enforce_length . '( ' . $enforce_length . '( ' . $enforce_length . '( ' . $enforce_length . ')?)?)?',
        'border-right' => $enforce_border,
        'border-right-color' => $enforce_transparent_or_color,
        'border-right-style' => $enforce_border_style,
        'border-right-width' => $enforce_border_width,
        'border-spacing' => $enforce_length . '( ' . $enforce_length . ')?',
        'border-style' => $enforce_border_style,
        'border-top' => $enforce_border,
        'border-top-color' => $enforce_transparent_or_color,
        'border-top-left-radius' => $enforce_length,
        'border-top-right-radius' => $enforce_length,
        'border-top-style' => $enforce_border_style,
        'border-top-width' => $enforce_border_width,
        'border-width' => $enforce_potential_4d_border_width,
        'bottom' => $enforce_auto_or_length,
        'box-shadow' => '(none|(' . $enforce_box_shadow . '(,\s*' . $enforce_box_shadow . '(,\s*' . $enforce_box_shadow . '(,\s*' . $enforce_box_shadow . ')?)?)?))',
        'box-sizing' => '(border-box|content-box|padding-box)',
        'caption-side' => '(top|bottom|left|right)',
        'clear' => '(both|left|right|none)',
        'clip' => '(auto|(rect\(' . $enforce_potential_4d_length_clip . '\)))',
        'color' => $enforce_css_color,
        'content' => '.+',
        'counter-increment' => $enforce_counter_increment,
        'counter-reset' => $enforce_counter_increment,
        'cursor' => '(' . $enforce_functional_url . '|(?i)auto|crosshair|default|move|text|wait|help|n-resize|e-resize|s-resize|w-resize|ne-resize|nw-resize|se-resize|sw-resize|pointer|not-allowed|no-drop|vertical-text|all-scroll|col-resize|row-resize|none|progress(?-i))',
        'direction' => '(ltr|rtl)',
        'display' => '(none|inline|block|list-item|table|table-header-group|table-footer-group|inline-block|run-in|inline-table|table-row|table-row-group|table-column-group|table-column|table-cell|table-caption|flex|-ms-flexbox|-\w+-flex|inline-flex)',
        'empty-cells' => 'show|hide',
        'float' => '(left|right|none)',
        'font' => '((caption|icon|menu|message-box|small-caption|status-bar|' . $enforce_font_style . '|' . $enforce_font_variant . '|' . $enforce_font_weight . '|' . $enforce_font_size . '|' . $enforce_normal_or_length . '|' . $enforce_font_list . ')( |$))+',
        'font-family' => $enforce_font_list,
        'font-feature-settings' => '.+',
        'font-size' => $enforce_font_size,
        'font-stretch' => $enforce_number_opt_fractional,
        'font-style' => $enforce_font_style,
        'font-variant' => $enforce_font_variant,
        'font-weight' => $enforce_font_weight,
        'height' => $enforce_auto_or_length,
        'left' => $enforce_auto_or_length,
        'letter-spacing' => $enforce_normal_or_length,
        'line-height' => '(' . $enforce_number_opt_fractional . '?|' . $enforce_normal_or_length . ')',
        'list-style' => '((' . $enforce_list_style_type . '|' . $enforce_list_style_position . '|' . $enforce_functional_url_or_none . ')( |$))+',
        'list-style-image' => $enforce_functional_url_or_none,
        'list-style-position' => $enforce_list_style_position,
        'list-style-type' => $enforce_list_style_type,
        'margin' => $enforce_potential_4d_length_auto,
        'margin-bottom' => $enforce_auto_or_length,
        'margin-left' => $enforce_auto_or_length,
        'margin-right' => $enforce_auto_or_length,
        'margin-top' => $enforce_auto_or_length,
        'max-height' => '(none|' . $enforce_auto_or_length . ')',
        'max-width' => '(none|' . $enforce_auto_or_length . ')',
        'min-height' => $enforce_auto_or_length,
        'min-width' => $enforce_auto_or_length,
        'opacity' => $enforce_fraction,
        'outline' => $enforce_border . /* a space is going to be here due to how $enforce_border is coded */ '(-webkit-focus-ring-color)?',
        'outline-color' => $enforce_transparent_or_color,
        'outline-style' => $enforce_border_style,
        'outline-width' => $enforce_border_width,
        'overflow' => '(visible|hidden|scroll|auto)',
        'overflow-x' => '(visible|hidden|scroll|auto)',
        'overflow-y' => '(visible|hidden|scroll|auto)',
        'overflow-wrap' => '(normal|break-word)', // Was renamed to overflow-wrap, but that name is not supported widely
        'padding' => $enforce_potential_4d_length,
        'padding-bottom' => $enforce_auto_or_length,
        'padding-left' => $enforce_auto_or_length,
        'padding-right' => $enforce_auto_or_length,
        'padding-top' => $enforce_auto_or_length,
        'perspective' => $enforce_length,
        'perspective-origin' => $enforce_background_position,
        'pointer-events' => '(auto|none)',
        'position' => '(static|relative|absolute|fixed)',
        'quotes' => '.+ .+',
        'right' => $enforce_auto_or_length,
        'table-layout' => '(auto|fixed)',
        'text-align' => '(left|right|center|justify)',
        'text-decoration' => '(underline|line-through|none|blink)', // Not supporting shorthand syntax, better to just set the longer properties separately for compatibility
        'text-indent' => $enforce_length,
        'text-overflow' => '(clip|ellipsis|\'[^\']\')',
        'text-shadow' => '(none|(' . $enforce_length . ' ' . $enforce_length . '( ' . $enforce_length . ')?( ' . $enforce_css_color . ')?))',
        'text-transform' => '(capitalize|uppercase|lowercase|none)',
        'top' => $enforce_auto_or_length,
        'touch-action' => '(auto|none|pan-x|pan-y|manipulation|pan-left|pan-right|pan-up|pan-down|pinch-zoom)',
        'unicode-bidi' => '(bidi-override|normal|embed)',
        'user-select' => '(none|auto|text|all|contain)',
        'vertical-align' => '(baseline|sub|super|top|text-top|middle|bottom|text-bottom|' . $enforce_length . ')',
        'visibility' => '(hidden|visible|collapse)',
        'white-space' => '(normal|pre|nowrap|pre-wrap|pre-line)',
        'width' => $enforce_auto_or_length,
        'word-spacing' => $enforce_normal_or_length,
        'z-index' => '(auto|(\d+))',

        /* Columns */
        'columns' => '((auto|' . $enforce_inumber_non_zero . ')|' . $enforce_auto_or_length . '( ' . $enforce_auto_or_length . ')*)',
        'column-count' => '(auto|' . $enforce_inumber_non_zero . ')',
        'column-fill' => '(auto|balance|balance-all)',
        'column-gap' => $enforce_length,
        'column-rule' => $enforce_border,
        'column-rule-color' => $enforce_transparent_or_color,
        'column-rule-style' => $enforce_border_style,
        'column-rule-width' => $enforce_border_width,
        'column-width' => $enforce_auto_or_length,

        /* Transformations */
        'transform' => '(none|\w+\([^\(\)]+\))',
        'transform-origin' => $enforce_transform_origin . '( ' . $enforce_transform_origin . '( ' . $enforce_transform_origin . ')?)?',
        'transform-style' => $enforce_transform_style,
        'backface-visibility' => '(hidden|visible)',

        /* Transitions and Animations */
        'transition' => $enforce_transition . '(\s*,\s*' . $enforce_transition . ')*',
        'transition-delay' => $enforce_time,
        'transition-duration' => $enforce_time,
        'transition-property' => $enforce_transition_property,
        'transition-timing-function' => $enforce_transition_timing_function,
        'animation' => '.+', // #3928
        'animation-delay' => '(' . $enforce_number_opt_fractional . '(ms|s))',
        'animation-direction' => '(normal|reverse|alternate|alternate-reverse)',
        'animation-duration' => '\d+(s|ms)',
        'animation-fill-mode' => '(none|forwards|backwards|both)',
        'animation-iteration-count' => '(infinite|\d+)',
        'animation-name' => '\w+',
        'animation-play-state' => '(paused|running)',
        'animation-timing-function' => '(linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps\(\d+(,(start|end))?\)|cubic-bezier\([\d\.]+,[\d\.]+,[\d\.]+,[\d\.]+\))',

        /* Print */
        'page-break-after' => '(auto|left|right|always)',
        'page-break-before' => '(auto|left|right|always)',
        'page-break-inside' => '(auto|avoid)',

        /* Flex box */
        'flex' => '(auto|none|' . $enforce_number . ' (' . $enforce_number . ')? (' . $enforce_auto_or_length . ')?)',
        'flex-basis' => $enforce_length,
        'flex-direction' => 'row|row-reverse|column|column-reverse',
        'flex-flow' => '(row|row-reverse|column|column-reverse) (nowrap|wrap|wrap-reverse)',
        'flex-grow' => $enforce_number,
        'flex-shrink' => $enforce_number,
        'flex-wrap' => '(nowrap|wrap|wrap-reverse)',
        'order' => $enforce_number,
        'align-content' => $enforce_flex_align,
        'align-items' => $enforce_flex_align,
        'align-self' => $enforce_flex_align,
        'justify-content' => $enforce_flex_align,

        /* Purposely left out these 'supported' CSS features due to very poor actual browser support or generally irrelevancy */
        /*
        (aural module)
        (grids module - as IE11 only supports a variant)
        */

        /* These are non standard/supported but we want them (LEGACY) */
        'appearance' => '([\w-]+)', // Tweaking shadow DOM as required by particular browsers
        'filter' => '.+', // #3928 // Not supported in IE11 but used as progressive enhancement
        'object-fit' => '(fill|contain|cover|none|scale-down)', // Not supported in IE11 but used as progressive enhancement
        'object-position' => $enforce_background_position, // Not supported in IE11 but used as progressive enhancement
        'outline-offset' => $enforce_length, // Not supported in IE11 but used as progressive enhancement
        'overflow-scrolling' => '(touch|auto)', // Relevant for mobile devices
        'resize' => '(none|both|horizontal|vertical)', // Firefox-only, but a nice feature
        'text-decoration-color' => $enforce_color, // Not supported in IE11 but used as progressive enhancement
        'text-decoration-style' => '(solid|double|dotted|dashed|wavy)', // Not supported in IE11 but used as progressive enhancement
        'text-decoration-thickness' => '(' . $enforce_length . '|from-font)', // Not supported in IE11 but used as progressive enhancement
        'text-size-adjust' => '(none|auto|\d%|\d\d%|100%)', // Relevant for mobile devices
        'writing-mode' => '(tb-rl|lr-tb)', // Not supported in IE11 but used as progressive enhancement

        /* SVG embedded in website CSS */
        'fill' => $enforce_css_color,
    ];

    global $CSS_PSEUDO_CLASSES;
    $CSS_PSEUDO_CLASSES = [
        /* LEGACY */
        ':-moz-selection',
        ':-moz-focus-inner',
        ':-webkit-scrollbar',
        ':-webkit-scrollbar-track',
        ':-webkit-scrollbar-thumb',
        ':-webkit-calendar-picker-indicator',
        ':-webkit-inner-spin-button',
        ':-webkit-outer-spin-button',
        ':-webkit-search-cancel-button',
        ':-webkit-search-decoration',
        ':-webkit-file-upload-button',
        ':-webkit-input-placeholder',
        ':-moz-placeholder',
        ':-ms-input-placeholder',
        ':-ms-value',

        ':first-line',
        ':first-letter',
        ':before',
        ':after',
        ':selection',
        ':placeholder',

        'active',
        'checked',
        'disabled',
        'empty',
        'enabled',
        'first-child',
        'focus',
        'focus-within',
        'hover',
        'indeterminate',
        'last-child',
        'link',
        'not',
        'nth-child',
        'nth-last-child',
        'only-child',
        'required',
        'visited',
    ];

    global $CSS_AT_BLOCK_RULES;
    $CSS_AT_BLOCK_RULES = [
        'font-face',
        'keyframes',
        'media',
    ];

    global $CSS_AT_RULES;
    $CSS_AT_RULES = [
        'import',
        'namespace',
    ];

    global $NEVER_SELFCLOSE_TAGS;
    $NEVER_SELFCLOSE_TAGS = [
        'div' => true,
        'h1' => true,
        'h2' => true,
        'h3' => true,
        'h4' => true,
        'h5' => true,
        'h6' => true,
        'p' => true,
        'blockquote' => true,
        'pre' => true,
        'fieldset' => true,
        'figure' => true,
        'address' => true,
        'iframe' => true,
        'noscript' => true,
        'table' => true,
        'tbody' => true,
        'td' => true,
        'tfoot' => true,
        'th' => true,
        'thead' => true,
        'tr' => true,
        'dd' => true,
        'dt' => true,
        'dl' => true,
        'li' => true,
        'ol' => true,
        'ul' => true,
        'rbc' => true,
        'rtc' => true,
        'rb' => true,
        'rt' => true,
        'rp' => true,
        'video' => true,
        'details' => true,
        'summary' => true,
        'section' => true,
        'nav' => true,
        'header' => true,
        'footer' => true,
        'canvas' => true,
        'audio' => true,
        'aside' => true,
        'article' => true,
        'span' => true,
        'abbr' => true,
        'cite' => true,
        'code' => true,
        'dfn' => true,
        'em' => true,
        'strong' => true,
        'kbd' => true,
        'q' => true,
        'samp' => true,
        'var' => true,
        'sub' => true,
        'sup' => true,
        'del' => true,
        'ruby' => true,
        'a' => true,
        'bdo' => true,
        'ins' => true,
        'textarea' => true,
        'select' => true,
        'object' => true,
        'caption' => true,
        'label' => true,
        'time' => true,
        'progress' => true,
        'output' => true,
        'meter' => true,
        'mark' => true,
        'datalist' => true,
        'body' => true,
        'colgroup' => true,
        'head' => true,
        'html' => true,
        'map' => true,
        'optgroup' => true,
        'option' => true,
        'style' => true,
        'title' => true,
        'legend' => true,
        'figcaption' => true,
        'script' => true,
        'form' => true,
        'dir' => true,
        'menu' => true,
        'center' => true,
        'applet' => true,
        'font' => true,
        's' => true,
        'strike' => true,
        'u' => true,
    ];

    global $POSSIBLY_EMPTY_TAGS;
    $POSSIBLY_EMPTY_TAGS = [
        'a' => true, // When it's an anchor only - we will detect this with custom code
        'div' => true,
        'span' => true,
        'td' => true,
        'th' => true, // Only use for 'corner' ones
        'textarea' => true,
        'button' => true,
        'script' => true, // HTML forces us to have empty script (not self-closing) tags to do includes, it's weird but it's the standard
        'noscript' => true,
        'li' => true,
        'embed' => true,
    ];

    global $MUST_SELFCLOSE_TAGS;
    $MUST_SELFCLOSE_TAGS = [
        'img' => true,
        'hr' => true,
        'br' => true,
        'param' => true,
        'input' => true,
        'base' => true,
        'link' => true,
        'meta' => true,
        'area' => true,
        'col' => true,
        'source' => true,
        'nobr' => true,
        'use' => true, // Used by SVG icons
     ];

    // B's may not appear under A
    global $PROHIBITIONS;
    $PROHIBITIONS = [
        'a' => ['a'],
        'button' => ['input', 'select', 'textarea', 'label', 'button', 'form', 'fieldset', 'iframe'],
        'p' => ['p', 'table', 'div', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre', 'hr'],
        'form' => ['form'],
        'th' => ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        'em' => ['em'],
        'abbr' => ['abbr'],
        'strong' => ['strong'],
        'label' => ['label', 'div']];

    // Only B's can be under A
    global $ONLY_CHILDREN;
    $ONLY_CHILDREN = [
        'ruby' => ['rbc', 'rtc', 'rp'],
        'tr' => ['td', 'th'],
        'thead' => ['tr'],
        'tbody' => ['tr'],
        'tfoot' => ['tr'],
        'table' => ['tbody', 'thead', 'tfoot', 'colgroup', 'col', 'caption'],
        'colgroup' => ['col'],
        'select' => ['option', 'optgroup'],
        'legend' => ['ins', 'del'],
        //'map' => ['area'], Apparently no such rule (see w3.org)
        'html' => ['head', 'body'],
        'embed' => ['noembed'],
        'applet' => ['param'],
        'head' => ['meta', 'base', 'basefont', 'script', 'link', 'noscript', 'map', 'title', 'style'],
        'ul' => ['li'],
        'ol' => ['li'],
        'menu' => ['li'],
        'dl' => ['li', 'dt', 'dd'],
        'dir' => ['li'],
        'hr' => [],
        'img' => [],
        'input' => [],
        'br' => [],
        'meta' => [],
        'base' => [],
        'title' => [],
        'textarea' => [],
        'style' => [],
        'pre' => [],
        'script' => [],
        'param' => [],
        /*'option' => [],*/
        'area' => [],
        'link' => ['link'],
        'basefont' => [],
        'col' => [],
    ];
    $ONLY_CHILDREN += [
        'details' => ['summary'],
        'datalist' => ['option'],
    ];

    // A can only occur underneath B's
    global $ONLY_PARENT;
    $ONLY_PARENT = [
        'rb' => ['rbc'],
        'rt' => ['rtc'],
        'rbc' => ['ruby'],
        'rtc' => ['ruby'],
        'rp' => ['ruby'],
        'area' => ['map'],
        'base' => ['head'],
        'body' => ['html'],
        'head' => ['html'],
        'param' => ['script', 'object'],
        //'link' => ['head', 'link'],  Composr will dynamically optimise things to tend towards correctness, so can't enable this rule
        //'style' => ['head'], "
        'li' => ['ul', 'ol', 'dd', 'menu', 'dt', 'dl', 'dir'],
        'tbody' => ['table'],
        'tfoot' => ['table'],
        'thead' => ['table'],
        'th' => ['tr'],
        'td' => ['tr'],
        'tr' => ['table', 'thead', 'tbody', 'tfoot'],
        'title' => ['head'],
        'caption' => ['table'],
        'col' => ['colgroup', 'table'],
        'colgroup' => ['table'],
        'option' => ['select', 'optgroup', 'datalist'],
        'noembed' => ['embed'],
    ];
    $ONLY_PARENT += [
        'figcaption' => ['figure'],
        'summary' => ['details'],
        'track' => ['audio', 'video'],
    ];

    global $REQUIRE_ANCESTOR;
    $REQUIRE_ANCESTOR = [
        //'textarea' => 'form',
        //'input' => 'form',
        //'button' => 'form',
        'option' => 'form',
        'optgroup' => 'form',
        'select' => 'form',
    ];

    global $TEXT_NO_BLOCK;
    $TEXT_NO_BLOCK = [
        'table' => true,
        'tr' => true,
        'tfoot' => true,
        'thead' => true,
        'ul' => true,
        'ol' => true,
        'dl' => true,
        'optgroup' => true,
        'select' => true,
        'colgroup' => true,
        'map' => true,
        'body' => true,
        'form' => true,
    ];
    $TEXT_NO_BLOCK += [
        'menu' => true,
    ];

    global $TAGS_BLOCK;
    $TAGS_BLOCK = [
        'div' => true,
        'h1' => true,
        'h2' => true,
        'h3' => true,
        'h4' => true,
        'h5' => true,
        'h6' => true,
        'p' => true,
        'blockquote' => true,
        'pre' => true,
        'hr' => true,
        'fieldset' => true,
        'figure' => true,

        // Best classified as block
        'address' => true,
        'iframe' => true,
        'noscript' => true,
        'table' => true,
        'tbody' => true,
        'td' => true,
        'tfoot' => true,
        'th' => true,
        'thead' => true,
        'tr' => true,
        'dd' => true,
        'dt' => true,
        'dl' => true,
        'li' => true,
        'ol' => true,
        'ul' => true,
        'rbc' => true,
        'rtc' => true,
        'rb' => true,
        'rt' => true,
        'rp' => true,
    ];
    $TAGS_BLOCK += [
        'video' => true,
        'picture' => true,
        'details' => true,
        'summary' => true,
        'section' => true,
        'nav' => true,
        'header' => true,
        'footer' => true,
        'figure' => true,
        'canvas' => true,
        'audio' => true,
        'aside' => true,
        'article' => true,
    ];

    global $TAGS_INLINE;
    $TAGS_INLINE = [
        'span' => true,
        'br' => true,
        'abbr' => true,
        'cite' => true,
        'code' => true,
        'dfn' => true,
        'em' => true,
        'strong' => true,
        'kbd' => true,
        'q' => true,
        'samp' => true,
        'var' => true,
        'sub' => true,
        'sup' => true,
        'del' => true,
        'ruby' => true,

        // Best classified as inline
        'a' => true,
        'bdo' => true,
        'img' => true,
        'ins' => true,
        'param' => true,
        'textarea' => true,
        'button' => true,
        'input' => true,
        'select' => true,
        'embed' => true,
        'object' => true,
        'caption' => true,
        'label' => true,
    ];

    $TAGS_INLINE += [
        'wbr' => true,
        'time' => true,
        'progress' => true,
        'output' => true,
        'meter' => true,
        'mark' => true,
        'keygen' => true,
        'datalist' => true,
        'command' => true,
        'track' => true,
    ];

    global $TAGS_NORMAL;
    $TAGS_NORMAL = [
        'base' => true,
        'body' => true,
        'col' => true,
        'colgroup' => true,
        'head' => true,
        'html' => true,
        'link' => true,
        'map' => true,
        'meta' => true,
        'optgroup' => true,
        'option' => true,
        'style' => true,
        'title' => true,
        'legend' => true,
        'figcaption' => true,
        'script' => true,
        'area' => true,

        // I'd call this 'block', but XHTML-strict other checkers would disagree - probably xhtml-strict doesn't consider 'programmatic' elements to be inline/block
        'form' => true,
    ];

    $TAGS_NORMAL += [
        'source' => true,
    ];

    global $TAGS_BLOCK_DEPRECATED;
    $TAGS_BLOCK_DEPRECATED = [
        'dir' => true,
        'menu' => true,
    ];

    global $TAGS_INLINE_DEPRECATED;
    $TAGS_INLINE_DEPRECATED = [
        // Would be removed in XHTML strict and deprecated in transitional
        'center' => true,
        'applet' => true,
        'font' => true,
        's' => true,
        'strike' => true,
        'u' => true,
    ];

    global $TAGS_NORMAL_DEPRECATED;
    $TAGS_NORMAL_DEPRECATED = [
        'basefont' => true,
    ];

    // Autofill spec: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill

    $autofill_contact_info_type_regex = '((home|work|mobile|fax|pager) )?';

    $autofill_field_names = [
        'name',
        'honorific-prefix',
        'given-name',
        'additional-name',
        'family-name',
        'honorific-suffix',
        'nickname',
        'username',
        'new-password',
        'current-password',
        'one-time-code',
        'organization-title',
        'organization',
        'street-address',
        'address-line1',
        'address-line2',
        'address-line3',
        'address-level4',
        'address-level3',
        'address-level2',
        'address-level1',
        'country',
        'country-name',
        'postal-code',
        'cc-name',
        'cc-given-name',
        'cc-additional-name',
        'cc-family-name',
        'cc-number',
        'cc-exp',
        'cc-exp-month',
        'cc-exp-year',
        'cc-csc',
        'cc-type',
        'transaction-currency',
        'transaction-amount',
        'language',
        'bday',
        'bday-day',
        'bday-month',
        'bday-year',
        'sex',
        'url',
        'photo',

        $autofill_contact_info_type_regex . 'tel',
        $autofill_contact_info_type_regex . 'tel-country-code',
        $autofill_contact_info_type_regex . 'tel-national',
        $autofill_contact_info_type_regex . 'tel-area-code',
        $autofill_contact_info_type_regex . 'tel-local',
        $autofill_contact_info_type_regex . 'tel-local-prefix',
        $autofill_contact_info_type_regex . 'tel-local-suffix',
        $autofill_contact_info_type_regex . 'tel-extension',
        $autofill_contact_info_type_regex . 'email',
        $autofill_contact_info_type_regex . 'impp',
    ];

    $autocomplete_regex = '(on|off|autocomplete-disabled|((section-[\w\-]+ )?(shipping |billing )?(' . implode('|', $autofill_field_names) . ')))'; // ("autocomplete-disabled" is an invalid value we use to disable autofill)

    global $TAG_ATTRIBUTES;
    $TAG_ATTRIBUTES = [
        '*.class' => $enforce_class,
        '*.contenteditable' => '(true|false)',
        '*.contextmenu' => $enforce_id,
        '*.dir' => $enforce_direction,
        '*.draggable' => '(true|false|auto)',
        '*.dropzone' => '(copy|move|link)',
        '*.hidden' => '(hidden)',
        '*.id' => $enforce_id,
        '*.itemprop' => '.*',
        '*.itemscope' => '.*',
        '*.itemtype' => '.*',
        '*.lang' => $enforce_lang,
        '*.onclick' => $enforce_javascript,
        '*.ondblclick' => $enforce_javascript,
        '*.onkeydown' => $enforce_javascript,
        '*.onkeypress' => $enforce_javascript,
        '*.onkeyup' => $enforce_javascript,
        '*.onmousedown' => $enforce_javascript,
        '*.onmousemove' => $enforce_javascript,
        '*.onmouseout' => $enforce_javascript,
        '*.onmouseover' => $enforce_javascript,
        '*.onmouseup' => $enforce_javascript,
        '*.spellcheck' => '(true|false)',
        '*.style' => '.*',
        '*.title' => '.*',
        '*.translate' => '(yes|no)',
        'a.accesskey' => $enforce_character,
        'a.charset' => '.+',
        'a.coords' => '.+',
        'a.download' => '(download)',
        'a.href' => $enforce_link,
        'a.hreflang' => $enforce_lang,
        'a.media' => '.+',
        'a.onblur' => $enforce_javascript,
        'a.onfocus' => $enforce_javascript,
        'a.rel' => '.*',
        'a.rev' => '.+',
        'a.shape' => '(rect|circle|poly|default)',
        'a.tabindex' => $enforce_inumber,
        'a.target' => '.+',
        'a.type' => '.+',
        'area.accesskey' => $enforce_character,
        'area.alt' => '.*',
        'area.coords' => '.+',
        'area.href' => $enforce_link,
        'area.nohref' => 'nohref',
        'area.onblur' => '.+',
        'area.onfocus' => $enforce_javascript,
        'area.shape' => '(rect|circle|poly|default)',
        'area.tabindex' => $enforce_inumber,
        'area.target' => '.+',
        'aria-activedescendant' => $enforce_id,
        'aria-atomic' => '(true|false)',
        'aria-autocomplete' => '(true|false)',
        'aria-busy' => '(true|false)',
        'aria-checked' => '(true|false)',
        'aria-controls' => $enforce_id,
        'aria-describedby' => $enforce_id,
        'aria-disabled' => '(true|false)',
        'aria-dropeffect' => '(copy|move|link|execute|popup|none)',
        'aria-expanded' => '(true|false)',
        'aria-flowto' => $enforce_id,
        'aria-grabbed' => '(true|false)',
        'aria-haspopup' => '(true|false)',
        'aria-hidden' => '(true|false)',
        'aria-invalid' => '(true|false)',
        'aria-label' => $enforce_id,
        'aria-labelledby' => $enforce_id,
        'aria-level' => $enforce_number,
        'aria-live' => '(true|false)',
        'aria-multiline' => '(true|false)',
        'aria-multiselectable' => '(true|false)',
        'aria-orientation' => '(scrollbar|separator|slider)',
        'aria-owns' => $enforce_id,
        'aria-posinset' => '(true|false)',
        'aria-pressed' => '(true|false)',
        'aria-readonly' => '(true|false)',
        'aria-relevant' => '(true|false)',
        'aria-required' => '(true|false)',
        'aria-selected' => '(true|false)',
        'aria-setsize' => $enforce_number,
        'aria-sort' => '(ascending|descending)',
        'aria-valuemax' => '.*',
        'aria-valuemin' => '.*',
        'aria-valuenow' => '.*',
        'aria-valuetext' => '.*',
        'audio.autoplay' => '(autoplay)',
        'audio.controls' => '(controls)',
        'audio.loop' => '(loop)',
        'audio.preload' => '(auto|metadata|none)',
        'audio.src' => $enforce_link,
        'base.href' => $enforce_link,
        'base.target' => '.+',
        'blockquote.cite' => '.+',
        'body.onload' => $enforce_javascript,
        'body.onunload' => $enforce_javascript,
        'button.accesskey' => $enforce_character,
        'button.disabled' => 'disabled',
        'button.form' => $enforce_name,
        'button.formaction' => '.+',
        'button.formenctype' => '(application/x-www-form-urlencoded|multipart/form-data|text/plain)',
        'button.formmethod' => '(get|post)',
        'button.formnovalidate' => '(formnovalidate)',
        'button.formtarget' => $enforce_name,
        'button.name' => $enforce_name,
        'button.onblur' => $enforce_javascript,
        'button.onfocus' => $enforce_javascript,
        'button.tabindex' => $enforce_inumber,
        'button.type' => '(button|submit|reset)',
        'button.value' => '.+',
        'canvas.height' => $enforce_inumber,
        'canvas.width' => $enforce_inumber,
        'col.char' => $enforce_character,
        'col.charoff' => $enforce_inumber,
        'col.span' => $enforce_inumber_non_zero,
        'colgroup.char' => $enforce_character,
        'colgroup.charoff' => $enforce_inumber,
        'colgroup.span' => $enforce_inumber_non_zero,
        'command.checked' => '(checked)',
        'command.disabled' => '(disabled)',
        'command.icon' => '.+',
        'command.label' => $enforce_id,
        'command.radiogroup' => $enforce_name,
        'command.type' => '(checkbox|command|radio)',
        'del.cite' => '.+',
        'del.datetime' => '.+',
        'details.open' => '(open)',
        'div.xml:lang' => $enforce_lang,
        'embed.height' => $enforce_inumber,
        'embed.src' => $enforce_link,
        'embed.type' => '.*',
        'embed.width' => $enforce_inumber,
        'fieldset.disabled' => '(disabled)',
        'fieldset.form' => $enforce_name,
        'fieldset.name' => $enforce_name,
        'form.accept-charset' => '.+',
        'form.action' => $enforce_link,
        'form.autocomplete' => '(on|off)',
        'form.enctype' => 'multipart/form-data|application/x-www-form-urlencoded',
        'form.method' => '(get|post)',
        'form.novalidate' => '(novalidate)',
        'form.oninput' => '.+',
        'form.onreset' => '.+',
        'form.onsubmit' => '.+',
        'form.target' => '.+',
        'html.manifest' => '.+',
        'html.version' => '.+',
        'html.xml:lang' => $enforce_lang,
        'html.xmlns' => '.+',
        'iframe.longdesc' => '.+',
        'iframe.name' => $enforce_name,
        'iframe.sandbox' => '(allow-forms|allow-same-origin|allow-scripts|allow-top-navigation)',
        'iframe.seamless' => '(seamless)',
        'iframe.src' => $enforce_link,
        'iframe.srcdoc' => '.+',
        'img.alt' => '.*', // Have to allow this really, for non-semantic images
        'img.height' => $enforce_inumber,
        'img.ismap' => 'ismap',
        'img.longdesc' => '.+',
        'img.src' => $enforce_link,
        'img.srcset' => '(' . $enforce_link . ' \d+x( |$))*',
        'img.sizes' => '.+',
        'img.usemap' => '.+',
        'img.width' => $enforce_inumber,
        'input.accept' => '.+',
        'input.accesskey' => $enforce_character,
        'input.alt' => '.*',
        'input.autocomplete' => $autocomplete_regex,
        'input.autofocus' => '(autofocus)',
        'input.checked' => 'checked',
        'input.disabled' => 'disabled',
        'input.form' => $enforce_name,
        'input.formaction' => '.+',
        'input.formenctype' => '(application/x-www-form-urlencoded|multipart/form-data|text/plain)',
        'input.formmethod' => '(get|post)',
        'input.formnovalidate' => '(formnovalidate)',
        'input.formtarget' => $enforce_name,
        'input.height' => $enforce_inumber,
        'input.list' => $enforce_name,
        'input.max' => '.+',
        'input.maxlength' => $enforce_inumber_non_zero,
        'input.min' => '.+',
        'input.multiple' => '(multiple)',
        'input.name' => $enforce_name,
        'input.onblur' => '.+',
        'input.onchange' => '.+',
        'input.onfocus' => $enforce_javascript,
        'input.onselect' => '.+',
        'input.pattern' => '.+',
        'input.placeholder' => '.+',
        'input.readonly' => 'readonly',
        'input.required' => '(required)',
        'input.size' => '.+',
        'input.src' => $enforce_link,
        'input.step' => '(any|' . $enforce_number_opt_fractional . ')',
        'input.tabindex' => $enforce_inumber,
        'input.type' => '(text|password|checkbox|radio|submit|reset|file|hidden|image|button|color|date|datetime|datetime-local|email|month|number|range|search|tel|time|url|week)',
        'input.usemap' => '.+',
        'input.value' => '.*',
        'input.width' => $enforce_inumber,
        'ins.cite' => '.+',
        'ins.datetime' => '.+',
        'keygen.autofocus' => '(autofocus)',
        'keygen.challenge' => '(challenge)',
        'keygen.disabled' => '(disabled)',
        'keygen.keytype' => '(rsa|other)',
        'keygen.name' => $enforce_name,
        'label.accesskey' => $enforce_character,
        'label.for' => $enforce_id,
        'label.form' => $enforce_name,
        'label.onblur' => '.+',
        'label.onfocus' => $enforce_javascript,
        'legend.accesskey' => $enforce_character,
        'link.charset' => '.+',
        'link.href' => $enforce_link,
        'link.hreflang' => $enforce_lang,
        'link.media' => '.+',
        'link.rel' => '.+',
        'link.rev' => '.+',
        'link.sizes' => '.+',
        'link.type' => '.+',
        'link.as' => '\w+',
        'map.name' => $enforce_name,
        'menu.label' => '.*',
        'menu.type' => '(context|toolbar|list)',
        'meta.charset' => '.+',
        'meta.content' => '.*',
        'meta.http-equiv' => '[a-zA-Z].+',
        'meta.name' => '[a-zA-Z].+',
        'meta.property' => '[a-zA-Z].+',
        'meta.scheme' => '.+',
        'meter.form' => $enforce_name,
        'meter.high' => $enforce_number,
        'meter.low' => $enforce_number,
        'meter.max' => $enforce_number,
        'meter.min' => $enforce_number,
        'meter.optimum' => $enforce_number,
        'meter.value' => $enforce_number,
        'object.archive' => '.+',
        'object.classid' => '.+',
        'object.codebase' => $enforce_link,
        'object.codetype' => '.+',
        'object.data' => $enforce_link,
        'object.declare' => 'declare',
        'object.form' => $enforce_name,
        'object.height' => $enforce_inumber,
        'object.name' => $enforce_name,
        'object.standby' => '.+',
        'object.tabindex' => $enforce_inumber,
        'object.type' => '.+',
        'object.usemap' => '.+',
        'object.width' => $enforce_inumber,
        'ol.reversed' => '(reversed)',
        'optgroup.disabled' => 'disabled',
        'optgroup.label' => '.+',
        'option.disabled' => 'disabled',
        'option.label' => '.+',
        'option.selected' => 'selected',
        'option.value' => '.*',
        'output.for' => $enforce_id,
        'output.form' => $enforce_name,
        'output.name' => $enforce_name,
        'param.name' => $enforce_name,
        'param.type' => '.+',
        'param.value' => '.+',
        'param.valuetype' => '(data|ref|object)',
        'progress.max' => $enforce_number,
        'progress.value' => $enforce_number,
        'q.cite' => '.+',
        'rt.rbspan' => $enforce_inumber_non_zero,
        'script.async' => '(async)',
        'select.required' => '(required)',
        'script.charset' => '.+',
        'script.defer' => 'defer',
        'script.event' => '.+',
        'script.for' => '.+',
        'script.src' => $enforce_link,
        'script.nonce' => '\w+',
        'script.type' => '(application/javascript|text/html)',
        'select.autocomplete' => $autocomplete_regex,
        'select.autofocus' => '(autofocus)',
        'select.disabled' => 'disabled',
        'select.form' => $enforce_name,
        'select.multiple' => 'multiple',
        'select.name' => $enforce_name,
        'select.onblur' => '.+',
        'select.onchange' => '.+',
        'select.onfocus' => $enforce_javascript,
        'select.size' => $enforce_inumber_non_zero,
        'select.tabindex' => $enforce_inumber,
        'source.media' => '.*',
        'source.src' => $enforce_link,
        'source.type' => '.*',
        'span.xml:lang' => $enforce_lang,
        'style.media' => '.+',
        'style.scoped' => '(scoped)',
        'style.type' => 'text/css',
        'style.nonce' => '\w+',
        'table.frame' => '(void|above|below|hsides|lhs|rhs|vsides|box|border)',
        'table.rules' => '(none|groups|rows|cols|all)',
        'tbody.char' => $enforce_character,
        'tbody.charoff' => $enforce_inumber,
        'td.axis' => '.+',
        'td.char' => $enforce_character,
        'td.charoff' => $enforce_inumber,
        'td.colspan' => $enforce_inumber_non_zero,
        'td.headers' => '.+',
        'td.rowspan' => $enforce_inumber_non_zero,
        'td.scope' => '(row|col|rowgroup|colgroup)',
        'textarea.accesskey' => $enforce_character,
        'textarea.autocomplete' => $autocomplete_regex,
        'textarea.autofocus' => '(autofocus)',
        'textarea.cols' => $enforce_inumber_non_zero,
        'textarea.dirname' => $enforce_name,
        'textarea.disabled' => 'disabled',
        'textarea.form' => $enforce_name,
        'textarea.maxlength' => $enforce_inumber_non_zero,
        'textarea.name' => $enforce_name,
        'textarea.onblur' => '.+',
        'textarea.onchange' => '.+',
        'textarea.onfocus' => $enforce_javascript,
        'textarea.onselect' => '.+',
        'textarea.placeholder' => '.+',
        'textarea.readonly' => 'readonly',
        'textarea.required' => '(required)',
        'textarea.rows' => $enforce_inumber_non_zero,
        'textarea.tabindex' => $enforce_inumber,
        'textarea.wrap' => '(hard|soft)',
        'tfoot.char' => $enforce_character,
        'tfoot.charoff' => $enforce_inumber,
        'th.axis' => '.+',
        'th.char' => $enforce_character,
        'th.charoff' => $enforce_inumber,
        'th.colspan' => $enforce_inumber_non_zero,
        'th.headers' => '.+',
        'th.rowspan' => $enforce_inumber_non_zero,
        'th.scope' => '(row|col|rowgroup|colgroup)',
        'thead.char' => $enforce_character,
        'thead.charoff' => $enforce_inumber,
        'time.datetime' => '.*',
        'tr.char' => $enforce_character,
        'tr.charoff' => $enforce_inumber,
        'track.default' => '(default)',
        'track.kind' => '(subtitles|captions|descriptions|chapters|metadata)',
        'track.label' => '.*',
        'track.lang' => $enforce_lang,
        'track.src' => $enforce_link,
        'video.audio' => '(muted)',
        'video.autoplay' => '(autoplay)',
        'video.controls' => '(controls)',
        'video.height' => $enforce_inumber,
        'video.loop' => '(loop)',
        'video.poster' => '.*',
        'video.preload' => '(auto|metadata|none)',
        'video.src' => $enforce_link,
        'video.width' => $enforce_inumber,

        // These are needed in IE, so we will have to browser sniff and output if IE being used, but not check them as okay
        //'iframe.scrolling' => '(yes|no|auto)',
        //'iframe.frameborder' => '(1|0)',
    ];

    global $TAG_ATTRIBUTES_REQUIRED;
    $TAG_ATTRIBUTES_REQUIRED = [
        'base' => ['href'], // XHTML-strict
        'meta' => ['content'],
        'style' => [/*'type'*/],
        'script' => [/*'type'*/],
        'bdo' => ['dir'],
        'basefont' => ['size'],
        //'param' => ['name'], Not needed in XHTML strict
        'iframe' => ['src', 'title'],
        'img' => ['src', 'alt'],
        'label' => ['for'],
        'map' => ['id'],
        'area' => ['alt'],
        'form' => ['action', 'title'],
        'textarea' => ['cols', 'rows'],
        //'input' => ['value'], // accessibility, checked somewhere else
        'optgroup' => ['label'],
    ];

    if (!defined('IN_XML_TAG')) {
        define('IN_XML_TAG', -3);
        define('IN_DTD_TAG', -2);
        define('NO_MANS_LAND', -1);
        define('IN_COMMENT', 0);
        define('IN_TAG_NAME', 1);
        define('STARTING_TAG', 2);
        define('IN_TAG_BETWEEN_ATTRIBUTES', 3);
        define('IN_TAG_ATTRIBUTE_NAME', 4);
        define('IN_TAG_BETWEEN_ATTRIBUTE_NAME_VALUE_LEFT', 5);
        define('IN_TAG_BETWEEN_ATTRIBUTE_NAME_VALUE_RIGHT', 7);
        define('IN_TAG_ATTRIBUTE_VALUE_BIG_QUOTES', 10);
        define('IN_TAG_ATTRIBUTE_VALUE_NO_QUOTES', 12);
        define('IN_TAG_EMBEDDED_COMMENT', 9);
        define('IN_TAG_ATTRIBUTE_VALUE_LITTLE_QUOTES', 8);
        define('IN_CDATA', 11);
        define('IN_IMPLICIT_CDATA', 13);
    }
}

/**
 * Check the specified XHTML, and return the results.
 *
 * @param  string $out The XHTML to check
 * @param  boolean $well_formed_only Whether to avoid checking for relational errors (false implies just a quick structural check, aka a 'well formed' check)
 * @param  boolean $is_fragment Whether what is being checked is an HTML fragment, rather than a whole document
 * @param  boolean $webstandards_javascript Validate javascript
 * @param  boolean $webstandards_css Validate CSS
 * @param  boolean $webstandards_wcag Validate WCAG
 * @param  boolean $webstandards_compat Validate for compatibility
 * @param  boolean $webstandards_ext_files Validate external files
 * @param  boolean $webstandards_manual Bring up messages about manual checks
 * @param  boolean $webstandards_csp Bring up messages about CSP
 * @return array Parse information
 */
function check_xhtml($out, $well_formed_only = false, $is_fragment = false, $webstandards_javascript = true, $webstandards_css = true, $webstandards_wcag = true, $webstandards_compat = true, $webstandards_ext_files = true, $webstandards_manual = false, $webstandards_csp = false)
{
    if (function_exists('cms_extend_time_limit')) {
        $old_limit = cms_extend_time_limit(TIME_LIMIT_EXTEND__SLUGGISH);
    }

    if (function_exists('disable_php_memory_limit')) {
        disable_php_memory_limit();
    }

    global $WEBSTANDARDS_CHECKER_OFF, $WELL_FORMED_ONLY, $WEBSTANDARDS_JAVASCRIPT, $WEBSTANDARDS_CSS, $WEBSTANDARDS_WCAG, $WEBSTANDARDS_COMPAT, $WEBSTANDARDS_EXT_FILES, $WEBSTANDARDS_MANUAL, $WEBSTANDARDS_CSP, $UNDER_XMLNS;
    if (function_exists('mixed')) {
        $WEBSTANDARDS_CHECKER_OFF = null;
    }
    $WEBSTANDARDS_CHECKER_OFF = null;
    $WELL_FORMED_ONLY = $well_formed_only;
    if (!$WELL_FORMED_ONLY) {
        if (function_exists('require_code')) {
            require_code('webstandards2');
        }
    }
    $WEBSTANDARDS_JAVASCRIPT = $webstandards_javascript;
    $WEBSTANDARDS_CSS = $webstandards_css;
    $WEBSTANDARDS_WCAG = $webstandards_wcag;
    $WEBSTANDARDS_COMPAT = $webstandards_compat;
    $WEBSTANDARDS_EXT_FILES = $webstandards_ext_files;
    $WEBSTANDARDS_MANUAL = $webstandards_manual;
    $WEBSTANDARDS_CSP = $webstandards_csp;

    global $IDS_SO_FAR;
    $IDS_SO_FAR = [];

    $content_start_stack = [];

    global $BLOCK_CONSTRAIN, $XML_CONSTRAIN, $LAST_TAG_ATTRIBUTES, $FOUND_DOCTYPE, $FOUND_DESCRIPTION, $FOUND_KEYWORDS, $FOUND_CONTENTTYPE, $THE_DOCTYPE, $TAGS_DEPRECATE_ALLOW, $URL_BASE, $PARENT_TAG, $TABS_SEEN, $KEYS_SEEN, $ANCHORS_SEEN, $ATT_STACK, $TAG_STACK, $POS, $LINENO, $LINESTART, $OUT, $T_POS, $PROHIBITIONS, $ONLY_PARENT, $ONLY_CHILDREN, $REQUIRE_ANCESTOR, $LEN, $ANCESTOR_BLOCK, $ANCESTOR_INLINE, $POSSIBLY_EMPTY_TAGS, $MUST_SELFCLOSE_TAGS, $FOR_LABEL_IDS, $FOR_LABEL_IDS_2, $INPUT_TAG_IDS;
    global $TAG_RANGES, $VALUE_RANGES, $LAST_A_TAG, $A_LINKS, $XHTML_FORM_ENCODING;
    global $AREA_LINKS, $LAST_HEADING, $CRAWLED_URLS, $HYPERLINK_URLS, $EMBED_URLS, $THE_LANGUAGE, $PSPELL_LINK;
    global $TAGS_BLOCK, $TAGS_INLINE, $TAGS_NORMAL, $TAGS_BLOCK_DEPRECATED, $TAGS_INLINE_DEPRECATED, $TAGS_NORMAL_DEPRECATED, $NEVER_SELFCLOSE_TAGS;
    $PSPELL_LINK = null;
    $THE_LANGUAGE = 'en';
    $THE_DOCTYPE = $is_fragment ? DOCTYPE_XHTML : DOCTYPE_HTML;
    $TAGS_DEPRECATE_ALLOW = true;
    $XML_CONSTRAIN = $is_fragment;
    $BLOCK_CONSTRAIN = false;
    $LINENO = 0;
    $LINESTART = 0;
    $HYPERLINK_URLS = [];
    $EMBED_URLS = [];
    $AREA_LINKS = [];
    $LAST_HEADING = 0;
    $FOUND_DOCTYPE = false;
    $FOUND_CONTENTTYPE = false;
    $FOUND_KEYWORDS = false;
    $FOUND_DESCRIPTION = false;
    $CRAWLED_URLS = [];
    $PARENT_TAG = '';
    $XHTML_FORM_ENCODING = '';
    $UNDER_XMLNS = false;
    $KEYS_SEEN = [];
    $TABS_SEEN = [];
    $TAG_RANGES = [];
    $VALUE_RANGES = [];
    $LAST_A_TAG = null;
    $ANCHORS_SEEN = [];
    $FOR_LABEL_IDS = [];
    $FOR_LABEL_IDS_2 = [];
    $INPUT_TAG_IDS = [];
    $TAG_STACK = [];
    $ATT_STACK = [];
    $ANCESTOR_BLOCK = 0;
    $ANCESTOR_INLINE = 0;
    $POS = 0;
    $OUT = $out;
    unset($out);
    $LEN = strlen($OUT);
    $level_ranges = [];
    $stack_size = 0;
    $to_find = ['html' => true, 'head' => true, 'title' => true/*, 'meta' => true*/];
    $only_one_of_stack = [];
    $only_one_of_template = ['title' => 1, 'head' => 1, 'body' => 1, 'base' => 1, 'thead' => 1, 'tfoot' => 1];
    $only_one_of = $only_one_of_template;
    $A_LINKS = [];
    $previous = '';
    if (!isset($GLOBALS['MAIL_MODE'])) {
        $GLOBALS['MAIL_MODE'] = false;
    }

    $errors = [];

    $bad_root = false;

    $token = _get_next_tag();
    while ($token !== null) {
        while ((is_array($token)) && (!empty($token))) { // Some kind of error in our token
            if ($WEBSTANDARDS_CHECKER_OFF === null) {
                foreach ($token[1] as $error) {
                    $errors[] = _xhtml_error($error[0], array_key_exists(1, $error) ? $error[1] : '', array_key_exists(2, $error) ? $error[2] : '', array_key_exists(3, $error) ? $error[3] : '', array_key_exists('raw', $error) ? $error['raw'] : false, array_key_exists('pos', $error) ? $error['pos'] : 0);
                }
                if ($token[0] === null) {
                    return ['level_ranges' => $level_ranges, 'tag_ranges' => $TAG_RANGES, 'value_ranges' => $VALUE_RANGES, 'errors' => $errors];
                }
            }
            $token = $token[0];
        }

        $basis_token = _get_tag_basis($token);

        // Open, close, or monitonic?
        $term = strpos($token, '/');
        if (!($WEBSTANDARDS_CHECKER_OFF === null)) {
            if ($term === false) {
                $WEBSTANDARDS_CHECKER_OFF++;
            } elseif ($term == 1) {
                if ($WEBSTANDARDS_CHECKER_OFF == 0) {
                    $WEBSTANDARDS_CHECKER_OFF = null;
                } else {
                    $WEBSTANDARDS_CHECKER_OFF--;
                }
            }
        }

        if ($term !== 1) {
            if (isset($only_one_of[$basis_token])) {
                if ($only_one_of[$basis_token] == 0) {
                    $errors[] = _xhtml_error('XHTML_ONLY_ONE_ALLOWED', $basis_token);
                }
                $only_one_of[$basis_token]--;
            }

            $level_ranges[] = [$stack_size, $T_POS, $POS];
            if (isset($to_find[$basis_token])) {
                unset($to_find[$basis_token]);
            }
            if ((!$WELL_FORMED_ONLY) && (($WEBSTANDARDS_CHECKER_OFF === null))) {
                if (((!$is_fragment) && ($stack_size == 0)) && ($basis_token != 'html')) {
                    $errors[] = _xhtml_error('XHTML_BAD_ROOT');
                    $bad_root = true;
                }
                if ($stack_size != 0) {
                    if (isset($ONLY_CHILDREN[$PARENT_TAG])) {
                        if (!in_array($basis_token, $ONLY_CHILDREN[$PARENT_TAG])) {
                            $errors[] = _xhtml_error('XHTML_BAD_CHILD', $basis_token, $PARENT_TAG);
                        }
                    }

                    foreach ($TAG_STACK as $parent_tag) {
                        if (isset($PROHIBITIONS[$parent_tag])) {
                            $prohibitions = $PROHIBITIONS[$parent_tag];
                            if (in_array($basis_token, $prohibitions)) {
                                $errors[] = _xhtml_error('XHTML_PROHIBITION', $basis_token, $parent_tag);
                            }
                        }
                    }
                }

                if ((isset($REQUIRE_ANCESTOR[$basis_token])) && (!$is_fragment)) {
                    if (!in_array($REQUIRE_ANCESTOR[$basis_token], $TAG_STACK)) {
                        $errors[] = _xhtml_error('XHTML_MISSING_ANCESTOR', $basis_token, $REQUIRE_ANCESTOR[$basis_token]);
                    }
                }
                if (isset($ONLY_PARENT[$basis_token])) {
                    if ($stack_size == 0) {
                        if (!$is_fragment) {
                            $errors[] = _xhtml_error('XHTML_BAD_PARENT', $basis_token, '/');
                        }
                    } else {
                        if (!in_array($PARENT_TAG, $ONLY_PARENT[$basis_token])) {
                            $errors[] = _xhtml_error('XHTML_BAD_PARENT', $basis_token, $PARENT_TAG);
                        }
                    }
                }
            }

            // In order to ease webstandards checking, we tolerate these in the parser (but of course, mark as errors)
            if ((($WEBSTANDARDS_CHECKER_OFF === null)) && (!$WELL_FORMED_ONLY) && ($term === false) && (isset($MUST_SELFCLOSE_TAGS[$basis_token]))) {
                if ($XML_CONSTRAIN) {
                    $errors[] = _xhtml_error('XHTML_NONEMPTY_TAG', $basis_token);
                }
            } else {
                if ($term === false) {
                    $PARENT_TAG = $basis_token;
                    array_push($TAG_STACK, $basis_token);
                    array_push($ATT_STACK, $LAST_TAG_ATTRIBUTES);
                    array_push($content_start_stack, $POS);
                    array_push($only_one_of_stack, $only_one_of);
                    $only_one_of = $only_one_of_template;
                    ++$stack_size;
                } else {
                    if ((($WEBSTANDARDS_CHECKER_OFF === null)) && (!$WELL_FORMED_ONLY) && ((!$XML_CONSTRAIN) || (isset($NEVER_SELFCLOSE_TAGS[$basis_token]))) && (($WEBSTANDARDS_CHECKER_OFF === null))) { // A tags must not self close even when only an anchor. Makes a weird underlined line effect in Firefox
                        if (!$bad_root) {
                            $errors[] = _xhtml_error('XHTML_CEMPTY_TAG', $basis_token);
                        }
                    }
                }
            }
        } elseif ($term == 1) { // Check its the closing to the stacks highest
            // HTML allows implicit closing. We will flag errors when we have to do it. See 1-2-3 note
            do {
                // For case 3 (see note below)
                if (!in_array($basis_token, $TAG_STACK)) {
                    if ((($WEBSTANDARDS_CHECKER_OFF === null)) && ($XML_CONSTRAIN)) {
                        $errors[] = _xhtml_error('XML_NO_CLOSE_MATCH', $basis_token, $previous);
                    }
                    break;
                }

                $previous = array_pop($TAG_STACK);
                $PARENT_TAG = empty($TAG_STACK) ? '' : $TAG_STACK[count($TAG_STACK) - 1];
                $start_pos = array_pop($content_start_stack);
                array_pop($ATT_STACK);
                $only_one_of = array_pop($only_one_of_stack);
                if ($previous === null) {
                    if ((($WEBSTANDARDS_CHECKER_OFF === null)) && ($XML_CONSTRAIN)) {
                        $errors[] = _xhtml_error('XML_MORE_CLOSE_THAN_OPEN', $basis_token);
                    }
                    break;
                }

                if ($basis_token != $previous) {
                    // This is really tricky, and totally XHTML-incompliant. There are three situations:
                    // 1) Overlapping tags. We really can't survive this, and it's very invalid. We could only detect it if we broke support for cases (1) and (2). e.g. <i><b></i></b>
                    // 2) Implicit closing. We close everything implicitly until we find the matching tag. E.g. <i><b></i>
                    // 3) Closing something that was never open. This is tricky - we can't survive it if it was opened somewhere as a parent, as we'd end up closing a whole load of tags by rule (2) - but if it's a lone closing, we can skip it. Good e.g. <b></i></b>. Bad e.g. <div><p></div></p></div>
                    if ((($WEBSTANDARDS_CHECKER_OFF === null)) && ($XML_CONSTRAIN)) {
                        $errors[] = _xhtml_error('XML_NO_CLOSE_MATCH', $basis_token, $previous);
                    }
                }

                if ((!$WELL_FORMED_ONLY) && (($WEBSTANDARDS_CHECKER_OFF === null))) {
                    if ((isset($MUST_SELFCLOSE_TAGS[$previous])) && ($XML_CONSTRAIN)) {
                        $errors[] = _xhtml_error('XHTML_NONEMPTY_TAG', $previous);
                    }

                    if ((!isset($MUST_SELFCLOSE_TAGS[$previous])) && (!isset($POSSIBLY_EMPTY_TAGS[$previous])) && (trim(substr($OUT, $start_pos, $T_POS - $start_pos)) == '')) {
                        if ((isset($TAGS_BLOCK[$previous])) || (isset($TAGS_INLINE[$previous])) || (isset($TAGS_NORMAL[$previous])) || (isset($TAGS_BLOCK_DEPRECATED[$previous])) || (isset($TAGS_INLINE_DEPRECATED[$previous])) || (isset($TAGS_NORMAL_DEPRECATED[$previous]))) {
                            $errors[] = _xhtml_error('XHTML_EMPTY_TAG', $previous);
                        }
                    }
                }
                $stack_size--;
                $level_ranges[] = [$stack_size, $T_POS, $POS];
            } while ($basis_token != $previous);
        }

        $token = _get_next_tag();
    }

    // Check we have everything closed
    if ($stack_size != 0) {
        if ($XML_CONSTRAIN) {
            $errors[] = _xhtml_error('XML_NO_CLOSE', array_pop($TAG_STACK));
        }
        return ['level_ranges' => $level_ranges, 'tag_ranges' => $TAG_RANGES, 'value_ranges' => $VALUE_RANGES, 'errors' => $errors];
    }

    if (!$well_formed_only) {
        if (!$is_fragment) {
            foreach (array_keys($to_find) as $tag) {
                $errors[] = _xhtml_error('XHTML_MISSING_TAG', $tag);
            }

            if ((!$FOUND_DOCTYPE) && (!$GLOBALS['MAIL_MODE'])) {
                $errors[] = _xhtml_error('XHTML_DOCTYPE');
            }
            if (($FOUND_DOCTYPE) && ($GLOBALS['MAIL_MODE'])) {
                $errors[] = _xhtml_error('MAIL_DOCTYPE');
            }
            if (!$FOUND_CONTENTTYPE) {
                $errors[] = _xhtml_error('XHTML_CONTENTTYPE');
            }
        }

        if (!$is_fragment) {
            // Check that all area-links have a corresponding hyperlink
            foreach (array_keys($AREA_LINKS) as $id) {
                if (!in_array($id, $HYPERLINK_URLS)) {
                    $errors[] = _xhtml_error('WCAG_AREA_EQUIV', $id);
                }
            }

            // Check that all labels apply to real input tags
            foreach (array_keys($FOR_LABEL_IDS_2) as $id) {
                if (!isset($INPUT_TAG_IDS[$id])) {
                    $errors[] = _xhtml_error('XHTML_ID_UNBOUND', $id);
                }
            }
        }
    }

    // Main spelling
    if (!empty($GLOBALS['FLAG__SPELLING'])) {
        $stripped = $OUT;
        $matches = [];
        if (stripos($stripped, '<style') !== false) {
            $num_matches = preg_match_all('#<style.*</style>#Umis', $stripped, $matches);
            for ($i = 0; $i < $num_matches; $i++) {
                $stripped = str_replace($matches[0][$i], str_repeat(' ', strlen($matches[0][$i])), $stripped);
            }
        }
        if (stripos($stripped, '<script') !== false) {
            $num_matches = preg_match_all('#<script.*</script>#Umis', $stripped, $matches);
            for ($i = 0; $i < $num_matches; $i++) {
                $stripped = str_replace($matches[0][$i], str_repeat(' ', strlen($matches[0][$i])), $stripped);
            }
        }
        $stripped = @html_entity_decode(strip_tags($stripped), ENT_QUOTES);
        require_code('webstandards2');
        $new_errors = check_spelling($stripped);
        $misspellings = [];
        global $POS, $LINENO, $LINESTART;
        foreach ($new_errors as $error) {
            if (array_key_exists($error[1], $misspellings)) {
                continue;
            }
            $misspellings[$error[1]] = 1;
            $POS = strpos($OUT, $error[1]);
            $LINESTART = strrpos(substr($OUT, 0, $POS), "\n");
            $LINENO = substr_count(substr($OUT, 0, $LINESTART), "\n") + 1;
            $errors[] = _xhtml_error($error[0], $error[1]);
        }
    }

    unset($OUT);

    if (function_exists('cms_extend_time_limit')) {
        cms_set_time_limit($old_limit);
    }

    return ['level_ranges' => $level_ranges, 'tag_ranges' => $TAG_RANGES, 'value_ranges' => $VALUE_RANGES, 'errors' => $errors];
}

/**
 * Get some general debugging information for an identified XHTML error.
 *
 * @param  string $error The error that occurred
 * @param  string $param_a The first parameter of the error
 * @param  string $param_b The second parameter of the error
 * @param  string $param_c The third parameter of the error
 * @param  boolean $raw Whether to not do a lang lookup
 * @param  integer $rel_pos Offset position
 * @return array A map of the error information
 *
 * @ignore
 */
function _xhtml_error($error, $param_a = '', $param_b = '', $param_c = '', $raw = false, $rel_pos = 0)
{
    global $POS, $OUT, $LINENO, $LINESTART;
    $lineno = ($rel_pos == 0) ? 0 : substr_count(substr($OUT, $POS, $rel_pos), "\n");
    $out = [];
    $out['line'] = $LINENO + 1 + $lineno;
    if ($rel_pos == 0) {
        $out['pos'] = $POS - $LINESTART;
    } else {
        $out['pos'] = $POS + $rel_pos - strrpos(substr($OUT, 0, $POS + $rel_pos), "\n");
    }
    $out['global_pos'] = $POS + $rel_pos;
    if (function_exists('do_lang')) {
        $out['error'] = $raw ? $error : do_lang($error, htmlentities($param_a), htmlentities($param_b), htmlentities($param_c));
    } else {
        $out['error'] = $raw ? $error : ($error . ': ' . htmlentities($param_a) . ', ' . htmlentities($param_b) . ', ' . htmlentities($param_c));
    }

    return $out;
}

/**
 * Checks to see if a string holds a hexadecimal number.
 *
 * @param  string $string The string to check
 * @return boolean Whether the string holds a hexadecimal number
 */
function is_hex($string)
{
    if (function_exists('ctype_xdigit')) {
        return ctype_xdigit($string);
    }
    return preg_match('#^[\da-f]+$#i', $string) != 0;
}

// Be prepared for some hideous code. I've had to optimise this relatively heavily to keep performance up!

/**
 * Test the next entity in the output stream.
 *
 * @param  integer $offset Checking offset
 * @return ?mixed An array of error details (null: no errors)
 */
function test_entity($offset = 0)
{
    global $OUT, $POS, $ENTITIES;

    $lump = substr($OUT, $POS + $offset, 8);

    $errors = [];

    $pos = strpos($lump, ';');
    if ($pos === false) {
        $errors[] = ['XHTML_BAD_ENTITY'];
    } else {
        $lump = substr($lump, 0, $pos);
        if (!(($lump[0] == '#') && ((is_numeric(substr($lump, 1))) || (($lump[1] == 'x') && (is_hex(substr($lump, 2))))))) { // It's ok if this is a numeric code, so no need to check further
            // Check against list
            if (!isset($ENTITIES[$lump])) {
                $errors[] = ['XHTML_BAD_ENTITY'];
            }
        }
    }

    if (!isset($errors[0])) {
        return null;
    }
    return $errors;
}

/**
 * Fix any invalid entities in the text.
 *
 * @param  string $in Text to fix in
 * @return string Fixed result
 */
function fix_entities($in)
{
    global $ENTITIES;

    $out = '';

    if ((strpos($in, '&') === false) && (strpos($in, '<') === false)) {
        return $in;
    }

    $len = strlen($in);
    $cdata = false;
    for ($i = 0; $i < $len; $i++) {
        $char = $in[$i];

        $out .= $char;

        if (($char == '<') && (substr($in, $i, 9) == '<![CDATA[')) {
            $cdata = true;
        }

        if ($cdata) {
            if (($char == '/') && (substr($in, $i, 5) == '//]]>')) {
                $cdata = false;
            }
        } else {
            if ($char == '&') {
                $lump = substr($in, $i + 1, 8);
                $pos = strpos($lump, ';');

                if ($pos === false) {
                    $out .= 'amp;';
                } else {
                    $lump = substr($lump, 0, $pos);
                    if (!(($lump[0] == '#') && ((is_numeric(substr($lump, 1))) || (($lump[1] == 'x') && (is_hex(substr($lump, 2))))))) {
                        if (!isset($ENTITIES[$lump])) {
                            $out .= 'amp;';
                        }
                    }
                }
            }
        }
    }

    return $out;
}

/**
 * Get the next tag in the current XHTML document.
 *
 * @return ?mixed Either an array of error details, a string of the tag, or null for finished (null: no next tag)
 * @ignore
 */
function _get_next_tag()
{
    global $PARENT_TAG, $POS, $LINENO, $LINESTART, $OUT, $T_POS, $ENTITIES, $LEN, $ANCESTOR_BLOCK, $TAG_STACK, $WEBSTANDARDS_CHECKER_OFF, $TEXT_NO_BLOCK, $INBETWEEN_TEXT;
    global $TAG_RANGES, $VALUE_RANGES;

    $status = ($PARENT_TAG == 'script' || $PARENT_TAG == 'style') ? IN_IMPLICIT_CDATA : NO_MANS_LAND;

    $current_tag = '';
    $current_attribute_name = '';
    $current_attribute_value = '';
    $close = false;
    $doc_type = '';
    $INBETWEEN_TEXT = '';

    $attribute_map = [];

    $errors = [];

    $special_chars = null;
    if ($special_chars === null) {
        $special_chars = ['=' => true, '"' => true, '&' => true, '/' => true, '<' => true, '>' => true, ' ' => true, "\n" => true, "\r" => true];
    }

    while ($POS < $LEN) {
        $next = $OUT[$POS];
        $POS++;

        if ($next == "\n") {
            $LINENO++;
            $LINESTART = $POS;
        }

        // Entity checking
        if (($next == '&') && ($status != IN_CDATA) && ($status != IN_IMPLICIT_CDATA) && ($status != IN_COMMENT) && ($WEBSTANDARDS_CHECKER_OFF === null)) {
            $test = test_entity();
            if ($test !== null) {
                $errors = array_merge($errors, $test);
            }
        }

        // State machine
        switch ($status) {
            case NO_MANS_LAND:
                $in_no_mans_land = '';
                $continue = ($next != '<') && ($next != '&') && ($POS < $LEN - 1);
                if ($next != '<') {
                    $INBETWEEN_TEXT .= $next;
                }
                while ($continue) {
                    $next = $OUT[$POS];
                    $POS++;
                    $continue = ($next != '<') && ($next != '&') && ($POS < $LEN - 1);
                    if ($continue) {
                        $in_no_mans_land .= $next;
                    }
                    if ($next != '<') {
                        $INBETWEEN_TEXT .= $next;
                    }
                    if ($next == "\n") {
                        $LINENO++;
                        $LINESTART = $POS;
                    }
                }
                if (($next == '&') && ($WEBSTANDARDS_CHECKER_OFF === null)) {
                    $test = test_entity();
                    if ($test !== null) {
                        $errors = array_merge($errors, $test);
                    }
                }

                // Can't have loose text in form/body/etc
                // 'x' is there for when called externally, checking on an x that has replaced, for example, a directive tag (which isn't actual text - so can't trip the error)
                if (($in_no_mans_land != 'x') && (trim($in_no_mans_land) != '') && (isset($TEXT_NO_BLOCK[$PARENT_TAG])) && ($GLOBALS['BLOCK_CONSTRAIN'])) {
                    $errors[] = ['XHTML_TEXT_NO_BLOCK', $PARENT_TAG];
                }

                if (($next == '<') && (isset($OUT[$POS + 2])) && ($OUT[$POS] == '!')) {
                    if (($OUT[$POS + 1] == '-') && ($OUT[$POS + 2] == '-')) {
                        $status = IN_COMMENT;
                        $INBETWEEN_TEXT .= '<!--';
                        $POS += 3;
                    } elseif (substr($OUT, $POS - 1, 9) == '<![CDATA[') {
                        $status = IN_CDATA;
                        $POS += 8;
                        $INBETWEEN_TEXT .= '<![CDATA[';
                    } else {
                        $status = IN_DTD_TAG;
                    }
                } elseif (($next == '<') && (isset($OUT[$POS])) && ($OUT[$POS] == '?') && ($POS < 10)) {
                    if (!isset($GLOBALS['MAIL_MODE'])) {
                        $GLOBALS['MAIL_MODE'] = false;
                    }
                    if ($GLOBALS['MAIL_MODE']) {
                        $errors[] = ['MAIL_PROLOG'];
                    }
                    $status = IN_XML_TAG;
                } elseif ($next == '<') {
                    $T_POS = $POS - 1;
                    $status = STARTING_TAG;
                } else {
                    if ($next == '>') {
                        $errors[] = ['XML_TAG_CLOSE_ANOMALY'];
                        return [null, $errors];
                    }
                }
                break;

            case IN_TAG_NAME:
                $more_to_come = (!isset($special_chars[$next])) && ($POS < $LEN);
                while ($more_to_come) {
                    $current_tag .= $next;
                    $next = $OUT[$POS];
                    $POS++;
                    if ($next == "\n") {
                        $LINENO++;
                        $LINESTART = $POS;
                    }
                    $more_to_come = (!isset($special_chars[$next])) && ($POS < $LEN);
                }
                if (($next == ' ') || ($next == "\n") || ($next == "\r")) {
                    $TAG_RANGES[] = [$T_POS + 1, $POS - 1, $current_tag];
                    $status = IN_TAG_BETWEEN_ATTRIBUTES;
                } elseif ($next == '<') {
                    $errors[] = ['XML_TAG_OPEN_ANOMALY', '1'];
                    return [null, $errors];
                } elseif ($next == '>') {
                    if ($OUT[$POS - 2] == '/') {
                        $TAG_RANGES[] = [$T_POS + 1, $POS - 1, $current_tag];
                        return _check_tag($current_tag, [], true, $close, $errors);
                    } else {
                        $TAG_RANGES[] = [$T_POS + 1, $POS - 1, $current_tag];
                        return _check_tag($current_tag, [], false, $close, $errors);
                    }
                } elseif ($next != '/') {
                    $current_tag .= $next;
                }
                break;

            case STARTING_TAG:
                if ($next == '/') {
                    $close = true;
                } elseif ($next == '<') {
                    $errors[] = ['XML_TAG_OPEN_ANOMALY', '2'];
                    $POS--;
                    $status = NO_MANS_LAND;
                } elseif ($next == '>') {
                    $errors[] = ['XML_TAG_CLOSE_ANOMALY', '3'];
                    $status = NO_MANS_LAND;
                } else {
                    $current_tag .= $next;
                    $status = IN_TAG_NAME;
                }
                break;

            case IN_TAG_BETWEEN_ATTRIBUTES:
                if (($next == '/') && (isset($OUT[$POS])) && ($OUT[$POS] == '>')) {
                    ++$POS;
                    return _check_tag($current_tag, $attribute_map, true, $close, $errors);
                } elseif ($next == '>') {
                    return _check_tag($current_tag, $attribute_map, false, $close, $errors);
                } elseif (($next == '<') && (isset($OUT[$POS + 3])) && ($OUT[$POS] == '!') && ($OUT[$POS + 1] == '-') && ($OUT[$POS + 2] == '-')) {
                    $status = IN_TAG_EMBEDDED_COMMENT;
                    if ($OUT[$POS + 3] == '-') {
                        $errors[] = ['XHTML_WRONG_COMMENTING'];
                    }
                } elseif ($next == '<') {
                    $errors[] = ['XML_TAG_OPEN_ANOMALY', '4'];
                    return [null, $errors];
                } elseif (($next != ' ') && ($next != "\t") && ($next != '/') && ($next != "\n") && ($next != "\r")) {
                    $status = IN_TAG_ATTRIBUTE_NAME;
                    $current_attribute_name .= $next;
                }
                break;

            case IN_TAG_ATTRIBUTE_NAME:
                $more_to_come = (!isset($special_chars[$next])) && ($POS < $LEN);
                while ($more_to_come) {
                    $current_attribute_name .= $next;
                    $next = $OUT[$POS];
                    $POS++;
                    if ($next == "\n") {
                        $LINENO++;
                        $LINESTART = $POS;
                    }
                    $more_to_come = (!isset($special_chars[$next])) && ($POS < $LEN);
                }

                if ($next == '=') {
                    if (function_exists('require_code')) {
                        require_code('type_sanitisation');
                    }
                    if ((function_exists('ctype_alnum')) && (ctype_alnum($current_attribute_name))) {
                    } else {
                        if ((preg_match('#^\w+$#', $current_attribute_name) == 0/*optimisation*/) && (!is_alphanumeric(preg_replace('#^([^:]+):#', '${1}', $current_attribute_name)))) {
                            $errors[] = ['XML_TAG_BAD_ATTRIBUTE', $current_attribute_name];
                            $current_attribute_name = 'wrong' . strval($POS);
                        }
                    }
                    $status = IN_TAG_BETWEEN_ATTRIBUTE_NAME_VALUE_RIGHT;
                } elseif ($next == '<') {
                    $errors[] = ['XML_TAG_OPEN_ANOMALY', '5'];
                    //return [null, $errors];
                    // We have to assume we shouldn't REALLY have found a tag
                    $POS--;
                    $current_tag = '';
                    $status = NO_MANS_LAND;
                } elseif ($next == '>') {
                    if (function_exists('require_code')) {
                        require_code('type_sanitisation');
                    }
                    if (!is_alphanumeric(preg_replace('#^([^:]+):#', '${1}', $current_attribute_name))) {
                        $errors[] = ['XML_TAG_BAD_ATTRIBUTE', $current_attribute_name];
                        $current_attribute_name = 'wrong' . strval($POS);
                    }

                    if ($GLOBALS['XML_CONSTRAIN']) {
                        $errors[] = ['XML_TAG_CLOSE_ANOMALY'];
                    }
                    // Things like nowrap, checked, etc
                    //return [null, $errors];

                    if (isset($attribute_map[$current_attribute_name])) {
                        $errors[] = ['XML_TAG_DUPLICATED_ATTRIBUTES', $current_tag];
                    }
                    $attribute_map[$current_attribute_name] = $current_attribute_name;
                    $current_attribute_name = '';
                    $VALUE_RANGES[] = [$POS - 1, $POS - 1];
                    return _check_tag($current_tag, $attribute_map, false, $close, $errors);
                } elseif (($next != ' ') && ($next != "\t") && ($next != "\n") && ($next != "\r")) {
                    $current_attribute_name .= $next;
                } else {
                    if (function_exists('require_code')) {
                        require_code('type_sanitisation');
                    }
                    if (!is_alphanumeric(preg_replace('#^([^:]+):#', '${1}', $current_attribute_name))) {
                        $errors[] = ['XML_TAG_BAD_ATTRIBUTE', $current_attribute_name];
                        $current_attribute_name = 'wrong' . strval($POS);
                    }
                    $status = IN_TAG_BETWEEN_ATTRIBUTE_NAME_VALUE_LEFT;
                }
                break;

            case IN_TAG_BETWEEN_ATTRIBUTE_NAME_VALUE_LEFT:
                if ($next == '=') {
                    $status = IN_TAG_BETWEEN_ATTRIBUTE_NAME_VALUE_RIGHT;
                } elseif (($next != ' ') && ($next != "\t") && ($next != "\n") && ($next != "\r")) {
                    if ($GLOBALS['XML_CONSTRAIN']) {
                        $errors[] = ['XML_ATTRIBUTE_ERROR'];
                    }
                    //return [null, $errors];  Actually  <blah nowrap ... /> could cause this

                    $status = IN_TAG_BETWEEN_ATTRIBUTES;
                    if (isset($attribute_map[$current_attribute_name])) {
                        $errors[] = ['XML_TAG_DUPLICATED_ATTRIBUTES', $current_tag];
                    }
                    $attribute_map[$current_attribute_name] = $current_attribute_name;
                    $current_attribute_name = $next;
                    $VALUE_RANGES[] = [$POS - 1, $POS - 1];
                }
                break;

            case IN_TAG_BETWEEN_ATTRIBUTE_NAME_VALUE_RIGHT:
                if ($next == '"') {
                    $v_pos = $POS;
                    $status = IN_TAG_ATTRIBUTE_VALUE_BIG_QUOTES;
                } elseif (($next == '\'') && (true)) { // Change to false if we want to turn off these quotes (preferred - but we can't control all input :( )
                    $v_pos = $POS;
                    $status = IN_TAG_ATTRIBUTE_VALUE_LITTLE_QUOTES;
                } elseif (($next != ' ') && ($next != "\t") && ($next != "\n") && ($next != "\r")) {
                    if ($next == '<') {
                        $errors[] = ['XML_TAG_OPEN_ANOMALY', '6'];
                    } elseif ($next == '>') {
                        $errors[] = ['XML_TAG_CLOSE_ANOMALY'];
                    }

                    if ($GLOBALS['XML_CONSTRAIN']) {
                        $errors[] = ['XML_ATTRIBUTE_ERROR'];
                    }
                    $POS--;
                    $v_pos = $POS;
                    $status = IN_TAG_ATTRIBUTE_VALUE_NO_QUOTES;
                }
                break;

            case IN_TAG_ATTRIBUTE_VALUE_NO_QUOTES:
                if ($next == '>') {
                    if (isset($attribute_map[$current_attribute_name])) {
                        $errors[] = ['XML_TAG_DUPLICATED_ATTRIBUTES', $current_tag];
                    }
                    $attribute_map[$current_attribute_name] = $current_attribute_value;
                    $current_attribute_value = '';
                    $current_attribute_name = '';
                    $VALUE_RANGES[] = [$v_pos, $POS - 1];
                    return _check_tag($current_tag, $attribute_map, false, $close, $errors);
                } elseif (($next == ' ') || ($next == "\t") || ($next == "\n") || ($next == "\r")) {
                    $status = IN_TAG_BETWEEN_ATTRIBUTES;
                    if (isset($attribute_map[$current_attribute_name])) {
                        $errors[] = ['XML_TAG_DUPLICATED_ATTRIBUTES', $current_tag];
                    }
                    $attribute_map[$current_attribute_name] = $current_attribute_value;
                    $current_attribute_value = '';
                    $current_attribute_name = '';
                    $VALUE_RANGES[] = [$v_pos, $POS - 1];
                } else {
                    if ($next == '<') {
                        $errors[] = ['XML_TAG_OPEN_ANOMALY', '7'];
                    }

                    $current_attribute_value .= $next;
                }
                break;

            case IN_TAG_ATTRIBUTE_VALUE_BIG_QUOTES:
                $more_to_come = (!isset($special_chars[$next])) && ($POS < $LEN);
                while ($more_to_come) {
                    $current_attribute_value .= $next;
                    $next = $OUT[$POS];
                    $POS++;
                    if ($next == "\n") {
                        $LINENO++;
                        $LINESTART = $POS;
                    }
                    $more_to_come = (!isset($special_chars[$next])) && ($POS < $LEN);
                }
                if (($next == '&') && ($WEBSTANDARDS_CHECKER_OFF === null)) {
                    $test = test_entity();
                    if ($test !== null) {
                        $errors = array_merge($errors, $test);
                    }
                }

                if ($next == '"') {
                    $status = IN_TAG_BETWEEN_ATTRIBUTES;
                    if (isset($attribute_map[$current_attribute_name])) {
                        $errors[] = ['XML_TAG_DUPLICATED_ATTRIBUTES', $current_tag];
                    }
                    $attribute_map[$current_attribute_name] = $current_attribute_value;
                    $current_attribute_value = '';
                    $current_attribute_name = '';
                    $VALUE_RANGES[] = [$v_pos, $POS - 1];
                } else {
                    if ($next == '<') {
                        $errors[] = ['XML_TAG_OPEN_ANOMALY', '7'];
                    } elseif ($next == '>') {
                        $errors[] = ['XML_TAG_CLOSE_ANOMALY'];
                    }

                    $current_attribute_value .= $next;
                }
                break;

            case IN_TAG_ATTRIBUTE_VALUE_LITTLE_QUOTES:
                if ($next == '\'') {
                    $status = IN_TAG_BETWEEN_ATTRIBUTES;
                    $attribute_map[$current_attribute_name] = $current_attribute_value;
                    $current_attribute_value = '';
                    $current_attribute_name = '';
                    $VALUE_RANGES[] = [$v_pos, $POS - 1];
                } else {
                    if ($next == '<') {
                        $errors[] = ['XML_TAG_OPEN_ANOMALY', '7'];
                    } elseif ($next == '>') {
                        $errors[] = ['XML_TAG_CLOSE_ANOMALY'];
                    }

                    $current_attribute_value .= $next;
                }
                break;

            case IN_XML_TAG:
                if (($OUT[$POS - 2] == '?') && ($next == '>')) {
                    $status = NO_MANS_LAND;
                }
                break;

            case IN_DTD_TAG: // This is a parser-directive, but we only use them for doctypes
                $doc_type .= $next;
                if ($next == '>') {
                    if (substr($doc_type, 0, 8) == '!DOCTYPE') {
                        global $THE_DOCTYPE, $TAGS_DEPRECATE_ALLOW, $FOUND_DOCTYPE, $XML_CONSTRAIN, $BLOCK_CONSTRAIN;

                        $FOUND_DOCTYPE = true;
                        $valid_doctypes = [DOCTYPE_XHTML5];
                        $doc_type = preg_replace('#//EN"\s+"#', '//EN" "', $doc_type);
                        if (!in_array('<' . $doc_type, $valid_doctypes)) {
                            $errors[] = ['XHTML_DOCTYPE'];
                        } else {
                            $THE_DOCTYPE = '<' . $doc_type;
                            $TAGS_DEPRECATE_ALLOW = false;
                            $BLOCK_CONSTRAIN = true;
                            $XML_CONSTRAIN = true;
                        }
                    }
                    $status = NO_MANS_LAND;
                }
                break;

            case IN_CDATA:
                $INBETWEEN_TEXT .= $next;
                if (($next == '>') && ($OUT[$POS - 2] == ']') && ($OUT[$POS - 3] == ']')) {
                    $status = NO_MANS_LAND;
                }
                break;

            case IN_IMPLICIT_CDATA:
                $INBETWEEN_TEXT .= $next;
                if (($next == '/') && ($OUT[$POS - 2] == '<')) {
                    $POS -= 2;
                    $status = NO_MANS_LAND;
                }
                break;

            case IN_COMMENT:
                $INBETWEEN_TEXT .= $next;
                if (($next == '>') && ($OUT[$POS - 2] == '-') && ($OUT[$POS - 3] == '-')) {
                    if ($OUT[$POS - 4] == '-') {
                        $errors[] = ['XHTML_WRONG_COMMENTING'];
                    }
                    $status = NO_MANS_LAND;
                }
                break;

            case IN_TAG_EMBEDDED_COMMENT:
                if (($next == '>') && ($OUT[$POS - 2] == '-') && ($OUT[$POS - 3] == '-')) {
                    $status = IN_TAG_BETWEEN_ATTRIBUTES;
                }
                break;
        }
    }
    if ($status != NO_MANS_LAND) {
        $errors[] = ['XML_BROKEN_END'];
        return [null, $errors];
    }
    return null;
}

/**
 * Checks an XHTML tag for conformance, including attributes. Return the results.
 *
 * @param  string $tag The name of the tag to check
 * @param  array $attributes A map of attributes (name=>value) the tag has
 * @param  boolean $self_close Whether this is a self-closing tag
 * @param  boolean $close Whether this is a closing tag
 * @param  array $errors Errors detected so far. We will add to these and return
 * @return mixed String for tag basis form, or array of error information
 *
 * @ignore
 */
function _check_tag($tag, $attributes, $self_close, $close, $errors)
{
    global $XML_CONSTRAIN, $LAST_TAG_ATTRIBUTES, $WELL_FORMED_ONLY, $WEBSTANDARDS_CHECKER_OFF, $MUST_SELFCLOSE_TAGS;

    $ltag = strtolower($tag);
    if ($ltag != $tag) {
        if ($XML_CONSTRAIN) {
            $errors[] = ['XHTML_CASE_TAG', $tag];
        }
        $tag = $ltag;
    }

    $LAST_TAG_ATTRIBUTES = $attributes;

    $actual_self_close = $self_close;
    if ((!$WELL_FORMED_ONLY) && (!$self_close) && (isset($MUST_SELFCLOSE_TAGS[$tag]))) {
        $self_close = true; // Will be flagged later
    }

    if (((isset($attributes['class'])) && (strpos($attributes['class'], 'webstandards-checker-off') !== false)) || ((isset($attributes['xmlns'])) && (strpos($attributes['xmlns'], 'xhtml') === false))) {
        $WEBSTANDARDS_CHECKER_OFF = 0;
    }

    if (!$WELL_FORMED_ONLY) {
        $errors = __check_tag($tag, $attributes, $self_close, $close, $errors);
    }

    if ($WEBSTANDARDS_CHECKER_OFF > 0) {
        $errors = [];
    }
    return ['<' . ($close ? '/' : '') . $tag . ($actual_self_close ? '/' : '') . '>', $errors];
}

/**
 * Get the tag basis for the specified tag. e.g. '<br />' would become 'br'. Note: tags with parameters given are not supported.
 *
 * @param  string $full The full tag
 * @return string The basis of the tag
 *
 * @ignore
 */
function _get_tag_basis($full)
{
    return trim($full, '/ <>');
}
