<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    import
 */

/*
In Composr we have cms_merge and we have Resource-fs.

Resource-fs is intended for staging site functionality and backups, mainly.
cms_merge is intended to merge disparate sites in a more complete way.

There is overlap, but intentionally each approach is optimised in a different way.
*/

/*
Our merge code works in one of two ways...
1) Read in of rows, remapping, insertion of rows in destination database
2) Read in of rows, remapping, call of APIs (e.g. add_download)

It's impossible to say which is best in a clear way. Sometimes APIs do extra stuff we want (or do not want), but row copying is simpler.
*/

/**
 * Hook class.
 */
class Hook_import_cms_merge
{
    /**
     * Standard importer hook info function.
     *
     * @return ?array Importer handling details, including lists of all the import types covered (import types are not necessarily the same as actual tables) (null: importer is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['supports_advanced_import'] = true;
        $info['product'] = do_lang('COMPOSR_SITE_MERGER');
        $info['prefix'] = 'cms_';
        $info['import'] = [
            'attachments',
            'cns_groups',
            'cns_custom_profile_fields',
            'cns_members',
            'authors',
            'banners',
            'calendar',
            'catalogues', // including rating, trackbacks, seo
            'point_transactions', // including daily visits
            'chat_rooms',
            'config',
            'custom_comcode',
            'comcode_pages',
            'staff_checklist_cus_tasks',
            'notifications',
            'awards',
            'downloads_and_categories', // including rating, trackbacks, seo
            'cns_forum_groupings',
            'cns_emoticons',
            'cns_forums', // including intros
            'cns_topics', // including readlogs // including description remapping for comment topics
            'cns_multi_moderations',
            'cns_polls_and_votes',
            'cns_post_templates',
            'cns_posts',
            'cns_warnings',
            'cns_saved_warnings',
            'filedump',
            'images_and_galleries', // including rating, trackbacks, seo
            'match_key_messages',
            'menu_items',
            'news_and_categories', // including rating, trackbacks, seo
            'newsletter_subscriptions',
            'polls', // including rating, trackbacks, seo
            'redirects',
            'staff_links',
            'wiki', // including rating, trackbacks, seo
            'stats',
            'themes',
            'support_tickets',
            'useronline_tracking',
            'ip_bans',
            'wordfilter',
            'zones',
            'permissions', // including HTTPS
            'attachment_references',
            'feedback',
            'ecommerce',
            'cns_welcome_emails',
            'quizzes',
            'leader_boards',
        ];
        $info['dependencies'] = [
            // This dependency tree is overdefined, but I wanted to make it clear what depends on what, rather than having a simplified version
           'attachment_references' => ['attachments', 'cns_members', 'cns_posts', 'news_and_categories', 'wiki'],
           'permissions' => array_diff($info['import'], ['feedback', 'attachment_references', 'permissions', 'stats']),
           'feedback' => array_diff($info['import'], ['themes', 'cns_warnings', 'feedback', 'attachment_references', 'permissions', 'quizzes', 'stats']),
           'authors' => ['cns_members', 'catalogues'],
           'banners' => ['cns_members'],
           'catalogues' => ['cns_members'],
           'notifications' => ['cns_members'],
           'chat_rooms' => ['cns_members', 'cns_groups'],
           'downloads_and_categories' => ['cns_members', 'catalogues'],
           'filedump' => ['cns_members'],
           'images_and_galleries' => ['cns_members', 'catalogues'],
           'news_and_categories' => ['cns_members', 'attachments', 'catalogues'],
           'polls' => ['cns_members', 'catalogues'],
           'wiki' => ['cns_members', 'attachments', 'catalogues'],
           'useronline_tracking' => ['cns_members'],
           'ip_bans' => ['cns_members'],
           'point_transactions' => ['cns_members'],
           'calendar' => ['cns_members', 'catalogues'],
           'comcode_pages' => ['cns_members', 'catalogues'],
           'match_key_messages' => [],
           'menu_items' => [],
           'cns_custom_profile_fields' => ['cns_groups'],
           'cns_multi_moderations' => ['cns_forums'],
           //'cns_groups' => ['catalogues'], Cyclic dependency, so we won't do this one
           'cns_members' => ['cns_groups', 'cns_custom_profile_fields', 'attachments'],
           'cns_forums' => ['cns_forum_groupings', 'cns_members', 'cns_groups', 'catalogues'],
           'cns_topics' => ['cns_forums', 'cns_members', 'catalogues'],
           'cns_polls_and_votes' => ['cns_topics', 'cns_members'],
           'cns_posts' => ['custom_comcode', 'cns_topics', 'cns_members', 'attachments', 'catalogues'],
           'cns_private_topics' => ['custom_comcode', 'cns_members'],
           'cns_post_templates' => ['cns_forums'],
           'cns_warnings' => ['cns_members', 'cns_groups', 'cns_topics', 'cns_forums'],
           'newsletter_subscriptions' => ['attachments'],
           'support_tickets' => ['cns_forums', 'cns_topics', 'cns_members'],
           'awards' => ['calendar', 'wiki', 'news_and_categories', 'images_and_galleries', 'catalogues', 'authors', 'cns_topics', 'cns_posts', 'cns_forums', 'cns_groups', 'cns_members', 'downloads_and_categories'],
           'ecommerce' => ['cns_groups', 'cns_members'],
           'cns_welcome_emails' => ['cns_members'],
           'quizzes' => ['cns_members', 'catalogues'],
           'aggregate_type_instances' => [],
           'leader_boards' => ['cns_members', 'cns_groups'],
        ];

        $_cleanup_url = build_url(['page' => 'admin_cleanup'], get_module_zone('admin_cleanup'));
        $cleanup_url = $_cleanup_url->evaluate();
        $info['message'] = (get_param_string('type', 'browse') != 'import' && get_param_string('type', 'browse') != 'hook') ? new Tempcode() : do_lang_tempcode('FORUM_CACHE_CLEAR', escape_html($cleanup_url));

        return $info;
    }

    /**
     * Do some tests, to make sure we're happy to continue importing.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     * @return ?Tempcode Error/warning UI (null: no error/warning)
     */
    public function pre_import_tests(object $db, string $table_prefix, string $file_base) : ?object
    {
        $title = get_screen_title('IMPORT');

        $bad = false;

        // Check actually is Composr DB (ERROR)
        $test = $db->query_select_value('zones', 'zone_name');
        if ($test === null) {
            return warn_screen($title, do_lang_tempcode('ERROR_NOT_CORRECT_DATABASE'));
        }

        // Check version (WARNING)
        $test = $db->query_select_value_if_there('values', 'the_value', ['the_name' => 'version']);
        if (($test === null) || (intval($test) != cms_version())) {
            attach_message(do_lang_tempcode('ERROR_NOT_CORRECT_VERSION'), 'notice');
            $bad = true;
        }

        // Check actually is Composr file path (ERROR)
        if (((!file_exists($file_base . '/_config.php')) && (!file_exists($file_base . '/info.php'))) || (!file_exists($file_base . '/sources_custom'))) {
            attach_message(do_lang_tempcode('ERROR_NOT_CORRECT_FILES'), 'warn');
            if ((is_on_multi_site_network()) && (!file_exists($file_base . '/_config.php')) && (!file_exists($file_base . '/info.php'))) {
                attach_message(do_lang_tempcode('ERROR_NOT_CORRECT_LINKING_POSSIBLY'), 'warn');
            }
            $bad = true;
        }

        // Check is on same MSN or is Conversr (WARNING)
        if (file_exists($file_base . '/_config.php')) {
            global $SITE_INFO;
            $backup_site_info = $SITE_INFO;
            $SITE_INFO = null;
            @include($file_base . '/_config.php');
            if ($SITE_INFO === null) {
                $SITE_INFO = $backup_site_info;
                attach_message(do_lang_tempcode('ERROR_INACCESSIBLE_DIR'), 'warn');
                if (is_on_multi_site_network()) {
                    attach_message(do_lang_tempcode('ERROR_NOT_CORRECT_LINKING_POSSIBLY'), 'warn');
                }
                $bad = true;
            } else {
                $this_site_info = $SITE_INFO;
                $SITE_INFO = $backup_site_info;
                if (empty($SITE_INFO['db_forums_host'])) {
                    $SITE_INFO['db_forums_host'] = 'localhost';
                }
                $same_forum = (!isset($SITE_INFO['db_forums'])) || ($this_site_info['db_forums'] == $SITE_INFO['db_forums']) && ($this_site_info['db_forums_host'] == $SITE_INFO['db_forums_host']) && ($db->get_table_prefix());
                if (($this_site_info['forum_type'] != 'cns') && (!$same_forum)) {
                    attach_message(do_lang_tempcode('ERROR_NOT_CORRECT_LINKING'), 'warn');
                    $bad = true;
                }
            }
        }

        // Show warning
        if ($bad) {
            return do_template('CONFIRM_SCREEN', [
                '_GUID' => '286928b79830cdff4ac506e4f4f00f3a',
                'TITLE' => $title,
                'PREVIEW' => do_lang_tempcode('IMPORT_WARNINGS_GIVEN'),
                'FIELDS' => build_keep_post_fields(),
                'URL' => get_self_url(false, false, ['happy' => 1]),
            ]);
        }

        return null;
    }

    /**
     * See if the importing site is on the same M.S.N. as the site being imported.
     *
     * @param  PATH $file_base The path to the imported site
     * @return boolean Answer
     */
    public function on_same_msn(string $file_base) : bool
    {
        if (get_param_integer('keep_on_same_msn', null) === 0) {
            return false;
        }
        if (get_param_integer('keep_on_same_msn', null) === 1) {
            return true;
        }

        //return false;
        global $SITE_INFO;
        $backup_site_info = $SITE_INFO;
        $SITE_INFO = null;
        @include($file_base . '/_config.php');
        $sites_site_info = $SITE_INFO;
        $SITE_INFO = $backup_site_info;

        $answer = ($sites_site_info['db_forums'] == get_db_forums()) && ($sites_site_info['db_forums_host'] == get_db_forums_host()) && (@$sites_site_info['cns_table_prefix'] === @$SITE_INFO['cns_table_prefix']);

        return $answer;
    }

    /**
     * Fetch and clean up a content language string.
     *
     * @param  object $db The database connector to import from
     * @param  mixed $id The content language string ID
     * @return string The cleaned-up string
     */
    public function get_lang_string(object $db, $id) : string
    {
        if ($id === null) {
            return '';
        }

        global $HAS_MULTI_LANG_CONTENT;
        $bak = $HAS_MULTI_LANG_CONTENT;
        $HAS_MULTI_LANG_CONTENT = is_integer($id);
        $text = get_translated_text($id, $db);
        $HAS_MULTI_LANG_CONTENT = $bak;

        $text = $this->update_comcode($text);

        return $text;
    }

    /**
     * Import some Comcode, making changes as required.
     *
     * @param  string $comcode Input
     * @param  ?ID_TEXT $referer_id Attachment referer type (null: not setting one now)
     * @return string Output
     */
    public function update_comcode(string $comcode, ?string $referer_id = null) : string
    {
        $matches = [];
        $count = preg_match_all('#\](\d+)\[/attachment\]#', $comcode, $matches);
        if ($count != 0) {
            for ($i = 0; $i < $count; $i++) {
                $from = $matches[1][$i];
                $to = import_id_remap_get('attachment', $from, true);
                if ($to === null) {
                    $to = -1;
                }
                $comcode = str_replace(']' . $from . '[/attachment]', ']' . strval($to) . '[/attachment]', $comcode);

                if ($referer_id !== null) {
                    $GLOBALS['SITE_DB']->query_insert('attachment_refs', ['r_referer_type' => 'comcode_page', 'r_referer_id' => $referer_id, 'a_id' => $to], false, true);
                }
            }
        }

        return $comcode;
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_welcome_emails(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_welcome_emails', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('welcome_email', $row['w_name'])) {
                continue;
            }

            cns_make_welcome_email($row['w_name'], $this->get_lang_string($db, $row['w_subject']), $this->get_lang_string($db, $row['w_text']), $row['w_send_time'], $row['w_newsletter'], $row['w_usergroup'], $row['w_usergroup_type']);

            import_id_remap_put('welcome_email', $row['w_name'], 0);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_quizzes(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('quizzes', ['*'], [], 'ORDER BY id', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('quiz', strval($row['id']))) {
                continue;
            }

            unset($row['q_start_text__text_parsed']);
            unset($row['q_start_text__source_user']);
            unset($row['q_end_text__text_parsed']);
            unset($row['q_end_text__source_user']);
            unset($row['q_end_text_fail__text_parsed']);
            unset($row['q_end_text_fail__source_user']);

            $start_text = $this->get_lang_string($db, $row['q_start_text']);
            $end_text = $this->get_lang_string($db, $row['q_end_text']);
            $end_text_fail = $this->get_lang_string($db, $row['q_end_text_fail']);

            $map = [
                'q_timeout' => $row['q_timeout'],
                'q_notes' => $row['q_notes'],
                'q_percentage' => $row['q_percentage'],
                'q_open_time' => $row['q_open_time'],
                'q_close_time' => $row['q_close_time'],
                'q_num_winners' => $row['q_num_winners'],
                'q_redo_time' => $row['q_redo_time'],
                'q_type' => $row['q_type'],
                'q_validated' => $row['q_validated'],
                'q_submitter' => $row['q_submitter'],
                'q_add_date' => $row['q_add_date'],
                'q_points_for_passing' => $row['q_points_for_passing'],
                'q_reveal_answers' => $row['q_reveal_answers'],
                'q_shuffle_questions' => $row['q_shuffle_questions'],
                'q_shuffle_answers' => $row['q_shuffle_answers'],
            ];
            $map += insert_lang('q_name', $this->get_lang_string($db, $row['q_name']), 2);
            $map += insert_lang_comcode('q_start_text', $start_text, 2);
            $map += insert_lang_comcode('q_end_text', $end_text, 2);
            $map += insert_lang_comcode('q_end_text_fail', $end_text_fail, 2);
            if (get_param_integer('keep_preserve_ids', 0) == 1) {
                $map['id'] = $row['id'];
            }
            $id_new = $GLOBALS['SITE_DB']->query_insert('quizzes', $map, true);

            import_id_remap_put('quiz', strval($row['id']), $id_new);
        }
        $this->_import_content_reviews($db, $table_prefix, 'quiz', 'quiz');
        $rows = $db->query_select('quiz_questions', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $i => $row) {
            if (import_check_if_imported('quiz_question', strval($row['id']))) {
                continue;
            }

            $quiz = import_id_remap_get('quiz', strval($row['q_quiz']), true);
            if ($quiz === null) {
                continue;
            }

            unset($row['q_question_text__text_parsed']);
            unset($row['q_question_text__source_user']);
            unset($row['q_question_extra_text__text_parsed']);
            unset($row['q_question_extra_text__source_user']);

            $map = [
                'q_order' => $row['q_order'],
                'q_type' => $row['q_type'],
                'q_quiz' => $quiz,
                'q_required' => $row['q_required'],
                'q_marked' => $row['q_marked'],
            ];
            $map += insert_lang_comcode('q_question_text', $this->get_lang_string($db, $row['q_question_text']), 2);
            $map += insert_lang_comcode('q_question_extra_text', $this->get_lang_string($db, $row['q_question_extra_text']), 2);
            $id_new = $GLOBALS['SITE_DB']->query_insert('quiz_questions', $map, true);

            import_id_remap_put('quiz_question', strval($row['id']), $id_new);
        }

        $rows = $db->query_select('quiz_question_answers', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $i => $row) {
            $question = import_id_remap_get('quiz_question', strval($row['q_question']), true);
            if ($question === null) {
                continue;
            }

            unset($row['q_answer_text__text_parsed']);
            unset($row['q_answer_text__source_user']);

            $map = [
                'q_order' => $row['q_order'],
                'q_question' => $question,
                'q_is_correct' => $row['q_is_correct'],
            ];
            $map += insert_lang_comcode('q_answer_text', $this->get_lang_string($db, $row['q_answer_text']), 2);
            $map += insert_lang('q_explanation', $this->get_lang_string($db, $row['q_explanation']), 2);
            $GLOBALS['SITE_DB']->query_insert('quiz_question_answers', $map);
        }

        $rows = $db->query_select('quiz_entries', ['*']);
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('quiz_entry', strval($row['id']))) {
                continue;
            }

            $quiz = import_id_remap_get('quiz', strval($row['q_quiz']), true);
            if ($quiz === null) {
                continue;
            }
            $member_id = $on_same_msn ? $row['q_member'] : import_id_remap_get('member', strval($row['q_member']), true);
            if ($member_id === null) {
                $member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $id_new = $GLOBALS['SITE_DB']->query_insert('quiz_entries', [
                'q_time' => $row['q_time'],
                'q_member' => $member_id,
                'q_quiz' => $quiz,
                'q_results' => $row['q_results'],
            ], true);

            import_id_remap_put('quiz_entry', strval($row['id']), $id_new);
        }

        $rows = $db->query_select('quiz_entry_answer', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $question = import_id_remap_get('quiz_question', strval($row['q_question']), true);
            if ($question === null) {
                continue;
            }
            $entry = import_id_remap_get('quiz_entry', strval($row['q_entry']));

            $GLOBALS['SITE_DB']->query_insert('quiz_entry_answer', ['q_entry' => $entry, 'q_question' => $question, 'q_answer' => $row['q_answer']]);
        }

        $rows = $db->query_select('quiz_winner', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $quiz = import_id_remap_get('quiz', strval($row['q_quiz']), true);
            if ($quiz === null) {
                continue;
            }
            $entry = import_id_remap_get('quiz_entry', strval($row['q_entry']), true);
            if ($entry === null) {
                continue;
            }

            $GLOBALS['SITE_DB']->query_insert('quiz_winner', ['q_quiz' => $quiz, 'q_entry' => $entry, 'q_winner_level' => $row['q_winner_level']]);
        }

        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'quiz', 'quiz');
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_ecommerce(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('ecom_transactions', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('transactions', strval($row['id']))) {
                continue;
            }

            $id_new = $GLOBALS['SITE_DB']->query_insert('ecom_transactions', $row, true);

            import_id_remap_put('transactions', strval($row['id']), $id_new);
        }

        $rows = $db->query_select('ecom_invoices', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $row['i_member_id'] = $on_same_msn ? $row['i_member_id'] : import_id_remap_get('member', strval($row['i_member_id']), true);
            if ($row['i_member_id'] === null) {
                continue; // Uh oh - someones deleted and they had invoices - lets hope they paid them ;)
            }

            if (get_param_integer('keep_preserve_ids', 0) == 0) {
                unset($row['id']);
            }

            $GLOBALS['SITE_DB']->query_insert('ecom_invoices', $row);
        }

        $rows = $db->query_select('f_usergroup_subs', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if (import_check_if_imported('usergroup_sub', strval($row['id']))) {
                    continue;
                }

                $group_id = $on_same_msn ? $row['s_group_id'] : import_id_remap_get('group', strval($row['s_group_id']), true);
                if ($group_id === null) {
                    continue;
                }

                $map = [
                    's_price' => $row['s_price'],
                    's_tax_code' => $row['s_tax_code'],
                    's_length' => $row['s_length'],
                    's_length_units' => $row['s_length_units'],
                    's_auto_recur' => $row['s_auto_recur'],
                    's_group_id' => $group_id,
                    's_enabled' => $row['s_enabled'],
                ];
                $map += insert_lang('s_title', $this->get_lang_string($db, $row['s_title']), 2, $GLOBALS['FORUM_DB']);
                $map += insert_lang('s_description', $this->get_lang_string($db, $row['s_description']), 2, $GLOBALS['FORUM_DB']);
                $map += insert_lang('s_mail_start', $this->get_lang_string($db, $row['s_mail_start']), 2, $GLOBALS['FORUM_DB']);
                $map += insert_lang('s_mail_end', $this->get_lang_string($db, $row['s_mail_end']), 2, $GLOBALS['FORUM_DB']);
                $map += insert_lang('s_mail_uhoh', $this->get_lang_string($db, $row['s_mail_uhoh']), 2, $GLOBALS['FORUM_DB']);
                $id_new = $GLOBALS['FORUM_DB']->query_insert('f_usergroup_subs', $map, true);

                $mails = $db->query_select('f_usergroup_sub_mails', ['*'], ['m_usergroup_sub_id' => $row['id']]);
                $this->_fix_comcode_ownership($mails);
                foreach ($mails as $mail) {
                    $map = [
                        'm_usergroup_sub_id' => $id_new,
                        'm_ref_point' => $mail['m_ref_point'],
                        'm_ref_point_offset' => $mail['m_ref_point_offset'],
                    ];
                    $map += insert_lang('m_subject', $this->get_lang_string($db, $mail['m_subject']), 2, $GLOBALS['FORUM_DB']);
                    $map += insert_lang('m_body', $this->get_lang_string($db, $mail['m_body']), 2, $GLOBALS['FORUM_DB']);
                    $GLOBALS['FORUM_DB']->query_insert('f_usergroup_sub_mails', $map);
                }

                import_id_remap_put('usergroup_sub', strval($row['id']), $id_new);
            }
        }

        $rows = $db->query_select('ecom_subscriptions', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $row['s_member_id'] = $on_same_msn ? $row['s_member_id'] : import_id_remap_get('member', strval($row['s_member_id']), true);
            if ($row['s_member_id'] === null) {
                continue; // Uh oh - someones deleted and they had invoices - lets hope they paid them ;)
            }

            if (substr($row['s_type_code'], 0, 9) == 'USERGROUP') {
                $remap_id = import_id_remap_get('usergroup_sub', substr($row['s_type_code'], 9), true);
                if ($remap_id === null) {
                    continue;
                }
                $row['s_type_code'] = 'USERGROUP' . strval($remap_id);
            }

            if (get_param_integer('keep_preserve_ids', 0) == 0) {
                unset($row['id']);
            }

            $GLOBALS['SITE_DB']->query_insert('ecom_subscriptions', $row);
        }

        $rows = $db->query_select('ecom_prods_prices', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $GLOBALS['SITE_DB']->query_delete('ecom_prods_prices', ['name' => $row['name']], '', 1);
            $GLOBALS['SITE_DB']->query_insert('ecom_prods_prices', $row);
        }

        $rows = $db->query_select('ecom_sales', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            $this->_fix_comcode_ownership($rows);
            $on_same_msn = ($this->on_same_msn($file_base));
            foreach ($rows as $row) {
                $member_id = $on_same_msn ? $row['member_id'] : import_id_remap_get('member', strval($row['member_id']), true);
                if ($member_id === null) {
                    continue;
                }

                unset($row['id']);

                $txn_id = import_id_remap_get('transactions', $row['txn_id']);

                $GLOBALS['SITE_DB']->query_insert('ecom_sales', ['date_and_time' => $row['date_and_time'], 'member_id' => $member_id, 'details' => $row['details'], 'details2' => $row['details2'], 'txn_id' => $txn_id]);
            }
        }

        $this->_import_ecom_prods_custom($db, $table_prefix);

        $this->_import_ecom_prods_permissions($db, $table_prefix);
    }

    /**
     * Imports custom products.
     *
     * @param  object $db The DB connection to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     */
    protected function _import_ecom_prods_custom(object $db, string $table_prefix)
    {
        $rows = $db->query_select('ecom_prods_custom', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            unset($row['id']);

            $row['c_description'] = $this->get_lang_string($db, $row['c_description']);

            $GLOBALS['SITE_DB']->query_insert('ecom_prods_custom', $row);
        }
    }

    /**
     * Imports product store permissions.
     *
     * @param  object $db The DB connection to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     */
    protected function _import_ecom_prods_permissions(object $db, string $table_prefix)
    {
        $rows = $db->query_select('ecom_prods_permissions', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            unset($row['id']);

            $row['p_description'] = $this->get_lang_string($db, $row['p_description']);

            $GLOBALS['SITE_DB']->query_insert('ecom_prods_permissions', $row);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_attachments(object $db, string $table_prefix, string $file_base)
    {
        $row_start = 0;
        $rows = [];
        do {
            $rows = $db->query_select('attachments', ['*'], 'ORDER BY id', 200, $row_start);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if (import_check_if_imported('attachment', strval($row['id']))) {
                    continue;
                }

                $row['a_member_id'] = -$row['a_member_id']; // This is resolved when importing members
                $row_copy = $row;
                if (get_param_integer('keep_preserve_ids', 0) == 0) {
                    unset($row_copy['id']);
                }
                $id_new = $GLOBALS['SITE_DB']->query_insert('attachments', $row_copy, true);

                import_id_remap_put('attachment', strval($row['id']), $id_new);
            }
            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_attachment_references(object $db, string $table_prefix, string $file_base)
    {
        $row_start = 0;
        $rows = [];
        do {
            $rows = $db->query_select('attachment_refs', ['*'], '', 200, $row_start);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                $import_type_fixed = $row['r_referer_type'];
                if ($import_type_fixed == 'cns_post') {
                    $import_type_fixed = 'post';
                }
                if ($import_type_fixed == 'cedi_post') {
                    $import_type_fixed = 'wiki_post';
                }
                if ($import_type_fixed == 'cedi_page') {
                    $import_type_fixed = 'wiki_page';
                }

                $id_new = import_id_remap_get($import_type_fixed, $row['r_referer_id'], true);
                if ($id_new === null) {
                    $id_new = $row['r_referer_id'];
                }
                $aid = import_id_remap_get('attachment', strval($row['a_id']), true);
                if ($aid !== null) {
                    $GLOBALS['SITE_DB']->query_insert('attachment_refs', ['r_referer_type' => $row['r_referer_type'], 'r_referer_id' => $id_new, 'a_id' => $aid], false, true);
                }
            }
            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_feedback(object $db, string $table_prefix, string $file_base)
    {
        $type_remap = ['downloads_category' => 'download_category', 'downloads_download' => 'download', 'downloads' => 'download'];

        $rows = $db->query_select('rating', ['*']);
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $remapped = $row['rating_for_type'];
            if (array_key_exists($remapped, $type_remap)) {
                $remapped = $type_remap[$remapped];
            }

            unset($row['id']);
            if (is_numeric($row['rating_for_id'])) {
                $id_new = import_id_remap_get($remapped, $row['rating_for_id'], true);
                if ($id_new !== null) {
                    $row['rating_for_id'] = strval($id_new);
                }
            }
            $row['rating_member'] = $on_same_msn ? $row['rating_member'] : import_id_remap_get('member', strval($row['rating_member']), true);
            if ($row['rating_member'] === null) {
                $row['rating_member'] = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $GLOBALS['SITE_DB']->query_insert('rating', $row);
        }

        $rows = $db->query_select('trackbacks', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $remapped = $row['trackback_for_type'];
            if (array_key_exists($remapped, $type_remap)) {
                $remapped = $type_remap[$remapped];
            }

            unset($row['id']);
            if (is_numeric($row['trackback_for_id'])) {
                $id_new = import_id_remap_get($remapped, $row['trackback_for_id'], true);
                if ($id_new !== null) {
                    $row['trackback_for_id'] = strval($id_new);
                }
            }
            $GLOBALS['SITE_DB']->query_insert('trackbacks', $row);
        }

        $rows = $db->query_select('seo_meta', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $remapped = $row['meta_for_type'];
            if (array_key_exists($remapped, $type_remap)) {
                $remapped = $type_remap[$remapped];
            }

            unset($row['id']);

            if (is_numeric($row['meta_for_id'])) {
                $id_new = import_id_remap_get($remapped, $row['meta_for_id'], true);
                if ($id_new !== null) {
                    $row['meta_for_id'] = strval($id_new);
                }
            }

            $row = insert_lang('meta_description', $this->get_lang_string($db, $row['meta_description']), 2) + $row;
            $GLOBALS['SITE_DB']->query_insert('seo_meta', $row);
        }

        $rows = $db->query_select('seo_meta_keywords', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $remapped = $row['meta_for_type'];
            if (array_key_exists($remapped, $type_remap)) {
                $remapped = $type_remap[$remapped];
            }

            unset($row['id']);

            if (is_numeric($row['meta_for_id'])) {
                $id_new = import_id_remap_get($remapped, $row['meta_for_id'], true);
                if ($id_new !== null) {
                    $row['meta_for_id'] = strval($id_new);
                }
            }

            $row = insert_lang('meta_keyword', $this->get_lang_string($db, $row['meta_keyword']), 2) + $row;
            $GLOBALS['SITE_DB']->query_insert('seo_meta_keywords', $row);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_authors(object $db, string $table_prefix, string $file_base)
    {
        require_code('authors');

        $rows = $db->query_select('authors', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('authors', 'author', ['author' => $row['author']]);
            if ($test === null) {
                add_author($row['author'], $row['url'], $row['member_id'], $this->get_lang_string($db, $row['the_description']), $this->get_lang_string($db, $row['skills']));
            }
        }
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'author', null);
        $this->_import_content_reviews($db, $table_prefix, 'author', null);
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_banners(object $db, string $table_prefix, string $file_base)
    {
        require_code('banners2');

        $rows = $db->query_select('banner_types', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('banner_types', 'id', ['id' => $row['id']]);
            if ($test === null) {
                add_banner_type($row['id'], $row['t_is_textual'], $row['t_image_width'], $row['t_image_height'], $row['t_max_file_size'], $row['t_comcode_inline']);
            }
        }
        $this->_import_content_reviews($db, $table_prefix, 'banner_type', null);

        $rows = $db->query_select('banners', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('banners', 'name', ['name' => $row['name']]);
            if ($test === null) {
                $submitter = $on_same_msn ? $row['submitter'] : import_id_remap_get('member', strval($row['submitter']), true);
                if ($submitter === null) {
                    $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
                }
                add_banner(
                    $row['name'],
                    $row['img_url'],
                    $row['title_text'],
                    $this->get_lang_string($db, $row['caption']),
                    $row['direct_code'],
                    $row['campaign_remaining'],
                    $row['site_url'],
                    $row['display_likelihood'],
                    $row['notes'],
                    $row['the_type'],
                    $row['expiry_date'],
                    $submitter,
                    $row['validated'],
                    $row['b_type'],
                    collapse_1d_complexity('b_type', $db->query_select('banners_types', ['b_type'], ['name' => $row['name']])),
                    collapse_1d_complexity('region', $db->query_select('content_regions', ['region'], ['content_type' => 'banner', 'content_id' => $row['name']])),
                    $row['add_date'],
                    $row['hits_from'],
                    $row['hits_to'],
                    $row['views_from'],
                    $row['views_to'],
                    $row['edit_date']
                );
            }
        }
        $this->_import_content_reviews($db, $table_prefix, 'banner', null);

        $rows = $db->query_select('banner_clicks', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $c_member_id = $on_same_msn ? $row['c_member_id'] : import_id_remap_get('member', $row['c_member_id'], true);
            if ($c_member_id === null) {
                $c_member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $GLOBALS['SITE_DB']->query_insert('banner_clicks', [
                'c_date_and_time' => $row['c_date_and_time'],
                'c_member_id' => $c_member_id,
                'c_ip_address' => $row['c_ip_address'],
                'c_source' => $row['c_source'],
                'c_banner_id' => $row['c_banner_id'],
            ]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_points_ledger(object $db, string $table_prefix, string $file_base)
    {
        require_code('points2');

        $max = 300;
        $start = 0;
        do {
            $rows = $db->query_select('points_ledger', ['*'], [], '', $max, $start, true);
            if ($rows === null) {
                $rows = [];
            }
            $on_same_msn = ($this->on_same_msn($file_base));
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                unset($row['reason__text_parsed']);
                unset($row['reason__source_user']);

                $viewer_member = $on_same_msn ? $row['sender_id'] : import_id_remap_get('member', strval($row['sender_id']), true);
                $member_id = $on_same_msn ? $row['recipient_id'] : import_id_remap_get('member', strval($row['recipient_id']), true);
                if ($viewer_member === null) {
                    $viewer_member = $GLOBALS['FORUM_DRIVER']->get_guest_id();
                }
                if ($member_id === null) {
                    $member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
                }

                $map = [
                    'date_and_time' => $row['date_and_time'],
                    'amount_gift_points' => $row['amount_gift_points'],
                    'amount_points' => $row['amount_points'],
                    'sender_id' => $viewer_member,
                    'recipient_id' => $member_id,
                    'anonymous' => $row['anonymous'],
                    'linked_to' => $row['linked_to'],

                    't_type' => $row['t_type'],
                    't_subtype' => $row['t_subtype'],
                    't_type_id' => '', // FUDGE: Currently blanking theis because it may refer to an improperly mapped content ID

                    'status' => $row['status']
                ];
                $map += insert_lang_comcode('reason', $this->get_lang_string($db, $row['reason']), 4);
                $id_new = $GLOBALS['SITE_DB']->query_insert('points_ledger', $map, true);

                import_id_remap_put('points_ledger', strval($row['id']), $id_new);
            }

            // Update linked_to to new IDs
            foreach ($rows as $row) {
                $id_new = import_id_remap_get('points_ledger', strval($row['id']), true);
                if ($id_new !== null) {
                    $GLOBALS['SITE_DB']->query_update('points_ledger', ['linked_to' => $id_new], ['linked_to' => $row['id']]);
                }
            }

            $start += $max;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_escrow(object $db, string $table_prefix, string $file_base)
    {
        // Escrows
        $max = 300;
        $start = 0;
        do {
            $rows = $db->query_select('escrow', ['*'], [], '', $max, $start, true);
            if ($rows === null) {
                $rows = [];
            }
            $on_same_msn = ($this->on_same_msn($file_base));
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                $viewer_member = $on_same_msn ? $row['sender_id'] : import_id_remap_get('member', strval($row['sender_id']), true);
                $member_id = $on_same_msn ? $row['recipient_id'] : import_id_remap_get('member', strval($row['recipient_id']), true);
                if ($viewer_member === null) {
                    $viewer_member = $GLOBALS['FORUM_DRIVER']->get_guest_id();
                }
                if ($member_id === null) {
                    $member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
                }

                $reason = get_translated_text($row['reason']);
                $agreement = get_translated_text($row['agreement']);

                $ledger_id_new = import_id_remap_get('points_ledger', strval($row['original_points_ledger_id']));
                $map = [
                    'date_and_time' => $row['date_and_time'],
                    'amount' => $row['amount'],
                    'original_points_ledger_id' => $ledger_id_new,
                    'sender_id' => $viewer_member,
                    'recipient_id' => $member_id,
                    'expiration' => $row['expiration'],
                    'sender_status' => $row['sender_status'],
                    'recipient_status' => $row['recipient_status'],
                    'status' => $row['status'],
                ];
                $map += insert_lang_comcode('reason', $reason, 4);
                $map += insert_lang_comcode('agreement', $agreement, 5);
                $id_new = $GLOBALS['SITE_DB']->query_insert('escrow', $map, true);

                import_id_remap_put('escrow', strval($row['id']), $id_new);
            }

            $start += $max;
        } while (!empty($rows));

        // Logs
        $max = 300;
        $start = 0;
        do {
            $rows = $db->query_select('escrow_logs', ['*'], [], '', $max, $start, true);
            if ($rows === null) {
                $rows = [];
            }
            $on_same_msn = ($this->on_same_msn($file_base));
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if ($row['member_id'] !== null) {
                    $member_id = $on_same_msn ? $row['member_id'] : import_id_remap_get('member', strval($row['member_id']), true);
                    if ($member_id === null) {
                        $member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
                    }
                } else {
                    $member_id = null;
                }

                $information = get_translated_text($row['information']);
                $escrow_id_new = import_id_remap_get('escrow', strval($row['escrow_id']));
                $map = [
                    'escrow_id' => $escrow_id_new,
                    'date_and_time' => $row['date_and_time'],
                    'log_type' => $row['log_type'],
                    'member_id' => $member_id,
                ];
                $map += insert_lang_comcode('information', $information, 5);
                $id_new = $GLOBALS['SITE_DB']->query_insert('escrow_logs', $map, true);
                import_id_remap_put('escrow_logs', strval($row['id']), $id_new);
            }

            $start += $max;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_daily_visits(object $db, string $table_prefix, string $file_base)
    {
        $on_same_msn = ($this->on_same_msn($file_base));

        $max = 300;
        $start = 0;
        do {
            $rows = $db->query_select('daily_visits', ['*'], [], '', $max, $start, true);
            if ($rows === null) {
                $rows = [];
            }
            foreach ($rows as $row) {
                $member_id = $on_same_msn ? $row['d_member'] : import_id_remap_get('member', strval($row['d_member']), true);
                if ($member_id === null) {
                    continue;
                }
                $GLOBALS['SITE_DB']->query_delete('daily_visits', ['d_member' => $row['d_member'], 'd_date_and_time' => $row['d_date_and_time']], '', 1);
                $GLOBALS['SITE_DB']->query_insert('daily_visits', ['d_member' => $row['d_member'], 'd_date_and_time' => $row['d_date_and_time']]);
            }

            $start += $max;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_config(object $db, string $table_prefix, string $file_base)
    {
        $remap = [
        ];

        $rows = $db->query_select('config', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $name = $row['c_name'];
            if (isset($remap[$name])) {
                $name = $remap[$name];
            }

            $value = $row['c_value'];

            if (($value !== null) && ($row['c_set'] == 1)) {
                if ($row['c_needs_dereference'] == 1) {
                    $value = $this->get_lang_string($db, $row['c_value_trans']);
                }

                $test = get_option($name, true);
                if ($test !== null) {
                    set_option($name, $value);
                }
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_polls(object $db, string $table_prefix, string $file_base)
    {
        require_code('polls2');

        $rows = $db->query_select('poll', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('poll', strval($row['id']))) {
                continue;
            }

            $submitter = $on_same_msn ? $row['submitter'] : import_id_remap_get('member', strval($row['submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $id_new = add_poll(
                $this->get_lang_string($db, $row['question']),
                $this->get_lang_string($db, $row['option1']),
                $this->get_lang_string($db, $row['option2']),
                $this->get_lang_string($db, $row['option3']),
                $this->get_lang_string($db, $row['option4']),
                $this->get_lang_string($db, $row['option5']),
                $this->get_lang_string($db, $row['option6']),
                $this->get_lang_string($db, $row['option7']),
                $this->get_lang_string($db, $row['option8']),
                $this->get_lang_string($db, $row['option9']),
                $this->get_lang_string($db, $row['option10']),
                $row['num_options'],
                $row['is_current'],
                $row['allow_rating'],
                $row['allow_comments'],
                $row['allow_trackbacks'],
                $row['notes'],
                $row['add_time'],
                $submitter,
                $row['date_and_time'],
                $row['votes1'],
                $row['votes2'],
                $row['votes3'],
                $row['votes4'],
                $row['votes5'],
                $row['votes6'],
                $row['votes7'],
                $row['votes8'],
                $row['votes9'],
                $row['votes10'],
                $row['poll_views'],
                $row['edit_date']
            );

            // Who has voted in the poll?
            $votes = $db->query_select('poll_votes', ['*'], ['v_poll_id' => $row['id']], '', null, 0, true);
            if ($votes === null) { // Old Composr-style
                $voters = explode('-', $row['ip']);
                $votes = [];
                foreach ($voters as $voter) {
                    $votes[] = [
                        'v_poll_id' => $row['id'],
                        'v_voter_id' => is_numeric($voter) ? intval($voter) : null,
                        'v_voter_ip' => is_numeric($voter) ? '' : $voter,
                        'v_vote_for' => null,
                    ];
                }
            }
            foreach ($votes as $vote) {
                $GLOBALS['SITE_DB']->query_insert('poll_votes', [
                    'v_poll_id' => $id_new,
                    'v_voter_id' => $vote['v_voter_id'],
                    'v_voter_ip' => $vote['v_voter_ip'],
                    'v_vote_for' => $vote['v_vote_for'],
                    'v_vote_time' => $vote['v_vote_time'],
                ]);
            }

            import_id_remap_put('poll', strval($row['id']), $id_new);
        }
        $this->_import_review_supplement($db, $table_prefix, 'polls', 'poll');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'poll', 'poll');
        $this->_import_content_reviews($db, $table_prefix, 'poll', 'poll');
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_news_and_categories(object $db, string $table_prefix, string $file_base)
    {
        require_code('news2');

        $rows = $db->query_select('news_categories', ['*'], [], 'ORDER BY id', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('news_category', strval($row['id']))) {
                continue;
            }

            $owner = $on_same_msn ? $row['nc_owner'] : import_id_remap_get('member', strval($row['nc_owner']), true);

            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];
            $id_new = add_news_category($this->get_lang_string($db, $row['nc_title']), $row['nc_img'], $row['notes'], $owner, $id);

            import_id_remap_put('news_category', strval($row['id']), $id_new);
        }
        $this->_import_content_reviews($db, $table_prefix, 'news_category', 'news_category');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'news_category', 'news_category');

        $rows = $db->query_select('news', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('news', strval($row['id']))) {
                continue;
            }

            $news_category = [];
            $rows2 = $db->query_select('news_category_entries', ['news_entry_category'], ['news_entry' => $row['id']]);
            foreach ($rows2 as $row2) {
                $next = import_id_remap_get('news_category', strval($row2['news_entry_category']), true);
                if ($next !== null) {
                    $news_category[] = $next;
                }
            }
            $submitter = $on_same_msn ? $row['submitter'] : import_id_remap_get('member', strval($row['submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];
            $main_news_category = $row['news_category'];
            $main_news_category = import_id_remap_get('news_category', strval($main_news_category), true);
            if ($main_news_category === null) {
                $main_news_category = db_get_first_id();
            }

            $regions = collapse_1d_complexity('region', $db->query_select('content_regions', ['region'], ['content_type' => 'news', 'content_id' => strval($row['id'])]));

            $id_new = add_news($this->get_lang_string($db, $row['title']), $this->get_lang_string($db, $row['news']), $row['author'], $row['validated'], $row['allow_rating'], $row['allow_comments'], $row['allow_trackbacks'], $row['notes'], $this->get_lang_string($db, $row['news_article']), $main_news_category, $news_category, $row['date_and_time'], $submitter, $row['news_views'], $row['edit_date'], $id, $row['news_image'], '', '', $regions);

            $this->_import_content_privacy($db, 'news', strval($row['id']), strval($id_new));

            import_id_remap_put('news', strval($row['id']), $id_new);
        }
        $this->_import_review_supplement($db, $table_prefix, 'news', 'news');
        $this->_import_content_reviews($db, $table_prefix, 'news', 'news');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'news', 'news');

        $rows = $db->query_select('news_rss_cloud', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                unset($row['id']);
                $GLOBALS['SITE_DB']->query_insert('news_rss_cloud', $row);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_newsletter_subscriptions(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('newsletters', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if (import_check_if_imported('newsletter', strval($row['id']))) {
                    continue;
                }

                $map = [];
                $map += insert_lang('title', $this->get_lang_string($db, $row['title']), 2);
                $map += insert_lang('the_description', $this->get_lang_string($db, $row['the_description']), 2);
                $id_new = $GLOBALS['SITE_DB']->query_insert('newsletters', $map, true);

                import_id_remap_put('newsletter', strval($row['id']), $id_new);
            }

            $old_format = false;
        } else {
            $old_format = true;
        }

        $rowsn = $db->query_select('newsletter_subscribers', ['*'], [], '', null, 0, true);
        if ($rowsn === null) {
            return;
        }
        $this->_fix_comcode_ownership($rowsn);
        $rows = [];
        foreach ($rowsn as $row) {
            $GLOBALS['SITE_DB']->query_delete('newsletter_subscribers', ['email' => $row['email'], 'language' => $row['language']], '', 1);
            $GLOBALS['SITE_DB']->query_insert('newsletter_subscribers', ['n_forename' => $row['n_forename'], 'n_surname' => $row['n_surname'], 'join_time' => $row['join_time'], 'email' => $row['email'], 'code_confirm' => $row['code_confirm'], 'pass_salt' => $row['pass_salt'], 'the_password' => $row['the_password'], 'language' => $row['language']]);
            if ($old_format) {
                $rows[] = ['newsletter_id' => db_get_first_id(), 'email' => $row['email'], 'the_level' => $row['the_level']];
            }
        }
        if (!$old_format) {
            $rows = $db->query_select('newsletter_subscribe', ['*']);
        }
        foreach ($rows as $row) {
            $newsletter_id = $row['newsletter_id'];
            if (!$old_format) {
                $newsletter_id = import_id_remap_get('newsletter', strval($newsletter_id), true);
            }
            if ($newsletter_id === null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_insert('newsletter_subscribe', ['newsletter_id' => $newsletter_id, 'email' => $row['email'], 'the_level' => $row['the_level']]);
        }

        $rows = $db->query_select('newsletter_archive', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $GLOBALS['SITE_DB']->query_insert('newsletter_archive', ['date_and_time' => $row['date_and_time'], 'subject' => $row['subject'], 'newsletter' => $row['newsletter'], 'language' => $row['language'], 'importance_level' => $row['importance_level']]);
        }

        $rows = $db->query_select('newsletter_periodic', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                unset($row['id']);
                $GLOBALS['SITE_DB']->query_insert('newsletter_periodic', $row);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_downloads_and_categories(object $db, string $table_prefix, string $file_base)
    {
        require_code('downloads2');

        $rows = $db->query_select('download_categories', ['*'], [], 'ORDER BY id', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('download_category', strval($row['id']))) {
                continue;
            }

            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];
            $id = add_download_category($this->get_lang_string($db, $row['category']), -$row['parent_id'], $this->get_lang_string($db, $row['the_description']), $row['notes'], $row['rep_image'], $id);

            import_id_remap_put('download_category', strval($row['id']), $id);
        }
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'download_category', 'download_category');
        $this->_import_content_reviews($db, $table_prefix, 'download_category', 'download_category');
        foreach ($rows as $row) {
            $id = import_id_remap_get('download_category', strval($row['id']));
            $parent_id = import_id_remap_get('download_category', strval($row['parent_id']), true);
            if ($parent_id === null) {
                $parent_id = db_get_first_id();
            }

            $GLOBALS['SITE_DB']->query_update('download_categories', ['parent_id' => $parent_id], ['id' => $id], '', 1);
        }

        $rows = $db->query_select('download_downloads', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('download', strval($row['id']))) {
                continue;
            }
            $submitter = $on_same_msn ? $row['submitter'] : import_id_remap_get('member', strval($row['submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $category_id = import_id_remap_get('download_category', strval($row['category_id']), true);
            if ($category_id === null) {
                $category_id = db_get_first_id();
            }
            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];
            $id_new = add_download($category_id, $this->get_lang_string($db, $row['name']), $row['url'], $this->get_lang_string($db, $row['the_description']), $row['author'], $this->get_lang_string($db, $row['additional_details']), null, $row['validated'], $row['allow_rating'], $row['allow_comments'], $row['allow_trackbacks'], $row['notes'], $row['original_filename'], $row['file_size'], $row['download_cost'], $row['download_submitter_gets_points'], $row['download_licence'], $row['add_date'], $row['num_downloads'], $row['download_views'], $submitter, $row['edit_date'], $id, '', '', $row['default_pic'], $row['url_redirect']);

            $this->_import_content_privacy($db, 'download', strval($row['id']), strval($id_new));

            import_id_remap_put('download', strval($row['id']), $id_new);
        }
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'download', 'download');
        $this->_import_review_supplement($db, $table_prefix, 'downloads', 'download');
        $this->_import_content_reviews($db, $table_prefix, 'download', 'download');
        foreach ($rows as $row) {
            if ($row['out_mode_id'] !== null) {
                $out_mode_id = import_id_remap_get('download', strval($row['out_mode_id']), true);
                if ($out_mode_id === null) {
                    $out_mode_id = null;
                }
                $id_new = import_id_remap_get('download', strval($row['id']), true);
                if ($id_new === null) {
                    continue;
                }
                $GLOBALS['SITE_DB']->query_update('download_downloads', ['out_mode_id' => $out_mode_id], ['id' => $id_new], '', 1);
            }
        }

        $rows = $db->query_select('download_licences', ['*'], [], 'ORDER BY id', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $GLOBALS['SITE_DB']->query_insert('download_licences', ['l_title' => $row['l_title'], 'l_text' => $row['l_text']]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_images_and_galleries(object $db, string $table_prefix, string $file_base)
    {
        require_code('galleries2');

        $rows = $db->query_select('galleries', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('galleries', 'name', ['name' => $row['name']]);
            if ($test === null) {
                add_gallery($row['name'], $this->get_lang_string($db, $row['fullname']), $this->get_lang_string($db, $row['the_description']), $row['notes'], $row['parent_id'], $row['accept_images'], $row['accept_videos'], $row['is_member_synched'], $row['layout_mode'], $row['rep_image'], $row['watermark_top_left'], $row['watermark_top_right'], $row['watermark_bottom_left'], $row['watermark_bottom_right'], $row['gallery_sort'], $row['media_sort'], $row['allow_rating'], $row['allow_comments'], false, $row['add_date'], null, '', '', false);
            }
        }
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'gallery', null);
        $this->_import_review_supplement($db, $table_prefix, 'galleries', null);
        $this->_import_content_reviews($db, $table_prefix, 'gallery', null);

        $rows = $db->query_select('images', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('image', strval($row['id']))) {
                continue;
            }

            $submitter = $on_same_msn ? $row['submitter'] : import_id_remap_get('member', strval($row['submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];

            $regions = collapse_1d_complexity('region', $db->query_select('content_regions', ['region'], ['content_type' => 'image', 'content_id' => strval($row['id'])]));

            $title = $this->get_lang_string($db, $row['title']);
            $id_new = add_image($title, $row['cat'], $this->get_lang_string($db, $row['the_description']), $row['url'], $row['validated'], $row['allow_rating'], $row['allow_comments'], $row['allow_trackbacks'], $row['notes'], $submitter, $row['add_date'], $row['edit_date'], $row['image_views'], $id, '', '', $regions);

            $this->_import_content_privacy($db, 'image', strval($row['id']), strval($id_new));

            import_id_remap_put('image', strval($row['id']), $id_new);
        }
        $this->_import_review_supplement($db, $table_prefix, 'images', 'image');
        $this->_import_content_reviews($db, $table_prefix, 'image', 'image');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'image', null);

        $rows = $db->query_select('videos', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('video', strval($row['id']))) {
                continue;
            }

            $submitter = $on_same_msn ? $row['submitter'] : import_id_remap_get('member', strval($row['submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];

            $regions = collapse_1d_complexity('region', $db->query_select('content_regions', ['region'], ['content_type' => 'video', 'content_id' => strval($row['id'])]));

            $title = $this->get_lang_string($db, $row['title']);
            $id_new = add_video($title, $row['cat'], $this->get_lang_string($db, $row['the_description']), $row['url'], $row['thumb_url'], $row['validated'], $row['allow_rating'], $row['allow_comments'], $row['allow_trackbacks'], $row['notes'], $row['video_length'], $row['video_width'], $row['video_height'], $row['closed_captions_url'], $submitter, $row['add_date'], $row['edit_date'], $row['video_views'], $id, '', '', $regions);

            $this->_import_content_privacy($db, 'video', strval($row['id']), strval($id_new));

            import_id_remap_put('video', strval($row['id']), $id_new);
        }
        $this->_import_review_supplement($db, $table_prefix, 'videos', 'video');
        $this->_import_content_reviews($db, $table_prefix, 'video', 'video');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'video', null);
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_wiki(object $db, string $table_prefix, string $file_base)
    {
        if (!import_check_if_imported('wiki_page', strval(db_get_first_id()))) {
            import_id_remap_put('wiki_page', strval(db_get_first_id()), db_get_first_id());
        }

        $rows_pages = $db->query_select('wiki_pages', ['*'], [], '', null, 0, true);
        if ($rows_pages === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows_pages);
        $titlemap = [];
        foreach ($rows_pages as $row) {
            $title = $this->get_lang_string($db, $row['title']);

            if (import_check_if_imported('wiki_page', strval($row['id']))) {
                $id = import_id_remap_get('wiki_page', strval($row['id']));
                $titlemap[$id] = $title;
                continue;
            }

            $on_same_msn = ($this->on_same_msn($file_base));
            $submitter = $on_same_msn ? $row['submitter'] : import_id_remap_get('member', strval($row['submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $titlemap[$id] = $title;
            $map = [
                'edit_date' => $row['edit_date'],
                'submitter' => $submitter,
                'show_posts' => $row['show_posts'],
                'wiki_views' => $row['wiki_views'],
                'notes' => $row['notes'],
                'add_date' => $row['add_date'],
            ];
            $map += insert_lang('title', $title, 2);
            $map += insert_lang_comcode('the_description', $this->get_lang_string($db, $row['the_description']), 2);
            $id = $GLOBALS['SITE_DB']->query_insert('wiki_pages', $map, true);

            $titlemap[$id] = $title;

            import_id_remap_put('wiki_page', strval($row['id']), $id);
        }
        $this->_import_content_reviews($db, $table_prefix, 'wiki_page', 'wiki_page');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'wiki_page', 'wiki_page');

        $rows = $db->query_select('wiki_posts', ['*']);
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('wiki_post', strval($row['id']))) {
                continue;
            }

            unset($row['the_message__text_parsed']);
            unset($row['the_message__source_user']);

            $page_id = import_id_remap_get('wiki_page', strval($row['page_id']), true);
            if ($page_id === null) {
                $page_id = db_get_first_id();
            }

            $member_id = $on_same_msn ? $row['member_id'] : import_id_remap_get('member', strval($row['member_id']), true);
            if ($member_id === null) {
                $member_id = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $map = [
                'wiki_views' => $row['wiki_views'],
                'validated' => $row['validated'],
                'member_id' => $member_id,
                'date_and_time' => $row['date_and_time'],
                'page_id' => $page_id,
                'edit_date' => $row['edit_date'],
            ];
            $map += insert_lang_comcode('the_message', $this->get_lang_string($db, $row['the_message']), 2);
            $id_new = $GLOBALS['SITE_DB']->query_insert('wiki_posts', $map, true);

            import_id_remap_put('wiki_post', strval($row['id']), $id_new);
        }
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'wiki_post', 'wiki_post');

        if (addon_installed('actionlog')) {
            $rows = $db->query_select('revisions', ['*'], ['r_resource_type' => 'wiki_page']);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                unset($row['id']);

                $actionlog_id = import_id_remap_get('wiki_page', strval($row['r_actionlog_id']), true);
                if ($actionlog_id === null) {
                    continue;
                }
                $row['r_actionlog_id'] = $actionlog_id;

                $category_id = import_id_remap_get('wiki_page', strval($row['r_category_id']), true);
                if ($category_id === null) {
                    continue;
                }
                $row['r_category_id'] = $category_id;

                if (strpos($row['log_action'], 'PAGE') !== false) {
                    $row['r_resource_id'] = import_id_remap_get('wiki_page', $row['r_resource_id'], true);
                    if ($row['r_resource_id'] === null) {
                        continue;
                    }
                } else {
                    $row['r_resource_id'] = import_id_remap_get('wiki_post', $row['r_resource_id'], true);
                    if ($row['r_resource_id'] === null) {
                        continue;
                    }
                }

                $row['r_original_content_owner'] = $on_same_msn ? $row['r_original_content_owner'] : import_id_remap_get('member', strval($row['r_original_content_owner']), true);
                if ($row['r_original_content_owner'] === null) {
                    $row['r_original_content_owner'] = $GLOBALS['FORUM_DRIVER']->get_guest_id();
                }

                $GLOBALS['SITE_DB']->query_insert('revisions', $row);
            }
        }

        $rows = $db->query_select('wiki_children', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $child_id = import_id_remap_get('wiki_page', strval($row['child_id']), true);
            $parent_id = import_id_remap_get('wiki_page', strval($row['parent_id']), true);

            if ($child_id === null) {
                continue;
            }
            if ($parent_id === null) {
                continue;
            }

            if (array_key_exists($child_id, $titlemap)) {
                $title = $titlemap[$child_id];
            } elseif (array_key_exists($child_id, $rows_pages)) {
                $title = $this->get_lang_string($db, $rows_pages[$child_id]['title']);
            } else {
                continue;
            }

            $GLOBALS['SITE_DB']->query_insert('wiki_children', ['parent_id' => $parent_id, 'child_id' => $child_id, 'the_order' => $row['the_order'], 'title' => $titlemap[$child_id]]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_custom_comcode(object $db, string $table_prefix, string $file_base)
    {
        require_code('custom_comcode');

        $rows = $db->query_select('custom_comcode', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('custom_comcode', 'tag_tag', ['tag_tag' => $row['tag_tag']]);
            if ($test !== null) {
                continue;
            }

            $tag = $row['tag_tag'];
            $title = $this->get_lang_string($db, $row['tag_title']);
            $description = $this->get_lang_string($db, $row['tag_description']);
            $replace = $row['tag_replace'];
            $example = $row['tag_example'];
            $parameters = $row['tag_parameters'];
            $enabled = $row['tag_enabled'];
            $dangerous_tag = $row['tag_dangerous_tag'];
            $block_tag = $row['tag_block_tag'];
            $textual_tag = $row['tag_textual_tag'];

            add_custom_comcode_tag($tag, $title, $description, $replace, $example, $parameters, $enabled, $dangerous_tag, $block_tag, $textual_tag);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_comcode_pages(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('comcode_pages', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('comcode_page', $row['the_zone'] . ':' . $row['the_page'])) {
                continue;
            }

            $p_submitter = import_id_remap_get('member', strval($row['p_submitter']), true);
            if ($p_submitter === null) {
                require_code('users_active_actions');
                $p_submitter = get_first_admin_user();
            }

            $the_zone = $row['the_zone'];
            $the_page = $row['the_page'];
            $p_parent_page = $row['p_parent_page'];
            $p_validated = $row['p_validated'];
            $p_edit_date = $row['p_edit_date'];
            $p_add_date = $row['p_add_date'];
            $p_show_as_edit = $row['p_show_as_edit'];

            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('comcode_pages', 'the_page', [
                'the_zone' => $the_zone,
                'the_page' => $the_page,
            ]);
            if ($test !== null) {
                $the_page .= '_duplicate_' . substr(md5(uniqid('', true)), 0, 5);
            }

            $langs = find_all_langs();
            $found_one = false;
            foreach (array_keys($langs) as $lang) {
                $file_path_from = $file_base . (($the_zone == '') ? '' : '/') . $the_zone . '/pages/comcode_custom/' . $lang . '/' . $row['the_page'] . '.txt';
                $file_path_to = get_file_base() . (($the_zone == '') ? '' : '/') . $the_zone . '/pages/comcode_custom/' . $lang . '/' . $row['the_page'] . '.txt';
                if (is_file($file_path_from)) {
                    $found_one = true;

                    $comcode = cms_file_get_contents_safe($file_path_from, FILE_READ_LOCK | FILE_READ_BOM);
                    $comcode_new = $this->update_comcode($comcode, $the_zone . ':' . $the_page);

                    cms_file_put_contents_safe($file_path_to, $comcode_new, FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE | FILE_WRITE_BOM);
                }
            }

            if (!$found_one) {
                continue;
            }

            $GLOBALS['SITE_DB']->query_insert('comcode_pages', [
                'the_zone' => $the_zone,
                'the_page' => $the_page,
                'p_parent_page' => $row['p_parent_page'],
                'p_validated' => $row['p_validated'],
                'p_edit_date' => $row['p_edit_date'],
                'p_add_date' => $row['p_add_date'],
                'p_submitter' => $p_submitter,
                'p_show_as_edit' => $row['p_show_as_edit'],
                'p_include_on_sitemap' => $row['p_include_on_sitemap'],
                'p_order' => $row['p_order'],
            ]);

            import_id_remap_put('comcode_page', $row['the_zone'] . ':' . $row['the_page'], 1);
        }
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'comcode_page', null);
        $this->_import_content_reviews($db, $table_prefix, 'comcode_page', null);
    }

    /**
     * Import custom tasks.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_staff_checklist_cus_tasks(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('staff_checklist_cus_tasks', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $GLOBALS['SITE_DB']->query_insert('staff_checklist_cus_tasks', [
                'task_title' => $row['task_title'],
                'add_date' => $row['add_date'],
                'recur_interval' => $row['recur_interval'],
                'recur_every' => $row['recur_every'],
                'task_is_done' => $row['task_is_done'],
            ]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_wordfilter(object $db, string $table_prefix, string $file_base)
    {
        require_code('wordfilter');

        $rows = $db->query_select('wordfilter', ['word'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            add_wordfilter_word($row['word'], $row['w_replacement'], $row['w_substr']);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_calendar(object $db, string $table_prefix, string $file_base)
    {
        require_code('calendar2');

        $rows = $db->query_select('calendar_types', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('event_type', strval($row['id']))) {
                continue;
            }

            if ($row['id'] == db_get_first_id()) {
                import_id_remap_put('event_type', strval($row['id']), db_get_first_id());
                continue;
            }

            $id_new = add_event_type($this->get_lang_string($db, $row['t_title']), $row['t_logo'], $row['t_external_feed']);

            import_id_remap_put('event_type', strval($row['id']), $id_new);
        }
        $this->_import_content_reviews($db, $table_prefix, 'calendar_type', 'event_type');

        $rows = $db->query_select('calendar_interests', ['*'], [], '', null, 0, true);
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $member_id = $on_same_msn ? $row['i_member_id'] : import_id_remap_get('member', strval($row['i_member_id']), true);
            if ($member_id === null) {
                continue;
            }
            $type = import_id_remap_get('event_type', strval($row['t_type']), true);
            if ($type === null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_delete('calendar_interests', ['i_member_id' => $member_id, 't_type' => $type], '', 1);
            $GLOBALS['SITE_DB']->query_insert('calendar_interests', ['i_member_id' => $member_id, 't_type' => $type]);
        }

        $event_rows = $db->query_select('calendar_events', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($event_rows);
        foreach ($event_rows as $row) {
            if (import_check_if_imported('event', strval($row['id']))) {
                continue;
            }

            $submitter = $on_same_msn ? $row['e_submitter'] : import_id_remap_get('member', strval($row['e_submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $member_calendar = $on_same_msn ? $row['e_member_calendar'] : import_id_remap_get('member', strval($row['e_member_calendar']), true);
            if ($member_calendar === null) {
                $member_calendar = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $type = import_id_remap_get('event_type', strval($row['e_type']), true);
            if ($type === null) {
                continue;
            }

            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];

            $regions = collapse_1d_complexity('region', $db->query_select('content_regions', ['region'], ['content_type' => 'event', 'content_id' => strval($row['id'])]));

            $id_new = add_calendar_event($type, $row['e_recurrence'], $row['e_recurrences'], $row['e_seg_recurrences'], $this->get_lang_string($db, $row['e_title']), $this->get_lang_string($db, $row['e_content']), $row['e_priority'], $row['e_start_year'], $row['e_start_month'], $row['e_start_day'], $row['e_start_monthly_spec_type'], $row['e_start_hour'], $row['e_start_minute'], $row['e_end_year'], $row['e_end_month'], $row['e_end_day'], $row['e_end_monthly_spec_type'], $row['e_end_hour'], $row['e_end_minute'], $row['e_timezone'], $row['e_do_timezone_conv'], $member_calendar, $row['validated'], $row['allow_rating'], $row['allow_comments'], $row['allow_trackbacks'], $row['notes'], $submitter, $row['e_views'], $row['e_add_date'], $row['e_edit_date'], $id, '', '', $regions);

            $this->_import_content_privacy($db, 'event', strval($row['id']), strval($id_new));

            import_id_remap_put('event', strval($row['id']), $id_new);
        }
        $this->_import_review_supplement($db, $table_prefix, 'events', 'event');
        $this->_import_content_reviews($db, $table_prefix, 'event', 'event');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'event', 'event');

        $rows = $db->query_select('calendar_reminders', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $event = import_id_remap_get('event', strval($row['e_id']), true);
            if ($event === null) {
                continue;
            }
            $member_id = $on_same_msn ? $row['n_member_id'] : import_id_remap_get('member', strval($row['n_member_id']), true);
            if ($member_id === null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_insert('calendar_reminders', ['e_id' => $event, 'n_member_id' => $member_id, 'n_seconds_before' => $row['n_seconds_before']]);
        }

        require_code('calendar');
        foreach ($event_rows as $row) {
            regenerate_event_reminder_jobs(import_id_remap_get('event', strval($row['id'])));
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_redirects(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('redirects', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $GLOBALS['SITE_DB']->query_insert('redirects', $row, false, true); // Allow failure if row already there
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_themes(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query('SELECT * FROM ' . $table_prefix . 'theme_images WHERE path LIKE \'' . db_encode_like('%/images\_custom/%') . '\'');
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (!is_dir(get_file_base() . '/themes/' . $row['theme']) && !is_dir(get_custom_file_base() . '/themes/' . $row['theme'])) {
                continue;
            }

            $GLOBALS['SITE_DB']->query_delete('theme_images', $row, '', 1);
            $GLOBALS['SITE_DB']->query_insert('theme_images', $row, false, true); // Allow failure if row already there
        }
        Self_learning_cache::erase_smart_cache();
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_support_tickets(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('ticket_types', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('ticket_type', strval($row['id']))) {
                continue;
            }

            $map = [
                'search_faq' => $row['search_faq'],
                'guest_emails_mandatory' => $row['guest_emails_mandatory'],
            ];
            $map += insert_lang('ticket_type_name', $this->get_lang_string($db, $row['ticket_type_name']), 1);
            $ticket_type_id = $GLOBALS['SITE_DB']->query_insert('ticket_types', $map, true);
            import_id_remap_put('ticket_type', strval($row['id']), $ticket_type_id);
        }

        $rows = $db->query_select('tickets', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $topic_id = import_id_remap_get('topic', strval($row['topic_id']), true);
            if ($topic_id === null) {
                continue;
            }
            $forum_id = import_id_remap_get('forum', strval($row['forum_id']), true);
            if ($forum_id === null) {
                continue;
            }
            $row['topic_id'] = strval($topic_id);
            $row['forum_id'] = strval($forum_id);

            $GLOBALS['SITE_DB']->query_delete('tickets', ['ticket_id' => $row['ticket_id']]);
            $GLOBALS['SITE_DB']->query_insert('tickets', $row);
        }

        $this->_import_ticket_extra_access($db, $table_prefix);
        $this->_import_ticket_known_emailers($db, $table_prefix);
    }

    /**
     * Import ticket extra access.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     */
    protected function _import_ticket_extra_access(object $db, string $table_prefix)
    {
        $rows = $db->query_select('ticket_extra_access', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $member_id = import_id_remap_get('member', strval($row['member_id']), true);
            if ($member_id === null) {
                continue;
            }
            $row['member_id'] = $member_id;

            $GLOBALS['SITE_DB']->query_insert('ticket_extra_access', $row);
        }
    }

    /**
     * Imports ticket known e-mailers.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     */
    protected function _import_ticket_known_emailers(object $db, string $table_prefix)
    {
        $rows = $db->query_select('ticket_known_emailers', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $member_id = import_id_remap_get('member', strval($row['member_id']), true);
            if ($member_id === null) {
                continue;
            }
            $row['member_id'] = $member_id;

            $GLOBALS['SITE_DB']->query_insert('ticket_known_emailers', $row);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_useronline_tracking(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('usersonline_track', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $GLOBALS['SITE_DB']->query_insert('usersonline_track', $row, false, true); // Allow failure if row already there
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_ip_bans(object $db, string $table_prefix, string $file_base)
    {
        require_code('failure');

        $rows = $db->query_select('banned_ip', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            add_ip_ban($row['ip'], $row['i_descrip'], $row['i_ban_until'], $row['i_ban_positive'] == 1);
        }

        $rows = $db->query_select('unbannable_ip', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $GLOBALS['SITE_DB']->query_insert('unbannable_ip', $row);
        }

        $rows = $db->query_select('usersubmitban_member', ['*']);
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $member_id = $on_same_msn ? $row['the_member'] : import_id_remap_get('member', strval($row['the_member']), true);
            if ($member_id === null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_insert('usersubmitban_member', ['the_member' => $member_id]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_zones(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('zones', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('zones', 'zone_name', ['zone_name' => $row['zone_name']]);
            if ($test === null) {
                $old_title = $this->get_lang_string($db, $row['zone_title']);
                $row = insert_lang('zone_title', $old_title, 1) + $row;
                $row = insert_lang('zone_header_text', $this->get_lang_string($db, $row['zone_header_text']), 1) + $row;

                $GLOBALS['SITE_DB']->query_insert('zones', $row);

                require_code('zones2');
                make_zone_directory($row['zone_name']);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_catalogues(object $db, string $table_prefix, string $file_base)
    {
        require_code('catalogues2');

        $rows = $db->query_select('catalogues', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            unset($row['c_description__text_parsed']);
            unset($row['c_description__source_user']);

            if (import_check_if_imported('catalogue', $row['c_name'])) {
                continue;
            }

            $name = $row['c_name'];

            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('catalogues', 'c_name', ['c_name' => $name]);
            if ($test === null) {
                $row = insert_lang('c_title', $this->get_lang_string($db, $row['c_title']), 2) + $row;
                $row = insert_lang_comcode('c_description', $this->get_lang_string($db, $row['c_description']), 2) + $row;
                $GLOBALS['SITE_DB']->query_insert('catalogues', ['c_name' => $name] + $row);
                import_id_remap_put('catalogue', $row['c_name'], 1);

                $rows2 = $db->query_select('catalogue_fields', ['*'], ['c_name' => $row['c_name']]);
                foreach ($rows2 as $row2) {
                    if (import_check_if_imported('catalogue_field', strval($row2['id']))) {
                        continue;
                    }

                    $row2 = insert_lang('cf_name', $this->get_lang_string($db, $row2['cf_name']), 2) + $row2;
                    $row2 = insert_lang('cf_description', $this->get_lang_string($db, $row2['cf_description']), 2) + $row2;

                    $old_id = $row2['id'];
                    unset($row2['id']);

                    $id_new = $GLOBALS['SITE_DB']->query_insert('catalogue_fields', ['c_name' => $name] + $row2, true);

                    import_id_remap_put('catalogue_field', $old_id, $id_new);
                }
            } else {
                attach_message(do_lang_tempcode('CANNOT_MERGE_CATALOGUES', escape_html($row['c_name'])), 'notice');
            }
        }
        $this->_import_content_reviews($db, $table_prefix, 'catalogue', null);
        $this->_import_review_supplement($db, $table_prefix, 'catalogues', 'catalogue_entry');

        $rows = $db->query_select('catalogue_categories', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        $id = null;
        foreach ($rows as $row) {
            if (import_check_if_imported('catalogue_category', strval($row['id']))) {
                continue;
            }

            $is_tree = $GLOBALS['SITE_DB']->query_select_value_if_there('catalogues', 'c_is_tree', ['c_name' => $row['c_name']]);
            if ($is_tree === null) {
                continue;
            }

            if (($row['cc_parent_id'] === null) && ($is_tree == 1)) {
                $real_root = $GLOBALS['SITE_DB']->query_select_value_if_there('catalogue_categories', 'id', ['cc_parent_id' => null, 'c_name' => $row['c_name']]);
                if ($real_root !== null) {
                    import_id_remap_put('catalogue_category', strval($row['id']), $real_root);
                    continue;
                }
            }

            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];

            $rep_image = $row['cc_rep_image'];

            $id_new = actual_add_catalogue_category($row['c_name'], $this->get_lang_string($db, $row['cc_title']), $this->get_lang_string($db, $row['cc_description']), $row['cc_notes'], ($row['cc_parent_id'] === null) ? null : -$row['cc_parent_id'], $rep_image, $row['cc_move_days_lower'], $row['cc_move_days_higher'], $row['cc_move_target'], $row['cc_add_date'], $id);

            import_id_remap_put('catalogue_category', strval($row['id']), $id_new);
        }
        $this->_import_content_reviews($db, $table_prefix, 'catalogue_category', 'catalogue_category');

        $rows = $GLOBALS['SITE_DB']->query('SELECT id,cc_parent_id FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'catalogue_categories WHERE cc_parent_id<0');
        foreach ($rows as $row) {
            $parent_id = import_id_remap_get('catalogue_category', -$row['cc_parent_id'], true);
            $GLOBALS['SITE_DB']->query_update('catalogue_categories', ['cc_parent_id' => $parent_id], ['id' => $row['id']], '', 1);
        }
        $rows = $db->query_select('catalogue_entries', ['*'], [], 'ORDER BY id');
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_id_remap_get('catalogue_entry', strval($row['id']), true) !== null) {
                continue;
            }
            $category_id = import_id_remap_get('catalogue_category', strval($row['cc_id']), true);
            if ($category_id === null) {
                continue;
            }
            $map = [];

            // Tedious...
            foreach (['long', 'short', 'float', 'integer'] as $table) {
                $rows2 = $db->query_select('catalogue_efv_' . $table, ['*'], ['ce_id' => $row['id']], '', null, 0, true);
                foreach ($rows2 as $row2) {
                    $remapped = import_id_remap_get('catalogue_field', strval($row2['cf_id']), true);
                    if ($remapped === null) {
                        continue;
                    }
                    $value = $row2['cv_value'];
                    if (is_integer($value)) {
                        $value = strval($value);
                    } elseif (is_float($value)) {
                        $value = float_to_raw_string($value);
                    }
                    $map[$remapped] = $value;
                }
            }
            $rows2 = $db->query_select('catalogue_efv_long_trans', ['*'], ['ce_id' => $row['id']]);
            foreach ($rows2 as $row2) {
                $remapped = import_id_remap_get('catalogue_field', strval($row2['cf_id']), true);
                if ($remapped === null) {
                    continue;
                }
                $map[$remapped] = $this->get_lang_string($db, $row2['cv_value']);
            }
            $rows2 = $db->query_select('catalogue_efv_short_trans', ['*'], ['ce_id' => $row['id']]);
            foreach ($rows2 as $row2) {
                $remapped = import_id_remap_get('catalogue_field', strval($row2['cf_id']), true);
                if ($remapped === null) {
                    continue;
                }
                $map[$remapped] = $this->get_lang_string($db, $row2['cv_value']);
            }
            $submitter = $on_same_msn ? $row['ce_submitter'] : import_id_remap_get('member', strval($row['ce_submitter']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];
            $id_new = actual_add_catalogue_entry($category_id, $row['ce_validated'], $row['notes'], $row['allow_rating'], $row['allow_comments'], $row['allow_trackbacks'], $map, $row['ce_add_date'], $submitter, $row['ce_edit_date'], $row['ce_views'], $id);

            $this->_import_content_privacy($db, 'catalogue_entry', strval($row['id']), strval($id_new));
            import_id_remap_put('catalogue_entry', strval($row['id']), $id_new);
        }
        $this->_import_content_reviews($db, $table_prefix, 'catalogue_entry', 'catalogue_entry');

        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'catalogue', null);
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'catalogue_category', 'catalogue_category');
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_chat_rooms(object $db, string $table_prefix, string $file_base)
    {
        require_code('chat2');

        $rows = $db->query_select('chat_rooms', ['*'], ['is_im' => 0], 'ORDER BY id', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('chat', strval($row['id']))) {
                continue;
            }
            $id_old = $row['id'];

            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('chat_rooms', 'id', ['room_name' => $row['room_name']]);
            if ($test !== null) {
                continue;
            }

            $row['room_owner'] = $on_same_msn ? $row['room_owner'] : import_id_remap_get('member', strval($row['room_owner']), true);
            $row = insert_lang('c_welcome', $this->get_lang_string($db, $row['c_welcome']), 2) + $row;

            $_disallow_list_groups = explode(',', $row['disallow_list_groups']);
            $row['disallow_list_groups'] = '';
            foreach ($_disallow_list_groups as $x) {
                $row['disallow_list_groups'] .= ($on_same_msn ? $x : strval(import_id_remap_get('group', $x, true))) . ',';
            }
            $_allow_list_groups = explode(',', $row['allow_list']);
            $row['allow_list_groups'] = '';
            foreach ($_allow_list_groups as $x) {
                $row['allow_list_groups'] .= ($on_same_msn ? $x : strval(import_id_remap_get('group', $x, true))) . ',';
            }
            $_disallow_list = explode(',', $row['disallow_list']);
            $row['disallow_list'] = '';
            foreach ($_disallow_list as $x) {
                $row['disallow_list'] .= ($on_same_msn ? $x : strval(import_id_remap_get('member', $x, true))) . ',';
            }
            $_allow_list = explode(',', $row['allow_list']);
            $row['allow_list'] = '';
            foreach ($_allow_list as $x) {
                $row['allow_list'] .= ($on_same_msn ? $x : strval(import_id_remap_get('member', $x, true))) . ',';
            }

            if (get_param_integer('keep_preserve_ids', 0) == 0) {
                unset($row['id']);
            }
            $id_new = $GLOBALS['SITE_DB']->query_insert('chat_rooms', $row, true);

            import_id_remap_put('chat', strval($id_old), $id_new);
        }
        $this->_import_content_reviews($db, $table_prefix, 'chat', 'chat');

        $rows = $db->query_select('chat_blocking', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $member_blocker = import_id_remap_get('member', strval($row['member_blocker']), true);
            $member_blocked = import_id_remap_get('member', strval($row['member_blocked']), true);
            if ($member_blocker === null) {
                continue;
            }
            if ($member_blocked === null) {
                continue;
            }
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('chat_blocking', 'member_blocker', ['member_blocker' => $member_blocker, 'member_blocked' => $member_blocked]);
            if ($test !== null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_insert('chat_blocking', ['member_blocker' => $member_blocker, 'member_blocked' => $member_blocked, 'date_and_time' => $row['date_and_time']]);
        }

        $rows = $db->query_select('chat_friends', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $member_likes = import_id_remap_get('member', strval($row['member_likes']), true);
            $member_liked = import_id_remap_get('member', strval($row['member_liked']), true);
            if ($member_likes === null) {
                continue;
            }
            if ($member_liked === null) {
                continue;
            }
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('chat_friends', 'member_likes', ['member_likes' => $member_likes, 'member_liked' => $member_liked]);
            if ($test !== null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_insert('chat_friends', ['member_likes' => $member_likes, 'member_liked' => $member_liked, 'date_and_time' => $row['date_and_time']]);
        }

        $rows = $db->query_select('chat_sound_effects', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $s_member = import_id_remap_get('member', strval($row['s_member']), true);
            if ($s_member === null) {
                continue;
            }
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('chat_sound_effects', 's_member', ['s_member' => $s_member, 's_effect_id' => $row['s_effect_id']]);
            if ($test !== null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_insert('chat_sound_effects', ['s_member' => $s_member, 's_effect_id' => $row['s_effect_id'], 's_url' => $row['s_url']]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_awards(object $db, string $table_prefix, string $file_base)
    {
        $content_types = [];
        $rows = $db->query_select('award_types', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            unset($row['a_description__text_parsed']);
            unset($row['a_description__source_user']);

            $content_types[$row['id']] = $row['a_content_type'];

            if (import_check_if_imported('award_type', strval($row['id']))) {
                continue;
            }

            $row = insert_lang('a_title', $this->get_lang_string($db, $row['a_title']), 2) + $row;
            $row = insert_lang_comcode('a_description', $this->get_lang_string($db, $row['a_description']), 2) + $row;

            $id_old = $row['id'];
            if (get_param_integer('keep_preserve_ids', 0) == 0) {
                unset($row['id']);
            }
            $id_new = $GLOBALS['SITE_DB']->query_insert('award_types', $row, true);

            import_id_remap_put('award_type', strval($id_old), $id_new);
        }

        $rows = $db->query_select('award_archive', ['*']);
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if (import_check_if_imported('awarded', strval($row['date_and_time']))) {
                continue;
            }

            $row['member_id'] = $on_same_msn ? $row['member_id'] : import_id_remap_get('member', strval($row['member_id']), true);
            if ($row['member_id'] === null) {
                $row['member_id'] = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $row['content_id'] = import_id_remap_get($content_types[$row['a_type_id']], $row['content_id'], true);
            if ($row['content_id'] === null) {
                continue;
            }
            $row['a_type_id'] = import_id_remap_get('award_type', strval($row['a_type_id']));
            $GLOBALS['SITE_DB']->query_insert('award_archive', $row);

            import_id_remap_put('awarded', strval($row['date_and_time']), $row['date_and_time']);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_filedump(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('filedump', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            $row = insert_lang('the_description', $this->get_lang_string($db, $row['the_description']), 2) + $row;
            $row['the_member'] = $on_same_msn ? $row['the_member'] : import_id_remap_get('member', strval($row['the_member']), true);
            if ($row['the_member'] === null) {
                $row['the_member'] = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }
            $GLOBALS['SITE_DB']->query_insert('filedump', $row);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_permissions(object $db, string $table_prefix, string $file_base)
    {
        $remap = [
        ];

        $rows = $db->query_select('group_privileges', ['*']);
        $on_same_msn = ($this->on_same_msn($file_base));
        foreach ($rows as $row) {
            if ($row['the_page'] == 'cedi') {
                $row['the_page'] = 'wiki';
            }

            $row['group_id'] = $on_same_msn ? $row['group_id'] : import_id_remap_get('group', strval($row['group_id']), true);
            if ($row['group_id'] === null) {
                continue;
            }

            if (isset($remap[$row['privilege']])) {
                $row['privilege'] = $remap[$row['privilege']];
            }

            $row_temp = $row;

            $_db = $GLOBALS[((($row['module_the_name'] == 'forums') || ($row['module_the_name'] == 'topics')) && (get_forum_type() == 'cns')) ? 'FORUM_DB' : 'SITE_DB'];

            $_db->query_delete('group_privileges', $row_temp, '', 1);

            if ($row['category_name'] != '') {
                $import_type = $row['module_the_name'];
                $str = false;
                switch ($import_type) {
                    case 'galleries':
                        $import_type = 'gallery';
                        $str = true;
                        break;
                    case 'downloads':
                        $import_type = 'download_category';
                        break;
                    case 'calendar':
                        $import_type = 'event_type';
                        break;
                    case 'catalogues_catalogue':
                        $import_type = 'catalogue';
                        $str = true;
                        break;
                    case 'catalogues_category':
                        $import_type = 'catalogue_category';
                        break;
                    case 'forums':
                        $import_type = 'forum';
                        break;
                    case 'topics':
                        $import_type = 'topic';
                        break;
                    case 'wiki_page':
                        $import_type = 'wiki_page';
                        break;
                    case 'award':
                        $import_type = 'award_type';
                        break;
                    case 'news':
                        $import_type = 'news_category';
                        break;
                    case 'tickets':
                        $import_type = 'ticket_type';
                        break;
                }
                if ($str) {
                    $id_new = import_id_remap_get($import_type, $row['category_name'], true);
                    if ($id_new === null) {
                        continue;
                    }
                    $row['category_name'] = strval($id_new);
                }
            }
            $_db->query_insert('group_privileges', $row);
        }

        $rows = $db->query_select('group_page_access', ['*']);
        foreach ($rows as $row) {
            if ($row['page_name'] == 'cedi') {
                $row['page_name'] = 'wiki';
            }
            if ($row['page_name'] == 'cms_cedi') {
                $row['page_name'] = 'cms_wiki';
            }

            $row['group_id'] = $on_same_msn ? $row['group_id'] : import_id_remap_get('group', strval($row['group_id']), true);
            if ($row['group_id'] === null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_delete('group_page_access', $row, '', 1);
            $GLOBALS['SITE_DB']->query_insert('group_page_access', $row);
        }

        $rows = $db->query_select('group_zone_access', ['*']);
        foreach ($rows as $row) {
            $row['group_id'] = $on_same_msn ? $row['group_id'] : import_id_remap_get('group', strval($row['group_id']), true);
            if ($row['group_id'] === null) {
                continue;
            }
            $GLOBALS['SITE_DB']->query_delete('group_zone_access', $row, '', 1);
            $GLOBALS['SITE_DB']->query_insert('group_zone_access', $row);
        }

        $rows = $db->query_select('group_category_access', ['*']);
        foreach ($rows as $row) {
            $row['group_id'] = $on_same_msn ? $row['group_id'] : import_id_remap_get('group', strval($row['group_id']), true);
            if ($row['group_id'] === null) {
                continue;
            }
            if (is_numeric($row['category_name'])) {
                $import_type = $row['module_the_name'];
                $str = false;
                switch ($import_type) {
                    case 'galleries':
                        $import_type = 'gallery';
                        $str = true;
                        break;
                    case 'downloads':
                        $import_type = 'download_category';
                        break;
                    case 'calendar':
                        $import_type = 'event_type';
                        break;
                    case 'catalogues_catalogue':
                        $import_type = 'catalogue';
                        $str = true;
                        break;
                    case 'catalogues_category':
                        $import_type = 'catalogue_category';
                        break;
                    case 'forums':
                        $import_type = 'forum';
                        break;
                    case 'topics':
                        $import_type = 'topic';
                        break;
                    case 'wiki_page':
                        $import_type = 'wiki_page';
                        break;
                    case 'award':
                        $import_type = 'award_type';
                        break;
                    case 'news':
                        $import_type = 'news_category';
                        break;
                    case 'tickets':
                        $import_type = 'ticket_type';
                        break;
                }
                if (!$str) {
                    $id_new = import_id_remap_get($import_type, $row['category_name'], true);
                    if ($id_new === null) {
                        continue;
                    }
                    $row['category_name'] = strval($id_new);
                }
            }

            $_db = $GLOBALS[((($row['module_the_name'] == 'forums') || ($row['module_the_name'] == 'topics')) && (get_forum_type() == 'cns')) ? 'FORUM_DB' : 'SITE_DB'];

            $_db->query_delete('group_category_access', $row, '', 1);
            $_db->query_insert('group_category_access', $row);
        }

        $rows = $db->query_select('member_zone_access', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                $member_id = import_id_remap_get('member', strval($row['member_id']), true);
                if ($member_id === null) {
                    continue;
                }
                $test = $GLOBALS['SITE_DB']->query_select_value_if_there('member_zone_access', 'zone_name', ['member_id' => $member_id, 'zone_name' => $row['zone_name']]);
                if ($test !== null) {
                    continue;
                }

                $GLOBALS['SITE_DB']->query_insert('member_zone_access', ['zone_name' => $row['zone_name'], 'member_id' => $member_id, 'active_until' => $row['active_until']]);
            }
        }

        $rows = $db->query_select('member_category_access', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                $member_id = import_id_remap_get('member', strval($row['member_id']), true);
                if ($member_id === null) {
                    continue;
                }

                $_db = $GLOBALS[((($row['module_the_name'] == 'forums') || ($row['module_the_name'] == 'topics')) && (get_forum_type() == 'cns')) ? 'FORUM_DB' : 'SITE_DB'];

                $test = $_db->query_select_value_if_there('member_category_access', 'module_the_name', ['member_id' => $member_id, 'module_the_name' => $row['module_the_name'], 'category_name' => $row['category_name']]);
                if ($test !== null) {
                    continue;
                }

                $_db->query_insert('member_category_access', ['module_the_name' => $row['module_the_name'], 'category_name' => $row['category_name'], 'member_id' => $member_id, 'active_until' => $row['active_until']]);
            }
        }

        $rows = $db->query('SELECT * FROM ' . $table_prefix . 'member_page_access');
        foreach ($rows as $row) {
            $member_id = import_id_remap_get('member', strval($row['member_id']), true);
            if ($member_id === null) {
                continue;
            }
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('member_page_access', 'page_name', ['member_id' => $member_id, 'page_name' => $row['page_name']]);
            if ($test !== null) {
                continue;
            }
            $zone_name = $row['zone_name'];
            $page_name = $row['page_name'];

            $GLOBALS['SITE_DB']->query_insert('member_page_access', ['page_name' => $page_name, 'zone_name' => $zone_name, 'member_id' => $member_id, 'active_until' => $row['active_until']]);
        }

        $rows = $db->query_select('member_privileges', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                $member_id = import_id_remap_get('member', strval($row['member_id']), true);
                if ($member_id === null) {
                    continue;
                }
                if (is_numeric($row['category_name'])) {
                    $import_type = $row['module_the_name'];
                    $is_str = false;
                    switch ($import_type) {
                        case 'galleries':
                            $import_type = 'gallery';
                            $str = true;
                            break;
                        case 'downloads':
                            $import_type = 'download_category';
                            break;
                        case 'calendar':
                            $import_type = 'event_type';
                            break;
                        case 'catalogues_catalogue':
                            $import_type = 'catalogue';
                            $str = true;
                            break;
                        case 'catalogues_category':
                            $import_type = 'catalogue_category';
                            break;
                        case 'forums':
                            $import_type = 'forum';
                            break;
                        case 'topics':
                            $import_type = 'topic';
                            break;
                        case 'wiki_page':
                            $import_type = 'wiki_page';
                            break;
                        case 'award':
                            $import_type = 'award_type';
                            break;
                        case 'news':
                            $import_type = 'news_category';
                            break;
                        case 'tickets':
                            $import_type = 'ticket_type';
                            break;
                    }
                    if (!$str) {
                        $id_new = import_id_remap_get($import_type, $row['category_name'], true);
                        if ($id_new === null) {
                            continue;
                        }
                        $row['category_name'] = strval($id_new);
                    }
                }

                $_db = $GLOBALS[((($row['module_the_name'] == 'forums') || ($row['module_the_name'] == 'topics')) && (get_forum_type() == 'cns')) ? 'FORUM_DB' : 'SITE_DB'];

                $row['member_id'] = $member_id;
                $_db->query_delete('member_privileges', $row);
                $_db->query_insert('member_privileges', $row);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_notifications(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('notifications_enabled', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                $member_id = import_id_remap_get('member', strval($row['l_member_id']), true);
                if ($member_id === null) {
                    continue;
                }

                if ($row['l_notification_code'] == 'cedi') {
                    $row['l_notification_code'] = 'wiki';
                }

                $_db = $GLOBALS[((substr($row['l_notification_code'], 0, 4) == 'cns_') && (get_forum_type() == 'cns')) ? 'FORUM_DB' : 'SITE_DB'];

                $test = $_db->query_select_value_if_there('notifications_enabled', 'id', ['l_member_id' => $member_id, 'l_notification_code' => $row['l_notification_code']]);
                if ($test !== null) {
                    continue;
                }

                unset($row['id']);

                $row['l_member_id'] = $member_id;

                $_db->query_insert('notifications_enabled', $row);
            }
        }

        $rows = $db->query_select('device_token_details', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                $member_id = import_id_remap_get('member', strval($row['member_id']), true);
                if ($member_id === null) {
                    continue;
                }

                unset($row['id']);

                $row['member_id'] = $member_id;

                $GLOBALS['SITE_DB']->query_insert('device_token_details', $row);
            }
        }

        $rows = $db->query_select('notification_lockdown', ['*'], [], '', null, 0, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                $test = $GLOBALS['SITE_DB']->query_select_value_if_there('notification_lockdown', 'l_notification_code', ['l_notification_code' => $row['l_notification_code']]);
                if ($test !== null) {
                    continue;
                }

                unset($row['id']);

                $GLOBALS['SITE_DB']->query_insert('notification_lockdown', $row);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_groups(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_groups', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('group', strval($row['id']))) {
                continue;
            }

            $name = $this->get_lang_string($db, $row['g_name']);
            $id_new = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_groups', 'id', [$GLOBALS['FORUM_DB']->translate_field_ref('g_name') => $name]);
            if ($id_new === null) {
                $title = $this->get_lang_string($db, $row['g_title']);

                $id_new = cns_make_group($name, $row['g_is_default'], $row['g_is_super_admin'], $row['g_is_super_moderator'], $title, '', $row['g_promotion_target'], $row['g_promotion_threshold'], $row['g_promotion_approval'], -$row['g_group_leader'], $row['g_flood_control_submit_secs'], $row['g_flood_control_access_secs'], $row['g_max_daily_upload_mb'], $row['g_max_attachments_per_post'], $row['g_max_avatar_width'], $row['g_max_avatar_height'], $row['g_max_post_length_comcode'], $row['g_max_sig_length_comcode'], $row['g_gift_points_base'], $row['g_gift_points_per_day'], $row['g_enquire_on_new_ips'], $row['g_is_presented_at_install'], $row['g_hidden'], $row['g_order'], $row['g_rank_image_pri_only'], $row['g_open_membership'], $row['g_is_private_club']);
            }

            import_id_remap_put('group', strval($row['id']), $id_new);
        }

        // Now we must fix promotion
        foreach ($rows as $row) {
            if ($row['g_promotion_target'] !== null) {
                $row_promotion_target = import_id_remap_get('group', strval($row['g_promotion_target']), true);
                if ($row_promotion_target === null) {
                    continue;
                }
                $GLOBALS['FORUM_DB']->query_update('f_groups', ['g_promotion_target' => $row_promotion_target], ['id' => import_id_remap_get('group', strval($row['id']))], '', 1);
            }
        }
        $this->_import_content_reviews($db, $table_prefix, 'group', 'group');
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_members(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $cpf_types = collapse_2d_complexity('id', 'cf_type', $GLOBALS['FORUM_DB']->query_select('f_custom_fields', ['id', 'cf_type']));

        $row_start = 0;
        $rows = [];
        do {
            $rows = $db->query_select('f_members', ['*'], 'ORDER BY id', 200, $row_start);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if (import_check_if_imported('member', strval($row['id']))) {
                    continue;
                }

                $id_new = $GLOBALS['CNS_DRIVER']->get_member_from_username($row['m_username']);
                if ($id_new === null) {
                    $primary_group = import_id_remap_get('group', strval($row['m_primary_group']));

                    $custom_fields = [];

                    $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];

                    $timezone = $row['m_timezone_offset'];

                    $id_new = cns_make_member(
                        $row['m_username'], // username
                        $row['m_pass_hash_salted'], // password
                        $row['m_email_address'], // email_address
                        $primary_group, // primary_group
                        null, // secondary_groups
                        $row['m_dob_day'], // dob_day
                        $row['m_dob_month'], // dob_month
                        $row['m_dob_year'], // dob_year
                        $custom_fields, // custom_fields
                        $timezone, // timezone
                        $row['m_language'], // language
                        $row['m_theme'], // theme
                        $row['m_title'], // title
                        $row['m_photo_url'], // photo_url
                        $row['m_avatar_url'], // avatar_url
                        $this->get_lang_string($db, $row['m_signature']), // signature
                        $row['m_preview_posts'], // preview_posts
                        $row['m_reveal_age'], // reveal_age
                        $row['m_views_signatures'], // views_signatures
                        $row['m_auto_monitor_contrib_content'], // auto_monitor_contrib_content
                        $row['m_smart_topic_notification'], // smart_topic_notification
                        $row['m_mailing_list_style'], // mailing_list_style
                        $row['m_auto_mark_read'], // auto_mark_read
                        $row['m_sound_enabled'], // sound_enabled
                        $row['m_allow_emails'], // allow_emails
                        $row['m_allow_emails_from_staff'], // allow_emails_from_staff
                        $row['m_highlighted_name'], // highlighted_name
                        $row['m_pt_allow'], // pt_allow
                        $this->get_lang_string($db, $row['m_pt_rules_text']), // pt_rules_text
                        $row['m_validated'], // validated
                        $row['m_validated_email_confirm_code'], // validated_email_confirm_code
                        $row['m_on_probation_until'], // on_probation_until
                        $row['m_is_perm_banned'], // is_perm_banned
                        false, // check_correctness
                        $row['m_ip_address'], // ip_address
                        $row['m_password_compat_scheme'], // password_compatibility_scheme
                        $row['m_pass_salt'], // salt
                        $row['m_join_time'], // join_time
                        $row['m_last_visit_time'], // last_visit_time
                        $row['m_last_submit_time'], // last_submit_time
                        $row['m_profile_views'], // profile_views
                        $row['m_total_sessions'], // total_sessions
                        $id // id
                    );
                    $rows2 = $db->query_select('f_member_custom_fields', ['*'], ['mf_member_id' => $row['id']], '', 1);
                    $this->_fix_comcode_ownership($rows2);
                    if (array_key_exists(0, $rows2)) {
                        $row2 = [];
                        foreach ($rows2[0] as $key => $val) {
                            if ($val === null) {
                                $val = '';
                            }
                            if (preg_match('#^field_\d+$#', $key) != 0) {
                                $cpf_id = import_id_remap_get('cpf', substr($key, 6), true);
                                if ($cpf_id === null) {
                                    continue;
                                }
                                $cpf_type = $cpf_types[$cpf_id];
                                if (($cpf_type == 'short_trans') || ($cpf_type == 'long_trans')) {
                                    unset($row2['field_' . strval($cpf_id) . '__text_parsed']);
                                    unset($row2['field_' . strval($cpf_id) . '__source_user']);

                                    $row2 = insert_lang_comcode('field_' . strval($cpf_id), $this->get_lang_string($db, intval($val)), 3) + $row2;
                                } else {
                                    $row2['field_' . strval($cpf_id)] = $val;
                                }
                            }
                        }
                        $GLOBALS['FORUM_DB']->query_update('f_member_custom_fields', $row2, ['mf_member_id' => $id_new], '', 1);
                    }

                    // Fix some tricky dependencies that we shoved to one side
                    $GLOBALS['FORUM_DB']->query_update('f_groups', ['g_group_leader' => $id_new], ['g_group_leader' => -$row['id']]);
                    $GLOBALS['SITE_DB']->query_update('attachments', ['a_member_id' => $id_new], ['a_member_id' => -$row['id']]);
                }

                import_id_remap_put('member', strval($row['id']), $id_new);
            }

            $row_start += 200;
        } while (!empty($rows));
        $this->_import_content_reviews($db, $table_prefix, 'member', 'member');

        // Group membership
        $rows = $db->query_select('f_group_members', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $row['gm_group_id'] = import_id_remap_get('group', strval($row['gm_group_id']), true);
            if ($row['gm_group_id'] === null) {
                continue;
            }
            $row['gm_member_id'] = import_id_remap_get('member', strval($row['gm_member_id']), true);
            if ($row['gm_member_id'] === null) {
                continue;
            }
            $GLOBALS['FORUM_DB']->query_insert('f_group_members', $row, false, true); // errors suppressed in case already there
        }

        // Known login IPs
        $rows = $db->query_select('f_member_known_login_ips', ['*']);
        foreach ($rows as $row) {
            $row['i_member_id'] = import_id_remap_get('member', strval($row['i_member_id']), true);
            if ($row['i_member_id'] === null) {
                continue;
            }
            $GLOBALS['FORUM_DB']->query_insert('f_member_known_login_ips', $row);
        }

        // Group member timeouts
        $rows = $db->query_select('f_group_member_timeouts', ['*']);
        foreach ($rows as $row) {
            $member_id = import_id_remap_get('member', strval($row['member_id']));
            if ($member_id === null) {
                continue;
            }
            $group_id = import_id_remap_get('group', strval($row['group_id']));
            if ($group_id === null) {
                continue;
            }
            $GLOBALS['FORUM_DB']->query_insert('f_group_member_timeouts', ['member_id' => $member_id, 'group_id' => $group_id, 'timeout' => $row['timeout']]);
        }

        // Invites
        $rows = $db->query_select('f_invites', ['*'], [], 'ORDER BY id', null, 0, true);
        if ($rows !== null) {
            foreach ($rows as $row) {
                $i_inviter = import_id_remap_get('member', strval($row['i_inviter']), true);
                if ($i_inviter === null) {
                    continue;
                }

                $GLOBALS['FORUM_DB']->query_insert('f_invites', ['i_inviter' => $i_inviter, 'i_email_address' => $row['i_email_address'], 'i_time' => $row['i_time'], 'i_taken' => $row['i_taken']], false, true); // errors suppressed in case already there
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_custom_profile_fields(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_custom_fields', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('cpf', strval($row['id']))) {
                continue;
            }

            $name = $this->get_lang_string($db, $row['cf_name']);

            $existing = $GLOBALS['FORUM_DB']->query_select('f_custom_fields', ['id', 'cf_type'], [$GLOBALS['FORUM_DB']->translate_field_ref('cf_name') => $name], '', 1);
            if ((!array_key_exists(0, $existing)) || ($existing[0]['cf_type'] != $row['cf_type']) && (substr($name, 0, 4) != 'cms_')) {
                $only_group = $row['cf_only_group'];
                if ($only_group != '') {
                    $only_group2 = '';
                    foreach (explode(',', $only_group) as $_only_group) {
                        if ($only_group2 != '') {
                            $only_group2 .= ',';
                        }
                        $group = import_id_remap_get('group', $_only_group, true);
                        if ($group === null) {
                            continue;
                        }
                        $only_group2 .= strval($group);
                    }
                    $only_group2 = $only_group;
                }
                $id_new = cns_make_custom_field($name, $row['cf_locked'], $this->get_lang_string($db, $row['cf_description']), $row['cf_default'], $row['cf_public_view'], $row['cf_owner_view'], $row['cf_owner_set'], $row['cf_encrypted'], $row['cf_type'], $row['cf_required'], $row['cf_show_in_posts'], $row['cf_show_in_post_previews'], $row['cf_order'], $only_group, $row['cf_show_on_join_form'], $row['cf_options'], $row['include_in_main_search'], $row['allow_template_search'], $row['cf_icon'], $row['cf_section'], $row['cf_tempcode']);
            } else {
                $id_new = $existing[0]['id'];
            }

            import_id_remap_put('cpf', strval($row['id']), $id_new);
        }

        // Import member cpf_perms
        $this->_import_f_member_cpf_perms($db, $table_prefix);
    }

    /**
     * Import CPF permissions.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     */
    protected function _import_f_member_cpf_perms(object $db, string $table_prefix)
    {
        $rows = $db->query_select('f_member_cpf_perms', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        foreach ($rows as $row) {
            $member_id = import_id_remap_get('member', strval($row['member_id']), true);
            if ($member_id === null) {
                continue;
            }
            $field_id = import_id_remap_get('cpf', strval($row['field_id']), true);
            if ($field_id === null) {
                continue;
            }
            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_member_cpf_perms', 'member_id', ['member_id' => $member_id, 'field_id' => $field_id]);
            if ($test === null) {
                continue;
            }
            $GLOBALS['FORUM_DB']->query_insert('f_member_cpf_perms', ['member_id' => $member_id, 'field_id' => $field_id, 'guest_view' => $row['guest_view'], 'member_view' => $row['member_view'], 'friend_view' => $row['friend_view'], 'group_view' => $row['group_view']]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_forum_groupings(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_forum_groupings', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('forum_groupings', strval($row['id']))) {
                continue;
            }

            $title = $row['c_title'];

            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forum_groupings', 'id', ['c_title' => $title]);
            if ($test !== null) {
                import_id_remap_put('forum_groupings', strval($row['id']), $test);
                continue;
            }

            $id_new = cns_make_forum_grouping($title, $row['c_description'], $row['c_expanded_by_default']);

            import_id_remap_put('forum_groupings', strval($row['id']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_forums(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        require_code('cns_forums_action2');

        $comments_forum = get_option('comments_forum_name');
        if (!is_numeric($comments_forum)) {
            $comments_forum_id = $GLOBALS['FORUM_DRIVER']->forum_id_from_name($comments_forum);
        } else {
            $comments_forum_id = intval($comments_forum);
            $comments_forum = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_name', ['id' => $comments_forum_id]);
        }

        $rows = $db->query_select('f_forums', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $remapped = import_id_remap_get('forum', strval($row['id']), true);
            if ($remapped !== null) {
                continue;
            }
            if ($row['id'] == db_get_first_id()) {
                import_id_remap_put('forum', strval(db_get_first_id()), db_get_first_id());
                continue;
            }
            if (($row['f_name'] == $comments_forum) && ($comments_forum_id !== null)) {
                import_id_remap_put('forum', strval($row['id']), $comments_forum_id);
                continue;
            }

            $forum_groupings_id = import_id_remap_get('forum_groupings', strval($row['f_forum_groupings_id']), true);

            $id_new = cns_make_forum($row['f_name'], $this->get_lang_string($db, $row['f_description']), $forum_groupings_id, [], db_get_first_id(), $row['f_position'], $row['f_post_count_increment'], $row['f_order_sub_alpha'], $this->get_lang_string($db, $row['f_intro_question']), $row['f_intro_answer'], $row['f_redirection'], $row['f_order'], $row['f_is_threaded'], $row['f_allows_anonymous_posts'], $row['f_mail_email_address'], $row['f_mail_server_type'], $row['f_mail_server_host'], $row['f_mail_server_port'], $row['f_mail_folder'], $row['f_mail_username'], $row['f_mail_password'], $row['f_mail_nonmatch_policy'], $row['f_mail_unconfirmed_notice'], $row['f_poll_default_options_xml']);
            import_id_remap_put('forum', strval($row['id']), $id_new);
        }

        // Now we must fix parenting
        foreach ($rows as $row) {
            if ($row['f_parent_forum'] === null) {
                continue;
            }
            $parent_id = import_id_remap_get('forum', strval($row['f_parent_forum']), true);
            if ($parent_id === null) {
                $parent_id = db_get_first_id();
            }
            $GLOBALS['FORUM_DB']->query_update('f_forums', ['f_parent_forum' => $parent_id], ['id' => import_id_remap_get('forum', strval($row['id']))], '', 1);
        }

        $this->_import_content_reviews($db, $table_prefix, 'forum', 'forum');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'forum', 'forum');

        // Intros
        $rows = $db->query_select('f_forum_intro_ip', ['*']);
        foreach ($rows as $row) {
            $row['i_forum_id'] = import_id_remap_get('forum', strval($row['i_forum_id']), true);
            if ($row['i_forum_id'] === null) {
                continue;
            }
            $GLOBALS['FORUM_DB']->query_delete('f_forum_intro_ip', $row, '', 1);
            $GLOBALS['FORUM_DB']->query_insert('f_forum_intro_ip', $row);
        }
        $rows = $db->query_select('f_forum_intro_member', ['*']);
        foreach ($rows as $row) {
            $row['i_forum_id'] = import_id_remap_get('forum', strval($row['i_forum_id']), true);
            if ($row['i_forum_id'] === null) {
                continue;
            }
            $GLOBALS['FORUM_DB']->query_delete('f_forum_intro_member', $row, '', 1);
            $GLOBALS['FORUM_DB']->query_insert('f_forum_intro_member', $row);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_topics(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $row_start = 0;
        $rows = [];
        do {
            $rows = $db->query_select('f_topics', ['*'], 'ORDER BY id', 200, $row_start);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if (import_check_if_imported('topic', strval($row['id']))) {
                    continue;
                }

                if ($row['t_forum_id'] === null) {
                    $forum_id = null;
                } else {
                    $forum_id = import_id_remap_get('forum', strval($row['t_forum_id']), true);
                    if ($forum_id === null) {
                        continue;
                    }
                }

                // Comment topic remapping
                $matches = [];
                if (preg_match('#: \#(\w+)s_(\d+)$#', $row['t_description'], $matches) != 0) {
                    $import_type = $matches[1];
                    if ($import_type == 'new') {
                        $import_type = 'news';
                    }
                    $c_id = import_id_remap_get($import_type, $matches[2], true);
                    if ($c_id !== null) {
                        $row['t_description'] = str_replace($matches[0], ': #' . $matches[1] . 's_' . strval($c_id), $row['t_description']);
                    }
                }
                // NB: Spacer post not fixed up

                $t_pt_to = $row['t_pt_to'];
                $t_pt_from = $row['t_pt_from'];
                if ($t_pt_to !== null) {
                    $t_pt_to = import_id_remap_get('member', strval($t_pt_to), true);
                    if ($t_pt_to === null) {
                        $t_pt_to = db_get_first_id();
                    }
                }
                if ($t_pt_from !== null) {
                    $t_pt_from = import_id_remap_get('member', strval($t_pt_from), true);
                    if ($t_pt_from === null) {
                        $t_pt_from = db_get_first_id();
                    }
                }

                $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];

                $id_new = cns_make_topic($forum_id, $row['t_description'], $row['t_emoticon'], $row['t_validated'], $row['t_is_open'], $row['t_pinned'], $row['t_cascading'], $t_pt_from, $t_pt_to, false, $row['t_num_views'], $id);

                import_id_remap_put('topic', strval($row['id']), $id_new);
            }

            $row_start += 200;
        } while (!empty($rows));

        $this->_import_content_reviews($db, $table_prefix, 'topic', 'topic');

        // Read logs
        $rows = $db->query_select('f_read_logs', ['*']);
        foreach ($rows as $row) {
            $row['l_member_id'] = import_id_remap_get('member', strval($row['l_member_id']), true);
            $row['l_topic_id'] = import_id_remap_get('topic', strval($row['l_topic_id']), true);
            if ($row['l_member_id'] === null) {
                continue;
            }
            if ($row['l_topic_id'] === null) {
                continue;
            }
            $GLOBALS['FORUM_DB']->query_delete('f_read_logs', $row, '', 1);
            $GLOBALS['FORUM_DB']->query_insert('f_read_logs', $row);
        }

        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'topic', 'topic');

        // Special pt access
        $row_start = 0;
        $rows = [];
        do {
            $rows = $db->query_select('f_special_pt_access', ['*'], 'ORDER BY s_topic_id,s_member_id', 200, $row_start);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                $row['s_member_id'] = import_id_remap_get('member', strval($row['s_member_id']), true);
                $row['s_topic_id'] = import_id_remap_get('topic', strval($row['s_topic_id']), true);
                if ($row['s_member_id'] === null) {
                    continue;
                }
                if ($row['s_topic_id'] === null) {
                    continue;
                }
                $GLOBALS['FORUM_DB']->query_delete('f_special_pt_access', $row);
                $GLOBALS['FORUM_DB']->query_insert('f_special_pt_access', $row);
            }

            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_posts(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        global $TOPIC_FORUM_CACHE;
        $TOPIC_FORUM_CACHE = [];

        $row_start = 0;

        // Optimisation to speed through quickly, as can be slow scrolling through so many posts we may have already imported!
        do {
            $rows = $db->query('SELECT id FROM ' . $table_prefix . 'f_posts ORDER BY id', 1, $row_start + 200 - 1);
            if ((!array_key_exists(0, $rows)) || (!import_check_if_imported('post', strval($rows[0]['id'])))) {
                break;
            }

            $row_start += 200;
        } while (true);

        $rows = [];
        do {
            $rows = $db->query_select('f_posts', ['*'], 'ORDER BY id', 200, $row_start);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if (import_check_if_imported('post', strval($row['id']))) {
                    continue;
                }

                $member_id = import_id_remap_get('member', strval($row['p_poster']), true);
                if ($member_id === null) {
                    $member_id = db_get_first_id();
                }

                $topic_id = import_id_remap_get('topic', strval($row['p_topic_id']), true);
                if ($topic_id === null) {
                    continue;
                }

                // This speeds up addition... using the cache can reduce about 7/8 of a query per post on average
                if (array_key_exists($topic_id, $TOPIC_FORUM_CACHE)) {
                    $forum_id = $TOPIC_FORUM_CACHE[$topic_id];
                } else {
                    $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $topic_id]);
                    $TOPIC_FORUM_CACHE[$topic_id] = $forum_id;
                }

                $last_edit_by = $row['p_last_edit_by'];
                if ($last_edit_by !== null) {
                    $last_edit_by = import_id_remap_get('member', strval($last_edit_by), true);
                }
                $intended_solely_for = $row['p_intended_solely_for'];
                if ($intended_solely_for !== null) {
                    $intended_solely_for = import_id_remap_get('member', strval($intended_solely_for), true);
                    if ($intended_solely_for === null) {
                        $intended_solely_for = -1;
                    }
                }
                $id = (get_param_integer('keep_preserve_ids', 0) == 0) ? null : $row['id'];
                $id_new = cns_make_post($topic_id, $row['p_title'], $this->get_lang_string($db, $row['p_post']), 0, false, $row['p_validated'], $row['p_is_emphasised'], $row['p_poster_name_if_guest'], $row['p_ip_address'], $row['p_time'], $member_id, $intended_solely_for, $row['p_last_edit_time'], $last_edit_by, false, false, $forum_id, false, '', 0, $id, false, true);

                import_id_remap_put('post', strval($row['id']), $id_new);
            }

            $row_start += 200;
        } while (!empty($rows));

        $this->_import_review_supplement($db, $table_prefix, 'post', 'post');
        $this->_import_catalogue_entry_linkage($db, $table_prefix, 'post', 'post');
        $this->_import_content_reviews($db, $table_prefix, 'post', 'post');
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_polls_and_votes(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_polls p LEFT JOIN ' . $table_prefix . 'f_topics t ON p.id=t.t_poll_id', ['p.*', 't.id AS tid']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('poll', strval($row['id']))) {
                continue;
            }

            $topic_id = import_id_remap_get('topic', strval($row['tid']), true);
            if ($topic_id === null) {
                continue;
            }

            $rows2 = $db->query_select('f_poll_votes', ['*'], ['pv_poll_id' => $row['id']]);
            foreach ($rows2 as $i => $row2) {
                $rows2[$i]['pv_member_id'] = import_id_remap_get('member', strval($row2['pv_member_id']), true);
            }
            $rows3 = $db->query_select('f_poll_answers', ['*'], ['pa_poll_id' => $row['id']], 'ORDER BY pa_order');
            $answers = [];
            $id_ordinal_map = [];
            foreach ($rows3 as $i => $row3) {
                $answers[] = $row3['pa_answer'];
                $id_ordinal_map[$row3['id']] = $i;
            }

            $id_new = cns_make_poll($topic_id, $row['po_question'], $row['po_is_private'], $row['po_is_open'], $row['po_minimum_selections'], $row['po_maximum_selections'], $row['po_requires_reply'], $answers, $row['po_view_member_votes'], $row['po_vote_revocation'], $row['po_guests_can_vote'], $row['po_point_weighting'], false);

            $answers = collapse_1d_complexity('id', $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['id'], ['pa_poll_id' => $id_new])); // Effectively, a remapping from vote number ordinal to new vote number
            foreach ($rows2 as $row2) {
                $vote = $row2['pv_answer_id'];
                if (!array_key_exists($vote, $id_ordinal_map)) {
                    continue;
                }
                if (!array_key_exists($id_ordinal_map[$vote], $answers)) {
                    continue;
                }
                $answer = $answers[$id_ordinal_map[$vote]];
                if ($row2['pv_member_id'] === null) {
                    continue;
                }
                $GLOBALS['FORUM_DB']->query_insert('f_poll_votes', ['pv_poll_id' => $id_new, 'pv_member_id' => $row2['pv_member_id'], 'pv_answer_id' => $answer, 'pv_ip' => $row2['pv_ip'], 'pv_revoked' => $row2['pv_revoked'], 'pv_date_time' => $row2['pv_date_time'], 'pv_cache_points_at_voting_time' => $row2['pv_cache_points_at_voting_time']]);
            }

            import_id_remap_put('f_poll', strval($row['id']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_emoticons(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_emoticons', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_emoticons', 'e_code', ['e_code' => $row['e_code']]);
            if ($test === null) {
                $GLOBALS['FORUM_DB']->query_insert('f_emoticons', $row);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_leader_boards(object $db, string $table_prefix, string $file_base)
    {
        require_code('leader_board2');

        $on_same_msn = $this->on_same_msn($file_base);

        // Leader-boards and usergroup maps
        $rows = $db->query_select('leader_boards', ['*'], [], '', null, 0, true);
        if ($rows === null || $on_same_msn) {
            $rows = [];
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            if (import_check_if_imported('leader_boards', strval($row['id']))) {
                continue;
            }

            $map = [
                'lb_title' => $row['lb_title'],
                'lb_type' => $row['lb_type'],
                'lb_member_count' => $row['lb_member_count'],
                'lb_timeframe' => $row['lb_timeframe'],
                'lb_rolling' => $row['lb_rolling'],
                'lb_include_staff' => $row['lb_include_staff'],
            ];

            // Prepare usergroups
            $groups = $db->query_select('leader_boards_groups', ['*'], ['lb_leader_board_id' => $row['id']], '', null, 0, true);
            if ($groups === null || $on_same_msn) {
                $groups = [];
            }
            $groups = collapse_1d_complexity('lb_group', $groups);

            // Re-map group IDs
            foreach ($groups as $key => $group) {
                if ($group !== null && $group !== '') {
                    $groups[$key] = $on_same_msn ? $group : import_id_remap_get('group', strval($group), true);
                }
            }

            add_leader_board($row['lb_title'], $row['lb_type'], $row['lb_member_count'], $row['lb_timeframe'], $row['lb_rolling'], $row['lb_include_staff'], $groups, $row['lb_calculate_voting_power']);

            import_id_remap_put('leader_board', strval($row['id']), 0);
        }

        // Result sets
        $max = 300;
        $start = 0;
        do {
            $rows = $db->query_select('leader_board', ['*'], [], '', $max, $start, true);
            if ($rows === null) {
                $rows = [];
            }
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                $member_id = $on_same_msn ? $row['lb_member'] : import_id_remap_get('member', strval($row['lb_member']), true);
                if ($member_id === null) {
                    continue;
                }
                $GLOBALS['SITE_DB']->query_delete('leader_board', ['lb_member' => $member_id, 'lb_points' => $row['lb_points'], 'lb_date_and_time' => $row['date_and_time'], 'lb_rank' => $row['lb_rank'], 'lb_leader_board_id' => $row['lb_leader_board_id']], '', 1);
                $GLOBALS['SITE_DB']->query_insert('leader_board', ['lb_member' => $member_id, 'lb_points' => $row['lb_points'], 'lb_date_and_time' => $row['date_and_time'], 'lb_rank' => $row['lb_rank'], 'lb_leader_board_id' => $row['lb_leader_board_id']]);
            }

            $start += $max;
        } while (!empty($rows));
    }

    /**
     * Pass a multi-code through a forum remap.
     *
     * @param  SHORT_TEXT $multi_code Multi code
     * @return SHORT_TEXT New multi code
     */
    public function convert_multi_code(string $multi_code) : string
    {
        if ($multi_code == '*') {
            return $multi_code;
        }
        if ($multi_code == '') {
            return $multi_code;
        }

        $new_multi_code = '';
        if ($multi_code[0] == '+') {
            $parts = explode(',', substr($multi_code, 1));
            $new_multi_code = '+';
            foreach ($parts as $_part) {
                $part = import_id_remap_get('forum', trim($_part), true);
                if ($part !== null) {
                    if ($new_multi_code != '') {
                        $new_multi_code .= ',';
                    }
                    $new_multi_code .= strval($part);
                }
            }
        } else {
            $parts = explode(',', $multi_code);
            foreach ($parts as $_part) {
                $part = import_id_remap_get('forum', trim($_part), true);
                if ($part !== null) {
                    if ($new_multi_code != '') {
                        $new_multi_code .= ',';
                    }
                    $new_multi_code .= strval($part);
                }
            }
        }

        return $new_multi_code;
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_multi_moderations(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_multi_moderations', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $name = $this->get_lang_string($db, $row['mm_name']);
            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_multi_moderations', 'id', [$GLOBALS['FORUM_DB']->translate_field_ref('mm_name') => $name]);
            if ($test === null) {
                $move_to = ($row['mm_move_to'] === null) ? null : import_id_remap_get('forum', strval($row['mm_move_to']), true);
                $multi_code = $this->convert_multi_code($row['mm_forum_multi_code']);
                cns_make_multi_moderation($name, $row['mm_post_text'], $move_to, $row['mm_pin_state'], $row['mm_open_state'], $multi_code, $row['mm_title_suffix']);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_post_templates(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_post_templates', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $multi_code = $this->convert_multi_code($row['t_forum_multi_code']);
            cns_make_post_template($row['t_title'], $row['t_text'], $multi_code, $row['t_use_default_forums']);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_warnings(object $db, string $table_prefix, string $file_base)
    {
        if ($this->on_same_msn($file_base)) {
            return;
        }

        $rows = $db->query_select('f_warnings', ['*']);
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $member_id = import_id_remap_get('member', strval($row['w_member_id']), true);
            $by = import_id_remap_get('member', $row['w_by'], true);
            if ($member_id === null) {
                continue;
            }
            if ($by === null) {
                $by = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $silence_from_topic = import_id_remap_get('topic', strval($row['w_silence_from_topic']), true);
            if ($silence_from_topic === null) {
                $silence_from_topic = null;
            }

            $silence_from_forum = import_id_remap_get('forum', strval($row['w_silence_from_forum']), true);
            if ($silence_from_forum === null) {
                $silence_from_forum = null;
            }

            $changed_usergroup_to = import_id_remap_get('group', strval($row['w_changed_usergroup_to']), true);
            if ($changed_usergroup_to === null) {
                $changed_usergroup_to = null;
            }

            cns_make_warning($member_id, $row['w_explanation'], $by, $row['w_time'], $row['w_is_warning'], $silence_from_topic, $silence_from_forum, $row['w_probation'], $row['w_banned_ip'], $row['w_charged_points'], $row['w_banned_member'], $changed_usergroup_to);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_aggregate_type_instances(object $db, string $table_prefix, string $file_base)
    {
        require_code('aggregate_types');

        $start = 0;
        do {
            $rows = $db->query_select('aggregate_type_instances', ['*'], [], '', 100, $start);
            $this->_fix_comcode_ownership($rows);
            foreach ($rows as $row) {
                if (import_check_if_imported('aggregate_type_instance', strval($row['id']))) {
                    continue;
                }

                $id_new = add_aggregate_type_instance($row['aggregate_label'], $row['aggregate_type'], $row['other_parameters'], $row['add_time'], $row['edit_time'], false);

                import_id_remap_put('aggregate_type_instance', strval($row['id']), $id_new);
            }
            $start += 100;
        } while (!empty($rows));
    }

    /**
     * Import privacy for a particular record.
     *
     * @param  object $db The database connector to import from
     * @param  ID_TEXT $content_type The content type
     * @param  ID_TEXT $old_id The old ID
     * @param  ID_TEXT $id_new The new ID
     */
    protected function _import_content_privacy(object $db, string $content_type, string $old_id, string $id_new)
    {
        if (addon_installed('content_privacy')) {
            $rows = $db->query_select('content_privacy', ['*'], ['content_type' => $content_type, 'content_id' => $old_id], '', 1);
            foreach ($rows as $row) {
                $GLOBALS['SITE_DB']->query_insert('content_privacy', [
                    'content_id' => $id_new,
                ] + $row);
            }

            $rows = $db->query_select('content_privacy__members', ['*'], ['content_type' => $content_type, 'content_id' => $old_id]);
            foreach ($rows as $row) {
                $member_id = import_id_remap_get('member', strval($row['member_id']), true);
                if ($member_id !== null) {
                    $GLOBALS['SITE_DB']->query_insert('content_privacy__members', [
                        'content_id' => $id_new,
                        'member_id' => $member_id,
                    ] + $row);
                }
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_saved_warnings(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('f_saved_warnings', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_saved_warnings', 's_title', ['s_title' => $row['s_title']]);
            if ($test !== null) {
                continue;
            }

            $GLOBALS['FORUM_DB']->query_insert('f_saved_warnings', ['s_title' => $row['s_title'], 's_explanation' => $row['s_explanation'], 's_message' => $row['s_message']]);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_match_key_messages(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('match_key_messages', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('match_key_messages', 'id', ['k_match_key' => $row['k_match_key']]);
            if ($test !== null) {
                continue;
            }

            $row['k_message'] = $this->get_lang_string($db, $row['k_message']);

            $GLOBALS['SITE_DB']->query_insert('match_key_messages', $row);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_menu_items(object $db, string $table_prefix, string $file_base)
    {
        $parent_rows = $db->query_select('menu_items', ['*']);
        if ($parent_rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($parent_rows);
        foreach ($parent_rows as $row) {
            $id_old = strval($row['id']);
            unset($row['id']);

            if (import_check_if_imported('menu_item', $id_old)) {
                continue;
            }

            $row['i_parent'] = ($row['i_parent'] === null) ? null : (-$row['i_parent']);

            unset($row['i_caption__text_parsed']);
            unset($row['i_caption__source_user']);
            unset($row['i_caption_long__text_parsed']);
            unset($row['i_caption_long__source_user']);

            $row = insert_lang_comcode('i_caption', $this->get_lang_string($db, $row['i_caption']), 1) + $row;
            $row = insert_lang_comcode('i_caption_long', $this->get_lang_string($db, $row['i_caption_long']), 1) + $row;

            $id_new = $GLOBALS['SITE_DB']->query_insert('menu_items', $row, true);
            import_id_remap_put('menu_item', $id_old, 1);
        }

        $child_rows = $GLOBALS['SITE_DB']->query('SELECT * FROM ' . get_table_prefix() . 'menu_items WHERE i_parent<0');
        foreach ($child_rows as $row) {
            $row['i_parent'] = import_id_remap_get('menu_item', strval(-$row['i_parent']), true);
            $GLOBALS['SITE_DB']->query_update('menu_items', $row, ['id' => $row['id']], '', 1);
        }
    }

    /**
     * Imports staff-links.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_staff_links(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('staff_links', ['*'], [], '', null, 0, true);
        if ($rows === null) {
            return;
        }
        $this->_fix_comcode_ownership($rows);
        foreach ($rows as $row) {
            unset($row['id']);
            $GLOBALS['SITE_DB']->query_insert('staff_links', $row);
        }
    }

    /**
     * Import reviews.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  ID_TEXT $rating_type The rating type
     * @param  ?ID_TEXT $import_type The import type to get remapping from (null: no remapping)
     */
    protected function _import_review_supplement(object $db, string $table_prefix, string $rating_type, ?string $import_type)
    {
        $rows = $db->query_select('review_supplement', ['*'], ['r_rating_type' => $rating_type]);
        foreach ($rows as $row) {
            $rating_for_id = ($import_type === null) ? $row['r_rating_for_id'] : import_id_remap_get($import_type, @strval($row['r_rating_for_id']), true);
            if ($rating_for_id === null) {
                continue;
            }

            $r_post_id = import_id_remap_get('post', strval($row['r_post_id']), true);
            if ($r_post_id === null) {
                continue;
            }
            $r_topic_id = import_id_remap_get('topic', strval($row['r_topic_id']), true);
            if ($r_topic_id === null) {
                continue;
            }
            $row['r_post_id'] = $r_post_id;
            $row['r_topic_id'] = $r_topic_id;
            $row['r_rating_for_id'] = $rating_for_id;

            $GLOBALS['SITE_DB']->query_insert('review_supplement', $row);
        }
    }

    /**
     * Import content review schedules.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  ID_TEXT $content_type The content type
     * @param  ?ID_TEXT $import_type The import type to get remapping from (null: no remapping)
     */
    protected function _import_content_reviews(object $db, string $table_prefix, string $content_type, ?string $import_type)
    {
        $rows = $db->query_select('content_reviews', ['*'], ['content_type' => $content_type]);
        if ($rows === null) {
            return;
        }
        foreach ($rows as $row) {
            $content_id = ($import_type === null) ? $row['content_id'] : import_id_remap_get($import_type, @strval($row['content_id']), true);
            if ($content_id === null) {
                continue;
            }

            $row['content_type'] = $content_type;
            $row['content_id'] = $content_id;

            $GLOBALS['SITE_DB']->query_insert('content_reviews', $row);
        }
    }

    /**
     * Import custom fields for a particular record.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  ID_TEXT $content_type The content type
     * @param  ?ID_TEXT $import_type The import type to get remapping from (null: no remapping)
     */
    protected function _import_catalogue_entry_linkage(object $db, string $table_prefix, string $content_type, ?string $import_type)
    {
        $sql = 'SELECT * FROM ' . $table_prefix . 'catalogue_entry_linkage WHERE ' . db_string_equal_to('content_type', $content_type);
        if ($content_type == 'wiki_page') {
            $sql .= ' OR ' . db_string_equal_to('content_type', 'cedi_page');
        }
        if ($content_type == 'wiki_post') {
            $sql .= ' OR ' . db_string_equal_to('content_type', 'cedi_post');
        }
        $rows = $db->query($sql);
        foreach ($rows as $row) {
            $catalogue_entry_id = import_id_remap_get('catalogue_entry', strval($row['catalogue_entry_id']), true);
            if ($catalogue_entry_id === null) {
                continue;
            }

            $content_id = ($import_type === null) ? $row['content_id'] : import_id_remap_get($import_type, @strval($row['content_id']), true);
            if ($content_id === null) {
                continue;
            }

            $row['catalogue_entry_id'] = $catalogue_entry_id;
            $row['content_id'] = $content_id;

            $GLOBALS['SITE_DB']->query_insert('catalogue_entry_linkage', $row);
        }
    }

    /**
     * Remap any Comcode ownership fields.
     *
     * @param  array $rows Rows with potential fields to fix
     */
    protected function _fix_comcode_ownership(array &$rows)
    {
        foreach ($rows as &$row) {
            foreach ($row as $field => $value) {
                if (substr($field, 0, 13) == '__source_user') {
                    $member_id = import_id_remap_get('member', strval($value), true);
                    if ($member_id === null) {
                        $member_id = db_get_first_id();
                    }

                    $row[$field] = $member_id;
                }
            }
        }
    }
}
