<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    import
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__hooks__modules__admin_import__ipb()
{
    global $TOPIC_FORUM_CACHE;
    $TOPIC_FORUM_CACHE = [];

    global $STRICT_FILE;
    $STRICT_FILE = false; // Disable this for a quicker import that is quite liable to go wrong if you don't have the files in the right place
}

/**
 * Hook class.
 */
class Hook_import_ipb2
{
    /**
     * Standard importer hook info function.
     *
     * @return ?array Importer handling details, including lists of all the import types covered (import types are not necessarily the same as actual tables) (null: importer is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['supports_advanced_import'] = false;
        $info['product'] = 'Invision Board 2.0.x';
        $info['prefix'] = 'ibf_';
        $info['import'] = [
            'cns_groups',
            'cns_members',
            'cns_member_files',
            'custom_comcode',
            'cns_custom_profile_fields',
            'cns_forum_groupings',
            'cns_forums',
            'cns_topics',
            'cns_posts',
            'cns_post_files',
            'cns_polls_and_votes',
            'cns_multi_moderations',
            'notifications',
            'cns_private_topics',
            'cns_warnings',
            'wordfilter',
            'config',
            'calendar',
        ];
        $info['dependencies'] = [
            // This dependency tree is overdefined, but I wanted to make it clear what depends on what, rather than having a simplified version
           'cns_members' => ['cns_groups'],
           'cns_member_files' => ['cns_members'],
           'cns_forums' => ['cns_forum_groupings', 'cns_members', 'cns_groups'],
           'cns_topics' => ['cns_forums', 'cns_members'],
           'cns_polls_and_votes' => ['cns_topics', 'cns_members'],
           'cns_posts' => ['custom_comcode', 'cns_topics', 'cns_members'],
           'cns_post_files' => ['cns_posts'],
           'cns_multi_moderations' => ['cns_forums'],
           'notifications' => ['cns_topics', 'cns_members'],
           'cns_private_topics' => ['custom_comcode', 'cns_members'],
           'cns_warnings' => ['cns_members'],
           'calendar' => ['cns_members'],
        ];
        $_cleanup_url = build_url(['page' => 'admin_cleanup'], get_module_zone('admin_cleanup'));
        $cleanup_url = $_cleanup_url->evaluate();
        $info['message'] = (get_param_string('type', 'browse') != 'import' && get_param_string('type', 'browse') != 'hook') ? new Tempcode() : do_lang_tempcode('FORUM_CACHE_CLEAR', escape_html($cleanup_url));

        return $info;
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $old_base_dir The base directory we are importing from
     */
    public function import_custom_comcode(object $db, string $table_prefix, string $old_base_dir)
    {
        require_code('custom_comcode');
        require_code('comcode_compiler');

        init_valid_comcode_tags();

        $rows = $db->query_select('custom_bbcode', ['*']);
        foreach ($rows as $row) {
            if (import_check_if_imported('custom_comcode', strval($row['bbcode_id']))) {
                continue;
            }

            global $VALID_COMCODE_TAGS;
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('custom_comcode', 'tag_tag', ['tag_tag' => $row['bbcode_tag']]);
            if ((array_key_exists($row['bbcode_tag'], $VALID_COMCODE_TAGS)) || ($test !== null)) {
                import_id_remap_put('custom_comcode', strval($row['bbcode_id']), 1);
                continue;
            }

            $tag = $row['bbcode_tag'];
            $title = $row['bbcode_title'];
            $description = $row['bbcode_desc'];
            $replace = $row['bbcode_replace'];
            $example = $row['bbcode_example'];
            $parameters = '';
            $enabled = 1;
            $dangerous_tag = 0;
            $block_tag = 0;
            $textual_tag = 1;

            add_custom_comcode_tag($tag, $title, $description, $replace, $example, $parameters, $enabled, $dangerous_tag, $block_tag, $textual_tag);

            import_id_remap_put('custom_comcode', strval($row['bbcode_id']), 1);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $old_base_dir The base directory we are importing from
     */
    public function import_cns_forum_groupings(object $db, string $table_prefix, string $old_base_dir)
    {
        $rows = $db->query_select('forums', ['*'], ['parent_id' => -1], 'ORDER BY id');
        foreach ($rows as $row) {
            if (import_check_if_imported('category', strval($row['id']))) {
                continue;
            }

            if ($row['id'] == -1) {
                continue;
            }

            $title = @html_entity_decode($row['name'], ENT_QUOTES);

            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forum_groupings', 'id', ['c_title' => $title]);
            if ($test !== null) {
                import_id_remap_put('category', strval($row['id']), $test);
                continue;
            }

            $description = strip_html($row['description']);
            $expanded_by_default = 1;

            $id_new = cns_make_forum_grouping($title, $description, $expanded_by_default);

            import_id_remap_put('category', strval($row['id']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $old_base_dir The base directory we are importing from
     */
    public function import_cns_forums(object $db, string $table_prefix, string $old_base_dir)
    {
        require_code('cns_forums_action2');

        $remap_id = [];
        $rows = $db->query('SELECT * FROM ' . $table_prefix . 'forums WHERE parent_id<>-1 ORDER BY id');
        foreach ($rows as $row_number => $row) {
            $remapped = import_id_remap_get('forum', strval($row['id']), true);
            if ($remapped !== null) {
                $remap_id[$row['id']] = $remapped;
                $rows[$row_number]['parent_id'] = null;
                continue;
            }

            if ($row['id'] == -1) {
                continue;
            }

            $name = @html_entity_decode($row['name'], ENT_QUOTES);
            $description = strip_html($row['description']);

            // To determine whether parent_id specifies category or parent, we must check status of what it is pointing at
            $parent_test = $db->query_select('forums', ['use_ibc,parent_id'], ['id' => $row['parent_id']]);
            if ($parent_test[0]['parent_id'] != -1) { // Pointing to parent
                $parent_forum = import_id_remap_get('forum', strval($row['parent_id']), true);
                if ($parent_forum !== null) {
                    $rows[$row_number]['parent_id'] = null; // Mark it as good (we do not need to fix this parenting)
                }
                $category_id = db_get_first_id();
            } else { // Pointing to category
                $category_id = import_id_remap_get('category', strval($row['parent_id']));
                $parent_forum = db_get_first_id();
                $rows[$row_number]['parent_id'] = null; // Mark it as good (we do not need to fix this parenting)
            }

            $position = $row['position'];
            $post_count_increment = $row['inc_postcount'];

            $permissions = unserialize(stripslashes($row['permission_array']));
            $_all_groups = array_unique(explode(',', $permissions['start_perms'] . ',' . $permissions['reply_perms'] . ',' . $permissions['read_perms']));
            $level2_groups = explode(',', $permissions['read_perms']);
            $level3_groups = explode(',', $permissions['reply_perms']);
            $level4_groups = explode(',', $permissions['start_perms']);
            $access_mapping = [];
            foreach ($_all_groups as $old_group) {
                $new_group = import_id_remap_get('group', $old_group, true);
                if ($new_group === null) {
                    continue;
                }

                if (in_array($old_group, $level4_groups)) {
                    $access_mapping[$new_group] = 4;
                } elseif (in_array($old_group, $level3_groups)) {
                    $access_mapping[$new_group] = 3;
                } elseif (in_array($old_group, $level2_groups)) {
                    $access_mapping[$new_group] = 2;
                } else {
                    $access_mapping[$new_group] = 0;
                }
            }

            $id_new = cns_make_forum($name, $description, $category_id, $access_mapping, $parent_forum, $position, $post_count_increment);

            $remap_id[$row['id']] = $id_new;
            import_id_remap_put('forum', strval($row['id']), $id_new);
        }

        // Now we must fix parenting
        foreach ($rows as $row) {
            if ($row['parent_id'] !== null) {
                $parent_id = $remap_id[$row['parent_id']];
                $GLOBALS['FORUM_DB']->query_update('f_forums', ['f_parent_forum' => $parent_id], ['id' => $remap_id[$row['id']]], '', 1);
            }
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_config(object $db, string $table_prefix, string $file_base)
    {
        $config_remapping = [
            'board_offline' => 'site_closed',
            'offline_msg' => 'closed',
            'au_cutoff' => 'users_online_time',
            'email_out' => 'smtp_from_address',
            'email_in' => 'staff_address',
            'smtp_host' => 'smtp_sockets_host',
            'smtp_port' => 'smtp_sockets_port',
            'smtp_user' => 'smtp_sockets_username',
            'smtp_pass' => 'smtp_sockets_password',
            'home_name' => 'site_name',
            'reg_auth_type' => 'require_new_member_validation',
            //'show_max_msg_list' => 'forum_posts_per_page',
            'time_offset' => 'timezone',
        ];

        $rows = $db->query_select('conf_settings', ['*']);
        $PROBED_FORUM_CONFIG = [];
        foreach ($rows as $row) {
            if ($row['conf_value'] == '') {
                $row['conf_value'] = $row['conf_default'];
            }
            if (array_key_exists($row['conf_key'], $config_remapping)) {
                set_option($config_remapping[$row['conf_key']], $row['conf_value']);
            }
            $PROBED_FORUM_CONFIG[$row['conf_key']] = $row['conf_value'];
        }

        set_option('session_expiry_time', strval(60 * intval($PROBED_FORUM_CONFIG['session_expiration'])));
        set_option('output_compression', strval(1 - intval($PROBED_FORUM_CONFIG['disable_gzip'])));
        set_option('smtp_sockets_use', ($PROBED_FORUM_CONFIG['mail_method'] == 'smtp') ? '1' : '0');
        set_option('session_expiry_time', strval(60 * intval($PROBED_FORUM_CONFIG['session_expiration'])));

        // Now some usergroup options
        $groups = $GLOBALS['CNS_DRIVER']->get_usergroup_list();
        list($width, $height) = explode('x', $PROBED_FORUM_CONFIG['avatar_dims']);
        $GLOBALS['SITE_DB']->query_delete('group_page_access', ['page_name' => 'search', 'zone_name' => get_module_zone('search')]);
        $GLOBALS['SITE_DB']->query_delete('group_page_access', ['page_name' => 'join', 'zone_name' => get_module_zone('join')]);
        $super_admin_groups = $GLOBALS['CNS_DRIVER']->_get_super_admin_groups();
        foreach (array_keys($groups) as $id) {
            if (in_array($id, $super_admin_groups)) {
                continue;
            }

            if ($PROBED_FORUM_CONFIG['allow_search'] == '0') {
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'search', 'zone_name' => get_module_zone('search'), 'group_id' => $id]);
            }
            if ($PROBED_FORUM_CONFIG['no_reg'] == '1') {
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'join', 'zone_name' => get_module_zone('join'), 'group_id' => $id]);
            }

            $GLOBALS['FORUM_DB']->query_update('f_groups', ['g_flood_control_submit_secs' => intval($PROBED_FORUM_CONFIG['flood_control']), 'g_max_avatar_width' => $width, 'g_max_avatar_height' => $height, 'g_max_sig_length_comcode' => $PROBED_FORUM_CONFIG['max_sig_length'], 'g_max_post_length_comcode' => $PROBED_FORUM_CONFIG['max_post_length']], ['id' => $id], '', 1);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $old_base_dir The base directory we are importing from
     */
    public function import_cns_private_topics(object $db, string $table_prefix, string $old_base_dir)
    {
        $rows = $db->query('SELECT * FROM ' . $table_prefix . 'message_topics m LEFT JOIN ' . $table_prefix . 'message_text t ON m.mt_msg_id=t.msg_id WHERE ' . db_string_not_equal_to('mt_vid_folder', 'sent') . ' ORDER BY mt_date');

        // Group them up into what will become topics
        $groups = [];
        foreach ($rows as $row) {
            if ($row['mt_from_id'] > $row['mt_to_id']) {
                $a = $row['mt_to_id'];
                $b = $row['mt_from_id'];
            } else {
                $a = $row['mt_from_id'];
                $b = $row['mt_to_id'];
            }
            $title = str_replace('Re: ', '', $row['mt_title']);
            $title = str_replace('RE: ', '', $title);
            $title = str_replace('Re:', '', $title);
            $title = str_replace('RE:', '', $title);
            $groups[strval($a) . ':' . strval($b) . ':' . @html_entity_decode($title, ENT_QUOTES)][] = $row;
        }

        // Import topics
        foreach ($groups as $group) {
            $row = $group[0];

            if (import_check_if_imported('pt', strval($row['mt_msg_id']))) {
                continue;
            }

            // Create topic
            $from_id = import_id_remap_get('member', strval($row['mt_from_id']), true);
            if ($from_id === null) {
                $from_id = $GLOBALS['CNS_DRIVER']->get_guest_id();
            }
            $to_id = import_id_remap_get('member', strval($row['mt_to_id']), true);
            if ($to_id === null) {
                $to_id = $GLOBALS['CNS_DRIVER']->get_guest_id();
            }
            $topic_id = cns_make_topic(null, '', '', 1, 1, 0, 0, $from_id, $to_id, false);

            $first_post = true;
            foreach ($group as $_postdetails) {
                if ($first_post) {
                    $title = @html_entity_decode($row['mt_title'], ENT_QUOTES);
                } else {
                    $title = '';
                }

                $post = str_replace('$', '[html]$[/html]', $this->clean_ipb_post($_postdetails['msg_post']));
                $validated = 1;
                $from_id = import_id_remap_get('member', strval($_postdetails['mt_from_id']), true);
                if ($from_id === null) {
                    $from_id = $GLOBALS['CNS_DRIVER']->get_guest_id();
                }
                $poster_name_if_guest = $GLOBALS['CNS_DRIVER']->get_member_row_field($from_id, 'm_username');
                $ip_address = $GLOBALS['CNS_DRIVER']->get_member_row_field($from_id, 'm_ip_address');
                $time = $_postdetails['mt_date'];
                $poster = $from_id;
                $last_edit_time = null;
                $last_edit_by = null;

                cns_make_post($topic_id, $title, $post, 0, $first_post, $validated, 0, $poster_name_if_guest, $ip_address, $time, $poster, null, $last_edit_time, $last_edit_by, false, false, null, false);
                $first_post = false;
            }

            import_id_remap_put('pt', strval($row['mt_msg_id']), $topic_id);
        }
    }

    /**
     * Decode an IPB post to be plain-text (a la Comcode).
     *
     * @param  LONG_TEXT $post IPB post
     * @return LONG_TEXT The cleaned post
     */
    public function clean_ipb_post(string $post) : string
    {
        $post = str_replace('<br />', "\n", str_replace('<br>', "\n", $post));
        $post = preg_replace('#\[size="?(\d+)"?\]#', '[size="${1}of"]', $post);
        return @html_entity_decode($post, ENT_QUOTES);
    }

    /**
     * Fix non-XHTML parts of IPB posts.
     *
     * @param  LONG_TEXT $post IPB post
     * @return LONG_TEXT The cleaned post
     */
    public function clean_ipb_post_2(string $post) : string
    {
        $post = str_replace('<br>', '<br />', $post);
        return $post;
    }

    /**
     * Probe a file path for DB access details.
     *
     * @param  string $file_base The probe path
     * @return array A quartet of the details (db_name, db_user, db_pass, table_prefix)
     */
    public function probe_db_access(string $file_base) : array
    {
        global $INFO;

        if (!file_exists($file_base . '/conf_global.php')) {
            warn_exit(do_lang_tempcode('BAD_IMPORT_PATH', escape_html('conf_global.php')));
        }
        require_once($file_base . '/conf_global.php');

        return [$INFO['sql_database'], $INFO['sql_user'], $INFO['sql_pass'], $INFO['sql_tbl_prefix'], $INFO['sql_host']];
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_groups(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('conf_settings', ['*']);
        $PROBED_FORUM_CONFIG = [];
        foreach ($rows as $row) {
            $key = $row['conf_key'];
            $val = $row['conf_value'];
            if ($val == '') {
                $val = $row['conf_default'];
            }
            $PROBED_FORUM_CONFIG[$key] = $val;
        }
        $max_post_length_comcode = $PROBED_FORUM_CONFIG['max_post_length'];
        $max_sig_length_comcode = $PROBED_FORUM_CONFIG['max_sig_length'];
        list($max_avatar_width, $max_avatar_height) = explode('x', $PROBED_FORUM_CONFIG['avatar_dims']);

        $rows = $db->query_select('groups', ['*']);
        foreach ($rows as $row) {
            if (import_check_if_imported('group', strval($row['g_id']))) {
                continue;
            }

            list($_promotion_target, $_promotion_threshold) = explode('&', $row['g_promotion']);
            $promotion_target = intval($_promotion_target);
            $promotion_threshold = intval($_promotion_threshold);
            if (($promotion_target == -1) || ($promotion_threshold == -1)) {
                $promotion_target = null;
                $promotion_threshold = null;
            }

            $id_new = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_groups', 'id', [$GLOBALS['FORUM_DB']->translate_field_ref('g_name') => $row['g_title']]);
            if ($id_new === null) {
                $id_new = cns_make_group(@html_entity_decode($row['g_title'], ENT_QUOTES), 0, $row['g_access_cp'], $row['g_is_supmod'], '', '', $promotion_target, $promotion_threshold, null, $row['g_avoid_flood'] ? 0 : $row['g_search_flood'], 0, 5, 5, $max_avatar_width, $max_avatar_height, $max_post_length_comcode, $max_sig_length_comcode);
            }

            // Zone permissions
            if ($row['g_view_board'] == 0) {
                $GLOBALS['SITE_DB']->query_delete('group_zone_access', ['group_id' => $id_new]);
            }

            // Page permissions
            $denies = [];
            if ($row['g_use_search'] == 0) {
                $denies[] = ['search', get_module_zone('search')];
            }
            list($_contact_member,) = explode(':', $row['g_email_limit']);
            $contact_member = intval($_contact_member);
            if ($contact_member == 0) {
                $denies[] = ['contact_member', get_module_zone('contact_member')];
            }
            foreach ($denies as $deny) {
                list($page, $zone) = $deny;
                if ($zone === null) {
                    continue;
                }
                $test = $GLOBALS['SITE_DB']->query_select_value_if_there('group_page_access', 'group_id', ['group_id' => $id_new, 'zone_name' => $zone, 'page_name' => $page]);
                if ($test === null) {
                    $GLOBALS['SITE_DB']->query_insert('group_page_access', ['group_id' => $id_new, 'zone_name' => $zone, 'page_name' => $page]);
                }
            }

            // Privileges
            set_privilege($id_new, 'comcode_dangerous', $row['g_dohtml']);
            set_privilege($id_new, 'view_member_photos', $row['g_mem_info']);
            set_privilege($id_new, 'edit_own_midrange_content', $row['g_edit_topic']);
            set_privilege($id_new, 'edit_own_lowrange_content', $row['g_edit_posts']);
            set_privilege($id_new, 'delete_own_midrange_content', $row['g_delete_own_topics']);
            set_privilege($id_new, 'bypass_validation_lowrange_content', $row['g_avoid_q']);
            set_privilege($id_new, 'submit_midrange_content', $row['g_post_new_topics']);
            set_privilege($id_new, 'submit_lowrange_content', $row['g_reply_other_topics']);
            set_privilege($id_new, 'delete_own_lowrange_content', $row['g_delete_own_posts']);
            set_privilege($id_new, 'close_own_topics', $row['g_open_close_posts']);
            set_privilege($id_new, 'vote_in_polls', $row['g_vote_polls']);
            set_privilege($id_new, 'use_pt', $row['g_use_pm']);
            set_privilege($id_new, 'delete_account', $row['g_can_remove']);
            set_privilege($id_new, 'access_closed_site', $row['g_access_offline']);

            import_id_remap_put('group', strval($row['g_id']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_calendar(object $db, string $table_prefix, string $file_base)
    {
        require_code('calendar2');

        $rows = $db->query_select('cal_events AS ce', ['ce.event_id AS eventid', 'ce.event_member_id AS userid', 'ce.event_tz AS event_repeat', 'ce.event_recurring AS repeat_unit', 'ce.*']);
        foreach ($rows as $row) {
            if (import_check_if_imported('event', strval($row['eventid']))) {
                continue;
            }

            $submitter = import_id_remap_get('member', strval($row['userid']), true);
            if ($submitter === null) {
                $submitter = $GLOBALS['FORUM_DRIVER']->get_guest_id();
            }

            $recurrence = 'none';
            $recurrences = null;

            if ($row['event_repeat'] != 0) {
                switch ($row['repeat_unit']) {
                    case '1':
                        $recurrence = 'weekly';
                        break;
                    case '2':
                        $recurrence = 'monthly';
                        break;
                    case '3':
                        $recurrence = 'yearly';
                        break;
                }
            }

            $event_title = $row['event_title'];
            $event_text = $row['event_content'];
            $private_event = $row['event_private'];
            $start_year = intval(date('Y', $row['event_unix_from']));
            $start_month = intval(date('n', $row['event_unix_from']));
            $start_day = intval(date('j', $row['event_unix_from']));

            $end_year = intval(date('Y', $row['event_unix_to']));
            $end_month = intval(date('n', $row['event_unix_to']));
            $end_day = intval(date('j', $row['event_unix_to']));

            cns_over_msn();

            $id_new = add_calendar_event(db_get_first_id() + 1, $recurrence, $recurrences, 0, $event_title, $event_text, 3, $start_year, $start_month, $start_day, 'day_of_month', 0, 0, $end_year, $end_month, $end_day, 'day_of_month', null, null, null, 1, null, 1, 1, 1, 1, '', $submitter);
            if ($private_event == 1) {
                if (addon_installed('content_privacy')) {
                    $GLOBALS['SITE_DB']->query_insert('content_privacy', [
                        'content_type' => 'event',
                        'content_id' => strval($id_new),
                        'guest_view' => 0,
                        'member_view' => 0,
                        'friend_view' => 0,
                    ]);
                }
            }

            cns_over_local();

            import_id_remap_put('event', strval($row['eventid']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_members(object $db, string $table_prefix, string $file_base)
    {
        $row_start = 0;
        $rows = [];
        do {
            $query = 'SELECT * FROM ' . $table_prefix . 'members m LEFT JOIN ' . $table_prefix . 'members_converge c ON c.converge_id=m.id ORDER BY id';
            $rows = $db->query($query, 200, $row_start);
            foreach ($rows as $row) {
                $row['name'] = @html_entity_decode($row['name'], ENT_QUOTES);

                if (import_check_if_imported('member', strval($row['id']))) {
                    continue;
                }

                if ($row['id'] == 0) {
                    import_id_remap_put('member', '0', $GLOBALS['CNS_DRIVER']->get_guest_id());
                    continue;
                }
                $test = $GLOBALS['CNS_DRIVER']->get_member_from_username($row['name']);
                if ($test !== null) {
                    import_id_remap_put('member', strval($row['id']), $test);
                    continue;
                }

                if ($row['mgroup'] == 0) {
                    $row['mgroup'] = db_get_first_id(); // Not really necessary - but repairs problem in my test db
                }
                $primary_group = import_id_remap_get('group', strval($row['mgroup']));
                $language = ($row['language'] === null) ? '' : cms_strtoupper_ascii($row['language']);
                if ((!file_exists(get_custom_file_base() . '/lang_custom/' . $language)) && (!file_exists(get_file_base() . '/lang/' . $language))) {
                    $language = '';
                }

                $custom_fields = [];
                $signature = '';

                $rows2 = $db->query_select('member_extra', ['*'], ['id' => $row['id']]);
                $notes = '';
                if (array_key_exists(0, $rows2)) {
                    $row2 = $rows2[0];

                    $custom_fields[cns_make_predefined_content_field('about')] = @html_entity_decode($row2['bio'], ENT_QUOTES);
                    $notes = $row2['notes'];

                    cns_over_msn();
                    $signature = html_to_comcode($this->clean_ipb_post_2($row2['signature']));
                    cns_over_local();
                    $custom_fields = [
                        cns_make_predefined_content_field('interests') => $row2['interests'],
                        cns_make_predefined_content_field('location') => $row2['location'],
                    ];
                    if ($row2['website'] != '') {
                        $custom_fields[cns_make_predefined_content_field('website')] = (strlen($row2['website']) > 0) ? ('[url]' . $row2['website'] . '[/url]') : '';
                    }
                }
                $validated = 1;

                $password = $row['converge_pass_hash'];
                $type = 'converge';
                $salt = $row['converge_pass_salt'];
                if ($password === null) {
                    $password = '';
                }
                $id_new = cns_make_member(
                    $row['name'], // username
                    $password, // password
                    $row['email'], // email_address
                    $primary_group, // primary_group
                    null, // secondary_groups
                    $row['bday_day'], // dob_day
                    $row['bday_month'], // dob_month
                    $row['bday_year'], // dob_year
                    $custom_fields, // custom_fields
                    strval($row['time_offset']), // timezone
                    $language, // language
                    '', // theme
                    $row['title'], // title
                    '', // photo_url
                    null, // avatar_url
                    $signature, // signature
                    1, // preview_posts
                    1, // reveal_age
                    $row['view_sigs'], // views_signatures
                    $row['auto_track'], // auto_monitor_contrib_content
                    null, // smart_topic_notification
                    null, // mailing_list_style
                    1, // auto_mark_read
                    null, // sound_enabled
                    $row['email_pm'], // allow_emails
                    $row['email_pm'], // allow_emails_from_staff
                    0, // highlighted_name
                    '*', // pt_allow
                    '', // pt_rules_text
                    $validated, // validated
                    '', // validated_email_confirm_code
                    null, // on_probation_until
                    '0', // is_perm_banned
                    false, // check_correctness
                    $row['ip_address'], // ip_address
                    $type, // password_compatibility_scheme
                    $salt, // salt
                    $row['joined'], // join_time
                    $row['last_visit'] // last_visit_time
                );

                if ($row['mgroup'] == 5) {
                    $GLOBALS['FORUM_DB']->query_update('f_members', ['m_is_perm_banned' => '1'], ['id' => $id_new], '', 1);
                }

                import_id_remap_put('member', strval($row['id']), $id_new);
            }

            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_member_files(object $db, string $table_prefix, string $file_base)
    {
        global $STRICT_FILE;

        $row_start = 0;
        $rows = [];
        do {
            $query = 'SELECT * FROM ' . $table_prefix . 'members ORDER BY id';
            $rows = $db->query($query, 200, $row_start);
            foreach ($rows as $row) {
                if (import_check_if_imported('member_files', strval($row['id']))) {
                    continue;
                }

                $member_id = import_id_remap_get('member', strval($row['id']));

                $photo_url = '';

                $rows2 = $db->query_select('member_extra', ['*'], ['id' => $row['id']]);
                if (array_key_exists(0, $rows2)) {
                    $row2 = $rows2[0];

                    if ($row2['photo_type'] == 'upload') {
                        $filename = rawurldecode($row2['photo_location']);
                        if ((file_exists(get_custom_file_base() . '/uploads/cns_photos/' . $filename)) || (@rename($file_base . '/uploads/' . $filename, get_custom_file_base() . '/uploads/cns_photos/' . $filename))) {
                            $photo_url = 'uploads/cns_photos/' . $filename;
                            sync_file($photo_url);
                        } else {
                            if ($STRICT_FILE) {
                                warn_exit(do_lang_tempcode('MISSING_PHOTO', escape_html($filename)));
                            }
                            $photo_url = '';
                        }
                    } else {
                        $photo_url = $row2['photo_location'];
                        $rrpos = strrpos($photo_url, '/');
                        $filename = (($rrpos === false) ? $photo_url : substr($photo_url, $rrpos));
                    }

                    $row['avatar'] = $row2['avatar_location'];
                    $row['avatar_type'] = $row2['avatar_type'];
                }
                if (!array_key_exists('avatar', $row)) {
                    $row['avatar'] = null;
                }

                $avatar_url = '';
                switch ($row['avatar']) {
                    case null:
                        break;
                    case 'noavatar':
                        break;
                    default:
                        if (substr($row['avatar'], 0, 7) == 'upload:') {
                            $filename = substr($row['avatar'], 7);
                            if ((file_exists(get_custom_file_base() . '/uploads/cns_avatars/' . $filename)) || (@rename($file_base . '/uploads/' . $filename, get_custom_file_base() . '/uploads/cns_avatars/' . $filename))) {
                                $avatar_url = 'uploads/cns_avatars/' . $filename;
                                sync_file($avatar_url);
                            } else {
                                if ($STRICT_FILE) {
                                    warn_exit(do_lang_tempcode('MISSING_AVATAR', escape_html($filename)));
                                }
                                $avatar_url = '';
                            }
                        } elseif (url_is_local($row['avatar'])) {
                            $filename = rawurldecode($row['avatar']);
                            if ((file_exists(get_custom_file_base() . '/uploads/cns_avatars/' . $filename)) || (@rename($file_base . '/uploads/' . $filename, get_custom_file_base() . '/uploads/cns_avatars/' . $filename))) {
                                $avatar_url = 'uploads/cns_avatars/' . substr($filename, strrpos($filename, '/'));
                                sync_file($avatar_url);
                            } else {
                                // Try as a pack avatar then
                                $filename = rawurldecode($row['avatar']);
                                $striped_filename = str_replace('/', '_', $filename);
                                if ((file_exists(get_custom_file_base() . '/uploads/cns_avatars/' . $striped_filename)) || (@rename($file_base . '/style_avatars/' . $filename, get_custom_file_base() . '/uploads/cns_avatars/' . $striped_filename))) {
                                    $avatar_url = 'uploads/cns_avatars/' . substr($filename, strrpos($filename, '/'));
                                    sync_file($avatar_url);
                                } else {
                                    if ($STRICT_FILE) {
                                        warn_exit(do_lang_tempcode('MISSING_AVATAR', escape_html($filename)));
                                    }
                                    $avatar_url = '';
                                }
                            }
                        } else {
                            $avatar_url = $row['avatar'];
                        }
                }

                $GLOBALS['FORUM_DB']->query_update('f_members', ['m_avatar_url' => $avatar_url, 'm_photo_url' => $photo_url], ['id' => $member_id], '', 1);

                import_id_remap_put('member_files', strval($row['id']), 1);
            }

            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_custom_profile_fields(object $db, string $table_prefix, string $file_base)
    {
        $select = ['*'];
        $select[] = 'pf_position AS forder';
        $select[] = 'pf_type AS ftype';
        $select[] = 'pf_id AS fid';
        $select[] = 'pf_title AS ftitle';
        $select[] = 'pf_desc AS fdesc';
        $select[] = 'pf_member_hide AS fhide';
        $select[] = 'pf_member_edit AS fedit';
        $select[] = 'pf_show_on_reg AS freq';
        $rows = $db->query_select('pfields_data', $select);
        $members = $db->query_select('pfields_content', ['*']);
        foreach ($rows as $row) {
            if (import_check_if_imported('cpf', strval($row['fid']))) {
                continue;
            }

            $type = 'short_text';
            if ($row['ftype'] == 'text') {
                $type = 'short_text';
            } elseif ($row['ftype'] == 'area') {
                $type = 'long_text';
            }

            $id_new = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_custom_fields', 'id', [$GLOBALS['FORUM_DB']->translate_field_ref('cf_name') => $row['ftitle']]);
            if ($id_new === null) {
                $id_new = cns_make_custom_field($row['ftitle'], 0, $row['fdesc'], '', 1 - $row['fhide'], 1 - $row['fhide'], $row['fedit'], 0, $type, $row['freq'], 0, 0, $row['forder'], '', 0, '', 0, 0, '', '', '', true);
            }

            foreach ($members as $member) {
                cns_set_custom_field($member['member_id'], $id_new, @html_entity_decode($member['field_' . strval($row['fid'])], ENT_QUOTES));
            }

            import_id_remap_put('cpf', strval($row['fid']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_topics(object $db, string $table_prefix, string $file_base)
    {
        $row_start = 0;
        $rows = [];
        do {
            $rows = $db->query_select('topics', ['*'], [], 'ORDER BY tid', 200, $row_start);
            foreach ($rows as $row) {
                if (import_check_if_imported('topic', strval($row['tid']))) {
                    continue;
                }

                $forum_id = import_id_remap_get('forum', strval($row['forum_id']), true);
                if ($forum_id === null) {
                    //import_id_remap_put('topic', strval($row['tid']), -1);  Want to allow coming back if accidentally a forum was missed
                    continue;
                }

                $emoticon = '';
                switch ($row['icon_id']) {
                    case 1:
                        $emoticon = 'cns_emoticons/smile';
                        break;
                    case 2:
                        $emoticon = 'cns_emoticons/dry';
                        break;
                    case 3:
                        $emoticon = 'cns_emoticons/glee';
                        break;
                    case 4:
                        $emoticon = 'cns_emoticons/cheeky';
                        break;
                    case 5:
                        $emoticon = 'cns_emoticons/shocked';
                        break;
                    case 6:
                        $emoticon = 'cns_emoticons/lol';
                        break;
                    case 7:
                        $emoticon = 'cns_emoticons/angry';
                        break;
                    case 8:
                        $emoticon = 'cns_emoticons/sick';
                        break;
                    case 9:
                        $emoticon = 'cns_emoticons/confused';
                        break;
                    case 10:
                        $emoticon = 'cns_emoticons/cool';
                        break;
                    case 11:
                        $emoticon = 'cns_emoticons/thumbs';
                        break;
                    case 12:
                        $emoticon = 'cns_emoticons/wub';
                        break;
                    case 13:
                        $emoticon = 'cns_emoticons/upsidedown';
                        break;
                    case 14:
                        $emoticon = 'cns_emoticons/sarcy';
                        break;
                }

                $id_new = cns_make_topic($forum_id, @html_entity_decode($row['description'], ENT_QUOTES), $emoticon, $row['approved'], ($row['state'] == 'open') ? 1 : 0, $row['pinned'], 0, null, null, false, $row['views']);

                import_id_remap_put('topic', strval($row['tid']), $id_new);
            }

            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_posts(object $db, string $table_prefix, string $file_base)
    {
        global $STRICT_FILE;

        $row_start = 0;
        $rows = [];
        do {
            $rows = $db->query_select('posts', ['*'], [], 'ORDER BY pid', 200, $row_start);
            foreach ($rows as $row) {
                if (import_check_if_imported('post', strval($row['pid']))) {
                    continue;
                }

                $topic_id = import_id_remap_get('topic', strval($row['topic_id']), true);
                if ($topic_id === null) {
                    import_id_remap_put('post', strval($row['pid']), -1);
                    continue;
                }
                $member_id = import_id_remap_get('member', strval($row['author_id']), true);
                if ($member_id === null) {
                    $member_id = db_get_first_id();
                }

                // This speeds up addition... using the cache can reduce about 7/8 of a query per post on average
                global $TOPIC_FORUM_CACHE;
                if (array_key_exists($topic_id, $TOPIC_FORUM_CACHE)) {
                    $forum_id = $TOPIC_FORUM_CACHE[$topic_id];
                } else {
                    $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $topic_id]);
                    if ($forum_id === null) {
                        continue;
                    }
                    $TOPIC_FORUM_CACHE[$topic_id] = $forum_id;
                }

                $title = '';
                if ($row['new_topic'] == 1) {
                    $topics = $db->query_select('topics', ['*'], ['tid' => $row['topic_id']]);
                    $title = strip_html($topics[0]['title']);
                } elseif ($row['post_title'] !== null) {
                    $title = @html_entity_decode($row['post_title'], ENT_QUOTES);
                }

                cns_over_msn();
                $post = html_to_comcode($this->clean_ipb_post_2($row['post']));
                cns_over_local();

                $last_edit_by = null;
                if ($row['edit_name'] !== null) {
                    $last_edit_by = $GLOBALS['CNS_DRIVER']->get_member_from_username(@html_entity_decode($row['edit_name'], ENT_QUOTES));
                }

                $post = str_replace('style_emoticons/<#EMO_DIR#>', '[/html]{$BASE_URL}[html]/data/legacy_emoticons', $post);

                $end = 0;
                while (($pos = strpos($post, '[right]')) !== false) {
                    $e_pos = strpos($post, '[/right]', $pos);
                    if ($e_pos === false) {
                        break;
                    }
                    $end = $e_pos + strlen('[/right]');
                    $segment = substr($post, $pos, $end - $pos);
                    push_lax_comcode(true);
                    $_comcode = comcode_to_tempcode($segment, $member_id);
                    pop_lax_comcode();
                    $comcode = $_comcode->evaluate();
                    $comcode = str_replace($comcode, get_base_url(), '{$BASE_URL}');
                    $post = substr($post, 0, $pos) . $comcode . substr($post, $end);
                }

                $id_new = cns_make_post($topic_id, $title, $post, 0, $row['new_topic'] == 1, 1 - $row['queued'], 0, @html_entity_decode($row['author_name'], ENT_QUOTES), $row['ip_address'], $row['post_date'], $member_id, null, $row['edit_time'], $last_edit_by, false, false, $forum_id, false);

                import_id_remap_put('post', strval($row['pid']), $id_new);
            }

            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_post_files(object $db, string $table_prefix, string $file_base)
    {
        global $STRICT_FILE;
        require_code('attachments2');
        require_code('attachments3');
        require_code('images');

        $row_start = 0;
        $select = ['pid', 'post_date'];
        $rows = [];
        do {
            $rows = $db->query('posts', $select, [], 'ORDER BY pid', 200, $row_start);
            foreach ($rows as $row) {
                if (import_check_if_imported('post_files', strval($row['pid']))) {
                    continue;
                }

                $post_id = import_id_remap_get('post', strval($row['pid']), true);
                if ($post_id === null) {
                    continue;
                }

                $post_row = $GLOBALS['FORUM_DB']->query_select('f_posts', ['p_time', 'p_poster', 'p_post'], ['id' => $post_id], '', 1);
                if (!array_key_exists(0, $post_row)) {
                    import_id_remap_put('post_files', strval($row['pid']), 1);
                    continue; // Orphaned post
                }
                $post = get_translated_text($post_row[0]['p_post']);
                $lang_id = $post_row[0]['p_post'];
                $member_id = import_id_remap_get('member', $post_row[0]['p_poster']);
                $post_date = $post_row[0]['p_time'];

                $attachments = $db->query_select('attachments', ['*'], ['attach_rel_id' => $row['pid'], 'attach_rel_module' => 'post']);
                $i = 0;
                $a_id = [];
                foreach ($attachments as $attachment) {
                    $target_path = get_custom_file_base() . '/uploads/attachments/' . $attachment['attach_location'];
                    if ((file_exists(get_custom_file_base() . '/uploads/attachments/' . $attachment['attach_location'])) || (@rename($file_base . '/uploads/' . $attachment['attach_location'], $target_path))) {
                        $url = 'uploads/attachments/' . $attachment['attach_location'];
                        sync_file($url);
                        $thumb_url = '';
                        $a_id[$i] = $GLOBALS['FORUM_DB']->query_insert('attachments', ['a_member_id' => $member_id, 'a_file_size' => $attachment['attach_filesize'], 'a_url' => $url, 'a_thumb_url' => $thumb_url, 'a_original_filename' => $attachment['attach_file'], 'a_num_downloads' => $attachment['attach_hits'], 'a_last_downloaded_time' => null, 'a_add_time' => $post_date, 'a_description' => ''], true);
                        $has_attachment = true;
                    } else {
                        if ($STRICT_FILE) {
                            warn_exit(do_lang_tempcode('MISSING_ATTACHMENT', $attachment['attach_location']));
                        }
                    }
                    $i++;
                }

                if (!empty($a_id)) {
                    $i = 0;
                    foreach ($attachments as $attachment) {
                        if (array_key_exists($i, $a_id)) {
                            $GLOBALS['FORUM_DB']->query_insert('attachment_refs', ['r_referer_type' => 'cns_post', 'r_referer_id' => strval($post_id), 'a_id' => $a_id[$i]]);
                            $post .= "\n\n" . '[attachment]' . $a_id[$i] . '[/attachment]';
                        }
                        $i++;
                    }
                    cns_over_msn();
                    $GLOBALS['FORUM_DB']->query_update('f_posts', update_lang_comcode_attachments('p_post', $lang_id, $post, 'cns_post', strval($post_id)), ['id' => $post_id], '', 1);
                    cns_over_local();
                }

                import_id_remap_put('post_files', strval($row['pid']), 1);
            }

            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_polls_and_votes(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('polls', ['*']);
        foreach ($rows as $row) {
            if (import_check_if_imported('poll', strval($row['pid']))) {
                continue;
            }

            $topic_id = import_id_remap_get('topic', strval($row['tid']), true);
            if ($topic_id === null) {
                continue;
            }

            $topic = $db->query_select('topics', ['*'], ['tid' => $row['tid']]);
            $is_open = ($topic[0]['poll_state'] == 'open') ? 1 : 0;

            $_answers = unserialize($row['choices']);
            $answers = []; // An array of answers
            foreach ($_answers as $answer) {
                $answers[] = @html_entity_decode($answer[1], ENT_QUOTES);
            }

            $rows2 = $db->query_select('voters', ['*'], ['tid' => $row['tid']]);

            $id_new = cns_make_poll($topic_id, @html_entity_decode($row['poll_question'], ENT_QUOTES), 0, $is_open, 1, 1, 0, $answers, 0, 0, 1, 0, false);

            $answers = collapse_1d_complexity('id', $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['id'], ['pa_poll_id' => $id_new])); // Effectively, a remapping from IPB vote number to Composr vote number
            $vote_list = [];
            $j = 0;
            foreach ($_answers as $answer) {
                for ($i = 0; $i < intval($answer[2]); $i++) { // For each vote of this answer
                    array_push($vote_list, $answers[$j]); // Push the mapped Composr vote ID onto the list of votes
                }
                $j++;
            }

            foreach ($rows2 as $row2) { // For all votes. We have to match votes to members - but it is arbitrary because no such mapping is stored from IPB
                $member_id = import_id_remap_get('member', $row2['member_id'], true);
                if ($member_id === null) {
                    $member_id = db_get_first_id();
                }

                if ($member_id != $GLOBALS['CNS_DRIVER']->get_guest_id()) {
                    $answer = array_pop($vote_list);
                    if ($answer === null) {
                        $answer = -1;
                    }
                    $GLOBALS['FORUM_DB']->query_insert('f_poll_votes', ['pv_poll_id' => $id_new, 'pv_member_id' => $member_id, 'pv_answer_id' => $answer, 'pv_ip' => $row2['ip_address'], 'pv_revoked' => 0, 'pv_date_time' => $row2['vote_date'], 'pv_cache_points' => 0]);
                }
            }

            import_id_remap_put('poll', strval($row['pid']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_multi_moderations(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('topic_mmod', ['*']);
        foreach ($rows as $row) {
            if (import_check_if_imported('multi_moderation', strval($row['mm_id']))) {
                continue;
            }

            if ($row['topic_move'] > 0) {
                $move_to = import_id_remap_get('forum', strval($row['topic_move']), true);
            } else {
                $move_to = null;
            }
            $pin_state = null;
            if ($row['topic_pin'] == 'pin') {
                $pin_state = 1;
            } elseif ($row['topic_pin'] == 'unpin') {
                $pin_state = 0;
            }
            $open_state = null;
            if ($row['topic_state'] == 'close') {
                $open_state = 0;
            } elseif ($row['topic_state'] == 'open') {
                $open_state = 1;
            }
            $id_new = cns_make_multi_moderation(@html_entity_decode($row['mm_title'], ENT_QUOTES), '[html]' . $row['topic_reply_content'] . '[/html]', $move_to, $pin_state, $open_state);

            import_id_remap_put('multi_moderation', strval($row['mm_id']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_notifications(object $db, string $table_prefix, string $file_base)
    {
        require_code('notifications');

        $rows = $db->query_select('forum_tracker', ['*']);
        foreach ($rows as $row) {
            if (import_check_if_imported('forum_notification', strval($row['frid']))) {
                continue;
            }

            $member_id = import_id_remap_get('member', $row['member_id'], true);
            if ($member_id === null) {
                continue;
            }
            $forum_id = import_id_remap_get('forum', strval($row['forum_id']), true);
            if ($forum_id === null) {
                continue;
            }
            enable_notifications('cns_topic', 'forum:' . strval($forum_id), $member_id);

            import_id_remap_put('forum_notification', strval($row['frid']), 1);
        }
        $row_start = 0;
        do {
            $rows = $db->query_select('tracker', ['*'], [], '', 200, $row_start);
            foreach ($rows as $row) {
                if (import_check_if_imported('topic_notification', strval($row['trid']))) {
                    continue;
                }

                $member_id = import_id_remap_get('member', strval($row['member_id']), true);
                if ($member_id === null) {
                    continue;
                }
                $topic_id = import_id_remap_get('topic', strval($row['topic_id']), true);
                if ($topic_id === null) {
                    continue;
                }
                enable_notifications('cns_topic', strval($topic_id), $member_id);

                import_id_remap_put('topic_notification', strval($row['trid']), 1);
            }

            $row_start += 200;
        } while (!empty($rows));
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_cns_warnings(object $db, string $table_prefix, string $file_base)
    {
        $select = ['*'];
        $select[] = 'wlog_id AS id';
        $select[] = 'wlog_mid';
        $select[] = 'wlog_notes';
        $select[] = 'wlog_date';
        $select[] = 'wlog_addedby';
        $select[] = 'wlog_contact_content';
        $rows = $db->query_select('warn_logs', $select);
        foreach ($rows as $row) {
            if (import_check_if_imported('warning', strval($row['id']))) {
                continue;
            }

            $member_id = import_id_remap_get('member', strval($row['wlog_mid']), true);
            if ($member_id === null) {
                continue;
            }
            $by = import_id_remap_get('member', strval($row['wlog_addedby']));
            $id_new = cns_make_warning($member_id, @html_entity_decode($row['wlog_contact_content'], ENT_QUOTES), $by, $row['wlog_date']);

            import_id_remap_put('warning', strval($row['id']), $id_new);
        }
    }

    /**
     * Standard import function.
     *
     * @param  object $db The database connector to import from
     * @param  string $table_prefix The table prefix the target prefix is using
     * @param  PATH $file_base The base directory we are importing from
     */
    public function import_wordfilter(object $db, string $table_prefix, string $file_base)
    {
        $rows = $db->query_select('badwords', ['*']);
        $done = [];
        foreach ($rows as $row) {
            if (isset($done[$row['type']])) {
                continue;
            }
            add_wordfilter_word($row['type'], $row['swop'], $row['m_exact']);
            $done[$row['type']] = true;
        }
    }
}
