<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_admin_stats_transactions extends CMSStatsProvider
{
    /**
     * Find metadata about stats graphs that are provided by this stats hook.
     *
     * @param  boolean $for_kpi Whether this is for setting up a KPI
     * @return ?array Map of metadata (null: hook is disabled)
     */
    public function info(bool $for_kpi = false) : ?array
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        require_lang('ecommerce');
        require_code('ecommerce');

        $products_in_transactions = collapse_1d_complexity('t_type_code', $GLOBALS['SITE_DB']->query_select('ecom_transactions', ['DISTINCT t_type_code']));

        $type_codes = [];
        $products = find_all_products();
        foreach ($products as $type_code => $details) {
            if (in_array($type_code, $products_in_transactions)) {
                $type_codes[$type_code] = $details['item_name'];
            }
        }

        return [
            'transaction_quantity' => [
                'label' => do_lang_tempcode('TRANSACTIONS'),
                'category' => 'economic_activity',
                'filters' => [
                    'transaction_quantity__month_range' => new CMSStatsDateMonthRangeFilter('transaction_quantity__month_range', do_lang_tempcode('DATE_RANGE'), null, $for_kpi),
                    'transaction_quantity__product_name' => new CMSStatsListFilter('transaction_quantity__product_name', do_lang_tempcode('PRODUCT'), $type_codes),
                ],
                'pivot' => new CMSStatsDatePivot('transaction_quantity__pivot', $this->get_date_pivots(!$for_kpi)),
                'support_kpis' => self::KPI_HIGH_IS_GOOD,
            ],
            'transaction_income' => [
                'label' => do_lang_tempcode('INCOME'),
                'category' => 'economic_activity',
                'filters' => [
                    'transaction_income__month_range' => new CMSStatsDateMonthRangeFilter('transaction_income__month_range', do_lang_tempcode('DATE_RANGE'), null, $for_kpi),
                    'transaction_income__product_name' => new CMSStatsListFilter('transaction_income__product_name', do_lang_tempcode('PRODUCT'), $type_codes),
                ],
                'pivot' => new CMSStatsDatePivot('transaction_income__pivot', $this->get_date_pivots(!$for_kpi)),
                'support_kpis' => self::KPI_HIGH_IS_GOOD,
            ],
        ];
    }

    /**
     * Preprocess raw data in the database into something we can efficiently draw graphs/conclusions from.
     *
     * @param  TIME $start_time Start timestamp
     * @param  TIME $end_time End timestamp
     * @param  array $data_buckets Map of data buckets; a map of bucket name to nested maps with the following maps in sequence: 'month', 'pivot', 'value' (then further map data) ; extended and returned by reference
     */
    public function preprocess_raw_data(int $start_time, int $end_time, array &$data_buckets)
    {
        $server_timezone = get_server_timezone();

        $max = 1000;
        $start = 0;

        $date_pivots = $this->get_date_pivots();

        $query = 'SELECT t_time,t_type_code,t_amount FROM ' . get_table_prefix() . 'ecom_transactions WHERE ';
        $query .= db_string_equal_to('t_status', 'Completed') . ' AND ';
        $query .= 't_time>=' . strval($start_time) . ' AND ';
        $query .= 't_time<=' . strval($end_time);
        $query .= ' ORDER BY t_time';
        do {
            $rows = $GLOBALS['SITE_DB']->query($query, $max, $start);
            foreach ($rows as $row) {
                $timestamp = $row['t_time'];
                $timestamp = tz_time($timestamp, $server_timezone);

                $month = get_stats_month_for_timestamp($timestamp);

                $product_name = $row['t_type_code'];

                foreach (array_keys($date_pivots) as $pivot) {
                    $pivot_value = $this->calculate_date_pivot_value($pivot, $timestamp);

                    if (!isset($data_buckets['transaction_quantity'][$month][$pivot][$pivot_value][$product_name])) {
                        $data_buckets['transaction_quantity'][$month][$pivot][$pivot_value][$product_name] = 0;
                    }
                    $data_buckets['transaction_quantity'][$month][$pivot][$pivot_value][$product_name]++;

                    if (!isset($data_buckets['transaction_income'][$month][$pivot][$pivot_value][$product_name])) {
                        $data_buckets['transaction_income'][$month][$pivot][$pivot_value][$product_name] = 0;
                    }
                    $data_buckets['transaction_income'][$month][$pivot][$pivot_value][$product_name] += $row['t_amount'];
                }
            }

            $start += $max;
        } while (!empty($rows));
    }

    /**
     * Generate final data from preprocessed data.
     *
     * @param  string $bucket Data bucket we want data for
     * @param  string $pivot Pivot value
     * @param  array $filters Map of filters (including pivot if applicable)
     * @return array Final data in standardised map format
     */
    public function generate_final_data(string $bucket, string $pivot, array $filters) : array
    {
        $data = $this->fill_data_by_date_pivots($pivot, $filters[$bucket . '__month_range'][0], $filters[$bucket . '__month_range'][1]);

        $where = [
            'p_bucket' => $bucket,
            'p_pivot' => $pivot,
        ];
        $extra = '';
        $extra .= ' AND p_month>=' . strval($filters[$bucket . '__month_range'][0]);
        $extra .= ' AND p_month<=' . strval($filters[$bucket . '__month_range'][1]);
        $data_rows = $GLOBALS['SITE_DB']->query_select('stats_preprocessed', ['p_data'], $where, $extra);
        foreach ($data_rows as $data_row) {
            $_data = @unserialize($data_row['p_data']);
            foreach ($_data as $pivot_value => $__) {
                $pivot_value = $this->make_date_pivot_value_nice($pivot, $pivot_value);

                foreach ($__ as $product_name => $amount) {
                    if ((!empty($filters[$bucket . '__product_name'])) && (!simulated_wildcard_match($filters[$bucket . '__product_name'], $product_name, true))) {
                        continue;
                    }

                    if (!isset($data[$pivot_value])) {
                        $data[$pivot_value] = 0;
                    }
                    $data[$pivot_value] += $amount;
                }
            }
        }

        if ($bucket == 'transaction_income') {
            return [
                'type' => null,
                'data' => $data,
                'x_axis_label' => do_lang_tempcode('TIME_IN_TIMEZONE', escape_html(make_nice_timezone_name(get_site_timezone()))),
                'y_axis_label' => do_lang_tempcode('_INCOME', escape_html(get_option('currency'))),
            ];
        }

        return [
            'type' => null,
            'data' => $data,
            'x_axis_label' => do_lang_tempcode('TIME_IN_TIMEZONE', escape_html(make_nice_timezone_name(get_site_timezone()))),
            'y_axis_label' => do_lang_tempcode('COUNT_TOTAL'),
        ];
    }
}
