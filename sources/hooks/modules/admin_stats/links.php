<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    stats
 */

/**
 * Hook class.
 */
class Hook_admin_stats_links extends CMSStatsProvider
{
    /**
     * Get a list of top events.
     *
     * @return array List of events
     */
    protected function get_top_urls() : array
    {
        static $urls = null;
        if ($urls !== null) {
            return $urls;
        }
        $urls = [];
        $url_rows = $GLOBALS['SITE_DB']->query_select('stats_known_links', ['*'], [], 'ORDER BY l_times_seen DESC', 50);
        foreach ($url_rows as $url_row) {
            $urls[$url_row['l_url']] = $url_row['l_url'] . ' (' . integer_format($url_row['l_times_seen']) . ')';
        }
        asort($urls);
        return $urls;
    }

    /**
     * Find metadata about stats graphs that are provided by this stats hook.
     *
     * @param  boolean $for_kpi Whether this is for setting up a KPI
     * @return ?array Map of metadata (null: hook is disabled)
     */
    public function info(bool $for_kpi = false) : ?array
    {
        $top_urls = $this->get_top_urls();

        require_code('locations');

        return [
            'link_tracking' => [
                'label' => do_lang_tempcode('LINK_TRACKING'),
                'category' => 'conversions',
                'filters' => [
                    'link_tracking__month_range' => new CMSStatsDateMonthRangeFilter('link_tracking__month_range', do_lang_tempcode('DATE_RANGE'), null, $for_kpi),
                    'link_tracking__url' => new CMSStatsListFilter('link_tracking__url', do_lang_tempcode('URL'), $top_urls),
                    'link_tracking__country' => has_geolocation_data() ? new CMSStatsListFilter('link_tracking__country', do_lang_tempcode('VISITOR_COUNTRY'), find_countries()) : null,
                ],
                'pivot' => new CMSStatsDatePivot('link_tracking__pivot', $this->get_date_pivots(!$for_kpi)),
            ],
        ];
    }

    /**
     * Preprocess raw data in the database into something we can efficiently draw graphs/conclusions from.
     *
     * @param  TIME $start_time Start timestamp
     * @param  TIME $end_time End timestamp
     * @param  array $data_buckets Map of data buckets; a map of bucket name to nested maps with the following maps in sequence: 'month', 'pivot', 'value' (then further map data) ; extended and returned by reference
     */
    public function preprocess_raw_data(int $start_time, int $end_time, array &$data_buckets)
    {
        $server_timezone = get_server_timezone();

        $max = 1000;
        $start = 0;

        $top_urls = $this->get_top_urls();

        $links_seen = [];

        $date_pivots = $this->get_date_pivots();

        $urls_seen = [];

        $query = 'SELECT * FROM ' . get_table_prefix() . 'stats_link_tracker WHERE ';
        $query .= 'c_date_and_time>=' . strval($start_time) . ' AND ';
        $query .= 'c_date_and_time<=' . strval($end_time);
        $query .= ' ORDER BY c_date_and_time';
        do {
            $rows = $GLOBALS['SITE_DB']->query($query, $max, $start);
            foreach ($rows as $link_row) {
                $timestamp = $link_row['c_date_and_time'];
                $timestamp = tz_time($timestamp, $server_timezone);

                $month = get_stats_month_for_timestamp($timestamp);

                $country_code = geolocate_ip($link_row['c_ip_address']);
                $url = $link_row['c_url'];

                if (!isset($urls_seen[$url])) {
                    $urls_seen[$url] = 0;
                }
                $urls_seen[$url]++;

                foreach (array_keys($date_pivots) as $pivot) {
                    $pivot_value = $this->calculate_date_pivot_value($pivot, $timestamp);

                    if (!isset($data_buckets['link_tracking'][$month][$pivot][$pivot_value][$country_code][$url])) {
                        $data_buckets['link_tracking'][$month][$pivot][$pivot_value][$country_code][$url] = 0;
                    }
                    $data_buckets['link_tracking'][$month][$pivot][$pivot_value][$country_code][$url]++;
                }
            }

            $start += $max;
        } while (!empty($rows));

        foreach ($urls_seen as $url => $times_seen) {
            $times_seen_before = $GLOBALS['SITE_DB']->query_select_value_if_there('stats_known_links', 'l_times_seen', ['l_url' => $url]);
            if ($times_seen_before === null) {
                $GLOBALS['SITE_DB']->query_insert('stats_known_links', [
                    'l_url' => $url,
                    'l_times_seen' => $times_seen,
                ]);
            } else {
                $GLOBALS['SITE_DB']->query_update('stats_known_links', [
                    'l_times_seen' => $times_seen + $times_seen_before,
                ], [
                    'l_url' => $url,
                ], '', 1);
            }
        }
    }

    /**
     * Generate final data from preprocessed data.
     *
     * @param  string $bucket Data bucket we want data for
     * @param  string $pivot Pivot value
     * @param  array $filters Map of filters (including pivot if applicable)
     * @return ?array Final data in standardised map format (null: could not generate)
     */
    public function generate_final_data(string $bucket, string $pivot, array $filters) : ?array
    {
        $range = $this->convert_month_range_filter_to_pair($filters[$bucket . '__month_range']);

        $data = $this->fill_data_by_date_pivots($pivot, $range[0], $range[1]);

        $where = [
            'p_bucket' => $bucket,
            'p_pivot' => $pivot,
        ];
        $extra = '';
        $extra .= ' AND p_month>=' . strval($range[0]);
        $extra .= ' AND p_month<=' . strval($range[1]);
        $data_rows = $GLOBALS['SITE_DB']->query_select('stats_preprocessed', ['p_data'], $where, $extra);

        foreach ($data_rows as $data_row) {
            $_data = @unserialize($data_row['p_data']);
            foreach ($_data as $pivot_value => $_) {
                $pivot_value = $this->make_date_pivot_value_nice($pivot, $pivot_value);

                foreach ($_ as $country => $__) {
                    if ((!empty($filters[$bucket . '__country'])) && ($filters[$bucket . '__country'] != $country)) {
                        continue;
                    }

                    foreach ($__ as $url => $value) {
                        if ((!empty($filters[$bucket . '__url'])) && ($filters[$bucket . '__url'] != $url)) {
                            continue;
                        }

                        if (!isset($data[$pivot_value])) {
                            $data[$pivot_value] = 0;
                        }
                        $data[$pivot_value] += $value;
                    }
                }
            }
        }

        return [
            'type' => null,
            'data' => $data,
            'x_axis_label' => do_lang_tempcode('TIME_IN_TIMEZONE', escape_html(make_nice_timezone_name(get_site_timezone()))),
            'y_axis_label' => do_lang_tempcode('COUNT_TOTAL'),
        ];
    }
}
