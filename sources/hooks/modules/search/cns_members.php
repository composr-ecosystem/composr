<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

/**
 * Hook class.
 */
class Hook_search_cns_members extends FieldsSearchHook
{
    /**
     * Find details for this search hook.
     *
     * @param  boolean $check_permissions Whether to check permissions
     * @param  ?MEMBER $member_id The member ID to check with (null: current member)
     * @return ~?array Map of search hook details (null: hook is disabled) (false: access denied)
     */
    public function info(bool $check_permissions = true, ?int $member_id = null)
    {
        if ($member_id === null) {
            $member_id = get_member();
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        if ($check_permissions) {
            if (!has_actual_page_access($member_id, 'members')) {
                return false;
            }
        }

        if (($GLOBALS['FORUM_DRIVER']->get_num_members() <= 3) && (get_param_string('id', '') != 'cns_members') && (get_param_integer('search_cns_members', 0) != 1)) {
            return null;
        }

        require_lang('cns');

        $info = [];
        $info['lang'] = do_lang_tempcode('MEMBERS');
        $info['default'] = (get_option('search_cns_members') == '1');
        $info['special_on'] = [];
        $info['special_off'] = [];
        $info['user_label'] = do_lang_tempcode('USERNAME');
        $info['days_label'] = do_lang_tempcode('JOINED_AGO');
        $info['days_label'] = do_lang_tempcode('JOINED_DATE_RANGE');

        $extra_sort_fields = [];
        if (has_privilege($member_id, 'view_profiles')) {
            require_code('cns_members');
            $rows = cns_get_all_custom_fields_match(
                null, // groups
                has_privilege($member_id, 'view_any_profile_field') ? null : 1, // public view
                has_privilege($member_id, 'view_any_profile_field') ? null : 1 // owner view
            );
            foreach ($rows as $row) {
                $extra_sort_fields['field_' . strval($row['id'])] = $row['trans_name'];
            }
        }
        $info['extra_sort_fields'] = $extra_sort_fields;

        $info['permissions'] = [];

        return $info;
    }

    /**
     * Get a list of extra fields to ask for.
     *
     * @return ?array A list of maps specifying extra fields (null: no tree)
     */
    public function get_fields() : ?array
    {
        require_code('cns_members');

        $fields = [];
        if (has_privilege(get_member(), 'view_profiles')) {
            $rows = cns_get_all_custom_fields_match(
                null, // groups
                has_privilege(get_member(), 'view_any_profile_field') ? null : 1, // public view
                has_privilege(get_member(), 'view_any_profile_field') ? null : 1 // owner view
            );
            require_code('fields');
            foreach ($rows as $row) {
                if ($row['cf_allow_template_search'] == 0) {
                    continue;
                }

                $ob = get_fields_hook($row['cf_type']);
                $temp = $ob->get_search_inputter($row);
                if ($temp === null) {
                    $type = '_TEXT';
                    $special = make_string_tempcode(get_param_string('option_' . strval($row['id']), ''));
                    $display = $row['trans_name'];
                    $fields[] = ['NAME' => strval($row['id']), 'DISPLAY' => $display, 'TYPE' => $type, 'SPECIAL' => $special];
                } else {
                    $fields[] = $temp;
                }
            }

            $age_range = get_param_string('option__age_range', get_param_string('option__age_range_from', '') . '-' . get_param_string('option__age_range_to', ''));
            $fields[] = ['NAME' => '_age_range', 'DISPLAY' => do_lang_tempcode('AGE_RANGE'), 'TYPE' => '_TEXT', 'SPECIAL' => $age_range];
        }

        $where = '1=1';
        if (!has_privilege(get_member(), 'see_hidden_groups')) {
            $members_groups = $GLOBALS['CNS_DRIVER']->get_members_groups(get_member());
            $where .= ' AND (g_hidden=0 OR g.id IN (' . implode(',', array_map('strval', $members_groups)) . '))';
        }
        $group_count = $GLOBALS['FORUM_DB']->query_select_value('f_groups g', 'COUNT(*)');
        if ($group_count > 300) {
            $where .= ' AND g_is_private_club=0';
        }
        $rows = $GLOBALS['FORUM_DB']->query('SELECT g.id,g_name,g_order FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_groups g WHERE ' . $where . ' ORDER BY g_order,' . $GLOBALS['FORUM_DB']->translate_field_ref('g_name'), null, 0, false, false, ['g_name' => 'SHORT_TRANS']);
        $groups = form_input_list_entry('', false, '---');
        $default_group = get_param_string('option__user_group', '');
        $group_titles = [];
        $bits = explode(',', $default_group);
        foreach ($rows as $row) {
            $name = get_translated_text($row['g_name'], $GLOBALS['FORUM_DB']);

            if ($row['id'] == db_get_first_id()) {
                continue;
            }
            $groups->attach(form_input_list_entry(strval($row['id']), in_array(strval($row['id']), $bits), $name));
            $group_titles[$row['id']] = $name;
        }
        if (strpos($default_group, ',') !== false) {
            $bits = explode(',', $default_group);
            $combination = new Tempcode();
            foreach ($bits as $bit) {
                if (preg_match('#^\d+$#', $bit) == 0) {
                    continue;
                }

                if (!$combination->is_empty()) {
                    $combination->attach(do_lang_tempcode('LIST_SEP'));
                }
                if (isset($group_titles[intval($bit)])) {
                    $combination->attach(escape_html($group_titles[intval($bit)]));
                } else {
                    $combination->attach(do_lang_tempcode('UNKNOWN_EM'));
                }
            }
            $groups->attach(form_input_list_entry(strval($default_group), true, do_lang_tempcode('USERGROUP_SEARCH_COMBO', $combination)));
        }
        $fields[] = ['NAME' => '_user_group', 'DISPLAY' => do_lang_tempcode('USERGROUP'), 'TYPE' => '_MULTI_LIST', 'SPECIAL' => $groups];
        return $fields;
    }

    /**
     * Run function for search results.
     *
     * @param  string $search_query Search query
     * @param  string $content_where WHERE clause that selects the content according to the search query; passed in addition to $search_query to avoid unnecessary reparsing.  ? refers to the yet-unknown field name (blank: full-text search)
     * @param  string $where_clause Initial WHERE clause that already takes $search_under into account (should be nothing else unless it is guaranteed hook will use the global get_search_rows function)
     * @param  string $search_under Comma-separated list of categories to search under
     * @param  boolean $only_search_meta Whether to only do a META (tags) search
     * @param  boolean $only_titles Whether only to search titles (as opposed to both titles and content)
     * @param  integer $max Start position in total results
     * @param  integer $start Maximum results to return in total
     * @param  string $sort The sort type (gets remapped to a field in this function)
     * @param  ID_TEXT $direction Order direction
     * @param  SHORT_TEXT $author Username/Author to match for
     * @param  ?MEMBER $author_id Member-ID to match for (null: unknown)
     * @param  mixed $cutoff Cutoff date (TIME or a pair representing the range or null)
     * @return array List of maps (template, orderer)
     */
    public function run(string $search_query, string $content_where, string $where_clause, string $search_under, bool $only_search_meta, bool $only_titles, int $max, int $start, string $sort, string $direction, string $author, ?int $author_id, $cutoff) : array
    {
        require_code('cns_members');

        $remapped_orderer = '';
        switch ($sort) {
            case 'title':
                $remapped_orderer = 'm_username';
                break;

            case 'add_date':
                $remapped_orderer = 'm_join_time';
                break;

            case 'relevance':
            case 'average_rating':
            case 'compound_rating':
                break;

            default:
                if (preg_match('#^field_\d+$#', $sort) != 0) {
                    $remapped_orderer = $sort;
                }
                break;
        }

        require_lang('cns');

        $indexes = collapse_2d_complexity('i_fields', 'i_name', $GLOBALS['FORUM_DB']->query_select('db_meta_indices', ['i_fields', 'i_name'], ['i_table' => 'f_member_custom_fields'], 'ORDER BY i_name'));
        // ^ the ORDER BY above causes fulltext indexes to be given precedence in $indexes for any field_x

        // Calculate our where clause (search)
        if ($author != '') {
            $where_clause .= ' AND ';
            $where_clause .= db_string_equal_to('m_username', $author);
        }
        $this->_handle_date_check($cutoff, 'm_join_time', $where_clause);
        $raw_fields = ['m_username'];
        $trans_fields = [];
        $rows = cns_get_all_custom_fields_match(
            null, // groups
            has_privilege(get_member(), 'view_any_profile_field') ? null : 1, // public view
            has_privilege(get_member(), 'view_any_profile_field') ? null : 1 // owner view
        );
        $table = '';
        require_code('fields');
        $non_trans_fields = 0;
        foreach ($rows as $i => $row) {
            $ob = get_fields_hook($row['cf_type']);
            list(, , $storage_type) = $ob->get_field_value_row_bits($row);
            if (strpos($storage_type, '_trans') === false) {
                $non_trans_fields++;
            }
        }
        $reduced_ft_searching = ((get_param_integer('force_like', 0) == 0) && ($non_trans_fields > 16)); // MySQL limit for fulltext index querying. We'll therefore not throw EVERY searchable field into the search query (only core ones, and ones we're explicitly filtering on)
        $gdpr_log = false;
        foreach ($rows as $i => $row) {
            if (($row['cf_allow_template_search'] == 0) && ($row['cf_include_in_main_search'] == 0)) {
                continue; // Nothing to do
            }

            $ob = get_fields_hook($row['cf_type']);
            list(, , $storage_type) = $ob->get_field_value_row_bits($row);

            $fulltext_possible = ($GLOBALS['SITE_DB']->has_full_text()) && (array_key_exists('field_' . strval($row['id']), $indexes)) && ($indexes['field_' . strval($row['id'])][0] == '#');
            $fulltext_searched = $fulltext_possible;

            if ($row['cf_allow_template_search'] == 1) {
                // Filter form
                $param = get_param_string('option_' . strval($row['id']), '', INPUT_FILTER_GET_COMPLEX);
                if ($param != '') {
                    if (!$gdpr_log) {
                        if (has_privilege(get_member(), 'view_any_profile_field')) {
                            log_it('MEMBER_SEARCH');
                        }
                        $gdpr_log = true;
                    }

                    $where_clause .= ' AND ';

                    if ($storage_type == 'integer') {
                        $temp = '?=' . strval(intval($param));
                    } elseif ($storage_type == 'float') {
                        $temp = '?=' . float_to_raw_string(floatval($param));
                    } elseif ($storage_type == 'list') {
                        $temp = db_string_equal_to('?', $param);
                    } elseif (($fulltext_searched) && (!is_under_radar($param))) { // Anything is fulltext-searched, if possible
                        $temp = $GLOBALS['SITE_DB']->full_text_assemble('"' . $param . '"');
                    } else {
                        list($temp,) = db_like_assemble($param);
                    }
                    if ((($row['cf_type'] == 'short_trans') || ($row['cf_type'] == 'long_trans') || ($row['cf_type'] == 'posting_field') || ($row['cf_type'] == 'short_trans_multi')) && (multi_lang_content())) {
                        // Goes through translate table
                        $where_clause .= preg_replace('#\?#', 't' . strval(count($trans_fields) + 2/*for the 2 fields prepended to $trans_fields in the get_search_rows call*/) . '.text_original', $temp);
                    } else {
                        // Direct field access
                        $where_clause .= preg_replace('#\?#', 'field_' . strval($row['id']), $temp);
                    }
                }
            }

            // Standard search
            if ($row['cf_include_in_main_search'] == 1) {
                if ($fulltext_searched) {
                    if (strpos($storage_type, '_trans') === false) {
                        if (!$reduced_ft_searching) {
                            $raw_fields[] = 'field_' . strval($row['id']);
                        }
                    } else {
                        if ((multi_lang_content()) || (!$reduced_ft_searching)) {
                            $trans_fields['field_' . strval($row['id'])] = 'LONG_TRANS__COMCODE';
                        }
                    }
                }
            }
        }
        $age_range = get_param_string('option__age_range', get_param_string('option__age_range_from', '') . '-' . get_param_string('option__age_range_to', ''));
        if (($age_range != '') && ($age_range != '-')) {
            $bits = explode('-', $age_range);
            if (count($bits) == 2) {
                $lower = strval(intval(date('Y', utctime_to_usertime())) - intval($bits[0]));
                $upper = strval(intval(date('Y', utctime_to_usertime())) - intval($bits[1]));

                $where_clause .= ' AND ';
                $where_clause .= '(m_dob_year<' . $lower . ' OR m_dob_year=' . $lower . ' AND (m_dob_month<' . date('m') . ' OR m_dob_month=' . date('m') . ' AND m_dob_day<=' . date('d') . '))';
                $where_clause .= ' AND ';
                $where_clause .= '(m_dob_year>' . $upper . ' OR m_dob_year=' . $upper . ' AND (m_dob_month>' . date('m') . ' OR m_dob_month=' . date('m') . ' AND m_dob_day>=' . date('d') . '))';
            }
            if (either_param_integer('option__photo_thumb_url', 0) == 1) {
                $where_clause .= ' AND ';
                $where_clause .= db_string_not_equal_to('m_photo_url', '');
            }
        }
        $user_group = get_param_string('option__user_group', '');
        if ($user_group != '') {
            $bits = explode(',', $user_group);
            $where_clause .= ' AND ';
            $group_where_clause = '';
            foreach ($bits as $i => $bit) {
                $group = intval($bit);
                $table .= ' LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_group_members g' . strval($i) . ' ON g' . strval($i) . '.gm_group_id=' . strval($group) . ' AND g' . strval($i) . '.gm_member_id=r.id';
                if ($group_where_clause != '') {
                    $group_where_clause .= ' OR ';
                }
                $group_where_clause .= 'g' . strval($i) . '.gm_group_id=' . strval($group) . ' OR m_primary_group=' . strval($group);
            }
            $where_clause .= '(' . $group_where_clause . ')';
        }

        if ((!has_privilege(get_member(), 'see_unvalidated')) && (addon_installed('unvalidated'))) {
            $where_clause .= ' AND ';
            $where_clause .= 'm_validated=1';
        }

        $where_clause .= ' AND r.id IS NOT NULL';

        // Calculate and perform query
        $rows = get_search_rows(null, 'id', $search_query, $content_where, $where_clause, $only_search_meta, $only_titles, $max, $start, $remapped_orderer, $direction, 'f_members r JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_member_custom_fields a ON r.id=a.mf_member_id' . $table, 'r.*,a.*,r.id AS r_id', ['!' => '!', 'm_signature' => 'LONG_TRANS__COMCODE'] + $trans_fields, $raw_fields);

        $out = [];
        foreach ($rows as $i => $row) {
            if (!is_guest($row['id'])) {
                $out[$i]['data'] = $row;
                if (($remapped_orderer != '') && (array_key_exists($remapped_orderer, $row))) {
                    $out[$i]['orderer'] = $row[$remapped_orderer];
                } elseif (strpos($remapped_orderer, '_rating:') !== false) {
                    $out[$i]['orderer'] = $row[$remapped_orderer];
                }
            } else {
                $out[$i]['data'] = null;
            }
            unset($rows[$i]);
        }

        return $out;
    }

    /**
     * Run function for rendering a search result.
     *
     * @param  array $row The data row stored when we retrieved the result
     * @return Tempcode The output
     */
    public function render(array $row) : object
    {
        if ($row['id'] === null) {
            return new Tempcode(); // Should not happen, some weird DB corruption probably
        }

        require_code('cns_members');
        require_code('cns_members2');
        $GLOBALS['CNS_DRIVER']->MEMBER_ROWS_CACHED[$row['id']] = $row;
        $box = render_member_box($row['id']);
        return $box;
    }
}
