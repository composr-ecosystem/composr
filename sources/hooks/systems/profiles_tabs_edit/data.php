<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_privacy
 */

/**
 * Hook class.
 */
class Hook_profiles_tabs_edit_data
{
    /**
     * Find whether this hook is active.
     *
     * @param  MEMBER $member_id_of The ID of the member who is being viewed
     * @param  MEMBER $member_id_viewing The ID of the member who is doing the viewing
     * @return boolean Whether this hook is active
     */
    public function is_active(int $member_id_of, int $member_id_viewing) : bool
    {
        return  (($member_id_of == $member_id_viewing) || (has_privilege($member_id_viewing, 'assume_any_member')));
    }

    /**
     * Render function for profile tabs edit hooks.
     *
     * @param  MEMBER $member_id_of The ID of the member who is being viewed
     * @param  MEMBER $member_id_viewing The ID of the member who is doing the viewing
     * @param  boolean $leave_to_ajax_if_possible Whether to leave the tab contents null, if this hook supports it, so that AJAX can load it later
     * @return ?array A tuple: The tab title, the tab body text (may be blank), the tab fields, extra JavaScript (may be blank) the suggested tab order, hidden fields (optional) (null: if $leave_to_ajax_if_possible was set), the icon
     */
    public function render_tab(int $member_id_of, int $member_id_viewing, bool $leave_to_ajax_if_possible = false) : ?array
    {
        $memory_debugging = (get_param_integer('keep_show_loading', 0) == 1);
        if ($memory_debugging) {
            $usage_before = memory_get_usage();
        }

        $download_days = intval(get_option('privacy_download_days'));
        $purge_days = intval(get_option('privacy_purge_days'));

        require_code('privacy');
        require_lang('privacy');

        $title = do_lang_tempcode('PERSONAL_DATA');

        $order = 200;

        // Actualiser
        $actualise = post_param_integer('data_action', null);
        if ($actualise !== null) {
            if ($member_id_of != $member_id_viewing) { // Not as staff (they should use the Admin Zone)
                warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
            }

            if (is_guest($member_id_of)) { // Not as guest
                warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
            }

            $values = $GLOBALS['FORUM_DRIVER']->get_custom_fields($member_id_of);
            if ($values === null) {
                $values = [];
            }
            $can_download = (($download_days >= 0) && (!isset($values['privacy_last_download']) || (intval($values['privacy_last_download']) < (time() - ($download_days * 60 * 60 * 24)))));
            $can_purge = (($purge_days >= 0) && (!isset($values['privacy_last_purge']) || (intval($values['privacy_last_purge']) < (time() - ($purge_days * 60 * 60 * 24)))));

            if ($actualise == 1) { // Download
                if (!$can_download) {
                    warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
                }

                $table_actions = [];
                $hooks = find_all_hook_obs('systems', 'privacy', 'Hook_privacy_');
                foreach ($hooks as $hook => $ob) {
                    if (post_param_integer('data_action_on__' . $hook, 0) == 0) {
                        continue;
                    }

                    $info = $ob->info();
                    if ($info === null) {
                        continue;
                    }

                    foreach ($info['database_records'] as $table => $details) {
                        $table_actions[$table] = PRIVACY_METHOD__DOWNLOAD;
                    }
                }

                $GLOBALS['FORUM_DRIVER']->set_custom_field($member_id_of, 'privacy_last_download', strval(time()));
                log_it('PERSONAL_DATA_DOWNLOAD', strval($member_id_of));

                require_code('tasks');
                call_user_func_array__long_task(do_lang('PERSONAL_DATA_DOWNLOAD'), $title, 'privacy_download', [$table_actions, '', [], $member_id_of, '', []], true);
            }

            if ($actualise == 2) { // Purge
                if (!$can_purge) {
                    warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
                }

                $table_actions = [];
                $hooks = find_all_hook_obs('systems', 'privacy', 'Hook_privacy_');
                foreach ($hooks as $hook => $ob) {
                    if (post_param_integer('data_action_on__' . $hook, 0) == 0) {
                        continue;
                    }

                    $info = $ob->info();
                    if ($info === null) {
                        continue;
                    }

                    foreach ($info['database_records'] as $table => $details) {
                        $table_actions[$table] = $details['removal_default_handle_method'];
                    }
                }

                $GLOBALS['FORUM_DRIVER']->set_custom_field($member_id_of, 'privacy_last_purge', strval(time()));
                log_it('PERSONAL_DATA_PURGING', strval($member_id_of));

                require_code('tasks');
                call_user_func_array__long_task(do_lang('PERSONAL_DATA_PURGING'), $title, 'privacy_purge', [$table_actions, '', [], $member_id_of, '', []], true);
            }
        }

        if ($leave_to_ajax_if_possible) {
            return null;
        }

        // UI fields
        $fields = new Tempcode();
        $js_function_calls = [];

        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of);

        $text = paragraph(do_lang_tempcode('PERSONAL_DATA_INTRO'));

        if ($member_id_of != $member_id_viewing) { // staff
            $alternate_actions = new Tempcode();
            $privacy_url = build_url(['page' => 'admin_privacy', 'member_id' => $member_id_of], get_module_zone('admin_privacy'));
            $alternate_actions->attach(paragraph(do_lang_tempcode('_DATA_MEMBER_PRIVACY', escape_html($privacy_url->evaluate()))));
            $text->attach(put_in_standard_box($alternate_actions, do_lang_tempcode('ALTERNATE_ACTIONS')));
            return [$title, new Tempcode(), $text, [], $order, null, 'tabs/member_account/edit/data'];
        }

        if (($download_days < 0) && ($purge_days < 0)) { // Users not allowed to manage their data directly
            $text->attach(paragraph(do_lang_tempcode('PERSONAL_DATA_INTRO_CONTACT_STAFF')));
            return [$title, new Tempcode(), $text, [], $order, null, 'tabs/member_account/edit/data'];
        }

        $values = $GLOBALS['FORUM_DRIVER']->get_custom_fields($member_id_of);
        if ($values === null) {
            $values = [];
        }
        $can_download = (($download_days >= 0) && (!isset($values['privacy_last_download']) || (intval($values['privacy_last_download']) < (time() - ($download_days * 60 * 60 * 24)))));
        $can_purge = (($purge_days >= 0) && (!isset($values['privacy_last_purge']) || (intval($values['privacy_last_purge']) < (time() - ($purge_days * 60 * 60 * 24)))));

        $text->attach(paragraph(do_lang_tempcode('PERSONAL_DATA_INTRO_SCREEN')));

        // TODO: Needs to support RTL
        $limits = new Tempcode();
        if ($download_days != 0) {
            $limits->attach(($download_days > 0) ? do_lang_tempcode('PERSONAL_DATA_LIMIT_DOWNLOAD', integer_format($download_days)) : do_lang_tempcode('_PERSONAL_DATA_LIMIT_DOWNLOAD'));
        }
        if ($purge_days != 0) {
            if ($download_days > 0) {
                $limits->attach(' ');
            }
            $limits->attach(($purge_days > 0) ? do_lang_tempcode('PERSONAL_DATA_LIMIT_PURGE', integer_format($purge_days)) : do_lang_tempcode('_PERSONAL_DATA_LIMIT_PURGE'));
        }
        $text->attach(paragraph($limits));

        // User exceeded their quota
        if (!$can_download && !$can_purge) {
            $text->attach(do_template('MESSAGE', [
                'TYPE' => 'warn',
                'MESSAGE' => do_lang_tempcode('_PERSONAL_DATA_INTRO_CONTACT_STAFF'),
            ]));
            return [$title, new Tempcode(), $text, [], $order, null, 'tabs/member_account/edit/data'];
        }

        require_code('form_templates');

        $hooks = find_all_hook_obs('systems', 'privacy', 'Hook_privacy_');
        foreach ($hooks as $hook => $ob) {
            $info = $ob->info();
            if ($info === null) {
                continue;
            }

            if (count($info['database_records']) <= 0) { // Nothing to do if there are no database tables
                continue;
            }

            $label = do_lang_tempcode($info['label']);
            $description = do_lang_tempcode($info['description']);
            $fields->attach(form_input_tick($label, $description, 'data_action_on__' . $hook, false));
        }

        $action_radios = new Tempcode();
        $action_radios->attach(form_input_radio_entry('data_action', '1', false, do_lang_tempcode('DOWNLOAD'), 0, do_lang_tempcode('_DATA_DOWNLOAD_TASK'), !$can_download));
        $action_radios->attach(form_input_radio_entry('data_action', '2', false, do_lang_tempcode('PURGE'), 0, '', !$can_purge));
        $fields->attach(form_input_radio(do_lang_tempcode('ACTION'), do_lang_tempcode('DESCRIPTION_ACTION_DATA'), 'data_action', $action_radios, false));

        if ($memory_debugging) {
            require_code('files');
            $usage_after = memory_get_usage();
            $usage = clean_file_size($usage_after - $usage_before);
            $text->attach(paragraph('Memory debugging: ' . $usage . ' used, now at ' . clean_file_size($usage_after)));
            $title->attach(' (' . $usage . ')');
        }

        return [$title, $fields, $text, $js_function_calls, $order, null, 'tabs/member_account/edit/data'];
    }
}
