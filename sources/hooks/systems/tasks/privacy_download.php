<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_privacy
 */

/**
 * Hook class.
 */
class Hook_task_privacy_download
{
    /**
     * Run the task hook.
     *
     * @param  array $table_actions Map between table names and PRIVACY_METHOD_* constants
     * @param  ID_TEXT $username Username to search for (blank: none)
     * @param  array $ip_addresses List of IP addresses to search for
     * @param  ?MEMBER $member_id Member ID to search for (null: none)
     * @param  string $email_address E-mail address to search for (blank: none)
     * @param  array $others List of other strings to search for, via additional-anonymise-fields
     * @return ?array A tuple of at least 2: Return mime-type, content (either Tempcode, or a string, or a filename and file-path pair to a temporary file), map of HTTP headers if transferring immediately, map of ini_set commands if transferring immediately (null: show standard success message)
     */
    public function run(array $table_actions, string $username, array $ip_addresses, ?int $member_id, string $email_address, array $others) : ?array
    {
        disable_php_memory_limit();

        cms_extend_time_limit(TIME_LIMIT_EXTEND__SLUGGISH);

        require_code('privacy');
        require_code('tar');
        require_code('files');
        require_code('files2');
        require_code('urls');

        require_code('database_relations');
        $table_descriptions = get_table_descriptions();

        // Pre-fill member ID and username
        if (($username == '') && ($member_id !== null)) {
            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        }
        if (($member_id === null) && ($username != '')) {
            $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($username);
        }

        // Create temporary file to use as archive
        $filename = preg_replace('#[^\w]#', '_', (($username != '') ? $username : do_lang('UNKNOWN'))) . '.tar.gz';
        $file_path = cms_tempnam();
        $data_file = tar_open($file_path, 'wb');

        push_db_scope_check(false);

        // Loop through every privacy hook
        $hook_obs = find_all_hook_obs('systems', 'privacy', 'Hook_privacy_');
        foreach ($hook_obs as $hook_ob) {
            $details = $hook_ob->info();
            if ($details !== null) {
                foreach ($details['database_records'] as $table_name => $table_details) {
                    // Skip tables we are not downloading
                    if (!isset($table_actions[$table_name]) || ($table_actions[$table_name] != PRIVACY_METHOD__DOWNLOAD)) {
                        continue;
                    }

                    // Prepare JSON data
                    $description = do_lang('UNKNOWN');
                    if (isset($table_descriptions[$table_name])) {
                        $description = $table_descriptions[$table_name];
                    }
                    $data = [
                        'table_name' => $table_name,
                        'table_description' => $description,
                        'retention_days' => $table_details['retention_days'],
                        'matched_records' => [],
                        'files_included' => [],
                    ];

                    // Get and process the data in batches
                    $db = get_db_for($table_name);
                    $selection_sql = $hook_ob->get_selection_sql($table_name, $table_details, PRIVACY_METHOD__DOWNLOAD, false, $username, $ip_addresses, $member_id, $email_address, $others);
                    if ($selection_sql != '') {
                        $start = 0;
                        $max = 100;
                        do {
                            $rows = $db->query('SELECT * FROM ' . $db->get_table_prefix() . $table_name . $selection_sql, $max, $start);

                            foreach ($rows as $_row) {
                                if (!$hook_ob->is_owner($table_name, $table_details, $_row, $member_id, $username)) {
                                    // For records the member does not own, anonymise data not belonging to them, and do not proceed further to getting files
                                    $row = $hook_ob->anonymise($table_name, $table_details, $_row, $username, $ip_addresses, $member_id, $email_address, $others, true);
                                    $serialised = $hook_ob->serialise($table_name, $row);

                                    // FUDGE: For records the member does not own, delete catalogue entry field values from results which are marked sensitive
                                    if (($table_name == 'catalogue_entries') && array_key_exists('catalogue_entry_values', $serialised)) {
                                        foreach ($serialised['catalogue_entry_values'] as $i => $field) {
                                            if ($field['cf_sensitive'] == 0) {
                                                continue;
                                            }

                                            unset($serialised['catalogue_entry_values'][$i]['effective_value']);
                                            unset($serialised['catalogue_entry_values'][$i]['effective_value_pure']);
                                        }
                                    }

                                    $data['matched_records'][] = $serialised;
                                    continue;
                                }
                                $data['matched_records'][] = $hook_ob->serialise($table_name, $_row);

                                // (for records which the member is owner) note any personal files that should later be included
                                foreach ($table_details['file_fields'] as $field) {
                                    $url = $_row[$field];
                                    $actual_path = (get_custom_file_base() . '/' . rawurldecode($url));
                                    if (!url_is_local($url)) {
                                        continue;
                                    }
                                    if (substr($url, 0, 8) !== 'uploads/') { // Ignore files which are not uploads
                                        continue;
                                    }
                                    if (@file_exists($actual_path) === true) {
                                        $data['files_included'][$url] = true;
                                    } else {
                                        $data['files_included'][$url] = false;
                                    }
                                }
                            }

                            $start += $max;
                        } while (!empty($rows));
                    }

                    // Now add files to the archive
                    foreach ($data['files_included'] as $file => $exists) {
                        if ($exists === false) {
                            continue;
                        }

                        $actual_path = (get_custom_file_base() . '/' . rawurldecode($file));
                        $size = filesize($actual_path);

                        // Skip files which would be too big to load in for adding
                        // TODO: Not acceptable; GDPR needs to allow the ability to download all member data. So this loop needs optimised.
                        if (($size === false) || ($size > (1024 * 1024 * 32))) { // FUDGE
                            $data['files_included'][$file] = false;
                            continue;
                        }

                        $_data = cms_file_get_contents_safe($actual_path, FILE_READ_LOCK);
                        tar_add_file($data_file, rawurldecode($file), $_data);
                    }

                    // Finally, create JSON file
                    $this->create_json_file($table_name, $data, $data_file);
                }
            }
        }

        pop_db_scope_check();

        tar_close($data_file);

        // Start streaming the archive
        $headers = [];
        $headers['Content-Type'] = 'application/x-gzip';
        $headers['Content-Disposition'] = 'attachment; filename="' . escape_header($filename) . '"';

        $ini_set = [];
        $ini_set['ocproducts.xss_detect'] = '0';
        return ['application/x-gzip', [$filename, $file_path], $headers, $ini_set];
    }

    /**
     * Create a JSON file from the given table data.
     *
     * @param  string $table_name The name of the table from which this data comes
     * @param  array $data The data to be saved
     * @param  array $data_file The tar data file array
     */
    protected function create_json_file(string $table_name, array $data, array &$data_file)
    {
        // Don't create a JSON file if we have no data to put into it
        if (count($data['matched_records']) <= 0) {
            return;
        }

        $filename = preg_replace('#[^\w]#', '_', $table_name) . '.json';
        $json_data = json_encode($data, JSON_PRETTY_PRINT);

        require_code('tar');
        tar_add_file($data_file, $filename, $json_data);
    }
}
