<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_privacy
 */

/**
 * Hook class.
 */
class Hook_task_privacy_download
{
    /**
     * Run the task hook.
     *
     * @param  array $table_actions Map between table names and PRIVACY_METHOD_* constants
     * @param  ID_TEXT $username Username to search for (blank: none)
     * @param  array $ip_addresses List of IP addresses to search for
     * @param  ?MEMBER $member_id Member ID to search for (null: none)
     * @param  string $email_address E-mail address to search for (blank: none)
     * @param  array $others List of other strings to search for, via additional-anonymise-fields
     * @return ?array A tuple of at least 2: Return mime-type, content (either Tempcode, or a string, or a filename and file-path pair to a temporary file), map of HTTP headers if transferring immediately, map of ini_set commands if transferring immediately (null: show standard success message)
     */
    public function run(array $table_actions, string $username, array $ip_addresses, ?int $member_id, string $email_address, array $others) : ?array
    {
        disable_php_memory_limit();
        
        cms_extend_time_limit(TIME_LIMIT_EXTEND__SLUGGISH);
        
        require_code('privacy');
        require_code('tar');
        require_code('files2');
        
        // Create temporary file to use as archive
        $filename = preg_replace('#[^\w]#', '_', ($username != '' ? $username : do_lang('UNKNOWN'))) . '.tar.gz';
        $file_path = cms_tempnam();
        $data_file = tar_open($file_path, 'wb');
        
        if (($username == '') && ($member_id !== null)) {
            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        }
        
        if (($member_id === null) && ($username != '')) {
            $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($username);
        }

        push_db_scope_check(false);

        $hook_obs = find_all_hook_obs('systems', 'privacy', 'Hook_privacy_');
        foreach ($hook_obs as $hook_ob) {
            $details = $hook_ob->info();
            if ($details !== null) {
                foreach ($details['database_records'] as $table_name => $table_details) {
                    if ((array_key_exists($table_name, $table_actions)) && ($table_actions[$table_name] == 1)) {
                        $data = [];

                        $db = get_db_for($table_name);             
                        $selection_sql = $hook_ob->get_selection_sql($table_name, $table_details, 1, false, $username, $ip_addresses, $member_id, $email_address, $others);
                        if ($selection_sql != '') {
                            $rows = $db->query('SELECT * FROM ' . $db->get_table_prefix() . $table_name . $selection_sql);
                            foreach ($rows as $_row) {
                                if (!$hook_ob->is_owner($table_name, $table_details, $_row, $member_id, $username, $email_address)) {
                                    // We do not want to leak data from other users out to this user
                                    $row = $hook_ob->anonymise($table_name, $table_details, $_row, $username, $ip_addresses, $member_id, $email_address, $others, true);
                                    $data[] = $hook_ob->serialise($table_name, $row);
                                    continue;
                                }
                                $data[] = $hook_ob->serialise($table_name, $_row);
                            }
                        }
                        
                        $this->create_json_file($table_name, $data, $data_file);
                    }
                }
            }
        }

        pop_db_scope_check();
        
        tar_close($data_file);

        // Start streaming the archive
        $headers = [];
        $headers['Content-Type'] = 'application/x-gzip';
        $headers['Content-Disposition'] = 'attachment; filename="' . escape_header($filename) . '"';

        $ini_set = [];
        $ini_set['ocproducts.xss_detect'] = '0';
        return ['application/x-gzip', [$filename, $file_path], $headers, $ini_set];
    }
    
    /**
     * Create a JSON file from the given table data.
     * 
     * @param  string $table_name The name of the table from which this data comes
     * @param  array $data The data to be saved
     * @param  array $data_file The tar data file array
     */
    protected function create_json_file(string $table_name, array $data, array &$data_file)
    {
        // Don't create a JSON file if we have no data to put into it
        if (count($data) <= 0) {
            return null;
        }
        
        $filename = preg_replace('#[^\w]#', '_', $table_name) . '.json';
        $json_data = json_encode($data, JSON_PRETTY_PRINT);
        
        require_code('tar');
        tar_add_file($data_file, $filename, $json_data);
    }
}
