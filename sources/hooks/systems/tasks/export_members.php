<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

/**
 * Hook class.
 */
class Hook_task_export_members
{
    /**
     * Run the task hook.
     *
     * @param  boolean $filter_by_allow Only provide members that have "Receive newsletters and other site updates" set
     * @param  array $fields_to_use List of fields to use (empty: none)
     * @param  array $usergroups List of usergroups to use (empty: all)
     * @param  string $order_by Field to order by
     * @param  ?string $file_type The file type to export with (null: default)
     * @return ?array A tuple of at least 2: Return mime-type, content (either Tempcode, or a string, or a filename and file-path pair to a temporary file), map of HTTP headers if transferring immediately, map of ini_set commands if transferring immediately (null: show standard success message)
     */
    public function run(bool $filter_by_allow, array $fields_to_use, array $usergroups, string $order_by, ?string $file_type = null) : ?array
    {
        require_code('cns_members_action2');
        list($headings, $cpfs, $subscription_types) = member_get_spreadsheet_headings_extended();

        $_headings = $headings;

        foreach (explode(',', $order_by) as $_order_by) {
            if ((!in_array($_order_by, $fields_to_use)) && (isset($_headings[$_order_by]))) {
                $fields_to_use[] = $_order_by;
            }
        }
        $headings = [];
        foreach ($fields_to_use as $field_label) {
            $field_name = isset($_headings[$field_label]) ? $_headings[$field_label] : $field_label;/*Must be a pseudo-field so just carry it forward*/
            $headings[$field_label] = is_numeric($field_name) ? intval($field_name) : $field_name;
        }

        // Derive filtering
        if (!empty($usergroups)) {
            // Filter just for f_group_members
            $group_filter = '(';
            foreach ($usergroups as $i => $usergroup) {
                if ($i != 0) {
                    $group_filter .= ' OR ';
                }
                $group_filter .= 'gm_group_id=' . strval($usergroup);
            }
            $group_filter .= ')';

            // Filter for f_members
            $group_filter_2 = '(';
            foreach ($usergroups as $i => $usergroup) {
                if ($i != 0) {
                    $group_filter_2 .= ' OR ';
                }
                $group_filter_2 .= 'm_primary_group=' . strval($usergroup);
                $group_filter_2 .= ' OR ';
                $group_filter_2 .= 'EXISTS(SELECT * FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_group_members WHERE gm_member_id=id AND gm_group_id=' . strval($usergroup) . ')';
            }
            $group_filter_2 .= ')';
        } else {
            // Filter just for f_group_members
            $group_filter = '1=1';

            // Filter for f_members
            $group_filter_2 = '1=1';
        }

        require_code('files_spreadsheets_write');
        if ($file_type === null) {
            $file_type = spreadsheet_write_default();
        }
        $filename = 'members-' . date('Y-m-d') . '.' . $file_type;
        $outfile_path = null;
        $sheet_writer = spreadsheet_open_write($outfile_path, $filename, CMS_Spreadsheet_Writer::ALGORITHM_RAW);

        $fields = ['id', 'm_username', 'm_email_address', 'm_last_visit_time', 'm_cache_num_posts'];
        if (has_privilege(get_member(), 'assume_any_member')) {
            $fields = array_merge($fields, ['m_pass_hash_salted', 'm_pass_salt', 'm_password_compat_scheme']);
        }
        $fields = array_merge($fields, ['m_signature', 'm_validated', 'm_join_time', 'm_primary_group', 'm_is_perm_banned', 'm_dob_day', 'm_dob_month', 'm_dob_year', 'm_reveal_age', 'm_language', 'm_allow_emails', 'm_allow_emails_from_staff']);
        if (addon_installed('cns_member_avatars')) {
            $fields[] = 'm_avatar_url';
        }
        if (addon_installed('cns_member_photos')) {
            $fields[] = 'm_photo_url';
        }

        // Read member groups
        $groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, false, true);
        $member_groups_count = $GLOBALS['FORUM_DB']->query_select_value('f_group_members', 'COUNT(*)', [], ' AND ' . $group_filter);
        if ($member_groups_count < 500) {
            $member_groups = $GLOBALS['FORUM_DB']->query_select('f_group_members', ['gm_member_id', 'gm_group_id'], [], ' AND ' . $group_filter);
        } else {
            $member_groups = [];
        }

        // Member count
        $member_count = $GLOBALS['FORUM_DB']->query_value_if_there('SELECT COUNT(*) FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_member_custom_fields ON id=mf_member_id WHERE ' . $group_filter_2);

        // Output headings
        $sheet_writer->write_row(array_keys($headings));

        // Filter
        $where = [];
        if ($filter_by_allow) {
            $where['m_allow_emails_from_staff'] = 1;
        }

        // Output records
        $at = null;
        $limit = get_param_integer('max', 200); // Set 'max' if you don't want all records
        $start = 0;
        do {
            $members = $GLOBALS['FORUM_DB']->query('SELECT * FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_member_custom_fields ON id=mf_member_id WHERE ' . $group_filter_2 . ' ORDER BY m_join_time,id', $limit, $start);

            if ($member_groups_count >= 500) {
                $or_list = '';
                foreach ($members as $m) {
                    if ($or_list != '') {
                        $or_list .= ' OR ';
                    }
                    $or_list .= 'mf_member_id=' . strval($m['id']);
                }
                $member_groups = $GLOBALS['FORUM_DB']->query('SELECT gm_member_id,gm_group_id FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_group_members WHERE (' . $or_list . ')');
            }

            foreach ($members as $i => $m) {
                task_log($this, 'Exporting member row', $start + $i, $member_count);

                if (is_guest($m['id'])) {
                    continue;
                }

                $out = $this->_get_spreadsheet_member_record($m, $groups, $headings, $cpfs, $member_groups, $subscription_types);
                $sheet_writer->write_row($out);
            }

            $start += 200;
        } while (count($members) == 200);
        $sheet_writer->close();

        $headers = [];
        $headers['Content-Type'] = $sheet_writer->get_mime_type();
        $headers['Content-Disposition'] = 'attachment; filename="' . escape_header($filename) . '"';

        $ini_set = [];
        $ini_set['ocproducts.xss_detect'] = '0';

        return [$sheet_writer->get_mime_type(), [$filename, $outfile_path], $headers, $ini_set];
    }

    /**
     * Get a spreadsheet-outputable row for a member.
     *
     * @param  array $m Member row
     * @param  array $groups Map of usergroup details
     * @param  array $headings List of headings to pull from the member row
     * @param  array $cpfs List of CPFS to pull
     * @param  array $member_groups List of member group membership records
     * @param  array $subscription_types List of subscription types
     * @return array The row
     */
    public function _get_spreadsheet_member_record(array $m, array $groups, array $headings, array $cpfs, array $member_groups, array $subscription_types) : array
    {
        // Usergroup subscription details
        if (addon_installed('ecommerce')) {
            require_code('ecommerce_subscriptions');
            require_lang('ecommerce');
            $subscriptions = find_member_subscriptions($m['id'], true);
            foreach ($subscription_types as $type_code => $item_name) {
                if (isset($subscriptions[$type_code])) {
                    $sub = $subscriptions[$type_code];
                    $start_time = date('Y/m/d', tz_time($sub['start_time'], get_site_timezone()));
                    $term_start_time = date('Y/m/d', tz_time($sub['term_start_time'], get_site_timezone()));
                    $term_end_time = date('Y/m/d', tz_time($sub['term_end_time'], get_site_timezone()));
                    $expiry_time = date('Y/m/d', tz_time($sub['expiry_time'], get_site_timezone()));
                    $payment_gateway = do_lang('PAYMENT_GATEWAY_' . $sub['payment_gateway']);
                    $state = do_lang('PAYMENT_STATE_' . $sub['state']);
                } else {
                    $start_time = '';
                    $term_start_time = '';
                    $term_end_time = '';
                    $expiry_time = '';
                    $payment_gateway = '';
                    $state = '';
                }
                $m[$item_name . ' (' . do_lang('SUBSCRIPTION_START_TIME') . ')'] = $start_time;
                $m[$item_name . ' (' . do_lang('SUBSCRIPTION_TERM_START_TIME') . ')'] = $term_start_time;
                $m[$item_name . ' (' . do_lang('SUBSCRIPTION_TERM_END_TIME') . ')'] = $term_end_time;
                $m[$item_name . ' (' . do_lang('SUBSCRIPTION_EXPIRY_TIME') . ')'] = $expiry_time;
                $m[$item_name . ' (' . do_lang('PAYMENT_GATEWAY') . ')'] = $payment_gateway;
                $m[$item_name . ' (' . do_lang('STATUS') . ')'] = $state;
            }
        }

        $at = null;
        $out = [];
        $i = 0;
        foreach ($headings as $written_heading => $f) {
            if ($f === null) {
                continue;
            }

            if (is_integer($f)) { // CPF
                if ($m['mf_member_id'] === null) {
                    $at = '';
                } else {
                    $at = $m['field_' . strval($f)];
                    if ($at === null) {
                        $at = '';
                    } else {
                        if (strpos($cpfs[$f]['cf_type'], '_trans') !== false) {
                            $at = get_translated_text($at);
                        } elseif (!is_string($at)) {
                            $at = strval($at);
                        }
                    }
                }
                $out[$cpfs[$f]['_cf_name']] = $at;
            } else {
                $parts = explode('/', $f);
                $wider = '';
                foreach ($parts as $i => $part) {
                    switch (substr($part, 0, 1)) {
                        case '*': // language string
                            $part = substr($part, 1);
                            $at = get_translated_text($m[$part], $GLOBALS['FORUM_DB']);
                            break;

                        case '!': // binary
                            $part = substr($part, 1);
                            $at = ($m[$part] == 1) ? 'Yes' : 'No'; // Hard-coded in English, because we need a multi-language standard
                            break;

                        case '&': // timestamp
                            $part = substr($part, 1);
                            $at = date('Y-m-d', intval($m[$part]));
                            break;

                        case '#': // URL
                            $part = substr($part, 1);
                            $at = $m[$part];
                            if ((url_is_local($at)) && ($at != '')) {
                                $at = get_complex_base_url($at) . '/' . $at;
                            }
                            break;

                        case '@': // append other groups
                            $part = substr($part, 1);
                            $at = isset($groups[$m[$part]]) ? $groups[$m[$part]] : '';

                            foreach ($member_groups as $g) {
                                if ($g['gm_member_id'] == $m['id']) {
                                    if (array_key_exists($g['gm_group_id'], $groups)) {
                                        $at .= '/' . $groups[$g['gm_group_id']];
                                    }
                                }
                            }
                            break;

                        case ':':
                            $part = substr($part, 1);
                            // no break

                        default: // string
                            // Pseudo fields
                            /*switch ($part) {
                                case 'Initials':
                                    $at = cms_preg_replace_safe('#\s*(\w)\w*\s*#', '${1}', $m['field_' . find_cpf_field_id('Forenames')] . ' ' . $m['field_' . find_cpf_field_id('Surname')]);
                                    break 2;

                                case 'Name':
                                    $at = cms_preg_replace_safe('#\s.*$#', '', trim($m['field_' . find_cpf_field_id('Forenames')]));
                                    break 2;
                            }*/

                            $at = $m[$part];
                            break;
                    }
                    if ($i != 0) {
                        if ($f == 'm_pass_hash_salted/m_pass_salt/m_password_compat_scheme') {
                            $wider .= ' / ';
                        } else {
                            $wider .= '/';
                        }
                    }
                    $wider .= is_integer($at) ? strval($at) : (($at === null) ? '' : $at);
                }
                $out[$written_heading] = $wider;

                $i++;
            }
        }

        return $out;
    }
}
