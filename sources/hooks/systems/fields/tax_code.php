<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_fields_tax_code
{
    /**
     * Find what field types this hook can serve. This method only needs to be defined if it is not serving a single field type with a name corresponding to the hook itself.
     *
     * @return array Map of field type to field type title
     */
    public function get_field_types() : array
    {
        if (!addon_installed('ecommerce')) {
            return [];
        }

        return ['tax_code' => do_lang_tempcode('FIELD_TYPE_tax_code')];
    }

    // ==============
    // Module: search
    // ==============

    /**
     * Get special Tempcode for inputting this field.
     *
     * @param  array $field The field details
     * @return ?array Specially encoded input detail rows (null: nothing special)
     */
    public function get_search_inputter(array $field) : ?array
    {
        return null;
    }

    /**
     * Get special SQL from POSTed parameters for this field.
     *
     * @param  array $field The field details
     * @param  integer $i We're processing for the ith row
     * @return ?array Tuple of SQL details (array: extra trans fields to search, array: extra plain fields to search, string: an extra table segment for a join, string: the name of the field to use as a title, if this is the title, extra WHERE clause stuff) (null: nothing special)
     */
    public function inputted_to_sql_for_search(array $field, int $i) : ?array
    {
        return null;
    }

    // ===================
    // Backend: fields API
    // ===================

    /**
     * Get some info bits relating to our field type, that helps us look it up / set defaults.
     *
     * @param  ?array $field The field details (null: new field)
     * @param  ?boolean $required Whether a default value cannot be blank (null: don't "lock in" a new default value)
     * @param  ?string $default The given default value as a string (null: don't "lock in" a new default value)
     * @return array Tuple of details (row-type,default-value-to-use,db row-type)
     */
    public function get_field_value_row_bits(?array $field, ?bool $required = null, ?string $default = null) : array
    {
        return ['short_unescaped', $default, 'short'];
    }

    /**
     * Convert a field value to something renderable.
     *
     * @param  array $field The field details
     * @param  mixed $ev The raw value
     * @param  integer $i Position in fieldset
     * @param  ?array $only_fields List of fields the output is being limited to (null: N/A)
     * @param  ?ID_TEXT $table The table we store in (null: N/A)
     * @param  ?AUTO_LINK $id The ID of the row in the table (null: N/A)
     * @param  ?ID_TEXT $id_field Name of the ID field in the table (null: N/A)
     * @param  ?ID_TEXT $field_id_field Name of the field ID field in the table (null: N/A)
     * @param  ?ID_TEXT $url_field Name of the URL field in the table (null: N/A)
     * @param  ?MEMBER $submitter Submitter (null: current member)
     * @param  ?mixed $ev_pure The 'pure' form of the raw value, meaning Comcode is not pre-parsed and string conversion has not been performed (null: unknown)
     * @return mixed Rendered field (string or Tempcode)
     */
    public function render_field_value(array &$field, $ev, int $i, ?array $only_fields, ?string $table = null, ?int $id = null, ?string $id_field = null, ?string $field_id_field = null, ?string $url_field = null, ?int $submitter = null, $ev_pure = null)
    {
        if (!addon_installed('ecommerce')) {
            return '';
        }

        if (is_object($ev)) {
            $ev = $ev->evaluate();
        }

        if ($ev == '') {
            return '';
        }

        $tax_code = $ev;

        require_code('ecommerce');

        $in_money = (option_value_from_field_array($field, 'in_money', 'off') == 'on');

        // Render as money...

        if ($in_money) {
            list(, $tax, , ) = calculate_tax_due(null, $tax_code, 100.00/*So we get a percentage*/);

            require_code('currency');
            return currency_convert_wrap($tax, null, CURRENCY_DISPLAY_TEMPLATED);
        }

        // Check hooks for rendering
        $hooks = find_all_hook_obs('systems', 'ecommerce_tax', 'Hook_ecommerce_tax_');
        foreach ($hooks as $ob) {
            if (method_exists($ob, 'render_field_value')) {
                $value = $ob->render_field_value($tax_code);
                if ($value !== null) {
                    return $value;
                }
            }
        }

        if (substr($tax_code, -1) == '%') {
            return escape_html(float_format(floatval(substr($tax_code, 0, strlen($tax_code) - 1)), 2, true) . '%');
        }

        require_code('currency');
        return currency_convert_wrap(floatval($tax_code), null, CURRENCY_DISPLAY_TEMPLATED);
    }

    // ======================
    // Frontend: fields input
    // ======================

    /**
     * Get form inputter.
     *
     * @param  string $_cf_name The field name
     * @param  string $_cf_description The field description
     * @param  array $field The field details
     * @param  ?string $actual_value The actual current value of the field (null: none)
     * @param  boolean $new Whether this is for a new entry
     * @return ?Tempcode The Tempcode for the input field (null: skip the field - it's not input)
     */
    public function get_field_inputter(string $_cf_name, string $_cf_description, array $field, ?string $actual_value, bool $new) : ?object
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        require_code('ecommerce');

        if ($actual_value == '') {
            $actual_value = null;
        }
        if ($actual_value === null) {
            if (isset($field['id'])) {
                $query = 'SELECT cv_value,count(cv_value) AS qty FROM ' . get_table_prefix() . 'catalogue_efv_short WHERE cf_id=' . strval($field['id']);
                $query .= ' GROUP BY cv_value ORDER BY qty DESC';
                $val = $GLOBALS['SITE_DB']->query_value_if_there($query); // We need the mode here, not the mean
                $actual_value = ($val === null) ? '0.0' : $val;
            }
        }
        $input_name = @cms_empty_safe($field['cf_input_name']) ? ('field_' . strval($field['id'])) : $field['cf_input_name'];
        return form_input_tax_code($_cf_name, $_cf_description, $input_name, $actual_value, $field['cf_required'] == 1);
    }

    /**
     * Find the posted value from the get_field_inputter field.
     *
     * @param  boolean $editing Whether we were editing (because on edit, it could be a fractional edit)
     * @param  array $field The field details
     * @param  ?string $upload_dir Where the files will be uploaded to (null: do not store an upload, return null if we would need to do so)
     * @param  ?array $old_value Former value of field (null: none)
     * @return ?string The value (null: could not process)
     */
    public function inputted_to_field_value(bool $editing, array $field, ?string $upload_dir = 'uploads/catalogues', ?array $old_value = null) : ?string
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        require_code('ecommerce');

        $id = $field['id'];
        $tmp_name = 'field_' . strval($id);
        $tax_code = post_param_tax_code($tmp_name, $editing ? STRING_MAGIC_NULL : '');
        return $tax_code;
    }

    /**
     * Determine what data should be used from this field in SEO.
     *
     * @param  string $val The value of the field
     * @param  integer $field_id The ID of the field
     * @param  ID_TEXT $content_type The content type using this field
     * @param  ?ID_TEXT $content_id The ID of the content using this field (null: not using a specific piece of content, such as adding a new entry)
     * @return mixed Either a string of the content to use in SEO, or a Tuple of [(string) content to use, (boolean) must use / high priority, (boolean) is a codename]
     */
    public function get_seo_source_map(string $val, int $field_id, string $content_type, ?string $content_id = null)
    {
        return '';
    }

    /**
     * Define what type of field this should be treated as in the privacy system if marked sensitive.
     * This method should be defined on fields which should not be treated as "additional_anonymise_fields".
     *
     * @param  array $field The field details
     * @return ID_TEXT The type of field to treat this
     */
    public function privacy_field_type(array $field) : string
    {
        return 'string_field_anonymise_only';
    }
}
