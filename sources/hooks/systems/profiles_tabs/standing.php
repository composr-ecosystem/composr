<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    cns_warnings
 */

/**
 * Hook class.
 */
class Hook_profiles_tabs_standing
{
    /**
     * Find whether this hook is active.
     *
     * @param  MEMBER $member_id_of The ID of the member who is being viewed
     * @param  MEMBER $member_id_viewing The ID of the member who is doing the viewing
     * @return boolean Whether this hook is active
     */
    public function is_active(int $member_id_of, int $member_id_viewing) : bool
    {
        if (!addon_installed('cns_warnings')) {
            return false;
        }

        return ($member_id_of == $member_id_viewing) || (has_privilege($member_id_viewing, 'assume_any_member'));
    }

    /**
     * Render function for profile tab hooks.
     *
     * @param  MEMBER $member_id_of The ID of the member who is being viewed
     * @param  MEMBER $member_id_viewing The ID of the member who is doing the viewing
     * @param  boolean $leave_to_ajax_if_possible Whether to leave the tab contents null, if this hook supports it, so that AJAX can load it later
     * @return array A tuple: The tab title, the tab contents, the suggested tab order, the icon
     */
    public function render_tab(int $member_id_of, int $member_id_viewing, bool $leave_to_ajax_if_possible = false) : array
    {
        // Initial requirements for cache / AJAX
        require_lang('cns_warnings');
        $title = do_lang_tempcode('STANDING');
        $order = 80;

        if ($leave_to_ajax_if_possible) {
            return [$title, null, $order, 'menu/social/warnings'];
        }

        // Prepare cache
        $num_warnings = $GLOBALS['SITE_DB']->query_select_value('f_warnings', 'COUNT(*)', ['w_member_id' => $member_id_of]);
        $num_punitive = $GLOBALS['SITE_DB']->query_select_value('f_warnings_punitive', 'COUNT(*)', ['p_member_id' => $member_id_of]);
        $cache_identifier = serialize([$member_id_of, $num_warnings, $num_punitive]);

        // Try the cache first because this hook uses quite a bit of resources and database queries
        require_code('caches');
        $content = get_cache_entry('profiles_tabs_standing', $cache_identifier, CACHE_AGAINST_DEFAULT, 15, true);
        if ($content !== null) {
            return [$title, $content, $order, 'menu/social/warnings'];
        }

        /*
            Grab stepper information.
            NB: 'order' should always be >0, and if multiple hooks have the same order, they will be merged.
        */

        $steppers = [];
        $is_good_standing = true;
        $warning_ids = $GLOBALS['SITE_DB']->query_select('f_warnings', ['id'], ['w_member_id' => $member_id_of, 'w_is_warning' => 1]);
        $hooks = find_all_hook_obs('systems', 'cns_warnings', 'Hook_cns_warnings_');
        foreach ($hooks as $hook => $ob) {
            if (method_exists($ob, 'get_stepper')) { // Is optional; some punitive actions are not status-based (e.g. content deletion)
                $stepper = $ob->get_stepper($member_id_of, $member_id_viewing, collapse_1d_complexity('id', $warning_ids));
                if (!empty($stepper)) {
                    foreach ($stepper as $_stepper) {
                        if (!isset($steppers[$_stepper['order']])) {
                            $steppers[$_stepper['order']] = $_stepper;
                        } else { // Allow merging based on order; two or more hooks may deal with the same category of punitive actions. Label and icon are ignored.
                            if ($_stepper['active'] === true) { // Do not allow changing active back to false
                                $steppers[$_stepper['order']]['active'] = true;
                            }
                            foreach ($_stepper['info'] as $additional_info) { // Merge in additional info items
                                $steppers[$_stepper['order']]['info'][] = $additional_info;
                            }
                        }

                        if ($_stepper['active'] === true) {
                            $is_good_standing = false;
                        }
                    }
                }
            }
        }

        // Formal warning and good standing steppers
        require_code('templates');
        require_code('urls');
        $rules_url = hyperlink(build_url(['page' => 'rules']), do_lang('RULES'), false, true);

        $num_formal_warnings = $GLOBALS['SITE_DB']->query_select_value('f_warnings', 'COUNT(*)', ['w_member_id' => $member_id_of, 'w_is_warning' => 1]);
        if ($num_formal_warnings > 0) {
            $is_good_standing = false;
            $warn_info = [
                [
                    'icon' => 'status/warn',
                    'text' => do_lang_tempcode('STANDING_FORMAL_WARNINGS_TEXT', escape_html(integer_format($num_formal_warnings)), protect_from_escaping($rules_url)),
                ]
            ];
            $good_info = [];
        } elseif ($is_good_standing) {
            $warn_info = [];
            $good_info = [
                [
                    'icon' => 'buttons/yes',
                    'text' => do_lang_tempcode('STANDING_GOOD_TEXT', protect_from_escaping($rules_url)),
                ]
            ];
        } else {
            $good_info = [];
            $warn_info = [];
        }
        $steppers[10] = [
            'label' => do_lang('WARNING'),
            'explanation' => do_lang('DESCRIPTION_STANDING_FORMAL_WARNING'),
            'icon' => 'status/warn',
            'active' => ($num_formal_warnings > 0),
            'active_color' => 'warning',
            'info' => $warn_info,
        ];
        $steppers[0] = [
            'label' => do_lang('STANDING_GOOD'),
            'explanation' => do_lang('DESCRIPTION_STANDING_GOOD'),
            'icon' => 'buttons/yes',
            'active' => $is_good_standing,
            'active_color' => 'success',
            'info' => $good_info,
        ];

        ksort($steppers);

        /* Warning information */

        require_lang('cns');
        require_css('cns');

        require_code('templates_columned_table');
        require_code('cns_topics');
        require_code('cns_groups');

        require_lang('fields');

        if (addon_installed('securitylogging')) {
            require_lang('submitban');
        }

        $header_row = columned_table_header_row([
            do_lang_tempcode('DATE'),
            do_lang_tempcode('BY'),
            do_lang_tempcode('PRIVATE_TOPIC'),
            do_lang_tempcode('ADDITIONAL_INFO')
        ]);

        $table_rows = new Tempcode();
        $rows = $GLOBALS['FORUM_DB']->query_select('f_warnings', ['*'], ['w_member_id' => $member_id_of, 'w_is_warning' => 1], 'ORDER BY w_time DESC');
        foreach ($rows as $row) {
            $row_contents = new Tempcode();
            // Basic warning info
            if ($row['w_explanation'] == '') {
                $explanation = do_lang('EXPLANATION') . ': ?';
            } else {
                $explanation = do_lang('EXPLANATION') . ': ' . str_replace("\n", ' ', $row['w_explanation']);
            }
            $row['w_explanation_orig'] = $row['w_explanation'];
            if (cms_mb_strlen($row['w_explanation']) > 61) {
                $explanation = do_lang('EXPLANATION') . ': ' . cms_mb_substr(str_replace("\n", ' ', $row['w_explanation']), 0, 61) . '...';
            }
            $row_contents->attach($explanation);

            // Warning private topic
            $private_topic = do_lang('NA');
            if ($row['w_topic_id'] !== null) {
                $topic_rows = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $row['w_topic_id']], '', 1);
                if (array_key_exists(0, $topic_rows)) {
                    $topic_row = $topic_rows[0];
                    if (cns_may_access_topic($row['w_topic_id'])) {
                        $pt_url = build_url(['page' => 'topicview', 'id' => $row['w_topic_id']], get_module_zone('topicview'));
                        $private_topic = hyperlink($pt_url, do_lang('VIEW_TOPIC'), false, true);
                    }
                }
            }

            // Punitive actions
            $prows = $GLOBALS['FORUM_DB']->query_select('f_warnings_punitive', ['*'], ['p_warning_id' => $row['id']]);
            foreach ($prows as $prow) {
                $hook = get_hook_ob('systems', 'cns_warnings', $prow['p_hook'], 'Hook_cns_warnings_');
                if (method_exists($hook, 'generate_text') && ($hook->get_details() !== null)) {
                    $row_contents->attach('<br />' . $hook->generate_text($prow));
                }
            }

            $table_rows->attach(columned_table_row([
                get_timezoned_date_time($row['w_time']),
                $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_issuing_member']),
                $private_topic,
                $row_contents,
            ], false));
        }

        $warn_members_text = new Tempcode();
        if (has_privilege($member_id_viewing, 'warn_members')) {
            $full_warnings_url = build_url(['page' => 'warnings', 'type' => 'history', 'id' => $member_id_of], get_module_zone('warnings'));
            $warn_members_text = do_lang_tempcode('DESCRIPTION_CAN_WARN', hyperlink($full_warnings_url, do_lang_tempcode('REVIEW_WARNING_HISTORY'), false, false));
        }

        if ($table_rows->is_empty()) {
            $table = do_lang_tempcode('NO_ENTRIES');
        } else {
            $table = do_template('COLUMNED_TABLE', ['_GUID' => '49a356e5af2576351360054344fc472b', 'HEADER_ROW' => $header_row, 'ROWS' => $table_rows, 'NONRESPONSIVE' => false]);
        }

        $_content = do_template('COLUMNED_TABLE_SCREEN', [
            '_GUID' => '9dfa0fb6ea396d3b57cb447bc228a885',
            'TITLE' => '',
            'TEXT' => $warn_members_text,
            'TABLE' => $table,
            'SUBMIT_ICON' => null,
            'JS_FUNCTION_CALLS' => [],
        ]);

        /* Tab screen */

        $content_steppers = [];
        $content_info = [];
        foreach ($steppers as $stepper) {
            $content_steppers[] = [
                'LABEL' => $stepper['label'],
                'EXPLANATION' => $stepper['explanation'],
                'ICON' => $stepper['icon'],
                'ACTIVE' => $stepper['active'],
                'ACTIVE_COLOR' => $stepper['active_color'],
            ];
            foreach ($stepper['info'] as $info) {
                $content_info[] = [
                    'ICON' => $info['icon'],
                    'TEXT' => $info['text'],
                ];
            }
        }

        $content = do_template('CNS_MEMBER_PROFILE_STANDING', [
            '_GUID' => 'fea98858f6bf89f1d9dc3ec995785a39',
            'MEMBER_ID' => strval($member_id_of),
            'SIMPLE_STEPPER' => (count($content_steppers) >= 7) ? '1' : '0', // Use small steppers if we have >=7 steppers so it doesn't cramp mobile displays
            'STEPPERS' => $content_steppers,
            'INFO' => $content_info,
            'WARNINGS' => $_content,
        ]);

        // Cache the Tempcode
        global $LANGS_REQUESTED, $JAVASCRIPTS, $CSSS;
        require_code('caches2');
        set_cache_entry('profiles_tabs_standing', 15, $cache_identifier, $content, CACHE_AGAINST_DEFAULT, array_keys($LANGS_REQUESTED), array_keys($JAVASCRIPTS), array_keys($CSSS), true);

        return [$title, $content, $order, 'menu/social/warnings'];
    }
}
