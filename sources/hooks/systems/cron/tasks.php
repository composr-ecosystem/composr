<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_cron_tasks
{
    protected const MAX_TIME = 8.0; // Once tasks have exceeded this long in seconds, stop (and resume on the next Cron execution)
    protected const MAX_QUERIES = 1000; // Once tasks have exceeded this many queries (calculated by query limiting), stop (and resume on the next Cron execution)

    protected const CATCH_UP_THRESHOLD = 1000; // When we have this many items in the queue or more, use CATCH_UP_* constants instead
    protected const CATCH_UP_MAX_TIME = 16.0;
    protected const CATCH_UP_MAX_QUERIES = 2000;


    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        if (GOOGLE_APPENGINE) { // GAE has its own external task queue
            return null;
        }

        // Calculate on low priority
        if ($calculate_num_queued === null) {
            $calculate_num_queued = true;
        }

        return [
            'label' => 'Run queued background tasks',
            'num_queued' => $calculate_num_queued ? $GLOBALS['SITE_DB']->query_select_value('task_queue', 'COUNT(*)') : null,
            'minutes_between_runs' => 0,
            'enabled_by_default' => true,
        ];
    }

    /**
     * Show a tooltip of further details about the queue.
     *
     * @return Tempcode Queue details
     */
    public function queued_details_tooltip() : object
    {
        $max_rows = $GLOBALS['SITE_DB']->query_select_value('task_queue', 'COUNT(*)', []);
        if ($max_rows >= 300) {
            require_lang('tasks');
            return do_lang_tempcode('TOO_MANY_TASKS');
        }
        $rows = $GLOBALS['SITE_DB']->query_select('task_queue', ['id', 't_title', 't_member_id', 't_locked', 't_add_time'], [], 'ORDER BY t_add_time ASC');

        require_code('templates_columned_table');
        $header_row = columned_table_header_row([
            do_lang_tempcode('IDENTIFIER'),
            do_lang_tempcode('TITLE'),
            do_lang_tempcode('MEMBER'),
            do_lang_tempcode('LOCKED'),
            do_lang_tempcode('ADDED'),
        ]);

        $_rows = new Tempcode();
        foreach ($rows as $row) {
            $_rows->attach(columned_table_row([
                '#' . strval($row['id']),
                $row['t_title'],
                $GLOBALS['FORUM_DRIVER']->get_username($row['t_member_id']),
                do_lang_tempcode(($row['t_locked'] == 1) ? 'YES' : 'NO'),
                do_lang_tempcode('_AGO', escape_html(display_time_period(time() - $row['t_add_time']))),
            ], false));
        }

        return do_template('COLUMNED_TABLE', ['_GUID' => '65281e0eef3a4c7c47b5bf8fca00a6d8', 'HEADER_ROW' => $header_row, 'ROWS' => $_rows, 'NONRESPONSIVE' => false]);
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        global $QUERY_COUNT;

        $start_time = microtime(true);
        $elapsed_time = 0.0;
        $starting_queries = $QUERY_COUNT;
        $max_time = self::MAX_TIME;
        $max_queries = self::MAX_QUERIES;

        $forced = get_param_integer('force', 0) == 1;
        $where = [];
        if (!$forced) {
            $where = ['t_locked' => 0];
        }

        // Optimisation: Exit immediately if there is nothing to do
        $num_task_rows = $GLOBALS['SITE_DB']->query_select_value('task_queue', 'COUNT(*)', $where);
        if ($num_task_rows == 0) {
            return;
        }

        // Give higher priority if we have a lot of items in the queue
        if ($num_task_rows >= self::CATCH_UP_THRESHOLD) {
            $max_time = self::CATCH_UP_MAX_TIME;
            $max_queries = self::CATCH_UP_MAX_QUERIES;
        }

        require_code('tasks');
        require_code('notifications'); // Needed as a task may require the notification object, and any class that has a deserialised reference needs to be loaded first to avoid being an 'incomplete object'
        require_code('files');

        $_task_rows = [];
        do {
            // Load in tasks in batches of 100
            if (empty($_task_rows)) {
                $_task_rows = $GLOBALS['SITE_DB']->query_select('task_queue', ['*'], $where, ' AND t_add_time <= ' . float_to_raw_string($start_time, 0) . ' ORDER BY t_add_time ASC', 100);
            }

            // No more tasks to process
            if (empty($_task_rows)) {
                break;
            }

            $task_row = array_shift($_task_rows);

            $GLOBALS['SITE_DB']->query_update(
                'task_queue',
                [
                    't_locked' => 1,
                    't_add_time' => intval($start_time), // Done so we do not run into a loop of selecting locked tasks if we do not filter them out by $where
                ],
                [
                    'id' => $task_row['id'],
                ],
                '',
                1
            );

            //$url = find_script('tasks') . '?id=' . strval($task_row['id']) . '&secure_ref=' . urlencode($task_row['t_secure_ref']);
            //http_get_contents($url);
            execute_task_background($task_row);

            $elapsed_time = microtime(true) - $start_time;
        } while (($elapsed_time < $max_time) && (($QUERY_COUNT - $starting_queries) < $max_queries));
    }
}
