<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    search
 */

/**
 * Hook class.
 */
class Hook_cron_composr_fast_custom_index
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        if (!addon_installed('search')) {
            return null;
        }

        return [
            'label' => 'Index content for Composr fast custom index',
            'num_queued' => null,
            'minutes_between_runs' => 15,
        ];
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        if ($last_run === null) {
            disable_php_memory_limit();
        }

        push_query_limiting(false);
        push_db_scope_check(false);

        $total_singular_ngram_tokens = 0;
        $statistics_map = [];

        require_code('database_search');

        $subhook = get_param_string('limit_subhook', null);

        $hooks = find_all_hook_obs('modules', 'search', 'Hook_search_');
        foreach ($hooks as $hook => $ob) {
            if (($subhook !== null) && ($subhook !== $hook)) {
                continue;
            }

            if (method_exists($ob, 'index_for_search')) {
                $info = $ob->info(false);
                if ($info !== null) {
                    $ob->index_for_search($last_run, $total_singular_ngram_tokens, $statistics_map);
                }
            }
        }

        // Log all ngram commonality to the database, used as part of the search ranking algorithm, and useful for manually gauging which stop words to add
        if (!empty($statistics_map)) { // If was a full reindex of all hooks handled in this run (usually all, but may be limited by limit_subhook URL parameter)
            $GLOBALS['SITE_DB']->query_delete('ft_index_commonality');
            foreach ($statistics_map as $lang => $_statistics_map) {
                arsort($_statistics_map);

                foreach ($_statistics_map as $ngram => $total) {
                    if (strlen($ngram) > 255) {
                        continue;
                    }

                    if (trim($ngram, '0123456789') == '') {
                        continue;
                    }

                    $GLOBALS['SITE_DB']->query_insert('ft_index_commonality', [
                        'c_ngram' => $ngram,
                        'c_commonality' => floatval($total) / floatval($total_singular_ngram_tokens),
                    ]);
                }
            }
        }

        pop_query_limiting();
        pop_db_scope_check();
    }
}
