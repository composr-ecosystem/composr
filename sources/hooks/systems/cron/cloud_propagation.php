<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_cron_cloud_propagation
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, bool $calculate_num_queued) : ?array
    {
        if (cloud_mode() == '') {
            return null;
        }

        if ($calculate_num_queued) {
            $last_synched = intval(get_value('cloud_propagation_to__' . gethostname(), '-1', true));

            $num_queued = 0;

            $where = 'id>=' . strval($last_synched) . ' AND ' . db_string_not_equal_to('op_originating_host', gethostname());

            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_dirs WHERE ' . $where;
            $num_queued += $GLOBALS['SITE_DB']->query_value_if_there($sql);

            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_files WHERE ' . $where;
            $num_queued += $GLOBALS['SITE_DB']->query_value_if_there($sql);

            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_rpc WHERE ' . $where;
            $num_queued += $GLOBALS['SITE_DB']->query_value_if_there($sql);

            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_logging WHERE ' . $where;
            $num_queued += $GLOBALS['SITE_DB']->query_value_if_there($sql);
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Propagate file changes from elsewhere on the Cloud',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 0,
            'cloud_all' => true,
        ];
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        $time = time();

        $max = null; // We want to do all at once, otherwise co-dependent things may not happen

        $last_synched = intval(get_value('cloud_propagation_to__' . gethostname(), '-1', true));

        $propagation_record_days = (get_option('cloud_propagation_record_days') == '') ? null : intval(get_option('cloud_propagation_record_days'));

        $where = 'id>=' . strval($last_synched) . ' AND ' . db_string_not_equal_to('op_originating_host', gethostname());

        $hooks = find_all_hook_obs('systems', 'cloud_propagation', 'Hook_cloud_propagation_');

        $sql = 'SELECT * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_dirs WHERE ' . $where . ' ORDER BY op_timestamp,id';
        $ops = $GLOBALS['SITE_DB']->query($sql, $max);
        if (!empty($ops)) {
            disable_php_memory_limit();

            foreach ($ops as $op) {
                $file_base = $op['file_file_base_constant'] . '://';

                switch ($op['op_type']) {
                    case 'create':
                        $result = @mkdir($file_base . '/' . $op['dir_path'], $op['dir_perms']);
                        fix_permissions($file_base . '/' . $op['dir_path'], $op['dir_perms']);
                        if (!$result) {
                            require_code('failure');
                            $last_error = error_get_last();
                            cms_error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $last_error['message']);
                        }
                        break;

                    case 'touch':
                        if ($op['dir_perms'] !== null) {
                            fix_permissions($file_base . '/' . $op['dir_path'], $op['dir_perms']);
                        }
                        break;

                    case 'move':
                        $result = @rename($file_base . '/' . $op['dir_path'], $file_base . '/' . $op['op_data']);
                        if (!$result) {
                            require_code('failure');
                            $last_error = error_get_last();
                            cms_error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $last_error['message']);
                        }
                        break;

                    case 'delete':
                        $result = @rmdir($file_base . '/' . $op['dir_path']);
                        if (!$result) {
                            require_code('failure');
                            $last_error = error_get_last();
                            cms_error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $last_error['message']);
                        }
                        break;
                }
            }

            // Cleanup very old stuff
            if ($propagation_record_days !== null) {
                $sql = 'DELETE * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_dirs WHERE ' . $where . ' AND op_timestamp<' . strval(time() - 60 * 60 * $propagation_record_days);
                $GLOBALS['SITE_DB']->query($sql, $max);
            }
        }

        $sql = 'SELECT * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_files WHERE ' . $where . ' ORDER BY op_timestamp,id';
        $ops = $GLOBALS['SITE_DB']->query($sql, $max);
        if (!empty($ops)) {
            disable_php_memory_limit();

            foreach ($ops as $op) {
                $file_base = $op['file_file_base_constant'] . '://';

                switch ($op['op_type']) {
                    case 'create':
                        $result = cms_file_put_contents_safe($file_base . '/' . $op['file_path'], base64_decode($op['op_data']), FILE_WRITE_FAILURE_SILENT);
                        if ($result) {
                            fix_permissions($file_base . '/' . $op['file_path'], $op['file_perms']);
                            @chmod($file_base . '/' . $op['file_path'], $op['file_mtime']);
                        } else {
                            unset($op['op_data']);
                            require_code('failure');
                            $last_error = error_get_last();
                            cms_error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $last_error['message']);
                        }
                        break;

                    case 'touch':
                        if ($op['file_perms'] !== null) {
                            fix_permissions($file_base . '/' . $op['file_path'], $op['file_perms']);
                        }
                        if ($op['file_mtime'] !== null) {
                            @chmod($file_base . '/' . $op['file_path'], $op['file_mtime']);
                        }
                        break;

                    case 'move':
                        $result = @rename($file_base . '/' . $op['file_path'], $file_base . '/' . $op['op_data']);
                        if (!$result) {
                            require_code('failure');
                            $last_error = error_get_last();
                            cms_error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $last_error['message']);
                        }
                        break;

                    case 'delete':
                        $result = @unlink($file_base . '/' . $op['file_path']);
                        if (!$result) {
                            require_code('failure');
                            $last_error = error_get_last();
                            cms_error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $last_error['message']);
                        }
                        break;
                }
            }

            // Cleanup very old stuff
            if ($propagation_record_days !== null) {
                $sql = 'DELETE * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_dirs WHERE ' . $where . ' AND op_timestamp<' . strval(time() - 60 * 60 * $propagation_record_days);
                $GLOBALS['SITE_DB']->query($sql, $max);
            }
        }

        $sql = 'SELECT * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_rpc WHERE ' . $where . ' ORDER BY op_timestamp,id';
        $ops = $GLOBALS['SITE_DB']->query($sql, $max);
        if (!empty($ops)) {
            disable_php_memory_limit();

            foreach ($ops as $op) {
                switch ($op['op_type']) {
                    case 'erase_persistent_cache':
                        erase_persistent_cache(true);
                        break;

                    case 'erase_static_cache':
                        erase_static_cache(true);
                        break;

                    case 'erase_cached_language':
                        require_code('caches3');
                        erase_cached_language(true);
                        break;

                    case 'erase_cached_templates':
                        require_code('caches3');
                        erase_cached_templates(false, null, null, false, true);
                        break;

                    case 'Self_learning_cache::erase_smart_cache':
                        Self_learning_cache::erase_smart_cache(true);
                        break;

                    default:
                        foreach ($hooks as $ob) {
                            if (method_exists($ob, 'rpc')) {
                                $ob->rpc($op['op_type'], $op['op_data']);
                            }
                        }
                }
            }

            // Cleanup very old stuff
            if ($propagation_record_days !== null) {
                $sql = 'DELETE * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_rpc WHERE ' . $where . ' AND op_timestamp<' . strval(time() - 60 * 60 * $propagation_record_days);
                $GLOBALS['SITE_DB']->query($sql, $max);
            }
        }

        $sql = 'SELECT * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_logging WHERE ' . $where . ' ORDER BY op_timestamp,id';
        $lines = $GLOBALS['SITE_DB']->query($sql, $max);
        if (!empty($lines)) {
            disable_php_memory_limit();

            $log_file = null;
            foreach ($lines as $i => $line) {
                if ($log_file === null) {
                    $path = get_file_base(true) . '/data_custom/' . $line['log_name'] . '.log';

                    if ((!is_file($path)) || (!cms_is_writable($path))) {
                        continue;
                    }

                    $log_file = cms_fopen_text_write($path, false, 'a+b');
                }

                fseek($log_file, 0, SEEK_END);

                flock($log_file, LOCK_EX);
                fwrite($log_file, $line['log_line'] . "\n");
                flock($log_file, LOCK_UN);

                if ((!isset($lines[$i + 1])) || ($lines[$i + 1]['log_name'] != $line['log_name'])) {
                    fclose($log_file);
                    $log_file = null;
                }
            }

            // Cleanup very old stuff
            if ($propagation_record_days !== null) {
                $sql = 'DELETE * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_logging WHERE ' . $where . ' AND op_timestamp<' . strval(time() - 60 * 60 * $propagation_record_days);
                $GLOBALS['SITE_DB']->query($sql, $max);
            }
        }

        set_value('cloud_propagation_to__' . gethostname(), strval(time()), true);
    }
}
