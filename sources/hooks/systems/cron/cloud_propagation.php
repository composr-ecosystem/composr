<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_cron_cloud_propagation
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, bool $calculate_num_queued) : ?array
    {
        if (cloud_mode() == '') {
            return null;
        }

        if ($calculate_num_queued) {
            $last_synched = intval(get_long_value('cloud_propagation_to__' . gethostname(), '-1'));

            $num_queued = 0;

            $where = 'id>=' . strval($last_synched) . ' AND ' . db_string_not_equal_to('op_originating_host', gethostname());

            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_dirs WHERE ' . $where;
            $num_queued += $GLOBALS['SITE_DB']->query_value_if_there($sql);

            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_files WHERE ' . $where;
            $num_queued += $GLOBALS['SITE_DB']->query_value_if_there($sql);

            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_ops WHERE ' . $where;
            $num_queued += $GLOBALS['SITE_DB']->query_value_if_there($sql);
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Propagate file changes from elsewhere on the Cloud',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 0,
        ];
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        $time = time();

        $max = 50;

        $last_synched = intval(get_long_value('cloud_propagation_to__' . gethostname(), '-1'));

        global $FILE_BASE_LOCAL;

        $where = 'id>=' . strval($last_synched) . ' AND ' . db_string_not_equal_to('op_originating_host', gethostname());

        $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_dirs WHERE ' . $where;
        $ops = $GLOBALS['SITE_DB']->query($sql, $max);
        if (!empty($ops)) {
            disable_php_memory_limit();
        }
        foreach ($ops as $op) {
            switch ($op['op_type']) {
                case 'create':
                    $result = @mkdir($FILE_BASE_LOCAL . '/' . $op['dir_path'], $op['dir_perms']);
                    fix_permissions($FILE_BASE_LOCAL . '/' . $op['dir_path'], $op['dir_perms']);
                    if (!$result) {
                        @error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $php_errormsg);
                    }
                    break;

                case 'touch':
                    fix_permissions($FILE_BASE_LOCAL . '/' . $op['dir_path'], $op['dir_perms']);
                    break;

                case 'move':
                    $result = @rename($FILE_BASE_LOCAL . '/' . $op['dir_path'], $FILE_BASE_LOCAL . '/' . $op['op_data']);
                    if (!$result) {
                        @error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $php_errormsg);
                    }
                    break;

                case 'delete':
                    $result = @rmdir($FILE_BASE_LOCAL . '/' . $op['dir_path']);
                    if (!$result) {
                        @error_log('Cloud sync fail for ' . json_encode($op) . ': ' . $php_errormsg);
                    }
                    break;
            }
        }

        $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_files WHERE ' . $where;
        $ops = $GLOBALS['SITE_DB']->query($sql, $max);
        if (!empty($ops)) {
            disable_php_memory_limit();
        }
        foreach ($ops as $op) {
            switch ($op['op_type']) {
                case 'create':
                    cms_file_put_contents_safe($FILE_BASE_LOCAL . '/' . $op['file_path'], base64_decode($op['op_data']));
                    TODO
                    break;

                case 'touch':
                    TODO
                    break;

                case 'move':
                    TODO
                    break;

                case 'delete':
                    TODO
                    break;
            }
        }

        $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'cloud_propagation_ops WHERE ' . $where;
        $ops = $GLOBALS['SITE_DB']->query($sql, $max);
        if (!empty($ops)) {
            disable_php_memory_limit();
        }
        foreach ($ops as $op) {
            TODO
        }

        set_long_value('cloud_propagation_to__' . gethostname(), strval(time()));
    }
}
