<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_cron_cache_cleanup
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        return [
            'label' => 'Purge stale caches',
            'num_queued' => null,
            'minutes_between_runs' => 60 * 24,
            'enabled_by_default' => true,
        ];
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        // Infinite files can build up in the static cache, as there are infinite unused URL parameters bots can tack on.
        //  This is a disk space waste concern, and can trigger a Health Check error.
        //  So we clean out anything very expired so this stuff cannot build up (a little expired stays for fail-over mode).
        //  (Not caching foreign parameters is not possible, as they cannot feasibly be detected, tracking etc.)

        $path = get_custom_file_base() . '/caches/static';
        $dh = @opendir($path);
        while (($f = readdir($dh)) !== false) {
            if (preg_match('#\.(htm|br|gz|xml)$#', $f) != 0) {
                // Over a week old
                if (filemtime($path . '/' . $f) < time() - 24 * 60 * 60 * 7) {
                    @unlink($path . '/' . $f);
                }
            }
        }
        closedir($dh);

        require_code('files');
        require_code('files2');

        // Prevent other cache directories from getting too overpopulated as well (mapped to array, count to start pruning, count to dump the entire directory)
        $directories = [
            'caches/http' => [1000, 5000],
            'caches/persistent' => [2000, 10000],
            'caches/self_learning' => [1000, 5000],
            'uploads/auto_thumbs' => [2000, 10000], // These can be re-built upon request
        ];
        foreach ($directories as $directory => $prune_rules) {
            list($count_prune, $count_empty) = $prune_rules;
            $files = get_directory_contents(get_custom_file_base() . '/' . $directory, $directory, IGNORE_ACCESS_CONTROLLERS, false);
            if (count($files) >= $count_empty) {
                deldir_contents(get_custom_file_base() . '/' . $directory, true);
            } elseif (count($files) >= $count_prune) {
                usort($files, [$this, 'compare_filetime']);
                do {
                    @unlink(get_custom_file_base() . '/' . array_shift($files));
                } while (count($files) >= $count_prune);
            }
        }
    }

    /**
     * Callback for sorting an array of file paths by filemtime and fileatime, whichever is newest.
     * A newer filemtime represents a cache which has recently been made and likely to be used, thus not stale.
     * And a newer fileatime represents a cache which has recently been used and thus also not yet stale.
     *
     * @param  URLPATH $a The relative path of file A
     * @param  string $b The relative path of file B
     * @return integer The comparison order directive
     */
    protected function compare_filetime(string $a, string $b) : int
    {
        $time_a = max(fileatime(get_custom_file_base() . '/' . $a), filemtime(get_custom_file_base() . '/' . $a));
        $time_b = max(fileatime(get_custom_file_base() . '/' . $b), filemtime(get_custom_file_base() . '/' . $b));

        if ($time_a == $time_b) {
            return 0;
        }

        return ($time_a > $time_b) ? -1 : 1;
    }
}
