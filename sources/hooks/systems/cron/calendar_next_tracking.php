<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    calendar
 */

/**
 * Hook class.
 */
class Hook_cron_calendar_next_tracking
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info($last_run, $calculate_num_queued)
    {
        if (!addon_installed('calendar')) {
            return null;
        }

        if ($calculate_num_queued) {
            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'calendar_events WHERE e_next_recurrence_time IS NOT NULL AND e_next_recurrence_time<' . strval(time());
            $num_queued = $GLOBALS['SITE_DB']->query_value_if_there($sql);
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Update calendar event previous/next timestamps',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 1,
        ];
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run($last_run)
    {
        require_code('calendar');

        $sql = 'SELECT * FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'calendar_events WHERE e_next_recurrence_time IS NOT NULL AND e_next_recurrence_time<' . strval(time());
        $rows = $GLOBALS['SITE_DB']->query($sql);
        foreach ($rows as $row) {
            $next_recurrence_time = get_calendar_event_first_date_wrap($row);
            if ($next_recurrence_time < time()) {
                $next_recurrence_time = null;
            }
            $previous_recurrence_time = $row['e_next_recurrence_time']; // Next becomes previous
            $GLOBALS['SITE_DB']->query_update('calendar_events', ['e_previous_recurrence_time' => $previous_recurrence_time, 'e_next_recurrence_time' => $next_recurrence_time], ['id' => $row['id']], '', 1);
        }
    }
}
