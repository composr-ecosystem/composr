<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_cron_sitemap
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        // Calculate on low priority
        if ($calculate_num_queued === null) {
            $calculate_num_queued = true;
        }

        if ($calculate_num_queued) {
            $last_time = intval(get_value('last_sitemap_time_calc_inner', null, true));
            $num_queued = $GLOBALS['SITE_DB']->query_value_if_there('SELECT COUNT(DISTINCT set_number) FROM ' . get_table_prefix() . 'sitemap_cache WHERE last_updated>=' . strval($last_time));
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Update XML Sitemap',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 60 * 24, // Every day. Contrast to the news sitemap which is built and pinged instantly, so content needing instant promotion should go via news
        ];
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        require_lang('menus'); // Contains GENERATE_SITEMAP string

        require_code('tasks');
        call_user_func_array__long_task(do_lang('GENERATE_SITEMAP'), get_screen_title('GENERATE_SITEMAP'), 'sitemap', [], false, true, false);
    }
}
