<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_cron_topic_pin
{
    protected $topics;

    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        // Calculate on low priority
        if ($calculate_num_queued === null) {
            $calculate_num_queued = true;
        }

        if ($calculate_num_queued) {
            if ($last_run === null) {
                $last_run = 0;
            }

            $time_now = time();
            $sql = 'SELECT details FROM ' . get_table_prefix() . 'ecom_sales s JOIN ' . get_table_prefix() . 'ecom_transactions t ON t.id=s.txn_id WHERE ' . db_string_equal_to('t_type_code', 'topic_pin') . ' AND ' . db_string_not_equal_to('details2', '') . ' AND date_and_time<' . strval($time_now) . '-details2*24*60*60' . ' AND date_and_time>' . strval($last_run) . '-details2*24*60*60';
            $rows = $GLOBALS['SITE_DB']->query($sql);
            $this->topics = [];
            foreach ($rows as $row) {
                $topic_id = intval($row['details']);
                $this->topics[$topic_id] = true;
            }

            $num_queued = count($this->topics);
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Topic unpinning',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 60,
            'enabled_by_default' => true,
        ];
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        foreach (array_keys($this->topics) as $topic_id) {
            $GLOBALS['FORUM_DRIVER']->pin_topic($topic_id, false);
        }
    }
}
