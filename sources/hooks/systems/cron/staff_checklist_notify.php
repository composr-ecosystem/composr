<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_adminzone_dashboard
 */

/**
 * Hook class.
 */
class Hook_cron_staff_checklist_notify
{
    protected $outstanding;

    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, bool $calculate_num_queued) : ?array
    {
        if ($calculate_num_queued) {
            require_lang('staff_checklist');
            require_code('blocks/main_staff_checklist');

            // Find if anything needs doing
            $this->outstanding = 0;
            $rows = $GLOBALS['SITE_DB']->query_select('staff_checklist_cus_tasks', ['*']);
            foreach ($rows as $r) {
                $task_done = (($r['task_is_done'] !== null) && (($r['recur_interval'] == 0) || (($r['recur_every'] != 'mins') || (time() < $r['task_is_done'] + 60 * $r['recur_interval'])) && (($r['recur_every'] != 'hours') || (time() < $r['task_is_done'] + 60 * 60 * $r['recur_interval'])) && (($r['recur_every'] != 'days') || (time() < $r['task_is_done'] + 24 * 60 * 60 * $r['recur_interval'])) && (($r['recur_every'] != 'months') || (time() < $r['task_is_done'] + 31 * 24 * 60 * 60 * $r['recur_interval']))));
                if (!$task_done) {
                    $this->outstanding++;
                }
            }
            $_hooks = find_all_hook_obs('blocks', 'main_staff_checklist', 'Hook_checklist_');
            foreach ($_hooks as $object) {
                $ret = $object->run();
                if (($ret !== null) && (!empty($ret))) {
                    foreach ($ret as $r) {
                        if ($r[2] !== null) {
                            if ($r[2] > 0) {
                                $this->outstanding++; // A tally of undone stuff
                            }
                        } elseif ($r[1] !== null) {
                            if ($r[1] < 0) { // Needed doing in the past
                                $this->outstanding++;
                            }
                        }
                    }
                }
            }

            $num_queued = ($this->outstanding > 0) ? 1 : 0;
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Send staff checklist notifications',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 24 * 60 * 7, // Don't nag more than once a week
        ];
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        if ($this->outstanding > 0) {
            require_lang('staff_checklist');

            require_code('notifications');
            $subject = do_lang('STAFF_CHECKLIST_MAIL_SUBJECT', integer_format($this->outstanding), get_site_name(), null, get_site_default_lang());
            $adminzone_url = build_url(['page' => ''], 'adminzone', [], false, false, true);
            $message = do_notification_lang('STAFF_CHECKLIST_MAIL_BODY', integer_format($this->outstanding), get_site_name(), static_evaluate_tempcode($adminzone_url), get_site_default_lang());
            dispatch_notification('staff_checklist', null, $subject, $message, null, A_FROM_SYSTEM_PRIVILEGED);
        }
    }
}
