<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_cron_ip_address_sharing
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }
        if (!addon_installed('stats')) {
            return null;
        }
        $limit = get_option('max_ip_addresses_per_subscriber');
        if ($limit == '') {
            return null;
        }
        if (is_on_multi_site_network()) {
            return null;
        }

        return [
            'label' => 'Detect IP address sharing',
            'num_queued' => null,
            'minutes_between_runs' => 7 * 24 * 60,
        ];
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        $limit = get_option('max_ip_addresses_per_subscriber');

        require_lang('ecommerce');

        $time_now = time();

        $results = [];

        $table = 'f_usergroup_subs s JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_groups g ON g.id=s.s_group_id';
        $groups = collapse_1d_complexity('id', $GLOBALS['FORUM_DB']->query_select($table, ['g.id']));
        if (!empty($groups)) {
            $group_or_list_1 = '';
            $group_or_list_2 = '';
            foreach ($groups as $group) {
                if ($group_or_list_1 != '') {
                    $group_or_list_1 .= ' OR ';
                }
                $group_or_list_1 .= 'm_primary_group=' . strval($group);

                if ($group_or_list_2 != '') {
                    $group_or_list_2 .= ' OR ';
                }
                $group_or_list_2 .= 'gm_group_id=' . strval($group);
            }

            $sql = 'SELECT DISTINCT id,m_username FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members m';
            $sql .= ' LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_group_members g ON m.id=g.gm_member_id AND (' . $group_or_list_2 . ')';
            $sql .= ' WHERE';
            $sql .= ' (' . $group_or_list_1 . ')';
            $sql .= ' AND (SELECT COUNT(DISTINCT ip) FROM ' . get_table_prefix() . 'stats s WHERE s.member_id=m.id AND date_and_time>' . strval($time_now - 60 * 60 * 24) . ')>' . strval($limit);
            $members = $GLOBALS['FORUM_DB']->query($sql);

            foreach ($members as $member) {
                $_ips = $GLOBALS['SITE_DB']->query_select('stats', ['ip', 'COUNT(*) AS cnt'], ['member_id' => $member['id']], ' AND date_and_time>' . strval($time_now - 60 * 60 * 24) . ' GROUP BY ip');
                $ips = [];
                foreach ($_ips as $ip) {
                    $ips[] = [
                        $ip['ip'],
                        $ip['cnt'],
                        cms_gethostbyaddr($ip['ip']),
                    ];
                }

                $results[] = [
                    $member['id'],
                    $member['m_username'],
                    array_intersect($GLOBALS['FORUM_DRIVER']->get_members_groups($member['id']), $groups),
                    $ips,
                ];
            }
        }

        if (!empty($results)) {
            require_code('cns_groups');

            $table = "{|\n";
            $table .= "! " . do_lang('USERNAME') . "\n";
            $table .= "! " . do_lang('USERGROUPS') . "\n";
            $table .= "! " . do_lang('IP_ADDRESSES') . "\n";
            foreach ($results as $result) {
                $table .= "|-\n";
                $table .= "| {{" . $result[1] . "}}\n";
                $table .= "| ";
                foreach ($result[2] as $i => $group_id) {
                    if ($i != 0) {
                        $table .= ', ';
                    }
                    $table .= cns_get_group_name($group_id, false);
                }
                $table .= "\n";
                $table .= "| ";
                foreach ($result[3] as $i => $ip_address) {
                    if ($i != 0) {
                        $table .= "\n";
                    }
                    $table .= $ip_address[0] . '&times;' . strval($ip_address[1]) . ' (' . $ip_address[2] . ')';
                }
                $table .= "\n";
            }
            $table .= "|}";

            require_code('notifications');

            $subject = do_lang('MAIL_IP_ADDRESS_REPORT_SUBJECT', integer_format(intval($limit), 0));
            $message = do_notification_lang('MAIL_IP_ADDRESS_REPORT_BODY', integer_format(intval($limit), 0), $table);

            dispatch_notification('ip_address_sharing', null, $subject, $message);
        }
    }
}
