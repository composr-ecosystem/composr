<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    welcome_emails
 */

/**
 * Hook class.
 */
class Hook_cron_cns_welcome_emails
{
    protected $member_sets_to_send_to;
    protected $time_now;

    const INITIAL_BACK_TIME = 24 * 60 * 60 * 7; // Don't send for really old members, 7 day initial window is reasonable

    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info($last_run, $calculate_num_queued)
    {
        if (!addon_installed('welcome_emails')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        if ($calculate_num_queued) {
            $num_queued = 0;

            $this->time_now = time();

            if ($last_run === null) {
                $last_run = $this->time_now - self::INITIAL_BACK_TIME;
            }

            $this->member_sets_to_send_to = array();

            $mails = $GLOBALS['SITE_DB']->query_select('f_welcome_emails', array('*'));
            foreach ($mails as $mail) {
                $send_seconds_after_joining = $mail['w_send_time'] * 60 * 60;

                $members = array();

                $newsletter_style = false;

                // By newsletter
                if (($mail['w_newsletter'] !== null) && (addon_installed('newsletter'))) {
                    $newsletter_style = true;

                    // Think of it like this, m_join_time (members join time) must between $last_run and $this->time_now, but offset back by $send_seconds_after_joining
                    $where = ' WHERE join_time>' . strval($last_run - $send_seconds_after_joining) . ' AND join_time<=' . strval($this->time_now - $send_seconds_after_joining) . ' AND (the_level=3 OR the_level=4) AND newsletter_id=' . strval($mail['w_newsletter']);
                    $members = array_merge($members, $GLOBALS['SITE_DB']->query('SELECT s.email AS m_email_address,the_password,n_forename,n_surname,n.id,join_time AS m_join_time FROM ' . get_table_prefix() . 'newsletter_subscribe s JOIN ' . get_table_prefix() . 'newsletter_subscribers n ON n.email=s.email ' . $where . ' GROUP BY s.email'));
                } // By usergroup
                elseif (($mail['w_usergroup'] !== null) && (get_forum_type() == 'cns')) {
                    $where = ' WHERE join_time>' . strval($last_run - $send_seconds_after_joining) . ' AND join_time<=' . strval($this->time_now - $send_seconds_after_joining) . ' AND um.usergroup_id=' . strval($mail['w_usergroup']) . ' AND ' . db_string_not_equal_to('m_email_address', '');
                    $query = 'SELECT m.id as id, m.m_email_address AS m_email_address,m.m_username AS m_username,um.join_time AS m_join_time FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_group_join_log as um JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members as m ON m.id=um.member_id ' . $where;
                    $_members = $GLOBALS['FORUM_DB']->query($query);
                    foreach ($_members as $member) {
                        $ok = false;
                        switch ($mail['w_usergroup_type']) {
                            case '':
                                $ok = in_array($mail['w_usergroup'], $GLOBALS['FORUM_DRIVER']->get_members_groups($member['id'])); // If member still in the group
                                break;
                            case 'primary':
                                $ok = ($GLOBALS['FORUM_DRIVER']->get_member_row_field($member['id'], 'm_primary_group') == $mail['w_usergroup']); // If member still in the group
                                break;
                            case 'secondary':
                                $ok = ($GLOBALS['FORUM_DB']->query_select_value_if_there('f_group_members', 'gm_member_id', array('gm_group_id' => $mail['w_usergroup'], 'gm_member_id' => $member['id'], 'gm_validated' => 1)) !== null);
                                break;
                        }
                        if ($ok) {
                            $members[] = $member;
                        }
                    }
                } // By general membership
                elseif (($mail['w_newsletter'] === null) && ($mail['w_usergroup'] === null)) {
                    // Think of it like this, m_join_time (members join time) must between $last_run and $this->time_now, but offset back by $send_seconds_after_joining
                    $where = ' WHERE m_join_time>' . strval($last_run - $send_seconds_after_joining) . ' AND m_join_time<=' . strval($this->time_now - $send_seconds_after_joining) . ' AND ' . db_string_not_equal_to('m_email_address', '');
                    if (get_option('staff_email_receipt_configurability') != '0') {
                        $where .= ' AND m_allow_emails=1';
                    }
                    $where .= ' AND ' . db_string_equal_to('m_validated_email_confirm_code', '');
                    if (addon_installed('unvalidated')) {
                        $where .= ' AND m_validated=1';
                    }
                    $query = 'SELECT m_email_address,m_username,id,m_join_time FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members' . $where;
                    $members = array_merge($members, $GLOBALS['FORUM_DB']->query($query));
                }

                $this->member_sets_to_send_to[] = array($members, $newsletter_style, $mail);
                $num_queued += count($members);
            }
        } else {
            $num_queued = null;
        }

        return array(
            'label' => 'Send welcome e-mails',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 0,
        );
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run($last_run)
    {
        require_code('mail');

        foreach ($this->member_sets_to_send_to as $member_set) {
            list($members, $newsletter_style, $mail) = $member_set;

            foreach ($members as $member) {
                $subject = get_translated_text($mail['w_subject'], null, get_lang($member['id']));
                $text = get_translated_text($mail['w_text'], null, get_lang($member['id']));
                for ($i = 0; $i < 100; $i++) {
                    if (strpos($text, '{{' . strval($i) . '}}') !== false) {
                        $text = str_replace('{{' . strval($i) . '}}', get_timezoned_date_time($this->time_now + $i * 60 * 60 * 24), $text);
                    }
                }
                $_text = do_template('NEWSLETTER_DEFAULT_FCOMCODE', array('_GUID' => '8ffc0470c6e457cee14c413c10f7a90f', 'CONTENT' => $text, 'LANG' => get_site_default_lang()), null, false, null, '.txt', 'text');
                if (stripos($_text->evaluate(), '<html') !== false) {
                    $is_html = true;
                    $text_comcode = comcode_to_tempcode($text, null, true);
                    $_text = do_template('NEWSLETTER_DEFAULT_FCOMCODE', array('_GUID' => '8ffc0470c6e457cee14c413c10f7a90g', 'CONTENT' => $text_comcode, 'LANG' => get_lang($member['id'])));
                } else {
                    $is_html = false;
                }

                $message = $_text->evaluate(get_lang($member['id']));

                if ($newsletter_style) {
                    $forename = $member['n_forename'];
                    $surname = $member['n_surname'];
                    $name = trim($forename . ' ' . $surname);
                    require_lang('newsletter');
                    if ($name == '') {
                        $name = do_lang('NEWSLETTER_SUBSCRIBER_DEFAULT_NAME', get_site_name());
                    }
                } else {
                    $forename = '';
                    $surname = '';
                    $name = $GLOBALS['FORUM_DRIVER']->get_displayname($member['m_username']);
                }

                if (addon_installed('newsletter')) {
                    if ($newsletter_style) {
                        $send_id = 'n' . strval($member['id']);
                        require_code('crypt');
                        $hash = ratchet_hash($member['the_password'], 'xunsub');
                    } else {
                        $send_id = 'w' . strval($member['id']);
                        $hash = '';
                    }

                    require_code('newsletter');
                    $message = newsletter_variable_substitution($message, $subject, $forename, $surname, $name, $member['m_email_address'], $send_id, $hash);
                }

                if ($is_html) {
                    require_code('tempcode_compiler');
                    $temp = template_to_tempcode($message);
                    $message = $temp->evaluate(get_lang($member['id']));
                }

                if (get_value('notification_safety_testing') === '1') {
                    $test = $GLOBALS['SITE_DB']->query_select_value_if_there('logged_mail_messages', 'm_date_and_time', array('m_subject' => $subject, 'm_to_email' => serialize(array($member['m_email_address']))));
                    if ($test !== null) {
                        if ($test > $member['m_join_time']) {
                            fatal_exit(do_lang('INTERNAL_ERROR') . ' [' . $member['m_email_address'] . ']');
                        }
                        // otherwise they probably just resubscribed and hence bumped their time
                    }
                }

                dispatch_mail($subject, $message, array($member['m_email_address']), $name, '', '', array('as_admin' => true, 'in_html' => $is_html));
            }
        }
    }
}
