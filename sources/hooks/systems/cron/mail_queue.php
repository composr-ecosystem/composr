<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_cron_mail_queue
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        if (get_option('mail_queue_debug') == '1') {
            return null;
        }

        // Calculate on low priority
        if ($calculate_num_queued === null) {
            $calculate_num_queued = true;
        }

        return [
            'label' => 'Send queued e-mails',
            'num_queued' => $calculate_num_queued ? $GLOBALS['SITE_DB']->query_select_value('logged_mail_messages', 'COUNT(*)', ['m_queued' => 1]) : null,
            'minutes_between_runs' => 0,
            'queued_details_url' => build_url(['page' => 'admin_email_log'], get_module_zone('admin_email_log')),
        ];
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        $mails = $GLOBALS['SITE_DB']->query_select(
            'logged_mail_messages',
            ['*'],
            ['m_queued' => 1],
            '',
            intval(get_option('max_queued_mails_per_cron_cycle'))
        );

        if (!empty($mails)) {
            require_code('mail');

            foreach ($mails as $row) {
                $subject = $row['m_subject'];
                $message = $row['m_message'];
                $to_email = @unserialize($row['m_to_email']);
                $extra_cc_addresses = ($row['m_extra_cc_addresses'] == '') ? [] : @unserialize($row['m_extra_cc_addresses']);
                $extra_bcc_addresses = ($row['m_extra_bcc_addresses'] == '') ? [] : @unserialize($row['m_extra_bcc_addresses']);
                $to_name = @unserialize($row['m_to_name']);
                $from_email = $row['m_from_email'];
                $from_name = $row['m_from_name'];
                $join_time = $row['m_join_time'];
                $sender_email = ($row['m_sender_email'] == '') ? null : $row['m_sender_email'];
                $plain_subject = $row['m_plain_subject'];

                if ((!is_array($to_email)) && ($to_email !== null)) {
                    continue;
                }

                $mail_ob = dispatch_mail(
                    $subject,
                    $message,
                    $to_email,
                    $to_name,
                    $from_email,
                    $from_name,
                    [
                        'priority' => $row['m_priority'],
                        'attachments' => unserialize($row['m_attachments']),
                        'no_cc' => ($row['m_no_cc'] == 1),
                        'as' => $row['m_as'],
                        'as_admin' => ($row['m_as_admin'] == 1),
                        'in_html' => ($row['m_in_html'] == 1),
                        'coming_out_of_queue' => true,
                        'mail_template' => $row['m_template'],
                        'extra_cc_addresses' => $extra_cc_addresses,
                        'extra_bcc_addresses' => $extra_bcc_addresses,
                        'require_recipient_valid_since' => $join_time,
                        'sender_email' => $sender_email,
                        'plain_subject' => $plain_subject == 1,
                        'leave_attachments_on_failure' => true,
                    ]
                );
                $success = $mail_ob->worked;

                if ($success) {
                    $GLOBALS['SITE_DB']->query_update('logged_mail_messages', ['m_queued' => 0], ['id' => $row['id']], '', 1);
                }
            }

            delete_cache_entry('main_staff_checklist');
        }
    }
}
