<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

/**
 * Hook class.
 */
class Hook_cron_cns_confirm_reminder
{
    protected $rows;

    protected const SECS_REMIND_AFTER = 24 * 60 * 60 * 2;

    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, bool $calculate_num_queued) : ?array
    {
        if (get_forum_type() != 'cns') {
            return null;
        }

        if (is_on_multi_site_network()) {
            return null;
        }

        if ($calculate_num_queued) {
            if ($last_run === null) {
                $last_run = time() - self::SECS_REMIND_AFTER;
            }

            $query = 'SELECT * FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members WHERE ' . db_string_not_equal_to('m_validated_email_confirm_code', '') . ' AND m_join_time>' . strval($last_run - self::SECS_REMIND_AFTER) . ' AND m_join_time<=' . strval($last_run);
            $this->rows = $GLOBALS['FORUM_DB']->query($query);

            foreach ($this->rows as $i => $row) {
                $coppa = (get_option('is_on_coppa') == '1') && ($row['m_dob_year'] !== null) && (intval(floor(utctime_to_usertime(time() - mktime(0, 0, 0, $row['m_dob_month'], $row['m_dob_day'], $row['m_dob_year'])) / 31536000.0)) < intval(get_option('coppa_age')));
                if (!$coppa) {
                    unset($this->rows[$i]);
                }
            }

            $num_queued = count($this->rows);
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Send account confirmation reminders',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 24 * 60 * 2,
        ];
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        require_code('mail');
        require_lang('cns');

        foreach ($this->rows as $row) {
            $zone = get_module_zone('join');
            if ($zone != '') {
                $zone .= '/';
            }
            $url = get_base_url() . '/' . $zone . 'index.php?page=join&type=step4&email=' . urlencode($row['m_email_address']) . '&code=' . urlencode($row['m_validated_email_confirm_code']);
            $url_simple = get_base_url() . '/' . $zone . 'index.php?page=join&type=step4';
            $message = do_lang('CNS_SIGNUP_TEXT', comcode_escape(get_site_name()), comcode_escape($url), [$url_simple, $row['m_email_address'], strval($row['m_validated_email_confirm_code'])], $row['m_language']);
            dispatch_mail(do_lang('CONFIRM_EMAIL_SUBJECT', get_site_name(), null, null, $row['m_language']), $message, [$row['m_email_address']], $row['m_username']);
        }
    }
}
