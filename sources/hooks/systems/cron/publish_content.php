<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    validation
 */

/**
 * Hook class.
 */
class Hook_cron_publish_content
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  ?boolean $calculate_num_queued Calculate the number of items queued, if possible (null: the hook may decide / low priority)
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, ?bool $calculate_num_queued) : ?array
    {
        if (!addon_installed('validation')) {
            return null;
        }

        // We use Resource-fs for automatic content validation, which requires Commandr
        if (!addon_installed('commandr')) {
            return null;
        }

        return [
            'label' => 'Validate scheduled content',
            'num_queued' => null,
            'minutes_between_runs' => 1,
            'enabled_by_default' => true,
        ];
    }

    /**
     * Run function for system scheduler hooks. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        require_code('zones');
        require_code('resource_fs');
        require_code('content');

        // Get all content and resource hook objects
        $hooks = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
        $hooks = array_merge($hooks, find_all_hook_obs('systems', 'resource_meta_aware', 'Hook_resource_meta_aware_'));

        foreach ($hooks as $name => $ob) {
            $hook_info = $ob->info();

            // Skip hooks which do not pertain to us (e.g. does not support scheduled validation)
            if ($hook_info === null) {
                continue;
            }
            if ($hook_info['validated_field'] === null) {
                continue;
            }
            if ($hook_info['validation_time_field'] === null) {
                continue;
            }

            // Get info we need
            $db = $hook_info['db'];
            $table = $hook_info['table'];
            $id_field = $hook_info['id_field'];
            $validated_field = $hook_info['validated_field'];
            $validation_time_field = $hook_info['validation_time_field'];

            // ID field could be an array, so we must account for this
            $select_map = [$validated_field, $validation_time_field];
            if (is_array($id_field)) {
                $select_map = array_merge($select_map, $id_field);
            } else {
                $select_map[] = $id_field;
            }

            // Iterate over content that needs to be validated
            $rows = $db->query_select($table, $select_map, [$validated_field => 0], ' AND (' . $validation_time_field . ' IS NOT NULL AND ' . $validation_time_field . '<=' . strval(time()) . ')');
            foreach ($rows as $row) {
                // Get the Resource-fs record for the row
                $resource_id = extract_content_str_id_from_data($row, $hook_info);
                $resource = get_resource_fs_record($name, $resource_id);
                if ($resource === null) {
                    continue;
                }

                // Edit properties on the resource which, when saved, should trigger the appropriate software API functions for the content
                $fs_data = json_decode($resource[0], true);
                $fs_data['validated'] = 1;
                $fs_data['validation_time'] = null;
                edit_resource_fs_record($name, $resource_id, json_encode($fs_data));
            }
        }
    }
}
