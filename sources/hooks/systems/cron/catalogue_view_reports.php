<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    catalogues
 */

/**
 * Hook class.
 */
class Hook_cron_catalogue_view_reports
{
    protected $doing;

    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, bool $calculate_num_queued) : ?array
    {
        if (!addon_installed('catalogues')) {
            return null;
        }

        if ($calculate_num_queued) {
            $time_now = time();

            $done_reports = ['daily' => false, 'weekly' => false, 'monthly' => false, 'quarterly' => false];

            $catalogues = $GLOBALS['SITE_DB']->query('SELECT c_title,c_name,c_send_view_reports FROM ' . get_table_prefix() . 'catalogues WHERE ' . db_string_not_equal_to('c_send_view_reports', '') . ' AND ' . db_string_not_equal_to('c_send_view_reports', 'never'));
            $this->doing = [];
            foreach ($catalogues as $catalogue) {
                switch ($catalogue['c_send_view_reports']) {
                    case 'daily':
                        $amount = 60 * 60 * 24;
                        break;
                    case 'weekly':
                        $amount = 60 * 60 * 24 * 7;
                        break;
                    case 'monthly':
                        $amount = 60 * 60 * 24 * 31;
                        break;
                    case 'quarterly':
                        $amount = 60 * 60 * 24 * 93;
                        break;
                    default:
                        $amount = null;
                }

                if ($amount !== null) {
                    $last_time = intval(get_value('last_catalogue_reports_' . $catalogue['c_send_view_reports'], null, true));
                    if ($last_time <= ($time_now - $amount)) {
                        // Mark done
                        if (!$done_reports[$catalogue['c_send_view_reports']]) {
                            set_value('last_catalogue_reports_' . $catalogue['c_send_view_reports'], strval($time_now), true);
                            $done_reports[$catalogue['c_send_view_reports']] = true;
                        }

                        $this->doing[] = $catalogue; // Mark as doing, rather than do immediately - so to avoid race conditions
                    }
                }
            }

            $num_queued = count($this->doing);
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Send catalogue entry view-reports',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 60 * 12,
        ];
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        if (!empty($this->doing)) {
            require_code('notifications');
            require_code('catalogues');
            require_lang('catalogues');
        }

        // Now for the intensive part
        foreach ($this->doing as $catalogue) {
            $start = 0;
            do {
                $old_limit = cms_set_time_limit(TIME_LIMIT_EXTEND__SLOW);

                // So, we find all the entries in their catalogue, and group them by submitters
                $entries = $GLOBALS['SITE_DB']->query_select('catalogue_entries', ['id', 'ce_submitter', 'ce_views', 'ce_views_prior'], ['c_name' => $catalogue['c_name']], 'ORDER BY ce_submitter', 2000, $start);
                $members = [];
                foreach ($entries as $entry) {
                    if (!array_key_exists($entry['ce_submitter'], $members)) {
                        $members[$entry['ce_submitter']] = [];
                    }

                    $members[$entry['ce_submitter']][] = $entry;
                }
                $catalogue_title = get_translated_text($catalogue['c_title']);
                $regularity = do_lang('VR_' . cms_strtoupper_ascii($catalogue['c_send_view_reports']));
                $fields = $GLOBALS['SITE_DB']->query_select('catalogue_fields', ['*'], ['c_name' => $catalogue['c_name']], 'ORDER BY cf_order', 1);

                // And now we send out mails, and get ready for the next report
                foreach ($members as $member_id => $member) {
                    // Work out the contents of the mail
                    $buildup = '';
                    foreach ($member as $entry) {
                        $field_values = get_catalogue_entry_field_values($catalogue['c_name'], $entry, [0], $fields);
                        $entry_title = $field_values[0]['effective_value'];
                        $views = $entry['ce_views'] - $entry['ce_views_prior'];
                        $GLOBALS['SITE_DB']->query_update('catalogue_entries', ['ce_views_prior' => $entry['ce_views']], ['id' => $entry['id']], '', 1);
                        $temp = do_lang($catalogue['c_name'] . '__CATALOGUE_VIEW_REPORT_LINE', comcode_escape(is_object($entry_title) ? $entry_title->evaluate() : $entry_title), integer_format($views, 0), null, null, false);
                        if ($temp === null) {
                            $temp = do_lang('DEFAULT__CATALOGUE_VIEW_REPORT_LINE', comcode_escape(is_object($entry_title) ? $entry_title->evaluate() : $entry_title), integer_format($views, 0));
                        }
                        $buildup .= $temp;
                    }
                    $mail = do_notification_lang($catalogue['c_name'] . '__CATALOGUE_VIEW_REPORT', $buildup, comcode_escape($catalogue_title), $regularity, get_lang($member_id), false);
                    if ($mail === null) {
                        $mail = do_notification_lang('DEFAULT__CATALOGUE_VIEW_REPORT', $buildup, comcode_escape($catalogue_title), [$regularity, get_site_name()], get_lang($member_id));
                    }
                    $subject_line = do_lang($catalogue['c_name'] . '__CATALOGUE_VIEW_REPORT_SUBJECT', $catalogue_title, get_site_name(), null, get_lang($member_id), false);
                    if ($subject_line === null) {
                        $subject_line = do_lang('DEFAULT__CATALOGUE_VIEW_REPORT_SUBJECT', comcode_escape($catalogue_title), comcode_escape(get_site_name()), null, get_lang($member_id));
                    }

                    // Send actual notification
                    dispatch_notification('catalogue_view_reports__' . $catalogue['c_name'], null, $subject_line, $mail, [$member_id], A_FROM_SYSTEM_PRIVILEGED);
                }

                $start += 2000;

                cms_set_time_limit($old_limit);
            } while (count($entries) == 2000);
        }
    }
}
