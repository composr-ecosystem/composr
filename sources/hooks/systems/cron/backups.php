<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    backup
 */

/**
 * Hook class.
 */
class Hook_cron_backups
{
    /**
     * Get info from this hook.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     * @param  boolean $calculate_num_queued Calculate the number of items queued, if possible
     * @return ?array Return a map of info about the hook (null: disabled)
     */
    public function info(?int $last_run, bool $calculate_num_queued) : ?array
    {
        if (!addon_installed('backup')) {
            return null;
        }

        $backup_schedule_time = intval(get_value('backup_schedule_time'));

        if ($backup_schedule_time == 0) {
            return null;
        }

        if ($calculate_num_queued) {
            $num_queued = (time() >= $backup_schedule_time) ? 1 : 0;
        } else {
            $num_queued = null;
        }

        return [
            'label' => 'Backups',
            'num_queued' => $num_queued,
            'minutes_between_runs' => 60,
        ];
    }

    /**
     * Run function for system scheduler scripts. Searches for things to do. ->info(..., true) must be called before this method.
     *
     * @param  ?TIME $last_run Last time run (null: never)
     */
    public function run(?int $last_run)
    {
        $backup_schedule_time = intval(get_value('backup_schedule_time'));

        $backup_recurrance_days = intval(get_value('backup_recurrance_days'));

        $time_now = time();
        $last_time = intval(get_value('last_backup'));
        if ($time_now >= $backup_schedule_time) {
            delete_cache_entry('main_staff_checklist');

            require_lang('backups');
            require_code('backup');

            $max_size = intval(get_value('backup_max_size'));
            $b_type = get_value('backup_b_type');
            global $MB2_FILE, $MB2_B_TYPE, $MB2_MAX_SIZE;
            require_code('crypt');
            $end = ((get_option('backup_overwrite') != '1') || ($b_type == 'incremental')) ? get_secure_random_string() : 'scheduled';
            if ($b_type == 'full') {
                $file = 'restore_' . $end;
            } elseif ($b_type == 'incremental') {
                $file = 'dif_' . $end;
            } elseif ($b_type == 'sql') {
                $file = 'database_' . $end;
            }

            cms_register_shutdown_function_safe('make_backup', $file, $b_type, $max_size);

            if ($backup_recurrance_days == 0) {
                delete_value('backup_schedule_time');
            } else {
                set_value('backup_schedule_time', strval($backup_schedule_time + $backup_recurrance_days * 60 * 60 * 24));
            }
        }
    }
}
