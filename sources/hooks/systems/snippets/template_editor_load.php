<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_themeing
 */

/**
 * Hook class.
 */
class Hook_snippet_template_editor_load
{
    /**
     * Run function for snippet hooks. Generates XHTML to insert into a page using AJAX.
     *
     * @return Tempcode The snippet
     */
    public function run() : object
    {
        if (!has_actual_page_access(get_member(), 'admin_themes', get_module_zone('admin_themes'))) {
            access_denied('I_ERROR');
        }

        require_code('form_templates');
        require_code('themes2');
        require_code('themes3');
        require_lang('themes');
        require_code('files2');

        $file = get_param_string('file', false, INPUT_FILTER_GET_COMPLEX);
        $file_id = get_dynamic_file_parameter($file);
        $theme = get_param_string('theme');
        $active_guid = get_param_string('active_guid', null);

        $include_tempcode_editing = true;
        $include_css_editing = false;

        $revisions = new Tempcode();

        $live_preview_url = mixed();
        $live_preview_url = get_param_string('live_preview_url', null, INPUT_FILTER_URL_INTERNAL);
        $screen_preview_url = null;

        if (strpos($file, ':') === false) {
            // Template...

            $subdir = dirname($file);
            $_file = basename($file);
            $suffix = '.' . get_file_extension($file);
            $clean_file = basename($file, $suffix);

            $file_parts = explode('/', $file, 2);

            switch ($file_parts[0]) {
                case 'templates':
                    $highlighter_type = 'html';
                    break;

                case 'css':
                    $highlighter_type = 'css';
                    $include_tempcode_editing = false;
                    $include_css_editing = true;
                    break;

                case 'javascript':
                    $highlighter_type = 'javascript';
                    $include_tempcode_editing = false;
                    break;

                case 'xml':
                    $highlighter_type = 'xml';
                    break;

                case 'text':
                default:
                    $highlighter_type = 'text';
                    break;
            }

            $custom_path_short = 'themes/' . filter_naughty($theme) . '/' . $subdir . '_custom/' . $_file;

            // Read contents
            $path = find_template_path($_file, $subdir, $theme);
            if ($path === null) {
                $contents = '';
            } else {
                $contents = cms_file_get_contents_safe($path, FILE_READ_UNIXIFIED_TEXT | FILE_READ_BOM);

                // Revisions
                if (addon_installed('actionlog')) {
                    require_code('revisions_engine_files');
                    $revision_engine = new RevisionEngineFiles();
                    $revision_loaded = null;
                    $revisions = $revision_engine->ui_revisions_controller(
                        dirname($custom_path_short),
                        $clean_file,
                        ltrim($suffix, '.'),
                        'EDIT_TEMPLATE',
                        $contents,
                        $revision_loaded
                    );
                }
            }

            $guids = find_template_guids($file, $active_guid);
            if (!empty($guids)) {
                $guids = [];
            }

            $related = collapse_1d_complexity('rel_b', $GLOBALS['SITE_DB']->query_select('theme_template_relations', ['rel_b'], ['rel_a' => $file], 'ORDER BY rel_b', 50));
            if (count($related) == 50) {
                $related = [];
            }

            $editing_toolbar_dropdowns = $this->get_tempcode_editing_toolbar_dropdowns($file, $file_id);

            $all_previews = find_all_previews__by_template();
            if (array_key_exists($file, $all_previews)) {
                $url_map = [
                    'page' => 'admin_themes',
                    'type' => 'screen_preview',
                    'id' => $file,
                    'hook' => $all_previews[$file][0],
                    'function' => $all_previews[$file][1],
                    'arg' => '',
                    'cache_blocks' => 0,
                    'keep_theme' => $theme,
                    'keep_wide_high' => 1,
                    // NB: The 'template_preview_op' POST parameter will be set, which causes the live preview
                ];
                $screen_preview_url = build_url($url_map, get_module_zone('admin_themes'));
            }
        } else {
            // Comcode page...

            list($zone, $page) = explode(':', $file);

            $highlighter_type = 'text';

            $custom_path_short = $zone . (($zone == '') ? '' : '/') . 'pages/comcode_custom/' . get_site_default_lang() . '/' . $page . '.txt';

            // Read contents
            list(, , $path) = find_comcode_page(get_site_default_lang(), $page, $zone);
            if ($path == '') {
                $contents = '';
            } else {
                $contents = cms_file_get_contents_safe($path, FILE_READ_UNIXIFIED_TEXT | FILE_READ_BOM);

                // Revisions
                if (addon_installed('actionlog')) {
                    require_code('revisions_engine_files');
                    $revision_engine = new RevisionEngineFiles();
                    $revision_loaded = null;
                    $revisions = $revision_engine->ui_revisions_controller(
                        dirname($custom_path_short),
                        $page,
                        'txt',
                        'COMCODE_PAGE_EDIT',
                        $contents,
                        $revision_loaded
                    );
                }
            }

            $guids = [];

            $related = [];

            $editing_toolbar_dropdowns = $this->get_tempcode_editing_toolbar_dropdowns(null, $file_id);

            if ($live_preview_url === null) {
                $url_map = [
                    'page' => $page,
                    'cache_blocks' => 0,
                    'keep_theme' => $theme,
                    // NB: The 'template_preview_op' POST parameter will be set, which causes the live preview
                ];
                $live_preview_url = build_url($url_map, $zone);
            }
        }

        list($parameters, $directives, $misc_symbols, $programmatic_symbols, $abstraction_symbols, $arithmetical_symbols, $formatting_symbols, $logical_symbols) = $editing_toolbar_dropdowns;

        check_suhosin_request_size(strlen($contents));

        // Make sure we have directory before we allow editing to start, in case of an error
        $custom_path = get_custom_file_base() . '/' . $custom_path_short;
        if (!file_exists(dirname($custom_path))) {
            make_missing_directory(dirname($custom_path));
        }

        return do_template('THEME_TEMPLATE_EDITOR_TAB', [
            '_GUID' => 'd4b022ce1d71666c1c7f5f5bd5a9dbb3',
            'THEME' => $theme,
            'FILE' => $file,
            'FILE_ID' => $file_id,
            'CONTENTS' => $contents,
            'HIGHLIGHTER_TYPE' => $highlighter_type,
            'REVISIONS' => $revisions,
            'GUIDS' => $guids,
            'RELATED' => $related,
            'LIVE_PREVIEW_URL' => $live_preview_url,
            'SCREEN_PREVIEW_URL' => $screen_preview_url,

            'INCLUDE_TEMPCODE_EDITING' => $include_tempcode_editing,
            'PARAMETERS' => $parameters,
            'DIRECTIVES' => $directives,
            'MISC_SYMBOLS' => $misc_symbols,
            'PROGRAMMATIC_SYMBOLS' => $programmatic_symbols,
            'ABSTRACTION_SYMBOLS' => $abstraction_symbols,
            'ARITHMETICAL_SYMBOLS' => $arithmetical_symbols,
            'FORMATTING_SYMBOLS' => $formatting_symbols,
            'LOGICAL_SYMBOLS' => $logical_symbols,

            'INCLUDE_CSS_EDITING' => $include_css_editing,

            'OWN_FORM' => null,
        ]);
    }

    /**
     * Get dropdowns of things to insert from the editing toolbar.
     *
     * @param  ?ID_TEXT $file The template (null: not a template)
     * @param  string $file_id The ID of the actual template editor we are working with
     * @return array Tuple of dropdowns
     */
    protected function get_tempcode_editing_toolbar_dropdowns(?string $file, string $file_id) : array
    {
        $parameters = new Tempcode();
        if ($file !== null) {
            $_parameters = find_template_parameters($file);
            foreach ($_parameters as $parameter) {
                $parameters->attach(form_input_list_entry($parameter . '__0', false, $parameter));
            }
            $parameters = do_template('THEME_TEMPLATE_EDITOR_TEMPCODE_DROPDOWN', [
                '_GUID' => '50f31c49c99b864c1719fb51ed426274',
                'FILE_ID' => $file_id,
                'PARAMETERS' => $parameters,
                'STUB' => 'parameter',
                'LANG' => do_lang_tempcode('INSERT_PARAMETER'),
            ]);
        }

        $_directives = [
            ['BOX', '1'],
            ['IF_NON_EMPTY', '1'],
            ['IF_EMPTY', '1'],
            ['IF_PASSED', '1'],
            ['IF_NON_PASSED', '1'],
            ['IF', '1'],
            ['SET', '1'],
            ['LOOP', '1'], // To simplify things, we won't throw all options at the user
        ];
        $directives = $this->generate_dropdown_from($_directives, 'DIRECTIVE', $file_id);

        $_misc_symbols = [
            ['THEME', '0'],
            ['LANG', '0'],
            ['BASE_URL', '0'],
            ['MOBILE', '0'],
            ['DESKTOP', '0'],
            ['LTR', '0'],
            ['RTL', '0'],
            ['SITE_NAME', '0'],
            ['STAFF_ADDRESS', '0'],
            ['MEMBER', '0'],
            ['AVATAR', '0-1'],
            ['PHOTO', '0-1'],
            ['DATE_TIME', '0'],
            ['DATE', '0'],
            ['TIME', '0'],
            ['ZONE', '0'],
            ['PAGE', '0'],
            ['_GET', '1'],
            ['JS_ON', '0'],
            ['USERNAME', '0-1'],
            ['DISPLAYED_USERNAME', '1'],
            ['MATCH_KEY_MATCH', '1'],
            ['BROWSER_MATCHES', '1'],
            ['REQUIRE_CSS', '1'],
            ['REQUIRE_JAVASCRIPT', '1'],
        ];
        $misc_symbols = $this->generate_dropdown_from($_misc_symbols, 'MISC_SYMBOL', $file_id);

        $_programmatic_symbols = [
            ['RAND', '0'],
            ['SET_RAND', '0+'],
            ['CYCLE', '1+'],
            ['INIT', '1'],
            ['SET', '2'],
            ['GET', '1'],
            ['INC', '1'],
            ['DEC', '1'],
        ];
        $programmatic_symbols = $this->generate_dropdown_from($_programmatic_symbols, 'PROGRAMMATIC_SYMBOL', $file_id);

        $_abstraction_symbols = [
            ['IMG', '1'],
            ['PAGE_LINK', '1'],
            ['SELF_URL', '0'],
            ['MEMBER_PROFILE_URL', '0-1'],
            ['MAILTO', '0'],
            ['BLOCK', '2'],
            ['METADATA', '1'],
            ['THUMBNAIL', '2'],
            ['LOAD_PAGE', '1'],
            ['LOAD_PANEL', '1'],
            ['HAS_ZONE_ACCESS', '1-2'],
            ['HAS_ACTUAL_PAGE_ACCESS', '1-2'],
            ['HAS_PRIVILEGE', '1-2'],
            ['IS_ADMIN', '0-1'],
            ['IS_STAFF', '0-1'],
            ['IS_GUEST', '0'],
            ['IS_IN_GROUP', '1'],
        ];
        $abstraction_symbols = $this->generate_dropdown_from($_abstraction_symbols, 'ABSTRACTION_SYMBOL', $file_id);

        $_arithmetical_symbols = [
            ['MAX', '2'],
            ['MIN', '2'],
            ['REM', '2'],
            ['DIV', '2'],
            ['SUBTRACT', '2'],
            ['ADD', '2'],
            ['ROUND', '2'],
            ['MULT', '2'],
        ];
        $arithmetical_symbols = $this->generate_dropdown_from($_arithmetical_symbols, 'ARITHMETICAL_SYMBOL', $file_id);

        $_formatting_symbols = [
            ['WCASE', '1'],
            ['LCASE', '1'],
            ['UCASE', '1'],
            ['REPLACE', '3'],
            ['AT', '2'],
            ['SUBSTR', '3'],
            ['IN_STR', '2'],
            ['LENGTH', '1'],
            ['TRIM', '1'],
            ['STRIP_TAGS', '1'],
            ['TRUNCATE_LEFT', '2'],
            ['TRUNCATE_SPREAD', '2'],
        ];
        $formatting_symbols = $this->generate_dropdown_from($_formatting_symbols, 'FORMATTING_SYMBOL', $file_id);

        $_logical_symbols = [
            ['NOT', '1'],
            ['OR', '2'],
            ['AND', '2'],
            ['EQ', '2'],
            ['NEQ', '2'],
            ['LT', '2'],
            ['GT', '2'],
        ];
        $logical_symbols = $this->generate_dropdown_from($_logical_symbols, 'LOGICAL_SYMBOL', $file_id);

        return [$parameters, $directives, $misc_symbols, $programmatic_symbols, $abstraction_symbols, $arithmetical_symbols, $formatting_symbols, $logical_symbols];
    }

    /**
     * Helper function to get Tempcode for insertion of Tempcode variables.
     *
     * @param  array $array A list of pairs (symbol name,arity)
     * @param  string $stub The "stub" that determines what language strings to lookup for the given symbols, and generally, the collective naming strategy
     * @param  string $file_id The ID of the actual template editor we are working with
     * @return Tempcode The Tempcode
     */
    protected function generate_dropdown_from(array $array, string $stub, string $file_id) : object
    {
        $out = new Tempcode();
        foreach ($array as $x) {
            list($op, $arity) = $x;
            $lang = do_lang_tempcode($stub . '__' . $op);
            $out->attach(form_input_list_entry($op . '__' . $arity, false, $lang));
        }
        return do_template('THEME_TEMPLATE_EDITOR_TEMPCODE_DROPDOWN', [
            '_GUID' => 'c6d24f278ec874a4b6abff8c359f80ba',
            'FILE_ID' => $file_id,
            'PARAMETERS' => $out,
            'STUB' => $stub,
            'LANG' => do_lang_tempcode('INSERT_' . $stub),
        ]);
    }
}
