<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_feedback_features
 */

/**
 * Hook class.
 */
class Hook_symbol_SHOW_RATINGS
{
    /**
     * Run function for symbol hooks. Searches for tasks to perform.
     *
     * @param  array $param Symbol parameters
     * @return string Result
     */
    public function run(array $param) : string
    {
        $value = '';

        if ((!empty($param[0])) && (isset($param[1]))) {
            $rating_type = $param[0];
            $rating_id = $param[1];
            $max = (!empty($param[2])) ? intval($param[2]) : 30;

            require_code('feedback');
            $real_feedback_type = _real_feedback_type($rating_type);

            $ratings = [];
            $_ratings = $GLOBALS['SITE_DB']->query_select('rating', ['rating_member', 'rating_ip', 'rating_time', 'rating'], ['rating_for_type' => $real_feedback_type, 'rating_for_id' => $rating_id], 'ORDER BY rating_time DESC', $max);
            foreach ($_ratings as $rating) {
                $ratings[] = [
                    'RATING_MEMBER' => strval($rating['rating_member']),
                    'RATING_USERNAME' => is_guest($rating['rating_member']) ? '' : $GLOBALS['FORUM_DRIVER']->get_username($rating['rating_member'], false, USERNAME_DEFAULT_BLANK),
                    'RATING_IP' => $rating['rating_ip'],
                    'RATING_TIME' => strval($rating['rating_time']),
                    'RATING_TIME_FORMATTED' => get_timezoned_date_time($rating['rating_time']),
                    'RATING' => strval($rating['rating']),
                ];
            }
            if (count($_ratings) < $max) {
                $cnt = count($_ratings);
            } else {
                $cnt = $GLOBALS['SITE_DB']->query_select_value('rating', 'COUNT(*)', ['rating_for_type' => $rating_type, 'rating_for_id' => $rating_id]);
            }

            $_value = do_template('RATINGS_SHOW', [
                '_GUID' => 'fda94aa20508a071853e56e14c13fe3c',
                'RATINGS' => $ratings,
                'HAS_MORE' => $cnt > count($_ratings),
                'MAX' => strval($max),
                'CNT' => strval($cnt),
                'CNT_REMAINING' => strval($cnt - count($ratings)),
            ]);
            $value = static_evaluate_tempcode($_value);
        }

        return $value;
    }
}
