<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    wordfilter
 */

/**
 * Hook class.
 */
class Hook_addon_registry_wordfilter
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for (used in generating the TAR filename).
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }

    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return null;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Community';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'Block rude/offensive/inappropriate words.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_censor',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
            'previously_in_addon' => ['core_wordfilter'],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/adminzone/security/wordfilter.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'themes/default/images/icons/menu/adminzone/security/wordfilter.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/security/wordfilter.svg',
            'sources/hooks/systems/addon_registry/wordfilter.php',
            'sources/hooks/systems/page_groupings/wordfilter.php',
            'lang/EN/wordfilter.ini',
            'adminzone/pages/modules/admin_wordfilter.php',
            'sources/hooks/modules/admin_setupwizard/wordfilter.php',
            'sources/hooks/modules/admin_import_types/wordfilter.php',
            'sources/hooks/systems/commandr_fs_extended_config/wordfilter.php',
            'sources/hooks/systems/actionlog/wordfilter.php',
            'themes/default/javascript/wordfilter.js',
        ];
    }

    /**
     * Find naughty words.
     *
     * @return array Find naughty words
     */
    protected function youre_a_naughty_boy_fawlty() : array
    {
        return [
            'arsehole', 'asshole', 'arse', 'bastard', 'cock', 'cocked', 'cocksucker', 'cunt', 'cum',
            'blowjob', 'bollocks', 'bondage', 'bugger', 'buggery', 'dickhead', 'dildo', 'faggot', 'fuck', 'fucked', 'fucking',
            'fucker', 'gayboy', 'jackoff', 'jerk-off', 'motherfucker', 'nigger', 'piss', 'pissed', 'puffter', 'pussy',
            'queers', 'retard', 'shag', 'shagged',
            'shat', 'shit', 'slut', 'twat', 'wank', 'wanker', 'whore',
        ];
    }

    /**
     * Find available predefined content, and what is installed.
     *
     * @return array A map of available predefined content codenames, and details (if installed, and title)
     */
    public function enumerate_predefined_content() : array
    {
        require_lang('wordfilter');

        $naughties = $this->youre_a_naughty_boy_fawlty();
        $_naughties = [];
        foreach ($naughties as $naughty) {
            $_naughties[] = db_string_equal_to('word', $naughty);
        }
        $or_list = implode(' OR ', $_naughties);
        $installed = ($GLOBALS['SITE_DB']->query_select_value('wordfilter', 'COUNT(*)', [], ' AND (' . $or_list . ')') > 0);

        return [
            'have_default_wordfilter' => [
                'title' => do_lang_tempcode('KEEP_WORDFILTER'),
                'description' => do_lang_tempcode('DESCRIPTION_HAVE_DEFAULT_WORDFILTER'),
                'installed' => $installed,
            ],
        ];
    }

    /**
     * Install predefined content.
     *
     * @param  ?array $content A list of predefined content labels to install (null: all)
     */
    public function install_predefined_content(?array $content = null)
    {
        if ((($content === null) || (in_array('have_default_wordfilter', $content))) && (!has_predefined_content('wordfilter', 'have_default_wordfilter'))) {
            $naughties = $this->youre_a_naughty_boy_fawlty();
            $GLOBALS['SITE_DB']->query_insert('wordfilter', ['word' => $naughties, 'w_replacement' => array_fill(0, count($naughties), WORDFILTER_REPLACEMENT_GRAWLIXES), 'w_match_type' => array_fill(0, count($naughties), WORDFILTER_MATCH_TYPE_FULL)]);
        }
    }

    /**
     * Uninstall predefined content.
     *
     * @param  ?array $content A list of predefined content labels to uninstall (null: all)
     */
    public function uninstall_predefined_content(?array $content = null)
    {
        if ((($content === null) || (in_array('have_default_wordfilter', $content))) && (has_predefined_content('wordfilter', 'have_default_wordfilter'))) {
            $naughties = $this->youre_a_naughty_boy_fawlty();
            foreach ($naughties as $word) {
                $GLOBALS['SITE_DB']->query_delete('wordfilter', ['word' => $word], '', 1);
            }
        }
    }
}
