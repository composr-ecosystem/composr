<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_abstract_components
 */

/**
 * Hook class.
 */
class Hook_addon_registry_core_abstract_components
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array($runtime = false)
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for.
     *
     * @return float Version number
     */
    public function get_version()
    {
        return cms_version_number();
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description()
    {
        return 'Core rendering functionality.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials()
    {
        return [
            'tut_themes',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array File permissions to set
     */
    public function get_dependencies()
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon()
    {
        return 'themes/default/images/icons/admin/component.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list()
    {
        return [
            'sources/hooks/systems/addon_registry/core_abstract_components.php',
            'themes/default/templates/CROP_TEXT_MOUSE_OVER.tpl',
            'themes/default/templates/CROP_TEXT_MOUSE_OVER_INLINE.tpl',
            'themes/default/templates/IMG_THUMB.tpl',
            'themes/default/templates/POST.tpl',
            'themes/default/templates/POST_CHILD_LOAD_LINK.tpl',
            'themes/default/templates/BUTTON_SCREEN.tpl',
            'themes/default/templates/BUTTON_SCREEN_ITEM.tpl',
            'themes/default/templates/STANDARDBOX_default.tpl',
            'themes/default/templates/STANDARDBOX_accordion.tpl',
            'themes/default/templates/HANDLE_CONFLICT_RESOLUTION.tpl',
            'themes/default/templates/FRACTIONAL_EDIT.tpl',
            'themes/default/javascript/fractional_edit.js',
            'data/fractional_edit.php',
            'data/edit_ping.php',
            'data/change_detection.php',
            'themes/default/templates/STAFF_ACTIONS.tpl',
            'sources/hooks/systems/change_detection/.htaccess',
            'sources_custom/hooks/systems/change_detection/.htaccess',
            'sources/hooks/systems/change_detection/index.html',
            'sources_custom/hooks/systems/change_detection/index.html',

            'sources/graphs.php',
            'themes/default/templates/GRAPH_BAR_CHART.tpl',
            'themes/default/templates/GRAPH_LINE_CHART.tpl',
            'themes/default/templates/GRAPH_PIE_CHART.tpl',
            'themes/default/templates/GRAPH_SCATTER_DIAGRAM.tpl',
            'themes/default/javascript/charts.js',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews()
    {
        return [
            'templates/BUTTON_SCREEN_ITEM.tpl' => 'button_screen_item',
            'templates/FRACTIONAL_EDIT.tpl' => 'administrative__fractional_edit',
            'templates/CROP_TEXT_MOUSE_OVER_INLINE.tpl' => 'crop_text_mouse_over_inline',
            'templates/IMG_THUMB.tpl' => 'img_thumb',
            'templates/CROP_TEXT_MOUSE_OVER.tpl' => 'crop_text_mouse_over',
            'templates/BUTTON_SCREEN.tpl' => 'button_screen',
            'templates/STANDARDBOX_default.tpl' => 'standardbox_default',
            'templates/STANDARDBOX_accordion.tpl' => 'standardbox_accordion',
            'templates/HANDLE_CONFLICT_RESOLUTION.tpl' => 'administrative__handle_conflict_resolution',
            'templates/STAFF_ACTIONS.tpl' => 'staff_actions',
            'templates/GRAPH_SCATTER_DIAGRAM.tpl' => 'graph_scatter_diagram',
            'templates/GRAPH_LINE_CHART.tpl' => 'graph_line_chart',
            'templates/GRAPH_PIE_CHART.tpl' => 'graph_pie_chart',
            'templates/GRAPH_BAR_CHART.tpl' => 'graph_bar_chart',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__staff_actions()
    {
        return [
            lorem_globalise(do_lorem_template('STAFF_ACTIONS', [
                '1_TITLE' => lorem_phrase(),
                '1_URL' => placeholder_url(),
                '2_TITLE' => lorem_phrase(),
                '2_URL' => placeholder_url(),
                '3_TITLE' => lorem_phrase(),
                '3_URL' => placeholder_url(),
                '4_TITLE' => lorem_phrase(),
                '4_URL' => placeholder_url(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__button_screen_item()
    {
        return [
            lorem_globalise(do_lorem_template('BUTTON_SCREEN_ITEM', [
                'REL' => lorem_phrase(),
                'IMMEDIATE' => lorem_phrase(),
                'URL' => placeholder_url(),
                'TITLE' => lorem_word(),
                'FULL_TITLE' => lorem_phrase(),
                'IMG' => 'admin/edit',
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__administrative__fractional_edit()
    {
        return [
            lorem_globalise(do_lorem_template('FRACTIONAL_EDIT', [
                'VALUE' => lorem_phrase(),
                'URL' => placeholder_url(),
                'EDIT_TEXT' => lorem_sentence_html(),
                'EDIT_PARAM_NAME' => lorem_word_html(),
                'EXPLICIT_EDITING_LINKS' => true,
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__crop_text_mouse_over_inline()
    {
        return [
            lorem_globalise(do_lorem_template('CROP_TEXT_MOUSE_OVER_INLINE', [
                'TEXT_SMALL' => lorem_sentence_html(),
                'TEXT_LARGE' => lorem_sentence_html(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__img_thumb()
    {
        return [
            lorem_globalise(do_lorem_template('IMG_THUMB', [
                'JS_TOOLTIP' => lorem_phrase(),
                'CAPTION' => lorem_phrase(),
                'URL' => placeholder_image_url(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__crop_text_mouse_over()
    {
        return [
            lorem_globalise(do_lorem_template('CROP_TEXT_MOUSE_OVER', [
                'TEXT_LARGE' => lorem_phrase(),
                'TEXT_SMALL' => lorem_phrase(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__button_screen()
    {
        return [
            lorem_globalise(do_lorem_template('BUTTON_SCREEN', [
                'IMMEDIATE' => true,
                'URL' => placeholder_url(),
                'TITLE' => lorem_word(),
                'IMG' => 'buttons/proceed',
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__standardbox_default()
    {
        return $this->_tpl_preview__standardbox('default');
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__standardbox_accordion()
    {
        return $this->_tpl_preview__standardbox('accordion');
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @param  string $type View type
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function _tpl_preview__standardbox($type)
    {
        $links = [];
        foreach (placeholder_array() as $k => $v) {
            $links[] = placeholder_link();
        }

        $meta = [];
        foreach (placeholder_array() as $k => $v) {
            $meta[] = [
                'KEY' => strval($k),
                'VALUE' => $v,
            ];
        }

        $boxes = new Tempcode();
        $box = do_lorem_template('STANDARDBOX_' . $type, [
            'CONTENT' => lorem_sentence(),
            'LINKS' => $links,
            'META' => $meta,
            'OPTIONS' => placeholder_array(),
            'TITLE' => lorem_phrase(),
            'TOP_LINKS' => placeholder_link(),
            'WIDTH' => '',
        ]);
        $boxes->attach($box);
        $box = do_lorem_template('STANDARDBOX_' . $type, [
            'CONTENT' => lorem_sentence(),
            'LINKS' => $links,
            'META' => $meta,
            'OPTIONS' => placeholder_array(),
            'TITLE' => '',
            'TOP_LINKS' => placeholder_link(),
            'WIDTH' => '',
        ]);
        $boxes->attach($box);

        return [
            lorem_globalise($boxes, null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__administrative__handle_conflict_resolution()
    {
        return [
            lorem_globalise(do_lorem_template('HANDLE_CONFLICT_RESOLUTION', []))
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__graph_scatter_diagram()
    {
        $datapoints = [
            [
                'x' => 1,
                'y' => 1,
                'tooltip' => lorem_phrase(),
            ],
            [
                'x' => 3,
                'y' => 2,
                'tooltip' => lorem_phrase(),
            ],
        ];

        $_datapoints = [];
        foreach ($datapoints as $p) {
            $_datapoints[] = [
                'X' => strval($p['x']),
                'Y' => strval($p['y']),
                'TOOLTIP' => $p['tooltip'],
            ];
        }

        return [
            lorem_globalise(do_lorem_template('GRAPH_SCATTER_DIAGRAM', [
                'ID' => lorem_word(),
                'WIDTH' => '500px',
                'HEIGHT' => '500px',
                'X_AXIS_LABEL' => lorem_phrase(),
                'Y_AXIS_LABEL' => lorem_phrase(),
                'DATAPOINTS' => $_datapoints,
                'COLOR' => '#FF0000',
                'BEGIN_AT_ZERO' => true,
            ]))
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__graph_line_chart()
    {
        $datasets = [
            [
                'datapoints' => [
                    [
                        'value' => 1,
                        'tooltip' => lorem_phrase(),
                    ],
                    [
                        'value' => 3,
                        'tooltip' => lorem_phrase(),
                    ],
                ],
            ],
        ];

        $_datasets = [];
        foreach ($datasets as $i => $dataset) {
            $datapoints = [];
            foreach ($dataset['datapoints'] as $p) {
                $datapoints[] = [
                    'VALUE' => strval($p['value']),
                    'TOOLTIP' => $p['tooltip'],
                ];
            }

            $_datasets[] = [
                'LABEL' => lorem_phrase(),
                'COLOR' => '#FF0000',
                'DATAPOINTS' => $datapoints,
            ];
        }

        return [
            lorem_globalise(do_lorem_template('GRAPH_LINE_CHART', [
                'ID' => lorem_word(),
                'WIDTH' => '500px',
                'HEIGHT' => '500px',
                'X_LABELS' => [lorem_word(), lorem_word()],
                'X_AXIS_LABEL' => lorem_phrase(),
                'Y_AXIS_LABEL' => lorem_phrase(),
                'DATASETS' => $_datasets,
                'BEGIN_AT_ZERO' => true,
                'SHOW_DATA_LABELS' => true,
            ]))
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__graph_pie_chart()
    {
        $datapoints = [
            [
                'label' => lorem_phrase(),
                'value' => 1,
                'tooltip' => lorem_phrase(),
            ],
            [
                'label' => lorem_phrase(),
                'value' => 3,
                'tooltip' => lorem_phrase(),
            ],
        ];

        $_datapoints = [];
        foreach ($datapoints as $x => $p) {
            $_datapoints[] = [
                'LABEL' => $p['label'],
                'VALUE' => strval($p['value']),
                'TOOLTIP' => $p['tooltip'],
                'COLOR' => '#FF0000',
            ];
        }

        return [
            lorem_globalise(do_lorem_template('GRAPH_PIE_CHART', [
                'ID' => lorem_word(),
                'WIDTH' => '500px',
                'HEIGHT' => '500px',
                'DATAPOINTS' => $_datapoints,
                'SHOW_DATA_LABELS' => true,
            ]))
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__graph_bar_chart()
    {
        $datapoints = [
            [
                'label' => lorem_phrase(),
                'value' => 1,
                'tooltip' => lorem_phrase(),
            ],
            [
                'label' => lorem_phrase(),
                'value' => 3,
                'tooltip' => lorem_phrase(),
            ],
        ];

        $_datapoints = [];
        foreach ($datapoints as $x => $p) {
            $_datapoints[] = [
                'LABEL' => $p['label'],
                'VALUE' => strval($p['value']),
                'TOOLTIP' => $p['tooltip'],
                'COLOR' => '#FF0000',
            ];
        }

        return [
            lorem_globalise(do_lorem_template('GRAPH_BAR_CHART', [
                'ID' => lorem_word(),
                'WIDTH' => '500px',
                'HEIGHT' => '500px',
                'X_AXIS_LABEL' => lorem_phrase(),
                'Y_AXIS_LABEL' => lorem_phrase(),
                'DATAPOINTS' => $_datapoints,
                'BEGIN_AT_ZERO' => true,
                'SHOW_DATA_LABELS' => true,
            ]))
        ];
    }
}
