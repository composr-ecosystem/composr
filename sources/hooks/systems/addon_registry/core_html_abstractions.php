<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_html_abstractions
 */

/**
 * Hook class.
 */
class Hook_addon_registry_core_html_abstractions
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for (used in generating the TAR filename).
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }
    
    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }
    
    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return null;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Architecture';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'Core rendering functionality.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_themes',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/admin/component.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'sources/hooks/systems/addon_registry/core_html_abstractions.php',
            'themes/default/templates/JS_REFRESH.tpl',
            'themes/default/templates/META_REFRESH_LINE.tpl',
            'themes/default/templates/ANCHOR.tpl',
            'themes/default/templates/HYPERLINK.tpl',
            'themes/default/templates/HYPERLINK_OVERLAY.tpl',
            'themes/default/templates/HYPERLINK_BUTTON.tpl',
            'themes/default/templates/HYPERLINK_EMAIL.tpl',
            'themes/default/templates/DIV.tpl',
            'themes/default/templates/SPAN.tpl',
            'themes/default/templates/PARAGRAPH.tpl',
            'themes/default/templates/FLOATER.tpl',
            'themes/default/templates/ICON.tpl',
            'themes/default/templates/BASIC_HTML_WRAP.tpl',
            'themes/default/templates/STANDALONE_HTML_WRAP.tpl',
            'themes/default/templates/HTML_HEAD.tpl',
            'themes/default/templates/HTML_HEAD_POLYFILLS.tpl',
            'themes/default/templates/POOR_XHTML_WRAPPER.tpl',
            'themes/default/templates/WITH_WHITESPACE.tpl',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/POOR_XHTML_WRAPPER.tpl' => 'poor_xhtml_wrapper',
            'templates/JS_REFRESH.tpl' => 'js_refresh',
            'templates/ANCHOR.tpl' => 'anchor',
            'templates/STANDALONE_HTML_WRAP.tpl' => 'standalone_html_wrap',
            'templates/META_REFRESH_LINE.tpl' => 'meta_refresh_line',
            'templates/HYPERLINK_OVERLAY.tpl' => 'hyperlink_overlay',
            'templates/BASIC_HTML_WRAP.tpl' => 'basic_html_wrap',
            'templates/HTML_HEAD.tpl' => 'basic_html_wrap',
            'templates/HTML_HEAD_POLYFILLS.tpl' => 'basic_html_wrap',
            'templates/FLOATER.tpl' => 'floater',
            'templates/HYPERLINK.tpl' => 'hyperlink',
            'templates/HYPERLINK_BUTTON.tpl' => 'hyperlink_button',
            'templates/HYPERLINK_EMAIL.tpl' => 'hyperlink_email',
            'templates/DIV.tpl' => 'div',
            'templates/SPAN.tpl' => 'span',
            'templates/PARAGRAPH.tpl' => 'paragraph',
            'templates/WITH_WHITESPACE.tpl' => 'with_whitespace',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__poor_xhtml_wrapper() : object
    {
        return lorem_globalise(do_lorem_template('POOR_XHTML_WRAPPER', [
            'CONTENT' => lorem_phrase_html(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__js_refresh() : object
    {
        return lorem_globalise(do_lorem_template('JS_REFRESH', [
            'FORM_NAME' => lorem_word(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__anchor() : object
    {
        return lorem_globalise(do_lorem_template('ANCHOR', [
            'NAME' => lorem_word(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__standalone_html_wrap() : object
    {
        return do_lorem_template('STANDALONE_HTML_WRAP', [
            'TITLE' => lorem_phrase(),
            'CONTENT' => lorem_chunk_html(),
            'FRAME' => null,
            'NOINDEX' => null,
            'TARGET' => null,
            'POPUP' => null,
            'OPENS_BELOW' => null,
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__meta_refresh_line() : object
    {
        return lorem_globalise(do_lorem_template('META_REFRESH_LINE', [
            'URL' => placeholder_url(),
            'TIME' => placeholder_date_raw(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__hyperlink_overlay() : object
    {
        return lorem_globalise(do_lorem_template('HYPERLINK_OVERLAY', [
            'TITLE' => lorem_phrase(),
            'CAPTION' => lorem_phrase(),
            'URL' => placeholder_url(),
            'WIDTH' => strval(400),
            'HEIGHT' => strval(400),
            'REL' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__basic_html_wrap() : object
    {
        return do_lorem_template('BASIC_HTML_WRAP', [
            'TITLE' => lorem_phrase(),
            'CONTENT' => lorem_chunk_html(),
            'NOINDEX' => null,
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__floater() : object
    {
        return lorem_globalise(do_lorem_template('FLOATER', [
            'FLOAT' => 'left',
            'CONTENT' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__hyperlink_email() : object
    {
        return lorem_globalise(do_lorem_template('HYPERLINK_EMAIL', [
            'TITLE' => lorem_phrase(),
            'ADDRESS' => lorem_phrase(),
            'SUBJECT' => lorem_phrase(),
            'BODY' => lorem_phrase(),
            'CAPTION' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__div() : object
    {
        return lorem_globalise(do_lorem_template('DIV', [
            'TEMPCODE' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__span() : object
    {
        return lorem_globalise(do_lorem_template('SPAN', [
            'TEMPCODE' => lorem_sentence_html(),
            'CLASS' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__paragraph() : object
    {
        return lorem_globalise(do_lorem_template('PARAGRAPH', [
            'TEXT' => lorem_sentence_html(),
            'CLASS' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__with_whitespace() : object
    {
        $out = new Tempcode();

        $out->attach(do_lorem_template('WITH_WHITESPACE', [
            'CONTENT' => lorem_phrase(),
            'USING_TEXTAREA' => false,
            'USING_CODETAG' => false,
        ]));

        $out->attach(do_lorem_template('WITH_WHITESPACE', [
            'CONTENT' => lorem_phrase(),
            'USING_TEXTAREA' => false,
            'USING_CODETAG' => true,
        ]));

        $out->attach(do_lorem_template('WITH_WHITESPACE', [
            'CONTENT' => lorem_phrase(),
            'USING_TEXTAREA' => true,
            'USING_CODETAG' => false,
        ]));

        return lorem_globalise($out, null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__hyperlink() : object
    {
        return lorem_globalise(do_lorem_template('HYPERLINK', [
            'REL' => null,
            'POST_DATA' => null,
            'ACCESSKEY' => null,
            'NEW_WINDOW' => false,
            'TITLE' => lorem_phrase(),
            'URL' => placeholder_url(),
            'CAPTION' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__hyperlink_button() : object
    {
        return lorem_globalise(do_lorem_template('HYPERLINK_BUTTON', [
            'REL' => null,
            'POST_DATA' => '',
            'ACCESSKEY' => null,
            'NEW_WINDOW' => false,
            'TITLE' => lorem_phrase(),
            'URL' => placeholder_url(),
            'CAPTION' => lorem_phrase(),
        ]), null, '', true);
    }
}
