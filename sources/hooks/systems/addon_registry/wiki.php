<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    wiki
 */

/**
 * Hook class.
 */
class Hook_addon_registry_wiki
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for.
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Information Display';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'Collaborative/encyclopaedic database interface. A wiki-like community database with rich media capabilities.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_wiki',
            'tut_information',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/rich_content/wiki.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'sources/hooks/systems/privacy/wiki.php',
            'themes/default/images/icons/menu/rich_content/wiki.svg',
            'themes/default/images/icons/menu/rich_content/wiki/random_page.svg',
            'themes/default/images/icons/admin/wiki_edit_tree.svg',
            'themes/default/images/icons/menu/rich_content/wiki/index.html',
            'themes/default/images/icons_monochrome/menu/rich_content/wiki.svg',
            'themes/default/images/icons_monochrome/menu/rich_content/wiki/random_page.svg',
            'themes/default/images/icons_monochrome/admin/wiki_edit_tree.svg',
            'themes/default/images/icons_monochrome/menu/rich_content/wiki/index.html',
            'sources/hooks/systems/sitemap/wiki_page.php',
            'sources/hooks/systems/content_meta_aware/wiki_page.php',
            'sources/hooks/systems/content_meta_aware/wiki_post.php',
            'sources/hooks/systems/commandr_fs/wiki.php',
            'sources/hooks/systems/config/wiki_show_stats_count_pages.php',
            'sources/hooks/systems/config/wiki_show_stats_count_posts.php',
            'sources/hooks/systems/config/points_wiki.php',
            'sources/hooks/systems/config/wiki_enable_children.php',
            'sources/hooks/systems/config/wiki_enable_content_posts.php',
            'sources/hooks/systems/disposable_values/num_wiki_files.php',
            'sources/hooks/systems/disposable_values/num_wiki_pages.php',
            'sources/hooks/systems/disposable_values/num_wiki_posts.php',
            'sources/hooks/systems/cns_cpf_filter/points_wiki.php',
            'sources/hooks/systems/addon_registry/wiki.php',
            'sources/hooks/modules/admin_themewizard/wiki.php',
            'sources/hooks/modules/admin_import_types/wiki.php',
            'themes/default/templates/WIKI_MANAGE_TREE_SCREEN.tpl',
            'themes/default/templates/WIKI_PAGE_SCREEN.tpl',
            'themes/default/templates/WIKI_POST.tpl',
            'themes/default/templates/WIKI_POSTING_SCREEN.tpl',
            'themes/default/templates/WIKI_RATING.tpl',
            'themes/default/templates/WIKI_RATING_FORM.tpl',
            'themes/default/css/wiki.css',
            'sources/hooks/systems/ajax_tree/choose_wiki_page.php',
            'cms/pages/modules/cms_wiki.php',
            'lang/EN/wiki.ini',
            'site/pages/modules/wiki.php',
            'sources/wiki.php',
            'sources/wiki_stats.php',
            'sources/hooks/blocks/side_stats/wiki.php',
            'sources/hooks/modules/admin_newsletter/wiki.php',
            'sources/hooks/modules/search/wiki_pages.php',
            'sources/hooks/modules/search/wiki_posts.php',
            'sources/hooks/systems/attachments/wiki_page.php',
            'sources/hooks/systems/attachments/wiki_post.php',
            'sources/hooks/systems/page_groupings/wiki.php',
            'sources/hooks/systems/preview/wiki_page.php',
            'sources/hooks/systems/preview/wiki_post.php',
            'sources/hooks/systems/rss/wiki.php',
            'sources/hooks/systems/notifications/wiki.php',
            'sources/hooks/systems/config/search_wiki_pages.php',
            'sources/hooks/systems/config/search_wiki_posts.php',
            'themes/default/javascript/wiki.js',
            'sources/hooks/systems/actionlog/wiki.php',
            'sources/hooks/systems/points/wiki_post__add.php',
            'sources/hooks/systems/points/wiki_page__add.php',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/WIKI_MANAGE_TREE_SCREEN.tpl' => 'administrative__wiki_manage_tree_screen',
            'templates/WIKI_POST.tpl' => 'wiki_page_screen',
            'templates/WIKI_PAGE_SCREEN.tpl' => 'wiki_page_screen',
            'templates/WIKI_RATING.tpl' => 'wiki_page_screen',
            'templates/WIKI_POSTING_SCREEN.tpl' => 'wiki_posting_screen',
            'templates/WIKI_RATING_FORM.tpl' => 'wiki_page_screen',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__wiki_manage_tree_screen() : object
    {
        return lorem_globalise(do_lorem_template('WIKI_MANAGE_TREE_SCREEN', [
            'PAGE_TITLE' => lorem_phrase(),
            'PING_URL' => placeholder_url(),
            'WARNING_DETAILS' => '',
            'TITLE' => lorem_title(),
            'FORM' => placeholder_form(),
            'WIKI_TREE' => placeholder_options(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__wiki_page_screen() : object
    {
        require_lang('cns');

        $extra = new Tempcode();
        $extra = do_lorem_template('BUTTON_SCREEN_ITEM', [
            'REL' => 'edit',
            'IMMEDIATE' => false,
            'URL' => placeholder_url(),
            'TITLE' => do_lang_tempcode('EDIT'),
            'FULL_TITLE' => do_lang_tempcode('EDIT'),
            'IMG' => 'admin/edit',
        ]);
        $extra->attach(do_lorem_template('BUTTON_SCREEN_ITEM', [
            'REL' => 'move',
            'IMMEDIATE' => false,
            'URL' => placeholder_url(),
            'TITLE' => do_lang_tempcode('MOVE'),
            'FULL_TITLE' => do_lang_tempcode('MOVE'),
            'IMG' => 'admin/move',
        ]));

        $all_rating_criteria = [];
        $all_rating_criteria[] = [
            'TITLE' => lorem_phrase(),
            'RATING' => make_string_tempcode('6'),
            'NUM_RATINGS' => placeholder_number(),
            'TYPE' => lorem_word(),
        ];
        $rating_inside = do_lorem_template('WIKI_RATING_FORM', [
            'LIKES' => true,
            'CONTENT_TYPE' => 'wiki',
            'ID' => placeholder_numeric_id(),
            'URL' => placeholder_url(),
            'ALLOW_RATING' => true,
            'ALL_RATING_CRITERIA' => $all_rating_criteria,
            '_OVERALL_NUM_RATINGS' => placeholder_number(),
            'OVERALL_NUM_RATINGS' => placeholder_number(),
            'HAS_RATINGS' => true,
            'SIMPLISTIC' => true,
            'ERROR' => '',
        ]);

        $rating_details = do_lorem_template('WIKI_RATING', [
            '_OVERALL_NUM_RATINGS' => placeholder_number(),
            'OVERALL_NUM_RATINGS' => placeholder_number(),
            'RATING_FORM' => $rating_inside,
            'ALL_RATING_CRITERIA' => $all_rating_criteria,
            'HAS_RATINGS' => true,
        ]);

        $posts = do_lorem_template('WIKI_POST', [
            'INCLUDE_EXPANSION' => lorem_phrase(),
            'UNVALIDATED' => do_lang('UNVALIDATED'),
            'STAFF_ACCESS' => lorem_phrase(),
            'RATE_URL' => placeholder_url(),
            'RATING' => $rating_details,
            'ID' => placeholder_numeric_id(),
            'POSTER_URL' => placeholder_url(),
            'POSTER' => lorem_phrase(),
            'POST_DATE_RAW' => placeholder_date_raw(),
            'POST_DATE' => placeholder_date(),
            'POST' => lorem_phrase(),
            'BUTTONS' => $extra,
        ]);

        $children = [];
        $children[] = [
            'URL' => placeholder_url(),
            'MY_CHILD_POSTS' => placeholder_number(),
            'MY_CHILD_CHILDREN' => placeholder_number(),
            '_MY_CHILD_POSTS' => placeholder_number(),
            '_MY_CHILD_CHILDREN' => placeholder_number(),
            'CHILD' => lorem_phrase(),
            'BODY_CONTENT' => lorem_phrase(),
        ];

        return lorem_globalise(do_lorem_template('WIKI_PAGE_SCREEN', [
            'TAGS' => placeholder_tags(),
            'SHOW_POSTS' => true,
            'ID' => placeholder_codename(),
            'CHAIN' => placeholder_codename(),
            '_VIEWS' => placeholder_number(),
            'VIEWS' => placeholder_number(),
            'STAFF_ACCESS' => '1',
            'DESCRIPTION' => lorem_paragraph_html(),
            'TITLE' => lorem_title(),
            'CHILDREN' => $children,
            'POSTS' => $posts,
            '_NUM_POSTS' => placeholder_number(),
            'NUM_POSTS' => placeholder_number(),
            'BUTTONS' => placeholder_button(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__wiki_posting_screen() : object
    {
        require_javascript('checking');
        require_lang('comcode');

        require_css('forms');

        $posting_form = do_lorem_template('POSTING_FORM', [
            'TABINDEX_PF' => placeholder_number(),
            'PREVIEW' => lorem_phrase(),
            'COMCODE_EDITOR' => lorem_phrase(),
            'COMCODE_EDITOR_SMALL' => lorem_phrase(),
            'CLASS' => lorem_phrase(),
            'COMCODE_URL' => placeholder_url(),
            'EXTRA' => '',
            'POST_COMMENT' => lorem_phrase(),
            'EMOTICON_CHOOSER' => lorem_phrase(),
            'SUBMIT_ICON' => 'admin/add',
            'SUBMIT_NAME' => lorem_word(),
            'HIDDEN_FIELDS' => '',
            'URL' => placeholder_url(),
            'POST' => lorem_phrase(),
            'DEFAULT_PARSED' => lorem_phrase(),
            'ATTACHMENTS' => lorem_phrase(),
            'SPECIALISATION' => placeholder_fields(),
            'SPECIALISATION2' => '',
            'REQUIRED' => true,
            'SUPPORT_AUTOSAVE' => true,
            'JS_FUNCTION_CALLS' => [],
            'SPECIALISATION2_HIDDEN' => null,
            'CANCEL_URL' => null,
            'MODSECURITY_WORKAROUND' => false,
            'COMCODE_PAGE_HINTS' => null,
            'DESCRIPTION' => lorem_paragraph(),
        ]);

        return lorem_globalise(do_lorem_template('WIKI_POSTING_SCREEN', [
            'PING_URL' => '',
            'WARNING_DETAILS' => '',
            'TEXT' => lorem_phrase(),
            'TITLE' => lorem_title(),
            'POSTING_FORM' => $posting_form,
        ]), null, '', true);
    }

    /**
     * Uninstall default content.
     */
    public function uninstall_test_content()
    {
        require_code('wiki');
        require_lang('wiki');

        $to_delete = $GLOBALS['SITE_DB']->query_select('wiki_pages', ['id'], [$GLOBALS['SITE_DB']->translate_field_ref('title') => lorem_phrase() . ' 1']);
        foreach ($to_delete as $record) {
            wiki_delete_page($record['id']);
        }
        $to_delete = $GLOBALS['SITE_DB']->query_select('wiki_pages', ['id'], [$GLOBALS['SITE_DB']->translate_field_ref('title') => lorem_phrase() . ' 2']);
        foreach ($to_delete as $record) {
            wiki_delete_page($record['id']);
        }

        $to_delete = $GLOBALS['SITE_DB']->query_select('wiki_posts', ['id'], [$GLOBALS['SITE_DB']->translate_field_ref('the_message') => lorem_paragraph()]);
        foreach ($to_delete as $record) {
            wiki_delete_post($record['id']);
        }
    }

    /**
     * Install default content.
     */
    public function install_test_content()
    {
        require_code('wiki');
        require_lang('wiki');

        $page_a = wiki_add_page(lorem_phrase() . ' 1', lorem_chunk(), '', 1);
        $page_b = wiki_add_page(lorem_phrase() . ' 2', lorem_chunk(), '', 0);
        require_code('permissions2');
        set_global_category_access('wiki_page', $page_a);
        set_global_category_access('wiki_page', $page_b);
        $GLOBALS['SITE_DB']->query_insert('wiki_children', ['child_id' => $page_a, 'parent_id' => db_get_first_id(), 'the_order' => 1, 'title' => lorem_phrase() . ' 1']);
        $GLOBALS['SITE_DB']->query_insert('wiki_children', ['child_id' => $page_b, 'parent_id' => db_get_first_id(), 'the_order' => 2, 'title' => lorem_phrase() . ' 2']);

        wiki_add_post($page_a, lorem_paragraph());
        wiki_add_post($page_b, lorem_paragraph());
    }
}
