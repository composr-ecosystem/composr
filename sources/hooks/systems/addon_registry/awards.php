<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    awards
 */

/**
 * Hook class.
 */
class Hook_addon_registry_awards
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for (used in generating the TAR filename).
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }

    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return null;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Information Display';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'Pick out content for featuring.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_featured',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/adminzone/setup/awards.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'sources/hooks/systems/privacy/awards.php',
            'themes/default/images/icons/menu/adminzone/setup/awards.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/setup/awards.svg',
            'sources/hooks/systems/addon_registry/awards.php',
            'sources/hooks/systems/resource_meta_aware/award_type.php',
            'themes/default/templates/AWARDED_CONTENT.tpl',
            'themes/default/templates/BLOCK_MAIN_AWARDS.tpl',
            'adminzone/pages/modules/admin_awards.php',
            'sources/blocks/main_awards.php',
            'sources/awards.php',
            'sources/awards2.php',
            'site/pages/modules/awards.php',
            'lang/EN/awards.ini',
            'sources/hooks/blocks/main_staff_checklist/awards.php',
            'themes/default/css/awards.css',
            'themes/default/images/awarded.svg',
            'sources/hooks/modules/admin_import_types/awards.php',
            'sources/hooks/systems/block_ui_renderers/awards.php',
            'sources/hooks/systems/commandr_fs/award_types.php',
            'sources/hooks/systems/config/awarded_items_per_page.php',
            'sources/hooks/systems/actionlog/awards.php',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/BLOCK_MAIN_AWARDS.tpl' => 'block_main_awards',
            'templates/AWARDED_CONTENT.tpl' => 'awarded_content',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__block_main_awards() : object
    {
        return lorem_globalise(do_lorem_template('BLOCK_MAIN_AWARDS', [
            'BLOCK_ID' => lorem_word(),
            'TITLE' => lorem_phrase(),
            'TYPE' => lorem_word(),
            'DESCRIPTION' => lorem_paragraph_html(),
            'AWARDEE_PROFILE_URL' => placeholder_url(),
            'AWARDEE' => lorem_phrase(),
            'AWARDEE_USERNAME' => lorem_word(),
            'RAW_AWARD_DATE' => placeholder_date_raw(),
            'AWARD_DATE' => placeholder_date(),
            'CONTENT' => lorem_phrase_html(),
            'ADD_NAME' => lorem_phrase(),
            'SUBMIT_URL' => placeholder_url(),
            'ARCHIVE_URL' => placeholder_url(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__awarded_content() : object
    {
        return lorem_globalise(do_lorem_template('AWARDED_CONTENT', [
            'AWARDEE_PROFILE_URL' => placeholder_url(),
            'AWARDEE' => lorem_phrase(),
            'AWARDEE_USERNAME' => lorem_word(),
            'RAW_AWARD_DATE' => placeholder_date_raw(),
            'AWARD_DATE' => placeholder_date(),
            'CONTENT' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Find available predefined content, and what is installed.
     *
     * @return array A map of available predefined content codenames, and details (if installed, and title)
     */
    public function enumerate_predefined_content() : array
    {
        require_lang('awards');

        $map = [
            'a_points' => 0,
            'a_content_type' => 'download',
            'a_show_awardee' => 0,
            'a_update_time_hours' => 168,
        ];
        $installed = ($GLOBALS['SITE_DB']->query_select_value_if_there('award_types', 'id', $map) !== null);

        return [
            'keep_dotw' => [
                'title' => do_lang_tempcode('DOTW'),
                'description' => do_lang_tempcode('DESCRIPTION_DOTW'),
                'installed' => $installed,
            ],
        ];
    }

    /**
     * Install predefined content.
     *
     * @param  ?array $content A list of predefined content labels to install (null: all)
     */
    public function install_predefined_content(?array $content = null)
    {
        if ((($content === null) || (in_array('keep_dotw', $content))) && (!has_predefined_content('awards', 'keep_dotw'))) {
            require_lang('awards');
            require_code('lang3');
            $map = [
                'a_points' => 0,
                'a_content_type' => 'download',
                'a_show_awardee' => 0,
                'a_update_time_hours' => 168,
            ];
            $map += lang_code_to_default_content('a_title', 'DOTW');
            $map += lang_code_to_default_content('a_description', 'DESCRIPTION_DOTW', true);
            $GLOBALS['SITE_DB']->query_insert('award_types', $map);
        }
    }

    /**
     * Uninstall predefined content.
     *
     * @param  ?array $content A list of predefined content labels to uninstall (null: all)
     */
    public function uninstall_predefined_content(?array $content = null)
    {
        if ((($content === null) || (in_array('keep_dotw', $content))) && (has_predefined_content('awards', 'keep_dotw'))) {
            $map = [
                'a_points' => 0,
                'a_content_type' => 'download',
                'a_show_awardee' => 0,
                'a_update_time_hours' => 168,
            ];
            require_lang('awards');
            require_code('awards2');
            $id = $GLOBALS['SITE_DB']->query_select_value('award_types', 'id', $map);
            delete_award_type($id);
        }
    }
}
