<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    polls
 */

/**
 * Hook class.
 */
class Hook_addon_registry_polls
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for (used in generating the TAR filename).
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }

    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return null;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Information Display';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'A poll (voting) system.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_feedback',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/social/polls.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'sources/hooks/systems/privacy/polls.php',
            'themes/default/images/icons/menu/social/polls.svg',
            'themes/default/images/icons_monochrome/menu/social/polls.svg',
            'sources/polls2.php',
            'sources/hooks/systems/block_ui_renderers/polls.php',
            'sources/hooks/systems/notifications/poll_chosen.php',
            'sources/hooks/systems/config/points_ADD_POLL.php',
            'sources/hooks/systems/config/points_CHOOSE_POLL.php',
            'sources/hooks/systems/config/poll_update_time.php',
            'sources/hooks/systems/realtime_rain/polls.php',
            'themes/default/templates/BLOCK_MAIN_POLL.tpl',
            'sources/hooks/systems/content_meta_aware/poll.php',
            'sources/hooks/systems/commandr_fs/polls.php',
            'sources/hooks/systems/addon_registry/polls.php',
            'sources/hooks/systems/preview/poll.php',
            'sources/hooks/modules/admin_setupwizard/polls.php',
            'sources/hooks/modules/admin_import_types/polls.php',
            'sources/hooks/systems/sitemap/poll.php',
            'themes/default/templates/POLL_BOX.tpl',
            'themes/default/templates/POLL_ANSWER.tpl',
            'themes/default/templates/POLL_ANSWER_RESULT.tpl',
            'themes/default/templates/POLL_SCREEN.tpl',
            'themes/default/templates/POLL_LIST_LINE.tpl',
            'themes/default/templates/POLL_RSS_SUMMARY.tpl',
            'themes/default/css/polls.css',
            'cms/pages/modules/cms_polls.php',
            'lang/EN/polls.ini',
            'site/pages/modules/polls.php',
            'sources/hooks/blocks/main_staff_checklist/polls.php',
            'sources/hooks/modules/search/polls.php',
            'sources/hooks/systems/page_groupings/polls.php',
            'sources/hooks/systems/rss/polls.php',
            'sources/hooks/systems/trackback/polls.php',
            'sources/polls.php',
            'sources/blocks/main_poll.php',
            'sources/hooks/systems/config/search_polls.php',
            'themes/default/javascript/polls.js',
            'sources/hooks/systems/actionlog/polls.php',
            'sources/hooks/modules/admin_stats/polls.php',
            'themes/default/templates/POLL_ARCHIVE_SCREEN.tpl',
            'sources/hooks/systems/points/poll__add.php',
            'sources/hooks/systems/points/poll__vote.php',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/BLOCK_MAIN_POLL.tpl' => 'block_main_poll',
            'templates/POLL_RSS_SUMMARY.tpl' => 'poll_rss_summary',
            'templates/POLL_ANSWER.tpl' => 'poll_answer',
            'templates/POLL_ANSWER_RESULT.tpl' => 'poll_answer_result',
            'templates/POLL_BOX.tpl' => 'poll_answer',
            'templates/POLL_LIST_LINE.tpl' => 'poll_list_line',
            'templates/POLL_SCREEN.tpl' => 'poll_screen',
            'templates/POLL_ARCHIVE_SCREEN.tpl' => 'poll_archive_screen',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__block_main_poll() : object
    {
        return lorem_globalise(do_lorem_template('BLOCK_MAIN_POLL', [
            'BLOCK_ID' => lorem_word(),
            'CONTENT' => $this->_tpl_preview_poll('poll'),
            'BLOCK_PARAMS' => '',
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__poll_rss_summary() : object
    {
        require_code('xml');

        $_summary = do_lorem_template('POLL_RSS_SUMMARY', [
            'VOTE_METADATA' => placeholder_array(),
        ]);
        $summary = xmlentities($_summary->evaluate());

        $if_comments = do_lorem_template('RSS_ENTRY_COMMENTS', [
            'COMMENT_URL' => placeholder_url(),
            'ID' => placeholder_codename(),
        ], null, false, null, '.xml', 'xml');

        return lorem_globalise(do_lorem_template('RSS_ENTRY', [
            'VIEW_URL' => placeholder_url(),
            'SUMMARY' => $summary,
            'EDIT_DATE' => placeholder_date(),
            'IF_COMMENTS' => $if_comments,
            'TITLE' => lorem_phrase(),
            'CATEGORY_RAW' => null,
            'CATEGORY' => '',
            'AUTHOR' => lorem_word(),
            'ID' => placeholder_codename(),
            'DATE' => placeholder_date(),
        ], null, false, null, '.xml', 'xml'), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__poll_answer() : object
    {
        return lorem_globalise($this->_tpl_preview_poll('poll'), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__poll_answer_result() : object
    {
        return lorem_globalise($this->_tpl_preview_poll('result'), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @param  string $section View type
     * @return Tempcode Preview
     */
    protected function _tpl_preview_poll(string $section = '') : object
    {
        $tpl = new Tempcode();
        switch ($section) {
            case 'poll':
                foreach (placeholder_array() as $k => $v) {
                    $tpl->attach(do_lorem_template('POLL_ANSWER', [
                        'PID' => placeholder_numeric_id(),
                        'I' => strval($k),
                        'CAST' => strval($k),
                        'VOTE_URL' => placeholder_url(),
                        'ANSWER' => lorem_phrase(),
                        'ANSWER_PLAIN' => lorem_phrase(),
                    ]));
                }
                break;

            case 'result':
                foreach (placeholder_array() as $k => $v) {
                    $tpl->attach(do_lorem_template('POLL_ANSWER_RESULT', [
                        'PID' => placeholder_numeric_id(),
                        'I' => strval($k),
                        'VOTE_URL' => placeholder_url(),
                        'ANSWER' => lorem_phrase(),
                        'ANSWER_PLAIN' => lorem_phrase(),
                        'WIDTH' => strval($k),
                        '_VOTES' => placeholder_number(),
                        'VOTES' => placeholder_number(),
                        '_TOTAL_VOTES' => placeholder_number(),
                        'TOTAL_VOTES' => placeholder_number(),
                    ]));
                }
                break;

            default:
                foreach (placeholder_array() as $k => $v) {
                    $tpl->attach(do_lorem_template('POLL_ANSWER', [
                        'PID' => placeholder_numeric_id(),
                        'I' => strval($k),
                        'CAST' => strval($k),
                        'VOTE_URL' => placeholder_url(),
                        'ANSWER' => lorem_phrase(),
                        'ANSWER_PLAIN' => lorem_phrase(),
                    ]));
                }
                foreach (placeholder_array() as $k => $v) {
                    $tpl->attach(do_lorem_template('POLL_ANSWER_RESULT', [
                        'PID' => placeholder_numeric_id(),
                        'I' => strval($k),
                        'VOTE_URL' => placeholder_url(),
                        'ANSWER' => lorem_phrase(),
                        'ANSWER_PLAIN' => lorem_phrase(),
                        'WIDTH' => strval($k),
                        '_VOTES' => placeholder_number(),
                        'VOTES' => placeholder_number(),
                        '_TOTAL_VOTES' => placeholder_number(),
                        'TOTAL_VOTES' => placeholder_number(),
                    ]));
                }
        }

        return do_lorem_template('POLL_BOX', [
            '_GUID' => '4c6b026f7ed96f0b5b8408eb5e5affb5',
            'VOTE_URL' => placeholder_url(),
            'GIVE_CONTEXT' => true,
            'SUBMITTER' => placeholder_numeric_id(),
            'RESULT_URL' => placeholder_url(),
            'SUBMIT_URL' => placeholder_url(),
            'ARCHIVE_URL' => placeholder_url(),
            'PID' => placeholder_numeric_id(),
            'COMMENT_COUNT' => placeholder_number(),
            'QUESTION_PLAIN' => lorem_phrase(),
            'QUESTION' => lorem_phrase(),
            'CONTENT' => $tpl,
            'FULL_URL' => placeholder_url(),
            'TOTAL_VOTES' => placeholder_number(),
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__poll_list_line() : object
    {
        return lorem_globalise(do_lorem_template('POLL_LIST_LINE', [
            'QUESTION' => lorem_phrase(),
            'STATUS' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__poll_screen() : object
    {
        $poll_details = $this->_tpl_preview_poll('poll');

        return lorem_globalise(do_lorem_template('POLL_SCREEN', [
            'TITLE' => lorem_screen_title(),
            'DATE_RAW' => placeholder_date_raw(),
            'ADD_DATE_RAW' => placeholder_date_raw(),
            'EDIT_DATE_RAW' => placeholder_date_raw(),
            'DATE' => placeholder_date(),
            'ADD_DATE' => placeholder_date(),
            'EDIT_DATE' => placeholder_date(),
            '_VIEWS' => placeholder_number(),
            'VIEWS' => placeholder_number(),
            'TRACKBACK_DETAILS' => placeholder_trackbacks_wrapper(),
            'RATING_DETAILS' => placeholder_rating('polls'),
            'COMMENT_DETAILS' => placeholder_comments(placeholder_comments_form(false)),
            'EDIT_URL' => placeholder_url(),
            'POLL_DETAILS' => $poll_details,
            'SUBMITTER' => placeholder_numeric_id(),
            'ID' => placeholder_numeric_id(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__poll_archive_screen() : object
    {
        return lorem_globalise(do_lorem_template('POLL_ARCHIVE_SCREEN', [
            'TITLE' => lorem_screen_title(),
        ]), null, '', true);
    }

    /**
     * Uninstall default content.
     */
    public function uninstall_test_content()
    {
        require_code('polls2');

        $to_delete = $GLOBALS['SITE_DB']->query_select('poll', ['id'], [$GLOBALS['SITE_DB']->translate_field_ref('question') => lorem_phrase()]);
        foreach ($to_delete as $record) {
            delete_poll($record['id']);
        }
    }

    /**
     * Install default content.
     */
    public function install_test_content()
    {
        require_code('polls2');

        add_poll(lorem_phrase(), lorem_phrase() . ' 1', lorem_phrase() . ' 2');
    }
}
