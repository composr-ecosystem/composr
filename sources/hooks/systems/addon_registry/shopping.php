<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    shopping
 */

/**
 * Hook class.
 */
class Hook_addon_registry_shopping
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for.
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'eCommerce';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'Shopping catalogue functionality.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_ecommerce',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [
                'ecommerce',
                'catalogues',
            ],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/rich_content/ecommerce/shopping_cart.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'sources/hooks/systems/privacy/shopping.php',
            'themes/default/images/icons/menu/rich_content/ecommerce/orders.svg',
            'themes/default/images/icons/menu/adminzone/audit/ecommerce/undispatched_orders.svg',
            'themes/default/images/icons/menu/rich_content/ecommerce/shopping_cart.svg',
            'themes/default/images/icons/buttons/cart_add.svg',
            'themes/default/images/icons/buttons/cart_checkout.svg',
            'themes/default/images/icons/buttons/cart_empty.svg',
            'themes/default/images/icons/buttons/cart_update.svg',
            'themes/default/images/icons_monochrome/menu/rich_content/ecommerce/orders.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/audit/ecommerce/undispatched_orders.svg',
            'themes/default/images/icons_monochrome/menu/rich_content/ecommerce/shopping_cart.svg',
            'themes/default/images/icons_monochrome/buttons/cart_add.svg',
            'themes/default/images/icons_monochrome/buttons/cart_checkout.svg',
            'themes/default/images/icons_monochrome/buttons/cart_empty.svg',
            'themes/default/images/icons_monochrome/buttons/cart_update.svg',
            'sources/hooks/systems/notifications/order_dispatched.php',
            'sources/hooks/systems/notifications/shopping.php',
            'sources/hooks/modules/admin_setupwizard_installprofiles/shopping.php',
            'sources/hooks/systems/config/cart_hold_hours.php',
            'sources/hooks/systems/ecommerce/catalogue_items.php',
            'sources/hooks/systems/ecommerce/cart_orders.php',
            'sources/hooks/modules/members/shopping.php',
            'sources/hooks/blocks/main_staff_checklist/shopping_orders.php',
            'sources/hooks/systems/tasks/export_shopping_orders.php',
            'sources/shopping.php',
            'site/pages/modules/shopping.php',
            'themes/default/templates/CATALOGUE_products_CATEGORY_SCREEN.tpl',
            'themes/default/templates/CATALOGUE_products_CATEGORY_EMBED.tpl',
            'themes/default/templates/CATALOGUE_products_ENTRY_SCREEN.tpl',
            'themes/default/templates/CATALOGUE_products_GRID_ENTRY_FIELD.tpl',
            'themes/default/templates/CATALOGUE_products_FIELDMAP_ENTRY_FIELD.tpl',
            'themes/default/templates/CATALOGUE_products_GRID_ENTRY_WRAP.tpl',
            'themes/default/templates/RESULTS_products_TABLE.tpl',
            'themes/default/javascript/shopping.js',
            'themes/default/templates/ECOM_SHOPPING_CART_BUTTONS.tpl',
            'adminzone/pages/modules/admin_shopping.php',
            'lang/EN/shopping.ini',
            'sources/hooks/systems/addon_registry/shopping.php',
            'sources/hooks/systems/cns_cpf_filter/shopping_cart.php',
            'themes/default/css/shopping.css',
            'themes/default/templates/ECOM_ADMIN_ORDER_ACTIONS.tpl',
            'themes/default/templates/ECOM_CART_LINK.tpl',
            'themes/default/templates/ECOM_ORDER_DETAILS_SCREEN.tpl',
            'themes/default/templates/ECOM_ORDERS_SCREEN.tpl',
            'themes/default/templates/ECOM_SHIPPING_ADDRESS.tpl',
            'themes/default/templates/ECOM_CART_BUTTON_VIA_PAYPAL.tpl',
            'themes/default/templates/ECOM_SHOPPING_CART_SCREEN.tpl',
            'themes/default/templates/ECOM_SHOPPING_ITEM_QUANTITY_FIELD.tpl',
            'themes/default/templates/ECOM_SHOPPING_ITEM_REMOVE_FIELD.tpl',
            'themes/default/templates/RESULTS_cart_TABLE.tpl',
            'themes/default/templates/RESULTS_TABLE_cart_FIELD.tpl',
            'sources/hooks/systems/symbols/STOCK_CHECK.php',
            'sources/hooks/systems/symbols/CART_LINK.php',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/ECOM_ORDERS_SCREEN.tpl' => 'ecom_orders_screen',
            'templates/ECOM_ORDER_DETAILS_SCREEN.tpl' => 'ecom_order_details_screen',
            'templates/ECOM_ADMIN_ORDER_ACTIONS.tpl' => 'ecom_order_details_screen',
            'templates/ECOM_SHIPPING_ADDRESS.tpl' => 'ecom_order_details_screen',
            'templates/ECOM_SHOPPING_ITEM_QUANTITY_FIELD.tpl' => 'shopping_cart_screen',
            'templates/ECOM_SHOPPING_ITEM_REMOVE_FIELD.tpl' => 'shopping_cart_screen',
            'templates/ECOM_CART_BUTTON_VIA_PAYPAL.tpl' => 'ecom_cart_button_via_paypal',
            'templates/ECOM_SHOPPING_CART_SCREEN.tpl' => 'shopping_cart_screen',
            'templates/RESULTS_cart_TABLE.tpl' => 'shopping_cart_screen',
            'templates/RESULTS_TABLE_cart_FIELD.tpl' => 'shopping_cart_screen',
            'templates/ECOM_CART_LINK.tpl' => 'ecom_cart_link_screen',
            'templates/CATALOGUE_products_CATEGORY_EMBED.tpl' => 'grid_category_screen__products',
            'templates/CATALOGUE_products_ENTRY_SCREEN.tpl' => 'products_entry_screen',
            'templates/CATALOGUE_products_FIELDMAP_ENTRY_FIELD.tpl' => 'products_entry_screen',
            'templates/ECOM_SHOPPING_CART_BUTTONS.tpl' => 'products_entry_screen',
            'templates/CATALOGUE_products_CATEGORY_SCREEN.tpl' => 'grid_category_screen__products',
            'templates/CATALOGUE_products_GRID_ENTRY_FIELD.tpl' => 'grid_category_screen__products',
            'templates/CATALOGUE_products_GRID_ENTRY_WRAP.tpl' => 'grid_category_screen__products',
            'templates/RESULTS_products_TABLE.tpl' => 'results_products_table',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__products_entry_screen() : object
    {
        require_lang('catalogues');
        require_lang('ecommerce');
        require_css('catalogues');

        $fields = new Tempcode();
        $fields_table = new Tempcode();

        foreach (placeholder_array() as $v) {
            $name = placeholder_random_id();
            $fields->attach(do_lorem_template('CATALOGUE_products_FIELDMAP_ENTRY_FIELD', [
                'ENTRYID' => placeholder_numeric_id(),
                'CATALOGUE' => lorem_phrase(),
                'TYPE' => lorem_word(),
                'FIELD' => lorem_word(),
                'FIELDID' => $name,
                '_FIELDID' => $name,
                'FIELDTYPE' => lorem_word(),
                'VALUE_PLAIN' => lorem_phrase(),
                'VALUE' => lorem_phrase(),
            ]));
        }

        $cart_buttons = do_lorem_template('ECOM_SHOPPING_CART_BUTTONS', [
            'OUT_OF_STOCK' => lorem_phrase(),
            'ACTION_URL' => placeholder_url(),
            'TYPE_CODE' => placeholder_codename(),
            'PURCHASE_ACTION_URL' => placeholder_url(),
            'CART_URL' => placeholder_url(),
        ]);

        $rating_inside = new Tempcode();

        $map = [
            'ID' => placeholder_numeric_id(),
            'FIELD_0' => lorem_phrase(),
            'FIELD_0_PLAIN' => lorem_phrase(),
            'FIELD_1' => lorem_phrase(),
            'FIELD_1_PLAIN' => lorem_phrase(),
            'FIELD_2' => placeholder_number(),
            'FIELD_3_PLAIN' => placeholder_number(),
            'FIELD_3' => placeholder_number(),
            'FIELD_2_PLAIN' => placeholder_number(),
            'FIELD_7' => placeholder_image(),
            'FIELD_7_PLAIN' => placeholder_url(),
            'FIELD_9' => lorem_phrase(),
            'PRODUCT_CODE' => placeholder_codename(),
            'PRICE' => placeholder_number(),
            'RATING' => $rating_inside,
            'ALLOW_RATING' => false,
            'MAP_TABLE' => placeholder_table(),
            'ADD_TO_CART' => placeholder_url(),
            'FIELDS' => $fields,
            'ENTRY_SCREEN' => true,
            'GIVE_CONTEXT' => false,
            'VIEW_URL' => placeholder_url(),
            'EDIT_URL' => placeholder_url(),
            'CATALOGUE' => lorem_word(),
            'SUBMITTER' => placeholder_numeric_id(),
        ];
        $entry = do_lorem_template('CATALOGUE_DEFAULT_FIELDMAP_ENTRY_WRAP', $map);

        return lorem_globalise(do_lorem_template('CATALOGUE_products_ENTRY_SCREEN', $map + [
            'TITLE' => lorem_screen_title(),
            'WARNINGS' => '',
            'ENTRY' => $entry,
            'ID' => placeholder_numeric_id(),
            'VIEW_URL' => placeholder_url(),
            'EDIT_URL' => placeholder_url(),
            'TRACKBACK_DETAILS' => placeholder_trackbacks_wrapper(),
            'RATING_DETAILS' => placeholder_rating('catalogue_entry'),
            'COMMENT_DETAILS' => placeholder_comments(placeholder_comments_form()),
            'RATING' => new Tempcode(),
            'ALLOW_RATING' => false,
            'ADD_DATE' => placeholder_date(),
            'ADD_DATE_RAW' => placeholder_date_raw(),
            'EDIT_DATE_RAW' => placeholder_date_raw(),
            'VIEWS' => placeholder_number(),
            'TAGS' => placeholder_tags(),
            'CART_BUTTONS' => $cart_buttons,
            'CATALOGUE' => 'products',
            'SUBMITTER' => placeholder_numeric_id(),
            'FIELD_0' => lorem_phrase(),
            'FIELD_0_PLAIN' => lorem_phrase(),
            'FIELD_1' => lorem_phrase(),
            'FIELD_1_PLAIN' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__grid_category_screen__products() : object
    {
        require_lang('catalogues');
        require_lang('ecommerce');
        require_css('catalogues');

        $fields = new Tempcode();
        $fields_table = new Tempcode();

        foreach (placeholder_array() as $v) {
            $name = placeholder_random_id();
            $fields->attach(do_lorem_template('CATALOGUE_products_GRID_ENTRY_FIELD', [
                'ENTRYID' => placeholder_numeric_id(),
                'CATALOGUE' => lorem_phrase(),
                'TYPE' => lorem_word(),
                'FIELD' => lorem_word(),
                'FIELDID' => $name,
                '_FIELDID' => $name,
                'FIELDTYPE' => lorem_word(),
                'VALUE_PLAIN' => lorem_phrase(),
                'VALUE' => lorem_phrase(),
            ]));
        }

        $rating_inside = new Tempcode();

        $map = [
            'FIELD_0' => lorem_phrase(),
            'FIELD_0_PLAIN' => lorem_phrase(),
            'FIELD_1' => lorem_phrase(),
            'FIELD_1_PLAIN' => lorem_phrase(),
            'FIELD_2' => placeholder_number(),
            'FIELD_2_PLAIN' => placeholder_number(),
            'FIELD_7' => placeholder_image(),
            'FIELD_7_PLAIN' => placeholder_url(),
            'FIELD_9' => lorem_phrase(),
            'PRODUCT_CODE' => placeholder_codename(),
            'PRICE' => placeholder_number(),
            'RATING' => $rating_inside,
            'MAP_TABLE' => placeholder_table(),
            'ADD_TO_CART' => placeholder_url(),
            'FIELDS' => $fields,
            'URL' => placeholder_url(),
            'VIEW_URL' => placeholder_url(),
            'EDIT_URL' => placeholder_url(),
            'ALLOW_RATING' => false,
            'CATALOGUE' => lorem_word(),
            'SUBMITTER' => placeholder_numeric_id(),
        ];
        $entry = do_lorem_template('CATALOGUE_products_GRID_ENTRY_WRAP', $map);

        $entries = do_lorem_template('CATALOGUE_products_CATEGORY_EMBED', [
            'DISPLAY_TYPE' => 'FIELDMAPS',
            'ENTRIES' => $entry,
            'ROOT' => placeholder_numeric_id(),
            'BLOCK_PARAMS' => '',
            'SORTING' => '',
            'PAGINATION' => '',

            'START' => '0',
            'MAX' => '10',
            'START_PARAM' => 'x_start',
            'MAX_PARAM' => 'x_max',
        ]);

        return lorem_globalise(do_lorem_template('CATALOGUE_products_CATEGORY_SCREEN', $map + [
            'ID' => placeholder_numeric_id(),
            'ADD_DATE_RAW' => placeholder_date_raw(),
            'TITLE' => lorem_screen_title(),
            '_TITLE' => lorem_phrase(),
            'CATALOGUE_TITLE' => lorem_phrase(),
            'TAGS' => placeholder_tags(),
            'ENTRIES' => $entries,
            'CATALOGUE' => lorem_word_2(),
            'ADD_ENTRY_URL' => placeholder_url(),
            'ADD_CAT_URL' => placeholder_url(),
            'ADD_CAT_TITLE' => do_lang_tempcode('ADD_CATALOGUE_CATEGORY'),
            'EDIT_CAT_URL' => placeholder_url(),
            'EDIT_CATALOGUE_URL' => placeholder_url(),
            'DESCRIPTION' => lorem_sentence(),
            'DISPLAY_TYPE' => 'GRID',
            'CC_SORT' => 'title',
            'CAT_SELECT' => '*',
            'FILTER' => '',
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__ecom_cart_link_screen() : object
    {
        require_lang('ecommerce');

        return lorem_globalise(do_lorem_template('ECOM_CART_LINK', [
            'URL' => placeholder_url(),
            'TITLE' => lorem_phrase(),
            'ITEMS' => placeholder_number(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__results_products_table() : object
    {
        require_css('catalogues');
        require_lang('ecommerce');

        $array = placeholder_array();
        $cells = new Tempcode();
        foreach ($array as $k => $v) {
            if ($k == 1) {
                $cells->attach(do_lorem_template('RESULTS_TABLE_FIELD_TITLE', [
                    'VALUE' => $v,
                ]));
            } else {
                $cells->attach(do_lorem_template('RESULTS_TABLE_FIELD_TITLE_SORTABLE', [
                    'VALUE' => $v,
                    'SORT_URL_DESC' => placeholder_url(),
                    'SORT_DESC_SELECTED' => true,
                    'SORT_URL_ASC' => placeholder_url(),
                    'SORT_ASC_SELECTED' => false,
                    'HASH' => null,
                ]));
            }
        }
        $header_row = $cells;

        $order_entries = new Tempcode();
        foreach ($array as $k1 => $_v) {
            $cells = new Tempcode();
            foreach ($array as $k2 => $v) {
                $tick = do_lorem_template('RESULTS_TABLE_TICK', [
                    'ID' => placeholder_numeric_id() . '_' . strval($k1) . '_' . strval($k2),
                ]);
                $cells->attach(do_lorem_template('RESULTS_TABLE_FIELD', [
                    'VALUE' => $tick,
                ]));
            }
            $order_entries->attach(do_lorem_template('RESULTS_TABLE_ENTRY', [
                'VALUES' => $cells,
            ]));
        }

        $selectors = new Tempcode();
        $sortable = null;
        foreach ($array as $k => $v) {
            $selectors->attach(do_lorem_template('PAGINATION_SORTER', [
                'SELECTED' => '',
                'NAME' => $v,
                'VALUE' => $v,
            ]));
        }
        $sort = do_lorem_template('PAGINATION_SORT', [
            'HIDDEN' => '',
            'SORT' => lorem_word(),
            'URL' => placeholder_url(),
            'SELECTORS' => $selectors,
        ]);

        return lorem_globalise(do_lorem_template('RESULTS_products_TABLE', [
            'TEXT_ID' => placeholder_codename(),
            'HEADER_ROW' => $header_row,
            'RESULT_ENTRIES' => $order_entries,
            'SORT' => $sort,
            'PAGINATION' => placeholder_pagination(),
            'MESSAGE' => lorem_phrase(),
            'WIDTHS' => [
                placeholder_number(),
            ],
            'NONRESPONSIVE' => false,
        ]), null, '', true);
    }

    /**
     * Function to display custom result tables.
     *
     * @param  ID_TEXT $tpl_set Tpl set name
     * @return Tempcode Tempcode
     */
    public function show_custom_tables(string $tpl_set) : object
    {
        $header_row = new Tempcode();
        foreach ([lorem_word(), lorem_word_2(), lorem_word(), lorem_word_2()] as $k => $v) {
            $header_row->attach(do_lorem_template('RESULTS_TABLE_FIELD_TITLE', [
                'VALUE' => $v,
            ]));
        }
        $entries = new Tempcode();
        foreach (placeholder_array() as $k => $v) {
            $cells = new Tempcode();

            $entry_data = [
                lorem_word(),
                placeholder_date(),
                lorem_word(),
                lorem_word()
            ];

            foreach ($entry_data as $_k => $_v) {
                $cells->attach(do_lorem_template('RESULTS_TABLE_' . $tpl_set . 'FIELD', [
                    'VALUE' => $_v,
                ]));
            }
            $entries->attach(do_lorem_template('RESULTS_TABLE_' . $tpl_set . 'ENTRY', [
                'VALUES' => $cells,
            ]));
        }

        $selectors = new Tempcode();
        foreach (placeholder_array(11) as $k => $v) {
            $selectors->attach(do_lorem_template('PAGINATION_SORTER', [
                'SELECTED' => '',
                'NAME' => $v,
                'VALUE' => $v,
            ]));
        }

        $sort = do_lorem_template('PAGINATION_SORT', [
            'HIDDEN' => '',
            'SORT' => lorem_word(),
            'URL' => placeholder_url(),
            'SELECTORS' => $selectors,
        ]);

        return do_lorem_template('RESULTS_' . $tpl_set . 'TABLE', [
            'HEADER_ROW' => $header_row,
            'RESULT_ENTRIES' => $entries,
            'MESSAGE' => new Tempcode(),
            'SORT' => $sort,
            'PAGINATION' => placeholder_pagination(),
            'WIDTHS' => [
                placeholder_number(),
            ],
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__ecom_cart_button_via_paypal() : object
    {
        require_lang('ecommerce');

        $items = [];
        foreach (placeholder_array() as $k => $v) {
            $items[] = [
                'PRODUCT_NAME' => lorem_word(),
                'TYPE_CODE' => lorem_word(),
                'PRICE' => placeholder_number(),
                'TAX' => placeholder_number(),
                'AMOUNT' => placeholder_number(),
                'QUANTITY' => placeholder_number(),
            ];
        }
        return lorem_globalise(do_lorem_template('ECOM_CART_BUTTON_VIA_PAYPAL', [
            'ITEMS' => $items,
            'CURRENCY' => 'GBP',
            'SHIPPING_COST' => placeholder_number(),
            'PAYMENT_ADDRESS' => lorem_word(),
            'FORM_URL' => placeholder_url(),
            'MEMBER_ADDRESS' => placeholder_array(),
            'ORDER_ID' => placeholder_numeric_id(),
            'TRANS_EXPECTING_ID' => placeholder_numeric_id(),
            'TYPE_CODE' => $items[0]['TYPE_CODE'],
            'TAX' => placeholder_number(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__shopping_cart_screen() : object
    {
        require_lang('ecommerce');

        $shopping_cart = new Tempcode();
        foreach (placeholder_array() as $k => $v) {
            $cells = new Tempcode();
            foreach (placeholder_array(8) as $_v) {
                $cells->attach(do_lorem_template('RESULTS_TABLE_FIELD_TITLE', [
                    'VALUE' => $_v,
                ]));
            }
            $header_row = $cells;

            $product_image = placeholder_image();
            $product_link = placeholder_link();
            $currency = lorem_word();
            $edit_qnty = do_lorem_template('ECOM_SHOPPING_ITEM_QUANTITY_FIELD', [
                'TYPE_CODE' => strval($k),
                'QUANTITY' => lorem_phrase(),
            ]);
            $del_item = do_lorem_template('ECOM_SHOPPING_ITEM_REMOVE_FIELD', [
                'TYPE_CODE' => strval($k),
            ]);

            $values = [
                $product_image,
                $product_link,
                $edit_qnty,
                $currency . placeholder_number(),
                $currency . placeholder_number(),
                $currency . placeholder_number(),
                $currency . placeholder_number(),
                $del_item,
            ];
            $cells = new Tempcode();
            foreach ($values as $value) {
                $cells->attach(do_lorem_template('RESULTS_TABLE_cart_FIELD', [
                    'VALUE' => $value,
                    'CLASS' => '',
                ]));
            }
            $shopping_cart->attach(do_lorem_template('RESULTS_TABLE_ENTRY', [
                'VALUES' => $cells,
            ]));
        }

        $selectors = new Tempcode();
        foreach (placeholder_array() as $k => $v) {
            $selectors->attach(do_lorem_template('PAGINATION_SORTER', [
                'SELECTED' => '',
                'NAME' => placeholder_codename(),
                'VALUE' => lorem_word(),
            ]));
        }
        $sort = do_lorem_template('PAGINATION_SORT', [
            'HIDDEN' => '',
            'SORT' => lorem_word(),
            'URL' => placeholder_url(),
            'SELECTORS' => $selectors,
        ]);

        $results_table = do_lorem_template('RESULTS_cart_TABLE', [
            'WIDTHS' => [],
            'HEADER_ROW' => $header_row,
            'RESULT_ENTRIES' => $shopping_cart,
            'MESSAGE' => new Tempcode(),
            'SORT' => $sort,
            'PAGINATION' => placeholder_pagination(),
            'NONRESPONSIVE' => false,
        ]);

        return lorem_globalise(do_lorem_template('ECOM_SHOPPING_CART_SCREEN', [
            'TITLE' => lorem_screen_title(),
            'RESULTS_TABLE' => $results_table,
            'UPDATE_CART_URL' => placeholder_url(),
            'CONTINUE_SHOPPING_URL' => placeholder_url(),
            'MESSAGE' => lorem_phrase(),
            'TYPE_CODES' => placeholder_codename(),
            'EMPTY_CART_URL' => placeholder_url(),
            'TOTAL_PRICE' => placeholder_number(),
            'TOTAL_TAX' => placeholder_number(),
            'TOTAL_SHIPPING_COST' => placeholder_number(),
            'TOTAL_SHIPPING_TAX' => placeholder_number(),
            'GRAND_TOTAL' => placeholder_number(),
            'CURRENCY' => 'GBP',
            'FIELDS' => placeholder_fields(),
            'NEXT_URL' => placeholder_url(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__ecom_orders_screen() : object
    {
        require_code('ecommerce');
        require_lang('ecommerce');

        $orders = [];
        foreach (placeholder_array() as $v) {
            $orders[] = [
                'ORDER_TITLE' => lorem_phrase(),
                'ID' => placeholder_numeric_id(),
                'TXN_ID' => placeholder_codename(),
                'TRANSACTION_LINKER' => lorem_word(),
                'TOTAL_PRICE' => ecommerce_get_currency_symbol('GBP') . placeholder_number(), // This is usually a receipt link, so currency symbol is not included on template
                'TOTAL_TAX' => placeholder_number(),
                'TOTAL_SHIPPING_COST' => placeholder_number(),
                'CURRENCY' => 'GBP',
                'DATE' => placeholder_date(),
                'STATUS' => lorem_word_2(),
                'NOTE' => lorem_phrase(),
                'ORDER_DET_URL' => placeholder_url(),
                'FULFILLABLE' => true,
            ];
        }
        return lorem_globalise(do_lorem_template('ECOM_ORDERS_SCREEN', [
            'TITLE' => lorem_screen_title(),
            'ORDERS' => $orders,
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__ecom_order_details_screen() : object
    {
        require_code('ecommerce');
        require_lang('cns_special_cpf');
        require_lang('ecommerce');

        $order_actions = do_lorem_template('ECOM_ADMIN_ORDER_ACTIONS', [
            'ORDER_TITLE' => lorem_phrase(),
            'ORDER_ACTUALISE_URL' => placeholder_url(),
            'ORDER_STATUS' => lorem_word(),
        ]);

        $address_parts = [
            'name' => lorem_phrase(),
            'street_address' => lorem_phrase(),
            'city' => lorem_phrase(),
            'county' => lorem_phrase(),
            'state' => lorem_phrase(),
            'post_code' => lorem_phrase(),
            'country' => lorem_phrase(),
            'email' => lorem_phrase(),
            'phone' => lorem_phrase(),
        ];

        $shipping_address = do_lorem_template('ECOM_SHIPPING_ADDRESS', [
            'FIRSTNAME' => lorem_phrase(),
            'LASTNAME' => lorem_phrase(),
            'STREET_ADDRESS' => lorem_phrase(),
            'CITY' => lorem_phrase(),
            'COUNTY' => lorem_phrase(),
            'STATE' => lorem_phrase(),
            'POST_CODE' => lorem_phrase(),
            'COUNTRY' => lorem_phrase(),
            'EMAIL' => lorem_phrase(),
            'PHONE' => lorem_phrase(),
            'FORMATTED_ADDRESS' => get_formatted_address($address_parts),
        ]);

        return lorem_globalise(do_lorem_template('ECOM_ORDER_DETAILS_SCREEN', [
            'TITLE' => lorem_screen_title(),
            'TEXT' => lorem_sentence(),
            'RESULTS_TABLE' => placeholder_table(),
            'ORDER_NUMBER' => placeholder_number(),
            'ADD_DATE' => placeholder_date(),
            'TOTAL_PRICE' => placeholder_number(),
            'TOTAL_TAX' => placeholder_number(),
            'TOTAL_SHIPPING_COST' => placeholder_number(),
            'CURRENCY' => 'GBP',
            'TRANSACTION_LINKER' => lorem_phrase(),
            'ORDERED_BY_MEMBER_ID' => placeholder_numeric_id(),
            'ORDERED_BY_USERNAME' => lorem_word(),
            'ORDER_STATUS' => lorem_phrase(),
            'NOTES' => lorem_phrase(),
            'ORDER_ACTIONS' => $order_actions,
            'SHIPPING_ADDRESS' => $shipping_address,
        ]), null, '', true);
    }
}
