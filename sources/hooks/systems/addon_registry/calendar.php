<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    calendar
 */

/**
 * Hook class.
 */
class Hook_addon_registry_calendar
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for.
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Information Display';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'An advanced community calendar.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_calendar',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array File permissions to set
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/rich_content/calendar.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'sources/hooks/systems/privacy/calendar.php',
            'themes/default/images/icons/menu/rich_content/calendar.svg',
            'themes/default/images/icons_monochrome/menu/rich_content/calendar.svg',
            'sources/hooks/systems/snippets/calendar_recurrence_suggest.php',
            'sources/hooks/systems/notifications/calendar_reminder.php',
            'sources/hooks/systems/notifications/calendar_event.php',
            'sources/hooks/systems/config/calendar_show_stats_count_events.php',
            'sources/hooks/systems/config/calendar_show_stats_count_events_this_month.php',
            'sources/hooks/systems/config/calendar_show_stats_count_events_this_week.php',
            'sources/hooks/systems/config/calendar_show_stats_count_events_this_year.php',
            'sources/hooks/systems/realtime_rain/calendar.php',
            'sources/hooks/systems/content_meta_aware/event.php',
            'sources/hooks/systems/content_meta_aware/calendar_type.php',
            'sources/hooks/systems/commandr_fs/calendar.php',
            'sources/hooks/blocks/side_stats/calendar.php',
            'sources/hooks/systems/preview/calendar_type.php',
            'sources/hooks/modules/admin_import_types/calendar.php',
            'sources/hooks/modules/admin_setupwizard/calendar.php',
            'sources/hooks/modules/admin_themewizard/calendar.php',
            'sources/hooks/systems/addon_registry/calendar.php',
            'themes/default/templates/CALENDAR_MAIN_SCREEN.tpl',
            'themes/default/templates/CALENDAR_DAY.tpl',
            'themes/default/templates/CALENDAR_DAY_ENTRY.tpl',
            'themes/default/templates/CALENDAR_DAY_ENTRY_FREE.tpl',
            'themes/default/templates/CALENDAR_DAY_HOUR.tpl',
            'themes/default/templates/CALENDAR_DAY_STREAM_HOUR.tpl',
            'themes/default/templates/CALENDAR_EVENT_CONFLICT.tpl',
            'themes/default/templates/CALENDAR_EVENT_TYPE.tpl',
            'themes/default/templates/CALENDAR_MONTH.tpl',
            'themes/default/templates/CALENDAR_MONTH_DAY.tpl',
            'themes/default/templates/CALENDAR_MONTH_ENTRY.tpl',
            'themes/default/templates/CALENDAR_MONTH_ENTRY_FREE.tpl',
            'themes/default/templates/CALENDAR_MONTH_WEEK.tpl',
            'themes/default/templates/CALENDAR_EVENT_SCREEN.tpl',
            'themes/default/templates/CALENDAR_WEEK.tpl',
            'themes/default/templates/CALENDAR_WEEK_HOUR_DAY.tpl',
            'themes/default/templates/CALENDAR_WEEK_ENTRY.tpl',
            'themes/default/templates/CALENDAR_WEEK_ENTRY_FREE.tpl',
            'themes/default/templates/CALENDAR_WEEK_HOUR.tpl',
            'themes/default/templates/CALENDAR_YEAR.tpl',
            'themes/default/templates/CALENDAR_YEAR_MONTH.tpl',
            'themes/default/templates/CALENDAR_YEAR_MONTH_DAY_ACTIVE.tpl',
            'themes/default/templates/CALENDAR_YEAR_MONTH_DAY_FREE.tpl',
            'themes/default/templates/CALENDAR_YEAR_MONTH_DAY_ROW.tpl',
            'themes/default/templates/CALENDAR_YEAR_MONTH_DAY_SPACER.tpl',
            'themes/default/templates/CALENDAR_YEAR_MONTH_ROW.tpl',
            'themes/default/templates/BLOCK_SIDE_CALENDAR.tpl',
            'themes/default/templates/BLOCK_SIDE_CALENDAR_LISTING.tpl',
            'themes/default/templates/CALENDAR_EVENT_BOX.tpl',
            'sources/hooks/systems/commandr_commands/run_scheduled_action.php',
            'sources/hooks/systems/trackback/events.php',
            'cms/pages/modules/cms_calendar.php',
            'lang/EN/calendar.ini',
            'site/pages/modules/calendar.php',
            'sources/blocks/side_calendar.php',
            'sources/hooks/systems/sitemap/calendar_type.php',
            'sources/hooks/systems/sitemap/event.php',
            'sources/calendar.php',
            'sources/calendar2.php',
            'sources/calendar_ical.php',
            'sources/hooks/modules/admin_import/icalendar.php',
            'sources/hooks/modules/admin_newsletter/calendar.php',
            'sources/hooks/modules/members/calendar.php',
            'sources/hooks/modules/search/calendar.php',
            'sources/hooks/systems/attachments/calendar.php',
            'sources/hooks/systems/cron/calendar_reminders.php',
            'sources/hooks/systems/cron/calendar_next_tracking.php',
            'sources/hooks/systems/page_groupings/calendar.php',
            'sources/hooks/systems/preview/calendar.php',
            'sources/hooks/systems/rss/calendar.php',
            'themes/default/css/calendar.css',
            'themes/default/images/icons/calendar/activity.svg',
            'themes/default/images/icons/calendar/anniversary.svg',
            'themes/default/images/icons/calendar/appointment.svg',
            'themes/default/images/icons/calendar/birthday.svg',
            'themes/default/images/icons/calendar/commitment.svg',
            'themes/default/images/icons/calendar/duty.svg',
            'themes/default/images/icons/calendar/festival.svg',
            'themes/default/images/icons/calendar/general.svg',
            'themes/default/images/icons/calendar/public_holiday.svg',
            'themes/default/images/icons/calendar/vacation.svg',
            'themes/default/images/icons/calendar/rss.svg',
            'themes/default/images/icons/calendar/system_command.svg',
            'themes/default/images/icons/calendar/index.html',
            'themes/default/images/icons_monochrome/calendar/activity.svg',
            'themes/default/images/icons_monochrome/calendar/anniversary.svg',
            'themes/default/images/icons_monochrome/calendar/appointment.svg',
            'themes/default/images/icons_monochrome/calendar/birthday.svg',
            'themes/default/images/icons_monochrome/calendar/commitment.svg',
            'themes/default/images/icons_monochrome/calendar/duty.svg',
            'themes/default/images/icons_monochrome/calendar/festival.svg',
            'themes/default/images/icons_monochrome/calendar/general.svg',
            'themes/default/images/icons_monochrome/calendar/public_holiday.svg',
            'themes/default/images/icons_monochrome/calendar/vacation.svg',
            'themes/default/images/icons_monochrome/calendar/rss.svg',
            'themes/default/images/icons_monochrome/calendar/system_command.svg',
            'themes/default/images/icons_monochrome/calendar/index.html',
            'themes/default/images/calendar/priority_1.svg',
            'themes/default/images/calendar/priority_2.svg',
            'themes/default/images/calendar/priority_3.svg',
            'themes/default/images/calendar/priority_4.svg',
            'themes/default/images/calendar/priority_5.svg',
            'themes/default/images/calendar/priority_na.svg',
            'themes/default/images/calendar/index.html',
            'sources/hooks/systems/notifications/member_calendar_changes.php',
            'sources/hooks/systems/commandr_fs_extended_member/calendar_interests.php',
            'sources/hooks/systems/config/search_calendar.php',
            'themes/default/javascript/calendar.js',
            'sources/hooks/systems/actionlog/calendar.php',
            'sources/hooks/systems/commandr_scheduled/.htaccess',
            'sources/hooks/systems/commandr_scheduled/index.html',
            'sources/hooks/systems/config/allow_adding_commandr_events.php',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/CALENDAR_YEAR_MONTH_DAY_SPACER.tpl' => 'calendar_year_view',
            'templates/CALENDAR_YEAR_MONTH_DAY_FREE.tpl' => 'calendar_year_view',
            'templates/CALENDAR_YEAR_MONTH_DAY_ACTIVE.tpl' => 'calendar_year_view',
            'templates/CALENDAR_YEAR_MONTH_DAY_ROW.tpl' => 'calendar_year_view',
            'templates/BLOCK_SIDE_CALENDAR.tpl' => 'block_side_calendar',
            'templates/BLOCK_SIDE_CALENDAR_LISTING.tpl' => 'block_side_calendar_listing',
            'templates/CALENDAR_EVENT_CONFLICT.tpl' => 'calendar_event_conflict',
            'templates/CALENDAR_EVENT_TYPE.tpl' => 'calendar_year_view',
            'templates/CALENDAR_MAIN_SCREEN.tpl' => 'calendar_month_view',
            'templates/CALENDAR_DAY_ENTRY.tpl' => 'calendar_day_view',
            'templates/CALENDAR_DAY_ENTRY_FREE.tpl' => 'calendar_day_view',
            'templates/CALENDAR_DAY_STREAM_HOUR.tpl' => 'calendar_day_view',
            'templates/CALENDAR_DAY_HOUR.tpl' => 'calendar_day_view',
            'templates/CALENDAR_DAY.tpl' => 'calendar_day_view',
            'templates/CALENDAR_WEEK_ENTRY.tpl' => 'calendar_week_view',
            'templates/CALENDAR_WEEK_ENTRY_FREE.tpl' => 'calendar_week_view',
            'templates/CALENDAR_WEEK_HOUR_DAY.tpl' => 'calendar_week_view',
            'templates/CALENDAR_WEEK_HOUR.tpl' => 'calendar_week_view',
            'templates/CALENDAR_WEEK.tpl' => 'calendar_week_view',
            'templates/CALENDAR_MONTH_ENTRY_FREE.tpl' => 'calendar_month_view',
            'templates/CALENDAR_MONTH_DAY.tpl' => 'calendar_month_view',
            'templates/CALENDAR_MONTH_WEEK.tpl' => 'calendar_month_view',
            'templates/CALENDAR_MONTH_ENTRY.tpl' => 'calendar_month_view',
            'templates/CALENDAR_MONTH.tpl' => 'calendar_month_view',
            'templates/CALENDAR_YEAR_MONTH_ROW.tpl' => 'calendar_year_view',
            'templates/CALENDAR_YEAR_MONTH.tpl' => 'calendar_year_view',
            'templates/CALENDAR_YEAR.tpl' => 'calendar_year_view',
            'templates/CALENDAR_EVENT_SCREEN.tpl' => 'calendar_event_screen',
            'templates/CALENDAR_EVENT_BOX.tpl' => 'calendar_event_box',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__calendar_year_view() : object
    {
        return lorem_globalise($this->calendar_main_screen('year'), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__calendar_month_view() : object
    {
        return lorem_globalise($this->calendar_main_screen('month'), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__calendar_week_view() : object
    {
        return lorem_globalise($this->calendar_main_screen('week'), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__calendar_day_view() : object
    {
        return lorem_globalise($this->calendar_main_screen('day'), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__block_side_calendar() : object
    {
        require_lang('dates');

        $_entries = new Tempcode();
        $__entries = new Tempcode();
        $dotw = 0;
        for ($j = 1; $j <= 31; $j++) {
            if ($j == 10) {
                $__entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_FREE', [
                    'CLASS' => lorem_word(),
                    'CURRENT' => false,
                    'DAY_URL' => placeholder_url(),
                    'DATE' => placeholder_date(),
                    'DAY' => lorem_word_2(),
                ]));
            } else {
                $__entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_ACTIVE', [
                    'CURRENT' => false,
                    'DAY_URL' => placeholder_url(),
                    'DATE' => placeholder_date(),
                    'PRIORITY' => lorem_word(),
                    'DAY' => placeholder_number(),
                    'ICON' => '',
                    'COUNT' => placeholder_number(),
                    'EVENTS_AND_PRIORITY_LANG' => lorem_phrase(),
                ]));
            }

            if ($dotw == 6) {
                $_entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_ROW', [
                    'ENTRIES' => $__entries,
                ]));
                $__entries = new Tempcode();
                $dotw = 0;
            } else {
                $dotw++;
            }
        }

        for ($j = $dotw; $j < 7; $j++) {
            $__entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_SPACER'));
        }
        $_entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_ROW', [
            'ENTRIES' => $__entries,
        ]));

        return lorem_globalise(do_lorem_template('BLOCK_SIDE_CALENDAR', [
            'BLOCK_ID' => lorem_word(),
            'CALENDAR_URL' => placeholder_url(),
            'ENTRIES' => $_entries,
            '_MONTH' => lorem_phrase(),
            'MONTH' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__block_side_calendar_listing() : object
    {
        $days = [
            [
                'DATE' => get_timezoned_date(123456789),
                'TIMESTAMP' => strval(123456789),

                'EVENTS' => [
                    [
                        'T_TITLE' => lorem_phrase(),
                        'E_TITLE' => lorem_phrase(),
                        'VIEW_URL' => placeholder_url(),
                        'ICON' => 'icons/calendar/' . placeholder_img_code('icons/calendar'),
                        'DESCRIPTION' => lorem_paragraph_html(),

                        'TIME_WRITTEN' => get_timezoned_date(123456789),

                        'TIME' => get_timezoned_date(123456789),
                        'TIME_RAW' => strval(123456789),
                        'TIME_VCAL' => strval(123456789),

                        'TO_TIME' => get_timezoned_date(123456789 + 60 * 60 * 24),
                        'TO_TIME_RAW' => strval(123456789 + 60 * 60 * 24),
                        'TO_TIME_VCAL' => strval(123456789 + 60 * 60 * 24),
                    ],
                ],
            ],
        ];

        return lorem_globalise(do_lorem_template('BLOCK_SIDE_CALENDAR_LISTING', [
            'BLOCK_ID' => lorem_word(),
            'TITLE' => lorem_phrase(),
            'DAYS' => $days,
            'CALENDAR_URL' => placeholder_url(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__calendar_event_conflict() : object
    {
        return lorem_globalise(do_lorem_template('CALENDAR_EVENT_CONFLICT', [
            'URL' => placeholder_url(),
            'ID' => placeholder_id(),
            'TITLE' => lorem_phrase(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__calendar_event_box() : object
    {
        return lorem_globalise(do_lorem_template('CALENDAR_EVENT_BOX', [
            'ID' => placeholder_id(),
            'URL' => placeholder_url(),
            'SUMMARY' => lorem_paragraph_html(),
            'TITLE' => lorem_phrase(),
            'GIVE_CONTEXT' => true,
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @param  string $view View type
     * @return Tempcode Preview
     */
    public function calendar_main_screen(string $view) : object
    {
        require_lang('dates');

        switch ($view) {
            case 'day':
                $hours = new Tempcode();
                for ($i = 0; $i < 24; $i++) {
                    $_streams = new Tempcode();
                    foreach (placeholder_array(2) as $k => $v) {
                        $entry = do_lorem_template('CALENDAR_DAY_ENTRY_FREE', [
                            'CLASS' => lorem_word(),
                            'TEXT' => lorem_phrase(),
                        ]);
                        $_streams->attach(do_lorem_template('CALENDAR_DAY_STREAM_HOUR', [
                            'CURRENT' => false,
                            'ADD_URL' => placeholder_url(),
                            'PRIORITY' => lorem_phrase(),
                            'DOWN' => '1',
                            'ENTRY' => $entry,
                        ]));
                    }
                    foreach (placeholder_array(2) as $v) {
                        $entries = do_lorem_template('CALENDAR_DAY_ENTRY', [
                            'ID' => placeholder_id(),
                            'URL' => placeholder_url(),
                            'TIME' => placeholder_date(),
                            'T_TITLE' => lorem_phrase(),
                            'TITLE' => lorem_phrase(),
                            'DESCRIPTION' => lorem_phrase(),
                            'VALIDATED' => true,
                            'RECURRING' => false,
                            'PRIORITY_ICON' => 'calendar/priority_1',
                        ]);
                        $_streams->attach(do_lorem_template('CALENDAR_DAY_STREAM_HOUR', [
                            'CURRENT' => false,
                            'ADD_URL' => placeholder_url(),
                            'PRIORITY' => lorem_phrase(),
                            'DOWN' => '1',
                            'ENTRY' => $entry,
                        ]));
                    }

                    $hours->attach(do_lorem_template('CALENDAR_DAY_HOUR', [
                        '_HOUR' => placeholder_number(),
                        'HOUR' => lorem_word(),
                        'STREAMS' => $_streams,
                    ]));
                }

                $main = do_lorem_template('CALENDAR_DAY', [
                    'HOURS' => $hours,
                    'PERIOD_START' => placeholder_date_raw(),
                    'PERIOD_END' => placeholder_date_raw(),
                ]);
                break;

            case 'week':
                $hours = new Tempcode();
                for ($i = 0; $i < 24; $i++) {
                    $days = new Tempcode();
                    for ($j = 0; $j < 7; $j++) {
                        if ($i % 2 == 0) {
                            $entries = do_lorem_template('CALENDAR_WEEK_ENTRY_FREE', [
                                'CLASS' => lorem_word(),
                                'TEXT' => '',
                            ]);
                        } else {
                            $entries = do_lorem_template('CALENDAR_WEEK_ENTRY', [
                                'ID' => placeholder_id(),
                                'URL' => placeholder_url(),
                                'TIME' => placeholder_date(),
                                'T_TITLE' => lorem_phrase(),
                                'TITLE' => lorem_phrase(),
                                'ICON' => 'icons/calendar/' . placeholder_img_code('icons/calendar'),
                                'VALIDATED' => true,
                                'RECURRING' => false,
                                'PRIORITY' => '1',
                            ]);
                        }
                        $days->attach(do_lorem_template('CALENDAR_WEEK_HOUR_DAY', [
                            'CURRENT' => false,
                            'ADD_URL' => placeholder_url(),
                            'DOWN' => '1',
                            'DAY' => lorem_word(),
                            'HOUR' => lorem_word(),
                            'CLASS' => lorem_word(),
                            'ENTRIES' => $entries,
                        ]));
                    }

                    $hours->attach(do_lorem_template('CALENDAR_WEEK_HOUR', [
                        '_HOUR' => placeholder_number(),
                        'HOUR' => lorem_word(),
                        'DAYS' => $days,
                    ]));
                }

                $main = do_lorem_template('CALENDAR_WEEK', [
                    'MONDAY_DATE' => lorem_word(),
                    'TUESDAY_DATE' => lorem_word(),
                    'WEDNESDAY_DATE' => lorem_word(),
                    'THURSDAY_DATE' => lorem_word(),
                    'FRIDAY_DATE' => lorem_word(),
                    'SATURDAY_DATE' => lorem_word(),
                    'SUNDAY_DATE' => lorem_word(),
                    'MONDAY_URL' => placeholder_url(),
                    'TUESDAY_URL' => placeholder_url(),
                    'WEDNESDAY_URL' => placeholder_url(),
                    'THURSDAY_URL' => placeholder_url(),
                    'FRIDAY_URL' => placeholder_url(),
                    'SATURDAY_URL' => placeholder_url(),
                    'SUNDAY_URL' => placeholder_url(),
                    'HOURS' => $hours,
                    'PERIOD_START' => placeholder_date_raw(),
                    'PERIOD_END' => placeholder_date_raw(),
                ]);
                break;

            case 'month':
                $empty_entry = do_lorem_template('CALENDAR_MONTH_ENTRY_FREE', [
                    'CLASS' => lorem_word(),
                    'TEXT' => '',
                ]);

                $days = new Tempcode();
                foreach (placeholder_array() as $k => $v) {
                    $entries = new Tempcode();
                    foreach (placeholder_array() as $_k => $_v) {
                        $entries->attach(do_lorem_template('CALENDAR_MONTH_ENTRY', [
                            'ID' => placeholder_id(),
                            'T_TITLE' => lorem_phrase(),
                            'PRIORITY' => lorem_word(),
                            'ICON' => 'icons/calendar/' . placeholder_img_code('icons/calendar'),
                            'TIME' => placeholder_number(),
                            'TITLE' => lorem_phrase(),
                            'URL' => placeholder_url(),
                            'VALIDATED' => true,
                            'RECURRING' => false,
                        ]));
                    }

                    $days->attach(do_lorem_template('CALENDAR_MONTH_DAY', [
                        'CURRENT' => false,
                        'DAY_URL' => '',
                        'CLASS' => '',
                        'DAY' => '',
                        'ENTRIES' => $entries,
                    ]));
                }

                $weeks = new Tempcode();
                foreach (placeholder_array() as $k => $v) {
                    $weeks->attach(do_lorem_template('CALENDAR_MONTH_WEEK', [
                        'WEEK_URL' => placeholder_url(),
                        'WEEK_DATE' => lorem_word(),
                        'DAYS' => $days,
                    ]));
                }

                $main = do_lorem_template('CALENDAR_MONTH', [
                    'WEEKS' => $weeks,
                    'PERIOD_START' => placeholder_date_raw(),
                    'PERIOD_END' => placeholder_date_raw(),
                ]);
                break;

            case 'year':
                $months = '';
                $month_rows = new Tempcode();
                for ($i = 1; $i <= 12; $i++) {
                    if ((($i - 1) % 3 == 0) && ($i != 1)) {
                        $month_rows->attach(do_lorem_template('CALENDAR_YEAR_MONTH_ROW', [
                            'MONTHS' => $months,
                            'MONTH_A_URL' => placeholder_url(),
                            'MONTH_B_URL' => placeholder_url(),
                            'MONTH_C_URL' => placeholder_url(),
                            'MONTH_A' => lorem_word(),
                            'MONTH_B' => lorem_word(),
                            'MONTH_C' => lorem_word(),
                        ]));
                        $months = '';
                    }

                    $_entries = new Tempcode();
                    $__entries = new Tempcode();
                    $dotw = 0;
                    for ($j = 1; $j <= 31; $j++) {
                        if ($j == 10) {
                            $__entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_FREE', [
                                'CLASS' => lorem_word(),
                                'CURRENT' => false,
                                'DAY_URL' => placeholder_url(),
                                'DATE' => placeholder_date(),
                                'DAY' => lorem_word_2(),
                            ]));
                        } else {
                            $__entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_ACTIVE', [
                                'CURRENT' => false,
                                'DAY_URL' => placeholder_url(),
                                'DATE' => placeholder_date(),
                                'PRIORITY' => placeholder_number(),
                                'DAY' => placeholder_number(),
                                'ICON' => '',
                                'COUNT' => placeholder_number(),
                                'EVENTS_AND_PRIORITY_LANG' => lorem_phrase(),
                            ]));
                        }

                        if ($dotw == 6) {
                            $_entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_ROW', [
                                'ENTRIES' => $__entries,
                            ]));
                            $__entries = new Tempcode();
                            $dotw = 0;
                        } else {
                            $dotw++;
                        }
                    }

                    for ($j = $dotw; $j < 7; $j++) {
                        $__entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_SPACER'));
                    }
                    $_entries->attach(do_lorem_template('CALENDAR_YEAR_MONTH_DAY_ROW', [
                        'ENTRIES' => $__entries,
                    ]));

                    $month = do_lorem_template('CALENDAR_YEAR_MONTH', [
                        'ENTRIES' => $_entries,
                        'MONTH_NAME' => lorem_word(),
                        'MONTH_URL' => placeholder_url(),
                    ]);
                    $months .= $month->evaluate() /*XHTMLXHTML*/;
                }
                $month_rows->attach(do_lorem_template('CALENDAR_YEAR_MONTH_ROW', [
                    'MONTHS' => $months,
                    'MONTH_A_URL' => placeholder_url(),
                    'MONTH_B_URL' => placeholder_url(),
                    'MONTH_C_URL' => placeholder_url(),
                    'MONTH_A' => lorem_word(),
                    'MONTH_B' => lorem_word(),
                    'MONTH_C' => lorem_word(),
                ]));

                $main = do_lorem_template('CALENDAR_YEAR', [
                    'MONTH_ROWS' => $month_rows,
                    'PERIOD_START' => placeholder_date_raw(),
                    'PERIOD_END' => placeholder_date_raw(),
                ]);
                break;
        }
        $events1 = do_lorem_template('CALENDAR_EVENT_TYPE', [
            'S' => 'I',
            'INTERESTED' => 'interested',
            'TYPE' => lorem_phrase(),
            'TYPE_ID' => placeholder_id(),
        ]);
        $events2 = do_lorem_template('CALENDAR_EVENT_TYPE', [
            'S' => 'F',
            'INTERESTED' => 'not_interested',
            'TYPE' => lorem_phrase(),
            'TYPE_ID' => placeholder_id(),
        ]);
        return do_lorem_template('CALENDAR_MAIN_SCREEN', [
            'RSS_FORM' => placeholder_form(),
            'DAY_URL' => placeholder_url(),
            'WEEK_URL' => placeholder_url(),
            'MONTH_URL' => placeholder_url(),
            'YEAR_URL' => placeholder_url(),
            'PREVIOUS_URL' => placeholder_url(),
            'NEXT_URL' => placeholder_url(),
            'ADD_URL' => placeholder_url(),
            'TITLE' => lorem_title(),
            'BACK_URL' => placeholder_url(),
            'MAIN' => $main,
            'FILTER_URL' => placeholder_url(),
            'EVENT_TYPES_1' => $events1,
            'INTERESTS_URL' => placeholder_url(),
            'EVENT_TYPES_2' => $events2,
            'PREVIOUS_NO_FOLLOW' => true,
            'NEXT_NO_FOLLOW' => true,
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__calendar_event_screen() : object
    {
        require_javascript('editing');

        $subscriptions = [];

        foreach (placeholder_array() as $v) {
            $subscriptions[] = [
                'UNSUBSCRIBE_URL' => placeholder_url(),
                'TIME' => placeholder_date(),
            ];
        }

        $subscribed = [];
        foreach (placeholder_array() as $v) {
            $subscribed[] = [
                'MEMBER_ID' => placeholder_id(),
                'MEMBER_URL' => placeholder_url(),
                'USERNAME' => lorem_word(),
            ];
        }

        $comment_details = do_lorem_template('COMMENTS_POSTING_FORM', [
            'TITLE' => lorem_phrase(),
            'JOIN_BITS' => lorem_phrase_html(),
            'USE_CAPTCHA' => false,
            'GET_EMAIL' => true,
            'EMAIL_OPTIONAL' => true,
            'GET_TITLE' => true,
            'TITLE_OPTIONAL' => true,
            'DEFAULT_TITLE' => '',
            'POST_WARNING' => '',
            'RULES_TEXT' => '',
            'ATTACHMENTS' => null,
            'ATTACH_SIZE_FIELD' => null,
            'TRUE_ATTACHMENT_UI' => false,
            'EMOTICONS' => placeholder_emoticon_chooser(),
            'EXPAND_TYPE' => 'expand',
            'DISPLAY' => 'block',
            'FIRST_POST_URL' => '',
            'FIRST_POST' => '',
            'COMMENT_URL' => placeholder_url(),
            'REVIEWS' => false,
            'ANALYTIC_EVENT_CATEGORY' => null,
        ]);

        return lorem_globalise(do_lorem_template('CALENDAR_EVENT_SCREEN', [
            'TITLE' => get_screen_title('CALENDAR_EVENT_VCAL', true, [lorem_phrase()]),

            'ID' => placeholder_id(),
            'TAGS' => placeholder_tags(),
            'WARNING_DETAILS' => '',
            'SUBMITTER' => placeholder_id(),
            'ADD_DATE' => placeholder_date(),
            'ADD_DATE_RAW' => placeholder_date_raw(),
            'EDIT_DATE_RAW' => placeholder_date_raw(),
            '_VIEWS' => placeholder_number(),
            'VIEWS' => placeholder_number(),
            'LOGO' => 'icons/calendar/' . placeholder_img_code('icons/calendar'),
            'RECURRENCE' => placeholder_number(),
            'IS_PUBLIC' => lorem_phrase(),
            'PRIORITY' => lorem_phrase(),
            'PRIORITY_LANG' => lorem_phrase(),
            'TYPE' => lorem_phrase(),
            'EDIT_URL' => placeholder_url(),
            'SUBSCRIPTIONS' => $subscriptions,
            'SUBSCRIBE_URL' => placeholder_url(),
            'BACK_URL' => placeholder_url(),
            'CONTENT' => lorem_phrase(),
            'SUBSCRIBED' => $subscribed,
            'RATING_DETAILS' => lorem_sentence_html(),
            'TRACKBACK_DETAILS' => lorem_sentence_html(),
            'VALIDATED' => true,
            'COMMENT_DETAILS' => $comment_details,

            'DAY' => get_timezoned_date(123456789),
            'TIME' => get_timezoned_date(123456789),
            'TIME_RAW' => strval(123456789),
            'TIME_VCAL' => strval(123456789),

            'TO_DAY' => get_timezoned_date(123456789 + 60 * 60 * 24),
            'TO_TIME' => get_timezoned_date(123456789 + 60 * 60 * 24),
            'TO_TIME_RAW' => strval(123456789 + 60 * 60 * 24),
            'TO_TIME_VCAL' => strval(123456789 + 60 * 60 * 24),
        ]), null, '', true);
    }

    /**
     * Uninstall default content.
     */
    public function uninstall_test_content()
    {
        require_code('calendar2');

        $to_delete = $GLOBALS['SITE_DB']->query_select('calendar_events', ['id'], [$GLOBALS['SITE_DB']->translate_field_ref('e_title') => lorem_phrase()]);
        foreach ($to_delete as $record) {
            delete_calendar_event($record['id']);
        }

        $to_delete = $GLOBALS['SITE_DB']->query_select('calendar_types', ['id'], [$GLOBALS['SITE_DB']->translate_field_ref('t_title') => lorem_phrase()]);
        foreach ($to_delete as $record) {
            delete_event_type($record['id']);
        }
    }

    /**
     * Install default content.
     */
    public function install_test_content()
    {
        require_code('calendar2');

        $event_type_id = $GLOBALS['SITE_DB']->query_select_value_if_there('calendar_types', 'MAX(id)');
        if ($event_type_id !== db_get_first_id()) {
            $event_type_id = add_event_type(lorem_phrase(), 'icons/calendar/general');
            require_code('permissions2');
            set_global_category_access('calendar', $event_type_id);
        }

        add_calendar_event($event_type_id, 'none', null, 0, lorem_phrase(), lorem_chunk(), 1, intval(date('Y')), intval(date('m')), intval(date('d')), 'day_of_month', 0, 0);
    }

    /**
     * Find predefined event category icons.
     *
     * @return array Predefined event category icons
     */
    protected function predefined_event_types() : array
    {
        return ['birthday', 'public_holiday', 'vacation', 'appointment', 'commitment', 'anniversary'];
    }

    /**
     * Find available predefined content, and what is installed.
     *
     * @return array A map of available predefined content codenames, and details (if installed, and title)
     */
    public function enumerate_predefined_content() : array
    {
        require_lang('calendar');

        $ret = [];

        $_event_types = [];
        $event_types = $this->predefined_event_types();
        foreach ($event_types as $type) {
            $installed = ($GLOBALS['SITE_DB']->query_select_value_if_there('calendar_types', 'id', ['t_logo' => 'icons/calendar/' . $type]) !== null);

            $ret[$type] = [
                'title' => do_lang_tempcode('DEFAULT_CALENDAR_TYPE__' . $type),
                'description' => new Tempcode(),
                'installed' => $installed,
            ];
        }

        return $ret;
    }

    /**
     * Install predefined content.
     *
     * @param  ?array $content A list of predefined content labels to install (null: all)
     */
    public function install_predefined_content(?array $content = null)
    {
        $event_types = $this->predefined_event_types();
        foreach ($event_types as $type) {
            if ((($content === null) || (in_array($type, $content))) && (!has_predefined_content('calendar', $type))) {
                require_code('lang3');
                require_lang('calendar');
                $map = [
                    't_external_feed' => '',
                    't_logo' => 'icons/calendar/' . $type,
                ];
                $map += lang_code_to_default_content('t_title', 'DEFAULT_CALENDAR_TYPE__' . $type, true);
                $GLOBALS['SITE_DB']->query_insert('calendar_types', $map);
            }
        }
    }

    /**
     * Uninstall predefined content.
     *
     * @param  ?array $content A list of predefined content labels to uninstall (null: all)
     */
    public function uninstall_predefined_content(?array $content = null)
    {
        $event_types = $this->predefined_event_types();
        foreach ($event_types as $type) {
            if ((($content === null) || (in_array($type, $content))) && (has_predefined_content('calendar', $type))) {
                $id = $GLOBALS['SITE_DB']->query_select_value('calendar_types', 'id', ['t_logo' => 'icons/calendar/' . $type]);
                require_code('calendar2');
                delete_event_type($id);
            }
        }
    }
}
