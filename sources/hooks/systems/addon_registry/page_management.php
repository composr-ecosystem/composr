<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    page_management
 */

/**
 * Hook class.
 */
class Hook_addon_registry_page_management
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array($runtime = false)
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for.
     *
     * @return float Version number
     */
    public function get_version()
    {
        return cms_version_number();
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category()
    {
        return 'Admin Utilities';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description()
    {
        return 'Manage pages on the website.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials()
    {
        return [
            'tut_structure',
            'tut_adv_structure',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array File permissions to set
     */
    public function get_dependencies()
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
            'previously_in_addon' => ['core_page_management'],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon()
    {
        return 'themes/default/images/icons/menu/adminzone/structure/sitemap/sitemap_editor.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list()
    {
        return [
            'themes/default/images/icons/menu/adminzone/structure/sitemap/sitemap_editor.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/structure/sitemap/sitemap_editor.svg',
            'sources/hooks/systems/addon_registry/page_management.php',
            'themes/default/templates/WEBSTANDARDS_CHECK_SCREEN.tpl',
            'themes/default/templates/WEBSTANDARDS_CHECK_ERROR.tpl',
            'adminzone/pages/modules/admin_sitemap.php',
            'themes/default/templates/SITEMAP_EDITOR_SCREEN.tpl',
            'themes/default/javascript/page_management.js',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews()
    {
        return [
            'templates/SITEMAP_EDITOR_SCREEN.tpl' => 'administrative__sitemap_editor_screen',
            'templates/WEBSTANDARDS_CHECK_SCREEN.tpl' => 'administrative__webstandards_check_screen',
            'templates/WEBSTANDARDS_CHECK_ERROR.tpl' => 'administrative__webstandards_check_screen',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__administrative__sitemap_editor_screen()
    {
        require_javascript('tree_list');

        require_lang('zones');

        return [
            lorem_globalise(do_lorem_template('SITEMAP_EDITOR_SCREEN', [
                'TITLE' => lorem_title(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__administrative__webstandards_check_screen()
    {
        require_lang('webstandards');

        $content = new Tempcode();
        foreach (placeholder_array() as $val) {
            $content->attach(do_lorem_template('WEBSTANDARDS_CHECK_ERROR', [
                'URL' => placeholder_url(),
                'POINT' => lorem_phrase(),
            ]));
        }
        return [
            lorem_globalise(do_lorem_template('WEBSTANDARDS_CHECK_SCREEN', [
                'TITLE' => lorem_title(),
                'CONTENTS' => $content,
            ]), null, '', true)
        ];
    }
}
