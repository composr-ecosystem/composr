<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_adminzone_dashboard
 */

/**
 * Hook class.
 */
class Hook_addon_registry_core_adminzone_dashboard
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the current version of this addon (usually software major, software minor, addon build).
     * Put the comment "// addon_version_auto_update" to the right of the return if you want release tools to automatically update this according to software version and find_addon_effective_md5.
     *
     * @return SHORT_TEXT Version number
     */
    public function get_version() : string
    {
        return '11.0.2'; // addon_version_auto_update f9494a5806f966c4525b75a115be8b2e
    }

    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }

    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return 11.9;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Admin Utilities';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'The dashboard tools shown in the Admin Zone.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_adminzone',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/admin/component.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'lang/EN/staff_checklist.ini',
            'lang/EN/tips.ini',
            'sources/blocks/main_staff_actions.php',
            'sources/blocks/main_staff_checklist.php',
            'sources/blocks/main_staff_links.php',
            'sources/blocks/main_staff_new_version.php',
            'sources/blocks/main_staff_tips.php',
            'sources/hooks/blocks/main_staff_checklist/.htaccess',
            'sources/hooks/blocks/main_staff_checklist/cron.php',
            'sources/hooks/blocks/main_staff_checklist/index.html',
            'sources/hooks/blocks/main_staff_checklist/open_site.php',
            'sources/hooks/blocks/main_staff_checklist/profile.php',
            'sources/hooks/systems/addon_registry/core_adminzone_dashboard.php',
            'sources/hooks/systems/commandr_fs_extended_config/checklist_tasks.php',
            'sources/hooks/systems/commandr_fs_extended_config/staff_links.php',
            'sources/hooks/systems/config/dashboard_actions.php',
            'sources/hooks/systems/config/dashboard_checklist.php',
            'sources/hooks/systems/config/dashboard_db_notes.php',
            'sources/hooks/systems/config/dashboard_forum_topics.php',
            'sources/hooks/systems/config/dashboard_homesite_news.php',
            'sources/hooks/systems/config/dashboard_links.php',
            'sources/hooks/systems/config/dashboard_new_version.php',
            'sources/hooks/systems/config/dashboard_tips.php',
            'sources/hooks/systems/cron/staff_checklist_notify.php',
            'sources/hooks/systems/notifications/staff_checklist_notify.php',
            'sources/hooks/systems/snippets/checklist_task_manage.php',
            'sources_custom/hooks/blocks/main_staff_checklist/.htaccess',
            'sources_custom/hooks/blocks/main_staff_checklist/index.html',
            'themes/default/css/adminzone_dashboard.css',
            'themes/default/images/icons/checklist/checklist_done.svg',
            'themes/default/images/icons/checklist/checklist_na.svg',
            'themes/default/images/icons/checklist/checklist_todo.svg',
            'themes/default/images/icons/checklist/index.html',
            'themes/default/images/icons/checklist/toggle.svg',
            'themes/default/images/icons/checklist/toggle2.svg',
            'themes/default/images/icons_monochrome/checklist/checklist_done.svg',
            'themes/default/images/icons_monochrome/checklist/checklist_na.svg',
            'themes/default/images/icons_monochrome/checklist/checklist_todo.svg',
            'themes/default/images/icons_monochrome/checklist/index.html',
            'themes/default/images/icons_monochrome/checklist/toggle.svg',
            'themes/default/images/icons_monochrome/checklist/toggle2.svg',
            'themes/default/javascript/core_adminzone_dashboard.js',
            'themes/default/templates/BLOCK_MAIN_NOTES.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_ACTIONS.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_CHECKLIST.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_CHECKLIST_CUSTOM_TASK.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_0.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_1.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_NA.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_LINKS.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_NEW_VERSION.tpl',
            'themes/default/templates/BLOCK_MAIN_STAFF_TIPS.tpl',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/BLOCK_MAIN_STAFF_CHECKLIST_CUSTOM_TASK.tpl' => 'administrative__block_main_staff_checklist',
            'templates/BLOCK_MAIN_NOTES.tpl' => 'block_main_notes',
            'templates/BLOCK_MAIN_STAFF_CHECKLIST.tpl' => 'administrative__block_main_staff_checklist',
            'templates/BLOCK_MAIN_STAFF_NEW_VERSION.tpl' => 'administrative__block_main_staff_new_version',
            'templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_1.tpl' => 'administrative__block_main_staff_checklist',
            'templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_0.tpl' => 'administrative__block_main_staff_checklist',
            'templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM.tpl' => 'administrative__block_main_staff_checklist',
            'templates/BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_NA.tpl' => 'administrative__block_main_staff_checklist',
            'templates/BLOCK_MAIN_STAFF_TIPS.tpl' => 'administrative__block_main_staff_tips',
            'templates/BLOCK_MAIN_STAFF_LINKS.tpl' => 'administrative__block_main_staff_links',
            'templates/BLOCK_MAIN_STAFF_ACTIONS.tpl' => 'administrative__block_main_staff_actions',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__block_main_staff_links() : object
    {
        $formatted = [];
        foreach (placeholder_array() as $v) {
            $formatted[] = [
                'TITLE' => lorem_phrase(),
                'DESC' => lorem_phrase(),
            ];
        }
        $unformatted = [];
        foreach (placeholder_array() as $v) {
            $unformatted[] = [
                'LINKS' => placeholder_url(),
            ];
        }

        return lorem_globalise(do_lorem_template('BLOCK_MAIN_STAFF_LINKS', [
            'BLOCK_ID' => lorem_word(),
            'FORMATTED_LINKS' => $formatted,
            'UNFORMATTED_LINKS' => $unformatted,
            'URL' => placeholder_url(),
            'BLOCK_NAME' => '',
            'MAP' => '',
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__block_main_notes() : object
    {
        return lorem_globalise(do_lorem_template('BLOCK_MAIN_NOTES', [
            'BLOCK_ID' => lorem_word(),
            'TITLE' => lorem_phrase(),
            'SCROLLS' => lorem_phrase(),
            'CONTENTS' => lorem_phrase(),
            'URL' => placeholder_url(),
            'BLOCK_NAME' => '',
            'MAP' => '',
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__block_main_staff_checklist() : object
    {
        $_status = do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_1');

        $info = do_lang_tempcode('DUE_TIME', placeholder_number(), placeholder_number());

        $dates = do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM', [
            'URL' => placeholder_url(),
            'STATUS' => $_status,
            'TASK' => lorem_phrase(),
            'INFO' => $info,
        ]);

        $status = do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_0', []);

        $url = build_url([
            'page' => 'admin_shopping',
            'type' => 'browse',
            'filter_order_status' => 'ORDER_STATUS_payment_received',
        ], get_module_zone('admin_shopping'));

        $no_times = do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM', [
            'URL' => placeholder_url(),
            'STATUS' => $status,
            'TASK' => lorem_phrase(),
            'INFO' => lorem_phrase(),
        ]);

        $todo = new Tempcode();
        $todo->attach(do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM', [
            'URL' => placeholder_url(),
            'STATUS' => do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_1'),
            'TASK' => lorem_phrase(),
            'INFO' => lorem_phrase(),
        ]));
        $todo->attach(do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM', [
            'URL' => placeholder_url(),
            'STATUS' => do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_ITEM_STATUS_NA'),
            'TASK' => lorem_phrase(),
            'INFO' => lorem_phrase(),
        ]));

        $custom_task = new Tempcode();
        foreach (placeholder_array() as $k => $v) {
            $custom_task->attach(do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST_CUSTOM_TASK', [
                'TASK_DONE' => 'checklist_todo',
                'RECUR_INTERVAL' => '',
                'ID' => placeholder_numeric_id(),
                'TASK_TITLE' => lorem_phrase(),
                'ADD_DATE' => placeholder_date(),
                'ADD_TIME' => placeholder_date(), // Actually it's something "ago", but this will do
                'RECUR_EVERY' => '',
            ]));
        }

        return lorem_globalise(do_lorem_template('BLOCK_MAIN_STAFF_CHECKLIST', [
            'BLOCK_ID' => lorem_word(),
            'URL' => placeholder_url(),
            'CUSTOM_TASKS' => $custom_task,
            'DATES' => $dates,
            'NO_TIMES' => $no_times,
            'TODO_COUNTS' => $todo,
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__block_main_staff_new_version() : object
    {
        require_lang('version');
        return lorem_globalise(do_lorem_template('BLOCK_MAIN_STAFF_NEW_VERSION', [
            'BLOCK_ID' => lorem_word(),
            'VERSION' => lorem_phrase(),
            'VERSION_TABLE' => placeholder_table(),
            'HAS_UPDATED_ADDONS' => true,
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__block_main_staff_tips() : object
    {
        return lorem_globalise(do_lorem_template('BLOCK_MAIN_STAFF_TIPS', [
            'BLOCK_ID' => lorem_word(),
            'BLOCK_PARAMS' => '',
            'TIP' => lorem_phrase(),
            'TIP_CODE' => lorem_phrase(),
            'LEVEL' => lorem_phrase(),
            'COUNT' => placeholder_number(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__block_main_staff_actions() : object
    {
        if (!addon_installed('actionlog')) {
            return new Tempcode();
        }

        require_lang('actionlog');

        return lorem_globalise(do_lorem_template('BLOCK_MAIN_STAFF_ACTIONS', [
            'BLOCK_ID' => lorem_word(),
            'BLOCK_PARAMS' => '',
            'CONTENT' => lorem_paragraph_html(),
            'FILTER_BY_MEMBER' => false,
            'INCLUDE_DUPLICATES' => true,
            'INCLUDE_USER_ACTIVITIES' => false,
        ]), null, '', true);
    }
}
