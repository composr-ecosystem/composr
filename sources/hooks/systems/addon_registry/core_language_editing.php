<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_language_editing
 */

/**
 * Hook class.
 */
class Hook_addon_registry_core_language_editing
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for (used in generating the TAR filename).
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }

    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return null;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Admin Utilities';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'Translate the software, or just change what it says for stylistic reasons.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_intl',
            'tut_intl_users',
            'tut_intl_content',
            'tut_intl_code_philosophy',
            'tut_intl_maintenance',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/adminzone/style/language/language.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'themes/default/images/icons/menu/adminzone/style/language/language.svg',
            'themes/default/images/icons/menu/adminzone/style/language/language_content.svg',
            'themes/default/images/icons/menu/adminzone/style/language/criticise_language.svg',
            'themes/default/images/icons/menu/adminzone/style/language/index.html',
            'themes/default/images/icons_monochrome/menu/adminzone/style/language/language.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/style/language/language_content.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/style/language/criticise_language.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/style/language/index.html',
            'themes/default/css/translations_editor.css',
            'sources/hooks/systems/addon_registry/core_language_editing.php',
            'sources/hooks/blocks/main_staff_checklist/translations.php',
            'themes/default/templates/TRANSLATE_ACTION.tpl',
            'themes/default/templates/TRANSLATE_LINE.tpl',
            'themes/default/templates/TRANSLATE_LINE_CONTENT.tpl',
            'themes/default/templates/TRANSLATE_SCREEN.tpl',
            'themes/default/templates/TRANSLATE_SCREEN_CONTENT_SCREEN.tpl',
            'themes/default/templates/TRANSLATE_LANGUAGE_CRITICISE_SCREEN.tpl',
            'themes/default/templates/TRANSLATE_LANGUAGE_CRITICISE_FILE.tpl',
            'themes/default/templates/TRANSLATE_LANGUAGE_CRITICISM.tpl',
            'adminzone/pages/modules/admin_lang.php',
            'sources/hooks/systems/page_groupings/language.php',
            'themes/default/images/icons/admin/translate.svg',
            'themes/default/images/icons_monochrome/admin/translate.svg',
            'sources/hooks/systems/config/google_translate_enabled.php',
            'sources/database_multi_lang_conv.php',
            'themes/default/javascript/core_language_editing.js',
            'sources/translation.php',
            'sources/hooks/systems/translation/google_translate.php',
            'sources/hooks/systems/translation/bing_translator.php',
            'sources/hooks/systems/config/bing_translator_enabled.php',
            'sources/hooks/systems/translation/index.html',
            'sources/hooks/systems/symbols/PROVIDE_WITH_TRANSLATION.php',
            'themes/default/images/google_translate.svg',
            'sources/hooks/systems/translation/.htaccess',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/TRANSLATE_LANGUAGE_CRITICISM.tpl' => 'administrative__translate_language_criticise_screen',
            'templates/TRANSLATE_LANGUAGE_CRITICISE_FILE.tpl' => 'administrative__translate_language_criticise_screen',
            'templates/TRANSLATE_LANGUAGE_CRITICISE_SCREEN.tpl' => 'administrative__translate_language_criticise_screen',
            'templates/TRANSLATE_ACTION.tpl' => 'administrative__translate_screen_content_screen',
            'templates/TRANSLATE_LINE_CONTENT.tpl' => 'administrative__translate_screen_content_screen',
            'templates/TRANSLATE_SCREEN_CONTENT_SCREEN.tpl' => 'administrative__translate_screen_content_screen',
            'templates/TRANSLATE_LINE.tpl' => 'administrative__translate_screen',
            'templates/TRANSLATE_SCREEN.tpl' => 'administrative__translate_screen',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__translate_language_criticise_screen() : object
    {
        require_lang('lang');

        $file = new Tempcode();
        $files = '';
        foreach (placeholder_array() as $value) {
            $crit = do_lorem_template('TRANSLATE_LANGUAGE_CRITICISM', [
                'CRITICISM' => lorem_sentence(),
            ]);
            $file->attach($crit);
        }
        $file_result = do_lorem_template('TRANSLATE_LANGUAGE_CRITICISE_FILE', [
            'COMPLAINTS' => $file,
            'FILENAME' => do_lang_tempcode('NA_EM'),
        ]);

        $files .= $file_result->evaluate();

        return lorem_globalise(do_lorem_template('TRANSLATE_LANGUAGE_CRITICISE_SCREEN', [
            'TITLE' => lorem_screen_title(),
            'FILES' => $files,
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__translate_screen_content_screen() : object
    {
        require_lang('lang');

        $lines = new Tempcode();
        foreach (placeholder_array() as $key => $value) {
            $actions = do_lorem_template('TRANSLATE_ACTION', [
                'LANG_FROM' => fallback_lang(),
                'LANG_TO' => fallback_lang(),
                'NAME' => 'trans_' . strval($key),
                'OLD' => $value,
            ]);
            $lines->attach(do_lorem_template('TRANSLATE_LINE_CONTENT', [
                'ID' => strval($key),
                'NAME' => 'trans_' . strval($key),
                'OLD' => $value,
                'CURRENT' => $value,
                'ACTIONS' => $actions,
                'PRIORITY' => lorem_word(),
                'TRANSLATION_CREDIT' => placeholder_image(),
                'LAST' => true,
            ]));
        }

        return lorem_globalise(do_lorem_template('TRANSLATE_SCREEN_CONTENT_SCREEN', [
            'LANG_NICE_NAME' => lorem_word(),
            'LANG_NICE_ORIGINAL_NAME' => lorem_word(),
            'TOO_MANY' => lorem_phrase(),
            'TRANSLATION_CREDIT' => '',
            'TOTAL' => placeholder_number(),
            'LANG' => fallback_lang(),
            'LANG_ORIGINAL_NAME' => fallback_lang(),
            'LINES' => $lines,
            'TITLE' => lorem_screen_title(),
            'URL' => placeholder_url(),
            'MAX' => placeholder_number(),
            'PAGINATION' => placeholder_pagination(),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__translate_screen() : object
    {
        require_lang('lang');

        $lines = '';
        foreach (placeholder_array() as $i => $value) {
            $temp = do_lorem_template('TRANSLATE_LINE', [
                'DESCRIPTION' => lorem_sentence(),
                'NAME' => lorem_word() . strval($i),
                'OLD' => str_replace('\n', "\n", $value),
                'CURRENT' => $value,
                'ACTIONS' => lorem_phrase(),
            ]);
            $lines .= $temp->evaluate();
        }

        return lorem_globalise(do_lorem_template('TRANSLATE_SCREEN', [
            'PAGE' => lorem_phrase(),
            'TRANSLATION_CREDIT' => '',
            'LANG' => fallback_lang(),
            'LINES' => $lines,
            'TITLE' => lorem_screen_title(),
            'URL' => placeholder_url(),
            'PAGINATION' => placeholder_pagination(),
        ]), null, '', true);
    }
}
