<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_primary_layout
 */

/**
 * Hook class.
 */
class Hook_addon_registry_core_primary_layout
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array($runtime = false)
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for.
     *
     * @return float Version number
     */
    public function get_version()
    {
        return cms_version_number();
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category()
    {
        return 'Architecture';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description()
    {
        return 'Core rendering functionality.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials()
    {
        return [
            'tut_themes',
            'tut_designer_themes',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array File permissions to set
     */
    public function get_dependencies()
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon()
    {
        return 'themes/default/images/icons/admin/component.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list()
    {
        return [
            'sources/hooks/systems/addon_registry/core_primary_layout.php',
            'themes/default/templates/MESSAGE.tpl',
            'themes/default/css/helper_panel.css',
            'themes/default/css/messages.css',
            'themes/default/templates/GLOBAL_HTML_WRAP.tpl',
            'themes/default/templates/HEADER_CLASSIC.tpl',
            'themes/default/templates/HEADER_MODERN.tpl',
            'themes/default/templates/HEADER_SIDE.tpl',
            'themes/default/templates/GLOBAL_HELPER_PANEL.tpl',
            'themes/default/templates/CLOSED_SITE.tpl',
            'themes/default/templates/SCREEN_TITLE.tpl',
            'themes/default/templates/MAIL.tpl',
            'themes/default/text/MAIL.txt',
            'themes/default/text/MAIL_SUBJECT.txt',
            'themes/default/templates/BREADCRUMB_SEPARATOR.tpl',
            'themes/default/templates/BREADCRUMB_LONE_WRAP.tpl',
            'themes/default/templates/BREADCRUMB_LINK_WRAP.tpl',
            'themes/default/templates/MAIL_RAW.tpl',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews()
    {
        return [
            'templates/BREADCRUMB_SEPARATOR.tpl' => 'breadcrumb',
            'templates/BREADCRUMB_LONE_WRAP.tpl' => 'breadcrumb',
            'templates/BREADCRUMB_LINK_WRAP.tpl' => 'breadcrumb',
            'templates/CLOSED_SITE.tpl' => 'closed_site',
            'templates/MESSAGE.tpl' => 'message',
            'text/MAIL_SUBJECT.txt' => 'mail_subject',
            'templates/MAIL.tpl' => 'mail',
            'templates/MAIL_RAW.tpl' => 'mail_raw',
            'templates/GLOBAL_HTML_WRAP.tpl' => 'global_html_wrap',
            'templates/GLOBAL_HELPER_PANEL.tpl' => 'global_html_wrap',
            'templates/SCREEN_TITLE.tpl' => 'screen_title',
            'templates/HEADER_CLASSIC.tpl' => 'header_classic',
            'templates/HEADER_MODERN.tpl' => 'header_modern',
            'templates/HEADER_SIDE.tpl' => 'header_side',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__breadcrumb()
    {
        $out = new Tempcode();
        $out->attach(do_lorem_template('BREADCRUMB_LINK_WRAP', ['URL' => placeholder_url(), 'TOOLTIP' => '', 'LABEL' => lorem_phrase()]));
        $out->attach(do_lorem_template('BREADCRUMB_SEPARATOR', []));
        $out->attach(do_lorem_template('BREADCRUMB_LONE_WRAP', ['LABEL' => lorem_phrase()]));
        return [
            lorem_globalise($out, null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__closed_site()
    {
        return [
            lorem_globalise(do_lorem_template('CLOSED_SITE', [
                'CLOSED' => lorem_phrase(),
                'LOGIN_URL' => placeholder_url(),
                'JOIN_URL' => placeholder_url(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__message()
    {
        return [
            lorem_globalise(do_lorem_template('MESSAGE', [
                'TYPE' => placeholder_img_code('icons/status'),
                'MESSAGE' => lorem_phrase(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__mail_subject()
    {
        return [
            lorem_globalise(do_lorem_template('MAIL_SUBJECT', [
                'SUBJECT_LINE' => lorem_word(),
            ], null, false, null, '.txt', 'text'), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__mail()
    {
        return [
            lorem_globalise(do_lorem_template('MAIL', [
                'CSS' => '',
                'LOGOURL' => placeholder_image_url(),
                'LANG' => fallback_lang(),
                'TITLE' => lorem_phrase(),
                'CONTENT' => lorem_paragraph(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__mail_raw()
    {
        return [
            lorem_globalise(do_lorem_template('MAIL_RAW', [
                'CSS' => '',
                'LOGOURL' => placeholder_image_url(),
                'LOGOMAP' => '',
                'LANG' => fallback_lang(),
                'TITLE' => lorem_phrase(),
                'CONTENT' => lorem_paragraph(),
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__global_html_wrap()
    {
        $out = do_lorem_template('GLOBAL_HTML_WRAP', [
            'MIDDLE' => lorem_paragraph_html(),
        ]);

        return [
            $out
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__screen_title()
    {
        $awards = null;
        if (addon_installed('awards')) {
            require_lang('awards');
            $awards = [
                [
                    'AWARD_TYPE' => lorem_title(),
                    'AWARD_TIMESTAMP' => placeholder_date(),
                ]
            ];
        }
        return [
            lorem_globalise(do_lorem_template('SCREEN_TITLE', [
                'TITLE' => lorem_phrase(),
                'AWARDS' => $awards,
            ]), null, '', true)
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__header_classic()
    {
        $out = do_lorem_template('HEADER_CLASSIC', []);

        return [
            $out
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__header_modern()
    {
        $out = do_lorem_template('HEADER_MODERN', []);

        return [
            $out
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return array Array of previews, each is Tempcode. Normally we have just one preview, but occasionally it is good to test templates are flexible (e.g. if they use IF_EMPTY, we can test with and without blank data).
     */
    public function tpl_preview__header_side()
    {
        $out = do_lorem_template('HEADER_SIDE', []);

        return [
            $out
        ];
    }
}
