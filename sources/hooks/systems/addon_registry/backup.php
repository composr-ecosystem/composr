<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    backup
 */

/**
 * Hook class.
 */
class Hook_addon_registry_backup
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        $chmod = [];
        if ($runtime) {
            $chmod = array_merge(
                $chmod,
                [
                    'data_custom/modules/admin_backup/*',
                ]
            );
        }
        $chmod = array_merge(
            $chmod,
            [
                'data_custom/modules/admin_backup',
            ]
        );
        return $chmod;
    }

    /**
     * Get the version of Composr this addon is for (used in generating the TAR filename).
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }

    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return null;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Admin Utilities';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'Perform incremental or full backups of files and the database. Supports scheduling.';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_backup',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/menu/adminzone/tools/bulk_content_actions/backups.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'adminzone/download_backup_file.php',
            'adminzone/pages/modules/admin_backup.php',
            'data/modules/admin_backup/.htaccess',
            'data/modules/admin_backup/index.html',
            'data/modules/admin_backup/restore.php.pre',
            'data_custom/modules/admin_backup/.htaccess',
            'data_custom/modules/admin_backup/index.html',
            'lang/EN/backups.ini',
            'sources/backup.php',
            'sources/hooks/blocks/main_staff_checklist/backup.php',
            'sources/hooks/systems/actionlog/backups.php',
            'sources/hooks/systems/addon_registry/backup.php',
            'sources/hooks/systems/config/backup_overwrite.php',
            'sources/hooks/systems/config/backup_server_hostname.php',
            'sources/hooks/systems/config/backup_server_password.php',
            'sources/hooks/systems/config/backup_server_path.php',
            'sources/hooks/systems/config/backup_server_port.php',
            'sources/hooks/systems/config/backup_server_user.php',
            'sources/hooks/systems/config/backup_time.php',
            'sources/hooks/systems/cron/backups.php',
            'sources/hooks/systems/page_groupings/backup.php',
            'sources/hooks/systems/snippets/backup_size.php',
            'sources/hooks/systems/tasks/make_backup.php',
            'themes/default/images/icons/menu/adminzone/tools/bulk_content_actions/backups.svg',
            'themes/default/images/icons_monochrome/menu/adminzone/tools/bulk_content_actions/backups.svg',
            'themes/default/javascript/backup.js',
            'themes/default/templates/BACKUP_LAUNCH_SCREEN.tpl',
            'themes/default/templates/RESTORE_HTML_WRAP.tpl',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/RESTORE_HTML_WRAP.tpl' => 'administrative__restore_wrap',
            'templates/BACKUP_LAUNCH_SCREEN.tpl' => 'administrative__backup_launch_screen',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__backup_launch_screen() : object
    {
        return lorem_globalise(do_lorem_template('BACKUP_LAUNCH_SCREEN', [
            'TITLE' => lorem_screen_title(),
            'TEXT' => lorem_sentence(),
            'RESULTS' => lorem_phrase(),
            'FORM' => placeholder_form_with_field('submit_button'),
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__restore_wrap() : object
    {
        // This preview inevitably looks ugly because the install CSS can't be shown (its loaded via self-reference to a non-existent file)

        return do_lorem_template('RESTORE_HTML_WRAP', [
            'MESSAGE' => lorem_sentence_html(),
            'CSS_NOCACHE' => '',
            'ERROR' => false,
        ]);
    }
}
