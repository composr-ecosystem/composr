<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    installer
 */

/**
 * Hook class.
 */
class Hook_addon_registry_installer
{
    /**
     * Get a list of file permissions to set.
     *
     * @param  boolean $runtime Whether to include wildcards represented runtime-created chmoddable files
     * @return array File permissions to set
     */
    public function get_chmod_array(bool $runtime = false) : array
    {
        return [];
    }

    /**
     * Get the version of Composr this addon is for (used in generating the TAR filename).
     *
     * @return float Version number
     */
    public function get_version() : float
    {
        return cms_version_number();
    }

    /**
     * Get the minimum required version of the website software needed to use this addon.
     *
     * @return float Minimum required website software version
     */
    public function get_min_cms_version() : float
    {
        return 11.0;
    }

    /**
     * Get the maximum compatible version of the website software to use this addon.
     *
     * @return ?float Maximum compatible website software version (null: no maximum version currently)
     */
    public function get_max_cms_version() : ?float
    {
        return null;
    }

    /**
     * Get the addon category.
     *
     * @return string The category
     */
    public function get_category() : string
    {
        return 'Architecture';
    }

    /**
     * Get the description of the addon.
     *
     * @return string Description of the addon
     */
    public function get_description() : string
    {
        return 'The installer files (can be removed immediately after installing; in fact Composr makes you remove install.php manually).';
    }

    /**
     * Get a list of tutorials that apply to this addon.
     *
     * @return array List of tutorials
     */
    public function get_applicable_tutorials() : array
    {
        return [
            'tut_install',
            'tut_install_permissions',
            'tut_install_linux',
            'tut_install_windows_desktop',
            'tut_install_windows_server',
            'tut_webhosting',
        ];
    }

    /**
     * Get a mapping of dependency types.
     *
     * @return array A structure specifying dependency information
     */
    public function get_dependencies() : array
    {
        return [
            'requires' => [],
            'recommends' => [],
            'conflicts_with' => [],
        ];
    }

    /**
     * Explicitly say which icon should be used.
     *
     * @return URLPATH Icon
     */
    public function get_default_icon() : string
    {
        return 'themes/default/images/icons/admin/component.svg';
    }

    /**
     * Get a list of files that belong to this addon.
     *
     * @return array List of files
     */
    public function get_file_list() : array
    {
        return [
            'sources/hooks/systems/addon_registry/installer.php',
            'themes/default/templates/INSTALLER_FORUM_CHOICE.tpl',
            'themes/default/templates/INSTALLER_FORUM_CHOICE_VERSION.tpl',
            'themes/default/templates/INSTALLER_STEP_4_SECTION.tpl',
            'themes/default/templates/INSTALLER_STEP_4_SECTION_HIDE.tpl',
            'themes/default/templates/INSTALLER_STEP_4_SECTION_OPTION.tpl',
            'themes/default/templates/INSTALLER_HTML_WRAP.tpl',
            'themes/default/templates/INSTALLER_WARNING_LONG.tpl',
            'themes/default/templates/INSTALLER_DONE_SOMETHING.tpl',
            'themes/default/templates/INSTALLER_INPUT_LINE.tpl',
            'themes/default/templates/INSTALLER_INPUT_PASSWORD.tpl',
            'themes/default/templates/INSTALLER_INPUT_TICK.tpl',
            'themes/default/templates/INSTALLER_STEP_1.tpl',
            'themes/default/templates/INSTALLER_STEP_2.tpl',
            'themes/default/templates/INSTALLER_STEP_3.tpl',
            'themes/default/templates/INSTALLER_STEP_4.tpl',
            'themes/default/templates/INSTALLER_STEP_LOG.tpl',
            'themes/default/templates/INSTALLER_STEP_10.tpl',
            'themes/default/templates/INSTALLER_WARNING.tpl',
            'themes/default/templates/INSTALLER_NOTICE.tpl',
        ];
    }

    /**
     * Get mapping between template names and the method of this class that can render a preview of them.
     *
     * @return array The mapping
     */
    public function tpl_previews() : array
    {
        return [
            'templates/INSTALLER_HTML_WRAP.tpl' => 'administrative__installer_wrap',
            'templates/INSTALLER_WARNING.tpl' => 'administrative__installer_step_1',
            'templates/INSTALLER_WARNING_LONG.tpl' => 'administrative__installer_step_1',
            'templates/INSTALLER_NOTICE.tpl' => 'administrative__installer_step_1',
            'templates/INSTALLER_STEP_1.tpl' => 'administrative__installer_step_1',
            'templates/INSTALLER_STEP_2.tpl' => 'administrative__installer_step_2',
            'templates/INSTALLER_FORUM_CHOICE_VERSION.tpl' => 'administrative__installer_step_3',
            'templates/INSTALLER_FORUM_CHOICE.tpl' => 'administrative__installer_step_3',
            'templates/INSTALLER_STEP_3.tpl' => 'administrative__installer_step_3',
            'templates/INSTALLER_STEP_4_SECTION.tpl' => 'administrative__installer_step_4',
            'templates/INSTALLER_STEP_4_SECTION_HIDE.tpl' => 'administrative__installer_step_4',
            'templates/INSTALLER_STEP_4.tpl' => 'administrative__installer_step_4',
            'templates/INSTALLER_STEP_LOG.tpl' => 'administrative__installer_step_log',
            'templates/INSTALLER_DONE_SOMETHING.tpl' => 'administrative__installer_step_log',
            'templates/INSTALLER_STEP_10.tpl' => 'administrative__installer_step_10',
            'templates/INSTALLER_INPUT_PASSWORD.tpl' => 'administrative__installer_step_4',
            'templates/INSTALLER_STEP_4_SECTION_OPTION.tpl' => 'administrative__installer_step_4',
            'templates/INSTALLER_INPUT_LINE.tpl' => 'administrative__installer_step_4',
            'templates/INSTALLER_INPUT_TICK.tpl' => 'administrative__installer_step_4',
        ];
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__installer_wrap() : object
    {
        require_css('install');
        require_lang('installer');
        require_lang('version');

        return do_lorem_template('INSTALLER_HTML_WRAP', [
            'CSS_NOCACHE' => '.nocss{}',
            'DEFAULT_FORUM' => lorem_phrase(),
            'PASSWORD_PROMPT' => lorem_phrase(),
            'RESOURCE_BASE_URL' => get_base_url(),
            'STEP' => '1',
            'CONTENT' => lorem_paragraph_html(),
            'VERSION' => lorem_phrase(),
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__installer_step_1() : object
    {
        require_css('install');
        require_css('forms');
        require_lang('installer');
        require_lang('version');

        $warning = do_lorem_template('INSTALLER_WARNING_LONG', [
            'FILES' => placeholder_array(),
            'MESSAGE' => lorem_sentence_html(),
        ]);
        $warning->attach(do_lorem_template('INSTALLER_WARNING', [
            'MESSAGE' => lorem_sentence_html(),
        ]));
        $warning->attach(do_lorem_template('INSTALLER_NOTICE', [
            'MESSAGE' => lorem_sentence_html(),
        ]));
        $languages = new Tempcode();
        foreach (placeholder_array() as $lang) {
            $entry = do_lorem_template('FORM_SCREEN_INPUT_LIST_ENTRY', [
                'SELECTED' => false,
                'DISABLED' => false,
                'NAME' => $lang,
                'CLASS' => '',
                'TEXT' => $lang,
            ]);
            $languages->attach($entry);
        }
        $content = do_lorem_template('INSTALLER_STEP_1', [
            'URL' => placeholder_url(),
            'WARNINGS' => $warning,
            'HIDDEN' => '',
            'LANGUAGES' => $languages,
        ]);
        return do_lorem_template('INSTALLER_HTML_WRAP', [
            'CSS_NOCACHE' => '.nocss{}',
            'DEFAULT_FORUM' => lorem_phrase(),
            'PASSWORD_PROMPT' => lorem_phrase(),
            'RESOURCE_BASE_URL' => get_base_url(),
            'STEP' => '1',
            'CONTENT' => $content,
            'VERSION' => lorem_phrase(),
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__installer_step_2() : object
    {
        require_css('install');
        require_css('forms');
        require_lang('installer');
        require_lang('version');

        $content = do_lorem_template('INSTALLER_STEP_2', [
            'URL' => placeholder_url(),
            'HIDDEN' => '',
            'LICENCE' => lorem_chunk(),
        ]);
        return do_lorem_template('INSTALLER_HTML_WRAP', [
            'CSS_NOCACHE' => '.nocss{}',
            'DEFAULT_FORUM' => lorem_phrase(),
            'PASSWORD_PROMPT' => lorem_phrase(),
            'RESOURCE_BASE_URL' => get_base_url(),
            'STEP' => '1',
            'CONTENT' => $content,
            'VERSION' => lorem_phrase(),
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__installer_step_3() : object
    {
        require_css('forms');
        require_css('install');
        require_lang('installer');
        require_lang('version');

        $forum_array = [
            [
                '1' => 'forum1',
                '2' => 'forum2',
            ]
        ];
        $tforums = new Tempcode();
        $default_version = new Tempcode();
        $simple_forums = new Tempcode();
        foreach ($forum_array as $key => $forums) {
            $versions = new Tempcode();
            foreach ($forums as $_key => $forum) {
                $version = do_lang('VERSION_NUM', strval($_key));
                $versions->attach(do_lorem_template('INSTALLER_FORUM_CHOICE_VERSION', [
                    'IS_DEFAULT' => false,
                    'CLASS' => $forum,
                    'NAME' => $forum,
                    'VERSION' => $version,
                ]));
                $simple_forums->attach(do_lorem_template('INSTALLER_FORUM_CHOICE_VERSION', [
                    'IS_DEFAULT' => false,
                    'CLASS' => $forum,
                    'NAME' => $forum,
                    'VERSION' => $version,
                ]));
            }
            $tforums->attach(do_lorem_template('INSTALLER_FORUM_CHOICE', [
                'CLASS' => 'f' . strval($key),
                'REC' => '',
                'TEXT' => lorem_phrase(),
                'VERSIONS' => $versions,
                'EXTRA' => '',
            ]));
        }

        // Database chooser
        $tdatabase = new Tempcode();
        foreach (placeholder_array() as $dbname) {
            $entry = do_lorem_template('FORM_SCREEN_INPUT_LIST_ENTRY', [
                'SELECTED' => false,
                'DISABLED' => false,
                'NAME' => $dbname,
                'CLASS' => '',
                'TEXT' => $dbname,
            ]);
            $tdatabase->attach($entry);
        }

        $step3 = do_lorem_template('INSTALLER_STEP_3', [
            'URL' => placeholder_url(),
            'HIDDEN' => '',
            'SIMPLE_FORUMS' => $simple_forums,
            'FORUM_PATH_DEFAULT' => get_file_base() . '/forums',
            'FORUMS' => $tforums,
            'DATABASES' => $tdatabase,
            'VERSION' => $default_version,
            'IS_QUICK' => false,
        ]);

        return do_lorem_template('INSTALLER_HTML_WRAP', [
            'CSS_NOCACHE' => '.nocss{}',
            'DEFAULT_FORUM' => lorem_phrase(),
            'PASSWORD_PROMPT' => lorem_phrase(),
            'RESOURCE_BASE_URL' => get_base_url(),
            'STEP' => '1',
            'CONTENT' => $step3,
            'VERSION' => lorem_phrase(),
        ]);
    }

    /**
     * Make the UI for an installer tick (check) option.
     *
     * @param  string $nice_name The human readable name for the option
     * @param  string $description A description of the option
     * @param  ID_TEXT $name The name of the option
     * @param  BINARY $value The default/current value of the option
     * @return Tempcode The list of usergroups
     */
    public function make_tick(string $nice_name, string $description, string $name, int $value) : object
    {
        $input = do_lorem_template('INSTALLER_INPUT_TICK', [
            'CHECKED' => $value == 1,
            'NAME' => $name,
        ]);
        return do_lorem_template('INSTALLER_STEP_4_SECTION_OPTION', [
            '_GUID' => '0723f86908f66da7f67ebc4cd07bff2e',
            'REQUIRED' => false,
            'NAME' => $name,
            'INPUT' => $input,
            'NICE_NAME' => $nice_name,
            'DESCRIPTION' => $description,
        ]);
    }

    /**
     * Make the UI for an installer textual option.
     *
     * @param  string $nice_name The human readable name for the option
     * @param  string $description A description of the option
     * @param  ID_TEXT $name The name of the option
     * @param  string $value The default/current value of the option
     * @param  boolean $hidden Whether the options value should be kept starred out (e.g. it is a password)
     * @param  boolean $required Whether the option is required
     * @return Tempcode The option
     */
    public function make_option(string $nice_name, string $description, string $name, string $value, bool $hidden = false, bool $required = false) : object
    {
        if ($hidden) {
            $input = do_lorem_template('INSTALLER_INPUT_PASSWORD', [
                'REQUIRED' => ($required) ? '-required' : '',
                'NAME' => $name,
                'VALUE' => $value,
            ]);
        } else {
            $input = do_lorem_template('INSTALLER_INPUT_LINE', [
                'REQUIRED' => ($required) ? '-required' : '',
                'NAME' => $name,
                'VALUE' => $value,
            ]);
        }

        return do_lorem_template('INSTALLER_STEP_4_SECTION_OPTION', [
            'REQUIRED' => $required,
            'NAME' => $name,
            'INPUT' => $input,
            'NICE_NAME' => $nice_name,
            'DESCRIPTION' => $description,
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__installer_step_4() : object
    {
        require_css('forms');
        require_css('install');
        require_lang('installer');
        require_lang('version');

        $options = new Tempcode();
        $options->attach($this->make_option(lorem_phrase(), '', 'ftp_username', '', false, true));
        $options->attach($this->make_option(lorem_phrase(), '', 'ftp_password', '', true));

        $options->attach($this->make_tick(lorem_word(), lorem_phrase(), 'tick', 1));

        $section = do_lorem_template('INSTALLER_STEP_4_SECTION', [
            'HIDDEN' => '',
            'TITLE' => lorem_phrase(),
            'TEXT' => lorem_sentence_html(),
            'OPTIONS' => $options,
        ]);

        $section->attach(do_lorem_template('INSTALLER_STEP_4_SECTION_HIDE', [
            'TITLE' => lorem_phrase(),
            'CONTENT' => lorem_paragraph_html(),
        ]));

        $content = do_lorem_template('INSTALLER_STEP_4', [
            'URL' => placeholder_url(),
            'MESSAGE' => lorem_phrase(),
            'LANG' => fallback_lang(),
            'DB_TYPE' => lorem_phrase(),
            'FORUM_TYPE' => lorem_phrase(),
            'BOARD_PATH' => lorem_phrase(),
            'SECTIONS' => $section,
            'MAX' => '1000',
            'HIDDEN' => '',
        ]);
        return do_lorem_template('INSTALLER_HTML_WRAP', [
            'CSS_NOCACHE' => '.nocss{}',
            'DEFAULT_FORUM' => lorem_phrase(),
            'PASSWORD_PROMPT' => lorem_phrase(),
            'RESOURCE_BASE_URL' => get_base_url(),
            'STEP' => '1',
            'CONTENT' => $content,
            'VERSION' => lorem_phrase(),
        ]);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__installer_step_log() : object
    {
        $message = do_lorem_template('INSTALLER_DONE_SOMETHING', [
            'SOMETHING' => lorem_sentence(),
        ]);

        require_css('install');
        require_lang('installer');

        return lorem_globalise(do_lorem_template('INSTALLER_STEP_LOG', [
            'PREVIOUS_STEP' => placeholder_number(),
            'CURRENT_STEP' => placeholder_number(),
            'URL' => placeholder_url(),
            'LOG' => $message,
            'HIDDEN' => '',
        ]), null, '', true);
    }

    /**
     * Get a preview(s) of a (group of) template(s), as a full standalone piece of HTML in Tempcode format.
     * Uses sources/lorem.php functions to place appropriate stock-text. Should not hard-code things, as the code is intended to be declarative.
     * Assumptions: You can assume all Lang/CSS/JavaScript files in this addon have been pre-required.
     *
     * @return Tempcode Preview
     */
    public function tpl_preview__administrative__installer_step_10() : object
    {
        require_css('install');
        require_lang('installer');
        require_lang('version');

        $message = do_lorem_template('INSTALLER_DONE_SOMETHING', [
            'SOMETHING' => lorem_sentence(),
        ]);

        return lorem_globalise(do_lorem_template('INSTALLER_STEP_10', [
            'PREVIOUS_STEP' => placeholder_number(),
            'CURRENT_STEP' => placeholder_number(),
            'FINAL' => lorem_phrase(),
            'URL' => placeholder_url(),
            'LOG' => $message,
            'HIDDEN' => '',
        ]), null, '', true);
    }
}
