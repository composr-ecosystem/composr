<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_block_ui_renderers_core
{
    /**
     * See if a particular block parameter's UI input can be handled as a hidden field.
     *
     * @param  ID_TEXT $block The block
     * @param  ID_TEXT $parameter The parameter of the block
     * @param  boolean $has_default Whether there is a default value for the field, due to this being an edit
     * @param  string $default Default value for field
     * @return ?Tempcode Rendered field (null: not handled)
     */
    public function render_block_ui_parameter_hidden(string $block, string $parameter, bool $has_default, string $default) : ?object
    {
        if (!addon_installed('awards')) {
            return null;
        }

        // Content block...

        if ($block . ':' . $parameter == 'main_content:param') { // Type choice hidden?
            $content_type = get_param_string('default_param', '');
            if ($content_type != '') {
                require_code('content');
                $cma_ob = get_content_object($content_type);
                if ($cma_ob !== null) {
                    return form_input_hidden('param', $content_type);
                }
            }
        }

        return null;
    }

    /**
     * See if a particular block parameter's UI input can be rendered by this.
     *
     * @param  ID_TEXT $block The block
     * @param  ID_TEXT $parameter The parameter of the block
     * @param  boolean $has_default Whether there is a default value for the field, due to this being an edit
     * @param  string $default Default value for field
     * @param  string $description Field description
     * @return ?Tempcode Rendered field (null: not handled)
     */
    public function render_block_ui_parameter(string $block, string $parameter, bool $has_default, string $default, string $description) : ?object
    {
        if ($block . ':' . $parameter == 'main_content:id') { // Content block: Content choice
            $content_type = get_param_string('default_param', '');
            if ($content_type != '') {
                require_code('content');
                $cma_ob = get_content_object($content_type);
                if ($cma_ob !== null) {
                    $tree_list_hook = $cma_ob->create_selection_tree_list();
                    if ($tree_list_hook !== null) {
                        $field = form_input_tree_list(do_lang_tempcode('CONTENT'), '', 'id', null, $tree_list_hook, [], false, $has_default ? $default : null);
                    } else {
                        $list = $cma_ob->create_selection_list(($default == '') ? null : $default);
                        if ($list->is_empty()) {
                            return null;
                        }
                        $field = form_input_list(do_lang_tempcode('CONTENT'), '', 'id', $list, null, false, false);
                    }
                    return $field;
                }
            }
        } elseif ($parameter == 'font') { // Custom graphics block: Font choice
            $list = new Tempcode();
            require_code('fonts');
            $fonts = find_all_fonts();
            foreach ($fonts as $font => $font_label) {
                $list->attach(form_input_list_entry($font, $font == $default, $font_label));
            }
            return form_input_list(do_lang_tempcode('FONT'), escape_html($description), $parameter, $list, null, false, false);
        } elseif ((($default == '') || (is_numeric(str_replace(',', '', $default)))) && ((($parameter == 'forum') || (($parameter == 'param') && (in_array($block, ['main_forum_topics'])))) && (get_forum_type() == 'cns'))) { // Forum blocks: Conversr forum list
            require_code('cns_forums');
            require_code('cns_forums2');
            if (!addon_installed('cns_forum')) {
                warn_exit(do_lang_tempcode('NO_FORUM_INSTALLED'));
            }
            $list = create_selection_list_forum_tree(null, null, array_map('intval', explode(',', $default)));
            return form_input_multi_list(do_lang_tempcode('FORUM'), escape_html($description), $parameter, $list);
        } elseif ($block . ':' . $parameter == 'menu:type') { // Menu blocks: Type
            $matches = [];
            $dh = opendir(get_file_base() . '/themes/default/templates/');
            $options = [];
            while (($file = readdir($dh)) !== false) {
                if (preg_match('^MENU_([a-z]+)\.tpl$^', $file, $matches) != 0) {
                    $options[] = $matches[1];
                }
            }
            closedir($dh);
            $dh = opendir(get_custom_file_base() . '/themes/default/templates_custom/');
            while (($file = readdir($dh)) !== false) {
                if ((preg_match('^MENU_([a-z]+)\.tpl$^', $file, $matches) != 0) && (!file_exists(get_file_base() . '/themes/default/templates/' . $file))) {
                    $options[] = $matches[1];
                }
            }
            closedir($dh);
            sort($options);
            $list = new Tempcode();
            foreach ($options as $option) {
                $list->attach(form_input_list_entry($option, $has_default && $option == $default));
            }
            return form_input_list(do_lang_tempcode('TYPE'), escape_html($description), $parameter, $list, null, false, false);
        } elseif ($block . ':' . $parameter == 'menu:param') { // Menu blocks: Menu
            $list = new Tempcode();
            $rows = $GLOBALS['SITE_DB']->query_select('menu_items', ['DISTINCT i_menu'], [], 'ORDER BY i_menu');
            foreach ($rows as $row) {
                $list->attach(form_input_list_entry($row['i_menu'], $has_default && $row['i_menu'] == $default));
            }
            return form_input_combo(do_lang_tempcode('MENU'), escape_html($description), $parameter, $default, $list, null, false);
        }

        return null;
    }
}
