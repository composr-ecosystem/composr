<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    cns_warnings
 */

/**
 * Hook class.
 */
class Hook_cns_warnings_change_group
{
    /**
     * Get details for this hook.
     *
     * @return ?array The details (null: hook disabled)
     */
    public function get_details() : ?array
    {
        if (!addon_installed('cns_warnings')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        return [
            'order' => 5,
        ];
    }

    /**
     * Generate punitive action text from a punitive action database row.
     *
     * @param  array $row The database row
     * @return string The punitive action text
     */
    public function generate_text(array $row) : string
    {
        if (!addon_installed('cns_warnings')) {
            return '';
        }

        if (get_forum_type() != 'cns') {
            return '';
        }

        require_lang('cns_warnings');

        switch ($row['p_action']) {
            case '_PUNITIVE_CHANGE_USERGROUP':
                require_code('cns_groups');
                $from = cns_get_group_name(intval($row['p_param_a']), true);
                $to = cns_get_group_name(intval($row['p_param_b']), true);
                return do_lang('_PUNITIVE_CHANGE_USERGROUP', $from, $to);

            default:
                return '';
        }
    }

    /**
     * Render form fields for the warnings screen.
     *
     * @param  Tempcode &$add_text Tempcode to be included on the intro paragraph of the warnings screen (passed by reference)
     * @param  Tempcode &$fields The fields to be rendered (passed by reference)
     * @param  Tempcode &$hidden The hidden fields to be included (passed by reference)
     * @param  boolean $new Whether it is a new warning/punishment record
     * @param  LONG_TEXT $explanation The explanation for the warning/punishment record
     * @param  BINARY $is_warning Whether to make this a formal warning
     * @param  MEMBER $member_id The member the warning is for
     * @param  BINARY $spam_mode Whether this is a spam warning
     * @param  ?AUTO_LINK $post_id The ID of the forum post of which we clicked warn (null: we are not warning on a forum post)
     * @param  ?SHORT_TEXT $ip_address The IP address of the poster (null: we are not warning on a forum post)
     */
    public function get_form_fields(&$add_text, &$fields, &$hidden, bool $new, string $explanation, int $is_warning, int $member_id, int $spam_mode, ?int $post_id, ?string $ip_address)
    {
        if (!addon_installed('cns_warnings')) {
            return;
        }

        if (get_forum_type() != 'cns') {
            return '';
        }

        if (!$new) {
            return;
        }

        if ((has_privilege(get_member(), 'member_maintenance')) && (has_privilege(get_member(), 'assume_any_member'))) {
            $rows = $GLOBALS['FORUM_DB']->query_select('f_groups', ['id', 'g_name'], ['g_is_private_club' => 0]);
            $groups = new Tempcode();
            $groups->attach(form_input_list_entry('', false, do_lang_tempcode('NA_EM')));
            $current_group_id = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_primary_group');
            foreach ($rows as $group) {
                if (($group['id'] != db_get_first_id()) && ($group['id'] != $current_group_id)) {
                    $groups->attach(form_input_list_entry(strval($group['id']), false, get_translated_text($group['g_name'], $GLOBALS['FORUM_DB'])));
                }
            }
            $fields->attach(form_input_list(do_lang_tempcode('CHANGE_USERGROUP_TO'), do_lang_tempcode('DESCRIPTION_CHANGE_USERGROUP_TO'), 'changed_usergroup_to', $groups, null, false, false));
        }
    }

    /**
     * Actualise punitive actions.
     * Note that this assumes action was applied through the warnings form, and that post parameters still exist.
     *
     * @param array &$punitive_messages Punitive action text to potentially be included in the PT automatically (passed by reference)
     * @param AUTO_LINK $warning_id The ID of the warning that was created for this punitive action
     * @param MEMBER $member_id The member this warning is being applied to
     * @param SHORT_TEXT $username The username of the member this warning is being applied to
     * @param SHORT_TEXT $explanation The defined explanation for this warning
     * @param LONG_TEXT &$message The message to be sent as a PT (passed by reference; you should generally use $punitive_text instead if you want to add PT text)
     */
    public function actualise_punitive_action(array &$punitive_messages, int $warning_id, int $member_id, string $username, string $explanation, string &$message)
    {
        if (!addon_installed('cns_warnings')) {
            return;
        }

        if (get_forum_type() != 'cns') {
            return '';
        }

        // Change group if we have the privilege and we requested to change it
        if ((has_privilege(get_member(), 'member_maintenance')) && (has_privilege(get_member(), 'assume_any_member'))) {
            $changed_usergroup_to = post_param_integer('changed_usergroup_to', null);

            if ($changed_usergroup_to !== null) {
                $changed_usergroup_from = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_primary_group');
                $GLOBALS['FORUM_DB']->query_update('f_members', ['m_primary_group' => $changed_usergroup_to], ['id' => $member_id], '', 1);
                cns_mod_log_it('GROUP_CHANGE', strval($member_id), strval($changed_usergroup_to));

                $GLOBALS['FORUM_DB']->query_insert('f_warnings_punitive', [
                    'p_warning_id' => $warning_id,
                    'p_member_id' => $member_id,
                    'p_hook' => 'change_group',
                    'p_action' => '_PUNITIVE_CHANGE_USERGROUP',
                    'p_param_a' => strval($changed_usergroup_from),
                    'p_param_b' => strval($changed_usergroup_to),
                    'p_reversed' => 0,
                ]);

                $_changed_usergroup_to = cns_get_group_name($changed_usergroup_to, true);
                $punitive_messages[] = do_lang('PUNITIVE_CHANGE_USERGROUP', $_changed_usergroup_to, null, null, null, false);
            }
        }
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @param  array $punitive_action The database row for the punitive action being undone
     * @param  array $warning The database row for the warning associated with the punitive action being undone
     */
    public function undo_punitive_action(array $punitive_action, array $warning)
    {
        $error = new Tempcode();
        if (!addon_installed__messaged('cns_warnings', $error)) {
            warn_exit($error);
        }

        if (get_forum_type() != 'cns') {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }

        $id = intval($punitive_action['id']);
        $member_id = intval($punitive_action['p_member_id']);
        $changed_usergroup_from = intval($punitive_action['p_param_a']);

        // Confirm that the group we want to switch back to actually exists
        require_code('cns_groups');
        $test = cns_get_group_name($changed_usergroup_from);
        if (($test === null) || ($test == '')) {
            warn_exit(do_lang_tempcode('_MISSING_RESOURCE', escape_html($changed_usergroup_from), 'group'));
        }

        $GLOBALS['FORUM_DB']->query_update('f_members', ['m_primary_group' => $changed_usergroup_from], ['id' => $member_id], '', 1);

        log_it('UNDO_GROUP_CHANGE', strval($warning['id']), $GLOBALS['FORUM_DRIVER']->get_username($member_id));
    }
}
