<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    cns_warnings
 */

/**
 * Hook class.
 */
class Hook_cns_warnings_silencing
{
    /**
     * Get details for this hook.
     *
     * @return ?array The details (null: hook disabled)
     */
    public function get_details() : ?array
    {
        if (!addon_installed('cns_warnings')) {
            return null;
        }

        return [
            'order' => 6,
        ];
    }

    /**
     * Generate punitive action text from a punitive action database row.
     *
     * @param  array $row The database row
     * @return string The punitive action text
     */
    public function generate_text(array $row) : string
    {
        if (!addon_installed('cns_warnings')) {
            return '';
        }

        require_lang('cns_warnings');

        switch ($row['p_action']) {
            case '_PUNITIVE_SILENCE_FROM_FORUM':
                $silence_from_forum_title = '#' . strval($row['p_param_a']);
                if (get_forum_type() == 'cns') {
                    $silence_from_forum_title = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'f_name', ['id' => intval($row['p_param_a'])]);
                    if ($silence_from_forum_title === null) {
                        $silence_from_forum_title = '#' . strval($row['p_param_a']);
                    }
                }
                $silence_until = get_timezoned_date_time(intval($row['p_param_b']));
                return do_lang('_PUNITIVE_SILENCE_FROM_FORUM', $silence_from_forum_title, ' ' . do_lang('PUNITIVE_SILENCED_UNTIL', $silence_until));

            case '_PUNITIVE_SILENCE_FROM_TOPIC':
                $silence_from_topic_title = '#' . strval($row['p_param_a']);
                $silence_until = get_timezoned_date_time(intval($row['p_param_b']));
                if (get_forum_type() == 'cns') {
                    $silence_from_topic_title = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_cache_first_title', ['id' => $row['p_param_a']]);
                    if ($silence_from_topic_title === null) {
                        $silence_from_topic_title = '#' . strval($row['p_param_a']);
                        $ret = do_lang('_PUNITIVE_SILENCE_FROM_TOPIC', $silence_from_topic_title, ' ' . do_lang('PUNITIVE_SILENCED_UNTIL', $silence_until));
                    } else {
                        $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $row['p_param_a']]);
                        if ($forum_id !== null) {
                            $forum_name = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'f_name', ['id' => $forum_id]);
                            $ret = do_lang('_PUNITIVE_SILENCE_FROM_TOPIC_FORUM', $silence_from_topic_title, $forum_name, [' ' . do_lang('PUNITIVE_SILENCED_UNTIL', $silence_until)]);
                        }
                    }
                } else {
                    $silence_from_topic_title = '#' . strval($row['p_param_a']);
                    $ret = do_lang('_PUNITIVE_SILENCE_FROM_TOPIC', $silence_from_topic_title, ' ' . do_lang('PUNITIVE_SILENCED_UNTIL', $silence_until));
                }
                return $ret;

            default:
                return '';
        }
    }

    /**
     * Render form fields for the warnings screen.
     *
     * @param  Tempcode $add_text Tempcode to be included on the intro paragraph of the warnings screen (passed by reference)
     * @param  Tempcode $fields The fields to be rendered (passed by reference)
     * @param  Tempcode $hidden The hidden fields to be included (passed by reference)
     * @param  boolean $new Whether it is a new warning/punishment record
     * @param  LONG_TEXT $explanation The explanation for the warning/punishment record
     * @param  BINARY $is_warning Whether to make this a formal warning
     * @param  MEMBER $member_id The member the warning is for
     * @param  BINARY $spam_mode Whether this is a spam warning
     * @param  ?AUTO_LINK $post_id The ID of the forum post of which we clicked warn (null: we are not warning on a forum post)
     * @param  ?SHORT_TEXT $ip_address The IP address of the poster (null: we are not warning on a forum post)
     */
    public function get_form_fields(object &$add_text, object &$fields, object &$hidden, bool $new, string $explanation, int $is_warning, int $member_id, int $spam_mode, ?int $post_id, ?string $ip_address)
    {
        if (!addon_installed('cns_warnings')) {
            return;
        }

        if (!$new) {
            return;
        }

        if (($post_id !== null) && ($spam_mode == 0)) {
            $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $post_id]);
            if ($topic_id !== null) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
                $hidden->attach(form_input_hidden('topic_id', strval($topic_id)));
                $hidden->attach(form_input_hidden('forum_id', strval($forum_id)));
                $silence_topic_time = null;//time() + 60 * 60 * 24 * 7;
                $silence_forum_time = null;//time() + 60 * 60 * 24 * 7;
                $active_until = $GLOBALS['FORUM_DB']->query_select_value_if_there('member_privileges', 'active_until', [
                    'member_id' => $member_id,
                    'privilege' => 'submit_lowrange_content',
                    'the_page' => '',
                    'module_the_name' => 'topics',
                    'category_name' => strval($topic_id),
                ]);
                if ($active_until !== null) {
                    $silence_topic_time = $active_until;
                }
                $active_until = $GLOBALS['FORUM_DB']->query_select_value_if_there('member_privileges', 'active_until', [
                    'member_id' => $member_id,
                    'privilege' => 'submit_lowrange_content',
                    'the_page' => '',
                    'module_the_name' => 'forums',
                    'category_name' => strval($forum_id),
                ]);
                if ($active_until !== null) {
                    $silence_forum_time = $active_until;
                }
                $fields->attach(form_input_date(do_lang_tempcode('SILENCE_FROM_TOPIC'), do_lang_tempcode('DESCRIPTION_SILENCE_FROM_TOPIC'), 'silence_from_topic', false, true, true, $silence_topic_time, 2));
                $fields->attach(form_input_date(do_lang_tempcode('SILENCE_FROM_FORUM'), do_lang_tempcode('DESCRIPTION_SILENCE_FROM_FORUM'), 'silence_from_forum', false, true, true, $silence_forum_time, 2));
            }
        } else {
            $fields->attach(form_input_text(do_lang_tempcode('SILENCE_FROM_TOPIC'), do_lang_tempcode('DESCRIPTION_SILENCE_FROM_TOPIC'), 'silence_from_topic_disabled', do_lang('DESCRIPTION_SILENCE_FROM_TOPIC_DISABLED'), false, true));
            $fields->attach(form_input_text(do_lang_tempcode('SILENCE_FROM_FORUM'), do_lang_tempcode('DESCRIPTION_SILENCE_FROM_FORUM'), 'silence_from_forum_disabled', do_lang('DESCRIPTION_SILENCE_FROM_FORUM_DISABLED'), false, true));
        }
    }

    /**
     * Actualise punitive actions.
     * Note that this assumes action was applied through the warnings form, and that post parameters still exist.
     *
     * @param  array $punitive_messages Punitive action text to potentially be included in the PT automatically (passed by reference)
     * @param  AUTO_LINK $warning_id The ID of the warning that was created for this punitive action
     * @param  MEMBER $member_id The member this warning is being applied to
     * @param  SHORT_TEXT $username The username of the member this warning is being applied to
     * @param  SHORT_TEXT $explanation The defined explanation for this warning
     * @param  LONG_TEXT $message The message to be sent as a PT (passed by reference; you should generally use $punitive_text instead if you want to add PT text)
     */
    public function actualise_punitive_action(array &$punitive_messages, int $warning_id, int $member_id, string $username, string $explanation, string &$message)
    {
        if (!addon_installed('cns_warnings')) {
            return;
        }

        $silence_from_topic = post_param_integer('topic_id', null);
        $_silence_from_topic = post_param_date('silence_from_topic', false);
        $silence_from_forum = post_param_integer('forum_id', null);
        $_silence_from_forum = post_param_date('silence_from_forum', false);

        // Set silence from topic or silence from forum to null if no date specified
        if ($_silence_from_topic === null) {
            $silence_from_topic = null;
        }
        if ($_silence_from_forum === null) {
            $silence_from_forum = null;
        }

        // Topic silencing
        if ($silence_from_topic !== null && $_silence_from_topic !== false) {
            $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'topics',
                'category_name' => strval($silence_from_topic),
            ]);

            $GLOBALS['FORUM_DB']->query_insert('member_privileges', [
                'active_until' => $_silence_from_topic,
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'topics',
                'category_name' => strval($silence_from_topic),
                'the_value' => 0,
            ]);

            require_code('cns_general_action2');
            cns_mod_log_it('SILENCE_FROM_TOPIC', strval($member_id), strval($silence_from_topic), $explanation);

            $silence_from_topic_title = strval($silence_from_topic);
            if (get_forum_type() == 'cns') {
                $silence_from_topic_title = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $silence_from_topic]);
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 't_forum_id', ['id' => $silence_from_topic]);
                if ($forum_id !== null) {
                    $forum_name = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums', 'f_name', ['id' => $forum_id]);
                    $punitive_messages[] = do_lang('PUNITIVE_SILENCE_FROM_TOPIC_FORUM', strval($silence_from_topic_title), $forum_name, [strval(do_lang('PUNITIVE_UNTIL', strval(get_timezoned_date_time($_silence_from_topic, false, false, $member_id))))], null, false);
                } else {
                    $punitive_messages[] = do_lang('PUNITIVE_SILENCE_FROM_TOPIC', strval($silence_from_topic_title), strval(do_lang('PUNITIVE_UNTIL', strval(get_timezoned_date_time($_silence_from_topic, false, false, $member_id)))), null, null, false);
                }
            } else {
                $punitive_messages[] = do_lang('PUNITIVE_SILENCE_FROM_TOPIC', strval($silence_from_topic_title), strval(do_lang('PUNITIVE_UNTIL', strval(get_timezoned_date_time($_silence_from_topic, false, false, $member_id)))), null, null, false);
            }

            $GLOBALS['FORUM_DB']->query_insert('f_warnings_punitive', [
                'p_warning_id' => $warning_id,
                'p_member_id' => $member_id,
                'p_ip_address' => '',
                'p_email_address' => '',
                'p_hook' => 'silencing',
                'p_action' => '_PUNITIVE_SILENCE_FROM_TOPIC',
                'p_param_a' => strval($silence_from_topic),
                'p_param_b' => strval($_silence_from_topic),
                'p_reversed' => 0,
            ]);
        }

        // Forum silencing
        if ($silence_from_forum !== null && $_silence_from_forum !== false) {
            $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
            ]);
            $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                'member_id' => $member_id,
                'privilege' => 'submit_midrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
            ]);

            $GLOBALS['FORUM_DB']->query_insert('member_privileges', [
                'active_until' => $_silence_from_forum,
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
                'the_value' => 0,
            ]);
            $GLOBALS['FORUM_DB']->query_insert('member_privileges', [
                'active_until' => $_silence_from_forum,
                'member_id' => $member_id,
                'privilege' => 'submit_midrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
                'the_value' => 0,
            ]);

            require_code('cns_general_action2');
            cns_mod_log_it('SILENCE_FROM_FORUM', strval($member_id), strval($silence_from_forum), $explanation);

            $silence_from_forum_title = strval($silence_from_forum);
            if (get_forum_type() == 'cns') {
                $silence_from_forum_title = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_name', ['id' => $silence_from_forum]);
            }

            $GLOBALS['FORUM_DB']->query_insert('f_warnings_punitive', [
                'p_warning_id' => $warning_id,
                'p_member_id' => $member_id,
                'p_ip_address' => '',
                'p_email_address' => '',
                'p_hook' => 'silencing',
                'p_action' => '_PUNITIVE_SILENCE_FROM_FORUM',
                'p_param_a' => strval($silence_from_forum),
                'p_param_b' => strval($_silence_from_forum),
                'p_reversed' => 0,
            ]);

            $punitive_messages[] = do_lang('PUNITIVE_SILENCE_FROM_FORUM', $silence_from_forum_title, do_lang('PUNITIVE_UNTIL', get_timezoned_date_time($_silence_from_forum, false, false, $member_id)), null, null, false);
        }
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @param  array $punitive_action The database row for the punitive action being undone
     * @param  array $warning The database row for the warning associated with the punitive action being undone
     */
    public function undo_punitive_action(array $punitive_action, array $warning)
    {
        $error = new Tempcode();
        if (!addon_installed__messaged('cns_warnings', $error)) {
            warn_exit($error);
        }

        if (get_forum_type() != 'cns') {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('0a784ffb9adb542b9fdc84cca972240a')));
        }

        require_code('cns_general_action2');

        $member_id = intval($punitive_action['p_member_id']);
        $silence_id = intval($punitive_action['p_param_a']);

        switch ($punitive_action['p_action']) {
            case '_PUNITIVE_SILENCE_FROM_TOPIC':
                $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                    'member_id' => $member_id,
                    'privilege' => 'submit_lowrange_content',
                    'the_page' => '',
                    'module_the_name' => 'topics',
                    'category_name' => strval($silence_id),
                ]);

                cns_mod_log_it('UNSILENCE_TOPIC', strval($member_id), strval($warning['id']));
                break;
            case '_PUNITIVE_SILENCE_FROM_FORUM':
                $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                    'member_id' => $member_id,
                    'privilege' => 'submit_lowrange_content',
                    'the_page' => '',
                    'module_the_name' => 'forums',
                    'category_name' => strval($silence_id),
                    'the_value' => '0',
                ]);
                $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                    'member_id' => $member_id,
                    'privilege' => 'submit_midrange_content',
                    'the_page' => '',
                    'module_the_name' => 'forums',
                    'category_name' => strval($silence_id),
                    'the_value' => '0',
                ]);

                require_code('cns_general_action2');
                cns_mod_log_it('UNSILENCE_FORUM', strval($member_id), strval($warning['id']));
                break;
        }
    }

    /**
     * Return information for the standing profile tab.
     *
     * @param  MEMBER $member_id_of The member whose profile we are viewing
     * @param  MEMBER $member_id_viewing The member who is viewing the profile
     * @param  array $warning_ids Array of formal warning IDs against this member for checking against queried punitive actions
     * @return array Array of maps with information about this punitive action
     */
    public function get_stepper(int $member_id_of, int $member_id_viewing, array $warning_ids) : array
    {
        if (!addon_installed('cns_warnings') || get_forum_type() != 'cns') {
            return [];
        }

        require_code('temporal');

        $info = [];

        // Grab all active silences
        $privilege_restrictions = $GLOBALS['SITE_DB']->query_parameterised("SELECT * FROM {prefix}member_privileges WHERE member_id={member_id} AND the_value=0 AND active_until>{current_time}", ['member_id' => $member_id_of, 'current_time' => time()]);
        foreach ($privilege_restrictions as $restriction) {
            // Topic silence
            if (($restriction['privilege'] == 'submit_lowrange_content') && ($restriction['module_the_name'] == 'topics')) {
                $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $restriction['category_name']]);
                $topic_name = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $restriction['category_name']]);
                $forum_name = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_name', ['id' => $forum_id]);

                $info[] = [
                    'icon' => 'cns_topic_modifiers/closed',
                    'text' => do_lang_tempcode('STANDING_RESTRICTIONS_TOPIC_SILENCE_TEXT', escape_html($topic_name), escape_html($forum_name), [escape_html(get_timezoned_date_time($restriction['active_until'], false, false, $member_id_viewing))]),
                ];
            }

            // Forum silence
            if (($restriction['privilege'] == 'submit_lowrange_content') && ($restriction['module_the_name'] == 'forums')) {
                $forum_name = $GLOBALS['FORUM_DB']->query_select_value('f_forums', 'f_name', ['id' => $restriction['category_name']]);
                $info[] = [
                    'icon' => 'cns_topic_modifiers/closed',
                    'text' => do_lang_tempcode('STANDING_RESTRICTIONS_FORUM_SILENCE_TEXT', escape_html($forum_name), escape_html(get_timezoned_date_time($restriction['active_until'], false, false, $member_id_viewing))),
                ];
            }
        }

        return [
            [
                'order' => 30,
                'label' => do_lang('STANDING_RESTRICTIONS'),
                'explanation' => do_lang('DESCRIPTION_STANDING_RESTRICTIONS'),
                'icon' => 'cns_topic_modifiers/closed',
                'active' => !empty($info),
                'active_color' => 'warning',
                'info' => $info,
            ],
        ];
    }
}
