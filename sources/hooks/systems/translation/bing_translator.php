<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_language_editing
 */

/**
 * Hook class.
 */
class Hook_translation_bing_translator
{
    /**
     * Whether this translation hook is available.
     *
     * @param  ?LANGUAGE_NAME $from Source language (null: do not consider)
     * @param  ?LANGUAGE_NAME $to Destination language (null: do not consider)
     * @param  ?string $errormsg Error message (returned by reference) (null: not set yet)
     * @return boolean Whether it is
     */
    public function has_translation(?string $from, ?string $to, ?string &$errormsg) : bool
    {
        if (get_option('azure_api_key') == '') {
            return false;
        }
        if (get_option('bing_translator_enabled') == '0') {
            return false;
        }

        if ($from !== null) {
            $_from = $this->get_bing_lang_code($from, $errormsg);
            if ($_from === null) {
                return false;
            }
        }
        if ($to !== null) {
            $_to = $this->get_bing_lang_code($to, $errormsg);
            if ($_to === null) {
                return false;
            }
        }

        return true;
    }

    /**
     * Get translation context for future internal use.
     *
     * @param  integer $context A TRANS_TEXT_CONTEXT_* constant
     * @param  ?LANGUAGE_NAME $from Source language (null: autodetect from the text itself)
     * @param  LANGUAGE_NAME $to Destination language
     * @param  ?string $errormsg Error message (returned by reference) (null: not set yet)
     * @return mixed Context metadata for the particular translation effort
     */
    public function get_translation_context(int $context, ?string $from, string $to, ?string &$errormsg)
    {
        if ($from !== null) {
            $_from = $this->get_bing_lang_code($from, $errormsg);
            if ($_from === null) {
                return null;
            }
        } else {
            $_from = null;
        }
        $_to = $this->get_bing_lang_code($to, $errormsg);
        if ($_to === null) {
            return null;
        }

        return [$_from, $_to];
    }

    /**
     * Translate some text.
     *
     * @param  string $text The text to translate
     * @param  integer $context A TRANS_TEXT_CONTEXT_* constant
     * @param  mixed $context_metadata Context metadata for the particular translation effort
     * @param  ?LANGUAGE_NAME $from Source language (null: autodetect from the text itself)
     * @param  LANGUAGE_NAME $to Destination language
     * @param  ?string $errormsg Error message (returned by reference) (null: not set yet)
     * @return ?string Translated text (null: some kind of error)
     */
    public function translate_text(string $text, int $context, $context_metadata, ?string $from, string $to, ?string &$errormsg) : ?string
    {
        if ($context_metadata === null) {
            return null; // Should never happen as has_translation would have returned false
        }

        list($_from, $_to) = $context_metadata;

        $url = 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0';
        if ($from !== null) {
            $url .= '&from=' . urlencode($from);
        }
        $url .= '&to=' . urlencode($to);
        switch ($context) {
            case TRANS_TEXT_CONTEXT__AUTODETECT:
                if (preg_match('#(&\w+;|<([a-z]+|[A-Z]+)[ />])#', $text) != 0) {
                    $url .= '&textType=html';
                } else {
                    $url .= '&textType=plain';
                }
                break;

            case TRANS_TEXT_CONTEXT__PLAIN:
                $url .= '&textType=plain';
                break;

            case TRANS_TEXT_CONTEXT__HTML_BLOCK:
            case TRANS_TEXT_CONTEXT__HTML_INLINE:
            case TRANS_TEXT_CONTEXT__HTML_RAW:
                $url .= '&textType=html';
                break;
        }


        $request = [
            [
                'Text' => $text,
            ]
        ];

        $result = $this->_bing_translator_api_request($url, $request, $errormsg);

        if (!isset($result[0]['translations'][0]['text'])) {
            return null;
        }

        return $result[0]['translations'][0]['text'];
    }

    /**
     * Put a result within some surrounding text, based on the display context.
     * Some translation backends require output text to be displayed in a certain way.
     *
     * @param  string $text_result Result text
     * @param  integer $context A TRANS_TEXT_CONTEXT_* constant
     * @param  mixed $context_metadata Context metadata for the particular translation effort
     * @return string Output text
     */
    public function put_result_into_context(string $text_result, int $context, $context_metadata) : string
    {
        return $text_result;
    }

    /**
     * Get HTML to provide credit to the translation backend, as appropriate.
     *
     * @return string Credit HTML
     */
    public function get_translation_credit() : string
    {
        return '';
    }

    /**
     * Convert a standard language codename to a Bing Translator code.
     *
     * @param  LANGUAGE_NAME $in The code to convert
     * @param  ?string $errormsg Error message (returned by reference) (null: not set yet)
     * @return ?string The converted code (null: none found)
     */
    protected function get_bing_lang_code(string $in, ?string &$errormsg = null) : ?string
    {
        // Pre-cleanup
        $remap = ['ZH' => 'zh-Hant'];
        $ret = str_replace(array_keys($remap), array_values($remap), $in);
        $ret = str_replace('_', '-', cms_strtolower_ascii($in));

        $url = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0&scope=translation';

        // Now check the language actually exists...

        require_code('http');
        $errormsg = new Tempcode();
        $result = unserialize(cache_and_carry([$this, '_bing_translator_api_request'], [$url, null, &$errormsg]));

        if (isset($result['translation'][$ret])) {
            return $ret;
        }

        return null;
    }

    /**
     * Call a Bing Translator API.
     * Needs to be public as it is used in a callback.
     *
     * @param  URLPATH $url API URL to call
     * @param  ?array $request Request data (null: GET request)
     * @param  ?string $errormsg Error message (returned by reference) (null: not set yet)
     * @return ?array Result (null: some kind of error)
     */
    public function _bing_translator_api_request(string $url, ?array $request = null, ?string &$errormsg = null) : ?array
    {
        $key = get_option('azure_api_key');

        if ($request === null) {
            $_request = null;
        } else {
            $_request = json_encode($request);

            require_code('character_sets');
            $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');
        }

        $options = [
            'convert_to_internal_encoding' => true,
            'ignore_http_status' => true,
            'trigger_error' => false,
            'post_params' => $_request,
            'timeout' => 0.5,
            'http_verb' => ($request === null) ? 'GET' : 'POST',
            'raw_content_type' => 'application/json',
            'extra_headers' => ['Ocp-Apim-Subscription-Key' => $key],
        ];
        $_result = cms_http_request($url, $options);

        $result = @json_decode($_result->data, true);
        if ((!is_array($result)) || (array_key_exists('error', $result))) {
            $errormsg = 'Bing Translator: ' . ((!is_array($result) ? $_result->message : $result['error']['message']));
            return null;
        }
        return $result;
    }
}
