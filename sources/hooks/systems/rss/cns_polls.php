<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    cns_forum
 */

/**
 * Hook class.
 */
class Hook_rss_cns_polls
{
    /**
     * Check if the given member has access to view this feed.
     *
     * @param  MEMBER $member_id The member trying to access this feed
     * @return boolean Whether the member has access
     */
    public function has_access(int $member_id) : bool
    {
        if (!addon_installed('cns_forum')) {
            return false;
        }
        if (get_forum_type() != 'cns') {
            return false;
        }

        if (!has_actual_page_access($member_id, 'forumview')) {
            return false;
        }

        return true;
    }

    /**
     * Run function for RSS hooks.
     *
     * @param  string $_filters A list of categories we accept from
     * @param  TIME $cutoff Cutoff time, before which we do not show results from
     * @param  string $prefix Prefix that represents the template set we use
     * @set RSS_ ATOM_
     * @param  string $date_string The standard format of date to use for the syndication type represented in the prefix
     * @param  integer $max The maximum number of entries to return, ordering by date
     * @return ?array A pair: The main syndication section, and a title (null: error)
     */
    public function run(string $_filters, int $cutoff, string $prefix, string $date_string, int $max) : ?array
    {
        if (!$this->has_access(get_member())) {
            return null;
        }

        require_lang('cns_polls');
        require_code('cns_topics');

        $cutoff = max($cutoff, time() - 60 * 60 * 24 * 60);

        //$_filters = '*'; // No filter
        //$_filters = '1*'; // Anything under root forum
        //$_filters = '3*'; // Anything under forum ID #2
        // $_filters = '24'; // Anything under particular topic ID

        require_code('selectcode');
        $filters = selectcode_to_sqlfragment($_filters, 't.id', 'f_forums', 'f_parent_forum_id', 't_forum_id', 't.id', true, true, $GLOBALS['FORUM_DB']);

        $sql = 'SELECT *,pv.id AS pv_id,t.id AS t_id FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_poll_votes pv';
        $sql .= ' JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_polls po ON po.id=pv.pv_poll_id';
        $sql .= ' JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_poll_answers pa ON pa.id=pv.pv_answer_id';
        $sql .= ' JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_topics t ON t.t_poll_id=pv.pv_poll_id';
        $sql .= ' JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members pvm ON pvm.id=pv.pv_member_id';
        $sql .= ' WHERE t.t_poll_id IS NOT NULL AND pv.pv_date_time>' . strval($cutoff) . (((!has_privilege(get_member(), 'see_not_validated')) && (addon_installed('validation'))) ? ' AND t.t_validated=1 ' : '');
        $sql .= ' AND po.po_view_member_votes=1 AND po.po_is_private=0';
        $sql .= ' AND ' . $filters;
        $sql .= ' ORDER BY pv.pv_date_time DESC,pv.id DESC';

        $rows = $GLOBALS['FORUM_DB']->query($sql, $max, 0, false, true); // Get a list of VOTES, and THEIR ANSWERS, and THEIR POLLS, and THEIR TOPICS

        $content = new Tempcode();
        foreach ($rows as $row) {
            if (cns_may_access_topic($row['t_id'])) {
                $id = strval($row['pv_id']);

                $author = $GLOBALS['FORUM_DRIVER']->get_username($row['pv_member_id'], true, USERNAME_DEFAULT_BLANK);
                $_author_join_date = date($date_string, $row['m_join_time']);
                $_revoked = ($row['pv_revoked'] == 1);
                $_topic_title = $row['t_cache_first_title'];
                $_poll_question = $row['po_question'];

                require_code('cns_groups');
                $_author_primary_group = cns_get_group_name($row['m_primary_group']);

                $category_raw = strval($row['t_id']);
                $view_url = build_url(['page' => 'topicview', 'id' => $row['t_id']], get_module_zone('forumview'), [], false, false, true);
                $news_date = date($date_string, $row['pv_date_time']);
                $edit_date = '';
                if ($_revoked) {
                    $news_title = do_lang('POLL_RSS_VOTE_TITLE_REVOKED', xmlentities($row['pa_answer']));
                } else {
                    $news_title = xmlentities($row['pa_answer']);
                }
                $news = '';

                $category = do_lang_tempcode('POLL_RSS_VOTE_TITLE', xmlentities($_topic_title), xmlentities($_poll_question));

                $_category_author = $GLOBALS['FORUM_DRIVER']->get_displayname($row['t_cache_first_username']);

                $_voting_power = $row['pv_cache_voting_power'];
                $_points = $row['pv_points_when_voted'];

                $vote_metadata = [];
                $vote_metadata[] = do_lang_tempcode('POLL_RSS_SUMMARY_CONTENT_1', $author, $news_title, [$category, $_category_author, $news_date]);
                if ((get_option('enable_poll_point_weighting') == '1') && ($row['po_point_weighting'] == 1)) {
                    $vote_metadata[] = do_lang_tempcode('POLL_RSS_SUMMARY_CONTENT_2', float_format($_voting_power), integer_format($_points));
                }
                $vote_metadata[] = do_lang_tempcode('POLL_RSS_SUMMARY_CONTENT_3', $author, $_author_join_date, [$_author_primary_group]);

                $_summary = do_template('POLL_RSS_SUMMARY', ['_GUID' => '380e1014e941457db1dad71babfca028', 'VOTE_METADATA' => $vote_metadata]);
                $summary = xmlentities($_summary->evaluate());
                $news = '';

                $content->attach(do_template($prefix . 'ENTRY', ['VIEW_URL' => $view_url, 'SUMMARY' => $summary, 'EDIT_DATE' => $edit_date, 'IF_COMMENTS' => new Tempcode(), 'TITLE' => $news_title, 'CATEGORY_RAW' => $category_raw, 'CATEGORY' => $category, 'AUTHOR' => $author, 'ID' => $id, 'NEWS' => $news, 'DATE' => $news_date], null, false, null, '.xml', 'xml'));
            }
        }

        return [$content, do_lang('TOPIC_POLL_VOTES')];
    }
}
