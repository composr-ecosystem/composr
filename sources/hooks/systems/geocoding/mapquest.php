<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_geocoding_mapquest
{
    /**
     * Whether the service is available.
     *
     * @param  boolean $reverse Whether reverse geocoding is requested
     * @return boolean Whether it is
     */
    public function is_available($reverse = false)
    {
        $key = get_option('mapquest_geocoding_api_key');
        return ($key != '');
    }

    /**
     * Geocode a written location.
     *
     * @param  string $location Written location
     * @param  ?Tempcode $error_msg Error message (written by reference) (null: not returned)
     * @return ?array A tuple: Latitude, Longitude, NE lat, NE lng, SW lat, SW lng (null: error)
     */
    public function geocode($location, &$error_msg = null)
    {
        $url_params = 'address?location=' . urlencode($location);
        $result = $this->_geocode($url_params, $error_msg);
        if ($result === null) {
            return null;
        }

        if (!isset($result['results'][0]['locations'][0])) {
            $error_msg = do_lang_tempcode('GEOCODE_INCOMPLETE');
            return null;
        }
        $r = $result['results'][0]['locations'][0];

        if (!isset($r['latLng'])) {
            $error_msg = do_lang_tempcode('GEOCODE_INCOMPLETE');
            return null;
        }

        $latitude = $r['latLng']['lat'];
        $longitude = $r['latLng']['lng'];

        $ne_latitude = null;
        $ne_longitude = null;
        $sw_latitude = null;
        $sw_longitude = null;

        return array($latitude, $longitude, $ne_latitude, $ne_longitude, $sw_latitude, $sw_longitude);
    }

    /**
     * Geocode a latitude & longitude.
     *
     * @param  float $latitude Latitude
     * @param  float $longitude Longitude
     * @param  ?Tempcode $error_msg Error message (written by reference) (null: not returned)
     * @return ?array A tuple: Formatted address, Street Address, City, County, State, Zip/Postcode, Country, NE lat, NE lng, SW lat, SW lng (null: error)
     */
    public function reverse_geocode($latitude, $longitude, &$error_msg = null)
    {
        $url_params = 'reverse?location=' . urlencode(float_to_raw_string($latitude, 30)) . ',' . urlencode(float_to_raw_string($longitude, 30));
        $result = $this->_geocode($url_params, $error_msg);
        if ($result === null) {
            return null;
        }

        if (!isset($result['results'][0]['locations'][0])) {
            $error_msg = do_lang_tempcode('GEOCODE_INCOMPLETE');
            return null;
        }
        $r = $result['results'][0]['locations'][0];

        $street_address = @cms_empty_safe($r['street']) ? null : $r['street'];
        $postal_code = @cms_empty_safe($r['postalCode']) ? null : $r['postalCode'];

        $city = null;
        $county = null;
        $state = null;
        $country = null;

        for ($i = 1; $i <= 6; $i++) {
            if (!empty($r['adminArea' . strval($i)])) {
                switch ($r['adminArea' . strval($i) . 'Type']) {
                    case 'City':
                        $city = $r['adminArea' . strval($i)];
                        break;

                    case 'County':
                        $county = $r['adminArea' . strval($i)];
                        break;

                    case 'State':
                        $state = $r['adminArea' . strval($i)];
                        break;

                    case 'Country':
                        require_code('locations');
                        $country = $r['adminArea' . strval($i)];
                        $_country = find_iso_country_from_name($country);
                        if ($_country !== null) {
                            $country = $_country;
                        }
                        break;
                }
            }
        }

        $location = '';
        foreach (array($street_address, $city, $county, $state, $postal_code, $country) as $component) {
            if ($component !== null) {
                if ($location != '') {
                    $location .= ', ';
                }
                $location .= $component;
            }
        }

        $ne_latitude = null;
        $ne_longitude = null;
        $sw_latitude = null;
        $sw_longitude = null;

        return array($location, $street_address, $city, $county, $state, $postal_code, $country, $ne_latitude, $ne_longitude, $sw_latitude, $sw_longitude);
    }

    /**
     * Geocode a written location.
     *
     * @param  string $url_params What to add into the URL
     * @param  ?Tempcode $error_msg Error message (written by reference) (null: not returned)
     * @return ?array Geocode results (null: error)
     * @ignore
     */
    protected function _geocode($url_params, &$error_msg = null)
    {
        // Test to see if we know we were over the limit in the last 24h
        $limit_test = get_value_newer_than('over_geocode_query_limit', time() - 60 * 60 * 24, true);
        if ($limit_test === 1) {
            $error_msg = do_lang_tempcode('GEOCODE_OVER_QUERY_LIMIT');
            return null;
        }

        $url = 'http://www.mapquestapi.com/geocoding/v1/' . $url_params;
        $url .= '&outFormat=json';
        $url .= '&key=' . urlencode(get_option('mapquest_geocoding_api_key'));

        $_result = http_get_contents($url, array('convert_to_internal_encoding' => true, 'trigger_error' => false, 'ignore_http_status' => false));

        if (empty($_result)) {
            $error_msg = do_lang_tempcode('GEOCODE_COULD_NOT_CONNECT');
            return null;
        }

        $result = @json_decode($_result, true);
        if (!is_array($result)) {
            $error_msg = do_lang_tempcode('GEOCODE_COULD_NOT_PARSE');
            return null;
        }

        if ($result['info']['statuscode'] == 403) {
            set_value('over_geocode_query_limit', '1', true);
        }

        if ($result['info']['statuscode'] != 0) {
            $error_msg = new Tempcode();
            foreach ($result['info']['messages'] as $i => $message) {
                if ($i != 0) {
                    $error_msg->attach(',' );
                }
                $error_msg->attach($message);
            }
            return null;
        }

        return $result;
    }
}
