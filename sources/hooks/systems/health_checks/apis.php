<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    health_check
 */

/**
 * Hook class.
 */
class Hook_health_check_apis extends Hook_Health_Check
{
    protected $category_label = 'API connections';

    /**
     * Standard hook run function to run this category of health checks.
     *
     * @param  ?array $sections_to_run Which check sections to run (null: all)
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     * @param  boolean $show_unusable_categories Whether to include categories that might not be accessible for some reason
     * @return array A pair: category label, list of results
     */
    public function run($sections_to_run, $check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null, $show_unusable_categories = false)
    {
        if (($show_unusable_categories) || ($check_context != CHECK_CONTEXT__INSTALL)) {
            if ((($show_unusable_categories) || (get_option('ipstack_api_key') != ''))) {
                $this->process_checks_section('testIpStackConnection', 'ipstack', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
            }

            require_code('locations_geocoding');
            if (($show_unusable_categories) || (choose_geocoding_service() !== null)) {
                $this->process_checks_section('testGeocodeConnection', 'Geocoding', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
            }

            require_code('translation');
            if (($show_unusable_categories) || (has_translation('EN', 'FR'))) {
                $this->process_checks_section('testTranslationConnection', 'Translation', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
            }

            if ((($show_unusable_categories) || ((get_option('moz_access_id') != '') && (get_option('moz_secret_key') != '')))) {
                $this->process_checks_section('testMozConnection', 'Moz Links', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
            }
        }

        return [$this->category_label, $this->results];
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testIpStackConnection($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            return;
        }

        // NB: https requires a paid plan
        $ip_stack_url = 'http://api.ipstack.com/' . rawurlencode('216.58.192.142') . '?access_key=' . urlencode(get_option('ipstack_api_key'));
        $_json = http_get_contents($ip_stack_url, ['convert_to_internal_encoding' => true, 'trigger_error' => false, 'timeout' => 20.0]);
        $json = json_decode($_json, true);
        $this->assertTrue($json['country_name'] == 'United States', 'ipstack did not return expected result');
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testGeocodeConnection($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            return;
        }

        require_code('locations_geocoding');

        // Forward geocoding
        foreach (['google', 'bing', 'mapquest'] as $service) {
            require_code('hooks/systems/geocoding/' . $service);
            $ob = object_factory('Hook_geocoding_' . $service);
            if ($ob->is_available()) {
                $error_msg = new Tempcode();
                $result = geocode('Berlin, DE', $error_msg, $service);
                $this->assertTrue(($result !== null) && ($result[0] > 52.0) && ($result[0] < 53.0) && ($result[1] > 13.0) && ($result[1] < 14.0), 'Wrong coordinate on ' . $service);
            }
        }
        // Note if this breaks there's also similar code in locations_catalogues_geoposition and locations_catalogues_geopositioning (non-bundled addons)

        // Reverse geocoding
        foreach (['google', 'bing', 'mapquest'] as $service) {
            require_code('hooks/systems/geocoding/' . $service);
            $ob = object_factory('Hook_geocoding_' . $service);
            if ($ob->is_available(true)) {
                $error_msg = new Tempcode();
                $address = reverse_geocode(52.516667, 13.388889, $error_msg, $service);
                if (!empty($GLOBALS['UNIT_TEST_WITH_DEBUG'])) {
                    var_dump($error_msg->evaluate());
                    var_dump($address);
                }
                $this->assertTrue($address !== null, 'Failure on ' . $service);
                if ($address !== null) {
                    $this->assertTrue($address[2] == 'Berlin', 'Wrong city on ' . $service . ', got ' . $address[2] . ', expected Berlin');
                    $this->assertTrue($address[6] == 'DE', 'Wrong country on ' . $service . ', got ' . $address[6] . ', expected DE');
                }

                $error_msg = new Tempcode();
                $address = reverse_geocode(64.133333, -21.933333, $error_msg, $service);
                if (!empty($GLOBALS['UNIT_TEST_WITH_DEBUG'])) {
                    var_dump($error_msg->evaluate());
                    var_dump($address);
                }
                $this->assertTrue($address !== null, 'Failure on ' . $service);
                if ($address !== null) {
                    $this->assertTrue(substr($address[2], 0, 3) == 'Rey', 'Wrong city on ' . $service . ', got ' . $address[2] . ', expected ~Raycevick'); // Only check first chars due to charset issues
                }
            }
        }
    }


    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testTranslationConnection($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            return;
        }

        $hooks = [
            'bing_translator',
            'google_translate',
        ];

        $from = 'EN';
        $to = 'FR';

        foreach ($hooks as $hook) {
            $translation_object = get_translation_object_for_hook($hook);
            $errormsg = null;
            if (has_translation($from, $to, $translation_object, $errormsg)) {
                $GLOBALS['SITE_DB']->query_delete('translation_cache');

                $from_text = 'Hello';
                $to_text = translate_text($from_text, TRANS_TEXT_CONTEXT__AUTODETECT, $from, $to, $hook, $errormsg);
                $this->assertTrue(($to_text !== null) && (($to_text == 'Bonjour') || ($to_text == 'Salut')), 'Translation failed from ' . $from . ' to ' . $to . ', got ' . @strval($to_text) . ' for ' . $from_text . ' (error message is ' . @strval($errormsg) . ')');
            }
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testMozConnection($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            return;
        }

        if ($use_test_data_for_pass !== null) {
            $url = 'https://compo.sr';
        } else {
            $url = get_base_url();
        }

        require_code('broken_urls');
        $ob = new BrokenURLScanner();
        $error = false;
        $urls = $ob->enumerate_moz_backlinks([$url], 1, $error);
        $this->assertTrue((!$error) && (($use_test_data_for_pass === null) || (count($urls) > 0)), 'Error trying to retrieve backlinks');
    }
}
