<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*EXTRA FUNCTIONS: stream\_.+*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    health_check
 */

/**
 * Hook class.
 */
class Hook_health_check_security_ssl extends Hook_Health_Check
{
    protected $category_label = 'SSL';

    /**
     * Standard hook run function to run this category of health checks.
     *
     * @param  ?array $sections_to_run Which check sections to run (null: all)
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     * @param  boolean $show_unusable_categories Whether to include categories that might not be accessible for some reason
     * @return array A pair: category label, list of results
     */
    public function run(?array $sections_to_run, int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null, bool $show_unusable_categories = false) : array
    {
        $this->process_checks_section('testSSLIsOn', 'SSL on', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testManualSSLGrading', 'SSL grading', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testIncorrectHTTPSEmbedding', 'Insecure embedding (tests the configured/contextual pages only)', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testIncorrectHTTPSLinking', 'Insecure linking (tests the configured/contextual pages only)', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testSSLCorrectness', 'SSL correctness', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testSSLExpiry', 'SSL expiry', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testCAARecord', 'CAA record present', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);

        return [$this->category_label, $this->results];
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testSSLIsOn(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            $this->log('Skipped; running on specific page links.');
            return;
        }

        $is_http = (substr(get_base_url(), 0, 7) == 'http://');
        $this->assertTrue(!$is_http, do_lang('WARNING_SSL'));
    }

    /**
     * Find if SSL is enabled.
     *
     * @return boolean Whether it is
     */
    protected function hasSSLEnabled() : bool
    {
        if (substr(get_base_url(), 0, 8) != 'https://') {
            return false;
        }
        return true;
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testManualSSLGrading(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            $this->log('Skipped; running on specific page links.');
            return;
        }

        if (!$manual_checks) {
            return;
        }

        if (!$this->hasSSLEnabled()) {
            $this->stateCheckSkipped('SSL not enabled');
            return;
        }

        // external_health_check (on maintenance sheet)
        $this->stateCheckManual('Check for [url="SSL security issues"]https://www.ssllabs.com/ssltest/[/url] (take warnings with a pinch of salt, not every suggestion is appropriate; [url="setting generator"]https://ssl-config.mozilla.org/[/url])');
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testIncorrectHTTPSEmbedding(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }

        if (!whole_site_https()) {
            return;
        }

        $page_links = $this->process_urls_into_page_links($urls_or_page_links);

        $html_segments = [];
        foreach ($page_links as $page_link) {
            $url = page_link_to_url($page_link);
            $protocol = cms_parse_url_safe($url, PHP_URL_SCHEME);
            if ($protocol == 'http') {
                continue;
            }

            $html = $this->get_page_content($page_link, $check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS);

            if ($html === null) {
                $this->stateCheckSkipped(do_lang('HC_PAGE_DOWNLOAD_ERROR', $page_link));
                continue;
            }

            $html_segments['[tt]' . $page_link . '[/tt]'] = $html;
        }

        if ($comcode_segments !== null) {
            foreach ($comcode_segments as $field_title => $comcode_segment) {
                $html_segments[$field_title] = static_evaluate_tempcode(comcode_to_tempcode($comcode_segment));
            }
        }

        foreach ($html_segments as $field_title => $html) {
            $urls = $this->get_embed_urls_from_data($html);

            foreach ($urls as $url) {
                // Check
                $this->assertTrue(preg_match('#^http://#', $url) == 0, do_lang('HTTPS_EMBED_PROBLEM', $url, $field_title));
            }
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testIncorrectHTTPSLinking(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }

        global $SITE_INFO;

        if (empty($SITE_INFO['base_url'])) {
            $this->stateCheckSkipped('Base URL not configured');
            return;
        }

        $protocol = cms_parse_url_safe($SITE_INFO['base_url'], PHP_URL_SCHEME);
        if ($protocol == 'http') {
            return;
        }

        $domains = get_server_names(false);

        $page_links = $this->process_urls_into_page_links($urls_or_page_links);

        $html_segments = [];
        foreach ($page_links as $page_link) {
            $html = $this->get_page_content($page_link, $check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS);

            if ($html === null) {
                $this->stateCheckSkipped(do_lang('HC_PAGE_DOWNLOAD_ERROR', $page_link));
                continue;
            }

            $html_segments['[tt]' . $page_link . '[/tt]'] = $html;
        }

        if ($comcode_segments !== null) {
            foreach ($comcode_segments as $field_title => $comcode_segment) {
                $html_segments[$field_title] = static_evaluate_tempcode(comcode_to_tempcode($comcode_segment));
            }
        }

        foreach ($html_segments as $field_title => $html) {
            $urls = $this->get_link_urls_from_data($html);

            foreach ($urls as $url) {
                // Check
                $regexp = '#^http://(';
                foreach ($domains as $i => $domain) {
                    if ($i != 0) {
                        $regexp .= '|';
                    }
                    $regexp .= preg_quote($domain, '#');
                }
                $regexp .= ')[:/]#';
                $this->assertTrue(preg_match($regexp, $url) == 0, do_lang('HTTPS_LINKING_PROBLEM', $url, $field_title));
            }
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testSSLCorrectness(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context != CHECK_CONTEXT__LIVE_SITE) {
            $this->log('Skipped; we are not running from a live site.');
            return;
        }

        if (!$this->hasSSLEnabled()) {
            $this->stateCheckSkipped('SSL not enabled');
            return;
        }

        // If it's a problem with SSL verification in general
        for ($i = 0; $i < 3; $i++) { // Try a few times in case of some temporary network issue or DuckDuckGo issue
            $data = http_get_contents('https://duckduckgo.com/', ['trigger_error' => false]);

            $ok = (($data !== null) && (strpos($data, '<html') !== false));
            if ($ok) {
                break;
            }
            if (php_function_allowed('usleep')) {
                usleep(5000000);
            }
        }
        $this->assertTrue($ok, 'Problem downloading HTTP requests by SSL');

        if ($ok) {
            // If it's a problem with SSL verification on our domain specifically
            $domains = get_server_names(false);
            foreach ($domains as $domain) {
                if (get_value('disable_ssl_for__' . $domain) !== '1') {
                    $test_url = get_base_url() . '/data/empty.php';

                    delete_value('disable_ssl_for__' . $domain);
                    $data = http_get_contents($test_url, ['trigger_error' => false]);
                    $ok1 = (($data !== null) && (strpos($data, '<html') !== false));

                    $msg = 'Problem detected with the [tt]' . $domain . '[/tt] SSL certificate';
                    if (!$ok1) {
                        set_value('disable_ssl_for__' . $domain, '1');
                        $data = http_get_contents($test_url, ['trigger_error' => false]);
                        $ok2 = (($data !== null) && (strpos($data, '<html') !== false));

                        $this->assertTrue(!$ok2, $msg); // Issue with our SSL but not if verify is disabled, suggesting the problem is with verify

                        delete_value('disable_ssl_for__' . $domain);
                    } else {
                        $this->assertTrue(true, $msg); // No issue with our SSL
                    }
                }
            }
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testSSLExpiry(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            $this->log('Skipped; running on specific page links.');
            return;
        }

        if (!$this->hasSSLEnabled()) {
            $this->stateCheckSkipped('SSL not enabled');
            return;
        }

        if (function_exists('openssl_x509_parse')) {
            $url = get_base_url();
            $domain = cms_parse_url_safe($url, PHP_URL_HOST);
            $context = stream_context_create(['ssl' => ['allow_self_signed' => true, 'verify_peer_name' => false, 'verify_peer' => false, 'capture_peer_cert' => true]]);
            $errno = null;
            $errstr = null;
            $read = @stream_socket_client('ssl://' . $domain . ':443', $errno, $errstr, 5.0, STREAM_CLIENT_CONNECT, $context);
            if ($read === false) {
                $this->stateCheckSkipped('Failed to establish SSL connection to ' . $domain);
            } else {
                $cert = stream_context_get_params($read);
                $certinfo = openssl_x509_parse($cert['options']['ssl']['peer_certificate']);

                if (isset($certinfo['validTo_time_t'])) {
                    $expiry = $certinfo['validTo_time_t'];
                    $this->assertTrue($expiry > time() - 60 * 60 * 24 * 7, 'SSL certificate seems to be expiring within a week or already expired (' . get_timezoned_date($expiry) . ')');
                } else {
                    $this->stateCheckSkipped('Could not read expiry time for ' . $domain);
                }
            }
        } else {
            $this->stateCheckSkipped('OpenSSL extension is required for this test');
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testCAARecord(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            $this->log('Skipped; running on specific page links.');
            return;
        }

        if (!$this->hasSSLEnabled()) {
            $this->stateCheckSkipped('SSL not enabled');
            return;
        }

        if (php_function_allowed('checkdnsrr')) {
            $url = get_base_url();
            $domain = cms_parse_url_safe($url, PHP_URL_HOST);

            $has_caa = @checkdnsrr($domain, 'CAA');
            $this->assertTrue($has_caa, 'CAA record not set for [tt]' . $domain . '[/tt], which increases the risk of 3rd-party certificate forgery');
        } else {
            $this->stateCheckSkipped('PHP [tt]checkdnsrr[/tt] function not available');
        }
    }
}
