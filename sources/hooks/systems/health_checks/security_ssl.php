<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    health_check
 */

/**
 * Hook class.
 */
class Hook_health_check_security_ssl extends Hook_Health_Check
{
    protected $category_label = 'SSL';

    /**
     * Standard hook run function to run this category of health checks.
     *
     * @param  ?array $sections_to_run Which check sections to run (null: all)
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     * @return array A pair: category label, list of results
     */
    public function run($sections_to_run, $check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        $this->process_checks_section('testSSLIsOn', 'SSL on', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testManualSSLGrading', 'SSL grading', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testIncorrectHTTPSEmbedding', 'Insecure embedding', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testIncorrectHTTPSLinking', 'Insecure linking', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        $this->process_checks_section('testSSLCorrectness', 'SSL correctness', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);

        return array($this->category_label, $this->results);
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testSSLIsOn($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            return;
        }

        $is_http = (substr(get_base_url(), 0, 7) == 'http://');
        $this->assertTrue(!$is_http, do_lang('WARNING_SSL'));
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testManualSSLGrading($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            return;
        }

        if (!$manual_checks) {
            return;
        }

        // external_health_check (on maintenance sheet)
        $this->stateCheckManual('Check for [url="SSL security issues"]https://www.ssllabs.com/ssltest/[/url] (take warnings with a pinch of salt, not every suggestion is appropriate)');
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testIncorrectHTTPSEmbedding($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            return;
        }

        if (!whole_site_https()) {
            return;
        }

        $page_links = $this->process_urls_into_page_links($urls_or_page_links);

        $html_segments = array();
        foreach ($page_links as $page_link) {
            $url = page_link_to_url($page_link);
            $protocol = parse_url($url, PHP_URL_SCHEME);
            if ($protocol == 'http') {
                continue;
            }

            $html = $this->get_page_content($page_link, $check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS);

            if ($html === null) {
                $this->stateCheckSkipped(do_lang('HC_PAGE_DOWNLOAD_ERROR', $page_link));
                continue;
            }

            $html_segments['[tt]' . $page_link . '[/tt]'] = $html;
        }

        if ($comcode_segments !== null) {
            foreach ($comcode_segments as $field_title => $comcode_segment) {
                $html_segments[$field_title] = static_evaluate_tempcode(comcode_to_tempcode($comcode_segment));
            }
        }

        foreach ($html_segments as $field_title => $html) {
            $urls = $this->get_embed_urls_from_data($html);

            foreach ($urls as $url) {
                // Check
                $this->assertTrue(preg_match('#^http://#', $url) == 0, do_lang('HTTPS_EMBED_PROBLEM', $url, $field_title));
            }
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testIncorrectHTTPSLinking($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            return;
        }

        global $SITE_INFO;

        if (empty($SITE_INFO['base_url'])) {
            $this->stateCheckSkipped('Base URL not configured');
            return;
        }

        $protocol = parse_url($SITE_INFO['base_url'], PHP_URL_SCHEME);
        if ($protocol == 'http') {
            return;
        }

        $domains = get_server_names(false);

        $page_links = $this->process_urls_into_page_links($urls_or_page_links);

        $html_segments = array();
        foreach ($page_links as $page_link) {
            $html = $this->get_page_content($page_link, $check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS);

            if ($html === null) {
                $this->stateCheckSkipped(do_lang('HC_PAGE_DOWNLOAD_ERROR', $page_link));
                continue;
            }

            $html_segments['[tt]' . $page_link . '[/tt]'] = $html;
        }

        if ($comcode_segments !== null) {
            foreach ($comcode_segments as $field_title => $comcode_segment) {
                $html_segments[$field_title] = static_evaluate_tempcode(comcode_to_tempcode($comcode_segment));
            }
        }

        foreach ($html_segments as $field_title => $html) {
            $urls = $this->get_link_urls_from_data($html, false);

            foreach ($urls as $url) {
                // Check
                $regexp = '#^http://(';
                foreach ($domains as $i => $domain) {
                    if ($i != 0) {
                        $regexp .= '|';
                    }
                    $regexp .= preg_quote($domain, '#');
                }
                $regexp .= ')[:/]#';
                $this->assertTrue(preg_match($regexp, $url) == 0, do_lang('HTTPS_LINKING_PROBLEM', $url, $field_title));
            }
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testSSLCorrectness($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null, $urls_or_page_links = null, $comcode_segments = null)
    {
        if ($check_context != CHECK_CONTEXT__LIVE_SITE) {
            return;
        }

        if ((addon_installed('ssl')) || (substr(get_base_url(), 0, 7) == 'https://')) {
            // If it's a problem with SSL verification in general
            for ($i = 0; $i < 3; $i++) { // Try a few times in case of some temporary network issue or DuckDuckGo issue
                $data = http_get_contents('https://duckduckgo.com/', array('trigger_error' => false));

                $ok = (($data !== null) && (strpos($data, '<html') !== false));
                if ($ok) {
                    break;
                }
                if (php_function_allowed('usleep')) {
                    usleep(5000000);
                }
            }
            $this->assertTrue($ok, 'Problem downloading HTTP requests by SSL');

            if ($ok) {
                // If it's a problem with SSL verification on our domain specifically
                $domains = get_server_names(false);
                foreach ($domains as $domain) {
                    if (get_value('disable_ssl_for__' . $domain) !== '1') {
                        $test_url = get_base_url(true) . '/data/empty.php';

                        delete_value('disable_ssl_for__' . $domain);
                        $data = http_get_contents($test_url, array('trigger_error' => false));
                        $ok1 = (($data !== null) && (strpos($data, '<html') !== false));

                        $msg = 'Problem detected with the [tt]' . $domain . '[/tt] SSL certificate';
                        if (!$ok1) {
                            set_value('disable_ssl_for__' . $domain, '1');
                            $data = http_get_contents($test_url, array('trigger_error' => false));
                            $ok2 = (($data !== null) && (strpos($data, '<html') !== false));

                            $this->assertTrue(!$ok2, $msg); // Issue with our SSL but not if verify is disabled, suggesting the problem is with verify

                            delete_value('disable_ssl_for__' . $domain);
                        } else {
                            $this->assertTrue(true, $msg); // No issue with our SSL
                        }
                    }
                }
            }
        }
    }
}
