<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_health_check_ecommerce extends Hook_Health_Check
{
    protected $category_label = 'API connections';

    /**
     * Standard hook run function to run this category of health checks.
     *
     * @param  ?array $sections_to_run Which check sections to run (null: all)
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     * @param  boolean $show_unusable_categories Whether to include categories that might not be accessible for some reason
     * @return array A pair: category label, list of results
     */
    public function run(?array $sections_to_run, int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null, bool $show_unusable_categories = false) : array
    {
        if (($show_unusable_categories) || (($check_context != CHECK_CONTEXT__INSTALL) && (addon_installed('ecommerce')))) {
            if (($show_unusable_categories) || (get_option('currency_api_key') != '')) {
                $this->process_checks_section('testCurrencyConnection', 'Currency conversions', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
            }

            require_code('ecommerce');
            if (($show_unusable_categories) || (get_option(ecommerce_test_mode() ? 'shipping_shippo_api_test' : 'shipping_shippo_api_live') != '')) {
                $this->process_checks_section('testShippoConnection', 'Shippo', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
            }

            $this->process_checks_section('testTaxServiceConnections', 'Tax Services', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass, $urls_or_page_links, $comcode_segments);
        }

        return [$this->category_label, $this->results];
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testCurrencyConnection(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            $this->log('Skipped; running on specific page links.');
            return;
        }

        require_code('currency');
        $test = currency_convert(100.00, 'MMK', 'GBP', CURRENCY_DISPLAY_RAW, 'conv_api');
        $this->assertTrue($test !== null && $test > 0.00, 'Expected GBP value to be more than 0.00, got ' . (($test === null) ? '(no result)' : float_format($test, 2)));
        $this->assertTrue($test !== null && $test < 110.00, 'Expected GBP value to be less than 110.00, got ' . (($test === null) ? '(no result)' : float_format($test, 2))); // GBP is worth *much* more
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testShippoConnection(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            $this->log('Skipped; running on specific page links.');
            return;
        }

        $shippo_token = get_option('shipping_shippo_api_test');
        if ((($use_test_data_for_pass === null) && (!ecommerce_test_mode())) || ($shippo_token == '')) {
            $shippo_token = get_option('shipping_shippo_api_live');
        }

        require_code('ecommerce');

        $url = 'https://api.goshippo.com/addresses/';
        $options = [
            'convert_to_internal_encoding' => true,
            'extra_headers' => [
                'Authorization' => 'ShippoToken ' . $shippo_token,
                'Shippo-API-Version' => SHIPPO_API_VERSION,
            ],
            'ignore_http_status' => true,
        ];
        $_response = cms_http_request($url, $options);
        $response = @json_decode($_response->data, true);

        if (is_array($response)) {
            $error_message = '';
            if (isset($response['messages'])) {
                foreach ($response['messages'] as $error_struct) {
                    if ($error_message != '') {
                        $error_message = '';
                    }
                    $error_message .= $error_struct['text'];
                }
            }

            if ($error_message == '') {
                $this->assertTrue(array_key_exists('results', $response) && is_array($response['results']), 'Did not get expected Shippo result list');
            } else {
                $this->assertTrue(false, 'Shippo error: ' . $error_message);
            }
        } else {
            $this->assertTrue(false, 'Shippo error: ' . $_response->message);
        }
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @param  ?array $urls_or_page_links List of URLs and/or page-links to operate on, if applicable (null: those configured)
     * @param  ?array $comcode_segments Map of field names to Comcode segments to operate on, if applicable (null: N/A)
     */
    public function testTaxServiceConnections(int $check_context, bool $manual_checks = false, bool $automatic_repair = false, ?bool $use_test_data_for_pass = null, ?array $urls_or_page_links = null, ?array $comcode_segments = null)
    {
        if ($check_context == CHECK_CONTEXT__INSTALL) {
            $this->log('Skipped; we are running from installer.');
            return;
        }
        if ($check_context == CHECK_CONTEXT__SPECIFIC_PAGE_LINKS) {
            $this->log('Skipped; running on specific page links.');
            return;
        }

        $hooks = find_all_hook_obs('systems', 'ecommerce_tax', 'Hook_ecommerce_tax_');
        foreach ($hooks as $ob) {
            if (method_exists($ob, 'health_check')) {
                $results = $ob->health_check();
                if ($results !== null) {
                    $this->assertTrue($results[0], $results[1]);
                }
            }
        }
    }
}
