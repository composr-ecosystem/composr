<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    calendar
 */

/**
 * Hook class.
 */
class Hook_commandr_command_run_scheduled_action
{
    /**
     * Run function for Commandr hooks.
     *
     * @param  array $options The options with which the command was called
     * @param  array $parameters The parameters with which the command was called
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return array Array of stdcommand, stdhtml, stdout, and stderr responses
     */
    public function run(array $options, array $parameters, object &$commandr_fs) : array
    {
        if (!addon_installed('calendar')) {
            return ['', '', '', do_lang('INTERNAL_ERROR')];
        }

        require_lang('calendar');

        if ((array_key_exists('h', $options)) || (array_key_exists('help', $options))) {
            return ['', do_command_help('run_scheduled_action', ['h'], [true, true, true]), '', ''];
        } else {
            // Error if first parameter not specified; we do not know which scheduled hook to run
            if (!array_key_exists(0, $parameters)) {
                return ['', '', '', do_lang('MISSING_PARAM', '1', 'run_scheduled_action')];
            }

            $hook_obs = find_all_hook_obs('systems', 'commandr_scheduled', 'Hook_commandr_scheduled_');

            // Error if the provided scheduled hook does not exist
            if (!array_key_exists($parameters[0], $hook_obs)) {
                return ['', '', '', do_lang('NOT_A_HOOK', '1')];
            }

            // Error if parameter 2 (id) does not exist
            if (!array_key_exists(1, $parameters)) {
                return ['', '', '', do_lang('MISSING_PARAM', '2', 'run_scheduled_action')];
            }

            $id = $parameters[1];

            // Get the required number of parameters for this hook
            $hook_info = $hook_obs[$parameters[0]]->info();
            if ($hook_info === null) {
                return ['', '', '', do_lang('NOT_A_HOOK', '1')];
            }
            $required_parameters = $hook_info['required_parameters'];

            // Parameter 3 is json_encoded as an array to account for variable types and lengths. Decode it.
            $_parameters = isset($parameters[2]) ? json_decode($parameters[2], true) : [];

            // Parameters check
            if ($required_parameters > 0) {
                for ($i = 0; $i < $required_parameters; $i++) {
                    if (!array_key_exists($i, $_parameters)) {
                        return ['', '', '', do_lang('MISSING_PARAM_JSON', strval($i), strval($i + 1), 'run_scheduled_action')];
                    }
                }
            }

            return $hook_obs[$parameters[0]]->run($options, $id, $_parameters, $commandr_fs);
        }
    }
}
