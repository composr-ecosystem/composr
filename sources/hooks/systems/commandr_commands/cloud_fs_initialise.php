<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    commandr
 */

/*EXTRA FUNCTIONS: symlink|readlink*/

/**
 * Hook class.
 */
class Hook_commandr_command_cloud_fs_initialise
{
    /**
     * Run function for Commandr hooks.
     *
     * @param  array $options The options with which the command was called
     * @param  array $parameters The parameters with which the command was called
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return array Array of stdcommand, stdhtml, stdout, and stderr responses
     */
    public function run(array $options, array $parameters, object &$commandr_fs) : array
    {
        if ((array_key_exists('h', $options)) || (array_key_exists('help', $options))) {
            return ['', do_command_help('commands', ['h'], []), '', ''];
        } else {
            require_code('cloud_fs');

            if (!php_function_allowed('symlink')) {
                return ['', '', '', do_lang('_DISABLED_FUNCTION', 'symlink')];
            }

            if (!php_function_allowed('readlink')) {
                return ['', '', '', do_lang('_DISABLED_FUNCTION', 'readlink')];
            }

            $dry_run = !array_key_exists('y', $options);

            disable_php_memory_limit();
            cms_disable_time_limit();

            require_code('files2');

            $operations = [];
            $errors = [];

            $remote_storage_directory = get_remote_storage_directory(get_file_base(false));
            if (file_exists($remote_storage_directory)) {
                $remote_storage_directory = realpath($remote_storage_directory);
            } else {
                if (!$dry_run) {
                    make_missing_directory($remote_storage_directory);
                    fix_permissions($remote_storage_directory);
                }
                $operations[] = 'mkdir -p ' . cms_escapeshellarg($remote_storage_directory);
            }

            // Find any directories/files under a CMS_CLOUD__REMOTE scope
            $results = [];
            $file_base = realpath(get_file_base(false));
            $this->search_filesystem($remote_storage_directory, $file_base, '', $results);

            // Move identified directories/files under remote storage directory
            foreach ($results as $short_path => $long_path) {
                $destination_long_path = $remote_storage_directory . '/' . $short_path;

                // Make parent directories as needed
                if (!file_exists(dirname($destination_long_path))) {
                    if (!$dry_run) {
                        make_missing_directory(dirname($destination_long_path), false);
                    }
                    $operations[] = 'mkdir -p ' . cms_escapeshellarg(dirname($destination_long_path));
                }

                // Move
                if (!file_exists($destination_long_path)) {
                    $dir = is_dir($long_path);

                    if (!$dry_run) {
                        rename($long_path, $destination_long_path);
                    }
                    $operations[] = 'mv ' . cms_escapeshellarg($long_path) . ' ' . cms_escapeshellarg($destination_long_path);

                    // Symlink
                    if ($dir) {
                        if (!$dry_run) {
                            symlink($destination_long_path, $long_path);
                        }
                        $operations[] = 'ln -s ' . cms_escapeshellarg($destination_long_path) . ' ' . cms_escapeshellarg($long_path);
                    }
                } else {
                    $errors[] = do_lang('REMOTE_STORAGE_DUPLICATION_ISSUE', $long_path, $destination_long_path);
                }
            }

            if (empty($operations)) {
                $operations[] = '(' . do_lang('NONE') . ')';
            }

            $stdout = do_lang($dry_run ? 'REMOTE_STORAGE_OPERATIONS_DRY_RUN' : 'REMOTE_STORAGE_OPERATIONS_REAL', implode("\n", $operations));
            return ['', '', $stdout, implode("\n", $errors)];
        }
    }

    /**
     * Recurse through the filesystem finding directories/files under remote storage directories.
     *
     * @param  PATH $remote_storage_directory The remote storage directory
     * @param  PATH $long_path The full filesystem path we are currently recursing under
     * @param  PATH $short_path The relative path we are currently recursing under
     * @param  array $results A mapping of short path to long path, returned by reference
     */
    protected function search_filesystem(string $remote_storage_directory, string $long_path, string $short_path, array &$results)
    {
        global $CMS_CLOUD_BINDINGS;

        $dh = @opendir($long_path);
        if ($dh !== false) {
            while (($f = readdir($dh)) !== false) {
                if (($f == '.') || ($f == '..')) {
                    continue;
                }

                $_short_path = (($short_path == '') ? '' : ($short_path . '/')) . $f;
                $_long_path = $long_path . '/' . $f;

                // Is it already a symlink to under the remote storage?
                if ((is_link($_long_path)) && (substr(readlink($_long_path), 0, strlen($remote_storage_directory) + 1) == $remote_storage_directory . '/')) {
                    continue;
                }

                // Does it match a CMS_CLOUD__REMOTE pattern?
                $matches_remote_pattern = false;
                foreach ($CMS_CLOUD_BINDINGS as $regexp => $storage_type) {
                    if (preg_match($regexp, $_short_path) != 0) {
                        if ($storage_type == CMS_CLOUD__REMOTE) {
                            $matches_remote_pattern = true;
                        }
                        break;
                    }
                }
                if ($matches_remote_pattern) {
                    $results[$_short_path] = $_long_path;

                    continue;
                }

                // Recurse
                if (is_dir($_long_path)) {
                    $this->search_filesystem($remote_storage_directory, $_long_path, $_short_path, $results);
                }
            }

            closedir($dh);
        }
    }
}
