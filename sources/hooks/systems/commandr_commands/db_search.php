<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    commandr
 */

// Also see fs_search and find and grep.

// We do not support direct replacing because mindless search & replace seems too dangerous.

/**
 * Hook class.
 */
class Hook_commandr_command_db_search
{
    /**
     * Run function for Commandr hooks.
     *
     * @param  array $options The options with which the command was called
     * @param  array $parameters The parameters with which the command was called
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return array Array of stdcommand, stdhtml, stdout, and stderr responses
     */
    public function run(array $options, array $parameters, object &$commandr_fs) : array
    {
        if ((array_key_exists('h', $options)) || (array_key_exists('help', $options))) {
            return ['', do_command_help('db_search', ['h'], [true, true]), '', ''];
        }

        if (!array_key_exists(0, $parameters)) {
            return ['', '', '', do_lang('MISSING_PARAM', '1', 'db_search')];
        }

        $search = $parameters[0];

        // Discern $fields and $replace...

        $fields = [];
        $replace = null;

        $i = 1;
        while (array_key_exists($i, $parameters)) {
            $more_fields = $this->find_fields_of($parameters[$i]);
            if (!empty($more_fields)) {
                $fields = array_merge(
                    $fields,
                    $more_fields
                );
            } else {
                $replace = $parameters[$i];
            }

            $i++;
        }

        // Could not find any fields, revert to default types...

        if (empty($fields)) {
            $field_types = [
                'LONG_TRANS',
                'SHORT_TRANS',
                'LONG_TRANS__COMCODE',
                'SHORT_TRANS__COMCODE',
                'SHORT_TEXT',
                'LONG_TEXT',
                'ID_TEXT',
                'MINIID_TEXT',
                'IP',
                'LANGUAGE_NAME',
                'URLPATH' ,
            ];
            foreach ($field_types as $field_type) {
                $fields = array_merge($fields, $this->find_fields_of($field_type));
            }
        }

        // Do search...

        $sql_for = [];
        $out = '';

        foreach ($fields as $field) {
            $db = get_db_for($field['m_table']);
            $ofs = $db->query_select($field['m_table'], ['*'], [$field['m_name'] => $search]);

            if (!empty($ofs)) {
                $out .= '<h2>' . escape_html($field['m_table']) . ':' . escape_html($field['m_name']) . '</h2>';

                foreach ($ofs as $of) {
                    $out .= '<table class="results-table">';
                    $val = null;
                    foreach ($of as $key => $val) {
                        if (!is_string($val)) {
                            $val = strval($val);
                        }
                        $out .= '<tr><td>' . escape_html($key) . '</td><td>' . escape_html($val) . '</td></tr>';
                    }
                    $out .= '</table>';
                }

                $sql_for[] = [$db->get_table_prefix() . $field['m_table'], $field['m_name']];
            }
        }

        if ($out == '') {
            $out = do_lang('NONE');
        }

        // Generate replacement SQL...

        if (($replace !== null) && (!empty($sql_for))) {
            $_out = '';
            foreach ($sql_for as $table_bits) {
                $_out .= escape_html('UPDATE ' . $table_bits[0] . ' SET ' . $table_bits[1] . '=' . db_function('REPLACE', [$table_bits[1], "'" . db_escape_string($search) . "'", "'" . db_escape_string($replace) . "'"]) . ';') . '<br />';
            }
            $out .= '<br /><br />' . do_lang('DATABASE_UPDATE_QUERY', $_out);
        }

        // ---

        return ['', $out, '', ''];
    }

    /**
     * Find fields of a particular field type.
     *
     * @param  string $field_type Field type
     * @return array List of fields
     */
    protected function find_fields_of(string $field_type) : array
    {
        if (preg_match('#^[A-Z_]+$#', $field_type) != 0) {
            $more_fields = array_merge(
                $GLOBALS['SITE_DB']->query_select('db_meta', ['m_name', 'm_table'], ['m_type' => $field_type]),
                $GLOBALS['SITE_DB']->query_select('db_meta', ['m_name', 'm_table'], ['m_type' => '?' . $field_type]),
                $GLOBALS['SITE_DB']->query_select('db_meta', ['m_name', 'm_table'], ['m_type' => '*' . $field_type])
            );
        } else {
            $more_fields = [];
        }
        return $more_fields;
    }
}
