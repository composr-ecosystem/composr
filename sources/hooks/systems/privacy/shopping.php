<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    shopping
 */

/**
 * Hook class.
 */
class Hook_privacy_shopping extends Hook_privacy_base
{
    /**
     * Find privacy details.
     *
     * @return ?array A map of privacy details in a standardised format (null: disabled)
     */
    public function info()
    {
        if (!addon_installed('shopping')) {
            return null;
        }

        return array(
            'cookies' => array(
            ),

            'positive' => array(
            ),

            'general' => array(
                array(
                    'heading' => 'Information storage',
                    'action' => 'Use of the shopping cart may cause non-logged-in-user\'s sessions to stick around for a longer than normal period of time.',
                    'reason' => 'To keep the contents of the shopping cart from being lost.',
                ),
            ),

            'database_records' => array(
                'shopping_logging' => array(
                    'timestamp_field' => 'l_date_and_time',
                    'retention_days' => intval(get_option('website_activity_store_time')),
                    'retention_handle_method' => PRIVACY_METHOD_delete,
                    'member_id_fields' => array('l_member_id'),
                    'ip_address_fields' => array('l_ip'),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD_delete,
                ),
                'shopping_cart' => array(
                    'timestamp_field' => null,
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD_leave,
                    'member_id_fields' => array('ordered_by'),
                    'ip_address_fields' => array(),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD_delete,
                ),
                'shopping_order' => array(
                    'timestamp_field' => 'add_date',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD_leave,
                    'member_id_fields' => array('c_member'),
                    'ip_address_fields' => array(),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => db_string_not_equal_to('order_status', 'payment_received') . ' AND ' . db_string_not_equal_to('order_status', 'onhold'),
                    'removal_default_handle_method' => PRIVACY_METHOD_anonymise,
                ),
            ),
        );
    }

    /**
     * Serialise a row.
     *
     * @param ID_TEXT Table name
     * @param array Row raw from the database
     * @return array Row in a cleanly serialised format
     */
    public function serialise($table_name, $row)
    {
        $ret = serialise($table_name, $row);

        switch ($table_name) {
            case 'shopping_order':
                $ret += array(
                    'details' => $GLOBALS['SITE_DB']->query_select('shopping_order_details', array('*'), array('order_id' => $row['id'])),
                    'addresses' => $GLOBALS['SITE_DB']->query_select('shopping_order_addresses', array('*'), array('order_id' => $row['id'])),
                );
                break;
        }

        return $ret;
    }

    /**
     * Delete a row.
     *
     * @param ID_TEXT Table name
     * @param array Row raw from the database
     */
    public function delete($table_name, $row)
    {
        switch ($table_name) {
            case 'shopping_order':
                $GLOBALS['SITE_DB']->query_delete('shopping_order_details', array('order_id' => $row['id']));
                $GLOBALS['SITE_DB']->query_delete('shopping_order_addresses', array('order_id' => $row['id']));
                $GLOBALS['SITE_DB']->query_delete('shopping_order', array('id' => $row['id']), '', 1);
                break;

            default:
                $this->delete($table_name, $row);
                break;
        }
    }
}
