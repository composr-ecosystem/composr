<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    chat
 */

/**
 * Hook class.
 */
class Hook_privacy_chat extends Hook_privacy_base
{
    /**
     * Find privacy details.
     *
     * @return ?array A map of privacy details in a standardised format (null: disabled)
     */
    public function info()
    {
        if (!addon_installed('chat')) {
            return null;
        }

        require_code('chat');
        require_lang('chat');

        return [
            'cookies' => [
                'software_chat_prefs' => [
                    'reason' => do_lang_tempcode('COOKIE_software_chat_prefs'),
                ],
                'last_chat_msg_*' => [
                    'reason' => do_lang_tempcode('COOKIE_last_chat_msg'),
                ],
            ],

            'positive' => [
            ],

            'general' => [
            ],

            'database_records' => [
                'chat_friends' => [
                    'timestamp_field' => 'date_and_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'member_id_fields' => ['member_likes', 'member_liked'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__DELETE,
                ],
                'chat_events' => [
                    'timestamp_field' => 'e_date_and_time',
                    'retention_days' => intval(ceil(floatval(CHAT_EVENT_PRUNE) / 60.0 / 60.0 / 24.0)),
                    'retention_handle_method' => PRIVACY_METHOD__DELETE,
                    'member_id_fields' => ['e_member_id'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__DELETE,
                ],
                'chat_active' => [
                    'timestamp_field' => 'date_and_time',
                    'retention_days' => intval(ceil(floatval(CHAT_ACTIVITY_PRUNE) / 60.0 / 60.0 / 24.0)),
                    'retention_handle_method' => PRIVACY_METHOD__DELETE,
                    'member_id_fields' => ['member_id'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__DELETE,
                ],
                'chat_messages' => [
                    'timestamp_field' => 'date_and_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'member_id_fields' => ['member_id'],
                    'ip_address_fields' => ['ip_address'],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
                'chat_blocking' => [
                    'timestamp_field' => 'date_and_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'member_id_fields' => ['member_blocker', 'member_blocked'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__DELETE,
                ],
                'chat_sound_effects' => [
                    'timestamp_field' => null,
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'member_id_fields' => ['s_member'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__DELETE,
                ],
            ],
        ];
    }

    /**
     * Serialise a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $row Row raw from the database
     * @return array Row in a cleanly serialised format
     */
    public function serialise($table_name, $row)
    {
        $ret = parent::serialise($table_name, $row);

        switch ($table_name) {
            case 'chat_friends':
                $ret += [
                    'member_likes__dereferenced' => $GLOBALS['FORUM_DRIVER']->get_username($row['member_likes']),
                    'member_liked__dereferenced' => $GLOBALS['FORUM_DRIVER']->get_username($row['member_liked']),
                ];
                break;

            case 'chat_events':
                $ret += [
                    'e_room_id__dereferenced' => $GLOBALS['SITE_DB']->query_select_value_if_there('chat_rooms', 'room_name', ['id' => $row['e_room_id']]),
                ];
                break;

            case 'chat_active':
                $ret += [
                    'room_id__dereferenced' => $GLOBALS['SITE_DB']->query_select_value_if_there('chat_rooms', 'room_name', ['id' => $row['room_id']]),
                ];
                break;

            case 'chat_messages':
                $ret += [
                    'room_id__dereferenced' => $GLOBALS['SITE_DB']->query_select_value_if_there('chat_rooms', 'room_name', ['id' => $row['room_id']]),
                ];
                break;

            case 'chat_blocking':
                $ret += [
                    'member_blocker__dereferenced' => $GLOBALS['FORUM_DRIVER']->get_username($row['member_blocker']),
                    'member_blocked__dereferenced' => $GLOBALS['FORUM_DRIVER']->get_username($row['member_blocked']),
                ];
                break;
        }

        return $ret;
    }
}
