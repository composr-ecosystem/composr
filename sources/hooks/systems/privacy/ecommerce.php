<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_privacy_ecommerce extends Hook_privacy_base
{
    /**
     * Find privacy details.
     *
     * @return ?array A map of privacy details in a standardised format (null: disabled)
     */
    public function info()
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        return array(
            'cookies' => array(
            ),

            'positive' => array(
            ),

            'general' => array(
            ),

            'database_records' => array(
                'ecom_sales' => array(
                    'timestamp_field' => 'date_and_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD_leave,
                    'member_id_fields' => array('member_id'),
                    'ip_address_fields' => array(),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD_delete,
                ),
                'ecom_subscriptions' => array(
                    'timestamp_field' => 's_time',
                    'retention_days' => intval(get_option('website_activity_store_time')),
                    'retention_handle_method' => PRIVACY_METHOD_delete,
                    'member_id_fields' => array('s_member_id'),
                    'ip_address_fields' => array(),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => db_string_not_equal_to('m_state', 'active'),
                    'removal_default_handle_method' => PRIVACY_METHOD_delete,
                ),
                'ecom_invoices' => array(
                    'timestamp_field' => 'i_time',
                    'retention_days' => intval(get_option('website_activity_store_time')),
                    'retention_handle_method' => PRIVACY_METHOD_delete,
                    'member_id_fields' => array('i_member_id'),
                    'ip_address_fields' => array(),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => db_string_equal_to('i_state', 'paid') . ' OR ' . db_string_equal_to('i_state', 'delivered'),
                    'removal_default_handle_method' => PRIVACY_METHOD_anonymise,
                ),
                'ecom_transactions' => array(
                    'timestamp_field' => 't_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD_leave,
                    'member_id_fields' => array('t_member_id'),
                    'ip_address_fields' => array(),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD_delete,
                ),
                'ecom_trans_expecting' => array(
                    'timestamp_field' => 'e_time',
                    'retention_days' => 31,
                    'retention_handle_method' => PRIVACY_METHOD_delete,
                    'member_id_fields' => array('e_member_id'),
                    'ip_address_fields' => array('e_ip_address'),
                    'email_fields' => array(),
                    'additional_anonymise_fields' => array(),
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD_delete,
                ),
                'ecom_trans_addresses' => array(
                    'timestamp_field' => null,
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD_leave, // Handled with shopping_order, can't query by date
                    'member_id_fields' => array(),
                    'ip_address_fields' => array(),
                    'email_fields' => array('a_email'),
                    'additional_anonymise_fields' => array('a_firstname', 'a_lastname', 'a_street_address', 'a_city', 'a_state', 'a_post_code', 'a_country', 'a_phone'),
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD_delete,
                ),
            ),
        );
    }

    /**
     * Serialise a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $row Row raw from the database
     * @return array Row in a cleanly serialised format
     */
    public function serialise($table_name, $row)
    {
        $ret = $this->serialise($table_name, $row);

        switch ($table_name) {
            case 'ecom_sales':
                require_code('ecommerce');
                $type_code = $GLOBALS['SITE_DB']->query_select_value_if_there('ecom_transactions', 't_type_code', array('id' => $row['txn_id']));
                if ($type_code !== null) {
                    list($product_info) = find_product_details($type_code);
                    if ($product_info !== null) {
                        $ret += array(
                            'txn_type_code__dereferenced' => $product_info['item_name'],
                        );
                    }
                }
                break;

            case 'ecom_subscriptions':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['s_type_code']);
                if ($product_info !== null) {
                    $ret += array(
                        's_type_code__dereferenced' => $product_info['item_name'],
                    );
                }
                break;

            case 'ecom_invoices':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['i_type_code']);
                if ($product_info !== null) {
                    $ret += array(
                        'i_type_code__dereferenced' => $product_info['item_name'],
                    );
                }
                break;

            case 'ecom_transactions':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['t_type_code']);
                if ($product_info !== null) {
                    $ret += array(
                        't_type_code__dereferenced' => $product_info['item_name'],
                    );
                }
                break;

            case 'ecom_trans_expecting':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['e_type_code']);
                if ($product_info !== null) {
                    $ret += array(
                        'e_type_code__dereferenced' => $product_info['item_name'],
                    );
                }
                break;
        }

        return $ret;
    }

    /**
     * Delete a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $row Row raw from the database
     */
    public function delete($table_name, $row)
    {
        switch ($table_name) {
            case 'ecom_transactions':
                $GLOBALS['SITE_DB']->query_delete('ecom_trans_addresses', array('a_txn_id' => $row['id']));
                $GLOBALS['SITE_DB']->query_delete('ecom_transactions', array('id' => $row['id']), '', 1);
                break;

            default:
                $this->delete($table_name, $row);
                break;
        }
    }
}
