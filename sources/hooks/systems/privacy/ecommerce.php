<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_privacy_ecommerce extends Hook_privacy_base
{
    /**
     * Find privacy details.
     *
     * @return ?array A map of privacy details in a standardised format (null: disabled)
     */
    public function info() : ?array
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        require_lang('ecommerce');

        $tax_service = get_option('tax_api_service');
        $tax_service_label = do_lang('UNKNOWN');
        if (hook_exists('systems', 'ecommerce_tax', $tax_service)) {
            $ob = get_hook_ob('systems', 'ecommerce_tax', $tax_service, 'Hook_ecommerce_tax_');
            if ($ob !== null) {
                $tax_service_label = $ob->get_tax_service_label();
            }
        }

        $payment_gateway = get_option('payment_gateway');
        if ($payment_gateway != '') {
            $payment_gateway_label = do_lang_tempcode('PAYMENT_GATEWAY_' . $payment_gateway);
        } else {
            $payment_gateway_label = do_lang_tempcode('NA_EM');
        }

        return [
            'label' => 'ecommerce:ECOMMERCE',

            'description' => 'ecommerce:DESCRIPTION_PRIVACY_ECOMMERCE',

            'cookies' => [
            ],

            'positive' => [
            ],

            'general' => [
                (get_option('shipping_shippo_api_live') == '') ? null : [
                    'heading' => do_lang('INFORMATION_TRANSFER_ECOMMERCE'),
                    'action' => do_lang_tempcode('PRIVACY_ACTION_shippo'),
                    'reason' => do_lang_tempcode('PRIVACY_REASON_shippo'),
                ],
                ($tax_service == 'composr') ? null : [
                    'heading' => do_lang('INFORMATION_TRANSFER_ECOMMERCE'),
                    'action' => do_lang_tempcode('PRIVACY_ACTION_TAX', escape_html($tax_service_label)),
                    'reason' => do_lang_tempcode('PRIVACY_REASON_TAX'),
                ],
                ($payment_gateway == '') ? null : [
                    'heading' => do_lang('INFORMATION_TRANSFER_ECOMMERCE'),
                    'action' => do_lang_tempcode('PRIVACY_ACTION_payments', $payment_gateway_label, escape_html(get_site_name())),
                    'reason' => do_lang_tempcode('PRIVACY_REASON_payments', $payment_gateway_label, escape_html(get_site_name())),
                ],
            ],

            'database_records' => [
                'ecom_sales' => [
                    'timestamp_field' => 'date_and_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'owner_id_field' => 'member_id',
                    'additional_member_id_fields' => [],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'username_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
                'ecom_subscriptions' => [
                    'timestamp_field' => 's_time',
                    'retention_days' => intval(get_option('website_activity_store_time')),
                    'retention_handle_method' => PRIVACY_METHOD__DELETE,
                    'owner_id_field' => 's_member_id',
                    'additional_member_id_fields' => [],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'username_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => db_string_not_equal_to('s_state', 'active'),
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
                'ecom_invoices' => [
                    'timestamp_field' => 'i_time',
                    'retention_days' => intval(get_option('website_activity_store_time')),
                    'retention_handle_method' => PRIVACY_METHOD__DELETE,
                    'owner_id_field' => 'i_member_id',
                    'additional_member_id_fields' => [],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'username_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => db_string_equal_to('i_state', 'paid') . ' OR ' . db_string_equal_to('i_state', 'delivered'),
                    'removal_default_handle_method' => PRIVACY_METHOD__ANONYMISE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
                'ecom_transactions' => [
                    'timestamp_field' => 't_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'owner_id_field' => 't_member_id',
                    'additional_member_id_fields' => [],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'username_fields' => [],
                    'additional_anonymise_fields' => ['t_session_id'],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__ANONYMISE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
                'ecom_trans_expecting' => [
                    'timestamp_field' => 'e_time',
                    'retention_days' => 31,
                    'retention_handle_method' => PRIVACY_METHOD__DELETE,
                    'owner_id_field' => 'e_member_id',
                    'additional_member_id_fields' => [],
                    'ip_address_fields' => ['e_ip_address'],
                    'email_fields' => [],
                    'username_fields' => [],
                    'additional_anonymise_fields' => ['e_session_id'],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
                'ecom_trans_addresses' => [
                    'timestamp_field' => null,
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE, // Handled with shopping_order, can't query by date
                    'owner_id_field' => null,
                    'additional_member_id_fields' => [],
                    'ip_address_fields' => [],
                    'email_fields' => ['a_email'],
                    'username_fields' => [],
                    'additional_anonymise_fields' => ['a_firstname', 'a_lastname', 'a_street_address', 'a_city', 'a_state', 'a_post_code', 'a_country', 'a_phone'],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
            ],
        ];
    }

    /**
     * Serialise a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $row Row raw from the database
     * @return array Row in a cleanly serialised format
     */
    public function serialise(string $table_name, array $row) : array
    {
        $ret = parent::serialise($table_name, $row);

        switch ($table_name) {
            case 'ecom_sales':
                require_code('ecommerce');
                $type_code = $GLOBALS['SITE_DB']->query_select_value_if_there('ecom_transactions', 't_type_code', ['id' => $row['txn_id']]);
                if ($type_code !== null) {
                    list($product_info) = find_product_details($type_code);
                    if ($product_info !== null) {
                        $ret += [
                            'txn_type_code__dereferenced' => $product_info['item_name'],
                        ];
                    }
                }
                break;

            case 'ecom_subscriptions':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['s_type_code']);
                if ($product_info !== null) {
                    $ret += [
                        's_type_code__dereferenced' => $product_info['item_name'],
                    ];
                }
                break;

            case 'ecom_invoices':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['i_type_code']);
                if ($product_info !== null) {
                    $ret += [
                        'i_type_code__dereferenced' => $product_info['item_name'],
                    ];
                }
                break;

            case 'ecom_transactions':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['t_type_code']);
                if ($product_info !== null) {
                    $ret += [
                        't_type_code__dereferenced' => $product_info['item_name'],
                    ];
                }
                break;

            case 'ecom_trans_expecting':
                require_code('ecommerce');
                list($product_info) = find_product_details($row['e_type_code']);
                if ($product_info !== null) {
                    $ret += [
                        'e_type_code__dereferenced' => $product_info['item_name'],
                    ];
                }
                break;
        }

        return $ret;
    }

    /**
     * Delete a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $table_details Details of the table from the info function
     * @param  array $row Row raw from the database
     */
    public function delete(string $table_name, array $table_details, array $row)
    {
        switch ($table_name) {
            case 'ecom_transactions':
                $GLOBALS['SITE_DB']->query_delete('ecom_trans_addresses', ['a_txn_id' => $row['id']]);
                $GLOBALS['SITE_DB']->query_delete('ecom_transactions', ['id' => $row['id']], '', 1);
                break;

            default:
                parent::delete($table_name, $table_details, $row);
                break;
        }
    }
}
