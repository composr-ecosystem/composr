<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    quizzes
 */

/**
 * Hook class.
 */
class Hook_privacy_quizzes extends Hook_privacy_base
{
    /**
     * Find privacy details.
     *
     * @return ?array A map of privacy details in a standardised format (null: disabled)
     */
    public function info() : ?array
    {
        if (!addon_installed('quizzes')) {
            return null;
        }

        return [
            'cookies' => [
            ],

            'positive' => [
            ],

            'general' => [
            ],

            'database_records' => [
                'quizzes' => [
                    'timestamp_field' => 'q_add_date',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'member_id_fields' => ['q_submitter'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__ANONYMISE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
                'quiz_member_last_visit' => [
                    'timestamp_field' => 'v_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'member_id_fields' => ['v_member_id'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__DELETE,
                ],
                'quiz_entries' => [
                    'timestamp_field' => 'q_time',
                    'retention_days' => null,
                    'retention_handle_method' => PRIVACY_METHOD__LEAVE,
                    'member_id_fields' => ['q_member'],
                    'ip_address_fields' => [],
                    'email_fields' => [],
                    'additional_anonymise_fields' => [],
                    'extra_where' => null,
                    'removal_default_handle_method' => PRIVACY_METHOD__DELETE,
                    'allowed_handle_methods' => PRIVACY_METHOD__ANONYMISE | PRIVACY_METHOD__DELETE,
                ],
            ],
        ];
    }

    /**
     * Serialise a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $row Row raw from the database
     * @return array Row in a cleanly serialised format
     */
    public function serialise(string $table_name, array $row) : array
    {
        $ret = parent::serialise($table_name, $row);

        switch ($table_name) {
            case 'quiz_member_last_visit':
                $name = $GLOBALS['SITE_DB']->query_select_value_if_there('quizzes', 'q_name', ['id' => $row['v_quiz_id']]);
                if ($name !== null) {
                    $ret += [
                        'v_quiz_id__dereferenced' => get_translated_text($name),
                    ];
                }
                break;
            case 'quiz_entries':
                $name = $GLOBALS['SITE_DB']->query_select_value_if_there('quizzes', 'q_name', ['id' => $row['q_quiz']]);
                if ($name !== null) {
                    require_code('quiz');
                    require_lang('quiz');
                    $scoring = score_quiz($row['id']);
                    $ret += [
                        'q_quiz__dereferenced' => get_translated_text($name),
                        'given_answers' => $scoring[3],
                    ];
                }
                break;
        }

        return $ret;
    }

    /**
     * Delete a row.
     *
     * @param  ID_TEXT $table_name Table name
     * @param  array $row Row raw from the database
     */
    public function delete(string $table_name, array $row)
    {
        require_lang('quiz');

        switch ($table_name) {
            case 'quizzes':
                require_code('quiz2');
                delete_quiz($row['id']);
                break;

            case 'quiz_entries':
                $GLOBALS['SITE_DB']->query_delete('quiz_entry_answer', ['q_entry' => $row['id']]);
                parent::delete($table_name, $row);
                break;

            default:
                parent::delete($table_name, $row);
                break;
        }
    }
}
