<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    cns_forum
 */

/**
 * Hook class.
 */
class Hook_notification_cns_new_pt extends Hook_Notification
{
    /**
     * Find a bitmask of settings (e-mail, SMS, etc) a notification code supports for listening on.
     *
     * @param  ID_TEXT $notification_code Notification code
     * @return integer Allowed settings
     */
    public function allowed_settings($notification_code)
    {
        $ret = A__ALL & ~A_INSTANT_PT;
        if (get_option('pt_notifications_as_web') == '0') {
            $ret = $ret & ~A_WEB_NOTIFICATION;
        }
        return $ret;
    }

    /**
     * Get a list of all the notification codes this hook can handle.
     * (Addons can define hooks that handle whole sets of codes, so hooks are written so they can take wide authority).
     *
     * @return array List of codes (mapping between code names, and a pair: section and labelling for those codes)
     */
    public function list_handled_codes()
    {
        if (get_forum_type() != 'cns') {
            return [];
        }

        if (!addon_installed('cns_forum')) {
            return [];
        }

        $list = [];
        $list['cns_new_pt'] = [do_lang('MESSAGES'), do_lang('cns:NOTIFICATION_TYPE_cns_new_pt')];
        return $list;
    }

    /**
     * Get a list of members who have enabled this notification (i.e. have permission to AND have chosen to or are defaulted to).
     *
     * @param  ID_TEXT $notification_code Notification code
     * @param  ?SHORT_TEXT $category The category within the notification code (null: none)
     * @param  ?array $to_member_ids List of member IDs we are restricting to (null: no restriction). This effectively works as a intersection set operator against those who have enabled.
     * @param  ?integer $from_member_id The member ID doing the sending. Either a MEMBER or a negative number (e.g. A_FROM_SYSTEM_UNPRIVILEGED) (null: current member)
     * @param  integer $start Start position (for pagination)
     * @param  integer $max Maximum (for pagination)
     * @return array A pair: Map of members to their notification setting, and whether there may be more
     */
    public function list_members_who_have_enabled($notification_code, $category = null, $to_member_ids = null, $from_member_id = null, $start = 0, $max = 300)
    {
        $members = $this->_all_members_who_have_enabled($notification_code, $category, $to_member_ids, $start, $max);
        if (empty($to_member_ids)) { // Only if we're not actually sending a PT now (notification should happen if sending a PT to someone who can't send them, with default settings)
            $members = $this->_all_members_who_have_enabled_with_privilege($members, 'use_pt', $notification_code, $category, $to_member_ids, $start, $max);
        }
        $members = $this->_all_members_who_have_enabled_with_zone_access($members, 'forum', $notification_code, $category, $to_member_ids, $start, $max);

        return $members;
    }
}
