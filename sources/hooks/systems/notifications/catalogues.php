<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    catalogues
 */

/**
 * Hook class.
 */
class Hook_notification_catalogues extends Hook_Notification
{
    /**
     * Find whether a handled notification code supports categories.
     * (Content types, for example, will define notifications on specific categories, not just in general. The categories are interpreted by the hook and may be complex. E.g. it might be like a regexp match, or like FORUM:3 or TOPIC:100).
     *
     * @param  ID_TEXT $notification_code Notification code
     * @return boolean Whether it does
     */
    public function supports_categories(string $notification_code) : bool
    {
        if (substr($notification_code, 0, strlen('catalogue_entry__')) == 'catalogue_entry__') {
            return true;
        }
        return false;
    }

    /**
     * Standard function to create the standardised category tree.
     *
     * @param  ID_TEXT $notification_code Notification code
     * @param  ?ID_TEXT $id The ID of where we're looking under (null: N/A)
     * @return array Tree structure
     */
    public function create_category_tree(string $notification_code, ?string $id) : array
    {
        if (!addon_installed('catalogues')) {
            return [];
        }

        $filtered = [];

        if (substr($notification_code, 0, strlen('catalogue_entry__')) == 'catalogue_entry__') {
            require_code('catalogues');

            $name = substr($notification_code, strlen('catalogue_entry__'));

            $total = $GLOBALS['SITE_DB']->query_select_value('catalogue_categories', 'COUNT(*)', ['c_name' => $name]);
            if ($total > intval(get_option('general_safety_listing_limit'))/*reasonable limit*/) {
                return parent::create_category_tree($notification_code, $id); // Too many, so just allow removing UI
            }

            $page_links = get_catalogue_category_tree($name, ($id === null) ? null : intval($id), '', null, ($id === null) ? 0 : 1);
            foreach ($page_links as $p) {
                if (strval($p['id']) !== $id) {
                    $filtered[] = $p;
                }
            }
        }

        return $filtered;
    }

    /**
     * Find the initial setting that members have for a notification code (only applies to the member_could_potentially_enable members).
     *
     * @param  ID_TEXT $notification_code Notification code
     * @param  ?SHORT_TEXT $category The category within the notification code (null: none)
     * @param  MEMBER $member_id The member the notification would be for
     * @return integer Initial setting
     */
    public function get_initial_setting(string $notification_code, ?string $category, int $member_id) : int
    {
        if (substr($notification_code, 0, strlen('catalogue_entry__')) == 'catalogue_entry__') {
            return A_NA;
        }
        return A__STATISTICAL;
    }

    /**
     * Get a list of all the notification codes this hook can handle.
     * (Addons can define hooks that handle whole sets of codes, so hooks are written so they can take wide authority).
     *
     * @return array List of codes (mapping between code names, and a pair: section and labelling for those codes)
     */
    public function list_handled_codes() : array
    {
        if (!addon_installed('catalogues')) {
            return [];
        }

        $list = [];
        $catalogues = $GLOBALS['SITE_DB']->query('SELECT c_name,c_title FROM ' . get_table_prefix() . 'catalogues WHERE c_name NOT LIKE \'\_%\'');
        foreach ($catalogues as $catalogue) {
            $catalogue_name = $catalogue['c_name'];
            $nl = do_lang('catalogues:NOTIFICATION_TYPE_catalogue_entry__' . $catalogue_name, null, null, null, null, false);
            if ($nl === null) {
                $nl = do_lang('catalogues:NOTIFICATION_TYPE_catalogue_entry', get_translated_text($catalogue['c_title']));
            }
            $list['catalogue_entry__' . $catalogue_name] = [do_lang('CONTENT'), $nl];
        }

        $catalogues = $GLOBALS['SITE_DB']->query('SELECT c_name,c_title FROM ' . get_table_prefix() . 'catalogues WHERE c_name NOT LIKE \'\_%\' AND ' . db_string_not_equal_to('c_send_view_reports', 'never'));
        foreach ($catalogues as $catalogue) {
            $list['catalogue_view_reports__' . $catalogue['c_name']] = [do_lang('GENERAL'), do_lang('catalogues:NOTIFICATION_TYPE_catalogue_view_reports', get_translated_text($catalogue['c_title']))];
        }

        return $list;
    }

    /**
     * Get a list of members who have enabled this notification (i.e. have permission to AND have chosen to or are defaulted to).
     *
     * @param  ID_TEXT $notification_code Notification code
     * @param  ?SHORT_TEXT $category The category within the notification code (null: none)
     * @param  ?array $to_member_ids List of member IDs we are restricting to (null: no restriction). This effectively works as a intersection set operator against those who have enabled.
     * @param  ?integer $from_member_id The member ID doing the sending. Either a MEMBER or a negative number (e.g. A_FROM_SYSTEM_UNPRIVILEGED) (null: current member)
     * @param  integer $start Start position (for pagination)
     * @param  integer $max Maximum (for pagination)
     * @return array A pair: Map of members to their notification setting, and whether there may be more
     */
    public function list_members_who_have_enabled(string $notification_code, ?string $category = null, ?array $to_member_ids = null, ?int $from_member_id = null, int $start = 0, int $max = 300) : array
    {
        if (substr($notification_code, 0, strlen('catalogue_entry__')) == 'catalogue_entry__') {
            $members = $this->_all_members_who_have_enabled($notification_code, $category, $to_member_ids, $start, $max);
            $members = $this->_all_members_who_have_enabled_with_page_access($members, 'catalogues', $notification_code, $category, $to_member_ids, $start, $max);
            $catalogue_category_id = intval($category);
            $catalogue_name = $GLOBALS['SITE_DB']->query_select_value_if_there('catalogue_categories', 'c_name', ['id' => $catalogue_category_id]);
            if ($catalogue_name === null) {
                return [[], false];
            }
            $members = $this->_all_members_who_have_enabled_with_category_access($members, 'catalogues_catalogue', $notification_code, $catalogue_name, $to_member_ids, $start, $max);
            if (get_value('disable_cat_cat_perms') !== '1') {
                $members = $this->_all_members_who_have_enabled_with_category_access($members, 'catalogues_category', $notification_code, strval($catalogue_category_id), $to_member_ids, $start, $max);
            }
        }

        if (substr($notification_code, 0, strlen('catalogue_view_reports')) == 'catalogue_view_reports') {
            $members = $this->_all_members_who_have_enabled($notification_code, $category, $to_member_ids, $start, $max);
            $members = $this->_all_members_who_have_enabled_with_page_access($members, 'cms_catalogues', $notification_code, $category, $to_member_ids, $start, $max);
        }

        return $members;
    }
}
