<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_rich_media
 */

/**
 * Hook class.
 */
class Hook_media_rendering_audio_websafe extends Media_renderer_with_fallback
{
    /**
     * Get the label for this media rendering type.
     *
     * @return string The label
     */
    public function get_type_label() : string
    {
        require_lang('comcode');
        return do_lang('MEDIA_TYPE_' . preg_replace('#^Hook_media_rendering_#', '', __CLASS__));
    }

    /**
     * Find the media types this hook serves.
     *
     * @return integer The media type(s), as a bitmask
     */
    public function get_media_type() : int
    {
        return MEDIA_TYPE_AUDIO;
    }

    /**
     * See if we can recognise this mime type.
     *
     * @param  ID_TEXT $mime_type The mime type
     * @return integer Recognition precedence
     */
    public function recognises_mime_type(string $mime_type) : int
    {
        if ($mime_type == 'audio/ogg') {
            return MEDIA_RECOG_PRECEDENCE_HIGH;
        }
        if ($mime_type == 'audio/x-mpeg') {
            return MEDIA_RECOG_PRECEDENCE_HIGH;
        }
        if ($mime_type == 'audio/mpeg') {
            return MEDIA_RECOG_PRECEDENCE_HIGH;
        }

        // Sometimes an mp3 is put in an mp4 container
        if ($mime_type == 'video/mp4') {
            return MEDIA_RECOG_PRECEDENCE_MEDIUM;
        }
        if ($mime_type == 'video/3gpp') {
            return MEDIA_RECOG_PRECEDENCE_MEDIUM;
        }

        return MEDIA_RECOG_PRECEDENCE_NONE;
    }

    /**
     * See if we can recognise this URL pattern.
     *
     * @param  URLPATH $url URL to pattern match
     * @return integer Recognition precedence
     */
    public function recognises_url(string $url) : int
    {
        return MEDIA_RECOG_PRECEDENCE_NONE;
    }

    /**
     * Provide code to display what is at the URL, in the most appropriate way.
     *
     * @param  mixed $url URL to render
     * @param  mixed $url_safe URL to render (no sessions etc)
     * @param  array $attributes Attributes (e.g. width, height, length)
     * @param  boolean $as_admin Whether there are admin privileges, to render dangerous media types
     * @param  ?MEMBER $source_member Member to run as (null: current member)
     * @param  ?URLPATH $url_direct_filesystem Direct URL (not via a script) (null: just use the normal URL)
     * @return Tempcode Rendered version
     */
    public function render($url, $url_safe, array $attributes, bool $as_admin = false, ?int $source_member = null, ?string $url_direct_filesystem = null) : object
    {
        $_url = is_object($url) ? $url->evaluate() : $url;
        $_url_safe = is_object($url_safe) ? $url_safe->evaluate() : $url_safe;
        if ($url_direct_filesystem === null) {
            $url_direct_filesystem = $_url;
        }

        $ret = $this->fallback_render($url, $url_safe, $attributes, $as_admin, $source_member, $url);
        if ($ret !== null) {
            return $ret;
        }

        $closed_captions_url = null;
        if (array_key_exists('closed_captions_url', $attributes)) {
            $closed_captions_url = $attributes['closed_captions_url'];
        }
        if (empty($closed_captions_url)) {
            require_code('images');
            $closed_captions_url = get_matching_closed_captions_file($url_direct_filesystem, 'uploads/filedump/');
        }

        $autostart = ((array_key_exists('autostart', $attributes)) && ($attributes['autostart'] == '1'));

        // Put in defaults
        if ((!array_key_exists('width', $attributes)) || (!is_numeric($attributes['width']))) {
            $attributes['width'] = get_option('attachment_default_width');
        }
        if ((!array_key_exists('height', $attributes)) || (!is_numeric($attributes['height']))) {
            $attributes['height'] = '30';
        }

        return do_template('MEDIA_AUDIO_WEBSAFE', ['_GUID' => '474dfa6766d809141bb6ef800bf22636', 'HOOK' => 'audio_websafe', 'CLOSED_CAPTIONS_URL' => $closed_captions_url, 'AUTOSTART' => $autostart] + _create_media_template_parameters($url, $attributes, $as_admin, $source_member));
    }
}
