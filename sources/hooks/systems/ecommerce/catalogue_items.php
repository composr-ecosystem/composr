<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*
This eCommerce hook is more than a normal purchase hook.
It also provides:
 - Extra methods for shopping module
 - Extra methods for catalogues module
It is modular though, and purchase hook may provide these methods too.
*/

/**
 * @license     http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright   ocProducts Ltd
 * @package     shopping
 */

/**
 * Hook class.
 */
class Hook_ecommerce_catalogue_items
{
    /**
     * Get the overall categorisation for the products handled by this eCommerce hook.
     *
     * @return ?array A map of product categorisation details (null: disabled)
     */
    public function get_product_category() : ?array
    {
        if (!addon_installed('shopping')) {
            return null;
        }

        require_lang('shopping');

        return [
            'category_name' => do_lang('CATALOGUE_ITEM'),
            'category_description' => do_lang_tempcode('CATALOGUE_ITEM_DESCRIPTION'),
            'category_image_url' => find_theme_image('icons/menu/rich_content/catalogues/products'),
        ];
    }

    /**
     * Get the products handled by this eCommerce hook.
     *
     * IMPORTANT NOTE TO PROGRAMMERS: This function may depend only on the database, and not on get_member() or any GET/POST values.
     *  Such dependencies will break IPN, which works via a Guest and no dependable environment variables. It would also break manual transactions from the Admin Zone.
     *
     * @param  ?ID_TEXT $search Product being searched for (passed by reference as it may be modified for special cases) (null: none)
     * @return array A map of product name to list of product details
     */
    public function get_products(?string &$search = null) : array
    {
        if ($search === null) {
            $cnt = $GLOBALS['SITE_DB']->query_select_value('catalogue_entries t1 LEFT JOIN ' . get_table_prefix() . 'catalogues t2 ON t1.c_name=t2.c_name', 'COUNT(*)', ['c_ecommerce' => 1]);
            if ($cnt > 50) {
                return []; // Too many to list
            }
        }

        require_code('catalogues');
        require_code('shopping');

        $products = [];

        $where = ['c_ecommerce' => 1];
        if ($search !== null) {
            if (!is_numeric($search)) {
                return [];
            }
            $where['id'] = intval($search);
        }

        $start = 0;
        do {
            $old_limit = cms_set_time_limit(10);

            $entry_rows = $GLOBALS['SITE_DB']->query_select('catalogue_entries t1 LEFT JOIN ' . get_table_prefix() . 'catalogues t2 ON t1.c_name=t2.c_name', ['t1.id', 't1.c_name'], $where, '', 500, $start);
            foreach ($entry_rows as $entry_row) {
                $fields_map = find_shopping_catalogue_fields($entry_row['c_name']);
                $shopping_catalogue__product_title = $fields_map['product_title'];
                $shopping_catalogue__sku = $fields_map['sku'];
                $shopping_catalogue__price = $fields_map['price'];
                $shopping_catalogue__stock_level = $fields_map['stock_level'];
                $shopping_catalogue__stock_level_warn_at = $fields_map['stock_level_warn_at'];
                $shopping_catalogue__stock_level_maintain = $fields_map['stock_level_maintain'];
                $shopping_catalogue__tax_code = $fields_map['tax_code'];
                $shopping_catalogue__image = $fields_map['image'];
                $shopping_catalogue__weight = $fields_map['weight'];
                $shopping_catalogue__length = $fields_map['length'];
                $shopping_catalogue__width = $fields_map['width'];
                $shopping_catalogue__height = $fields_map['height'];
                $shopping_catalogue__description = $fields_map['description'];

                $field_rows = get_catalogue_entry_field_values($entry_row['c_name'], $entry_row['id'], null, null, true);

                $product_title = $field_rows[$shopping_catalogue__product_title]['effective_value_pure'];

                $sku = $field_rows[$shopping_catalogue__sku]['effective_value_pure'];
                if (array_key_exists($shopping_catalogue__sku, $field_rows)) {
                    $sku = '';
                }

                $price = 0.00;
                if (array_key_exists($shopping_catalogue__price, $field_rows)) {
                    $price = floatval($field_rows[$shopping_catalogue__price]['effective_value_pure']);
                }

                $tax_code = '0%';
                if (array_key_exists($shopping_catalogue__tax_code, $field_rows)) {
                    $tax_code = $field_rows[$shopping_catalogue__tax_code]['effective_value_pure'];
                }

                $product_weight = null;
                if (array_key_exists($shopping_catalogue__weight, $field_rows)) {
                    $product_weight = floatval($field_rows[$shopping_catalogue__weight]['effective_value_pure']);
                }
                $product_length = null;
                if (array_key_exists($shopping_catalogue__length, $field_rows)) {
                    $product_length = floatval($field_rows[$shopping_catalogue__length]['effective_value_pure']);
                }
                $product_width = null;
                if (array_key_exists($shopping_catalogue__width, $field_rows)) {
                    $product_width = floatval($field_rows[$shopping_catalogue__width]['effective_value_pure']);
                }
                $product_height = null;
                if (array_key_exists($shopping_catalogue__height, $field_rows)) {
                    $product_height = floatval($field_rows[$shopping_catalogue__height]['effective_value_pure']);
                }
                $shipping_cost = calculate_shipping_cost(null, null, $product_weight, $product_length, $product_width, $product_height);

                if (array_key_exists($shopping_catalogue__image, $field_rows)) {
                    $image_url = is_object($field_rows[$shopping_catalogue__image]['effective_value']) ? $field_rows[$shopping_catalogue__image]['effective_value']->evaluate() : $field_rows[$shopping_catalogue__image]['effective_value'];
                } else {
                    $image_url = '';
                }
                if ($image_url == '') {
                    $image_url = find_theme_image('no_image');
                } else {
                    if (url_is_local($image_url)) {
                        $image_url = get_custom_base_url() . '/' . $image_url;
                    }
                }

                // For catalogue items we make the numeric product ID the raw ID for the eCommerce item. This is unique to catalogue items (necessarily so, to avoid conflicts), and we do it for convenience
                $products[strval($entry_row['id'])/*We use numeric indices for shopping catalogue items*/] = [
                    'item_name' => $product_title,
                    'item_description' => ($field_rows[$shopping_catalogue__description]['effective_value']->is_empty()) ? new Tempcode() : $field_rows[$shopping_catalogue__description]['effective_value'],
                    'item_image_url' => $image_url,

                    'type' => PRODUCT_CATALOGUE,
                    'type_special_details' => ['sku' => $sku, 'call_actualiser_from_cart' => false],

                    'price' => $price,
                    'currency' => get_option('currency'),
                    'price_points' => null,
                    'discount_points__num_points' => null,
                    'discount_points__price_reduction' => null,

                    'tax_code' => $tax_code,
                    'shipping_cost' => $shipping_cost,
                    'product_weight' => $product_weight,
                    'product_length' => $product_length,
                    'product_width' => $product_width,
                    'product_height' => $product_height,
                    'needs_shipping_address' => true,
                ];
            }
            $start += 500;

            cms_set_time_limit($old_limit);
        } while (count($entry_rows) == 500);

        return $products;
    }

    /**
     * Check whether the product codename is available for purchase by the member.
     *
     * @param  ID_TEXT $type_code The product codename
     * @param  MEMBER $member_id The member we are checking against
     * @param  integer $req_quantity The number required
     * @param  boolean $must_be_listed Whether the product must be available for public listing
     * @return integer The availability code (a ECOMMERCE_PRODUCT_* constant)
     */
    public function is_available(string $type_code, int $member_id, int $req_quantity = 1, bool $must_be_listed = false) : int
    {
        if (!addon_installed('shopping')) {
            return ECOMMERCE_PRODUCT_INTERNAL_ERROR;
        }

        require_code('catalogues');

        if ($must_be_listed) {
            return ECOMMERCE_PRODUCT_DISABLED; // Don't list within purchasing module, we only want it as a part of a cart order. Otherwise we can't actually track who bought it. We do allow purchase of single product orders.
        }

        $res = $GLOBALS['SITE_DB']->query_select('catalogue_entries', ['*'], ['id' => intval($type_code)], '', 1);
        if (!array_key_exists(0, $res)) {
            return ECOMMERCE_PRODUCT_MISSING;
        }

        $entry_row = $res[0];

        $field_rows = get_catalogue_entry_field_values($entry_row['c_name'], $entry_row['id'], null, null, true);

        $fields_map = find_shopping_catalogue_fields($entry_row['c_name']);
        $shopping_catalogue__product_title = $fields_map['product_title'];
        $shopping_catalogue__sku = $fields_map['sku'];
        $shopping_catalogue__price = $fields_map['price'];
        $shopping_catalogue__stock_level = $fields_map['stock_level'];
        $shopping_catalogue__stock_level_warn_at = $fields_map['stock_level_warn_at'];
        $shopping_catalogue__stock_level_maintain = $fields_map['stock_level_maintain'];
        $shopping_catalogue__tax_code = $fields_map['tax_code'];
        $shopping_catalogue__image = $fields_map['image'];
        $shopping_catalogue__weight = $fields_map['weight'];
        $shopping_catalogue__length = $fields_map['length'];
        $shopping_catalogue__width = $fields_map['width'];
        $shopping_catalogue__height = $fields_map['height'];
        $shopping_catalogue__description = $fields_map['description'];

        if (array_key_exists($shopping_catalogue__stock_level_maintain, $field_rows)) { // Check maintenance status
            if ((empty($field_rows[$shopping_catalogue__stock_level_maintain]['effective_value_pure'])) || ($field_rows[$shopping_catalogue__stock_level_maintain]['effective_value_pure'] == do_lang('YES')/*means more will always be purchased if out of stock*/)) {
                return ECOMMERCE_PRODUCT_AVAILABLE;
            }
        }

        if (!array_key_exists($shopping_catalogue__stock_level, $field_rows)) {
            return ECOMMERCE_PRODUCT_INTERNAL_ERROR;
        }
        if (($field_rows[$shopping_catalogue__stock_level]['effective_value_pure'] != '') && ($field_rows[$shopping_catalogue__stock_level]['effective_value_pure'] != do_lang('NA'))) { // Check stock
            $available_stock = $this->get_available_quantity($type_code, true, $member_id);

            return ($available_stock >= $req_quantity) ? ECOMMERCE_PRODUCT_AVAILABLE : ECOMMERCE_PRODUCT_OUT_OF_STOCK;
        }

        return ECOMMERCE_PRODUCT_AVAILABLE;
    }

    /**
     * Get currently available quantity of selected product.
     *
     * @param  ID_TEXT $type_code The product codename
     * @param  boolean $consider_own_cart_contents Whether to consider the contents of your own cart
     * @param  ?MEMBER $member_id The member we are checking against (null: current member)
     * @return ?integer Quantity (null: no limit)
     */
    public function get_available_quantity(string $type_code, bool $consider_own_cart_contents = true, ?int $member_id = null) : ?int
    {
        if ($member_id === null) {
            $member_id = get_member();
        }

        require_code('catalogues');

        $res = $GLOBALS['SITE_DB']->query_select('catalogue_entries', ['*'], ['id' => intval($type_code)]);
        if (!array_key_exists(0, $res)) {
            return 0;
        }

        $entry_row = $res[0];

        $field_rows = get_catalogue_entry_field_values($entry_row['c_name'], $entry_row['id'], null, null, true);

        $fields_map = find_shopping_catalogue_fields($entry_row['c_name']);
        $shopping_catalogue__product_title = $fields_map['product_title'];
        $shopping_catalogue__sku = $fields_map['sku'];
        $shopping_catalogue__price = $fields_map['price'];
        $shopping_catalogue__stock_level = $fields_map['stock_level'];
        $shopping_catalogue__stock_level_warn_at = $fields_map['stock_level_warn_at'];
        $shopping_catalogue__stock_level_maintain = $fields_map['stock_level_maintain'];
        $shopping_catalogue__tax_code = $fields_map['tax_code'];
        $shopping_catalogue__image = $fields_map['image'];
        $shopping_catalogue__weight = $fields_map['weight'];
        $shopping_catalogue__length = $fields_map['length'];
        $shopping_catalogue__width = $fields_map['width'];
        $shopping_catalogue__height = $fields_map['height'];
        $shopping_catalogue__description = $fields_map['description'];

        if (!array_key_exists($shopping_catalogue__stock_level_maintain, $field_rows)) {
            return null;
        }
        $stock_maintained = ($field_rows[$shopping_catalogue__stock_level_maintain]['effective_value_pure'] == do_lang('YES'));
        if ($stock_maintained) {
            return null;
        }

        if (($field_rows[$shopping_catalogue__stock_level]['effective_value_pure'] != '') && ($field_rows[$shopping_catalogue__stock_level]['effective_value_pure'] != do_lang('NA'))) {
            $available_quantity = intval($field_rows[$shopping_catalogue__stock_level]['effective_value_pure']);

            // Locked order check
            $query = 'SELECT SUM(t2.p_quantity) FROM ' . get_table_prefix() . 'shopping_orders t1 JOIN ' . get_table_prefix() . 'shopping_order_details t2 ON t1.id=t2.p_order_id WHERE add_date>' . strval(time() - 60 * 60 * intval(get_option('cart_hold_hours'))) . ' AND ' . db_string_equal_to('t1.order_status', 'ORDER_STATUS_awaiting_payment') . ' AND ' . db_string_equal_to('t2.p_type_code', $type_code);
            if (is_guest($member_id)) {
                $query .= ' AND ' . db_string_not_equal_to('t1.session_id', get_session_id());
            } else {
                $query .= ' AND t1.member_id<>' . strval($member_id);
            }
            $locked_item_count = @intval($GLOBALS['SITE_DB']->query_value_if_there($query));

            // Items in own cart (not locked, but tied to this purchase)
            if ($consider_own_cart_contents) {
                $where = [
                    'type_code' => $type_code,
                ];
                if (is_guest($member_id)) {
                    $where['session_id'] = get_session_id();
                } else {
                    $where['ordered_by'] = $member_id;
                }
                $_cart_item_count = $GLOBALS['SITE_DB']->query_select_value('shopping_cart', 'SUM(quantity)', $where);
                $cart_item_count = @intval($_cart_item_count);
            } else {
                $cart_item_count = 0;
            }

            return ($available_quantity - $locked_item_count - $cart_item_count);
        }

        return null;
    }

    /**
     * Get the message for use in the purchasing module.
     *
     * @param  ID_TEXT $type_code The product in question
     * @return ?Tempcode The message (null: no message)
     */
    public function get_message(string $type_code) : ?object
    {
        require_code('catalogues');
        require_lang('catalogues');

        $catalogue_name = $GLOBALS['SITE_DB']->query_select_value('catalogue_entries', 'c_name', ['id' => intval($type_code)]);

        $catalogues = $GLOBALS['SITE_DB']->query_select('catalogues', ['*'], ['c_name' => $catalogue_name], '', 1);
        if (!array_key_exists(0, $catalogues)) {
            warn_exit(do_lang_tempcode('_MISSING_RESOURCE', escape_html($catalogue_name)));
        }

        $catalogue = $catalogues[0];

        $entries = $GLOBALS['SITE_DB']->query_select('catalogue_entries', ['*'], ['id' => intval($type_code)], '', 1);

        if (!array_key_exists(0, $entries)) {
            return warn_screen(get_screen_title('CATALOGUES'), do_lang_tempcode('MISSING_RESOURCE', 'catalogue_entry'));
        }

        $entry = $entries[0];

        $map = get_catalogue_entry_map($entry, $catalogue, 'CATEGORY', $catalogue_name, null, null, null, false, true);

        return do_template('CATALOGUE_' . $catalogue_name . '_GRID_ENTRY_WRAP', $map, null, false, 'CATALOGUE_DEFAULT_GRID_ENTRY_WRAP');
    }

    /**
     * Get eCommerce-specific template-parameters to include in catalogue templating.
     * Only called from the catalogues code, not the main eCommerce framework.
     *
     * @param  AUTO_LINK $id Product entry ID
     * @param  array $map Map where product details are placed
     */
    public function get_catalogue_template_parameters(int $id, array &$map)
    {
        require_code('feedback');
        require_code('ecommerce');
        require_code('images');

        require_lang('shopping');

        $cart_url = build_url(['page' => 'shopping', 'type' => 'browse'], get_module_zone('shopping'));

        $available_quantity = $this->get_available_quantity(strval($id));
        $out_of_stock = ($available_quantity !== null) && ($available_quantity <= 0);

        $action_url = build_url(['page' => 'shopping', 'type' => 'add_item'], get_module_zone('shopping'));

        // Single purchase, by-passing cart
        $next_purchase_step = get_next_purchase_step($this, strval($id), 'browse');
        $purchase_action_url = build_url(['page' => 'purchase', 'type' => $next_purchase_step, 'type_code' => strval($id), 'id' => $id], get_module_zone('purchase'));

        $map['CART_BUTTONS'] = do_template('ECOM_SHOPPING_CART_BUTTONS', [
            '_GUID' => 'd4491c6e221b1f06375a6427da062bac',
            'OUT_OF_STOCK' => $out_of_stock,
            'ACTION_URL' => $action_url,
            'TYPE_CODE' => strval($id),
            'PURCHASE_ACTION_URL' => $purchase_action_url,
            'CART_URL' => $cart_url,
        ]);
    }

    /**
     * Get fields that need to be filled in in the purchasing module.
     *
     * @param  ID_TEXT $type_code The product codename
     * @param  boolean $from_admin Whether this is being called from the Admin Zone. If so, optionally different fields may be used, including a purchase_id field for direct purchase ID input.
     * @return array A triple: The fields (use null for none), Hidden fields (use null for none), The text (use null for none), array of JavaScript function calls
     */
    public function get_needed_fields(string $type_code, bool $from_admin = false) : array
    {
        $fields = null;
        ecommerce_attach_memo_field_if_needed($fields);

        return [null, null, null, []];
    }

    /**
     * Get the filled in fields and do something with them.
     * May also be called from Admin Zone to get a default purchase ID (i.e. when there's no post context).
     *
     * @param  ID_TEXT $type_code The product codename
     * @param  boolean $from_admin Whether this is being called from the Admin Zone. If so, optionally different fields may be used, including a purchase_id field for direct purchase ID input.
     * @return array A pair: The purchase ID, a confirmation box to show (null for no specific confirmation)
     */
    public function process_needed_fields(string $type_code, bool $from_admin = false) : array
    {
        list($details) = find_product_details($type_code);

        $shipping_cost = calculate_shipping_cost($details, $details['shipping_cost'], $details['product_weight'], $details['product_length'], $details['product_width'], $details['product_height']);

        list($tax_derivation, $tax, $tax_tracking, $shipping_tax) = calculate_tax_due($details, $details['tax_code'], $details['price'], $shipping_cost);

        $order_id = $GLOBALS['SITE_DB']->query_insert('shopping_orders', [
            'member_id' => get_member(),
            'session_id' => get_session_id(),
            'add_date' => time(),
            'total_price' => $details['price'],
            'total_tax_derivation' => json_encode($tax_derivation),
            'total_tax' => $tax,
            'total_tax_tracking' => json_encode($tax_tracking),
            'total_shipping_cost' => $shipping_cost,
            'total_shipping_tax' => $shipping_tax,
            'total_product_weight' => $details['product_weight'],
            'total_product_length' => $details['product_length'],
            'total_product_width' => $details['product_width'],
            'total_product_height' => $details['product_height'],
            'order_currency' => isset($details['currency']) ? $details['currency'] : get_option('currency'),
            'order_status' => 'ORDER_STATUS_awaiting_payment',
            'notes' => '',
            'purchase_through' => 'purchase_module',
            'txn_id' => '',
        ], true);

        $GLOBALS['SITE_DB']->query_insert('shopping_order_details', [
            'p_type_code' => $type_code,
            'p_purchase_id' => '',
            'p_name' => $details['item_name'],
            'p_sku' => $details['type_special_details']['sku'],
            'p_quantity' => 1,
            'p_price' => $details['price'],
            'p_tax_code' => $details['tax_code'],
            'p_tax' => $tax,
            'p_order_id' => $order_id,
            'p_dispatch_status' => 'ORDER_STATUS_awaiting_payment',
        ]);

        return [strval($order_id), null];
    }

    /**
     * Handling of a product purchase change state.
     *
     * @param  ID_TEXT $type_code The product codename
     * @param  ID_TEXT $purchase_id The purchase ID
     * @param  array $details Details of the product, with added keys: TXN_ID, STATUS, ORDER_STATUS
     * @return boolean Whether the product was automatically dispatched (if not then hopefully this function sent a staff notification)
     */
    public function actualiser(string $type_code, string $purchase_id, array $details) : bool
    {
        $entry_id = intval($type_code);
        $product_object = object_factory('Hook_ecommerce_catalogue_items');
        $product_object->reduce_stock($entry_id, 1);

        require_code('shopping');
        require_lang('shopping');

        $order_id = intval($purchase_id);

        if ($details['STATUS'] == 'Completed') {
            $member_id = $GLOBALS['SITE_DB']->query_select_value('shopping_orders', 'member_id', ['id' => $order_id]);
            $GLOBALS['SITE_DB']->query_insert('ecom_sales', ['date_and_time' => time(), 'member_id' => $member_id, 'details' => $details['item_name'], 'details2' => '', 'txn_id' => $details['TXN_ID']]);
        }

        $old_status = $GLOBALS['SITE_DB']->query_select_value('shopping_order_details', 'p_dispatch_status', ['p_order_id' => $order_id]);

        if ($old_status != $details['ORDER_STATUS']) {
            $GLOBALS['SITE_DB']->query_update('shopping_order_details', ['p_dispatch_status' => $details['ORDER_STATUS']], ['p_order_id' => $order_id]);

            $GLOBALS['SITE_DB']->query_update('shopping_orders', ['order_status' => $details['ORDER_STATUS'], 'txn_id' => $details['TXN_ID']], ['id' => $order_id]);

            // Copy in memo from transaction, as customer notes
            $old_memo = $GLOBALS['SITE_DB']->query_select_value('shopping_orders', 'notes', ['id' => $order_id]);
            if ($old_memo == '') {
                $memo = $GLOBALS['SITE_DB']->query_select_value('ecom_transactions', 't_memo', ['id' => $details['TXN_ID']]);
                if ($memo != '') {
                    $memo = do_lang('CUSTOMER_NOTES') . "\n" . $memo;
                    $GLOBALS['SITE_DB']->query_update('shopping_orders', ['notes' => $memo], ['id' => $order_id], '', 1);
                }
            }

            if ($details['ORDER_STATUS'] == 'ORDER_STATUS_payment_received') {
                send_shopping_order_purchased_staff_mail($order_id);
            }
        }

        return false;
    }

    /**
     * Update stock levels after a purchase.
     *
     * @param  AUTO_LINK $entry_id Catalogue entry ID
     * @param  integer $quantity Quantity to deduct
     */
    public function reduce_stock(int $entry_id, int $quantity)
    {
        require_code('catalogues');

        $res = $GLOBALS['SITE_DB']->query_select('catalogue_entries', ['c_name', 'cc_id'], ['id' => $entry_id], '', 1);
        if (!array_key_exists(0, $res)) {
            return;
        }
        $entry_row = $res[0];

        $catalogue_name = $entry_row['c_name'];

        $field_rows = get_catalogue_entry_field_values($catalogue_name, $entry_id, null, null, true);

        $fields_map = find_shopping_catalogue_fields($entry_row['c_name']);
        $shopping_catalogue__product_title = $fields_map['product_title'];
        $shopping_catalogue__sku = $fields_map['sku'];
        $shopping_catalogue__price = $fields_map['price'];
        $shopping_catalogue__stock_level = $fields_map['stock_level'];
        $shopping_catalogue__stock_level_warn_at = $fields_map['stock_level_warn_at'];
        $shopping_catalogue__stock_level_maintain = $fields_map['stock_level_maintain'];
        $shopping_catalogue__tax_code = $fields_map['tax_code'];
        $shopping_catalogue__image = $fields_map['image'];
        $shopping_catalogue__weight = $fields_map['weight'];
        $shopping_catalogue__length = $fields_map['length'];
        $shopping_catalogue__width = $fields_map['width'];
        $shopping_catalogue__height = $fields_map['height'];
        $shopping_catalogue__description = $fields_map['description'];

        $product_title = $field_rows[$shopping_catalogue__product_title]['effective_value_pure'];

        $available_quantity = 0;
        if (array_key_exists($shopping_catalogue__stock_level, $field_rows)) {
            if (($field_rows[$shopping_catalogue__stock_level]['effective_value_pure'] == '') || ($field_rows[$shopping_catalogue__stock_level]['effective_value_pure'] == do_lang('NA'))) {
                return;
            }

            $stock_field_id = $field_rows[$shopping_catalogue__stock_level]['id'];
            $available_quantity = intval($field_rows[$shopping_catalogue__stock_level]['effective_value_pure']);
        }

        $stock_maintained = false;
        if (array_key_exists($shopping_catalogue__stock_level_maintain, $field_rows)) {
            if ((empty($field_rows[$shopping_catalogue__stock_level_maintain]['effective_value_pure'])) || ($field_rows[$shopping_catalogue__stock_level_maintain]['effective_value_pure'] === do_lang('NA'))) {
                return;
            }

            $stock_maintained = ($field_rows[$shopping_catalogue__stock_level_maintain]['effective_value_pure'] == do_lang('YES'));
        }

        $stock_level_warn_threshold = 0;
        if (array_key_exists($shopping_catalogue__stock_level_warn_at, $field_rows)) {
            if ((empty($field_rows[$shopping_catalogue__stock_level_warn_at]['effective_value_pure'])) || ($field_rows[$shopping_catalogue__stock_level_warn_at]['effective_value_pure'] === do_lang('NA'))) {
                return;
            }

            $stock_level_warn_threshold = intval($field_rows[$shopping_catalogue__stock_level_warn_at]['effective_value_pure']);
        }

        if ($available_quantity < $quantity && !$stock_maintained) {
            require_code('site');
            attach_message(do_lang_tempcode('LOW_STOCK_DISPATCH_FAILED', escape_html($product_title)));
        }

        $stock_after_dispatch = $available_quantity - $quantity;

        if ($stock_after_dispatch < $stock_level_warn_threshold) {
            $this->_send_stock_maintain_warn_mail($product_title, strval($entry_id));
        }

        if (array_key_exists($shopping_catalogue__stock_level, $field_rows)) {
            $GLOBALS['SITE_DB']->query_update('catalogue_efv_integer', ['cv_value' => intval($stock_after_dispatch)], ['cf_id' => $stock_field_id, 'ce_id' => $entry_id]);
        }
    }

    /**
     * Stock maintain warning mail.
     *
     * @param  SHORT_TEXT $product_title Product title
     * @param  ID_TEXT $type_code Product codename
     */
    protected function _send_stock_maintain_warn_mail(string $product_title, string $type_code)
    {
        $product_details_url = get_product_details_url($type_code, false, get_member(), true);

        require_code('notifications');

        $subject = do_lang('STOCK_LEVEL_MAIL_SUBJECT', get_site_name(), $product_title, null, get_site_default_lang());
        $message = do_notification_lang('STOCK_MAINTENANCE_WARN_MAIL', comcode_escape(get_site_name()), comcode_escape($product_title), [$product_details_url->evaluate()], get_site_default_lang());

        dispatch_notification('low_stock', null, $subject, $message, null, null, A_FROM_SYSTEM_PRIVILEGED);
    }

    /**
     * Get the member who made the purchase.
     *
     * @param  ID_TEXT $type_code The product codename
     * @param  ID_TEXT $purchase_id The purchase ID
     * @return ?MEMBER The member ID (null: none)
     */
    public function member_for(string $type_code, string $purchase_id) : ?int
    {
        $order_id = intval($purchase_id);
        return $GLOBALS['SITE_DB']->query_select_value_if_there('shopping_orders', 'member_id', ['id' => $order_id]);
    }

    /**
     * Function to return dispatch type of product.
     *
     * @return ID_TEXT Dispatch type (manual/automatic)
     */
    public function get_product_dispatch_type() : string
    {
        return 'manual';
    }
}
