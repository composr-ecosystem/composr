<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    filedump
 */

/**
 * Hook class.
 */
class Hook_commandr_fs_filedump
{
    /**
     * Standard constructor.
     */
    public function __construct()
    {
        require_code('resource_fs');
    }

    /**
     * Get complete path.
     *
     * @param  array $meta_dir The current meta-directory path
     * @return array A pair: Complete path, Relative path
     */
    protected function get_complete_path(array $meta_dir) : array
    {
        $path = get_custom_file_base() . '/uploads/filedump';
        $subpath = '';
        foreach ($meta_dir as $meta_dir_section) {
            if ($subpath != '') {
                $subpath .= '/';
            }
            $subpath .= filter_naughty($meta_dir_section);
        }
        if ($subpath != '') {
            $path .= '/' . $subpath;
        }
        return [$path, $subpath];
    }

    /**
     * Standard Commandr-fs listing function for commandr_fs hooks.
     *
     * @param  array $meta_dir The current meta-directory path
     * @param  string $meta_root_node The root node of the current meta-directory
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return ~array The final directory listing (false: failure)
     */
    public function listing(array $meta_dir, string $meta_root_node, object &$commandr_fs)
    {
        if (!addon_installed('filedump')) {
            return [];
        }

        list($path, $subpath) = $this->get_complete_path($meta_dir);

        $records = array_flip(collapse_1d_complexity('name', $GLOBALS['SITE_DB']->query_select('filedump', ['name'], ['subpath' => cms_mb_substr($subpath, 0, 80)])));

        $listing = [];
        if (is_dir($path)) {
            $dh = opendir($path);
            while (($file = readdir($dh)) !== false) {
                if (($file != '.') && ($file != '..') && ($file != '.git')) {
                    $filesize = ((!is_dir($path . '/' . $file)) && (!isset($records[cms_mb_substr($file, 0, 80)]))) ? filesize($path . '/' . $file)/*will be raw binary*/ : null/*don't calculate a filesize*/;

                    $listing[] = [
                        $file,
                        is_dir($path . '/' . $file) ? COMMANDR_FS_DIR : COMMANDR_FS_FILE,
                        $filesize,
                        filemtime($path . '/' . $file),
                    ];
                }
            }
            closedir($dh);

            // Folder meta
            $listing[] = [
                RESOURCE_FS_SPECIAL_DIRECTORY_FILE,
                COMMANDR_FS_FILE,
                null,
                filemtime($path),
            ];

            return $listing;
        }

        return false; // Directory doesn't exist
    }

    /**
     * Standard Commandr-fs directory creation function for commandr_fs hooks.
     *
     * @param  array $meta_dir The current meta-directory path
     * @param  string $meta_root_node The root node of the current meta-directory
     * @param  string $new_dir_name The new directory name
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return boolean Success?
     */
    public function make_directory(array $meta_dir, string $meta_root_node, string $new_dir_name, object &$commandr_fs) : bool
    {
        $new_dir_name = filter_naughty($new_dir_name);

        list($path, $subpath) = $this->get_complete_path($meta_dir);

        if ((is_dir($path)) && (!file_exists($path . '/' . $new_dir_name)) && (cms_is_writable($path))) {
            $ret = @mkdir($path . '/' . $new_dir_name, 0777) or warn_exit(do_lang_tempcode('WRITE_ERROR_DIRECTORY', escape_html($path . '/' . $new_dir_name), escape_html($path)), false, true);
            fix_permissions($path . '/' . $new_dir_name);
            sync_file($path . '/' . $new_dir_name);
            return $ret;
        }

        return false; // Directory exists
    }

    /**
     * Standard Commandr-fs directory removal function for commandr_fs hooks.
     *
     * @param  array $meta_dir The current meta-directory path
     * @param  string $meta_root_node The root node of the current meta-directory
     * @param  string $dir_name The directory name
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return boolean Success?
     */
    public function remove_directory(array $meta_dir, string $meta_root_node, string $dir_name, object &$commandr_fs) : bool
    {
        $dir_name = filter_naughty($dir_name);

        list($path, $subpath) = $this->get_complete_path($meta_dir);

        if ((is_dir($path)) && (file_exists($path . '/' . $dir_name)) && (cms_is_writable($path . '/' . $dir_name))) {
            require_code('files');
            $success = @deldir_contents($path . '/' . $dir_name, false, true);
            if (!$success) {
                warn_exit(do_lang_tempcode('WRITE_ERROR', escape_html($path . '/' . $dir_name)), false, true);
            }

            // Cleanup from DB
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_description', ['name' => cms_mb_substr($dir_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
            if ($test !== null) {
                delete_lang($test);
                $GLOBALS['SITE_DB']->query_delete('filedump', ['name' => cms_mb_substr($dir_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)], '', 1);
            }

            return true;
        }

        return false; // Directory doesn't exist
    }

    /**
     * Standard Commandr-fs file removal function for commandr_fs hooks.
     *
     * @param  array $meta_dir The current meta-directory path
     * @param  string $meta_root_node The root node of the current meta-directory
     * @param  string $file_name The file name
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return boolean Success?
     */
    public function remove_file(array $meta_dir, string $meta_root_node, string $file_name, object &$commandr_fs) : bool
    {
        $file_name = filter_naughty($file_name);

        list($path, $subpath) = $this->get_complete_path($meta_dir);

        if ($file_name == RESOURCE_FS_SPECIAL_DIRECTORY_FILE) {
            // What if folder meta...

            $dir_name = basename($subpath);
            $subpath = dirname($subpath);

            // Cleanup from DB
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_description', ['name' => cms_mb_substr($dir_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
            if ($test !== null) {
                delete_lang($test);
                $GLOBALS['SITE_DB']->query_delete('filedump', ['name' => cms_mb_substr($dir_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)], '', 1);
            }

            return true;
        }

        if ((is_dir($path)) && (file_exists($path . '/' . $file_name)) && (cms_is_writable($path . '/' . $file_name))) {
            $ret = @unlink($path . '/' . $file_name) or intelligent_write_error($path . '/' . $file_name);
            sync_file($path . '/' . $file_name);

            // Cleanup from DB
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('filedump', 'the_description', ['name' => cms_mb_substr($file_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
            if ($test !== null) {
                delete_lang($test);
                $GLOBALS['SITE_DB']->query_delete('filedump', ['name' => cms_mb_substr($file_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)], '', 1);
            }

            return $ret;
        }

        return false; // File doesn't exist
    }

    /**
     * Standard Commandr-fs file reading function for commandr_fs hooks.
     *
     * @param  array $meta_dir The current meta-directory path
     * @param  string $meta_root_node The root node of the current meta-directory
     * @param  string $file_name The file name
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return ~string The file contents (false: failure)
     */
    public function read_file(array $meta_dir, string $meta_root_node, string $file_name, object &$commandr_fs)
    {
        $file_name = filter_naughty($file_name);

        list($path, $subpath) = $this->get_complete_path($meta_dir);

        if ($file_name == RESOURCE_FS_SPECIAL_DIRECTORY_FILE) {
            // What if folder meta...

            $dir_name = basename($subpath);
            $subpath = dirname($subpath);

            $rows = table_to_portable_rows('filedump', ['id'], ['name' => cms_mb_substr($dir_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
            if (array_key_exists(0, $rows)) {
                $output = $rows[0];
            } else {
                $output = ['the_description' => '', 'the_member' => remap_resource_id_as_portable('member', get_member())];
            }

            return json_encode($output);
        }

        if ((is_dir($path)) && (file_exists($path . '/' . $file_name)) && (is_readable($path . '/' . $file_name))) {
            disable_php_memory_limit();

            $data = cms_file_get_contents_safe($path . '/' . $file_name, FILE_READ_LOCK);

            $rows = table_to_portable_rows('filedump', ['id'], ['name' => cms_mb_substr($file_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)]);
            if (array_key_exists(0, $rows)) {
                $output = ['data' => base64_encode($data)] + $rows[0];
                return json_encode($output);
            }

            return $data;
        }

        return false; // File doesn't exist
    }

    /**
     * Standard Commandr-fs file writing function for commandr_fs hooks.
     *
     * @param  array $meta_dir The current meta-directory path
     * @param  string $meta_root_node The root node of the current meta-directory
     * @param  string $file_name The file name
     * @param  string $contents The new file contents
     * @param  object $commandr_fs A reference to the Commandr filesystem object
     * @return boolean Success?
     */
    public function write_file(array $meta_dir, string $meta_root_node, string $file_name, string $contents, object &$commandr_fs) : bool
    {
        $file_name = filter_naughty($file_name);

        list($path, $subpath) = $this->get_complete_path($meta_dir);

        if ($file_name == RESOURCE_FS_SPECIAL_DIRECTORY_FILE) {
            // What if folder meta...

            $dir_name = basename($subpath);
            $subpath = dirname($subpath);

            $input = json_decode($contents, true);

            if (!empty($input)) {
                table_from_portable_rows('filedump', [$input], ['name' => cms_mb_substr($dir_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)], TABLE_REPLACE_MODE_BY_EXTRA_FIELD_DATA);
            }

            return true;
        }

        if ((is_dir($path)) && (((file_exists($path . '/' . $file_name)) && (cms_is_writable($path . '/' . $file_name))) || ((!file_exists($path . '/' . $file_name)) && (cms_is_writable($path))))) {
            $input = json_decode($contents, true);

            if ($input === null) {
                $data = $contents; // Raw binary
            } else {
                $data = @base64_decode($input['data']);
                if ($data === false) {
                    $data = $input['data'];
                }
                unset($input['data']);
            }

            require_code('files');
            cms_file_put_contents_safe($path . '/' . $file_name, $data, FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE);

            if (!empty($input)) {
                table_from_portable_rows('filedump', [$input], ['name' => cms_mb_substr($file_name, 0, 80), 'subpath' => cms_mb_substr($subpath, 0, 80)], TABLE_REPLACE_MODE_BY_EXTRA_FIELD_DATA);
            }

            return true;
        }

        return false; // File doesn't exist
    }
}
