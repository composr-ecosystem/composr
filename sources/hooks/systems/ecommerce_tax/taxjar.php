<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_ecommerce_tax_taxjar
{
    /**
     * TaxJar API version we are using.
     *
     * @see https://developers.taxjar.com/api/reference/#api-version
     */
    protected $apiVersion = '2022-01-24';

    // TaxJar API URLs
    protected $base_url_live = 'https://api.taxjar.com/v2/';
    protected $base_url_sandbox = 'https://api.sandbox.taxjar.com/v2/';
    protected $endpoints = [
        'categories' => 'categories', // Look up available tax codes
        'taxes' => 'taxes', // Look up tax to be collected
        'createTransaction' => 'transactions/orders', // Create a transaction for a completed order
        'validateAddress' => 'addresses/validate', // Validate an address (requires professional)
    ];

    /**
     * Array of country codes supported by TaxJar.
     *
     * @see https://developers.taxjar.com/api/reference/#countries
     */
    protected $supported_countries = [
        'US', // United States (NOTE: TaxJar only supports the US for 'transactions' and 'filing', but can look-up other supported countries)
        'CA', // Canada
        'AU', // Australia
        'AT', // Austria
        'BE', // Belgium
        'BG', // Bulgaria
        'HR', // Croatia
        'CY', // Cyprus
        'CZ', // Czech Republic
        'DK', // Denmark
        'EE', // Estonia
        'FI', // Finland
        'FR', // France
        'DE', // Germany
        'GR', // Greece
        'HU', // Hungary
        'IE', // Ireland
        'IT', // Italy
        'LV', // Latvia
        'LT', // Lithuania
        'LU', // Luxembourg
        'MT', // Malta
        'NL', // Netherlands
        'PL', // Poland
        'PT', // Portugal
        'RO', // Romania
        'SK', // Slovakia
        'SI', // Slovenia
        'ES', // Spain
        'SE', // Sweden
        'GB', // United Kingdom
    ];

    /**
     * Get the name of this tax service.
     *
     * @return SHORT_TEXT The name of the tax service
     */
    public function get_tax_service_label() : string
    {
        return do_lang('TAX_SERVICE_TAXJAR');
    }

    /**
     * Run a health check on this tax service.
     *
     * @return ?array Pair: Whether or not the health check passes, and a message string (null: cannot run a health check on this service)
     */
    public function health_check() : ?array
    {
        // No health check if not configured
        if (get_option('taxjar_api_key') == '') {
            return null;
        }

        // TaxJar does not have an explicit ping endpoint; just query for tax categories as our health check
        $_response = $this->make_taxjar_request($this->endpoints['categories'], ['convert_to_internal_encoding' => true, 'timeout' => 20.0, 'raw_content_type' => 'application/json']);
        $response = @json_decode($_response->data, true);

        if (is_array($response)) {
            return [isset($response['categories']), 'TaxJar ping failed'];
        }

        return [false, 'TaxJar: ' . $_response->data];
    }

    /**
     * Check at which priority this tax service should be considered given a product to purchase.
     *
     * @param  array $parts The item / details pair
     * @return integer The priority for this service (see TAX_SERVICE_PRIORITY_*) (0: do not use for this set of products)
     */
    public function service_priority(array $parts) : int
    {
        // Do not use if not configured
        if (get_option('taxjar_api_key') == '') {
            return TAX_SERVICE_PRIORITY_NONE;
        }

        list($item, $details) = $parts;
        if (preg_match('#^TJ:#', $details['tax_code']) != 0) {
            return TAX_SERVICE_PRIORITY_HIGH;
        }
        return TAX_SERVICE_PRIORITY_NONE;
    }

    /**
    * Find the tax for a number of items being sold together.
    *
    * @param  array $item_details A list of pairs: shopping-cart/order style row (with at least 'quantity'), product details (with at least 'tax_code' and 'price'). This is returned by reference as a list of tuples, (tax, tax_derivation, tax_tracking) gets appended.
    * @param  array $products The products to process with this tax service
    * @param  string $field_name_prefix Field name prefix
    * @param  REAL $shipping_cost The shipping cost
    * @param  MEMBER $member_id The member this is for
    * @param  SHORT_TEXT $street_address The street address of the member
    * @param  ID_TEXT $city The city of the member
    * @param  ID_TEXT $state The state of the member
    * @param  ID_TEXT $country The country code of the member
    * @param  ID_TEXT $post_code The postal code of the member
    * @return ?array A tuple: The shipping tax derivation, shipping tax due (including shipping tax), shipping tax tracking ID, and any items that should instead be processed as free items (null: this tax service does not support the items or address requested)
    */
    public function get_tax_using_tax_codes(array &$item_details, array $products, string $field_name_prefix, float $shipping_cost, int $member_id, string $street_address, string $city, string $state, string $country, string $post_code) : ?array
    {
        if (empty($products)) {
            return null;
        }

        $this->check_configured_correctly();

        if (in_array($country, $this->supported_countries)) {
            if (get_option('enable_taxjar_address_validation') == '1') {
                $request = [
                    'street' => $street_address,
                    'city' => $city,
                    'state' => $state,
                    'zip' => $post_code,
                    'country' => $country,
                ];
                $_request = json_encode($request);
                require_code('character_sets');
                $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');

                $_response = $this->make_taxjar_request($this->endpoints['validateAddress'], ['convert_to_internal_encoding' => true, 'post_params' => $_request, 'timeout' => 20.0, 'raw_content_type' => 'application/json', 'ignore_http_status' => true], true);
                $response = @json_decode($_response, true);

                if (!is_array($response) || array_key_exists('error', $response)) { // Those without a TaxJar professional API will get errors; just log them and move onward
                    $errormsg = 'TaxJar: ' . $_response;
                    require_code('failure');
                    cms_error_log($errormsg, 'error_occurred_api');
                } else { // Found an address; use the first one returned
                    $street_address = $response[0]['street'];
                    $city = $response[0]['city'];
                    $state = $response[0]['state'];
                    $post_code = $response[0]['zip'];
                    $country = $response[0]['country'];
                }
            }

            // Work out TaxJar lookup call...

            $taxjar_cart_items = [];
            foreach ($products as $i => $parts) {
                list($item, $details) = $parts;

                $quantity = $item[$field_name_prefix . 'quantity'];
                $tax_code = $details['tax_code'];
                $price = $details['price'];

                $taxjar_cart_items[] = [
                    'quantity' => $quantity,
                    'unit_price' => $price,
                    'product_tax_code' => intval(substr($tax_code, strlen('TJ:'))),
                    'id' => strval($i),
                ];
            }

            $shipping = [
                'from_country' => get_option('business_country'),
                'from_zip' => get_option('business_post_code'),
                'from_state' => get_option('business_state'),
                'from_city' => get_option('business_city'),
                'from_street' => get_option('business_street_address'),
                'to_country' => $country,
                'to_zip' => $post_code,
                'to_state' => $state,
                'to_city' => $city,
                'to_street' => $street_address,
                'shipping' => $shipping_cost,
            ];

            $request = $shipping + [
                'customer_id' => $GLOBALS['FORUM_DRIVER']->get_username($member_id, false, USERNAME_DEFAULT_BLANK),
                'line_items' => $taxjar_cart_items
            ];
            $_request = json_encode($request);
            require_code('character_sets');
            $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');

            // Do TaxJar call...

            $_response = $this->make_taxjar_request($this->endpoints['taxes'], ['convert_to_internal_encoding' => true, 'post_params' => $_request, 'timeout' => 20.0, 'raw_content_type' => 'application/json', 'ignore_http_status' => true], true);
            $response = @json_decode($_response, true);

            // Error handling...

            if (array_key_exists('error', $response)) {
                require_code('failure');
                cms_error_log('TaxJar: ' . $_response);

                warn_exit('TaxJar: ' . $_response);
            }

            // Reset line_items; we will be re-constructing it
            $request['line_items'] = [];

            $request['amount'] = $shipping_cost;

            // Process TaxJar results...
            if (isset($response['tax']['breakdown']['line_items'])) {
                foreach ($response['tax']['breakdown']['line_items'] as $cart_item) {
                    $i = intval($cart_item['id']); // The IDs passed through TaxJar are just array indexes for what we are doing

                    $tax = 0.0;
                    if (isset($products[$i])) { // Should always be true, but we're being defensive
                        list($item, $details) = $products[$i];

                        if (isset($cart_item['tax_collectable'])) {
                            $tax = $cart_item['tax_collectable'];
                        }

                        $quantity = $item[$field_name_prefix . 'quantity'];
                        $tax_code = $details['tax_code'];
                        $price = $details['price'];
                        $sku = @cms_empty_safe($details['type_special_details']['sku']) ? strval('item' . strval($i)) : $details['type_special_details']['sku'];

                        // Re-build $taxjar_cart_items with original data and more
                        $taxjar_cart_items[$i] = [
                            // Original data (it's already in there, but we will re-set it for clarity)
                            'quantity' => $quantity,
                            'unit_price' => $price,
                            'product_tax_code' => intval(substr($tax_code, strlen('TJ:'))),
                            'id' => strval($i),

                            // For declare_completed to work we will need to be sending some result data back to TaxJar
                            'product_identifier' => $sku,
                            'sales_tax' => $tax,
                        ];
                        $request['amount'] += ($price * $quantity);

                        // Now extend our original $item_details structure with what we have learned...

                        $tax_derivation = ['taxjar' => $tax];

                        $products[$i][2] = $tax_derivation;
                        $products[$i][3] = $tax;

                        // We need to make sure this matches the TaxJar transaction API requirements
                        $products[$i][4] = ['taxjar' => $shipping + ['amount' => $shipping_cost + ($price * $quantity), 'sales_tax' => $tax, 'line_items' => [$taxjar_cart_items[$i]]]];
                        $item_details[$i] = $products[$i];
                    }
                }
            }

            // TaxJar does not return products which are not taxable, so we have to figure out which ones were omitted and add them ourselves.
            //  Parallels the above code.
            foreach ($products as $i => $parts) {
                if (count($parts) >= 5) {
                    continue; // Product was already handled by TaxJar
                }

                $tax = 0.0;

                list($item, $details) = $parts;

                $quantity = $item[$field_name_prefix . 'quantity'];
                $tax_code = $details['tax_code'];
                $price = $details['price'];
                $sku = @cms_empty_safe($details['type_special_details']['sku']) ? strval('item' . strval($i)) : $details['type_special_details']['sku'];

                // Re-build $taxjar_cart_items with original data and more
                $taxjar_cart_items[$i] = [
                    // Original data (it's already in there, but we will re-set it for clarity)
                    'quantity' => $quantity,
                    'unit_price' => $price,
                    'product_tax_code' => intval(substr($tax_code, strlen('TJ:'))),
                    'id' => strval($i),

                    // For declare_completed to work we will need to be sending some result data back to TaxJar
                    'product_identifier' => $sku,
                    'sales_tax' => $tax,
                ];
                $request['amount'] += ($price * $quantity);

                // Now extend our original $item_details structure with what we have learned...

                $tax_derivation = ['taxjar' => $tax];

                $products[$i][2] = $tax_derivation;
                $products[$i][3] = $tax;

                // We need to make sure this matches the TaxJar transaction API requirements
                $products[$i][4] = ['taxjar' => $shipping + ['amount' => $shipping_cost + ($price * $quantity), 'sales_tax' => $tax, 'line_items' => [$taxjar_cart_items[$i]]]];
                $item_details[$i] = $products[$i];
            }

            // Calculate the shipping tax and derivation for that (which is minimal as TaxJar does not break it down)
            $shipping_tax_derivation = [];
            $shipping_tax = 0.0;
            if (isset($response['tax']['breakdown']['shipping']['tax_collectable'])) {
                $shipping_tax = $response['tax']['breakdown']['shipping']['tax_collectable'];
                $shipping_tax_derivation = ['taxjar' => $shipping_tax];
            }

            // The tax tracking for TaxJar isn't an ID reference to data stored in the TaxJar account (as there is no such thing), it's the whole request with the extra data for declare_completed added in
            $request['line_items'] = $taxjar_cart_items;
            $request['sales_tax'] = $response['tax']['amount_to_collect'];
            $tax_tracking = ['taxjar' => $request];

            return [$shipping_tax_derivation, $shipping_tax, $tax_tracking, []];
        }

        return null;
    }

    /**
     * Mark an order completed on TaxJar, i.e. create a transaction if in the United States.
     *
     * @param  mixed $tracking_id The tracking ID or reference data
     * @param  ID_TEXT $txn_id The transaction ID
     * @param  MEMBER $member_id The member ID
     * @param  ID_TEXT $session_id The session ID of the purchaser
     */
    public function declare_completed($tracking_id, string $txn_id, int $member_id, string $session_id)
    {
        if (get_option('business_country') != 'US') {
            return; // TaxJar only supports transactions for United States businesses, so do nothing otherwise
        }

        $date = date(DATE_ATOM); // Do not use PHP's DATE_ISO8601, as that is not actually valid ISO-8601
        $request = $tracking_id;
        $request['transaction_id'] = $txn_id;
        $request['transaction_date'] = $date;


        $_request = json_encode($request);
        require_code('character_sets');
        $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');

        $_response = $this->make_taxjar_request($this->endpoints['createTransaction'], ['convert_to_internal_encoding' => true, 'post_params' => $_request, 'timeout' => 20.0, 'raw_content_type' => 'application/json', 'ignore_http_status' => true]);
        $response = @json_decode($_response->data, true);

        if (!isset($response['order'])) {
            trigger_error('TaxJar: ' . $_response->data, E_USER_WARNING);
        }
    }

    /**
     * Attach additional service-specific fields for a tax input widget.
     *
     * @param  Tempcode $field_set The form field template (passed by reference)
     * @param  ID_TEXT $default_set The default set of fields to use (passed by reference)
     * @param  mixed $set_title A human intelligible name for this input field, provided in plain-text format or as HTML via do_lang_tempcode/protect_from_escaping
     * @param  mixed $description A description for this input field, provided in HTML format (string or Tempcode)
     * @param  ID_TEXT $set_name The name which this input field is for
     * @param  string $default The default value for this input field
     * @param  boolean $required Whether this is a required input field
     * @param  ?integer $tabindex The tab index of the field (null: not specified)
     */
    public function form_input_tax_code(object &$field_set, string &$default_set, $set_title, $description, string $set_name, string $default, bool $required, ?int $tabindex = null)
    {
        require_code('form_templates');

        $_required = ($required) ? '-required' : '';

        $has_tj = (preg_match('#^TJ:#', $default) != 0);
        if ($has_tj) {
            $default_set = 'tj';
        }

        $__tjs = $this->make_taxjar_request($this->endpoints['categories'], ['convert_to_internal_encoding' => true, 'timeout' => 20.0, 'trigger_error' => false], true, true);
        $_tjs = @json_decode($__tjs, true);
        if (isset($_tjs['categories']) && is_array($_tjs['categories'])) {
            $tjs = new Tempcode();
            foreach ($_tjs['categories'] as $category) {
                $comparison = 'TJ:' . $category['product_tax_code'];
                $tjs->attach(form_input_list_entry($category['product_tax_code'], ($comparison == $default), $category['name'], false, false, $category['description']));
            }
            require_css('widget_select2');
            require_javascript('jquery');
            require_javascript('select2');
            $input = do_template('FORM_SCREEN_INPUT_LIST', [
                '_GUID' => 'e1578f690e8c0002bef748ac02296721',
                'TABINDEX' => strval($tabindex),
                'REQUIRED' => $_required,
                'NAME' => $set_name . '_tj',
                'CONTENT' => $tjs,
                'INLINE_LIST' => false,
                'SIZE' => strval(5),
            ]);
            $field_set->attach(_form_input($set_name . '_tj', do_lang_tempcode('TAX_TJ'), do_lang_tempcode('DESCRIPTION_TAX_TJ'), $input, $required, false, $tabindex));
        }
    }

    /**
     * Read a tax value from the POST environment specific for this tax service.
     *
     * @param  string $name Variable name
     * @return string The value (blank: there are no POST parameters present specific for this tax service)
     */
    public function post_param_tax_code(string $name) : string
    {
        $value = post_param_string($name . '_tj', '');
        if ($value != '') {
            $value = 'TJ:' . $value;
        }

        return $value;
    }

    /**
     * Render the tax code field value for this tax service.
     *
     * @param  ID_TEXT $tax_code The tax code of the field
     * @return ?mixed The render text as an escaped string or Tempcode (null: the code is not applicable with this tax service)
     */
    public function render_field_value(string $tax_code)
    {
        if ((get_option('taxjar_api_key') == '')) {
            return null;
        }

        if (preg_match('#^TJ:#', $tax_code) != 0) {
            $current_tj = substr($tax_code, 3);
            require_code('http');
            $__tjs = $this->make_taxjar_request($this->endpoints['categories'], ['convert_to_internal_encoding' => true], true, true);
            $_tjs = @json_decode($__tjs, true);
            if (isset($_tjs['categories']) && is_array($_tjs['categories'])) {
                foreach ($_tjs['categories'] as $tj_line) {
                    if ($tj_line['product_tax_code'] == $current_tj) {
                        return escape_html($tj_line['name']);
                    }
                }
            }
            return escape_html($tax_code);
        }
        return null;
    }

    /**
     * Make a request to the TaxJar API.
     * Since all TaxJar requests require the API key, and we want to specify the API version being used, we use this wrapper for TaxJar.
     *
     * @param  SHORT_TEXT $endpoint The API endpoint to request
     * @param  array $options Array of options to pass
     * @param  boolean $cache_and_carry Whether to perform this request as a cache and carry
     * @param  boolean $skip_config_check Whether to skip checking if TaxJar was configured correctly before making the request
     * @return mixed The output of cms_http_request or, if $cache_and_carry, the output of cache_and_carry
     */
    protected function make_taxjar_request(string $endpoint, array $options, bool $cache_and_carry = false, bool $skip_config_check = false)
    {
        require_code('http');

        if (!$skip_config_check) {
            $this->check_configured_correctly();
        }

        $base_url = ((get_option('taxjar_api_sandbox') == '1') ? $this->base_url_sandbox : $this->base_url_live);

        // Add in TaxJar headers
        if (!isset($options['extra_headers'])) {
            $options['extra_headers'] = [];
        }
        $options['extra_headers']['Authorization'] = 'Bearer ' . get_option('taxjar_api_key');
        $options['extra_headers']['x-api-version'] = $this->apiVersion;

        if ($cache_and_carry) {
            list($response) = cache_and_carry('cms_http_request', [$base_url . $endpoint, $options]);
        } else {
            $response = cms_http_request($base_url . $endpoint, $options);
        }

        return $response;
    }

    /**
    * Check that TaxJar is correctly configured.
    */
    protected function check_configured_correctly()
    {
        require_code('ecommerce');

        check_country_configuration($this->get_tax_service_label(), $this->supported_countries);

        // Check for configuration errors
        if ((get_option('taxjar_api_key') == '')) {
            warn_exit(do_lang_tempcode('TAXJAR_NOT_CONFIGURED'), false, true);
        }
    }
}
