<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_ecommerce_tax_taxcloud
{
    // The TaxCloud API URLs
    protected $urls = [
        'ping' => 'https://api.taxcloud.com/1.0/TaxCloud/Ping', // Check TaxCloud service status
        'lookup' => 'https://api.taxcloud.com/1.0/TaxCloud/Lookup', // Perform a tax look-up (creates a transaction)
        'verifyAddress' => 'https://api.taxcloud.com/1.0/TaxCloud/VerifyAddress', // Verify an address validity
        'authorizedWithCapture' => 'https://api.taxcloud.com/1.0/TaxCloud/AuthorizedWithCapture', // Mark transaction as complete
        'TIC' => 'https://taxcloud.com/tic/json/', // Look up TIC tax codes in JSON format
        'TICText' => 'https://taxcloud.net/tic/?format=text', // Look up TIC tax codes in text format
    ];

    /**
     * Array of country codes supported by TaxCloud
     */
    protected $supported_countries = [ // TODO: This may change; see #3173
        'US' // United States
    ];

    /**
     * Get the name of this tax service.
     *
     * @return SHORT_TEXT The name of the tax service
     */
    public function get_tax_service_label() : string
    {
        return do_lang('TAX_SERVICE_TAXCLOUD');
    }

    /**
     * Run a health check on this tax service.
     *
     * @return ?array Pair: Whether or not the health check passes, and a message string (null: cannot run a health check on this service)
     */
    public function health_check() : ?array
    {
        // No health check if not configured
        if ((get_option('taxcloud_api_key') == '') || (get_option('taxcloud_api_id') == '')) {
            return null;
        }

        $request = [
            'apiLoginID' => get_option('taxcloud_api_id'),
            'apiKey' => get_option('taxcloud_api_key'),
        ];
        $_request = json_encode($request);
        require_code('character_sets');
        $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');

        $_response = cms_http_request($this->urls['ping'], ['convert_to_internal_encoding' => true, 'post_params' => $_request, 'timeout' => 20.0, 'raw_content_type' => 'application/json', 'ignore_http_status' => true]);
        $response = @json_decode($_response->data, true);

        if (is_array($response)) {
            if ($response['ResponseType'] != 3) {
                $errormsg = $response['Messages'][0]['Message'];
                return [false, 'TaxCloud: ' . $errormsg];
            } else {
                return [(is_array($response)) && ($response['ResponseType'] == 3), 'Could not perform TaxCloud ping request'];
            }
        }

        return [false, 'TaxCloud: ' . $_response->message];
    }

    /**
     * Check at which priority this tax service should be considered given a product to purchase.
     *
     * @param  array $parts The item / details pair
     * @return integer The priority for this service (see TAX_SERVICE_PRIORITY_*) (0: do not use for this set of products)
     */
    public function service_priority(array $parts) : int
    {
        // Do not use if not configured
        if ((get_option('taxcloud_api_key') == '') || (get_option('taxcloud_api_id') == '')) {
            return TAX_SERVICE_PRIORITY_NONE;
        }

        list($item, $details) = $parts;
        if (preg_match('#^TIC:#', $details['tax_code']) != 0) {
            return TAX_SERVICE_PRIORITY_HIGH;
        }
        return TAX_SERVICE_PRIORITY_NONE;
    }

    /**
    * Find the tax for a number of items being sold together.
    *
    * @param  array $item_details A list of pairs: shopping-cart/order style row (with at least 'quantity'), product details (with at least 'tax_code' and 'price'). This is returned by reference as a list of tuples, (tax, tax_derivation, tax_tracking) gets appended.
    * @param  array $products The products to process with this tax service
    * @param  string $field_name_prefix Field name prefix
    * @param  REAL $shipping_cost The shipping cost
    * @param  MEMBER $member_id The member this is for
    * @param  SHORT_TEXT $street_address The street address of the member
    * @param  ID_TEXT $city The city of the member
    * @param  ID_TEXT $state The state of the member
    * @param  ID_TEXT $country The country code of the member
    * @param  ID_TEXT $post_code The postal code of the member
    * @return ?array A tuple: The shipping tax derivation, shipping tax due (including shipping tax), shipping tax tracking ID, and any items that should instead be processed as free items (null: this tax service does not support the items or address requested)
    */
    public function get_tax_using_tax_codes(array &$item_details, array $products, string $field_name_prefix, float $shipping_cost, int $member_id, string $street_address, string $city, string $state, string $country, string $post_code) : ?array
    {
        if (empty($products)) {
            return null;
        }

        $this->check_configured_correctly();

        if ($country == 'US') {
            // Cleanup address...

            list($street_address_1, $street_address_2) = split_street_address($street_address, 2);

            $zip_parts = explode('-', $post_code, 2);
            $request = [
                'apiLoginID' => get_option('taxcloud_api_id'),
                'apiKey' => get_option('taxcloud_api_key'),
                'Address1' => $street_address_1,
                'Address2' => $street_address_2,
                'City' => $city,
                'State' => $state,
                'Zip5' => $zip_parts[0],
                'Zip4' => array_key_exists(1, $zip_parts) ? $zip_parts[1] : '',
            ];
            $_request = json_encode($request);
            require_code('character_sets');
            $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');

            $_response = cms_http_request($this->urls['verifyAddress'], ['convert_to_internal_encoding' => true, 'post_params' => $_request, 'timeout' => 20.0, 'raw_content_type' => 'application/json', 'ignore_http_status' => true]);
            $response = @json_decode($_response->data, true);

            if (!is_array($response)) {
                $errormsg = 'TaxCloud: ' . $_response->message;
                require_code('failure');
                cms_error_log($errormsg, 'error_occurred_api');
            } else {
                if ($response['ErrNumber'] == '0') {
                    $street_address = trim($response['Address1'] . (isset($response['Address2']) ? ("\n" . $response['Address2']) : ''));
                    $city = $response['City'];
                    $state = $response['State'];
                    $post_code = $response['Zip5'] . (($response['Zip4'] == '') ? '' : ('-' . $response['Zip4']));
                }
                // ^ Other error codes are not logged as it could just be user error
            }

            // Work out TaxCloud call...

            $cart_items = [];
            foreach ($products as $i => $parts) {
                list($item, $details) = $parts;

                $quantity = $item[$field_name_prefix . 'quantity'];
                $tax_code = $details['tax_code'];
                $price = $details['price'];
                $sku = @cms_empty_safe($details['type_special_details']['sku']) ? strval('item' . strval($i)) : $details['type_special_details']['sku'];

                $cart_items[$i] = [
                    'Qty' => $quantity,
                    'Price' => $price,
                    'TIC' => intval(substr($tax_code, strlen('TIC:'))),
                    'ItemID' => $sku,
                    'Index' => $i,
                ];
            }

            if ($shipping_cost != 0.00) {
                $cart_items[count($products)] = [
                    'Qty' => 1,
                    'Price' => $shipping_cost,
                    'TIC' => 11010,
                    'ItemID' => 'shipping',
                    'Index' => count($products),
                ];
            }

            list($street_address_1, $street_address_2) = split_street_address($street_address, 2);
            list($business_street_address_1, $business_street_address_2) = split_street_address(get_option('business_street_address'), 2);

            $zip_parts = explode('-', $post_code, 2);
            $business_zip_parts = explode('-', get_option('business_post_code'), 2);

            $request = [
                'apiLoginID' => get_option('taxcloud_api_id'),
                'apiKey' => get_option('taxcloud_api_key'),
                'customerID' => is_guest($member_id) ? ('guest-' . get_session_id()) : ('member-' . strval($member_id)),
                'deliveredBySeller' => false,
                'cartID' => '',
                'destination' => [
                    'Address1' => $street_address_1,
                    'Address2' => $street_address_2,
                    'City' => $city,
                    'State' => $state,
                    'Zip5' => $zip_parts[0],
                    'Zip4' => array_key_exists(1, $zip_parts) ? $zip_parts[1] : '',
                ],
                'origin' => [
                    'Address1' => $business_street_address_1,
                    'Address2' => $business_street_address_2,
                    'City' => get_option('business_city'),
                    'State' => get_option('business_state'),
                    'Zip5' => $business_zip_parts[0],
                    'Zip4' => array_key_exists(1, $business_zip_parts) ? $business_zip_parts[1] : '',
                ],
                'cartItems' => $cart_items,
            ];
            $_request = json_encode($request);
            require_code('character_sets');
            $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');

            // Do TaxCloud call...

            $_response = cms_http_request($this->urls['lookup'], ['convert_to_internal_encoding' => true, 'post_params' => $_request, 'timeout' => 20.0, 'raw_content_type' => 'application/json', 'ignore_http_status' => true]);
            $response = @json_decode($_response->data, true);

            // Error handling...

            if (!is_array($response)) {
                $errormsg = $_response->message;

                require_code('failure');
                cms_error_log('TaxCloud: ' . $errormsg);

                warn_exit($errormsg);
            }

            if ($response['ResponseType'] != 3) {
                $errormsg = $response['Messages'][0]['Message'];

                require_code('failure');
                cms_error_log('TaxCloud: ' . $errormsg);

                warn_exit($errormsg);
            }

            // Process TaxCloud results...

            foreach ($response['CartItemsResponse'] as $cart_item) {
                $i = $cart_item['CartItemIndex'];

                if (isset($products[$i])) {
                    $tax = $cart_item['TaxAmount'];
                    $tax_derivation = ['taxcloud' => $tax];

                    $products[$i][2] = $tax_derivation;
                    $products[$i][3] = $tax;
                    $products[$i][4] = ['taxcloud' => $response['CartID']];
                    $item_details[$i] = $products[$i];
                } else {
                    // Shipping...

                    $shipping_tax = $cart_item['TaxAmount'];
                    $shipping_tax_derivation = ['taxcloud' => $shipping_tax];
                }
            }

            $tax_tracking = ['taxcloud' => $response['CartID']];

            return [$shipping_tax_derivation, $shipping_tax, $tax_tracking, []];
        }

        return null;
    }

    /**
     * Mark an order completed i.e. tax has been received for payment to the tax authority.
     *
     * @param  mixed $tracking_id The tracking ID or reference data
     * @param  ID_TEXT $txn_id The transaction ID
     * @param  MEMBER $member_id The member ID
     * @param  ID_TEXT $session_id The session ID of the purchaser
     */
    public function declare_completed($tracking_id, string $txn_id, int $member_id, string $session_id)
    {
        //$date = date('Y-m-d', tz_time(time(), get_site_timezone()));
        $date = date('Y-m-d'); // UTC-based according to TaxCloud support
        $request = [
            'apiLoginID' => get_option('taxcloud_api_id'),
            'apiKey' => get_option('taxcloud_api_key'),
            'customerID' => is_guest($member_id) ? ('guest-' . $session_id) : ('member-' . strval($member_id)),
            'cartID' => $tracking_id,
            'orderID' => $txn_id,
            'dateAuthorized' => $date,
            'dateCaptured' => $date,
        ];
        $_request = json_encode($request);
        require_code('character_sets');
        $_request = convert_to_internal_encoding($_request, get_charset(), 'utf-8');

        $_response = http_get_contents($this->urls['authorizedWithCapture'], ['convert_to_internal_encoding' => true, 'post_params' => $_request, 'timeout' => 20.0, 'raw_content_type' => 'application/json', 'ignore_http_status' => true]);
        $response = @json_decode($_response, true);

        if (!is_array($response)) {
            trigger_error('TaxCloud: ' . $response->message, E_USER_WARNING);
        } else {
            if ($response['ResponseType'] != 3) {
                $messages = [];
                foreach ($response['Messages'] as $message) {
                    if (strpos($message['Message'], 'already') === false) {
                        $messages[] = $message['Message'];
                    }
                }
                if (!empty($messages)) {
                    trigger_error(implode('; ', $messages), E_USER_WARNING);
                }
            }
        }
    }

    /**
     * Attach additional service-specific fields for a tax input widget.
     *
     * @param  Tempcode $field_set The form field template (passed by reference)
     * @param  ID_TEXT $default_set The default set of fields to use (passed by reference)
     * @param  mixed $set_title A human intelligible name for this input field, provided in plain-text format or as HTML via do_lang_tempcode/protect_from_escaping
     * @param  mixed $description A description for this input field, provided in HTML format (string or Tempcode)
     * @param  ID_TEXT $set_name The name which this input field is for
     * @param  string $default The default value for this input field
     * @param  boolean $required Whether this is a required input field
     * @param  ?integer $tabindex The tab index of the field (null: not specified)
     */
    public function form_input_tax_code(object &$field_set, string &$default_set, $set_title, $description, string $set_name, string $default, bool $required, ?int $tabindex = null)
    {
        // Do not render if not enabled
        if ((get_option('taxcloud_api_key') == '') || (get_option('taxcloud_api_id') == '')) {
            return;
        }

        require_code('form_templates');

        $_required = ($required) ? '-required' : '';

        require_code('files2');
        $has_tic = (preg_match('#^TIC:#', $default) != 0);
        if ($has_tic) {
            $default_set = 'tic';
        }
        require_code('http');
        list($__tics) = cache_and_carry('cms_http_request', [$this->urls['TIC'], ['convert_to_internal_encoding' => true, 'timeout' => 20.0, 'trigger_error' => false]]);
        $_tics = @json_decode($__tics, true);
        if (is_array($_tics)) {
            $tics = new Tempcode();
            $tics->attach($this->_prepare_tics_list($_tics['tic_list'], $has_tic ? substr($default, 4) : '', 'root'));
            $tics->attach($this->_prepare_tics_list($_tics['tic_list'], $has_tic ? substr($default, 4) : '', ''));
            require_css('widget_select2');
            require_javascript('jquery');
            require_javascript('select2');
            $input = do_template('FORM_SCREEN_INPUT_LIST', [
                '_GUID' => '66e31c1b060b11caf570c36b09ac4a05',
                'TABINDEX' => strval($tabindex),
                'REQUIRED' => $_required,
                'NAME' => $set_name . '_tic',
                'CONTENT' => $tics,
                'INLINE_LIST' => false,
                'SIZE' => strval(5),
            ]);
            $field_set->attach(_form_input($set_name . '_tic', do_lang_tempcode('TAX_TIC'), do_lang_tempcode('DESCRIPTION_TAX_TIC'), $input, $required, false, $tabindex));
        }
    }

    /**
     * Read a tax value from the POST environment specific for this tax service.
     *
     * @param  string $name Variable name
     * @return string The value (blank: there are no POST parameters present specific for this tax service)
     */
    public function post_param_tax_code(string $name) : string
    {
        $value = post_param_string($name . '_tic', '');
        if ($value != '') {
            $value = 'TIC:' . $value;
        }

        return $value;
    }

    /**
     * Render the tax code field value for this tax service.
     *
     * @param  ID_TEXT $tax_code The tax code of the field
     * @return ?mixed The render text as an escaped string or Tempcode (null: the code is not applicable with this tax service)
     */
    public function render_field_value(string $tax_code)
    {
        if ((get_option('taxcloud_api_key') == '') || (get_option('taxcloud_api_id') == '')) {
            return null;
        }

        if (preg_match('#^TIC:#', $tax_code) != 0) {
            $current_tic = intval(substr($tax_code, 4));
            require_code('http');
            list($__tics) = cache_and_carry('cms_http_request', [$this->urls['TICText'], ['convert_to_internal_encoding' => true]]);
            $_tics = explode("\n", $__tics);
            foreach ($_tics as $tic_line) {
                if (strpos($tic_line, '=') !== false) {
                    list($tic, $tic_label) = explode('=', $tic_line, 2);
                    if (intval($tic) == $current_tic) {
                        return escape_html($tic_label);
                    }
                }
            }
            return escape_html($tax_code);
        }
        return null;
    }

    /**
     * Get a hierarchical TIC selection list.
     *
     * @param  array $all_tics The list of TICs
     * @param  string $default Default value
     * @param  string $parent Only get child nodes of
     * @param  string $pre Prefix for parent chain
     * @param  integer $depth Current recursion depth
     * @return Tempcode The list
     */
    protected function _prepare_tics_list(array $all_tics, string $default, string $parent, string $pre = '', int $depth = 0) : object
    {
        if ($depth > 5) {
            return new Tempcode(); // Some kind of error, likely corrupt data (which we've seen happen with TaxCloud)
        }

        $child_tics = [];
        foreach ($all_tics as $i => $_tic) {
            $tic = $_tic['tic'];
            if ($tic['parent'] == $parent) {
                $child_tics[] = $tic;
            }

            if (isset($tic['children'])) {
                foreach ($tic['children'] as $__tic) {
                    $all_tics[] = $__tic;
                }
                unset($all_tics[$i]['tic']['children']);
            }
        }
        sort_maps_by($child_tics, 'label', false, true);

        $tics_list = new Tempcode();
        foreach ($child_tics as $tic) {
            $text = $pre . $tic['id'] . ': ' . $tic['title'];
            $tics_list->attach(form_input_list_entry($tic['id'], $tic['id'] == $default, $text));

            $under = $this->_prepare_tics_list($all_tics, $default, $tic['id'], $text . ' > ', $depth + 1);
            $tics_list->attach($under);
        }

        return $tics_list;
    }

    /**
    * Check that TaxCloud is correctly configured.
    */
    protected function check_configured_correctly()
    {
        require_code('ecommerce');

        check_country_configuration($this->get_tax_service_label(), $this->supported_countries);

        // Check for configuration errors
        if ((get_option('taxcloud_api_key') == '') || (get_option('taxcloud_api_id') == '')) {
            warn_exit(do_lang_tempcode('TAXCLOUD_NOT_CONFIGURED'), false, true);
        }
    }
}
