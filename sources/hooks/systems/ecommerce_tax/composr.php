<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_ecommerce_tax_composr
{
    // API URLs used by this tax service
    protected $urls = [
        'EUVATRates' => 'https://euvatrates.com/rates.json',
    ];

    /**
     * Check whether or not an item uses this tax service for its tax calculations.
     *
     * @param  array $parts The item / details pair
     * @return boolean Whether or not the product uses this tax service for its taxes
     */
    public function uses_this_service(array $parts) : bool
    {
        // Composr is hard-coded to be the last tax service hook checked and is always used if a product gets to this point
        return true;
    }

    /**
    * Find the tax for a number of items being sold together.
    *
    * @param  array $item_details A list of pairs: shopping-cart/order style row (with at least 'quantity'), product details (with at least 'tax_code' and 'price'). This is returned by reference as a list of tuples, (tax, tax_derivation, tax_tracking) gets appended.
    * @param  array $products The products to process with this tax service
    * @param  string $field_name_prefix Field name prefix
    * @param  REAL $shipping_cost The shipping cost
    * @param  MEMBER $member_id The member this is for
    * @param  SHORT_TEXT $street_address The street address of the member
    * @param  ID_TEXT $city The city of the member
    * @param  ID_TEXT $state The state of the member
    * @param  ID_TEXT $country The country code of the member
    * @param  ID_TEXT $post_code The postal code of the member
    * @return ?array A tuple: The shipping tax derivation (null is do not change), shipping tax due (including shipping tax) (null means do not change), shipping tax tracking ID (null means do not change), and any items that should instead be processed as free items (null: this tax service does not support the items or address requested)
    */
    public function get_tax_using_tax_codes(array &$item_details, array $products, string $field_name_prefix, float $shipping_cost, int $member_id, string $street_address, string $city, string $state, string $country, string $post_code) : ?array
    {
        $free_item_details = [];
        foreach ($products as $i => $parts) {
            list($item, $details) = $parts;

            $quantity = $item[$field_name_prefix . 'quantity'];
            $tax_code = $details['tax_code'];
            $amount = $details['price'];

            // Europe
            if ($tax_code == 'EU') {
                require_code('http');
                list($__rates) = cache_and_carry('cms_http_request', [$this->urls['EUVATRates'], ['convert_to_internal_encoding' => true, 'timeout' => 20.0]]);
                $_rates = @json_decode($__rates, true);

                if (isset($_rates['rates'][$country])) {
                    $rate = $_rates['rates'][$country]['standard_rate'];
                } else {
                    // EXCEPTION: Not in Europe
                    $free_item_details[$i] = $parts;
                    unset($products[$i]);
                    continue;
                }

                $tax = round(($rate / 100.0) * $amount * $quantity, 2);
                $tax_derivation = [$country => $tax];
            } else {
                // Simple, with some guards...

                $tax_country_regexp = get_option('tax_country_regexp');
                if (!empty($tax_country_regexp)) {
                    $check = @preg_match('#' . $tax_country_regexp . '#', $country);
                    if ($check === false) {
                        warn_exit(do_lang_tempcode('INVALID_REGULAR_EXPRESSION', do_lang('TAX_COUNTRY_REGEXP'), escape_html($tax_country_regexp), cms_error_get_last()));
                    }
                    if ($check == 0) {
                        // EXCEPTION: Country not covered
                        $free_item_details[$i] = $parts;
                        unset($products[$i]);
                        continue;
                    }
                }
                $tax_state_regexp = get_option('tax_state_regexp');
                if (!empty($tax_state_regexp)) {
                    $check = @preg_match('#' . $tax_state_regexp . '#', $state);
                    if ($check === false) {
                        warn_exit(do_lang_tempcode('INVALID_REGULAR_EXPRESSION', do_lang('TAX_STATE_REGEXP'), escape_html($tax_country_regexp), cms_error_get_last()));
                    }
                    if ($check == 0) {
                        // EXCEPTION: State not covered
                        $free_item_details[$i] = $parts;
                        unset($products[$i]);
                        continue;
                    }
                }

                // Simple rate
                if (substr($tax_code, -1) == '%') {
                    $rate = floatval($tax_code);
                    $tax = round(($rate / 100.0) * $amount * $quantity, 2);
                } else {
                    // Simple flat
                    $tax = round(floatval($tax_code) * $quantity, 2);
                }

                $tax_derivation = ['?' => $tax];
            }

            $products[$i][2] = $tax_derivation;
            $products[$i][3] = $tax;
            $products[$i][4] = [];
            $item_details[$i] = $products[$i];
        }

        return [null, null, null, $free_item_details];
    }

    /**
     * Read a tax value from the POST environment specific for this tax service.
     *
     * @param  string $name Variable name
     * @return string The value
     */
    public function post_param_tax_code(string $name) : string
    {
        if (substr(post_param_string($name, ''), -3) == '_eu') { // Semantic: EU rate
            return 'EU';
        }
        return '';
    }
}
