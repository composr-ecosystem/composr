<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_language_editing
 */

/**
 * Rebuild database indices, using correct rules for new field types.
 *
 * @param  boolean $only_trans Whether to only rebuild translatable field indexes
 */
function rebuild_indices(bool $only_trans = false)
{
    push_db_scope_check(false);
    push_query_limiting(false);

    global $TABLE_LANG_FIELDS_CACHE;

    if (get_forum_type() == 'cns') {
        require_code('cns_members_action2');
        rebuild_all_cpf_indices();
    }

    push_db_scope_check(false);

    $indices = $GLOBALS['SITE_DB']->query_select('db_meta_indices', ['*']);
    foreach ($indices as $index) {
        $fields = explode(',', $index['i_fields']);
        $ok = false;
        foreach ($fields as $field) {
            if ((isset($TABLE_LANG_FIELDS_CACHE[$index['i_table']][$field])) || (!$only_trans)) {
                $ok = true;
                break;
            }
        }
        if ($ok) {
            $GLOBALS['SITE_DB']->delete_index_if_exists($index['i_table'], $index['i_name']);
            $GLOBALS['SITE_DB']->create_index($index['i_table'], $index['i_name'], $fields);
        }
    }
}

/**
 * Disable content translation.
 */
function disable_content_translation()
{
    return; // TODO: catastrophically broken and will corrupt websites! Disabled for integrity.

    /*
    push_db_scope_check(false);
    push_query_limiting(false);

    if (get_file_base() != get_custom_file_base()) {
        warn_exit(do_lang_tempcode('SHARED_INSTALL_PROHIBIT'));
    }
    if (!multi_lang_content()) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('1a3df0b21b3557b09cad74758c55b733')));
    }

    cms_disable_time_limit();

    reload_lang_fields(true);

    global $HAS_MULTI_LANG_CONTENT;
    $HAS_MULTI_LANG_CONTENT = false;

    $db = $GLOBALS['SITE_DB'];

    $type_remap = $db->driver->get_type_remap(true);

    $_table_lang_fields = $db->query('SELECT m_table,m_name,m_type FROM ' . $db->get_table_prefix() . 'db_meta WHERE m_type LIKE \'' . db_encode_like('%\_TRANS%') . '\' ORDER BY m_table,m_name');
    foreach ($_table_lang_fields as $field) {
        if (running_script('execute_temp')) {
            @var_dump($field);
        }

        // Add new implied fields for holding extra Comcode details, and new field to hold main Comcode
        $to_add = ['new' => 'LONG_TEXT'];
        if (strpos($field['m_type'], '__COMCODE') !== false) {
            $to_add += ['text_parsed' => 'LONG_TEXT', 'source_user' => 'MEMBER'];
        }
        foreach ($to_add as $sub_name => $sub_type) {
            $sub_name = $field['m_name'] . '__' . $sub_name;

            $sub_default = mixed();
            if ($sub_type == 'LONG_TEXT') {
                $sub_default = '';
            } else {
                $sub_default = db_get_first_id();
            }

            $query = $db->driver->add_table_field__sql($db->table_prefix . $field['m_table'], $sub_name, $sub_type, $sub_default);
            $db->query($query);
        }

        // Copy from translate table
        $query = 'UPDATE ' . $db->table_prefix . $field['m_table'] . ' a SET ';
        $query .= 'a.' . $field['m_name'] . '__new=' . db_function('COALESCE', ['(SELECT b.text_original FROM ' . $db->table_prefix . 'translate b WHERE b.id=a.' . $field['m_name'] . ' AND broken=0)', '\'\'']);
        if (strpos($field['m_type'], '__COMCODE') !== false) {
            $query .= ', a.' . $field['m_name'] . '__source_user=' . db_function('COALESCE', ['(SELECT b.source_user FROM ' . $db->table_prefix . 'translate b WHERE b.id=a.' . $field['m_name'] . ' AND broken=0)', strval(db_get_first_id())]);
            $query .= ', a.' . $field['m_name'] . '__text_parsed=\'\'';
        }
        $db->_query($query);

        // Delete old main field
        $query = $db->driver->alter_delete_table_field__sql($db->table_prefix . $field['m_table'], $field['m_name']);
        $db->query($query);

        // Rename Comcode field to main field
        $is_autoincrement = false;
        $queries = $db->driver->alter_table_field__sql($db->table_prefix . $field['m_table'], $field['m_name'] . '__new', $type_remap['LONG_TEXT'], false, $is_autoincrement, $field['m_name']);
        foreach ($queries as $query) {
            $db->query($query);
        }

        // Create full-text search index
        $GLOBALS['SITE_DB']->create_index($field['m_table'], '#' . $field['m_name'], [$field['m_name']]);

        reload_lang_fields(true, $field['m_table']);
    }

    // Empty translate table
    $GLOBALS['SITE_DB']->query_delete('translate');

    _update_base_config_for_content_translation(false);

    rebuild_indices(true);
    */
}

/**
 * Enable content translation.
 */
function enable_content_translation()
{
    $dry_run = (get_param_integer('dry_run', 0) == 1);
    $dry_run_file = null;
    if ($dry_run) {
        require_code('files');
        $dry_run_file = cms_fopen_text_write(get_custom_file_base() . '/data_custom/' . uniqid('multi_content_on__', false) . '.log', false, 'ab');
    }

    push_db_scope_check(false);
    push_query_limiting(false);

    if (get_file_base() != get_custom_file_base()) {
        warn_exit(do_lang_tempcode('SHARED_INSTALL_PROHIBIT'));
    }
    if (multi_lang_content()) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('c84d8c8f19b25a91838042d750d85487')));
    }

    cms_disable_time_limit();

    reload_lang_fields(true);

    global $HAS_MULTI_LANG_CONTENT;
    $HAS_MULTI_LANG_CONTENT = true;

    $db = $GLOBALS['SITE_DB'];

    $type_remap = $db->driver->get_type_remap(true);

    $tables = $db->query_select('db_meta', ['DISTINCT m_table']);
    foreach ($tables as $_table) {
        $table = $_table['m_table'];

        if ($dry_run) {
            fwrite($dry_run_file, '--- process db_meta table: ' . json_encode($table) . ' ---' . "\n");
        }

        // Get primary keys on this table
        $primary_keys = $db->query_select('db_meta', ['m_name', 'm_type'], ['m_table' => $table], ' AND m_type LIKE \'' . db_encode_like('*%') . '\' ORDER BY m_name');
        if ($dry_run) {
            fwrite($dry_run_file, 'Primary keys: ' . json_encode($primary_keys) . "\n");
        }

        // Process language fields on the table
        $lang_fields = $db->query_select('db_meta', ['m_name', 'm_type'], ['m_table' => $table], ' AND m_type LIKE \'' . db_encode_like('%\_TRANS%') . '\' ORDER BY m_name');
        foreach ($lang_fields as $field) {
            if ($dry_run) {
                fwrite($dry_run_file, '- process field: ' . json_encode($field) . ' -' . "\n");
            }

            // Remove old full-text search index
            if ($dry_run) {
                fwrite($dry_run_file, 'Delete index if exists: ' . '#' . $field['m_name'] . "\n");
            } else {
                $GLOBALS['SITE_DB']->delete_index_if_exists($table, '#' . $field['m_name']);
            }

            // Rename main field to temporary one
            $is_autoincrement = false;
            $queries = $db->driver->alter_table_field__sql($db->table_prefix . $table, $field['m_name'], $type_remap['LONG_TEXT'], false, $is_autoincrement, $field['m_name'] . '__old');
            foreach ($queries as $query) {
                if ($dry_run) {
                    fwrite($dry_run_file, 'temporary rename query: ' . $query . "\n");
                } else {
                    $db->query($query);
                }
            }

            // Add new field for translate reference
            $query = $db->driver->add_table_field__sql($db->table_prefix . $table, $field['m_name'], $field['m_type'], 0);
            if ($dry_run) {
                fwrite($dry_run_file, 'New field for translate reference: ' . $query . "\n");
            } else {
                $db->query($query);
            }
        }

        // Process every record on the table
        if (count($lang_fields) > 0) { // Nothing to do if there are no lang fields
            $start = 0;
            do {
                $trans = $db->query_select($table, ['*'], [], '', 100, $start, false, []);
                foreach ($trans as $t) {
                    $update_map = [];

                    // Insert lang field contents into translate table, and prepare for lang ID update
                    foreach ($lang_fields as $field) {
                        $has_comcode = (strpos($field['m_type'], '__COMCODE') !== false);

                        $lang_id = null;
                        $lock = false;

                        table_id_locking_start($db, $lang_id, $lock);
                        if ($dry_run) {
                            fwrite($dry_run_file, 'ID-Locked?: ' . ($lock ? 'Yes' : 'No') . "\n");
                            fwrite($dry_run_file, 'Start on ID: ' . (($lang_id === null) ? 'Null' : strval($lang_id)) . "\n");
                        }

                        $insert_map = [
                            'language' => get_site_default_lang(),
                            'importance_level' => 3,
                            'text_original' => $dry_run ? '(unavailable in dry run)' : $t[$field['m_name'] . '__old'],
                            'text_parsed' => $has_comcode ? $t[$field['m_name'] . '__text_parsed'] : '',
                            'broken' => 0,
                            'source_user' => $has_comcode ? $t[$field['m_name'] . '__source_user'] : $GLOBALS['FORUM_DRIVER']->get_guest_id(),
                        ];
                        if ($dry_run) {
                            fwrite($dry_run_file, 'Insert into translate for ' . $field['m_name'] . ': ' . json_encode($insert_map) . "\n");
                        } else {
                            if (($lang_id === null) || ($locked === false)) {
                                $lang_id = $db->query_insert('translate', $insert_map, true);
                            } else {
                                $db->query_insert('translate', ['id' => $lang_id] + $insert_map);
                            }
                        }

                        table_id_locking_end($db, $lang_id, $lock);

                        $update_map[$field['m_name']] = $lang_id;
                    }

                    // Update original rows with new language IDs
                    $where = [];
                    foreach ($primary_keys as $key) {
                        $where[$key['m_name']] = $t[$key['m_name']];
                    }
                    if ($dry_run) {
                        fwrite($dry_run_file, 'update map: ' . json_encode($update_map) . "\n");
                        fwrite($dry_run_file, 'where: ' . json_encode($where) . "\n");
                    } else {
                        $GLOBALS['SITE_DB']->query_update($table, $update_map, $where, '', 1);
                    }
                }
                $start += 100;
            } while (!empty($trans));
        }

        foreach ($lang_fields as $field) {
            $has_comcode = (strpos($field['m_type'], '__COMCODE') !== false);

            // Delete old fields
            $to_delete = ['old'];
            if ($has_comcode) {
                // Delete old implied fields for holding extra Comcode details
                $to_delete = array_merge($to_delete, ['text_parsed', 'source_user']);
            }
            foreach ($to_delete as $sub_name) {
                $sub_name = $field['m_name'] . '__' . $sub_name;
                $query = $db->driver->alter_delete_table_field__sql($db->table_prefix . $table, $sub_name);
                if ($dry_run) {
                    fwrite($dry_run_file, 'delete old field: ' . $query . "\n");
                } else {
                    $db->query($query);
                }
            }
        }

        if ($dry_run) {
            fwrite($dry_run_file, 'Reload lang fields' . "\n");
        } else {
            reload_lang_fields(true, $table);
        }
    }

    if ($dry_run) {
        fwrite($dry_run_file, 'Update base configuration for content translations' . "\n");
        fwrite($dry_run_file, 'Rebuild indices' . "\n");
        fclose($dry_run_file);
    } else {
        _update_base_config_for_content_translation(true);
        rebuild_indices(true);
    }
}

/**
 * Change content translation setting in th config file.
 *
 * @param  boolean $new_setting New setting value (i.e. on or off)
 * @ignore
 */
function _update_base_config_for_content_translation(bool $new_setting)
{
    $config_path = get_file_base() . '/_config.php';
    $config_file = cms_file_get_contents_safe($config_path, FILE_READ_LOCK);
    $has = '$SITE_INFO[\'multi_lang_content\'] = \'' . ($new_setting ? '0' : '1') . '\';';
    $wants = '$SITE_INFO[\'multi_lang_content\'] = \'' . ($new_setting ? '1' : '0') . '\';';
    if (strpos($config_file, $has) !== false || strpos($config_file, $wants) !== false) {
        $config_file = str_replace($has, $wants, $config_file);
        $config_file = str_replace($wants, $wants, $config_file);
    } else {
        $config_file = rtrim($config_file) . "\n" . $wants . "\n";
    }
    require_code('files');
    cms_file_put_contents_safe($config_path, $config_file, FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE);
}
