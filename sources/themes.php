<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__themes()
{
    global $THEME_IMAGES_CACHE, $RECORD_THEME_IMAGES_CACHE, $RECORDED_THEME_IMAGES, $THEME_IMAGES_LOAD_INTENSITY;
    $THEME_IMAGES_CACHE = [];
    $RECORD_THEME_IMAGES_CACHE = false;
    $RECORDED_THEME_IMAGES = [];

    if (!defined('THEME_IMAGE_PLACE_SITE')) {
        define('THEME_IMAGE_PLACE_SITE', 0);
        define('THEME_IMAGE_PLACE_FORUM', 1);
        define('THEME_IMAGES_LOAD_INTENSITY__NONE', 0);
        define('THEME_IMAGES_LOAD_INTENSITY__SMART_CACHE', 1);
        define('THEME_IMAGES_LOAD_INTENSITY__ALL', 2);
    }
    $THEME_IMAGES_LOAD_INTENSITY = [
        THEME_IMAGE_PLACE_SITE => THEME_IMAGES_LOAD_INTENSITY__NONE,
        THEME_IMAGE_PLACE_FORUM => THEME_IMAGES_LOAD_INTENSITY__NONE,
    ];
}

/**
 * Find the URL to the theme image of the specified ID. It searches various priorities, including language and theme overrides.
 *
 * @param  ID_TEXT $id The theme image ID
 * @param  boolean $silent_fail Whether to silently fail (i.e. not give out an error message when a theme image cannot be found)
 * @param  boolean $leave_local Whether to leave URLs as relative local URLs
 * @param  ?ID_TEXT $theme The theme to search in (null: users current theme)
 * @param  ?LANGUAGE_NAME $lang The language to search for (null: users current language)
 * @param  ?object $db The database to use (null: site database)
 * @param  boolean $pure_only Whether to only search the default 'images' filesystem
 * @return URLPATH The URL found (blank: not found)
 */
function find_theme_image(string $id, bool $silent_fail = false, bool $leave_local = false, ?string $theme = null, ?string $lang = null, ?object $db = null, bool $pure_only = false) : string
{
    global $THEME_IMAGES_CACHE, $USER_LANG_CACHED, $THEME_IMAGES_LOAD_INTENSITY, $RECORD_THEME_IMAGES_CACHE, $SMART_CACHE, $SITE_INFO;

    // Special case: bad function parameters...

    if (!$GLOBALS['DEV_MODE']) {
        if (empty($id)) {
            return ''; // $id should be non-empty
        }
    }

    // Special case: theme wizard...

    if ((isset($_GET['keep_theme_seed'])) && (get_param_string('keep_theme_seed', null) !== null) && (addon_installed('themewizard')) && (function_exists('has_privilege')) && (has_privilege(get_member(), 'view_profiling_modes'))) {
        require_code('themewizard');
        $test = find_theme_image_themewizard_preview($id, $silent_fail);
        if ($test !== null) {
            return $test;
        }
    }

    // Work out basic parameters...

    if ($db === null) {
        $db = $GLOBALS['SITE_DB'];
        $db_place = THEME_IMAGE_PLACE_SITE;
    } else {
        $db_place = ($GLOBALS['SITE_DB'] === $db) ? THEME_IMAGE_PLACE_SITE : THEME_IMAGE_PLACE_FORUM;
    }

    $true_theme = isset($GLOBALS['FORUM_DRIVER']) ? $GLOBALS['FORUM_DRIVER']->get_theme() : 'default';
    if ($theme === null) {
        $theme = $true_theme;
    }

    $true_lang = ($USER_LANG_CACHED === null) ? user_lang() : $USER_LANG_CACHED;
    if ($lang === null) {
        $lang = $true_lang;
    }

    $truism = ($theme === $true_theme) && ($lang === $true_lang);

    $url = null; // null means keep searching, '' means we know it does not exist

    $force_recache = false;

    // Special case: Separate lookup (cannot go through $THEME_IMAGES_CACHE but can rely on theme_images table)...

    // Can we get it from the database / internal caching?...

    if (!$pure_only) {
        if ($truism) {
            // Are we looking for something the the internal cache does not know about yet? If so then we better load further
            $has = isset($THEME_IMAGES_CACHE[$db_place][$id]);
            if (
                (!$has) &&
                ($THEME_IMAGES_LOAD_INTENSITY[$db_place] !== THEME_IMAGES_LOAD_INTENSITY__ALL)
            ) {
                load_theme_image_cache($db, $db_place, $true_theme, $true_lang);

                // Hmm, still failing from smart cache level? If so then we better load further
                if (
                    (!isset($THEME_IMAGES_CACHE[$db_place][$id])) &&
                    ($THEME_IMAGES_LOAD_INTENSITY[$db_place] === THEME_IMAGES_LOAD_INTENSITY__SMART_CACHE)
                ) {
                    load_theme_image_cache($db, $db_place, $true_theme, $true_lang);
                }
            }

            if ($has || isset($THEME_IMAGES_CACHE[$db_place][$id])) {
                $url = $THEME_IMAGES_CACHE[$db_place][$id];

                // Check it is still here
                static $checked = [];
                if (!isset($checked[$url])) {
                    if ((url_is_local($url)) && (support_smart_decaching())) {
                        if (substr($url, 0, 22) === 'themes/default/images/') {
                            if ((!isset($SITE_INFO['no_disk_sanity_checks'])) || ($SITE_INFO['no_disk_sanity_checks'] === '0')) {
                                $missing = !is_file(get_file_base() . '/' . rawurldecode($url));
                            } else {
                                $missing = false;
                            }
                        } else {
                            $missing = !is_file(get_custom_file_base() . '/' . rawurldecode($url)) && !is_file(get_file_base() . '/' . rawurldecode($url));
                        }
                        if ($missing) {
                            $url = '';

                            // Dynamic fixup possible?
                            if ($theme != 'default') {
                                if ((!file_exists(get_custom_file_base() . '/.git')) || (defined('DO_PLANNED_DECACHE'))) { // Do not automatically remap missing theme images if running out of Git - could be that Git operator is doing a re-sync between servers
                                    $url = $db->query_select_value_if_there('theme_images', 'url', ['id' => $id, 'theme' => 'default', 'lang' => $lang]);
                                    if ($url !== null) {
                                        $db->query_update('theme_images', ['url' => $url], ['id' => $id, 'theme' => $theme, 'lang' => $lang], '', 1);
                                    } else {
                                        $db->query_delete('theme_images', ['id' => $id, 'theme' => $theme, 'lang' => $lang], '', 1);
                                    }
                                }
                            }

                            $force_recache = true;
                        }
                    }

                    $checked[$url] = true;
                }
            }
        } else {
            // Can't rely on caching because the cache only runs if $truism
            $url = $db->query_select_value_if_there('theme_images', 'url', ['id' => $id, 'theme' => $theme, 'lang' => $lang]);
        }
    }

    // Disk search then?...

    if ($url === null) {
        // Do search
        $priorities = [];
        if (!$pure_only) {
            $priorities[] = [$theme, $lang, 'images_custom'];
            $priorities[] = [$theme, '', 'images_custom'];
            if ($lang !== fallback_lang()) {
                $priorities[] = [$theme, fallback_lang(), 'images_custom'];
            }
        }
        $priorities[] = [$theme, $lang, 'images'];
        $priorities[] = [$theme, '', 'images'];
        if ($lang !== fallback_lang()) {
            $priorities[] = [$theme, fallback_lang(), 'images'];
        }
        if ($theme !== 'default') {
            if (!$pure_only) {
                $priorities[] = ['default', $lang, 'images_custom'];
                $priorities[] = ['default', '', 'images_custom'];
                if ($lang !== fallback_lang()) {
                    $priorities[] = ['default', fallback_lang(), 'images_custom'];
                }
            }
            $priorities[] = ['default', $lang, 'images'];
            $priorities[] = ['default', '', 'images'];
            if ($lang !== fallback_lang()) {
                $priorities[] = ['default', fallback_lang(), 'images'];
            }
        }

        foreach ($priorities as $priority) {
            $url = _search_img_file($priority[0], $priority[1], $id, $priority[2]);
            if ($url !== null) {
                break;
            }
        }

        // Missing?
        if ($url === null) {
            $url = ''; // This means search happened and it's missing
        }

        // Store result of search in database
        if ((!$GLOBALS['SEMI_DEV_MODE']) || ($url !== '')) { // We don't cache failure on dev-mode as we may add it later while writing code and don't want to have to keep doing cache flushes
            if (!$db->is_forum_db()) { // If guard is here because a MSN site can't code assumptions about the file system of the central site into that site's database, we rely on that site to maintain its own theme_images table for performance
                push_query_limiting(false);
                $db->query_insert('theme_images', ['id' => $id, 'theme' => $theme, 'lang' => $lang, 'url' => $url], false, true); // Allow for race conditions
                pop_query_limiting();
            }
        }

        // Update internal caching?
        if ((!$pure_only) && ($truism)) {
            $THEME_IMAGES_CACHE[$db_place][$id] = $url;
        }
    }

    // Final stuff, then return...

    // Smart cache learning if we ended up having to bypass smart cache
    if ((($THEME_IMAGES_LOAD_INTENSITY[$db_place] === THEME_IMAGES_LOAD_INTENSITY__ALL) || ($force_recache)) && (!$pure_only)) {
        if ($SMART_CACHE !== null) {
            $SMART_CACHE->append('theme_images_' . $theme . '_' . $lang . '_' . strval($db_place), $id, $url);
        }
    }

    if ($url !== '') {
        // Turn to full URL (the default behaviour)?
        if (!$leave_local) {
            if (url_is_local($url)) {
                if ($db->is_forum_db()) {
                    $url = get_forum_base_url() . '/' . $url;
                } else {
                    if ((substr($url, 0, 22) === 'themes/default/images/') || (!is_file(get_custom_file_base() . '/' . rawurldecode($url)))) {
                        $url = get_base_url() . '/' . $url;
                    } else {
                        $url = get_custom_base_url() . '/' . $url;
                    }
                }
            }

            // Apply CDN
            static $cdn = null;
            if ($cdn === null) {
                $cdn = get_option('cdn');
            }
            if ($cdn !== '') {
                $url = cdn_filter($url);
            }
        }

        // Take note for view mode tools
        if ($RECORD_THEME_IMAGES_CACHE) {
            global $RECORDED_THEME_IMAGES;
            if (!is_on_multi_site_network()) {
                $RECORDED_THEME_IMAGES[serialize([$id, $theme, $lang])] = true;
            }
        }
    } else {
        // Missing
        if (!$silent_fail) {
            trigger_error(do_lang('NO_SUCH_THEME_IMAGE', escape_html($id)), E_USER_NOTICE);
        }
    }

    // Done
    return $url;
}

/**
 * Load up theme image cache.
 *
 * @param  object $db The database to load from (used for theme images running across multi-site-networks)
 * @param  integer $db_place The internal name of the database to load from (used for theme images running across multi-site-networks)
 * @param  ID_TEXT $true_theme Theme0
 * @param  LANGUAGE_NAME $true_lang Language
 */
function load_theme_image_cache(object $db, int $db_place, string $true_theme, string $true_lang)
{
    global $THEME_IMAGES_CACHE, $THEME_IMAGES_LOAD_INTENSITY, $SMART_CACHE;

    switch ($THEME_IMAGES_LOAD_INTENSITY[$db_place]) {
        case THEME_IMAGES_LOAD_INTENSITY__NONE:
            if ($SMART_CACHE !== null) {
                $THEME_IMAGES_CACHE[$db_place] = $SMART_CACHE->get('theme_images_' . $true_theme . '_' . $true_lang . '_' . strval($db_place));
            }
            if ($THEME_IMAGES_CACHE[$db_place] === null) {
                $THEME_IMAGES_CACHE[$db_place] = [];
            }

            $THEME_IMAGES_LOAD_INTENSITY[$db_place] = THEME_IMAGES_LOAD_INTENSITY__SMART_CACHE;

            break;

        case THEME_IMAGES_LOAD_INTENSITY__SMART_CACHE:
            $theme_images = $db->query_select('theme_images', ['id', 'url'], ['theme' => $true_theme, 'lang' => $true_lang]);
            $THEME_IMAGES_CACHE[$db_place] = collapse_2d_complexity('id', 'url', $theme_images);

            $THEME_IMAGES_LOAD_INTENSITY[$db_place] = THEME_IMAGES_LOAD_INTENSITY__ALL;

            break;
    }
}

/**
 * Filter a URL so it runs through a CDN.
 *
 * @param  URLPATH $url Input URL
 * @return URLPATH Output URL
 */
function cdn_filter(string $url) : string
{
    static $cdn = null;
    if ($cdn === null) {
        $cdn = get_option('cdn');
    }
    static $km = null;
    if ($km === null) {
        $km = get_param_integer('keep_minify', null);
    }

    if (($cdn !== '') && ($km !== 0)) {
        if ($cdn === '<autodetect>') {
            $cdn = get_value('cdn');
            if ($cdn === null) {
                require_code('themes2');
                $cdn = autoprobe_cdns();
            }
        }
        if ($cdn === '') {
            return $url;
        }

        // Can't run on a CDN due to CORS policies
        if ((substr($url, -4) == '.vtt') || (strpos($url, '.vtt?') !== false)) {
            return $url;
        }

        static $cdn_consistency_check = [];

        if (isset($cdn_consistency_check[$url])) {
            return $cdn_consistency_check[$url];
        }

        static $cdn_parts = null;
        if ($cdn_parts === null) {
            $cdn_parts = explode(',', $cdn);
        }

        if (count($cdn_parts) === 1) {
            $cdn_part = $cdn_parts[0];
        } else {
            $sum_asc = 0;
            $basename = basename($url);
            $url_len = strlen($basename);
            for ($i = 0; $i < $url_len; $i++) {
                $sum_asc += ord($basename[$i]);
            }

            $cdn_part = $cdn_parts[$sum_asc % count($cdn_parts)]; // To make a consistent but fairly even distribution we do some modular arithmetic against the total of the ASCII values
        }

        static $normal_prefix = null;
        static $bus = null;
        if ($normal_prefix === null) {
            $normal_prefix = '#(^https?://)' . preg_quote(get_base_url_hostname(), '#') . '([:/])#';
            $bus = get_base_url() . '/';
        }
        if (substr($url, 0, strlen($bus)) == $bus) {
            $file_path = get_custom_file_base() . '/' . rawurldecode(substr($url, strlen($bus)));
            $mtime = @filemtime($file_path);
            if ($mtime !== false) {
                $url .= '?' . strval($mtime);
            }
        }
        $new_url = preg_replace($normal_prefix, '${1}' . $cdn_part . '${2}', $url);

        $cdn_consistency_check[$url] = $new_url;

        return $new_url;
    }

    return $url;
}

/**
 * Search for a specified image file within a theme for a specified language.
 *
 * @param  ID_TEXT $theme The theme
 * @param  ?LANGUAGE_NAME $lang The language (null: try generally, under no specific language)
 * @param  ID_TEXT $id The theme image ID
 * @param  ID_TEXT $dir Directory to search
 * @return ?URLPATH The URL to the image (null: was not found)
 * @ignore
 */
function _search_img_file(string $theme, ?string $lang, string $id, string $dir = 'images') : ?string
{
    $places = array_unique([get_custom_file_base(), get_file_base()]);
    $extensions = ['png', 'jpg', 'jpe', 'jpeg', 'gif', 'ico', 'cur', 'svg', 'webp', 'bmp'];

    foreach ($places as $_base) {
        $base = $_base . '/themes/';

        foreach ($extensions as $extension) {
            $file_path = $base . $theme . '/';
            if ($dir !== '') {
                $file_path .= $dir . '/';
            }
            if (!empty($lang)) {
                $file_path .= $lang . '/';
            }
            $file_path .= $id . '.' . $extension;

            if (@is_file($file_path)) { // Good, now return URL (@ in case something component in path is actually a file https://bugs.php.net/bug.php?id=52065)
                $url = cms_rawurlrecode('themes/' . rawurlencode($theme) . '/' . $dir . '/');
                if (!empty($lang)) {
                    $url .= $lang . '/';
                }
                $url .= $id . '.' . $extension;
                return $url;
            }
        }
    }
    return null;
}

/**
 * Converts an RGB color value to HSL. Conversion formula adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Inspired by https://stackoverflow.com/a/9493060/362006 .
 * Assumes r, g, and b are contained in the set [0, 255] and returns h, s, and l in the set [0, 1].
 *
 * @param  integer $red Red colour (0-255)
 * @param  integer $green Green colour (0-255)
 * @param  integer $blue Blue colour (0-255)
 * @return array Triplet of components: H, S, L (0.0-1.0)
 */
function rgb_to_hsl(int $red, int $green, int $blue) : array
{
    $_red = $red / 255;
    $_green = $green / 255;
    $_blue = $blue / 255;

    $max = max($_red, $_green, $_blue);
    $min = min($_red, $_green, $_blue);

    $hue = 0.0;
    $sat = 0.0;
    $lht = ($max + $min) / 2;

    if ($max === $min) {
        // achromatic
        $hue = 0.0;
        $sat = 0.0;
    } else {
        $diff = $max - $min;
        $sat = ($lht > 0.5) ? ($diff / (2 - $max - $min)) : ($diff / ($max + $min));

        switch ($max) {
            case $_red:
                $hue = ($_green - $_blue) / $diff + (($_green < $_blue) ? 6 : 0);
                break;
            case $_green:
                $hue = ($_blue - $_red) / $diff + 2;
                break;
            case $_blue:
                $hue = ($_red - $_green) / $diff + 4;
                break;
        }

        $hue /= 6;
    }

    return [$hue, $sat, $lht];
}

/**
 * Coverts a hue to color.
 *
 * @param  float $p (0.0-1.0)
 * @param  float $q (0.0-1.0)
 * @param  float $t (0.0-1.0)
 * @return float
 */
function hue_to_rgb(float $p, float $q, float $t) : float
{
    if ($t < 0.0) {
        $t += 1;
    }

    if ($t > 1.0) {
        $t -= 1;
    }

    if ($t < (1 / 6)) {
        return floatval($p + ($q - $p) * 6 * $t);
    }

    if ($t < (1 / 2)) {
        return floatval($q);
    }

    if ($t < (2 / 3)) {
        return floatval($p + ($q - $p) * ((2 / 3) - $t) * 6);
    }

    return floatval($p);
}


/**
 * Converts an HSL color value to RGB. Conversion formula adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Inspired by https://stackoverflow.com/a/9493060/362006 .
 * Assumes h, s, and l are contained in the set [0, 1] and returns r, g, and b in the set [0, 255].
 *
 * @param  float $hue (0.0-1.0)
 * @param  float $sat (0.0-1.0)
 * @param  float $lht (0.0-1.0)
 * @return array Triplet of components: R, G, B (0-255)
 */
function hsl_to_rgb(float $hue, float $sat, float $lht) : array
{
    if ($sat == 0.0) {
        // achromatic
        $r = $lht;
        $g = $lht;
        $b = $lht;
    } else {
        $q = ($lht < 0.5) ? ($lht * (1 + $sat)) : ($lht + $sat - $lht * $sat);
        $p = 2.0 * $lht - $q;
        $r = hue_to_rgb($p, $q, $hue + (1 / 3));
        $g = hue_to_rgb($p, $q, $hue);
        $b = hue_to_rgb($p, $q, $hue - (1 / 3));
    }

    return [intval(round($r * 255)), intval(round($g * 255)), intval(round($b * 255))];
}
