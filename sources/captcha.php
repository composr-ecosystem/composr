<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    captcha
 */

/*EXTRA FUNCTIONS: srand*/

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__captcha()
{
    require_lang('captcha');
}

/**
 * Outputs and stores information for a CAPTCHA.
 */
function captcha_script()
{
    if (!addon_installed('captcha')) {
        warn_exit(do_lang_tempcode('MISSING_ADDON', escape_html('captcha')));
    }

    if (get_option('recaptcha_site_key') != '') {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('d66ef5e4a89054d29050a63ad118e7d1')));
    }

    header('X-Robots-Tag: noindex');

    $code_needed = $GLOBALS['SITE_DB']->query_select_value_if_there('captchas', 'si_code', ['si_session_id' => get_session_id(true)]);
    if ($code_needed === null) {
        $code_needed = generate_captcha();
        /*
        set_http_status_code(500);    This would actually be very slightly insecure, as it could be used to probe (binary) login state via rogue sites that check if CAPTCHAs had been generated
        warn_exit(do_lang_tempcode('CAPTCHA_NO_SESSION'));
        */
    }
    mt_srand(crc32($code_needed)); // Important: to stop averaging out of different attempts. This makes the distortion consistent for that particular code.

    cms_ini_set('ocproducts.xss_detect', '0');

    $mode = get_param_string('mode', '');
    $large_mode = ($mode == 'large');

    // Audio version
    if (($mode == 'audio') && (get_option('audio_captcha') === '1')) {
        header('Content-Type: audio/x-wav');
        header('Content-Disposition: inline; filename="captcha.wav"');
        //header('Content-Disposition: attachment; filename="captcha.wav"');  Useful for testing

        if ($_SERVER['REQUEST_METHOD'] == 'HEAD') {
            return;
        }

        $data = captcha_audio($code_needed);

        header('Content-Length: ' . strval(strlen($data)));

        echo $data;

        return;
    }

    list($img, $width, $height) = captcha_image($code_needed);

    // Output using CSS
    if (get_option('css_captcha') === '1') {
        echo '
        <!DOCTYPE html>
        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
            <title>' . do_lang('CONTACT_STAFF_TO_JOIN_IF_IMPAIRED') . '</title>
            <meta name="robots" content="noindex" />
        </head>
        <body style="margin: 0">
        ';
        if (get_option('js_captcha') === '1') {
            echo '<div style="display: none" id="hidden-captcha">';
        }
        echo '<div style="width: ' . ($large_mode ? strval($width * 4) : strval($width)) . 'px; font-size: 0; line-height: 0">';
        if ($mode != 'large') {
            echo '<a target="_blank" data-open-as-overlay="{}" rel="nofollow" href="' . find_script('captcha') . '?cache_break=' . strval(time()) . '&mode=large" title="' . do_lang('captcha:CAPTCHA_CLICK_LARGE') . '" aria-haspopup="dialog">';
        }
        for ($j = 0; $j < $height; $j++) {
            for ($i = 0; $i < $width; $i++) {
                $colour = imagecolorsforindex($img, imagecolorat($img, $i, $j));
                echo '<span style="vertical-align: bottom; overflow: hidden; display: inline-block; -webkit-text-size-adjust: none; text-size-adjust: none; background: rgb(' . strval($colour['red']) . ',' . strval($colour['green']) . ',' . strval($colour['blue']) . '); ' . ($large_mode ? 'width: 4px; height: 4px' : 'width: 1px; height: 1px') . '"></span>';
            }
        }
        if ($mode != 'large') {
            echo '</a>';
        }
        echo '</div>';
        if (get_option('js_captcha') === '1') {
            echo '</div>';
            echo '<script ' . csp_nonce_html() . '>document.getElementById(\'hidden-captcha\').style.display = \'block\';</script>';
        }
        echo '
        </body>
        </html>
        ';
        imagedestroy($img);
        cms_safe_exit_flow();
        return;
    }

    // Output as a PNG
    header('Content-Type: image/png');
    imagepng($img);
    imagedestroy($img);
    cms_safe_exit_flow();
}

/**
 * Create an image CATCHA.
 *
 * @param  string $code_needed The code
 * @return array A tuple: the image CAPTCHA, the width, the height
 */
function captcha_image(string $code_needed) : array
{
    // Use basic (fallback) CAPTCHA if noise was disabled
    if (get_option('captcha_noise') != '1') {
        return _captcha_image_fallback($code_needed);
    }

    require_code('images');

    $characters = strlen($code_needed);
    $font_size = 14.0;
    $padding = 6;
    $letter_spacing = 3;

    // Load in available fonts
    $font_dir_custom = get_custom_file_base() . '/data_custom/fonts/';
    $font_dir_standard = get_custom_file_base() . '/data/fonts/';
    $available_fonts = [];
    if (is_dir($font_dir_custom)) {
        $available_fonts = array_merge($available_fonts, glob($font_dir_custom . '*.ttf'));
    }
    if (is_dir($font_dir_standard)) {
        $available_fonts = array_merge($available_fonts, glob($font_dir_standard . '*.ttf'));
    }
    if (empty($available_fonts)) { // Use fallback if no fonts found
        return _captcha_image_fallback($code_needed);
    }

    // Calculate image dimensions dynamically based on TTF
    $width = $padding * 2;
    $max_char_height = 0;
    for ($i = 0; $i < $characters; $i++) {
        $font_path = $available_fonts[array_rand($available_fonts)];
        $bbox = imagettfbbox($font_size, 0.0, $font_path, $code_needed[$i]);
        if ($bbox) {
            $width += intval(($bbox[2] - $bbox[0]) + $letter_spacing);
            $char_height = intval($bbox[1] - $bbox[7]);
            if ($char_height > $max_char_height) {
                $max_char_height = $char_height;
            }
        } else { // Fallback if font metrics fail for some reason
            $width += intval($font_size + $letter_spacing);
            if (intval($font_size * 2.0) > $max_char_height) {
                $max_char_height = intval($font_size * 2.0);
            }
        }
    }
    $height = $max_char_height + $padding * 2;

    // Minimums for the image
    if ($height < 37) {
        $height = 37;
    }
    if ($width < 87) {
        $width = 87;
    }

    // Create black background
    $img = imagecreate($width, $height);
    $black = cms_imagecolorallocate($img, 0, 0, 0);
    imagefill($img, 0, 0, $black);

    // Render each character
    $x = intval($padding);
    for ($i = 0; $i < $characters; $i++) {
        // Randomise some things to make guessing harder
        $font_path = $available_fonts[array_rand($available_fonts)];
        $angle = floatval(mt_rand(-15, 15));
        $char_font_size = $font_size + floatval(mt_rand(-2, 2));
        $char = $code_needed[$i];

        // Create a TTF box for the character
        $bbox = imagettfbbox($char_font_size, $angle, $font_path, $char);
        $char_width = intval($bbox[2] - $bbox[0]);
        $char_height = intval($bbox[1] - $bbox[7]);

        // Calculate y position to center characters roughly, but add a random deviation so characters throw off image recognition
        $y = intval(($height / 2) + ($char_height / 2) + mt_rand(-8, 8));

        // Add a random colour shadow
        $shadow_color = cms_imagecolorallocate($img, mt_rand(100, 180), mt_rand(100, 180), mt_rand(100, 180));
        imagettftext($img, $char_font_size, ($angle + floatval(mt_rand(-5, 5))), ($x + mt_rand(-2, 2)), ($y + mt_rand(-2, 2)), $shadow_color, $font_path, $char);

        // Render the actual character with a random colour
        $text_color = cms_imagecolorallocate($img, mt_rand(200, 255), mt_rand(200, 255), mt_rand(200, 255));
        imagettftext($img, $char_font_size, $angle, $x, $y, $text_color, $font_path, $char);

        $x += $char_width + $letter_spacing;
    }

    // Add some random lines
    for ($l = 0; $l < 5; $l++) {
        $line_color = cms_imagecolorallocate($img, mt_rand(150, 220), mt_rand(150, 220), mt_rand(150, 220));
        imageline($img, mt_rand(0, $width), mt_rand(0, $height), mt_rand(0, $width), mt_rand(0, $height), $line_color);
    }

    // Add random pixels
    for ($n = 0; $n < intval($width * $height * 0.04); $n++) {
        $noise_color = cms_imagecolorallocate($img, mt_rand(150, 220), mt_rand(150, 220), mt_rand(150, 220));
        imagesetpixel($img, mt_rand(0, $width -1), mt_rand(0, $height -1), $noise_color);
    }

    return [$img, $width, $height];
}

/**
 * Fallback image CAPTCHA generation.
 * This is called by captcha_image when noise is disabled or no TTF fonts are available.
 *
 * @param  string $code_needed The code
 * @return array A tuple: the image CAPTCHA, the width, the height
 *
 * @ignore
 */
function _captcha_image_fallback(string $code_needed) : array
{
    require_code('images');

    // Write basic, using multiple built-in fonts with random Y-position offsets
    $characters = strlen($code_needed);
    $fonts = [];
    $width = 20;
    for ($i = 0; $i < max(1, $characters); $i++) {
        $font = 5;
        $fonts[] = $font;
        $width += imagefontwidth($font) + 2;
        $height = imagefontheight($font) + 20;
    }
    $img = imagecreate($width, $height);
    $black = cms_imagecolorallocate($img, 0, 0, 0);
    $off_black = cms_imagecolorallocate($img, mt_rand(1, 45), mt_rand(1, 45), mt_rand(1, 45));
    $white = cms_imagecolorallocate($img, 255, 255, 255);
    imagefill($img, 0, 0, $black);
    $x = 10;
    foreach ($fonts as $i => $font) {
        $y_dif = mt_rand(-15, 15);
        imagestring($img, $font, $x, 10 + $y_dif, $code_needed[strlen($code_needed) - $i - 1], $off_black);
        $x += imagefontwidth($font) + 2;
    }
    $x = 10;
    foreach ($fonts as $i => $font) {
        $y_dif = mt_rand(-5, 5);
        imagestring($img, $font, $x, 10 + $y_dif, $code_needed[$i], $white);
        if (get_option('captcha_noise') == '1') {
            imagestring($img, $font, $x + 1, 10 + mt_rand(-1, 1) + $y_dif, $code_needed[$i], $white);
        }
        $x += imagefontwidth($font) + 2;
    }

    // Add some noise if enabled
    if (get_option('captcha_noise') == '1') {
        $tricky_remap = [];
        $tricky_remap[$black] = [];
        $tricky_remap[$off_black] = [];
        $tricky_remap[$white] = [];
        for ($i = 0; $i <= 5; $i++) {
            $tricky_remap['!' . strval($black)][] = cms_imagecolorallocate($img, 0 + mt_rand(0, 15), 0 + mt_rand(0, 15), 0 + mt_rand(0, 15));
            $tricky_remap['!' . strval($off_black)][] = $off_black;
            $tricky_remap['!' . strval($white)][] = cms_imagecolorallocate($img, 255 - mt_rand(0, 145), 255 - mt_rand(0, 145), 255 - mt_rand(0, 145));
        }
        $noise_amount = 0.02;//0.04;
        for ($i = 0; $i < intval($width * $height * $noise_amount); $i++) {
            $x = mt_rand(0, $width);
            $y = mt_rand(0, $height);
            if (mt_rand(0, 1) == 0) {
                imagesetpixel($img, $x, $y, $white);
            } else {
                imagesetpixel($img, $x, $y, $black);
            }
        }
        for ($i = 0; $i < $width; $i++) {
            for ($j = 0; $j < $height; $j++) {
                imagesetpixel($img, $i, $j, $tricky_remap['!' . strval(imagecolorat($img, $i, $j))][mt_rand(0, 5)]);
            }
        }
    }

    return [$img, $width, $height];
}

/**
 * Create an audio CAPTCHA.
 *
 * @param  string $code_needed The code
 * @return string the audio CAPTCHA data
 */
function captcha_audio(string $code_needed) : string
{
    $combined_audio_data_segments = [];
    $first_file_header_info = null;

    for ($i = 0; $i < strlen($code_needed); $i++) {
        $char = cms_strtolower_ascii($code_needed[$i]);

        $file_path = get_file_base() . '/data_custom/sounds/captcha/' . $char . '.wav';
        if (!file_exists($file_path)) {
            $file_path = get_file_base() . '/data/sounds/captcha/' . $char . '.wav';
        }

        if (!is_readable($file_path)) {
            continue; // Not a readable file
        }

        $file_content = cms_file_get_contents_safe($file_path);
        if ($file_content === false || strlen($file_content) < 44) {
            continue; // Invalid WAV file
        }

        if ($first_file_header_info === null) {
            // Parse header of the first valid file to get audio format details; this assumes all WAV files for CAPTCHA have the same sample / bit rates
            $header = substr($file_content, 0, 44);

            // Basic WAV header validation
            if (substr($header, 0, 4) != 'RIFF' || substr($header, 8, 4) != 'WAVE' || substr($header, 12, 4) != 'fmt ') {
                continue;
            }

            // Extract necessary format details from the header
            $header_parts = unpack('vaudio_format/vnum_channels/Vsample_rate/Vbyte_rate/vblock_align/vbits_per_sample', substr($header, 20, 16));

            if ($header_parts['audio_format'] != 1) {
                continue; // Not PCM compliant
            }

            $first_file_header_info = [
                'num_channels'    => $header_parts['num_channels'],
                'sample_rate'     => $header_parts['sample_rate'],
                'bits_per_sample' => $header_parts['bits_per_sample'],
            ];

            $num_channels    = $first_file_header_info['num_channels'];
            $sample_rate     = $first_file_header_info['sample_rate'];
            $bits_per_sample = $first_file_header_info['bits_per_sample'];
            $byte_rate        = $sample_rate * $num_channels * ($bits_per_sample / 8);
            $block_align      = $num_channels * ($bits_per_sample / 8);
        }

        // Skip the header for audio data
        $char_audio_data_raw = substr($file_content, 44);

        $noised_segment_data = '';
        $raw_len = strlen($char_audio_data_raw);
        for ($k = 0; $k < $raw_len; $k++) {
            $current_original_byte_char = $char_audio_data_raw[$k];
            $byte_to_append = $current_original_byte_char;

            // Apply some noise if enabled
            if (get_option('captcha_noise') == '1') {
                // For 1 out of 32 bytes, use a random byte to produce a static effect; otherwise, randomly modulate the actual audio byte
                if (($k != 0) && (mt_rand(0, 16) == 1)) {
                    $byte_to_append = chr(mt_rand(0, 255));
                } else {
                    $amp_mod = mt_rand(-3, 3);
                    $byte_to_append = chr(min(255, max(0, ord($byte_to_append) + $amp_mod)));
                }
            }

            $noised_segment_data .= $byte_to_append;
        }

        $combined_audio_data_segments[] = $noised_segment_data;
    }

    if ($first_file_header_info === null) {
        return ''; // No valid sound files were processed
    }

    $final_audio_data = implode('', $combined_audio_data_segments);
    if (empty($final_audio_data)) {
        return ''; // No valid sound files were processed
    }

    // Construct a new WAV header
    $sub_chunk_2_size = strlen($final_audio_data);
    $chunk_size       = 36 + $sub_chunk_2_size;
    $header = pack(
        'A4Va4A4VvvVVvvA4V',
        'RIFF',
        $chunk_size,
        'WAVE',
        'fmt ',
        16,
        1,
        $num_channels,
        $sample_rate,
        intval(round($byte_rate)),
        intval(round($block_align)),
        $bits_per_sample,
        'data',
        $sub_chunk_2_size
    );

    // Return a PCM-compliant WAV file
    return $header . $final_audio_data;
}

/**
 * Get a CAPTCHA (aka security code) form field.
 *
 * @param  Tempcode $hidden Hidden fields (will attach to here for non-visible CAPTCHA systems)
 * @return Tempcode The field
 */
function form_input_captcha(object $hidden) : object
{
    require_code('form_templates');

    $tabindex = get_form_field_tabindex(null);

    if (uses_question_captcha()) {
        require_javascript('captcha');

        $tpl = new Tempcode();

        $questions = get_captcha_questions();
        foreach ($questions as $i => $details) {
            list($question, $answer, $wrong_answers) = $details;
            if ($wrong_answers !== null) {
                $answers = array_merge([$answer], $wrong_answers);
                cms_mb_sort($answers, SORT_FLAG_CASE | SORT_NATURAL);
                $_answers = new Tempcode();
                $_answers->attach(form_input_list_entry(''));
                foreach ($answers as $answer) {
                    $_answers->attach(form_input_list_entry($answer));
                }
                $tpl->attach(form_input_list(comcode_to_tempcode($question, null, true), do_lang_tempcode('DESCRIPTION_CAPTCHA_QUESTION_LIST'), 'captcha_' . strval($i), $_answers, null, false, true));
            } else {
                $tpl->attach(form_input_line(comcode_to_tempcode($question, null, true), do_lang_tempcode('DESCRIPTION_CAPTCHA_QUESTION'), 'captcha_' . strval($i), '', true));
            }
        }

        return $tpl;
    }

    // Show template
    $input = do_template('FORM_SCREEN_INPUT_CAPTCHA', ['_GUID' => 'f7452af9b83db36685ae8a86f9762d30', 'TABINDEX' => strval($tabindex)]);
    if (get_option('recaptcha_site_key') != '') {
        $hidden->attach($input);
        return new Tempcode();
    }
    return _form_input('captcha', do_lang_tempcode('SECURITY_IMAGE'), do_lang_tempcode('DESCRIPTION_CAPTCHA'), $input, true, false);
}

/**
 * Find whether CAPTCHA (the security image) should be used if preferred (making this call assumes it is preferred).
 *
 * @return boolean Whether CAPTCHA is used
 */
function use_captcha() : bool
{
    if (get_option('use_captchas') == '0') {
        return false;
    }

    if (running_script('captcha')) {
        return true;
    }

    if (is_guest()) {
        return true;
    }

    // At this point, we know it's a member, who may still get a CAPTCHA depending on various factors...

    if (has_privilege(get_member(), 'avoid_captcha')) {
        return false;
    }

    $days = get_option('captcha_member_days');
    if ((!empty($days)) && ($GLOBALS['FORUM_DRIVER']->get_member_join_timestamp(get_member()) > time() - 60 * 60 * 24 * intval($days))) {
        return true;
    }

    $posts = get_option('captcha_member_posts');
    if (!empty($posts)) {
        $post_count = $GLOBALS['FORUM_DRIVER']->get_post_count(get_member());
        if (get_forum_type() == 'cns') {
            $sql = 'SELECT COUNT(*) FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_posts WHERE p_posting_member=' . strval(get_member());
            $sql .= ' AND (p_cache_forum_id IS NULL OR p_whisper_to_member IS NOT NULL OR p_time>' . strval(time() - 60 * 60 * 24) . ')';
            $post_count -= $GLOBALS['FORUM_DB']->query_value_if_there($sql);
        }
        if ($post_count < intval($posts)) {
            return true;
        }
    }

    return false;
}

/**
 * Find whether the question-CAPTCHA will be used on the current page.
 *
 * @return boolean Whether question-CAPTCHA is used
 */
function uses_question_captcha() : bool
{
    if (empty(get_captcha_questions())) {
        return false;
    }

    if (intval(get_option('captcha_question_total')) <= 0) {
        return false;
    }

    $question_pages = trim(get_option('captcha_question_pages'));
    if ($question_pages == '') {
        return false;
    }

    if (running_script('snippet')) {
        if (get_param_integer('question_captcha', 0) == 0) {
            return false;
        }
    } else {
        if (!match_key_match($question_pages)) {
            return false;
        }
    }

    return true;
}

/**
 * Find question-CAPTCHA questions to use for the CAPTCHA.
 * Applies randomisation as appropriate.
 *
 * @return array A list of tuples: question, answer, multi-choice answers (or null)
 */
function get_captcha_questions() : array
{
    $questions = [];
    $_questions = trim(get_option('captcha_questions'));
    foreach (explode("\n", $_questions) as $_question) {
        $parts = explode('=', $_question);
        if (count($parts) >= 2) {
            $details = [trim($parts[0]), trim($parts[1]), null];
            if (count($parts) > 2) {
                $details[2] = array_slice($parts, 2);
            }
            $questions[] = $details;
        }
    }

    $question_total = intval(get_option('captcha_question_total'));
    if ($question_total > count($questions)) {
        $question_total = count($questions);
    }

    if ($question_total < count($questions)) {
        srand(crc32(get_session_id(true))); // The session ID will seed which questions are picked; consistent across executions

        $_keys = array_rand($questions, $question_total);
        if (!is_array($_keys)) {
            $keys = [$_keys];
        } else {
            $keys = $_keys;
        }

        srand();

        $__questions = [];
        foreach ($keys as $key) {
            $__questions[$key] = $questions[$key];
        }
        $questions = $__questions;
    }

    return $questions;
}

/**
 * Generate a CAPTCHA image.
 *
 * @return ?string The code (null: on CAPTCHA generated)
 */
function generate_captcha() : ?string
{
    if (get_option('recaptcha_site_key') != '') {
        return null;
    }

    global $INVALIDATED_FAST_SPIDER_CACHE;
    $INVALIDATED_FAST_SPIDER_CACHE = true;

    $session = get_session_id(true);
    if ($session == '') {
        if (php_function_allowed('error_log')) {
            error_log(brand_name() . ': WARNING CAPTCHA generated against blank session - static caching is misconfigured');
        }
    }

    // Clear out old codes
    $where = 'si_time<' . strval(time() - 60 * 30) . ' OR ' . db_string_equal_to('si_session_id', $session);
    $rows = $GLOBALS['SITE_DB']->query('SELECT si_session_id FROM ' . get_table_prefix() . 'captchas WHERE ' . $where);
    foreach ($rows as $row) {
        @unlink(get_custom_file_base() . '/uploads/captcha/' . $row['si_session_id'] . '.wav');
    }
    $GLOBALS['SITE_DB']->query('DELETE FROM ' . get_table_prefix() . 'captchas WHERE ' . $where);

    // Create code
    require_code('crypt');
    $si_code = cms_strtoupper_ascii(get_secure_random_string(6, CRYPT_BASE32));

    // Store code
    $GLOBALS['SITE_DB']->query_insert('captchas', ['si_session_id' => $session, 'si_time' => time(), 'si_code' => $si_code]);

    require_code('files');
    cms_file_put_contents_safe(get_custom_file_base() . '/uploads/captcha/' . $session . '.wav', captcha_audio($si_code), FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE);

    return $si_code;
}

/**
 * Calling this assumes CAPTCHA was needed. Checks that it was done correctly.
 *
 * @param  boolean $regenerate_on_error Whether to possibly regenerate upon error
 */
function enforce_captcha(bool $regenerate_on_error = true)
{
    if (use_captcha()) {
        $error_message = do_lang_tempcode('INVALID_SECURITY_CODE_ENTERED');
        if (!check_captcha(null, $regenerate_on_error, $error_message)) {
            set_http_status_code(500);

            warn_exit($error_message, false, true);
        }
    }
}

/**
 * Normalise a question-CAPTCHA answer, for better comparison.
 *
 * @param  string $answer Answer
 * @return string Normalised answer
 */
function normalise_captcha_question_answer(string $answer) : string
{
    $ret = cms_mb_strtolower($answer);
    $ret = trim($ret);
    return $ret;
}

/**
 * Checks a CAPTCHA.
 *
 * @param  ?string $code_entered CAPTCHA entered (null: read from standard-named parameter)
 * @param  boolean $regenerate_on_error Whether to possibly regenerate upon error
 * @param  ?Tempcode $error_message Error message to write out (null: none)
 * @return boolean Whether it is valid for the current session
 */
function check_captcha(?string $code_entered = null, bool $regenerate_on_error = true, ?object &$error_message = null) : bool
{
    if (!use_captcha()) {
        return true;
    }

    // Question CAPTCHA...

    if (uses_question_captcha()) {
        $questions = get_captcha_questions();

        if ($code_entered === null) {
            $answers = [];
            foreach (array_keys($questions) as $i) {
                $answers[$i] = post_param_string('captcha_' . strval($i));
            }
        } else {
            $answers = explode('||', $code_entered);
            foreach (array_keys($questions) as $i) {
                if (!array_key_exists($i, $answers)) {
                    $answers[$i] = '';
                }
            }
        }

        foreach ($questions as $i => $details) {
            list($question, $answer) = $details;

            if (normalise_captcha_question_answer($answers[$i]) != normalise_captcha_question_answer($answer)) {
                $error_message = do_lang_tempcode('INCORRECT_CAPTCHA_QUESTION_ANSWER', comcode_to_tempcode($question, null, true));

                return false;
            }
        }

        return true;
    }

    // Google CAPTCHA...

    if (get_option('recaptcha_site_key') != '') {
        $url = 'https://www.google.com/recaptcha/api/siteverify';
        $post_params = [
            'secret' => get_option('recaptcha_server_key'),
            'response' => post_param_string('g-recaptcha-response'),
        ];
        $_response = cms_http_request($url, ['convert_to_internal_encoding' => true, 'post_params' => $post_params, 'ignore_http_status' => true]);

        $response = @json_decode($_response->data, true);

        if (!is_array($response)) {
            $error_message = make_string_tempcode('reCAPTCHA: ERROR ' . $response->message);
            require_code('failure');
            cms_error_log($error_message->evaluate(), 'error_occurred_api');
        } else {
            if (!$response['success']) {
                foreach ($response['error-codes'] as $error_code) {
                    switch ($error_code) {
                        case 'timeout-or-duplicate':
                            $error_message = do_lang_tempcode('RECAPTCHA_ERROR_' . str_replace('-', '_', $error_code));
                            break;

                        case 'missing-input-secret':
                        case 'invalid-input-secret':
                        case 'missing-input-response':
                        case 'invalid-input-response':
                        case 'bad-request':
                            $error_message = do_lang_tempcode('RECAPTCHA_ERROR_' . str_replace('-', '_', $error_code));
                            require_code('failure');
                            cms_error_log('reCAPTCHA: ERROR ' . $error_message->evaluate(), 'error_occurred_api');
                            break;
                    }
                }
            }
        }

        return $response['success'];
    }

    // Regular CAPTCHA...

    if ($code_entered === null) {
        $code_entered = post_param_string('captcha');
    }

    $code_needed = $GLOBALS['SITE_DB']->query_select_value_if_there('captchas', 'si_code', ['si_session_id' => get_session_id(true)]);
    if ($code_needed === null) {
        if (get_option('captcha_single_guess') == '1') {
            generate_captcha();
        }
        attach_message(do_lang_tempcode('NO_SESSION_SECURITY_CODE'), 'warn');
        return false;
    }
    $passes = (cms_strtolower_ascii($code_needed) == cms_strtolower_ascii($code_entered));
    if ($regenerate_on_error) {
        if ($passes) {
            cms_register_shutdown_function_if_available(function () {
                if (get_option('recaptcha_site_key') != '') {
                    return;
                }

                // Delete current CAPTCHA
                if (!running_script('snippet')) {
                    $GLOBALS['SITE_DB']->query_delete('captchas', ['si_session_id' => get_session_id(true)]); // Only allowed to check once
                }
            });
        } else {
            if (get_option('captcha_single_guess') == '1') {
                generate_captcha();
            }
        }
    }
    if (!$passes) {
        $data = serialize($_POST);

        // Log hack-attack
        require_code('antispam');
        if (is_posted_code_alien($data)) {
            log_hack_attack_and_exit('CAPTCHAFAIL_HACK');
        } else {
            log_hack_attack_and_exit('CAPTCHAFAIL');
        }
    }
    return $passes;
}

/**
 * Get code to do an AJAX check of the CAPTCHA.
 * Note we don't use this on the join form, as core_cns.js has its own CAPTCHA check integrated into the validation flow.
 *
 * @return string Function name
 */
function captcha_ajax_check_function() : string
{
    if (!use_captcha()) {
        return '';
    }

    return 'captchaCaptchaAjaxCheck';
}
