<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    site_messaging
 */

/**
 * Attach site messages for the current page and the current member's group.
 */
function show_site_messages()
{
    // Don't show site messages when fatalistic is on; warn messages will trigger stack traces
    if (current_fatalistic() != 0) {
        return;
    }

    // Try the cache first
    require_code('caches');
    $_messages = get_cache_entry('site_messages', serialize([]));

    if ($_messages === null) { // No cache? We must fetch from the database and cache it
        $rows = $GLOBALS['SITE_DB']->query_select('site_messages', ['*'], ['m_validated' => 1]);
        foreach ($rows as $i => $row) {
            $rows[$i]['pages'] = $GLOBALS['SITE_DB']->query_select('site_messages_pages', ['page_link'], ['message_id' => $row['id']]);
            $rows[$i]['groups'] = $GLOBALS['SITE_DB']->query_select('site_messages_groups', ['group_id'], ['message_id' => $row['id']]);
        }
        require_code('caches2');
        $_messages = serialize($rows);
        set_cache_entry('site_messages', (60 * 60 * 24), serialize([]), $_messages);
    }

    $messages = unserialize($_messages);
    foreach ($messages as $row) {
        // Skip expired or not yet active messages
        if (($row['m_start_date_time'] !== null) && ($row['m_start_date_time'] > time())) {
            continue;
        }
        if (($row['m_end_date_time'] !== null) && ($row['m_end_date_time'] <= time())) {
            continue;
        }

        // Match-key check
        $match_keys = collapse_1d_complexity('page_link', $row['pages']);
        if (!match_key_match($match_keys)) {
            continue;
        }

        // We're still considering this message for display. Now check groups.
        $groups = collapse_1d_complexity('group_id', $row['groups']);

        if (!empty($groups)) {
            $real_group_list = $GLOBALS['FORUM_DRIVER']->get_members_groups(get_member());
            if (empty(array_intersect($groups, $real_group_list))) { // No group matches; do not display
                continue;
            }
        }

        // We can display the message at this point!
        attach_message(comcode_to_tempcode(get_translated_text($row['m_message'])), $row['m_type']);
    }
}
