<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    site_messaging
 */

/**
 * Attach site messages for the current page and the current member's group.
 */
function show_site_messages()
{
    // Try the cache first
    require_code('caches');
    $_messages = get_cache_entry('site_messages', serialize([]));

    if ($_messages === null) { // No cache? We must fetch from the database and cache it
        $rows = $GLOBALS['SITE_DB']->query_select('site_messages', ['*'], ['m_validated' => 1]);
        foreach ($rows as $i => $row) {
            $rows[$i]['pages'] = $GLOBALS['SITE_DB']->query_select('site_messages_pages', ['page_link'], ['message_id' => $row['id']]);
            $rows[$i]['groups'] = $GLOBALS['SITE_DB']->query_select('site_messages_groups', ['group_id'], ['message_id' => $row['id']]);
        }
        require_code('caches2');
        $_messages = serialize($rows);
        set_cache_entry('site_messages', (60 * 60 * 24), serialize([]), $_messages);
    }

    $messages = unserialize($_messages);
    foreach ($messages as $row) {
        // Skip expired or not yet active messages
        if (($row['m_start_date_time'] !== null) && ($row['m_start_date_time'] > time())) {
            continue;
        }
        if (($row['m_end_date_time'] !== null) && ($row['m_end_date_time'] <= time())) {
            continue;
        }

        // Page-link checking
        $should_display = empty($row['pages']);
        foreach ($row['pages'] as $page_link) {
            if ($should_display) { // No need to go through the rest of the page link filters if one already passed
                break;
            }

            list($current_zone, $current_attributes, $current_hash) = page_link_decode(get_current_page_link(false));
            list($filter_zone, $filter_attributes, $filter_hash) = page_link_decode($page_link['page_link']);

            if (($filter_zone != '_WILD') && ($current_zone != $filter_zone)) { // Zones do not match; go to the next page-link
                continue;
            }

            if (($filter_hash != '') && ($current_hash != $filter_hash)) { // Hashes do not match; go to the next page-link
                continue;
            }

            $should_display = true;
            foreach ($filter_attributes as $key => $value) {
                if (in_array($value, ['_WILD', '_SELF', '_SEARCH'])) { // Matches everything for parameters, so skip them
                    continue;
                }
                if (!array_key_exists($key, $current_attributes) || ($current_attributes[$key] != $value)) { // We have an attribute that does not match; go to the next page-link.
                    $should_display = false;
                    break;
                }
            }

            if ($should_display) { // We have a page-link match; no need to process further page-link filters
                break;
            }
        }

        // We're still considering this message for display. Now check groups.
        if ($should_display) {
            $groups = collapse_1d_complexity('group_id', $row['groups']);

            if (!empty($groups)) {
                $real_group_list = $GLOBALS['FORUM_DRIVER']->get_members_groups(get_member());
                $should_display = !empty(array_intersect($groups, $real_group_list));
            }
        }

        if ($should_display) { // We can display the message!
            attach_message(comcode_to_tempcode(get_translated_text($row['m_message'])), $row['m_type']);
        }
    }
}
