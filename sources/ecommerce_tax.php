<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    ecommerce
 */

// DON'T include this file directly. Include 'ecommerce' instead.

/**
 * Initialise the eCommerce tax system.
 */
function init__ecommerce_tax()
{
    // Initialise the tax service hook into the cache
    global $ECOMMERCE_TAX_CACHE;
    $ECOMMERCE_TAX_CACHE = [];

    // Define constants
    if (!defined('TAX_SERVICE_PRIORITY_NONE')) {
        define('TAX_SERVICE_PRIORITY_NONE', 0);
        define('TAX_SERVICE_PRIORITY_LOW', 1);
        define('TAX_SERVICE_PRIORITY_NORMAL', 2);
        define('TAX_SERVICE_PRIORITY_HIGH', 3);
    }
}

/**
 * Load a tax service hook into cache and return it.
 *
 * @param  ?ID_TEXT $tax_service The name of the tax service hook to load (null: load the tax service configured with the site)
 * @param  boolean $fail_ok Whether a failure should not trigger an error
 * @return ?object The hook object (null: hook not found and $fail_ok was true)
 */
function get_tax_service_hook(?string $tax_service = null, bool $fail_ok = false) : ?object
{
    global $ECOMMERCE_TAX_CACHE;

    if ($tax_service === null) {
        $tax_service = get_option('tax_api_service');
    }

    if (isset($ECOMMERCE_TAX_CACHE[$tax_service])) {
        return $ECOMMERCE_TAX_CACHE[$tax_service];
    }

    if (hook_exists('systems', 'ecommerce_tax', $tax_service)) {
        $ob = get_hook_ob('systems', 'ecommerce_tax', $tax_service, 'Hook_ecommerce_tax_', $fail_ok);
        if ($ob !== null) {
            $ECOMMERCE_TAX_CACHE[$tax_service] = $ob;
        }
        return $ob;
    }

    if (!$fail_ok) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    return null;
}

/**
 * Multiply tax up or down to reflect a price being multiplied up or down.
 * This does nothing for a semantic tax code or a simple percentage.
 * For a simple flat figure it does though.
 *
 * @param  ID_TEXT $tax_code The tax code
 * @param  float $multiplier The multiplier
 * @return ID_TEXT The amended tax code
 */
function tax_multiplier(string $tax_code, float $multiplier) : string
{
    if (($tax_code != '') && (is_numeric($tax_code[0])) && (substr($tax_code, -1) != '%')) {
        return float_to_raw_string(floatval($tax_code) * $multiplier);
    }

    return $tax_code;
}

/**
 * Calculate tax that is due based on customer context.
 * Wraps get_tax_using_tax_codes which can do bulk-lookups.
 *
 * @param  ?array $details Map of product details (null: there's no product directly associated). Not strictly needed, only passed for customisation potential.
 * @param  ID_TEXT $tax_code The tax code. This may be different to the product default, e.g. if a discount is in place.
 * @param  REAL $price The price
 * @param  REAL $shipping_cost The shipping cost
 * @param  ?MEMBER $member_id The member this is for (null: current member)
 * @param  integer $quantity The quantity of items
 * @return array A tuple: The tax derivation, tax due (including shipping tax), tax tracking ID
 */
function calculate_tax_due(?array $details, string $tax_code, float $price, float $shipping_cost = 0.00, ?int $member_id = null, int $quantity = 1) : array
{
    // ADD CUSTOM CODE HERE BY OVERRIDING THIS FUNCTION

    if ($member_id === null) {
        $member_id = get_member();
    }

    // We will lookup via a single item going through our main get_tax_using_tax_codes worker function
    $item_details = [];
    $item = [
        'quantity' => $quantity,
    ];
    $details = [
        'tax_code' => $tax_code,
        'price' => $price,
    ];
    $item_details[] = [$item, $details];

    // Do main call ($item_details altered by reference)
    list($shipping_tax_derivation, $shipping_tax, $shipping_tax_tracking) = get_tax_using_tax_codes($item_details, '', $shipping_cost);

    // Extract result for our single item
    $tax_derivation = $item_details[0][2];
    $tax = $item_details[0][3];
    $tax_tracking = $item_details[0][4];

    // Add in shipping to tax derivation and tax
    foreach ($shipping_tax_derivation as $tax_category => $tax_category_amount) {
        if (!array_key_exists($tax_category, $tax_derivation)) {
            $tax_derivation[$tax_category] = 0.00;
        }
        $tax_derivation[$tax_category] += $tax_category_amount;
    }
    $tax += $shipping_tax;

    return [$tax_derivation, $tax, $tax_tracking, $shipping_tax];
}

/**
 * Find the tax for a number of items being sold together.
 *
 * @param  array $item_details A list of pairs: shopping-cart/order style row (with at least 'quantity'), product details (with at least 'tax_code' and 'price'). This is returned by reference as a list of tuples, (tax, tax_derivation, tax_tracking) gets appended.
 * @param  string $field_name_prefix Field name prefix. Pass as blank for cart items or 'p_' for order items.
 * @param  REAL $shipping_cost The shipping cost
 * @param  ?MEMBER $member_id The member this is for (null: current member)
 * @return array A tuple: The shipping tax derivation, shipping tax due (including shipping tax), shipping tax tracking ID
 */
function get_tax_using_tax_codes(array &$item_details, string $field_name_prefix = '', float $shipping_cost = 0.00, ?int $member_id = null) : array
{
    if ($member_id === null) {
        $member_id = get_member();
    }

    $_item_details = [];

    // The software tax hook should never be removed; error if it was
    if (!hook_exists('systems', 'ecommerce_tax', 'core')) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    // Set configured tax service first so shipping tax takes precedence with this service
    $_item_details[get_option('tax_api_service')] = [];

    $hooks = find_all_hooks('systems', 'ecommerce_tax');
    foreach (array_keys($hooks) as $hook) {
        $_item_details[$hook] = [];
    }
    $_item_details['_free'] = []; // Free items with no tax

    $tax_tracking = [];
    $shipping_tax_derivation = [];
    $shipping_tax = 0.00;

    // Categorise each item depending on the tax service to use; it may be possible items come from previously selected tax services or left to internal calculation, or that an item is outside the supported scope / countries of a selected tax service.
    foreach ($item_details as $i => $parts) {
        list($item, $details) = $parts;

        $tax_code = $details['tax_code'];
        $price = $details['price'];

        // Determine which tax service to use for this item depending on which returns the highest priority
        $service_to_use = null;
        $service_priority = TAX_SERVICE_PRIORITY_NONE;
        foreach (array_keys($hooks) as $hook) {
            $ob = get_tax_service_hook($hook);
            $_service_priority = $ob->service_priority($parts);
            if ($_service_priority > $service_priority) {
                $service_to_use = $hook;
                $service_priority = $_service_priority;
            }
        }

        if ($service_to_use === null) {
            if ($price == 0.00) {
                $_item_details['_free'][$i] = $parts;
            } else {
                $_item_details['core'][$i] = $parts;
            }
        } else {
            $_item_details[$service_to_use][$i] = $parts;
        }
    }

    // Prepare shipping and billing information
    $shipping_email = '';
    $shipping_phone = '';
    $shipping_firstname = '';
    $shipping_lastname = '';
    $shipping_street_address = '';
    $shipping_city = '';
    $shipping_county = '';
    $shipping_state = '';
    $shipping_post_code = '';
    $shipping_country = '';
    $shipping_email = '';
    $shipping_phone = '';
    $cardholder_name = '';
    $card_type = '';
    $card_number = null;
    $card_start_date_year = null;
    $card_start_date_month = null;
    $card_expiry_date_year = null;
    $card_expiry_date_month = null;
    $card_cv2 = null;
    $billing_street_address = '';
    $billing_city = '';
    $billing_county = '';
    $billing_state = '';
    $billing_post_code = '';
    $billing_country = '';
    get_default_ecommerce_fields($member_id, $shipping_email, $shipping_phone, $shipping_firstname, $shipping_lastname, $shipping_street_address, $shipping_city, $shipping_county, $shipping_state, $shipping_post_code, $shipping_country, $cardholder_name, $card_type, $card_number, $card_start_date_year, $card_start_date_month, $card_expiry_date_year, $card_expiry_date_month, $card_cv2, $billing_street_address, $billing_city, $billing_county, $billing_state, $billing_post_code, $billing_country, true);

    if ($shipping_street_address == '') {
        $street_address = $billing_street_address;
        $city = $billing_city;
        $county = $billing_county;
        $state = $billing_state;
        $post_code = $billing_post_code;
        $country = $billing_country;
    } else {
        $street_address = $shipping_street_address;
        $city = $shipping_city;
        $county = $shipping_county;
        $state = $shipping_state;
        $post_code = $shipping_post_code;
        $country = $shipping_country;
    }

    // Run through the tax services' get_tax_using_tax_codes methods
    foreach ($_item_details as $hook => $products) {
        if ($hook == '_free') {
            continue;
        }

        $ob = get_tax_service_hook($hook);
        if (method_exists($ob, 'get_tax_using_tax_codes')) {
            $tax_details = $ob->get_tax_using_tax_codes($item_details, $products, $field_name_prefix, $shipping_cost, $member_id, $street_address, $city, $state, $country, $post_code);
            if ($tax_details === null) { // Supposed to be processed by the given tax service, but unsupported for whatever reason (e.g. country limits)
                foreach ($products as $i => $parts) {
                    $_item_details['_free'][$i] = $parts;
                }
            } else {
                if (empty($shipping_tax_derivation) && ($shipping_tax == 0.0) && empty($tax_tracking)) {
                    if ($tax_details[0] !== null) {
                        $shipping_tax_derivation = $tax_details[0];
                    }
                    if ($tax_details[1] !== null) {
                        $shipping_tax = $tax_details[1];
                    }
                    if ($tax_details[2] !== null) {
                        $tax_tracking = $tax_details[2];
                    }
                }

                foreach ($tax_details[3] as $i => $unprocessed) {
                    $_item_details['_free'][$i] = $unprocessed;
                }
            }
        }
    }

    // Now process free items
    foreach ($_item_details['_free'] as $i => $parts) {
        list($item, $details) = $parts;

        $_item_details['_free'][$i][2] = [];
        $_item_details['_free'][$i][3] = 0.00;
        $_item_details['_free'][$i][4] = [];
        $item_details[$i] = $_item_details['_free'][$i];
    }

    // If we have no information on shipping tax, calculate it
    if (empty($shipping_tax_derivation)) {
        if ($shipping_cost != 0.00) {
            list($shipping_tax_derivation, $shipping_tax, , ) = calculate_tax_due(null, get_option('shipping_tax_code'), $price, 0.00, $member_id); // This will force a call back into our function, but won't recurse again
        }
    }

    $shipping_tax_tracking = $tax_tracking;

    return [$shipping_tax_derivation, $shipping_tax, $shipping_tax_tracking];
}

/**
 * Mark an order completed, i.e. tax has been received for payment to the tax authority.
 *
 * @param  ID_TEXT $tracking_service The tax_api_service used
 * @param  mixed $tracking_id The tracking ID or reference data
 * @param  ID_TEXT $txn_id The transaction ID
 * @param  MEMBER $member_id The member ID
 * @param  ID_TEXT $session_id The session ID of the purchaser
 */
function declare_completed(string $tracking_service, $tracking_id, string $txn_id, int $member_id, string $session_id)
{
    $hook = get_tax_service_hook($tracking_service);

    if (method_exists($hook, 'declare_completed')) {
        $hook->declare_completed($tracking_id, $txn_id, $member_id, $session_id);
    }
}

/**
 * Work out the tax rate for a given payment amount and flat tax figure.
 *
 * @param  REAL $amount Amount
 * @param  REAL $tax Tax in money
 * @return REAL The tax rate (as a percentage)
 */
function backcalculate_tax_rate(float $amount, float $tax) : float
{
    if ($amount == 0.00) {
        return 0.0;
    }
    return round(100.0 * ($tax / $amount), 1);
}

/**
 * Generate an invoicing breakdown.
 *
 * @param  ID_TEXT $type_code The product codename
 * @param  SHORT_TEXT $item_name The human-readable product title
 * @param  ID_TEXT $purchase_id The purchase ID
 * @param  REAL $price Transaction price in money (excluding tax and shipping)
 * @param  REAL $tax Transaction tax in money (including shipping tax)
 * @param  REAL $shipping_cost Transaction shipping cost in money
 * @param  REAL $shipping_tax Transaction shipping tax in money
 * @return array Invoicing breakdown
 */
function generate_invoicing_breakdown(string $type_code, string $item_name, string $purchase_id, float $price, float $tax, float $shipping_cost = 0.00, float $shipping_tax = 0.00) : array
{
    $invoicing_breakdown = [];

    if (preg_match('#^CART_ORDER_\d+$#', $type_code) == 0) {
        // Not a cart order...

        $invoicing_breakdown[] = [
            'type_code' => $type_code,
            'item_name' => $item_name,
            'quantity' => 1,
            'unit_price' => $price,
            'tax' => $tax - $shipping_tax,
        ];
    } else {
        // A cart order...

        $order_id = intval(substr($type_code, strlen('CART_ORDER_')));

        $total_price = 0.00;
        $total_tax = 0.00;

        $_items = $GLOBALS['SITE_DB']->query_select('shopping_order_details', ['*'], ['p_order_id' => $order_id]);
        foreach ($_items as $_item) {
            $invoicing_breakdown[] = [
                'type_code' => $_item['p_type_code'],
                'item_name' => $_item['p_name'],
                'quantity' => $_item['p_quantity'],
                'unit_price' => $_item['p_price'],
                'tax' => $_item['p_tax'],
            ];

            $total_price += ($_item['p_price'] * $_item['p_quantity']);
            $total_tax += $_item['p_tax'];
        }

        if (!paid_amount_matches($price, ($tax - $shipping_tax), $shipping_cost, $total_price, $total_tax, $shipping_cost)) {
            $invoicing_breakdown[] = [
                'type_code' => '',
                'item_name' => do_lang('PRICING_ADJUSTMENT'),
                'quantity' => 1,
                'unit_price' => $price - $total_price,
                'tax' => $tax - $total_tax,
            ];
        }
    }

    if (($shipping_cost != 0.00) || ($shipping_tax != 0.00)) {
        $invoicing_breakdown[] = [
            'type_code' => '',
            'item_name' => do_lang('SHIPPING'),
            'quantity' => 1,
            'unit_price' => $shipping_cost,
            'tax' => $shipping_tax,
        ];
    }

    return $invoicing_breakdown;
}

/**
 * Send an invoice notification to a member.
 *
 * @param  MEMBER $member_id The member to send to
 * @param  AUTO_LINK $id The invoice ID
 * @param  boolean $fulfilled Whether this invoice was just fulfilled
 */
function send_invoice_notification(int $member_id, int $id, bool $fulfilled = false)
{
    require_code('ecommerce');
    require_css('ecommerce');

    // Generate the invoice
    $invoice = display_invoice($id);

    // Send out notification
    require_code('notifications');
    $subject = do_lang($fulfilled ? 'INVOICE_FULFILLED_SUBJECT' : 'INVOICE_SUBJECT', strval($id), null, null, get_lang($member_id));
    $body = do_notification_template($fulfilled ? 'ECOM_INVOICE_FULFILLED_MAIL' : 'ECOM_INVOICE_MAIL', [
        'INVOICE' => escape_html_in_comcode($invoice),
    ], get_lang($member_id), false, null, '.txt', 'text');
    dispatch_notification('invoice', null, $subject, $body->evaluate(get_lang($member_id)), [$member_id], A_FROM_SYSTEM_PRIVILEGED);
}

/**
 * Get the Tempcode for a tax input widget.
 *
 * @param  mixed $set_title A human intelligible name for this input field, provided in plain-text format or as HTML via do_lang_tempcode/protect_from_escaping (string or Tempcode)
 * @param  mixed $description A description for this input field, provided in HTML format (string or Tempcode)
 * @param  ID_TEXT $set_name The name which this input field is for
 * @param  string $default The default value for this input field
 * @param  boolean $required Whether this is a required input field
 * @param  ?integer $tabindex The tab index of the field (null: not specified)
 * @return Tempcode The input field
 */
function form_input_tax_code($set_title, $description, string $set_name, string $default, bool $required, ?int $tabindex = null) : object
{
    $tabindex = get_form_field_tabindex($tabindex);

    $default = filter_form_field_default($set_name, $default);

    $required = filter_form_field_required($set_name, $required);
    $_required = ($required) ? '-required' : '';

    $fields = new Tempcode();
    $field_set = alternate_fields_set__start($set_name);

    $default_set = 'rate';

    // Simple rate input ...

    $has_rate = (substr($default, -1) == '%');
    if ($has_rate) {
        $default_set = 'rate';
    }
    $input = do_template('FORM_SCREEN_INPUT_FLOAT', [
        '_GUID' => '8adbb6083389738a7332f8ec09ddfb77',
        'TABINDEX' => strval($tabindex),
        'REQUIRED' => $_required,
        'NAME' => $set_name . '_rate',
        'DEFAULT' => $has_rate ? float_format(floatval($default), 2, false) : '',
    ]);
    $field_set->attach(_form_input($set_name . '_rate', do_lang_tempcode('TAX_RATE'), do_lang_tempcode('DESCRIPTION_TAX_RATE'), $input, $required, false, $tabindex));

    // Hook inputs
    $hooks = find_all_hook_obs('systems', 'ecommerce_tax', 'Hook_ecommerce_tax_');
    foreach ($hooks as $ob) {
        if (method_exists($ob, 'form_input_tax_code')) {
            $ob->form_input_tax_code($field_set, $default_set, $set_title, $description, $set_name, $default, $required, $tabindex);
        }
    }

    // --

    $fields->attach(alternate_fields_set__end($set_name, $set_title, '', $field_set, $required, null, false, $default_set));
    return $fields;
}

/**
 * Read a tax value from the POST environment.
 *
 * @param  string $name Variable name
 * @param  string $default Default value
 * @return string The value
 */
function post_param_tax_code(string $name, string $default = '0%') : string
{
    $value = post_param_string($name . '_flat', ''); // Simple flat figure
    if ($value == '') { // No simple flat figure
        $value = post_param_string($name . '_rate', ''); // Simple rate
        if ($value != '') { // simple rate post-processing
            $value = float_to_raw_string(float_unformat($value)) . '%';
        }
    } else { // simple flat figure post-processing
        $value = float_to_raw_string(float_unformat($value));
    }
    if ($value == '') { // No simple rate; do hook-based semantic parameters
        $hooks = find_all_hook_obs('systems', 'ecommerce_tax', 'Hook_ecommerce_tax_');
        foreach ($hooks as $ob) {
            if (method_exists($ob, 'post_param_tax_code')) {
                $value = $ob->post_param_tax_code($name);
                if ($value != '') {
                    break;
                }
            }
        }
    }
    if ($value == '') { // No semantic parameters; use default value
        $value = $default; // Default
    }

    return $value;
}

/**
 * Check the country configuration against a tax service's supported countries.
 *
 * @param  SHORT_TEXT $tax_service The human label of the tax service calling this function
 * @param  array $supported_countries Array of country codes supported by the tax service
 */
function check_country_configuration(string $tax_service, array $supported_countries)
{
    $business_country = get_option('business_country');
    $business_state = get_option('business_state');
    $currency = get_option('currency');

    if (!in_array($business_country, $supported_countries)) {
        warn_exit(do_lang_tempcode('UNSUPPORTED_COUNTRY', $tax_service, escape_html($business_country)), false, true);
    }
    if ($business_country == 'US') {
        if ($currency != 'USD') {
            warn_exit(do_lang_tempcode('CURRENCY_NOT_USD'), false, true);
        }
        global $USA_STATE_LIST;
        if (!array_key_exists($business_state, $USA_STATE_LIST)) {
            warn_exit(do_lang_tempcode('USA_STATE_INVALID'), false, true);
        }
    }
}
