<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

/**
 * Edit a forum poll.
 *
 * @param  AUTO_LINK $poll_id The ID of the poll we're editing
 * @param  SHORT_TEXT $question The question
 * @param  BINARY $is_private Whether the result tallies are kept private until the poll is made non-private
 * @param  BINARY $is_open Whether the poll is open for voting
 * @param  integer $minimum_selections The minimum number of selections that may be made
 * @param  integer $maximum_selections The maximum number of selections that may be made
 * @param  BINARY $requires_reply Whether members must have a post in the topic before they made vote
 * @param  array $answers A list of the potential voteable answers
 * @param  LONG_TEXT $reason The reason for editing the poll
 * @return AUTO_LINK The ID of the topic the poll is on
 */
function cns_edit_poll(int $poll_id, string $question, int $is_private, int $is_open, int $minimum_selections, int $maximum_selections, int $requires_reply, array $answers, string $reason = '') : int
{
    require_code('cns_polls');

    $topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['t_poll_id' => $poll_id], '', 1);
    if (!cns_may_edit_poll_by($topic_info[0]['t_forum_id'], $topic_info[0]['t_cache_first_member_id'])) {
        access_denied('I_ERROR');
    }
    $topic_id = $topic_info[0]['id'];
    $poll_info = $GLOBALS['FORUM_DB']->query_select('f_polls', ['*'], ['id' => $poll_id], '', 1);

    if ((!has_privilege(get_member(), 'may_unblind_own_poll')) && ($is_private == 0) && ($poll_info[0]['po_is_private'] == 1)) {
        access_denied('PRIVILEGE', 'may_unblind_own_poll');
    }

    cns_validate_poll_answers($topic_id, $answers);

    $GLOBALS['FORUM_DB']->query_update('f_polls', [
        'po_question' => $question,
        'po_is_private' => $is_private,
        'po_is_open' => $is_open,
        'po_minimum_selections' => $minimum_selections,
        'po_maximum_selections' => $maximum_selections,
        'po_requires_reply' => $requires_reply,
    ], ['id' => $poll_id], '', 1);

    $current_answers = $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['*'], ['pa_poll_id' => $poll_id]);
    $total_after = count($answers);
    foreach ($current_answers as $i => $current_answer) {
        if ($i < $total_after) {
            $new_answer = $answers[$i];
            $update = ['pa_answer' => is_array($new_answer) ? $new_answer[0] : $new_answer];
            if (is_array($new_answer)) {
                $update['pa_cache_num_votes'] = $new_answer[1];
            }
            $GLOBALS['FORUM_DB']->query_update('f_poll_answers', $update, ['id' => $current_answer['id']], '', 1);
        } else {
            $GLOBALS['FORUM_DB']->query_delete('f_poll_answers', ['id' => $current_answer['id']], '', 1);
            $GLOBALS['FORUM_DB']->query_delete('f_poll_votes', ['pv_answer_id' => $current_answer['id']], '', 1);
        }
    }
    $i++;
    for (; $i < $total_after; $i++) {
        $new_answer = $answers[$i];
        $GLOBALS['FORUM_DB']->query_insert('f_poll_answers', [
            'pa_poll_id' => $poll_id,
            'pa_answer' => is_array($new_answer) ? $new_answer[0] : $new_answer,
            'pa_cache_num_votes' => is_array($new_answer) ? $new_answer[1] : 0,
        ]);
    }

    $name = $GLOBALS['FORUM_DB']->query_select_value('f_polls', 'po_question', ['id' => $poll_id]);
    require_code('cns_general_action2');
    cns_mod_log_it('EDIT_TOPIC_POLL', strval($poll_id), $name, $reason);

    return $topic_id;
}

/**
 * Delete a forum poll.
 *
 * @param  AUTO_LINK $poll_id The ID of the poll we're deleting
 * @param  LONG_TEXT $reason The reason for deleting the poll
 * @param  boolean $check_perms Whether to check permissions
 * @return AUTO_LINK The ID of the topic the poll is on
 */
function cns_delete_poll(int $poll_id, string $reason = '', bool $check_perms = true) : int
{
    require_code('cns_polls');

    $info = $GLOBALS['FORUM_DB']->query_select('f_polls', ['id'], ['id' => $poll_id], '', 1);
    if (!array_key_exists(0, $info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }

    $topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['t_poll_id' => $poll_id], '', 1);
    if (!array_key_exists(0, $topic_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
    }
    if ($check_perms) {
        if (!cns_may_delete_poll_by($topic_info[0]['t_forum_id'], $topic_info[0]['t_cache_first_member_id'])) {
            access_denied('I_ERROR');
        }
    }
    $topic_id = $topic_info[0]['id'];

    $GLOBALS['FORUM_DB']->query_update('f_topics', ['t_poll_id' => null], ['t_poll_id' => $poll_id], '', 1);

    $name = $GLOBALS['FORUM_DB']->query_select_value('f_polls', 'po_question', ['id' => $poll_id]);

    $GLOBALS['FORUM_DB']->query_delete('f_polls', ['id' => $poll_id], '', 1);
    $GLOBALS['FORUM_DB']->query_delete('f_poll_answers', ['pa_poll_id' => $poll_id]);
    $GLOBALS['FORUM_DB']->query_delete('f_poll_votes', ['pv_poll_id' => $poll_id]);

    require_code('cns_general_action2');
    cns_mod_log_it('DELETE_TOPIC_POLL', strval($topic_id) . ':' . strval($poll_id), $name, $reason);

    return $topic_id;
}

/**
 * Place a vote on a specified poll.
 *
 * @param  AUTO_LINK $poll_id The ID of the poll we're voting in
 * @param  array $votes A list of poll answers that are being voted for
 * @param  ?MEMBER $member_id The member that's voting (null: current member)
 * @param  ?array $topic_info The row of the topic the poll is for (null: get it from the DB)
 */
function cns_vote_in_poll(int $poll_id, array $votes, ?int $member_id = null, ?array $topic_info = null)
{
    // Who's voting
    if ($member_id === null) {
        $member_id = get_member();
    }

    // Check they're allowed to vote
    if (!has_privilege($member_id, 'vote_in_polls')) {
        warn_exit(do_lang_tempcode('VOTE_DENIED'));
    }
    if ($topic_info === null) {
        $topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['id', 't_forum_id'], ['t_poll_id' => $poll_id], '', 1);
    }
    if (!array_key_exists(0, $topic_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }
    $topic_id = $topic_info[0]['id'];
    $forum_id = $topic_info[0]['t_forum_id'];
    if ((!has_category_access($member_id, 'forums', strval($forum_id))) && ($forum_id !== null)) {
        warn_exit(do_lang_tempcode('VOTE_CHEAT'));
    }
    if (is_guest($member_id)) {
        $voted_already_map = ['pv_poll_id' => $poll_id, 'pv_ip' => get_ip_address()];
    } else {
        $voted_already_map = ['pv_poll_id' => $poll_id, 'pv_member_id' => $member_id];
    }
    $voted_already = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_poll_votes', 'pv_member_id', $voted_already_map);
    if ($voted_already !== null) {
        warn_exit(do_lang_tempcode('NOVOTE'));
    }

    // Check their vote is valid
    $rows = $GLOBALS['FORUM_DB']->query_select('f_polls', ['po_is_open', 'po_minimum_selections', 'po_maximum_selections', 'po_requires_reply', 'po_question', 'po_is_private'], ['id' => $poll_id], '', 1);
    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }
    if ((count($votes) < $rows[0]['po_minimum_selections']) || (count($votes) > $rows[0]['po_maximum_selections']) || ($rows[0]['po_is_open'] == 0)) {
        warn_exit(do_lang_tempcode('VOTE_CHEAT'));
    }
    $answers = collapse_2d_complexity('id', 'pa_answer', $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['id', 'pa_answer'], ['pa_poll_id' => $poll_id]));
    if (($rows[0]['po_requires_reply'] == 1) && (!cns_has_replied_topic($topic_id, $member_id))) {
        warn_exit(do_lang_tempcode('POLL_REQUIRES_REPLY'));
    }

    // Insert votes
    $answer = '';
    foreach ($votes as $vote) {
        if (!array_key_exists($vote, $answers)) {
            warn_exit(do_lang_tempcode('VOTE_CHEAT'));
        }

        $GLOBALS['FORUM_DB']->query_insert('f_poll_votes', [
            'pv_poll_id' => $poll_id,
            'pv_member_id' => $member_id,
            'pv_answer_id' => $vote,
            'pv_ip' => get_ip_address(),
        ]);

        $GLOBALS['FORUM_DB']->query('UPDATE ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_poll_answers SET pa_cache_num_votes=(pa_cache_num_votes+1) WHERE id=' . strval($vote), 1);

        if ($answer != '') {
            $answer .= ', ';
        }
        $answer .= $answers[$vote];
    }
    $GLOBALS['FORUM_DB']->query('UPDATE ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_polls SET po_cache_total_votes=(po_cache_total_votes+1) WHERE id=' . strval($poll_id), 1);

    // Send notification if not private (if private then it would be too revealing to say when votes come in, as you could just look at who is online when you get the notification)
    if ($rows[0]['po_is_private'] == 0) {
        $poll_title = $rows[0]['po_question'];
        $topic_title = $topic_info[0]['t_cache_first_title'];
        $topic_url = $GLOBALS['FORUM_DRIVER']->topic_url($topic_id);
        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        $subject = do_lang('POLL_VOTE_MAIL_SUBJECT', $username, $answer, [$poll_title, $topic_title, $topic_url], get_lang($member_id));
        $mail = do_lang('POLL_VOTE_MAIL_BODY', $username, $answer, [$poll_title, $topic_title, $topic_url], get_lang($member_id));
        require_code('notifications');
        dispatch_notification('cns_topic', strval($topic_id), $subject, $mail, [$member_id]);
    }
}

/**
 * Get default poll options for a specified forum.
 *
 * @param  ?AUTO_LINK $forum_id The ID of the forum for which we are getting default poll options (null: private topic)
 * @return array Map of default poll options [confined=>boolean, options=>[[name=>string, mandatory=>boolean]]]
 */
function cns_get_default_poll_options(?int $forum_id = null) : array
{
    $default_options = ['confined' => false, 'options' => []];

    // For private topics, there are no default poll options.
    if ($forum_id === null) {
        return $default_options;
    }

    require_code('xml');
    require_lang('cns_polls');

    $_forum = $GLOBALS['FORUM_DB']->query_select('f_forums', ['*'], ['id' => $forum_id], '', 1);
    if (!array_key_exists(0, $_forum)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'forum'));
    }
    $forum = $_forum[0];

    // If poll options are empty, return empty array.
    if (!array_key_exists('f_poll_default_options_xml', $forum)) {
        return $default_options;
    }
    if (trim($forum['f_poll_default_options_xml']) == '') {
        return $default_options;
    }

    $parsed = new CMS_simple_xml_reader($forum['f_poll_default_options_xml']);
    list($root_tag, $root_attributes, , $this_children) = $parsed->gleamed;

    // Skip if defaultPollOptions is not the root tag.
    if ($root_tag != 'defaultPollOptions') {
        return $default_options;
    }

    // Check for the confined attribute
    foreach ($root_attributes as $attribute => $value) {
        if ($attribute == "confined" && cms_strtolower_ascii($value) == 'true') {
            $default_options['confined'] = true;
        }
    }

    foreach ($this_children as $_child) {
        if (!is_array($_child)) {
            continue;
        }
        list($row_tag, $row_attributes, $row_value, $row_children) = $_child;
        if ($row_tag != 'option') {
            continue;
        }

        $map = [
            'name' => $row_value,
        ];
        foreach ($row_attributes as $attribute => $value) {
            if ($attribute == "mandatory" && cms_strtolower_ascii($value) == 'true') {
                $map['mandatory'] = true;
            } else {
                $map['mandatory'] = false;
            }
        }
        array_push($default_options['options'], $map);
    }

    return $default_options;
}

/**
 * Validate submitted answers for a poll and warn_exit if any are invalid.
 *
 * @param  AUTO_LINK $topic_id The ID of the topic to which this poll is being added or edited
 * @param  array $answers A list of pairs of the potential voteable answers and the number of votes
 */
function cns_validate_poll_answers(int $topic_id, array $answers)
{
    require_lang('cns_polls');

    $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
    $default_options = cns_get_default_poll_options($forum_id);

    $default_options_answers = array_column($default_options['options'], 'name');
    $answers_text = [];
    foreach ($answers as $answer) {
        if (is_array($answer)) {
            list($answer, $num_votes) = $answer;
        }

        // Check for duplicate answers
        if ($answer !== '') {
            if (in_array($answer, $answers_text)) {
                warn_exit('POLL_NO_DUPLICATE_OPTIONS', $answer);
            }
            array_push($answers_text, $answer);
        }
    }

    // Make sure all mandatory options are specified in answers
    foreach ($default_options['options'] as $option) {
        if ($option['mandatory'] && !in_array($option['name'], $answers_text)) {
            warn_exit(do_lang_tempcode('POLL_MISSING_MANDATORY_OPTION', $option['name']));
        }
    }

    // If poll is confined, make sure all of the specified answers exist as an option in the default options
    if ($default_options['confined']) {
        foreach ($answers_text as $answer) {
            if (!in_array($answer, $default_options_answers)) {
                warn_exit(do_lang_tempcode('POLL_INVALID_OPTION', $answer));
            }
        }
    }
}

/**
 * Validate whether or not the XML markup passed in for default poll options is valid.
 *
 * @param  LONG_TEXT $xml The XML to validate
 * @return ?Tempcode Error message if invalid (null: XML is valid)
 */
function cns_validate_default_poll_options_xml(string $xml = '') : ?object
{
    // Empty XML is valid
    if (trim($xml) == '') {
        return null;
    }

    require_code('xml');
    require_lang('cns_polls');

    $parsed = new CMS_simple_xml_reader($xml);
    list($root_tag, $root_attributes, , $this_children) = $parsed->gleamed;

    if ($root_tag != 'defaultPollOptions') {
        return do_lang_tempcode('POLL_XML_INVALID_ROOT');
    }

    if (count($root_attributes) > 0) {
        foreach ($root_attributes as $attribute => $value) {
            if ($attribute != "confined") {
                return do_lang_tempcode('POLL_XML_INVALID_ROOT_ATTRIBUTE', $attribute);
            }
        }
    }

    if (array_key_exists('confined', $root_attributes)) {
        if (!in_array(cms_strtolower_ascii($root_attributes['confined']), ['true', 'false'])) {
            return do_lang_tempcode('POLL_XML_TRUE_FALSE_ONLY', 'confined');
        }
        if (count($this_children) === 0) {
            return do_lang_tempcode('POLL_XML_NO_OPTIONS');
        }
    }

    foreach ($this_children as $_child) {
        if (!is_array($_child)) {
            continue;
        }
        list($row_tag, $row_attributes, $row_value, $row_children) = $_child;

        if ($row_tag != 'option') {
            return do_lang_tempcode('POLL_XML_INVALID_CHILD', $row_tag);
        }

        if (count($row_attributes) > 0) {
            foreach ($row_attributes as $attribute => $value) {
                if ($attribute != "mandatory") {
                    return do_lang_tempcode('POLL_XML_INVALID_ROW_ATTRIBUTE', $attribute);
                } elseif (!in_array(cms_strtolower_ascii($value), ['true', 'false'])) {
                    return do_lang_tempcode('POLL_XML_TRUE_FALSE_ONLY', $attribute);
                }
            }
        }
    }

    return null;
}
