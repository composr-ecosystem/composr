<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

/**
 * Edit a forum poll.
 *
 * @param  AUTO_LINK $poll_id The ID of the poll we're editing
 * @param  SHORT_TEXT $question The question
 * @param  BINARY $is_private Whether the result tallies are kept private until the poll is made non-private
 * @param  BINARY $is_open Whether the poll is open for voting
 * @param  integer $minimum_selections The minimum number of selections that may be made
 * @param  integer $maximum_selections The maximum number of selections that may be made
 * @param  BINARY $requires_reply Whether members must have a post in the topic before they made vote
 * @param  array $answers A list of the potential voteable answers
 * @param  LONG_TEXT $reason The reason for editing the poll
 * @return AUTO_LINK The ID of the topic the poll is on
 */
function cns_edit_poll($poll_id, $question, $is_private, $is_open, $minimum_selections, $maximum_selections, $requires_reply, $answers, $reason = '')
{
    require_code('cns_polls');

    $topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['t_poll_id' => $poll_id], '', 1);
    if (!cns_may_edit_poll_by($topic_info[0]['t_forum_id'], $topic_info[0]['t_cache_first_member_id'])) {
        access_denied('I_ERROR');
    }
    $topic_id = $topic_info[0]['id'];
    $poll_info = $GLOBALS['FORUM_DB']->query_select('f_polls', ['*'], ['id' => $poll_id], '', 1);

    if ((!has_privilege(get_member(), 'may_unblind_own_poll')) && ($is_private == 0) && ($poll_info[0]['po_is_private'] == 1)) {
        access_denied('PRIVILEGE', 'may_unblind_own_poll');
    }

    $GLOBALS['FORUM_DB']->query_update('f_polls', [
        'po_question' => $question,
        'po_is_private' => $is_private,
        'po_is_open' => $is_open,
        'po_minimum_selections' => $minimum_selections,
        'po_maximum_selections' => $maximum_selections,
        'po_requires_reply' => $requires_reply,
    ], ['id' => $poll_id], '', 1);

    $current_answers = $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['*'], ['pa_poll_id' => $poll_id]);
    $total_after = count($answers);
    foreach ($current_answers as $i => $current_answer) {
        if ($i < $total_after) {
            $new_answer = $answers[$i];
            $update = ['pa_answer' => is_array($new_answer) ? $new_answer[0] : $new_answer];
            if (is_array($new_answer)) {
                $update['pa_cache_num_votes'] = $new_answer[1];
            }
            $GLOBALS['FORUM_DB']->query_update('f_poll_answers', $update, ['id' => $current_answer['id']], '', 1);
        } else {
            $GLOBALS['FORUM_DB']->query_delete('f_poll_answers', ['id' => $current_answer['id']], '', 1);
            $GLOBALS['FORUM_DB']->query_delete('f_poll_votes', ['pv_answer_id' => $current_answer['id']], '', 1);
        }
    }
    $i++;
    for (; $i < $total_after; $i++) {
        $new_answer = $answers[$i];
        $GLOBALS['FORUM_DB']->query_insert('f_poll_answers', [
            'pa_poll_id' => $poll_id,
            'pa_answer' => is_array($new_answer) ? $new_answer[0] : $new_answer,
            'pa_cache_num_votes' => is_array($new_answer) ? $new_answer[1] : 0,
        ]);
    }

    $name = $GLOBALS['FORUM_DB']->query_select_value('f_polls', 'po_question', ['id' => $poll_id]);
    require_code('cns_general_action2');
    cns_mod_log_it('EDIT_TOPIC_POLL', strval($poll_id), $name, $reason);

    return $topic_id;
}

/**
 * Delete a forum poll.
 *
 * @param  AUTO_LINK $poll_id The ID of the poll we're deleting
 * @param  LONG_TEXT $reason The reason for deleting the poll
 * @param  boolean $check_perms Whether to check permissions
 * @return AUTO_LINK The ID of the topic the poll is on
 */
function cns_delete_poll($poll_id, $reason = '', $check_perms = true)
{
    require_code('cns_polls');

    $info = $GLOBALS['FORUM_DB']->query_select('f_polls', ['id'], ['id' => $poll_id], '', 1);
    if (!array_key_exists(0, $info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }

    $topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['t_poll_id' => $poll_id], '', 1);
    if (!array_key_exists(0, $topic_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
    }
    if ($check_perms) {
        if (!cns_may_delete_poll_by($topic_info[0]['t_forum_id'], $topic_info[0]['t_cache_first_member_id'])) {
            access_denied('I_ERROR');
        }
    }
    $topic_id = $topic_info[0]['id'];

    $GLOBALS['FORUM_DB']->query_update('f_topics', ['t_poll_id' => null], ['t_poll_id' => $poll_id], '', 1);

    $name = $GLOBALS['FORUM_DB']->query_select_value('f_polls', 'po_question', ['id' => $poll_id]);

    $GLOBALS['FORUM_DB']->query_delete('f_polls', ['id' => $poll_id], '', 1);
    $GLOBALS['FORUM_DB']->query_delete('f_poll_answers', ['pa_poll_id' => $poll_id]);
    $GLOBALS['FORUM_DB']->query_delete('f_poll_votes', ['pv_poll_id' => $poll_id]);

    require_code('cns_general_action2');
    cns_mod_log_it('DELETE_TOPIC_POLL', strval($topic_id) . ':' . strval($poll_id), $name, $reason);

    return $topic_id;
}

/**
 * Place a vote on a specified poll.
 *
 * @param  AUTO_LINK $poll_id The ID of the poll we're voting in
 * @param  array $votes A list of poll answers that are being voted for
 * @param  ?MEMBER $member_id The member that's voting (null: current member)
 * @param  ?array $topic_info The row of the topic the poll is for (null: get it from the DB)
 */
function cns_vote_in_poll($poll_id, $votes, $member_id = null, $topic_info = null)
{
    // Who's voting
    if ($member_id === null) {
        $member_id = get_member();
    }

    // Check they're allowed to vote
    if (!has_privilege($member_id, 'vote_in_polls')) {
        warn_exit(do_lang_tempcode('VOTE_DENIED'));
    }
    if ($topic_info === null) {
        $topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', ['id', 't_forum_id'], ['t_poll_id' => $poll_id], '', 1);
    }
    if (!array_key_exists(0, $topic_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }
    $topic_id = $topic_info[0]['id'];
    $forum_id = $topic_info[0]['t_forum_id'];
    if ((!has_category_access($member_id, 'forums', strval($forum_id))) && ($forum_id !== null)) {
        warn_exit(do_lang_tempcode('VOTE_CHEAT'));
    }
    if (is_guest($member_id)) {
        $voted_already_map = ['pv_poll_id' => $poll_id, 'pv_ip' => get_ip_address()];
    } else {
        $voted_already_map = ['pv_poll_id' => $poll_id, 'pv_member_id' => $member_id];
    }
    $voted_already = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_poll_votes', 'pv_member_id', $voted_already_map);
    if ($voted_already !== null) {
        warn_exit(do_lang_tempcode('NOVOTE'));
    }

    // Check their vote is valid
    $rows = $GLOBALS['FORUM_DB']->query_select('f_polls', ['po_is_open', 'po_minimum_selections', 'po_maximum_selections', 'po_requires_reply', 'po_question', 'po_is_private'], ['id' => $poll_id], '', 1);
    if (!array_key_exists(0, $rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }
    if ((count($votes) < $rows[0]['po_minimum_selections']) || (count($votes) > $rows[0]['po_maximum_selections']) || ($rows[0]['po_is_open'] == 0)) {
        warn_exit(do_lang_tempcode('VOTE_CHEAT'));
    }
    $answers = collapse_2d_complexity('id', 'pa_answer', $GLOBALS['FORUM_DB']->query_select('f_poll_answers', ['id', 'pa_answer'], ['pa_poll_id' => $poll_id]));
    if (($rows[0]['po_requires_reply'] == 1) && (!cns_has_replied_topic($topic_id, $member_id))) {
        warn_exit(do_lang_tempcode('POLL_REQUIRES_REPLY'));
    }

    // Insert votes
    $answer = '';
    foreach ($votes as $vote) {
        if (!array_key_exists($vote, $answers)) {
            warn_exit(do_lang_tempcode('VOTE_CHEAT'));
        }

        $GLOBALS['FORUM_DB']->query_insert('f_poll_votes', [
            'pv_poll_id' => $poll_id,
            'pv_member_id' => $member_id,
            'pv_answer_id' => $vote,
            'pv_ip' => get_ip_address(),
        ]);

        $GLOBALS['FORUM_DB']->query('UPDATE ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_poll_answers SET pa_cache_num_votes=(pa_cache_num_votes+1) WHERE id=' . strval($vote), 1);

        if ($answer != '') {
            $answer .= ', ';
        }
        $answer .= $answers[$vote];
    }
    $GLOBALS['FORUM_DB']->query('UPDATE ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_polls SET po_cache_total_votes=(po_cache_total_votes+1) WHERE id=' . strval($poll_id), 1);

    // Send notification if not private (if private then it would be too revealing to say when votes come in, as you could just look at who is online when you get the notification)
    if ($rows[0]['po_is_private'] == 0) {
        $poll_title = $rows[0]['po_question'];
        $topic_title = $topic_info[0]['t_cache_first_title'];
        $topic_url = $GLOBALS['FORUM_DRIVER']->topic_url($topic_id);
        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        $subject = do_lang('POLL_VOTE_MAIL_SUBJECT', $username, $answer, [$poll_title, $topic_title, $topic_url], get_lang($member_id));
        $mail = do_lang('POLL_VOTE_MAIL_BODY', $username, $answer, [$poll_title, $topic_title, $topic_url], get_lang($member_id));
        require_code('notifications');
        dispatch_notification('cns_topic', strval($topic_id), $subject, $mail, [$member_id]);
    }
}
