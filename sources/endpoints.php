<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core
 */

/**
 * Endpoint API entry script.
 */
function endpoint_script()
{
    prepare_backend_response(null, BACKEND_RESPONSE_NOINDEX | BACKEND_RESPONSE_CSP_SUPER_STRICT);

    cms_ini_set('ocproducts.xss_detect', '0');

    $hook_type = mixed();
    $hook = mixed();
    $type = mixed();
    $id = mixed();

    $hook_type = false;
    $hook = false;
    //$type = false; Is optional, so let it pass null as a default instead of false (=error)
    //$id = false; Is optional, so let it pass null as a default instead of false (=error)

    $response_type = 'json';

    require_code('failure');

    // Possibly RESTful?
    if (!@cms_empty_safe($_SERVER['REQUEST_URI'])) {
        // What response type is desired
        if (!empty($_SERVER['HTTP_ACCEPT'])) {
            if (strpos($_SERVER['HTTP_ACCEPT'], 'json') !== false) {
                $response_type = 'json';
            }
            // ... Currently we actually only support JSON anyway! No need for unnecessary complexity.
        }

        // Path-info is translated to $hook_type/$hook/$id
        $path_info = $_SERVER['REQUEST_URI'];
        $matches = [];
        if (preg_match('#^(.*)?/data/endpoint\.php(/\w+)(/\w+)?(/[^\?]+)?#', $path_info, $matches) != 0) {
            $hook_type = ltrim($matches[2], '/');
            $hook = isset($matches[3]) ? ltrim($matches[3], '/') : false;
            $id = isset($matches[4]) ? trim($matches[4], '/') : null;
        }

        // If empty POST data but not a HEAD or GET request, data was probably transmitted via a stream
        if (empty($_POST)) {
            if ($_SERVER['REQUEST_METHOD'] != 'HEAD' && $_SERVER['REQUEST_METHOD'] != 'GET') { // i.e. not a simple CSRF case
                $_POST['data'] = @file_get_contents('php://input');
            }
        }

        // Convert from REST's use of standard HTTP verbs to the software's standard $type names (also corresponds with CRUD)
        switch (cms_strtoupper_ascii($_SERVER['REQUEST_METHOD'])) {
            case 'POST': // REST POST = CRUD create = software add
                $type = 'add';
                break;

            case 'PUT': // REST PUT = CRUD update = software edit
                $type = 'edit';
                break;

            case 'DELETE': // REST DELETE = CRUD delete = software delete
                $type = 'delete';
                break;

            case 'GET': // REST GET = N/A = software view
            default:
                $type = 'view';
                break;
        }
    }

    // GET params take priority
    $hook_type = filter_naughty_harsh(get_param_string('hook_type', $hook_type), true);
    $hook = filter_naughty_harsh(get_param_string('hook', $hook), true);
    $type = get_param_string('type', $type);
    $id = get_param_string('id', $id);
    $response_type = get_param_string('response_type', $response_type);
    $rest_path = $hook_type . '/' . $hook . (($id !== null) ? ('/' . $id) : '') . ' [' . $type . ']';

    // Log initial hit
    $_log_file = get_custom_file_base() . '/data_custom/endpoints.log';
    if (is_file($_log_file)) {
        require_code('files');
        $log_message = loggable_date() . ' HIT to endpoint ' . $rest_path . ' by IP address ' . get_ip_address() . "\n";
        $log_file = cms_fopen_text_write($_log_file, true, 'ab');
        fwrite($log_file, $log_message);
        flock($log_file, LOCK_UN);
        fclose($log_file);
    }

    // Any errors from this point forth should be considered a REST error (rather than a general internal error) and communicated with the user / logged.
    set_throw_errors(true);
    try {
        // Get hook info
        $ob = get_hook_ob('endpoints', $hook_type, $hook, 'Hook_endpoint_' . $hook_type . '_');
        $info = $ob->info($type, $id);

        // Process authorization if the endpoint requires it
        if (isset($info['authorization']) && ($info['authorization'] !== false)) {
            $authorized = false;
            $member = null;

            // Try member authorization (member, staff, or super_admin types)
            if (!empty(array_intersect(['member', 'staff', 'super_admin'], $info['authorization']))) {
                if (!@cms_empty_safe($_SERVER['PHP_AUTH_USER']) && !@cms_empty_safe($_SERVER['PHP_AUTH_PW'])) {
                    $login_array = $GLOBALS['FORUM_DRIVER']->authorise_login($_SERVER['PHP_AUTH_USER'], null, $_SERVER['PHP_AUTH_PW']);
                    $member = $login_array['id'];
                    if ($member !== null) {
                        if (in_array('member', $info['authorization'])) {
                            $authorized = true;
                        } elseif (in_array('staff', $info['authorization'])) {
                            $authorized = $GLOBALS['FORUM_DRIVER']->is_staff($member);
                        } elseif (in_array('super_admin', $info['authorization'])) {
                            $authorized = $GLOBALS['FORUM_DRIVER']->is_super_admin($member);
                        }
                    }
                }
            }

            // Try maintenance password authorization (maintenance_password type)
            if ((!$authorized) && in_array('maintenance_password', $info['authorization']) && (preg_match('#^Basic #', $_SERVER['HTTP_AUTHORIZATION']) != 0)) {
                $password_given = base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6));
                if (strpos($password_given, STRING_MAGIC_NULL_BASE64) === 0) { // Strip STRING_MAGIC_NULL_BASE64 if it exists
                    $password_given = substr($password_given, (strlen(STRING_MAGIC_NULL_BASE64) + 1)); //+1 because of the colon after STRING_MAGIC_NULL_BASE64
                }
                require_code('crypt_maintenance');
                if (check_maintenance_password($password_given, true)) {
                    $authorized = true;
                    require_code('users_active_actions');
                    $member = get_first_admin_user();
                }
            }

            // Try session authorization (assumes keep_session was passed in the URL request)
            if ((!$authorized) && in_array('session', $info['authorization'])) {
                require_code('users');
                $member = get_member();
                if (is_guest($member)) { // Nope, do not allow guests
                    $member = null;
                } else {
                    $authorized = true;
                }
            }

            if (($authorized) && ($member !== null)) {
                require_code('users_inactive_occasionals');
                create_session($member);
            } else {
                // Log access denied
                $_log_file = get_custom_file_base() . '/data_custom/endpoints.log';
                if (is_file($_log_file)) {
                    require_code('files');
                    $log_message = loggable_date() . ' ACCESS DENIED to endpoint ' . $rest_path . ' by IP address ' . get_ip_address() . "\n";
                    $log_file = cms_fopen_text_write($_log_file, true, 'ab');
                    fwrite($log_file, $log_message);
                    flock($log_file, LOCK_UN);
                    fclose($log_file);
                }

                access_denied('ACCESS_DENIED', 'REST endpoint ' . $rest_path);
            }
        }

        // Run the endpoint
        $result = $ob->run($type, $id);

        // Process into output structure
        if ($id === '_LEGACY_') { // LEGACY
            echo $result;
            return;
        }
        $return_data = [
            'success' => isset($result['success']) ? $result['success'] : true,
            'error_details' => isset($result['error_details']) ? $result['error_details'] : null,
            'response_data' => array_diff_key($result, ['success' => true, 'error_details' => true]),
        ];
    } catch (Exception $e) {
        // Log error
        cms_error_log('Endpoints: ERROR ' . strip_html($e->getMessage()) . ' (' . $rest_path . ')');
        $_log_file = get_custom_file_base() . '/data_custom/endpoints.log';
        if (is_file($_log_file)) {
            require_code('files');
            $log_message = loggable_date() . ' INTERNAL ERROR on endpoint ' . $rest_path . ' by IP address ' . get_ip_address() . "\n";
            $log_message .= strip_html($e->getMessage());
            foreach ($e->getTrace() as $key => $trace) {
                $log_message .= "\n\t" . strval($key + 1) . ')';
                if (isset($trace['file'])) {
                    $log_message .= ' File: ' . $trace['file'];
                    if (isset($trace['line'])) {
                        $log_message .= ' (line ' . $trace['line'] . ')';
                    }
                }
                if (isset($trace['function'])) {
                    $log_message .= "\n\t\t" . 'Function: ' . $trace['function'];
                }
                if (isset($trace['args'])) {
                    $log_message .= "\n\t\t" . 'Args: ' . serialize($trace['args']);
                }
            }
            $log_message .= "\n";
            $log_file = cms_fopen_text_write($_log_file, true, 'ab');
            fwrite($log_file, $log_message);
            flock($log_file, LOCK_UN);
            fclose($log_file);
        }

        if ($id === '_LEGACY_') { // LEGACY
            echo strip_html($e->getMessage());
            return;
        }
        $return_data = [
            'success' => false,
            'error_details' => strip_html($e->getMessage()),
            'response_data' => [],
        ];
    }
    set_throw_errors(false);

    // Output
    switch ($response_type) {
        case 'json':
            @header('Content-Type: application/json; charset=' . get_charset());
            echo json_encode($return_data);
            break;

        default:
            fatal_exit(do_lang_tempcode('JSON_ONLY'));
            break;
    }
}
