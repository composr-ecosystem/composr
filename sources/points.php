<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    points
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__points()
{
    global $TOTAL_POINTS_CACHE;
    $TOTAL_POINTS_CACHE = [];
    global $POINTS_USED_CACHE;
    $POINTS_USED_CACHE = [];
    global $POINT_INFO_CACHE;
    $POINT_INFO_CACHE = [];
}

/**
 * Get the price of the specified item for sale (only for tableless items).
 *
 * @param  ID_TEXT $item The name of the item
 * @return integer The price of the item
 */
function get_product_price_points(string $item) : int
{
    return $GLOBALS['SITE_DB']->query_select_value('ecom_prods_prices', 'price_points', ['name' => $item]);
}

/**
 * Get the total points in the specified member's account; some of these will probably have been spent already.
 *
 * @param  MEMBER $member_id The member
 * @param  ?TIME $timestamp Time to get for (null: now)
 * @param  ?BOOL $cache Whether to retrieve from and store the results in the cache
 * @return integer The number of points the member has
 */
function total_points(int $member_id, ?int $timestamp = null, ?bool $cache = true) : int
{
    if (!has_privilege($member_id, 'use_points')) {
        return 0;
    }

    if ($cache) {
        global $TOTAL_POINTS_CACHE;

        if ($timestamp === null) {
            if (isset($TOTAL_POINTS_CACHE[$member_id])) {
                return $TOTAL_POINTS_CACHE[$member_id];
            }
        }
    }

    $point_info = point_info($member_id, $cache);
    $points = 0;

    // Run points hooks
    $hook_obs = find_all_hook_obs('systems', 'points', 'Hook_points_');
    foreach ($hook_obs as $hook_ob) {
        $points += $hook_ob->total_points($member_id, $timestamp, $point_info);
    }

    if ($timestamp === null && $cache) {
        $TOTAL_POINTS_CACHE[$member_id] = $points;
    }

    return $points;
}

/**
 * Get the total points the specified member has used (spent).
 *
 * @param  MEMBER $member_id The member
 * @return integer The number of points the member has spent
 */
function points_used(int $member_id) : int
{
    global $POINTS_USED_CACHE;
    if (isset($POINTS_USED_CACHE[$member_id])) {
        return $POINTS_USED_CACHE[$member_id];
    }

    $_points = point_info($member_id);
    $points = isset($_points['points_used']) ? $_points['points_used'] : 0;
    $POINTS_USED_CACHE[$member_id] = $points;

    return $points;
}

/**
 * Get the total points the specified member has.
 *
 * @param  MEMBER $member_id The member
 * @return integer The number of points the member has
 */
function available_points(int $member_id) : int
{
    if (!has_privilege($member_id, 'use_points')) {
        return 0;
    }

    return total_points($member_id) - points_used($member_id);
}

/**
 * Get all sorts of information about a specified member's point account.
 *
 * @param  MEMBER $member_id The member the point info is of
 * @param  ?BOOL $cache Whether to retrieve from and store the results in the cache
 * @return array The map containing the members point info (fields as enumerated in description)
 */
function point_info(int $member_id, ?bool $cache = true) : array
{
    require_code('lang');
    require_lang('points');

    if ($cache) {
        global $POINT_INFO_CACHE;
        if (isset($POINT_INFO_CACHE[$member_id])) {
            return $POINT_INFO_CACHE[$member_id];
        }
    }

    $values = $GLOBALS['FORUM_DRIVER']->get_custom_fields($member_id);
    if ($values === null) {
        $values = [];
    }

    if ($cache) {
        $POINT_INFO_CACHE[$member_id] = [];
        foreach ($values as $key => $val) {
            if (!isset($val->codename/*faster than is_object*/)) {
                $POINT_INFO_CACHE[$member_id][$key] = @intval($val);
            }
        }
        return $POINT_INFO_CACHE[$member_id];
    }

    $ret = [];
    foreach ($values as $key => $val) {
        if (!isset($val->codename/*faster than is_object*/)) {
            $ret[$member_id][$key] = @intval($val);
        }
    }
    return $ret[$member_id];
}

/**
 * Get the number of gift points used by the given member.
 * If gift points is disabled, this function provides a ceremonial figure rather than a mathematical figure.
 *
 * @param  MEMBER $member_id The member we want it for
 * @return integer The number of gift points used by the member
 */
function get_gift_points_used(int $member_id) : int
{
    $_used = point_info($member_id);

    if ((!isset($_used['gift_points_used'])) || (get_option('enable_gift_points') == '0')) { // Either DB error or gift points disabled
        $_actual_used = $GLOBALS['SITE_DB']->query_select_value_if_there('gifts', 'SUM(amount)', ['gift_from' => $member_id]);
        $actual_used = @intval($_actual_used); // Most reliable way
        return $actual_used;
    }

    return $_used['gift_points_used'];
}

/**
 * Get the number of gifts points to give that the given member has.
 *
 * @param  MEMBER $member_id The member we want it for
 * @return integer The number of gifts points to give that the given member has
 */
function get_gift_points_to_give(int $member_id) : int
{
    // If gift points is disabled, return available points instead.
    if (get_option('enable_gift_points') == '0') {
        return available_points($member_id);
    }

    $used = get_gift_points_used($member_id);
    if (get_forum_type() == 'cns') {
        require_lang('cns');
        require_code('cns_groups');

        $base = cns_get_member_best_group_property($member_id, 'gift_points_base');
        $per_day = cns_get_member_best_group_property($member_id, 'gift_points_per_day');
    } else {
        $base = 25;
        $per_day = 1;
    }
    $available = $base + $per_day * intval(floor((time() - $GLOBALS['FORUM_DRIVER']->get_member_join_timestamp($member_id)) / (60 * 60 * 24))) - $used;

    return $available;
}
