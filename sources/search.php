<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    search
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__search()
{
    if (!defined('MINIMUM_AUTOCOMPLETE_LENGTH')) {
        define('MINIMUM_AUTOCOMPLETE_LENGTH', intval(get_option('minimum_autocomplete_length')));
        define('MINIMUM_AUTOCOMPLETE_PAST_SEARCH', 0);
        define('MAXIMUM_AUTOCOMPLETE_SUGGESTIONS', intval(get_option('maximum_autocomplete_suggestions')));
    }
}

/**
 * Find autocomplete suggestions to complete a partially-typed search request.
 *
 * @param  string $request Search request
 * @param  ID_TEXT $search_type The search type it is for (blank: N/A)
 * @return array List of suggestions
 */
function find_search_suggestions($request, $search_type = '')
{
    $suggestions = [];

    if (strlen($request) < MINIMUM_AUTOCOMPLETE_LENGTH) {
        return $suggestions;
    }

    // NB: We only bind to string starts for our matches, as this is indexable in the DB. Mid-match is too slow due to non-indexed.

    // Based on past searches
    if (has_privilege(get_member(), 'autocomplete_past_search')) {
        require_code('database_search');

        $q = 'SELECT s_primary AS search FROM ' . get_table_prefix() . 'searches_logged WHERE ';
        if (($GLOBALS['SITE_DB']->has_full_text()) && ($GLOBALS['SITE_DB']->has_full_text_boolean()) && (!is_under_radar($request))) {
            $q .= preg_replace('#\?#', 's_primary', $GLOBALS['SITE_DB']->full_text_assemble($request));
        } else {
            $q .= 's_primary LIKE \'' . db_encode_like($request . '%') . '\'';
        }
        $q .= ' AND s_primary NOT LIKE \'' . db_encode_like('%<' . '%') . '\'';
        $q .= ' AND ' . db_string_not_equal_to('s_primary', '');
        $q .= ' GROUP BY s_primary HAVING COUNT(*)>' . strval(MINIMUM_AUTOCOMPLETE_PAST_SEARCH);
        $q .= ' ORDER BY COUNT(*) DESC';
        $rows = $GLOBALS['SITE_DB']->query($q, MAXIMUM_AUTOCOMPLETE_SUGGESTIONS);
        foreach ($rows as $search) {
            if (count($suggestions) < MAXIMUM_AUTOCOMPLETE_SUGGESTIONS) {
                $suggestions[$search['search']] = true;
            }
        }
    }

    if ($search_type != '') {
        require_code('content');
        $feedback_type = convert_composr_type_codes('search_hook', $search_type, 'feedback_type_code');

        if ($feedback_type != '') {
            $content_type = convert_composr_type_codes('search_hook', $search_type, 'content_type');

            // Based on keywords
            if ((has_privilege(get_member(), 'autocomplete_keyword_' . $content_type)) && (count($suggestions) < MAXIMUM_AUTOCOMPLETE_SUGGESTIONS)) {
                $q = 'SELECT ' . $GLOBALS['SITE_DB']->translate_field_ref('meta_keyword') . ' FROM ' . get_table_prefix() . 'seo_meta_keywords';
                $q .= ' WHERE ' . $GLOBALS['SITE_DB']->translate_field_ref('meta_keyword') . ' LIKE \'' . db_encode_like($request . '%') . '\'';
                $q .= ' AND ' . db_string_equal_to('meta_for_type', $feedback_type);
                $q .= ' GROUP BY ' . $GLOBALS['SITE_DB']->translate_field_ref('meta_keyword');
                $q .= ' ORDER BY COUNT(*) DESC';
                $rows = $GLOBALS['SITE_DB']->query($q, MAXIMUM_AUTOCOMPLETE_SUGGESTIONS, 0, false, false, ['meta_keyword' => 'SHORT_TRANS']);
                foreach ($rows as $search) {
                    if (count($suggestions) < MAXIMUM_AUTOCOMPLETE_SUGGESTIONS) {
                        $suggestions[$search['meta_keyword']] = true;
                    }
                }
            }

            // Based on content titles
            if ((has_privilege(get_member(), 'autocomplete_title_' . $content_type)) && (count($suggestions) < MAXIMUM_AUTOCOMPLETE_SUGGESTIONS)) {
                $cma_ob = get_content_object($content_type);
                $cma_info = $cma_ob->info();

                $title_field = $cma_info['title_field'];
                if (is_array($title_field)) {
                    $title_field = array_pop($title_field); // Anything ahead is just stuff we need to preload for the "CALL:" to work
                }

                if (strpos($title_field, 'CALL:') === false) {
                    if ($cma_info['title_field_dereference']) {
                        $q = 'SELECT ' . $GLOBALS['SITE_DB']->translate_field_ref($title_field) . ' AS search FROM ' . get_table_prefix() . $cma_info['table'];
                        if ($GLOBALS['SITE_DB']->has_full_text()) {
                            $q .= ' WHERE ' . preg_replace('#\?#', $GLOBALS['SITE_DB']->translate_field_ref($title_field), $GLOBALS['SITE_DB']->full_text_assemble($request));
                        } else {
                            $q .= ' WHERE ' . $GLOBALS['SITE_DB']->translate_field_ref($title_field) . ' LIKE \'' . db_encode_like($request . '%') . '\'';
                        }
                        $q .= ' GROUP BY ' . $GLOBALS['SITE_DB']->translate_field_ref($title_field);
                        $q .= ' ORDER BY COUNT(*) DESC';
                        $rows = $GLOBALS['SITE_DB']->query($q, MAXIMUM_AUTOCOMPLETE_SUGGESTIONS, 0, false, false, [$title_field => 'SHORT_TRANS']);
                    } else {
                        $q = 'SELECT ' . $title_field . ' AS search FROM ' . get_table_prefix() . $cma_info['table'];
                        if ($GLOBALS['SITE_DB']->has_full_text()) {
                            $q .= ' WHERE ' . preg_replace('#\?#', $title_field, $GLOBALS['SITE_DB']->full_text_assemble($request));
                        } else {
                            $q .= ' WHERE ' . $title_field . ' LIKE \'' . db_encode_like($request . '%') . '\'';
                        }
                        $q .= ' GROUP BY ' . $title_field;
                        $q .= ' ORDER BY COUNT(*) DESC';
                        $rows = $GLOBALS['SITE_DB']->query($q, MAXIMUM_AUTOCOMPLETE_SUGGESTIONS);
                    }
                    foreach ($rows as $search) {
                        if (count($suggestions) < MAXIMUM_AUTOCOMPLETE_SUGGESTIONS) {
                            $suggestions[$search['search']] = true;
                        }
                    }
                } else {
                    // Cannot do for catalogues. Would need to analyse the catalogue and focus only on a single one.
                    // Recommendation is to write custom content types if you need advanced features like autocomplete.
                }
            }
        }
    }

    return array_keys($suggestions);
}

/**
 * Generate a search block.
 *
 * @param  array $map Search block parameters
 * @return array Search block template parameters
 */
function do_search_block($map)
{
    require_lang('search');
    require_css('search');
    require_javascript('ajax_people_lists');

    $zone = array_key_exists('zone', $map) ? $map['zone'] : get_module_zone('search');

    $title = array_key_exists('title', $map) ? $map['title'] : null;
    if ($title === null) {
        $title = do_lang('SEARCH');
    }

    $sort = array_key_exists('sort', $map) ? $map['sort'] : 'relevance';
    $author = array_key_exists('author', $map) ? $map['author'] : '';
    $days = array_key_exists('days', $map) ? intval($map['days']) : -1;
    $direction = array_key_exists('direction', $map) ? $map['direction'] : 'DESC';
    $only_titles = (array_key_exists('only_titles', $map) ? $map['only_titles'] : '') == '1';
    $only_search_meta = (array_key_exists('only_search_meta', $map) ? $map['only_search_meta'] : '0') == '1';
    $_extra = array_key_exists('extra', $map) ? $map['extra'] : '';

    $map2 = ['page' => 'search', 'type' => 'results'];
    if (array_key_exists('search_under', $map)) {
        $map2['search_under'] = $map['search_under'];
    }
    $url = build_url($map2, $zone, [], false, true);

    $extra = [];
    foreach (explode(',', $_extra) as $_bits) {
        $bits = explode('=', $_bits, 2);
        if (count($bits) == 2) {
            $extra[$bits[0]] = $bits[1];
        }
    }

    $input_fields = ['content' => do_lang('SEARCH_TITLE')];
    if (array_key_exists('input_fields', $map)) {
        $input_fields = [];
        foreach (explode(',', $map['input_fields']) as $_bits) {
            $bits = explode('=', $_bits, 2);
            if (count($bits) == 2) {
                $input_fields[$bits[0]] = $bits[1];
            }
        }
    }

    $search_types = [];

    $limit_to = ['all_defaults'];
    $extrax = [];
    if ((array_key_exists('limit_to', $map)) && ($map['limit_to'] != 'all_defaults')) {
        $limit_to = [];
        $map['limit_to'] = str_replace('|', ',', $map['limit_to']); // "|" looks cleaner in templates
        foreach (explode(',', $map['limit_to']) as $key) {
            $limit_to[] = 'search_' . $key;
            if (strpos($map['limit_to'], ',') !== false) {
                $extrax['search_' . $key] = '1';
                $search_types[] = $key;
            }
        }
        $hooks = find_all_hooks('modules', 'search');
        foreach (array_keys($hooks) as $key) {
            if (!array_key_exists('search_' . $key, $extrax)) {
                $extrax['search_' . $key] = '0';
            }
        }
        if (strpos($map['limit_to'], ',') === false) {
            $extra['id'] = $map['limit_to'];
        }
    }

    $url_map = $map;
    unset($url_map['input_fields']);
    unset($url_map['extra']);
    unset($url_map['zone']);
    unset($url_map['title']);
    unset($url_map['limit_to']);
    unset($url_map['block']);
    $full_url = build_url(['page' => 'search', 'type' => 'browse'] + $url_map + $extra + $extrax, $zone);

    if ((!array_key_exists('content', $input_fields)) && (count($input_fields) != 1)) {
        $extra['content'] = '';
    }

    $options = [];
    if ((count($limit_to) == 1) && ($limit_to[0] != 'all_defaults')) { // If we are doing a specific hook
        $id = preg_replace('#^search_#', '', $limit_to[0]);

        require_code('database_search');
        require_code('hooks/modules/search/' . filter_naughty_harsh($id, true));
        $object = object_factory('Hook_search_' . filter_naughty_harsh($id, true));
        $info = $object->info();
        if (($info !== null) && ($info !== false)) {
            if (array_key_exists('special_on', $info)) {
                foreach ($info['special_on'] as $name => $display) {
                    $_name = 'option_tick_' . $id . '_' . $name;
                    $options[$_name] = ['SEARCH_FOR_SEARCH_DOMAIN_OPTION', ['CHECKED' => (get_param_string('content', null, INPUT_FILTER_GET_COMPLEX) === null) || (get_param_integer($_name, 0) == 1), 'DISPLAY' => $display]];
                }
            }
            if (array_key_exists('special_off', $info)) {
                foreach ($info['special_off'] as $name => $display) {
                    $_name = 'option_tick_' . $id . '_' . $name;
                    $options[$_name] = ['SEARCH_FOR_SEARCH_DOMAIN_OPTION', ['CHECKED' => (get_param_integer($_name, 0) == 1), 'DISPLAY' => $display]];
                }
            }
            if (method_exists($object, 'get_fields')) {
                $fields = $object->get_fields();
                foreach ($fields as $field) {
                    $_name = 'option_tick_' . $field['NAME'];
                    $options[$_name] = ['SEARCH_FOR_SEARCH_DOMAIN_OPTION' . $field['TYPE'], ['DISPLAY' => $field['DISPLAY'], 'SPECIAL' => $field['SPECIAL'], 'CHECKED' => array_key_exists('checked', $field) ? $field['CHECKED'] : false]];
                }
            }
        }
    }

    $_input_fields = [];
    foreach ($input_fields as $key => $val) {
        $input = new Tempcode();
        if (isset($options['option_' . $key])) { // If there is an input option for this particular $key
            $tpl_params = $options['option_' . $key][1];
            $tpl_params['NAME'] = 'option_' . $key;
            if ($val != '') {
                $tpl_params['DISPLAY'] = $val;
            }
            $input = do_template($options['option_' . $key][0], $tpl_params);
        }
        $_input_fields[$key] = [
            'LABEL' => $val,
            'INPUT' => $input,
        ];
    }

    return [
        'TITLE' => $title,
        'INPUT_FIELDS' => $_input_fields,
        'EXTRA' => $extra,
        'SORT' => $sort,
        'AUTHOR' => $author,
        'DAYS' => strval($days),
        'DIRECTION' => $direction,
        'ONLY_TITLES' => $only_titles ? '1' : '0',
        'ONLY_SEARCH_META' => $only_search_meta ? '1' : '0',
        'LIMIT_TO' => $limit_to,
        'URL' => $url,
        'FULL_SEARCH_URL' => $full_url,
        'SEARCH_TYPE' => (count($search_types) != 1) ? null : $search_types[0],
    ];
}
