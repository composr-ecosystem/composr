<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_rich_media
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__comcode_renderer()
{
    require_code('comcode_compiler');

    global $IMPORTED_CUSTOM_COMCODE, $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE;
    $IMPORTED_CUSTOM_COMCODE = false;
    $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE = [];

    global $STRUCTURE_LIST;
    $STRUCTURE_LIST = [];

    if (!defined('MAX_URLS_TO_READ')) {
        define('MAX_URLS_TO_READ', 5);
    }
}

/**
 * Get the text with all the emoticon codes replaced with the correct HTML. Emoticons are determined by your forum system.
 * This is not used in the normal Comcode chain - it's for non-Comcode things that require emoticons (actually in reality it is used in the Comcode chain if the optimiser sees that a full parse is not needed).
 *
 * @param  string $text The text to add emoticons to (assumption: that this is HTML)
 * @return string The HTML with the image-substitution of emoticons
 *
 * @ignore
 */
function _apply_emoticons(string $text) : string
{
    if (!isset($GLOBALS['FORUM_DRIVER'])) {
        return $text;
    }

    static $_emoticons = null;
    if ($_emoticons === null) {
        $_emoticons = $GLOBALS['FORUM_DRIVER']->find_emoticons();
        uksort($_emoticons, '_strlen_sort');
    }

    if ($GLOBALS['XSS_DETECT']) {
        $orig_escaped = ocp_is_escaped($text);
    }

    // Pre-check, optimisation
    $emoticons = [];
    foreach ($_emoticons as $code => $imgcode) {
        if (is_integer($code)) {
            $code = strval($code);
        }

        if (strpos($text, $code) !== false) {
            $emoticons[$code] = $imgcode;
        }
    }

    if (!empty($emoticons)) {
        $len = strlen($text);
        for ($i = 0; $i < $len; ++$i) { // Has to go through in byte order so double application cannot happen (i.e. emoticon contains [all or portion of] emoticon code somehow)
            $char = $text[$i];

            if ($char === '"') { // This can cause severe HTML corruption so is a disallowed character
                $i++;
                continue;
            }
            foreach ($emoticons as $code => $imgcode) {
                if ($char == $code[0]) {
                    $code_len = strlen($code);
                    if (substr($text, $i, $code_len) == $code) {
                        $eval = do_emoticon($imgcode);
                        $_eval = $eval->evaluate();
                        if ($GLOBALS['XSS_DETECT']) {
                            ocp_mark_as_escaped($_eval);
                        }
                        $before = substr($text, 0, $i);
                        $after = substr($text, $i + $code_len);
                        if (($before == '') && ($after == '')) {
                            $text = $_eval;
                        } else {
                            $text = $before . $_eval . $after;
                        }
                        $len = strlen($text);
                        $i += strlen($_eval) - 1;
                        break;
                    }
                }
            }
        }

        if (($GLOBALS['XSS_DETECT']) && ($orig_escaped)) {
            ocp_mark_as_escaped($text);
        }
    }

    return $text;
}

/**
 * Turn a triple of emoticon parameters into some actual Tempcode.
 *
 * @param  array $imgcode Parameter triple(template,src,code)
 * @return mixed Either a Tempcode result, or a string result, depending on $evaluate
 */
function do_emoticon(array $imgcode)
{
    $tpl = do_template($imgcode[0], ['SRC' => $imgcode[1], 'EMOTICON' => $imgcode[2]]);
    return $tpl;
}

/**
 * Check the specified URL for potentially malicious JavaScript/etc. If any is found, the hack-attack is logged if in an active post request by the submitting member otherwise filtered out.
 *
 * @param  MEMBER $source_member The member who submitted the URL
 * @param  URLPATH $url The URL to check
 * @param  boolean $as_admin Whether to check as arbitrary admin
 * @return URLPATH Filtered input URL
 */
function check_naughty_javascript_url(int $source_member, string $url, bool $as_admin) : string
{
    init_potential_js_naughty_array();

    global $POTENTIAL_JS_NAUGHTY_ARRAY;

    if ((!$as_admin) && (!has_privilege($source_member, 'use_very_dangerous_comcode'))) {
        $url2 = cms_strtolower_ascii($url);

        $matches = [];
        $bad = preg_match_all('#&\#(\d+)#', preg_replace('#\s#', '', $url), $matches) != 0;
        if ($bad) {
            for ($i = 0; $i < count($matches[0]); $i++) {
                $matched_entity = intval($matches[1][$i]);
                if (($matched_entity < 127) && (array_key_exists(chr($matched_entity), $POTENTIAL_JS_NAUGHTY_ARRAY))) {
                    if ((!empty($_POST)) && (get_member() == $source_member)) {
                        log_hack_attack_and_exit('ASCII_ENTITY_URL_HACK', $url);
                    }
                    return '';
                }
            }
        }
        $bad = preg_match_all('#&\#x([\dA-Za-z][\dA-Za-z]+)#', preg_replace('#\s#', '', $url), $matches) != 0;
        if ($bad) {
            for ($i = 0; $i < count($matches[0]); $i++) {
                $matched_entity = intval(base_convert($matches[1][$i], 16, 10));
                if (($matched_entity < 127) && (array_key_exists(chr($matched_entity), $POTENTIAL_JS_NAUGHTY_ARRAY))) {
                    if ((!empty($_POST)) && (get_member() == $source_member)) {
                        log_hack_attack_and_exit('ASCII_ENTITY_URL_HACK', $url);
                    }
                    return '';
                }
            }
        }

        $bad = (strpos($url2, 'script:') !== false) || (strpos($url2, 'data:') !== false);
        if ($bad) {
            if ((!empty($_POST)) && (get_member() == $source_member)) {
                log_hack_attack_and_exit('SCRIPT_URL_HACK', $url2);
            }
            return '';
        }
    }

    return $url;
}

/**
 * Load up Custom Comcode tags so that we may parse them.
 *
 * @param  object $db The database connector to use
 *
 * @ignore
 */
function _custom_comcode_import(object $db)
{
    init_valid_comcode_tags();

    global $IN_MINIKERNEL_VERSION;
    global $DANGEROUS_TAGS, $VALID_COMCODE_TAGS, $BLOCK_TAGS, $TEXTUAL_TAGS, $IMPORTED_CUSTOM_COMCODE, $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE;

    if ($IMPORTED_CUSTOM_COMCODE) {
        return;
    }

    if (!$IN_MINIKERNEL_VERSION) {
        // From forum driver
        if (method_exists($GLOBALS['FORUM_DRIVER'], 'get_custom_bbcode')) {
            $custom_bbcode = $GLOBALS['FORUM_DRIVER']->get_custom_bbcode();
            foreach ($custom_bbcode as $code) {
                $code['tag'] = cms_strtolower_ascii($code['tag']);

                $VALID_COMCODE_TAGS[$code['tag']] = true;
                if ($code['block_tag'] == 1) {
                    $BLOCK_TAGS[$code['tag']] = true;
                }
                if ($code['textual_tag'] == 1) {
                    $TEXTUAL_TAGS[$code['tag']] = true;
                }
                if ($code['dangerous_tag'] == 1) {
                    $DANGEROUS_TAGS[$code['tag']] = true;
                }
                $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE[$code['tag']] = ['replace' => $code['replace'], 'parameters' => $code['parameters']];
            }
        }

        // From Custom Comcode
        $tags = [];
        if (addon_installed('custom_comcode')) {
            if (is_on_multi_site_network()) {
                if ($db->is_forum_db()) {
                    $from_db = $GLOBALS['SITE_DB']->query_select('custom_comcode', ['tag_parameters', 'tag_replace', 'tag_tag', 'tag_dangerous_tag', 'tag_block_tag', 'tag_textual_tag'], ['tag_enabled' => 1]);
                } elseif (($GLOBALS['FORUM_DB'] !== null) && (get_forum_type() == 'cns')) {
                    $from_db = $GLOBALS['FORUM_DB']->query_select('custom_comcode', ['tag_parameters', 'tag_replace', 'tag_tag', 'tag_dangerous_tag', 'tag_block_tag', 'tag_textual_tag'], ['tag_enabled' => 1]);
                } else {
                    $from_db = null;
                }
                if (is_array($from_db)) {
                    $tags = array_merge($tags, $from_db);
                }
            }
            $tags = array_merge($tags, $db->query_select('custom_comcode', ['tag_parameters', 'tag_replace', 'tag_tag', 'tag_dangerous_tag', 'tag_block_tag', 'tag_textual_tag'], ['tag_enabled' => 1]));
        }
        foreach ($tags as $tag) {
            $tag['tag_tag'] = cms_strtolower_ascii($tag['tag_tag']);

            $VALID_COMCODE_TAGS[$tag['tag_tag']] = true;
            if ($tag['tag_block_tag'] == 1) {
                $BLOCK_TAGS[$tag['tag_tag']] = true;
            }
            if ($tag['tag_textual_tag'] == 1) {
                $TEXTUAL_TAGS[$tag['tag_tag']] = true;
            }
            if ($tag['tag_dangerous_tag'] == 1) {
                $DANGEROUS_TAGS[$tag['tag_tag']] = true;
            }
            $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE[$tag['tag_tag']] = ['replace' => $tag['tag_replace'], 'parameters' => $tag['tag_parameters']];
        }

        // From Comcode hooks
        $hooks = find_all_hook_obs('systems', 'comcode', 'Hook_comcode_');
        foreach ($hooks as $object) {
            $tag = $object->get_tag();

            if ($tag === null) {
                continue;
            }

            $tag['tag_tag'] = cms_strtolower_ascii($tag['tag_tag']);

            $VALID_COMCODE_TAGS[$tag['tag_tag']] = true;
            if ($tag['tag_block_tag'] == 1) {
                $BLOCK_TAGS[$tag['tag_tag']] = true;
            }
            if ($tag['tag_textual_tag'] == 1) {
                $TEXTUAL_TAGS[$tag['tag_tag']] = true;
            }
            if ($tag['tag_dangerous_tag'] == 1) {
                $DANGEROUS_TAGS[$tag['tag_tag']] = true;
            }
            $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE[$tag['tag_tag']] = ['replace' => $tag['tag_replace'], 'parameters' => $tag['tag_parameters']];
        }
    }

    $IMPORTED_CUSTOM_COMCODE = true;
}

/**
 * Convert the specified Comcode (unknown format) into a Tempcode tree. You shouldn't output the Tempcode tree to the browser, as it looks really horrible. If you are in a rare case where you need to output directly (not through templates), you should call the evaluate method on the Tempcode object, to convert it into a string.
 *
 * @param  LONG_TEXT $comcode The Comcode to convert
 * @param  ?MEMBER $source_member The member the evaluation is running as. This is a security issue, and you should only run as an administrator if you have considered where the Comcode came from carefully (null: current member)
 * @param  boolean $as_admin Whether to explicitly execute this with admin rights. There are a few rare situations where this should be done, for data you know didn't come from a member, but is being evaluated by one.
 * @param  ?string $pass_id A special identifier that can identify this resource in a sea of our resources of this class; usually this can be ignored, but may be used to provide a binding between JavaScript in evaluated Comcode, and the surrounding environment (null: no explicit binding)
 * @param  ?object $db The database connector to use (null: standard site connector)
 * @param  integer $flags A bitmask of COMCODE_* flags
 * @param  array $highlight_bits A list of words to highlight
 * @param  ?MEMBER $on_behalf_of_member The member we are running on behalf of, with respect to how attachments are handled; we may use this members attachments that are already within this post, and our new attachments will be handed to this member (null: member evaluating)
 * @return Tempcode The Tempcode generated
 *
 * @ignore
 */
function _comcode_to_tempcode(string $comcode, ?int $source_member = null, bool $as_admin = false, ?string $pass_id = null, ?object $db = null, int $flags = 0, array $highlight_bits = [], ?int $on_behalf_of_member = null) : object
{
    $structure_sweep = ($flags & COMCODE_STRUCTURE_SWEEP) != 0;

    if ((has_interesting_post_fields()) && (function_exists('disable_browser_reflective_xss_detection'))) {
        disable_browser_reflective_xss_detection();
    }

    if ($db === null) {
        $db = isset($GLOBALS['SITE_DB']) ? $GLOBALS['SITE_DB'] : null;
    }

    if ($source_member === null) {
        $source_member = (function_exists('get_member')) ? get_member() : 0;
    }

    if (!$structure_sweep) {
        $comcode = unixify_line_format($comcode); // Done already if this is a structure sweep
    }

    // Ensures the 'title' tags are incremental with their anchors
    global $STRUCTURE_LIST;
    $old_structure_list = $STRUCTURE_LIST;
    $STRUCTURE_LIST = [];

    $comcode = convert_guids_to_ids($comcode);

    require_code('comcode_compiler');

    $ret = __comcode_to_tempcode($comcode, $source_member, $as_admin, $pass_id, $db, $flags, $highlight_bits, $on_behalf_of_member);

    $STRUCTURE_LIST = $old_structure_list; // Restore, so that Comcode pages being loaded up in search results don't get skewed TOC's

    return $ret;
}

/**
 * Show a Comcode parser error.
 *
 * @param  boolean $preparse_mode Whether this is being pre-parsed, to pick up errors before row insertion
 * @param  array $_message Error message details to pass to do_lang, or if the first in the list is null, use directly
 * @param  integer $pos The position during parsing that the error occurred at
 * @param  LONG_TEXT $comcode The Comcode the parser error occurred in
 * @param  boolean $check_only Whether to only check the Comcode
 * @return Tempcode An error message to put in the output stream (shown in certain situations, where in other situations we bomb out)
 * @exits
 */
function comcode_parse_error_exit(bool $preparse_mode, array $_message, int $pos, string $comcode, bool $check_only = false) : object
{
    require_lang('comcode');
    if ($_message[0] === null) {
        $message = $_message[1];
    } else {
        if (strpos($_message[0], ':') === false) {
            $_message[0] = 'comcode:' . $_message[0];
        }
        $message = call_user_func_array('do_lang_tempcode', array_map('escape_html', $_message));
    }

    require_code('failure');
    if (throwing_errors()) {
        throw new CMSException($message);
    }

    $posted = false;
    foreach ($_POST + $_GET as $name => $val) {
        if (is_array($val)) {
            continue;
        }

        if (is_integer($name)) {
            $name = strval($name);
        }

        if ((post_param_string($name, '') == $comcode) || (substr($name, -7) == '_parsed')) {
            $posted = true;
        }
    }
    if (!$check_only) {
        if (((get_mass_import_mode()) || (!has_interesting_post_fields()) || (!$posted)) && (!$preparse_mode)) {
            $line = substr_count(substr($comcode, 0, $pos), "\n") + 1;
            $out = do_template('COMCODE_CRITICAL_PARSE_ERROR', ['_GUID' => '29da9dc5c6b9a527cb055b7da35bb6b8', 'LINE' => strval($line), 'MESSAGE' => $message, 'SOURCE' => $comcode]); // Won't parse, but we can't help it, so we will skip on
            return $out;
        }
    }

    $len = strlen($comcode);
    $lines = new Tempcode();
    $number = 1;
    $sofar = '';
    $line = null;
    for ($i = 0; $i < $len; $i++) {
        $char = $comcode[$i];
        if ($i == $pos) {
            $tmp_tpl = do_template('COMCODE_MISTAKE_ERROR');
            $sofar .= $tmp_tpl->evaluate();
            $line = $number;
        }
        if ($char == "\n") {
            $lines->attach(do_template('COMCODE_MISTAKE_LINE', ['_GUID' => '2022be3de10590d525f333b6ac0da37b', 'NUMBER' => integer_format($number), 'LINE' => make_string_tempcode($sofar)]));
            $sofar = '';
            $number++;
        }
        $sofar .= escape_html($char);
    }
    if ($i == $pos) {
        $tmp_tpl = do_template('COMCODE_MISTAKE_ERROR');
        $sofar .= $tmp_tpl->evaluate();
    }
    $lines->attach(do_template('COMCODE_MISTAKE_LINE', ['_GUID' => 'eebfe1342f3129d4e31fc9fc1963af2b', 'NUMBER' => integer_format($number), 'LINE' => make_string_tempcode($sofar)]));
    if ($line === null) {
        $line = $number;
    }

    // Now, using some kind of miracle, we need to find out what parameter name blew-up. Let's look through the parameters and see what
    // is equal to $comcode. I'd rather not do this in a hackerish way - but the architecture was not designed for this.
    $name = null;
    foreach ($_POST as $key => $val) {
        if (!is_string($val)) {
            continue;
        }
        if (post_param_string($key) == $comcode) { // We have to use post_param_string, because it might be unix-converted / word-filtered
            $name = $key;
            break;
        }
    }
    if ($name === null) {
        if ($check_only) { // Maybe it has been appended with something else, so search deeper (we suspect this as we have been explicitly asked to check the Comcode)
            foreach ($_POST as $key => $val) {
                if (!is_string($val)) {
                    continue;
                }
                $val = post_param_string($key);
                if ((strlen($val) > 10) && ((strpos($comcode, $val) === 0) || (strpos($comcode, $val) === strlen($comcode) - strlen($val)))) {
                    $name = $key;
                    break;
                }
            }
        }
        if ($name === null) {
            warn_exit(do_lang_tempcode('COMCODE_ERROR', $message, escape_html(strval($line))));
        }
    }

    if (!running_script('comcode_convert')) { // Don't want it running in background
        set_http_status_code(400);
    }

    set_helper_panel_text(new Tempcode());

    // Output our error / correction form
    cms_ob_end_clean(); // Emergency output, potentially, so kill off any active buffer
    $hidden = build_keep_post_fields([$name]);
    require_code('form_templates');
    $fields = form_input_huge_comcode(do_lang_tempcode('FIXED_COMCODE'), do_lang_tempcode('COMCODE_REPLACEMENT'), $name, $comcode, true, null, 20, null, null, false, true);
    $post_url = get_self_url(false, false, ['_corrected_comcode' => '1']);
    $form = do_template('FORM', [
        '_GUID' => '207bad1252add775029b34ba36e02856',
        'URL' => $post_url,
        'TEXT' => '',
        'HIDDEN' => $hidden,
        'FIELDS' => $fields,
        'SUBMIT_ICON' => 'buttons/proceed',
        'SUBMIT_NAME' => do_lang_tempcode('PROCEED'),
        'SKIP_REQUIRED' => true,
        'MODSECURITY_WORKAROUND' => true,
    ]);
    $output = do_template('COMCODE_MISTAKE_SCREEN', [
        '_GUID' => '0010230e6612b0775566d07ddf54305a',
        'EDITABLE' => !running_script('preview'),
        'FORM' => $form,
        'TITLE' => get_screen_title('ERROR_OCCURRED'),
        'LINE' => strval($line),
        'MESSAGE' => $message,
        'LINES' => $lines,
    ]);
    $echo = globalise($output, null, '', true);
    $echo->handle_symbol_preprocessing();
    $echo->evaluate_echo();
    exit();
}

/**
 * Make a given URL parameter an absolute URL; Fix any errors in it; Test it.
 *
 * @param  URLPATH $given_url URL to fixup
 * @param  MEMBER $source_member The member who is responsible for this Comcode
 * @param  boolean $as_admin Whether to check as arbitrary admin
 * @param  ID_TEXT $tag Comcode tag name
 * @return URLPATH Fixed URL
 */
function absoluteise_and_test_comcode_url(string $given_url, int $source_member, bool $as_admin, string $tag) : string
{
    $url = $given_url;

    require_code('urls2');
    $url = remove_url_mistakes($url);

    $url = check_naughty_javascript_url($source_member, $url, $as_admin);

    if (url_is_local($url)) {
        if (substr($url, 0, 1) == '/') {
            $url = substr($url, 1);
        }
        if ((file_exists(get_file_base() . '/' . $url)) && (!file_exists(get_custom_file_base() . '/' . $url))) {
            $url = get_base_url() . '/' . $url;
        } else {
            $url = get_custom_base_url() . '/' . $url;
        }
    }

    $temp_tpl = test_url($url, $tag, $given_url, $source_member);

    return $url;
}

/**
 * Test a URL as a broken link.
 *
 * @param  URLPATH $url_full URL to test
 * @param  string $tag_type Comcode tag type, to which the URL is associated
 * @param  string $given_url URL actually provided
 * @param  MEMBER $source_member The member who is responsible for this Comcode
 * @return Tempcode Error message, or blank if no error
 */
function test_url(string $url_full, string $tag_type, string $given_url, int $source_member) : object
{
    if (get_option('check_broken_urls') == '0') {
        return new Tempcode();
    }
    if (strpos($url_full, '{$') !== false) {
        return new Tempcode();
    }
    if (substr($url_full, 0, 1) == '#') {
        return new Tempcode();
    }

    // Exceptions that we don't want to check (typically things we use by default)
    if (in_array($url_full, [
        'https://www.google.com/webmasters/tools/home',
    ])) {
        return new Tempcode();
    }

    global $COMCODE_PARSE_URLS_CHECKED, $COMCODE_URLS;

    if (isset($COMCODE_URLS)) { // This is a request to collect the URLs rather than immediately check them
        $COMCODE_URLS[$url_full] = true;
    }

    $COMCODE_PARSE_URLS_CHECKED++;
    if ($COMCODE_PARSE_URLS_CHECKED >= MAX_URLS_TO_READ) {
        return new Tempcode();
    }

    $temp_tpl = new Tempcode();
    require_code('urls2');
    if (!check_url_exists($url_full)) {
        $temp_tpl = do_template('WARNING_BOX', [
            '_GUID' => '7bcea67226f89840394614d88020e3ac',
            'RESTRICT_VISIBILITY' => strval($source_member),
            //'INLINE' => true, Looks awful
            'WARNING' => do_lang_tempcode('MISSING_URL_COMCODE', escape_html($tag_type), escape_html($url_full)),
        ]);

        if (($GLOBALS['FORUM_DRIVER']->is_staff($source_member)) && (running_script('index'))) {
            $found_in_post = false; // We don't want to send e-mail if someone's just posting it right now, because they'll see the error on their screen, and we don't want staff spammed by member mistakes
            foreach ($_POST as $val) {
                if (is_array($_POST)) {
                    continue;
                }
                if ((is_string($val)) && (strpos($val, $given_url) !== false)) {
                    $found_in_post = true;
                }
            }
            if (!$found_in_post) {
                require_code('failure');
                relay_error_notification(
                    do_lang('MISSING_URL_COMCODE', $tag_type, $url_full),
                    false,
                    $GLOBALS['FORUM_DRIVER']->is_staff($source_member) ? 'error_occurred_missing_reference_important' : 'error_occurred_missing_reference'
                );
            }
        }
    }
    return $temp_tpl;
}

/**
 * Find if some Comcode tag sequence in the parsing stream is safelisted.
 *
 * @param  string $tag The tag being converted
 * @param  integer $marker The position this tag occurred at in the Comcode
 * @param  string $comcode The whole chunk of Comcode
 * @return boolean Whether it is
 *
 * @ignore
 */
function comcode_safelisted(string $tag, int $marker, string $comcode) : bool
{
    static $comcode_parsing_hooks = null;
    if ($comcode_parsing_hooks === null) {
        $comcode_parsing_hooks = find_all_hook_obs('systems', 'comcode_parsing', 'Hook_comcode_parsing_');
    }

    if (!empty($comcode_parsing_hooks)) {
        $start_pos = strrpos(substr($comcode, 0, $marker), '[' . $tag);
        $end_pos = $marker - $start_pos;
        $comcode_portion_at_and_after = substr($comcode, $start_pos);
        $comcode_portion = substr($comcode_portion_at_and_after, 0, $end_pos);

        foreach ($comcode_parsing_hooks as $comcode_parsing_ob) {
            if (method_exists($comcode_parsing_ob, 'comcode_safelisted')) {
                if ($comcode_parsing_ob->comcode_safelisted($comcode_portion)) {
                    return true;
                }
            }
        }
    }

    return false;
}

/**
 * Get Tempcode for a Comcode tag. This function should always return (errors should be placed in the Comcode output stream), for stability reasons (i.e. if you're submitting something, you can't have the whole submit process die half way through in an unstructured fashion).
 *
 * @param  string $tag The tag being converted
 * @param  array $attributes A map of the attributes (name=>val) for the tag. Val is usually a string, although in select places, the XML parser may pass Tempcode.
 * @param  mixed $embed Tempcode of the inside of the tag ([between]THIS[/between]); the XML parser may pass in special stuff here, which is interpreted only for select tags
 * @param  boolean $comcode_dangerous Whether we are allowed to proceed even if this tag is marked as 'dangerous'
 * @param  string $pass_id A special identifier to mark where the resultant Tempcode is going to end up (e.g. the ID of a post)
 * @param  integer $marker The position this tag occurred at in the Comcode
 * @param  MEMBER $source_member The member who is responsible for this Comcode
 * @param  boolean $as_admin Whether to check as arbitrary admin
 * @param  ?object $db The database connector to use (null: none; only do this for very simple Comcode)
 * @param  string $comcode The whole chunk of Comcode
 * @param  boolean $structure_sweep Whether this is only a structure sweep
 * @param  boolean $semiparse_mode Whether we are in semi-parse-mode (some tags might convert differently)
 * @param  array $highlight_bits A list of words to highlight
 * @param  ?MEMBER $on_behalf_of_member The member we are running on behalf of, with respect to how attachments are handled; we may use this members attachments that are already within this post, and our new attachments will be handed to this member (null: member evaluating)
 * @param  boolean $in_semihtml Whether what we have came from inside a semihtml tag
 * @param  boolean $is_all_semihtml Whether what we have came from semihtml mode
 * @param  boolean $html_errors Whether HTML structure errors have been spotted so far (limits how $semiparse_mode rendering works)
 * @return Tempcode The Tempcode for the Comcode
 *
 * @ignore
 */
function _do_tags_comcode(string $tag, array $attributes, $embed, bool $comcode_dangerous, string $pass_id, int $marker, int $source_member, bool $as_admin, ?object $db, string &$comcode, bool $structure_sweep, bool $semiparse_mode, array $highlight_bits = [], ?int $on_behalf_of_member = null, bool $in_semihtml = false, bool $is_all_semihtml = false, bool $html_errors = false) : object
{
    if (($structure_sweep) && ($tag != 'title')) {
        return new Tempcode();
    }

    $param_given = isset($attributes['param']);
    if ((!isset($attributes['param'])) && ($tag != 'block')) {
        $attributes['param'] = '';
    }

    // No permission
    global $DANGEROUS_TAGS, $STRUCTURE_LIST, $COMCODE_PARSE_TITLE;
    if ((isset($DANGEROUS_TAGS[$tag])) && (!$comcode_dangerous) && (!comcode_safelisted($tag, $marker, $comcode))) {
        $username = $GLOBALS['FORUM_DRIVER']->get_username($source_member);
        if ($semiparse_mode) { // Can't load through error for this, so just show it as a tag
            return make_string_tempcode(add_wysiwyg_comcode_markup($tag, $attributes, $embed, ($in_semihtml) || ($is_all_semihtml), WYSIWYG_COMCODE__STANDOUT_BLOCK, $html_errors));
        }
        return do_template('WARNING_BOX', [
            '_GUID' => 'faea04a9d6f1e409d99b8485d28b2225',
            'RESTRICT_VISIBILITY' => strval($source_member),
            'WARNING' => do_lang_tempcode('comcode:NO_ACCESS_FOR_TAG', escape_html($tag), escape_html($username)),
        ]);

        // These below are just for convenience.. we will remap to more formalised Comcode
    } elseif ($tag == 'codebox') {
        $attributes['scroll'] = '1';
        $tag = 'code';
    } elseif ($tag == 'left') {
        $attributes['param'] = 'left';
        $tag = 'align';
    } elseif ($tag == 'center') {
        $attributes['param'] = 'center';
        $tag = 'align';
    } elseif ($tag == 'right') {
        $attributes['param'] = 'right';
        $tag = 'align';
    }

    if ($semiparse_mode) { // We have got to this point because we want to provide a special 'button' editing representation for these tags
        $eval = $embed->evaluate();
        if (strpos($eval, '<') !== false) {
            $html_errors = false;

            $xml_tag_stack = [];
            $matches = [];
            $num_matches = preg_match_all('#<(/)?([^\s<>]*)(\s[^<>]*)?' . '>#', $eval, $matches);
            for ($i = 0; $i < $num_matches; $i++) {
                $xml_tag = $matches[2][$i];

                if (substr(trim($matches[3][$i]), -1) == '/') {
                    continue; // self-closing
                }

                if ($matches[1][$i] == '/') {
                    $expected_xml_tag = array_pop($xml_tag_stack);
                    if ($xml_tag !== $expected_xml_tag) {
                        $html_errors = true;
                    }
                } else {
                    array_push($xml_tag_stack, $xml_tag);
                }
            }
            if (!empty($xml_tag_stack)) {
                $html_errors = true;
            }
        }

        if (wysiwyg_comcode_markup_style($tag, $attributes, $embed, $html_errors) != WYSIWYG_COMCODE__HTML) {
            $_temp_tpl = add_wysiwyg_comcode_markup($tag, $attributes, $embed, ($in_semihtml) || ($is_all_semihtml), null, $html_errors);
            if ($_temp_tpl !== null) {
                $temp_tpl = make_string_tempcode($_temp_tpl);
                return $temp_tpl;
            }
        }
    }

    $temp_tpl = new Tempcode();
    switch ($tag) {
        case 'no_parse':
            $temp_tpl->attach($embed);
            break;

        // Undocumented, used to inject dependencies in things like logged e-mail Comcode or notification Comcode, without needing access-restricted Tempcode
        case 'require_css':
            $_embed = $embed->evaluate();
            if ($_embed != '') {
                $temp_tpl = new Tempcode();
                foreach (explode(',', $_embed) as $css) {
                    if ($css != '') {
                        $temp_tpl->attach(symbol_tempcode('REQUIRE_CSS', [$css]));
                    }
                }
            }
            break;
        case 'require_javascript':
            $_embed = $embed->evaluate();
            if ($_embed != '') {
                $temp_tpl = new Tempcode();
                foreach (explode(',', $_embed) as $javascript) {
                    if ($javascript != '') {
                        $temp_tpl->attach(symbol_tempcode('REQUIRE_JAVASCRIPT', [$javascript]));
                    }
                }
            }
            break;

        case 'currency':
            if (addon_installed('ecommerce')) {
                $bracket = (array_key_exists('bracket', $attributes) && ($attributes['bracket'] == '1'));
                if ($attributes['param'] == '') {
                    $attributes['param'] = get_option('currency');
                }
                require_code('currency');
                $from_currency = $attributes['param'];
                $to_currency = get_currency();
                $temp_tpl = symbol_tempcode('CURRENCY', [$embed->evaluate(), $from_currency, $to_currency, strval($bracket ? CURRENCY_DISPLAY_TEMPLATED : CURRENCY_DISPLAY_WITH_CURRENCY_SIMPLIFIED)]);
            }
            break;

        case 'overlay':
            $x = strval(array_key_exists('x', $attributes) ? @intval($attributes['x']) : 100);
            $y = strval(array_key_exists('y', $attributes) ? @intval($attributes['y']) : 100);
            $width = strval(array_key_exists('width', $attributes) ? @intval($attributes['width']) : 300);
            $height = strval(array_key_exists('height', $attributes) ? @intval($attributes['height']) : 300);
            $timein = strval(array_key_exists('timein', $attributes) ? @intval($attributes['timein']) : 0);
            $timeout = strval(array_key_exists('timeout', $attributes) ? @intval($attributes['timeout']) : -1);
            $temp_tpl = do_template('COMCODE_OVERLAY', [
                '_GUID' => 'dfd0f7a72cc2bf6b613b28f8165a0034',
                'EMBED' => $embed,
                'ID' => ($attributes['param'] != '') ? $attributes['param'] : ('rand' . uniqid('', true)),
                'X' => $x,
                'Y' => $y,
                'WIDTH' => $width,
                'HEIGHT' => $height,
                'TIMEIN' => $timein,
                'TIMEOUT' => $timeout,
            ]);
            break;

        case 'code':
            list($_embed, $title) = do_code_box($attributes['param'], $embed, (array_key_exists('numbers', $attributes)) && ($attributes['numbers'] == '1'), $in_semihtml, $is_all_semihtml);
            if ($_embed !== null) {
                $tpl = (array_key_exists('scroll', $attributes) && ($attributes['scroll'] == '1')) ? 'COMCODE_CODE_SCROLL' : 'COMCODE_CODE';
                if (($tpl == 'COMCODE_CODE_SCROLL') && (substr_count($_embed, "\n") < 10)) {
                    $style = 'height: auto';
                } else {
                    $style = '';
                }
                $temp_tpl = do_template($tpl, ['_GUID' => 'c5d46d0927272fcacbbabcfab0ef6b0c', 'STYLE' => $style, 'TYPE' => $attributes['param'], 'CONTENT' => $_embed, 'TITLE' => $title]);
            } else {
                $_embed = '';
            }
            if ($temp_tpl->is_empty()) {
                $_embed = $embed->evaluate();

                if ((!array_key_exists('scroll', $attributes)) && (cms_mb_strlen($_embed) > 1000)) {
                    $attributes['scroll'] = '1';
                }
                $tpl = (array_key_exists('scroll', $attributes) && ($attributes['scroll'] == '1')) ? 'COMCODE_CODE_SCROLL' : 'COMCODE_CODE';
                if (($tpl == 'COMCODE_CODE_SCROLL') && (substr_count($_embed, "\n") < 10)) {
                    $style = 'height: auto';
                } else {
                    $style = '';
                }
                $temp_tpl = do_template($tpl, ['CONTENT' => $_embed, 'TITLE' => $title, 'STYLE' => $style, 'TYPE' => $attributes['param']]);
            }
            break;

        case 'list':
            if (is_array($embed)) {
                $parts = $embed;
            } else {
                $_embed = trim($embed->evaluate());
                $_embed = str_replace('[/*]', '', $_embed);
                $parts = explode('[*]', $_embed);
            }

            if (!empty($embed->preprocessable_bits)) {
                if (!isset($temp_tpl->preprocessable_bits)) {
                    $temp_tpl->preprocessable_bits = [];
                }
                $temp_tpl->preprocessable_bits = array_merge($temp_tpl->preprocessable_bits, $embed->preprocessable_bits);
            }

            $type = $attributes['param'];

            if ($type != '') {
                if ($type == '1') {
                    $type = 'decimal';
                } elseif ($type == 'a') {
                    $type = 'lower-alpha';
                } elseif ($type == 'i') {
                    $type = 'lower-roman';
                } elseif ($type == 'x') {
                    $type = 'none';
                } elseif (!in_array($type, ['circle', 'disc', 'square', 'armenian', 'decimal', 'decimal-leading-zero', 'georgian', 'lower-alpha', 'lower-greek', 'lower-latin', 'lower-roman', 'upper-alpha', 'upper-latin', 'upper-roman'])) {
                    $type = 'disc';
                }
                $tag = in_array($type, ['circle', 'disc', 'square']) ? 'ul' : 'ol';
                $temp_tpl->attach('<' . $tag . ' style="list-style-type: ' . $type . '">');
                foreach ($parts as $i => $part) {
                    if (($i == 0) && (cms_trim($part, true) == '')) {
                        continue;
                    }
                    $temp_tpl->attach('<li>' . cms_trim($part, true) . '</li>');
                }
                $temp_tpl->attach('</' . $tag . '>');
            } else {
                $temp_tpl->attach('<ul>');
                foreach ($parts as $i => $part) {
                    if (($i == 0) && (cms_trim($part, true) == '')) {
                        continue;
                    }
                    $temp_tpl->attach('<li>' . cms_trim($part, true) . '</li>');
                }
                $temp_tpl->attach('</ul>');
            }
            break;

        case 'snapback':
            $post_id = @intval($embed->evaluate());

            $_date = null;
            if (get_forum_type() == 'cns') {
                $_date = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_time', ['id' => $post_id]);
            }

            $s_title = null;
            if ($attributes['param'] == '') {
                if (get_forum_type() == 'cns') {
                    $_s_title = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_title', ['id' => $post_id]);
                    if ($_s_title != '') {
                        $forum_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_cache_forum_id', ['id' => $post_id]);
                        if (($forum_id !== null) && (has_category_access($source_member, 'forums', strval($forum_id)))) {
                            $s_title = make_string_tempcode($_s_title);
                        }
                    }
                }

                if ($s_title === null) {
                    $s_title = do_lang_tempcode('cns:FORUM_POST_NUMBERED', escape_html(strval($post_id)));
                }
            } else {
                $s_title = make_string_tempcode($attributes['param']);
            }

            $forum = array_key_exists('forum', $attributes) ? $attributes['forum'] : '';

            $temp_tpl = do_template('COMCODE_SNAPBACK', [
                '_GUID' => 'af7b6920e58027256d536a8cdb8a164a',
                'URL' => $GLOBALS['FORUM_DRIVER']->post_url($post_id, $forum, true),
                'TITLE' => $s_title,
                'DATE' => ($_date === null) ? null : get_timezoned_date($_date, false),
                '_DATE' => ($_date === null) ? null : strval($_date),
                'POST_ID' => strval($post_id),
            ]);
            break;

        case 'post':
            $post_id = @intval($embed->evaluate());
            $s_title = ($attributes['param'] == '') ? do_lang_tempcode('cns:FORUM_POST_NUMBERED', escape_html(strval($post_id))) : escape_html($attributes['param']);
            $forum = array_key_exists('forum', $attributes) ? $attributes['forum'] : '';
            $temp_tpl->attach(hyperlink($GLOBALS['FORUM_DRIVER']->post_url($post_id, $forum, true), $s_title, false, false));
            break;

        case 'topic':
            $topic_id = @intval($embed->evaluate());
            $s_title = ($attributes['param'] == '') ? do_lang_tempcode('cns:FORUM_TOPIC_NUMBERED', escape_html(strval($topic_id))) : escape_html($attributes['param']);
            $forum = array_key_exists('forum', $attributes) ? $attributes['forum'] : '';
            $temp_tpl->attach(hyperlink($GLOBALS['FORUM_DRIVER']->topic_url($topic_id, $forum, true), $s_title, false, false));
            break;

        case 'staff_note':
            $temp_tpl = new Tempcode();
            return $temp_tpl;

        case 'section':
            $name = (array_key_exists('param', $attributes)) ? $attributes['param'] : ('section' . strval(mt_rand(0, mt_getrandmax())));
            $default = (array_key_exists('default', $attributes)) ? $attributes['default'] : '0';
            $temp_tpl = do_template('COMCODE_SECTION', ['_GUID' => 'a902962ccdc80046c999d6fed907d105', 'PASS_ID' => 'x' . $pass_id, 'DEFAULT' => $default == '1', 'NAME' => $name, 'CONTENT' => $embed]);
            break;

        case 'section_controller':
            $sections = explode(',', $embed->evaluate());
            $temp_tpl = do_template('COMCODE_SECTION_CONTROLLER', ['_GUID' => '133bf24892e9e3ec2a01146d6ec418fe', 'SECTIONS' => $sections, 'PASS_ID' => 'x' . $pass_id]);
            break;

        case 'big_tab':
            $name = (array_key_exists('param', $attributes)) ? $attributes['param'] : ('big_tab' . strval(mt_rand(0, mt_getrandmax())));
            $default = (array_key_exists('default', $attributes)) ? $attributes['default'] : '0';
            $temp_tpl = do_template('COMCODE_BIG_TABS_TAB', ['_GUID' => 'f6219b1acd6999acae770da20b95fb99', 'PASS_ID' => 'x' . $pass_id, 'DEFAULT' => $default == '1', 'NAME' => $name, 'CONTENT' => $embed]);
            break;

        case 'big_tab_controller':
            $tabs = explode(',', $embed->evaluate());
            if (!array_key_exists('switch_time', $attributes)) {
                $attributes['switch_time'] = '6000';
            }
            $temp_tpl = do_template('COMCODE_BIG_TABS_CONTROLLER', [
                '_GUID' => 'b6cc1835b688f086e34837e3c345ba0a',
                'SWITCH_TIME' => ($attributes['switch_time'] == '' || @intval($attributes['switch_time']) <= 0) ? null : strval(@intval($attributes['switch_time'])),
                'TABS' => $tabs,
                'PASS_ID' => 'x' . $pass_id,
            ]);
            break;

        case 'tab':
            $default = (array_key_exists('default', $attributes)) ? $attributes['default'] : '0';
            $is_page_link = preg_match('#^\s*[' . URL_CONTENT_REGEXP . ']*(:[^\s\n]+)+\s*$#', $embed->evaluate()) != 0;
            $temp_tpl = do_template('COMCODE_TAB_BODY', [
                '_GUID' => '2d63ed21f8d8b939b8db21b20c147b41',
                'DEFAULT' => $default == '1',
                'TITLE' => trim($attributes['param']),
                'CONTENT' => $is_page_link ? null : $embed,
                'PAGE_LINK' => $is_page_link ? $embed : null,
            ]);
            break;

        case 'tabs':
            $heads = new Tempcode();
            $tabs = explode(',', $attributes['param']);
            foreach ($tabs as $i => $tab) {
                $heads->attach(do_template('COMCODE_TAB_HEAD', ['_GUID' => '735f70b1c8dcc78a0876136cfb4822a0', 'TITLE' => trim($tab), 'FIRST' => $i == 0, 'LAST' => !array_key_exists($i + 1, $tabs)]));
            }

            $temp_tpl = do_template('COMCODE_TAB_CONTROLLER', ['_GUID' => '0e56cf180973c57f3633aae54dd9cddc', 'HEADS' => $heads, 'CONTENT' => $embed]);
            break;

        case 'carousel':
            if ($attributes['param'] == '') {
                $attributes['param'] = '40';
            }
            $temp_tpl = do_template('COMCODE_CAROUSEL', ['_GUID' => '2d0a327a6cb60e3168a5022eb0cfba9a', 'CONTENT' => $embed, 'SCROLL_AMOUNT' => $attributes['param']]);
            break;

        case 'menu':
            $name = (array_key_exists('param', $attributes)) ? $attributes['param'] : ('mnu' . strval(mt_rand(0, mt_getrandmax())));
            $type = (array_key_exists('type', $attributes)) ? $attributes['type'] : 'tree';
            require_code('menus');
            require_code('menus_comcode');
            $temp_tpl = build_comcode_menu($embed->evaluate(), $name, $source_member, $type);
            break;

        case 'if_in_group':
            $groups = '';
            $_groups = explode(',', $attributes['param']);
            $all_groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list();
            foreach ($_groups as $group) {
                $not = (substr($group, 0, 1) == '!');
                if ($not) {
                    $group = substr($group, 1);
                }
                $find = array_search($group, $all_groups);
                if ($find === false) {
                    if (($group == 'primary') || ($group == 'secondary') || ($group == '') || (substr($group, 0, 1) == '@')) {
                        if ($groups != '') {
                            $groups .= ',';
                        }
                        if ($not) {
                            $groups .= '!';
                        }
                        $groups .= $group;
                    }
                } else {
                    if ($groups != '') {
                        $groups .= ',';
                    }
                    if ($not) {
                        $groups .= '!';
                    }
                    $groups .= strval($find);
                }
            }
            $temp_tpl = do_template('COMCODE_IF_IN_GROUP', [
                '_GUID' => '761a7cc07f7b4b68508d68ce19b87d2c',
                'TYPE' => array_key_exists('type', $attributes) ? $attributes['type'] : '',
                'CONTENT' => $embed,
                'GROUPS' => $groups,
            ]);
            break;

        case 'acronym':
        case 'abbr':
            $temp_tpl = do_template('COMCODE_ABBR', ['_GUID' => 'acbc4f991dsf03f81b61919b74ac24c9', 'CONTENT' => $embed, 'TITLE' => $attributes['param']]);
            break;

        case 'address':
            $temp_tpl = do_template('COMCODE_ADDRESS', ['_GUID' => 'acbcsdf9910703f81b61919b74ac24c9', 'CONTENT' => $embed]);
            break;

        case 'dfn':
            $temp_tpl = do_template('COMCODE_DFN', ['_GUID' => 'acbc4f9910703f81b61sf19b74ac24c9', 'CONTENT' => $embed]);
            break;

        case 'pulse':
            $min_color = array_key_exists('min', $attributes) ? $attributes['min'] : '0000FF';
            $max_color = array_key_exists('max', $attributes) ? $attributes['max'] : 'FF0044';
            if (substr($min_color, 0, 1) == '#') {
                $min_color = substr($min_color, 1);
            }
            if (substr($max_color, 0, 1) == '#') {
                $max_color = substr($max_color, 1);
            }
            $speed = ($attributes['param'] == '') ? 100 : @intval($attributes['param']);

            $temp_tpl = do_template('COMCODE_PULSE', ['_GUID' => 'adsd4f9910sfd03f81b61919b74ac24c', 'CONTENT' => $embed, 'MIN_COLOR' => $min_color, 'MAX_COLOR' => $max_color, 'SPEED' => strval($speed)]);
            break;

        case 'del':
            $cite = array_key_exists('cite', $attributes) ? $attributes['cite'] : null;
            if ($cite !== null) {
                $temp_tpl = test_url($cite, 'del', $cite, $source_member);
            }
            $datetime = array_key_exists('datetime', $attributes) ? $attributes['datetime'] : null;
            $temp_tpl->attach(do_template('COMCODE_DEL', ['_GUID' => 'acsd4f9910sfd03f81b61919b74ac24c', 'CONTENT' => $embed, 'CITE' => $cite, 'DATETIME' => $datetime]));
            break;

        case 'ins':
            $cite = array_key_exists('cite', $attributes) ? $attributes['cite'] : null;
            if ($cite !== null) {
                $temp_tpl = test_url($cite, 'ins', $cite, $source_member);
                if (!$temp_tpl->is_empty()) {
                    break;
                }
            }
            $datetime = array_key_exists('datetime', $attributes) ? $attributes['datetime'] : null;
            $temp_tpl->attach(do_template('COMCODE_INS', ['_GUID' => 'asss4f9910703f81b61919bsfc24c91', 'CONTENT' => $embed, 'CITE' => $cite, 'DATETIME' => $datetime]));
            break;

        case 'cite':
            $temp_tpl = do_template('COMCODE_CITE', ['_GUID' => 'acbcsf910703f81b61919b74ac24c91', 'CONTENT' => $embed]);
            break;

        case 'b':
            if ($semiparse_mode) {
                $temp_tpl = make_string_tempcode('<b>' . $embed->evaluate() . '</b>');
                break;
            }
            $temp_tpl = do_template('COMCODE_BOLD', ['_GUID' => 'acbc4fds910703f81b619sf74ac24c91', 'CONTENT' => $embed]);
            break;

        case 'align':
            $align = array_key_exists('param', $attributes) ? $attributes['param'] : 'left';
            $temp_tpl = do_template('COMCODE_ALIGN', ['_GUID' => '950b4d9db12cac6bf536860bedd96a36', 'ALIGN' => $align, 'CONTENT' => $embed]);
            break;

        case 'indent':
            $indent = array_key_exists('param', $attributes) ? $attributes['param'] : '10';
            if (!is_numeric($indent)) {
                $indent = '10';
            }
            $temp_tpl = do_template('COMCODE_INDENT', ['_GUID' => 'd8e69fa17eebd5312e3ad5788e3a1343', 'INDENT' => $indent, 'CONTENT' => $embed]);
            break;

        case 'surround':
            if (($semiparse_mode) && ($embed->evaluate() == '')) { // This is probably some signal like a break, so show it in Comcode form
                $temp_tpl = make_string_tempcode(add_wysiwyg_comcode_markup($tag, $attributes, $embed, ($in_semihtml) || ($is_all_semihtml), WYSIWYG_COMCODE__STANDOUT_BLOCK, $html_errors));
                break;
            }

            $class = (array_key_exists('param', $attributes) && ($attributes['param'] != '')) ? $attributes['param'] : 'clearfix';
            $style = array_key_exists('style', $attributes) ? $attributes['style'] : null;
            if (!$comcode_dangerous) {
                $style = null;
            }
            $temp_tpl = do_template('COMCODE_SURROUND', ['_GUID' => 'e8e69fa17eebd5312e3ad5788e3a1343', 'STYLE' => $style, 'CLASS' => $class, 'CONTENT' => $embed]);
            break;

        case 'i':
            if ($semiparse_mode) {
                $temp_tpl = make_string_tempcode('<i>' . $embed->evaluate() . '</i>');
                break;
            }
            $temp_tpl = do_template('COMCODE_ITALICS', ['_GUID' => '4321a1fe3825418e57a29410183c0c60', 'CONTENT' => $embed]);
            break;

        case 'u':
            if ($semiparse_mode) {
                $temp_tpl = make_string_tempcode('<u>' . $embed->evaluate() . '</u>');
                break;
            }
            $temp_tpl = do_template('COMCODE_UNDERLINE', ['_GUID' => '69cc8e73b17f9e6a35eb1af2bd1dc6ab', 'CONTENT' => $embed]);
            break;

        case 's':
            if ($semiparse_mode) {
                $temp_tpl = make_string_tempcode('<strike>' . $embed->evaluate() . '</strike>');
                break;
            }

            $temp_tpl = do_template('COMCODE_STRIKE', ['_GUID' => 'ed242591cefd365497cc0c63abbb11a9', 'CONTENT' => $embed]);
            break;

        case 'tooltip':
            $param = comcode_to_tempcode($attributes['param'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);

            $temp_tpl = do_template('COMCODE_TOOLTIP', [
                '_GUID' => 'c9f4793dc0c1a92cd7d08ae1b87c2308',
                'URL' => array_key_exists('url', $attributes) ? $attributes['url'] : '',
                'TOOLTIP' => $param,
                'CONTENT' => $embed,
            ]);
            break;

        case 'sup':
            $temp_tpl = do_template('COMCODE_SUP', ['_GUID' => '74d2ecfe193dacb6d922bc288828196a', 'CONTENT' => $embed]);
            break;

        case 'sub':
            $temp_tpl = do_template('COMCODE_SUB', ['_GUID' => '515e310e00a6d7c30f7dca0a5956ebcf', 'CONTENT' => $embed]);
            break;

        case 'include':
            $codename = $embed->evaluate();
            $zone = $attributes['param'];
            if ($zone == '_SEARCH') {
                $zone = get_comcode_zone($codename);
            }
            if ($zone == '_SELF') {
                $zone = get_zone_name();
            }

            if ($zone == '(template)') { // Special undocumented feature used by tutorial(s)
                $temp_tpl = comcode_to_tempcode(cms_file_get_contents_safe(get_file_base() . '/data/modules/cms_comcode_pages/' . fallback_lang() . '/' . filter_naughty($codename) . '.txt', FILE_READ_LOCK | FILE_READ_BOM));
                break;
            }

            push_output_state();
            $page_missing = false;
            $temp = request_page($codename, false, $zone, null, true, false, $page_missing);
            restore_output_state();
            if ($page_missing) {
                $temp_tpl = do_template('WARNING_BOX', [
                    '_GUID' => '1d617fd24b632640dddeeadd8432d7a9',
                    'WARNING' => do_lang_tempcode('MISSING_RESOURCE_COMCODE', 'include', hyperlink(build_url(['page' => 'cms_comcode_pages', 'type' => '_edit', 'page_link' => $zone . ':' . $codename], get_module_zone('cms_comcode_pages')), $zone . ':' . $codename, false, true)),
                ]);
                if (($GLOBALS['FORUM_DRIVER']->is_staff($source_member)) && (running_script('index'))) {
                    require_code('failure');
                    relay_error_notification(do_lang('MISSING_RESOURCE_COMCODE', 'include', $zone . ':' . $codename), false, $GLOBALS['FORUM_DRIVER']->is_staff($source_member) ? 'error_occurred_missing_reference_important' : 'error_occurred_missing_reference');
                }
            } else {
                $temp_tpl = symbol_tempcode('LOAD_PAGE', [$codename, $zone]);
            }
            break;

        case 'random':
            unset($attributes['param']);

            $max = @intval($embed->evaluate());
            foreach ($attributes as $num => $val) {
                $_temp = comcode_to_tempcode($val, $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
                $attributes[$num] = $_temp->evaluate();
                if (intval($num) > $max) {
                    $max = intval($num);
                }
            }

            $_parts = [];
            ksort($attributes);
            foreach ($attributes as $num => $val) {
                $_parts[] = ['NUM' => strval($num), 'VAL' => $val];
            }

            $temp_tpl = do_template('COMCODE_RANDOM', ['_GUID' => '9b77aaf593b12c763fb0c367fab415b6', 'FULL' => $embed, 'MAX' => strval($max), 'PARTS' => $_parts]);
            break;

        case 'jumping':
            unset($attributes['param']);

            $_parts = [];
            foreach ($attributes as $val) {
                $_temp = comcode_to_tempcode($val, $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
                $_parts[] = ['PART' => $_temp->evaluate()];
            }

            $time = @intval($embed->evaluate());
            if ($time == 0) {
                $time = 4000;
            }

            $temp_tpl = do_template('COMCODE_JUMPING', ['_GUID' => '85e9f83ed134868436a7db7692f56047', 'FULL' => implode(', ', $attributes), 'TIME' => strval($time), 'PARTS' => $_parts]);
            break;

        case 'shocker':
            $_parts = [];
            foreach ($attributes as $key => $val) {
                if (substr($key, 0, 5) == 'left_') {
                    $left = $val;
                    $right = array_key_exists('right_' . substr($key, 5), $attributes) ? $attributes['right_' . substr($key, 5)] : '';

                    $left = comcode_to_tempcode($left, $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
                    $right = comcode_to_tempcode($right, $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);

                    $_parts[] = ['LEFT' => $left, 'RIGHT' => $right];
                }
            }

            $min_color = array_key_exists('min', $attributes) ? $attributes['min'] : '0000FF';
            $max_color = array_key_exists('max', $attributes) ? $attributes['max'] : 'FF0044';
            if (substr($min_color, 0, 1) == '#') {
                $min_color = substr($min_color, 1);
            }
            if (substr($max_color, 0, 1) == '#') {
                $max_color = substr($max_color, 1);
            }

            $time = @intval($embed->evaluate());
            if ($time == 0) {
                $time = 4000;
            }

            $temp_tpl = do_template('COMCODE_SHOCKER', [
                '_GUID' => 'd648de0a5e3b5f84d82d781f4964e04a',
                'MIN_COLOR' => $min_color,
                'MAX_COLOR' => $max_color,
                'FULL' => implode(', ', $attributes),
                'TIME' => strval($time),
                'PARTS' => $_parts,
            ]);
            break;

        case 'ticker':
            $width = $attributes['param'];
            if (!is_numeric($width)) {
                $width = '300';
            }
            $fspeed = array_key_exists('speed', $attributes) ? float_to_raw_string(floatval($attributes['speed'])) : '1';
            $temp_tpl = do_template('COMCODE_TICKER', ['_GUID' => 'e48893cda61995261577f0556443c537', 'SPEED' => $fspeed, 'WIDTH' => $width, 'TEXT' => $embed]);

            break;

        case 'highlight':
            $temp_tpl = do_template('COMCODE_HIGHLIGHT', ['_GUID' => '695d041b6605f06ec2aeee1e82f87185', 'CONTENT' => $embed]);
            break;

        case 'size':
            $size = array_key_exists('param', $attributes) ? ($attributes['param']) : '1';

            if (is_numeric($size)) {
                $size = 'font-size: ' . $size . 'em;';
            } elseif (substr($size, 0, 1) == '+') {
                $size = 'font-size: ' . substr($size, 1) . 'em';
            } elseif (substr($size, -1) == '%') {
                $size = 'font-size: ' . float_to_raw_string(floatval(substr($size, 0, strlen($size) - 1)) / 100.0) . 'em';
            } elseif (substr($size, -2) == 'of') {
                $new_size = '1em';
                switch ($size) {
                    case '1of':
                        $new_size = '8pt';
                        break;
                    case '2of':
                        $new_size = '10pt';
                        break;
                    case '3of':
                        $new_size = '12pt';
                        break;
                    case '4of':
                        $new_size = '14pt';
                        break;
                    case '5of':
                        $new_size = '18pt';
                        break;
                    case '6of':
                        $new_size = '24pt';
                        break;
                    case '7of':
                        $new_size = '36pt';
                        break;
                }
                $size = 'font-size: ' . $new_size;
            } else {
                $size = 'font-size: ' . $size;
            }

            $size_len = strlen($size);
            filter_html($as_admin, $source_member, 0, $size_len, $size, false, false);
            $temp_tpl = do_template('COMCODE_FONT', ['_GUID' => 'fb23fdcb45aabdfeca9f37ed8098948e', 'CONTENT' => $embed, 'SIZE' => $size, 'COLOR' => '', 'FACE' => '']);
            break;

        case 'color':
            $color = array_key_exists('param', $attributes) ? ('color: ' . $attributes['param'] . ';') : '';
            $temp_tpl = do_template('COMCODE_FONT', ['_GUID' => 'bd146414c9239ba2076f4b683df437d7', 'CONTENT' => $embed, 'SIZE' => '', 'COLOR' => $color, 'FACE' => '']);
            $color_len = strlen($color);
            filter_html($as_admin, $source_member, 0, $color_len, $color, false, false);
            break;

        case 'tt':
            $temp_tpl = do_template('COMCODE_TELETYPE', ['_GUID' => '422a4785fc9bb0d1a26a09a59184f107', 'CONTENT' => $embed]);
            break;

        case 'samp':
            $temp_tpl = do_template('COMCODE_SAMP', ['_GUID' => '386eddbd74f45a8596f2f21680df99f8', 'CONTENT' => $embed]);
            break;

        case 'q':
            $temp_tpl = do_template('COMCODE_Q', ['_GUID' => 'ab5dc7cddf0ec01be969605cde87356c', 'CONTENT' => $embed]);
            break;

        case 'var':
            $temp_tpl = do_template('COMCODE_VAR', ['_GUID' => '75097f9f0de04bfd92507fdc07547237', 'CONTENT' => $embed]);
            break;

        case 'font':
            $face = $attributes['param'];
            if (($face == '') && (array_key_exists('face', $attributes))) {
                $face = $attributes['face'];
            }
            $color = array_key_exists('color', $attributes) ? $attributes['color'] : '';
            $size = array_key_exists('size', $attributes) ? $attributes['size'] : '';
            if ($face == '/') {
                $face = '';
            }
            if ($color == '/') {
                $color = '';
            }
            if ($size == '/') {
                $size = '';
            }

            if ($color != '') {
                $color = 'color: ' . $color . ';';
            }
            if ($size != '') {
                if (is_numeric($size)) {
                    $size = 'font-size: ' . $size . 'em;';
                } elseif (substr($size, 0, 1) == '+') {
                    $size = 'font-size: ' . substr($size, 1) . 'em';
                } elseif (substr($size, -1) == '%') {
                    $size = 'font-size: ' . float_to_raw_string(floatval(substr($size, 0, strlen($size) - 1)) / 100.0) . 'em';
                } elseif (substr($size, -2) == 'of') {
                    $new_size = '1em';
                    switch ($size) {
                        case '1of':
                            $new_size = '8pt';
                            break;
                        case '2of':
                            $new_size = '10pt';
                            break;
                        case '3of':
                            $new_size = '12pt';
                            break;
                        case '4of':
                            $new_size = '14pt';
                            break;
                        case '5of':
                            $new_size = '18pt';
                            break;
                        case '6of':
                            $new_size = '24pt';
                            break;
                        case '7of':
                            $new_size = '36pt';
                            break;
                    }
                    $size = 'font-size: ' . $new_size;
                } else {
                    $size = 'font-size: ' . $size;
                }
            }
            if ($face != '') {
                $face = 'font-family: ' . str_replace('\'', '', $face) . ';';
            }
            $size_len = strlen($size);
            filter_html($as_admin, $source_member, 0, $size_len, $size, false, false);
            $color_len = strlen($color);
            filter_html($as_admin, $source_member, 0, $color_len, $color, false, false);
            $face_len = strlen($face);
            filter_html($as_admin, $source_member, 0, $face_len, $face, false, false);
            $temp_tpl = do_template('COMCODE_FONT', ['_GUID' => 'f5fcafe737b8fdf466a6a51773e09c9b', 'CONTENT' => $embed, 'SIZE' => $size, 'COLOR' => $color, 'FACE' => $face]);
            break;

        case 'box':
            $width = array_key_exists('width', $attributes) ? comcode_to_tempcode($attributes['width'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member) : make_string_tempcode('auto');
            $type = array_key_exists('type', $attributes) ? $attributes['type'] : '';
            $class = array_key_exists('class', $attributes) ? $attributes['class'] : '';
            $options = array_key_exists('options', $attributes) ? $attributes['options'] : '';
            $meta = ($comcode_dangerous && isset($attributes['meta'])) ? $attributes['meta'] : ''; // Insecure, unneeded here
            $links = ($comcode_dangerous && isset($attributes['links'])) ? $attributes['links'] : ''; // Insecure, unneeded here
            $converted_title = comcode_to_tempcode($attributes['param'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);

            $temp_tpl = directive_tempcode('BOX', $embed, [$converted_title, make_string_tempcode($type), $width, make_string_tempcode($options), make_string_tempcode($meta), make_string_tempcode($links), new Tempcode(), make_string_tempcode($class)]);
            if (isset($attributes['float'])) {
                $temp_tpl = do_template('FLOATER', ['_GUID' => '54e8fc9ec1e16cfc5c8824e22f1e8745', 'FLOAT' => $attributes['float'], 'CONTENT' => $temp_tpl]);
            }
            break;

        case 'concept':
            if ((!array_key_exists('param', $attributes)) || ($attributes['param'] == '')) {
                $key = $embed->evaluate();
                $temp_tpl = symbol_tempcode('DISPLAY_CONCEPT', [$key]);
            } else {
                $temp_tpl = do_template('COMCODE_CONCEPT_INLINE', ['_GUID' => '381a59de4d6f8967446c12bf4641a9ce', 'TEXT' => $embed, 'FULL' => $attributes['param']]);
            }
            break;

        case 'concepts':
            $title = $embed->evaluate();

            $concepts = [];
            foreach ($attributes as $_key => $_value) {
                if (substr($_key, -4) == '_key') {
                    $key = $_value;
                    $cid = substr($_key, 0, strlen($_key) - 4);
                    $to_parse = array_key_exists($cid . '_value', $attributes) ? $attributes[$cid . '_value'] : '';
                    $value = comcode_to_tempcode($to_parse, $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
                    $concepts[] = ['A' => 'concept__' . preg_replace('#[^\w]#', '_', $key), 'KEY' => $key, 'VALUE' => $value];
                }
            }

            $temp_tpl = do_template('COMCODE_CONCEPTS', ['_GUID' => '4c7a1d70753dc1d209b9951aa10f361a', 'TITLE' => $title, 'CONCEPTS' => $concepts]);
            break;

        case 'hide':
            if (array_key_exists('param', $attributes)) {
                $text = comcode_to_tempcode($attributes['param'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
            } else {
                $text = do_lang_tempcode('EXPAND');
            }
            $temp_tpl = do_template('COMCODE_HIDE', ['_GUID' => 'a591a0d1e6bb3dde0f22cebb9c7ab93e', 'TEXT' => $text, 'CONTENT' => $embed]);
            break;

        case 'quote':
            $cite = array_key_exists('cite', $attributes) ? $attributes['cite'] : null;
            if ($cite !== null) {
                $temp_tpl = test_url($cite, 'quote', $cite, $source_member);
            }

            if (($attributes['param'] == '') && (isset($attributes['author']))) {
                $attributes['param'] = $attributes['author']; // Compatibility with SMF
            }

            if (is_numeric($attributes['param'])) {
                $attributes['param'] = $GLOBALS['FORUM_DRIVER']->get_username(@intval($attributes['param']), true);
            }

            if ($attributes['param'] != '') {
                $attributes['param'] = protect_from_escaping(comcode_to_tempcode($attributes['param'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member));
                $temp_tpl->attach(do_template('COMCODE_QUOTE_BY', ['_GUID' => '18f55a548892ad08b0b50b3b586b5b95', 'CITE' => $cite, 'CONTENT' => $embed, 'BY' => $attributes['param'], 'SAIDLESS' => array_key_exists('saidless', $attributes) ? $attributes['saidless'] : '0']));
            } else {
                $temp_tpl->attach(do_template('COMCODE_QUOTE', ['_GUID' => 'fa275de59433c17da19b22814c17fdc5', 'CITE' => $cite, 'CONTENT' => $embed]));
            }
            break;

        case 'html':
            $temp_tpl = $embed; // Plain HTML. But it's been filtered already
            break;

        case 'semihtml':
            $temp_tpl = $embed; // Hybrid HTML. But it's been filtered already
            break;

        case 'block':
            $attributes['block'] = trim($embed->evaluate());
            if (preg_match('#^[\w\-]*$#', $attributes['block']) == 0) {
                $temp_tpl = do_template('WARNING_BOX', ['_GUID' => 'b5638d953c400b7f194b62bc34f89181', 'WARNING' => do_lang_tempcode('MISSING_BLOCK_FILE', escape_html($attributes['block']))]);
                break; // Avoids a suspected hack attempt by just filtering early
            }
            $_attributes = [];
            foreach ($attributes as $key => $val) {
                if (is_integer($key)) {
                    $key = strval($key);
                }

                $_attributes[] = $key . '=' . $val;
            }
            $temp_tpl = symbol_tempcode('BLOCK', $_attributes);

            break;

        case 'title':
            $level = ($attributes['param'] != '') ? @intval($attributes['param']) : 1;
            if ($level == 0) {
                $level = 1; // Stop crazy Comcode causing stack errors with the toc
            }

            require_code('xhtml');
            $uniq_id = fix_id(xhtml_substr($embed->evaluate(), 0, 20, false, false, 0.2), true);
            $conflicts = [];
            foreach ($STRUCTURE_LIST as $struct) {
                if (preg_match('#^' . preg_quote($uniq_id, '#') . '(_(\d+))?$#', $struct[2]) != 0) {
                    $conflicts[$struct[2]] = true;
                }
            }
            if (!empty($conflicts)) {
                $suffix_num = 1;
                while (isset($conflicts[$suffix_num])) {
                    $suffix_num++;
                }
                $uniq_id .= '_' . strval($suffix_num);
            }
            $STRUCTURE_LIST[] = [$level, $embed, $uniq_id];
            if ($level == 1) {
                $template = 'SCREEN_TITLE';
            } else {
                $template = 'COMCODE_SUBTITLE';
            }
            if ($level == 1) {
                if ($COMCODE_PARSE_TITLE === null) {
                    $COMCODE_PARSE_TITLE = trim($embed->evaluate());
                }
            }

            $base = array_key_exists('base', $attributes) ? @intval($attributes['base']) : 1;
            if ((array_key_exists('number', $attributes)) && ($level >= $base)) {
                $list_types = ($attributes['number'] == '') ? [] : explode(',', $attributes['number']);
                $list_types += ['decimal', 'lower-alpha', 'lower-roman', 'upper-alpha', 'upper-roman', 'disc'];
                $numerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx'];
                $symbol_lookup = ['decimal' => range(1, 100), 'lower-alpha' => range('a', 'z'), 'lower-roman' => $numerals, 'upper-alpha' => range('A', 'Z'), 'upper-roman' => str_replace('i', 'I', str_replace('v', 'V', str_replace('x', 'X', $numerals)))];

                $level_text = '';
                $list_pos = count($STRUCTURE_LIST) - 2;
                for ($j = $level; $j >= $base; $j--) {
                    $num_before = 0;

                    for ($i = $list_pos; $i >= 0; $i--) {
                        $list_pos--;

                        if ($STRUCTURE_LIST[$i][0] == $j - 1) {
                            break;
                        }
                        if ($STRUCTURE_LIST[$i][0] == $j) {
                            $num_before++;
                        }
                    }

                    $level_number = @strval($symbol_lookup[$list_types[$j - $base]][$num_before]);
                    $level_text = $level_number . (($level_text != '') ? '.' : '') . $level_text;
                }

                $old_embed = $embed;
                $embed = make_string_tempcode($level_text . ' &ndash; ');
                $embed->attach($old_embed);
            }

            $tpl_map = [
                'ID' => ((substr($pass_id, 0, 5) == 'panel') || (strpos($pass_id, '_') === 0)) ? null : $uniq_id,
                'TITLE' => $embed,
                'HELP_URL' => '',
                'HELP_TERM' => '',
                'LEVEL' => strval($level),
                'CLASS' => empty($attributes['class']) ? null : $attributes['class'],
            ];
            if (array_key_exists('sub', $attributes)) {
                $tpl_map['SUB'] = protect_from_escaping(comcode_to_tempcode($attributes['sub'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member));
            }
            $temp_tpl = do_template($template, $tpl_map);
            break;

        case 'contents':
            // Do structure sweep
            $urls_for = [];

            // Backup then reset so we can track new titles
            $old_structure_list = $STRUCTURE_LIST;
            $STRUCTURE_LIST = [];

            if ((array_key_exists('files', $attributes)) && ($comcode_dangerous)) {
                $s_zone = array_key_exists('zone', $attributes) ? $attributes['zone'] : get_zone_name();

                $pages = find_all_pages($s_zone, 'comcode_custom/' . get_site_default_lang(), 'txt') + find_all_pages($s_zone, 'comcode/' . get_site_default_lang(), 'txt');
                $prefix = $attributes['files'];
                $_structure_list = [];
                foreach ($pages as $pg_name => $pg_type) {
                    if (substr($pg_name, 0, strlen($prefix)) == $prefix) {
                        $i = count($STRUCTURE_LIST);
                        $c = cms_file_get_contents_safe(zone_black_magic_filterer(get_file_base() . '/' . $s_zone . '/pages/' . $pg_type . '/' . $pg_name . '.txt'), FILE_READ_LOCK | FILE_READ_BOM);
                        __comcode_to_tempcode($c, $source_member, $as_admin, null, $db, COMCODE_STRUCTURE_SWEEP, [], $on_behalf_of_member);
                        $page_url = build_url(['page' => $pg_name], $s_zone);
                        foreach ($STRUCTURE_LIST as $struct) {
                            $urls_for[] = $page_url;
                            $_structure_list[] = $struct;
                        }
                        $STRUCTURE_LIST = []; // Reset again, so the title increments for individual pages start from 0 again
                    }
                }
                $STRUCTURE_LIST = $_structure_list;

                $base = array_key_exists('base', $attributes) ? @intval($attributes['base']) : 1;
            } else {
                require_code('comcode_compiler');

                __comcode_to_tempcode($comcode, $source_member, $as_admin, null, $db, COMCODE_STRUCTURE_SWEEP, [], $on_behalf_of_member);

                $base = array_key_exists('base', $attributes) ? @intval($attributes['base']) : 1;
            }

            $_embed = $embed->evaluate();
            if (preg_match('#^test\d+$#', $_embed) != 0) { // Little bit of inbuilt test code, for a particularly dangerously wrong tree
                if ($_embed == 'test1') {
                    $test_data = [
                        2,
                        3,
                        2,
                        3,
                        4,
                        4,
                        4,
                        2,
                        3,
                        2,
                        1,
                        1,
                    ];
                } elseif ($_embed == 'test2') {
                    $test_data = [
                        1,
                        2,
                        3,
                        1,
                        2,
                        3,
                    ];
                } elseif ($_embed == 'test3') {
                    $test_data = [
                        1,
                        4,
                        6,
                        1,
                        4,
                        6,
                    ];
                } else {
                    $test_data = [
                        6,
                        4,
                        1,
                        6,
                        4,
                        1,
                    ];
                }
                $STRUCTURE_LIST = [];
                foreach ($test_data as $t) {
                    $STRUCTURE_LIST[] = [$t, make_string_tempcode(strval($t)), uniqid('', true)];
                }
                $list_types = [];
            } else {
                $list_types = ($embed->evaluate() == '') ? [] : explode(',', $_embed);
            }
            $list_types = array_merge($list_types, ['decimal', 'lower-alpha', 'lower-roman', 'upper-alpha', 'upper-roman', 'disc']);

            $levels_allowed = array_key_exists('levels', $attributes) ? @intval($attributes['levels']) : null;

            // Convert the list structure into a tree structure
            $past_level_stack = [];
            $subtree_stack = [['', '', '', []]]; // Children will be gathered into a 4th entry in the tuple by the end of the stack unravelling process -- our result
            $actual_past_stack_levels = 0;
            foreach ($STRUCTURE_LIST as $i => $struct) { // Really complex stack of trees algorithm
                $level = $struct[0];
                $title = $struct[1];

                $_title = $title->evaluate();
                $uniq_id = $struct[2];
                $url = array_key_exists($i, $urls_for) ? $urls_for[$i] : '';

                if (($levels_allowed !== null) && ($level > $levels_allowed)) {
                    continue;
                }

                // Going back up the tree, destroying levels that must have now closed off
                while (($actual_past_stack_levels > 0) && ($level <= $past_level_stack[$actual_past_stack_levels - 1])) {
                    array_pop($past_level_stack); // Value useless now, as the $actual_past_stack_levels is the true indicator and the $past_level_stack is just used as a navigation reference point for stack control
                    $subtree = array_pop($subtree_stack);
                    $actual_past_stack_levels--;

                    // Alter the last of the next level on stack so it is actually taking the closed off level as children
                    $subtree_stack[count($subtree_stack) - 1][3][] = $subtree;
                }

                // Going down the tree
                array_push($past_level_stack, $level);
                array_push($subtree_stack, [$uniq_id, $_title, $url, []]);
                $actual_past_stack_levels++;
            }

            // Close off all levels still open
            while ($actual_past_stack_levels > 0) { // Pretty much the same as the while loop above
                array_pop($past_level_stack); // Value useless now, as the $actual_past_stack_levels is the true indicator and the $past_level_stack is just used as a navigation reference point for stack control
                $subtree = array_pop($subtree_stack);
                $actual_past_stack_levels--;

                // Alter the last of the next level on stack so it is actually taking the closed off level as children
                $subtree_stack[count($subtree_stack) - 1][3][] = $subtree;
            }

            // Now we have the structure to display
            $levels_t = _do_contents_level($subtree_stack[0][3], $list_types, $base);

            $temp_tpl = do_template('COMCODE_CONTENTS', ['_GUID' => 'ca2f5320fa930e2257a2e74e4f98e5a0', 'LEVELS' => $levels_t]);

            $STRUCTURE_LIST = $old_structure_list; // Restore, so subsequent 'title' tags have correct numbering

            break;

        case 'url':
            // Make them both HTML strings
            $url = $embed->evaluate();
            $switch_over = ((!looks_like_url($url)) && (looks_like_url($attributes['param'], true)));
            if ((strpos($attributes['param'], '[') !== false) || (strpos($attributes['param'], '{') !== false)) { // Extra Comcode parsing wanted?
                $param_temp = comcode_to_tempcode(escape_html($attributes['param']), $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
                global $ADVERTISING_BANNERS_CACHE;
                $temp_ab = $ADVERTISING_BANNERS_CACHE;
                $ADVERTISING_BANNERS_CACHE = [];
                $caption = $param_temp;
                $ADVERTISING_BANNERS_CACHE = $temp_ab;
            } else {
                $caption = make_string_tempcode(escape_html($attributes['param'])); // Consistency of escaping
            }

            // Do we need to switch around?
            if ($switch_over) {
                $url = $attributes['param'];
                if ((strpos($url, '[') !== false) || (strpos($url, '{') !== false)) { // Extra Comcode parsing wanted?
                    $url = static_evaluate_tempcode(comcode_to_tempcode($url, $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member));
                }
                $caption = $embed;
            }

            // If we weren't given a caption, use the URL, but crop if necessary
            if ($caption->evaluate() == '') {
                $_caption = $url;

                // Shorten the URL if it is too long
                $max_link_length = 50;
                if (strlen($_caption) > $max_link_length) {
                    $_caption = escape_html(substr(@html_entity_decode($_caption, ENT_QUOTES), 0, intval($max_link_length / 2 - 3))) . '&hellip;' . escape_html(substr(@html_entity_decode($_caption, ENT_QUOTES), intval(-$max_link_length / 2)));
                }

                $caption = make_string_tempcode($_caption);
            }

            // Tidy up the URL now
            $url = @html_entity_decode($url, ENT_QUOTES);
            $url = fixup_protocolless_urls($url);

            // Integrity and security
            $url = check_naughty_javascript_url($source_member, $url, $as_admin);

            // More URL tidying
            $local = (url_is_local($url)) || (cms_parse_url_safe($url, PHP_URL_HOST) == get_base_url_hostname());
            $given_url = $url;
            if (($url != '') && ($url[0] != '#')) {
                if (substr($url, 0, 1) == '/') {
                    $url = substr($url, 1);
                }
                $url_full = url_is_local($url) ? (get_base_url() . '/' . $url) : $url;
                if ($GLOBALS['XSS_DETECT']) {
                    ocp_mark_as_escaped($url_full);
                }
            } else {
                $url_full = $url;
            }
            $striped_base_url = str_replace('www.', '', str_replace('https://', '', str_replace('http://', '', get_base_url())));
            if (($striped_base_url != '') && (substr($url, 0, 1) != '%') && (strpos($url_full, $striped_base_url) === false)) { // We don't want to hammer our own server when we have Comcode pages full of links to our own site (much less risk of hammering other people's servers, as we won't tend to have loads of links to them). Would also create bugs in e-mails sent out - e.g. auto-running approve_ip.php links hence voiding the intent of the feature.
                $temp_tpl = test_url($url_full, 'url', $given_url, $source_member);
            }

            // Render
            if (@cms_empty_safe($attributes['target'])) {
                $attributes['target'] = $local ? '_top' : '_blank';
            }
            if ($attributes['target'] == 'blank') {
                $attributes['target'] = '_blank'; // Fix common mistake
            }
            if (array_key_exists('rel', $attributes)) {
                $rel = array_flip(preg_split('#\s+#', trim(cms_strtolower_ascii($attributes['rel']))));
            } else {
                $rel = [];
            }
            if ((!$as_admin) && (!has_privilege($source_member, 'search_engine_links')) && (@cms_parse_url_safe($url_full, PHP_URL_HOST) != cms_parse_url_safe(get_base_url(), PHP_URL_HOST))) {
                $rel['nofollow'] = true;
            }
            if (!$comcode_dangerous) {
                unset($rel['opener']);
                $rel['noopener'] = true;
            }
            if ($attributes['target'] == '_blank') {
                $rel['external'] = true;
                $title = trim(strip_tags(is_object($caption) ? static_evaluate_tempcode($caption) : $caption) . ' ' . do_lang('LINK_NEW_WINDOW'));
            } else {
                $title = '';
            }
            $temp_tpl->attach(do_template('COMCODE_URL', ['_GUID' => 'd1657530e6d3d57e6a4791fb3bfa0dd7', 'TITLE' => $title, 'REL' => implode(' ', array_keys($rel)), 'TARGET' => $attributes['target'], 'URL' => $url_full, 'CAPTION' => $caption]));
            break;

        case 'email':
            $_embed = $embed->evaluate();
            require_code('type_sanitisation');
            require_code('crypt');

            // If we need to switch
            if ((!is_valid_email_address($_embed)) && (is_valid_email_address($attributes['param']))) {
                $temp = $embed; // Is Tempcode
                $_embed = $attributes['param'];
                $attributes['param'] = $temp;
            } else {
                $attributes['param'] = comcode_to_tempcode($attributes['param'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member); // Becomes Tempcode
            }
            if ($attributes['param']->is_empty()) {
                $attributes['param'] = obfuscate_email_address($_embed);
            }
            $subject = array_key_exists('subject', $attributes) ? $attributes['subject'] : '';
            $body = array_key_exists('body', $attributes) ? $attributes['body'] : '';
            $title = '';
            if (array_key_exists('title', $attributes)) {
                $title = $attributes['title'];
            }
            $temp_tpl = do_template('HYPERLINK_EMAIL', [
                '_GUID' => '5f6ade8fe07701b6858575153d78f4e9',
                'TITLE' => $title,
                'ADDRESS' => obfuscate_email_address($_embed),
                'SUBJECT' => $subject,
                'BODY' => $body,
                'CAPTION' => protect_from_escaping($attributes['param']),
            ]);
            break;

        case 'reference':
            if ((array_key_exists('type', $attributes)) && ($attributes['type'] == 'url')) {
                $_embed = $embed->evaluate();
                $_embed = check_naughty_javascript_url($source_member, $_embed, $as_admin);
                if (!array_key_exists('title', $attributes)) {
                    $attributes['title'] = $attributes['param'];
                }
                if ($attributes['title'] != '') {
                    $_title = comcode_to_tempcode($attributes['title'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
                    $title = $_title->evaluate();
                } else {
                    $title = make_string_tempcode(escape_html($_embed));
                }
                $embed = hyperlink($_embed, $title, true, false);
            }
            $temp_tpl = do_template('COMCODE_REFERENCE', array_merge($attributes, ['SOURCE' => $embed]));
            break;

        case 'page':
            $ignore_if_hidden = (array_key_exists('ignore_if_hidden', $attributes)) && ($attributes['ignore_if_hidden'] == '1');
            unset($attributes['ignore_if_hidden']);

            $hash = '';
            $caption = $embed;

            global $OVERRIDE_SELF_ZONE;
            $page_link = $attributes['param'];
            list($zone, $_attributes, $hash) = page_link_decode($page_link);
            if (!array_key_exists('page', $_attributes)) {
                $_attributes['page'] = '';
            }
            if (($zone == '_SELF') && ($OVERRIDE_SELF_ZONE !== null)) {
                $zone = $OVERRIDE_SELF_ZONE;
            }
            if ($zone == '_SEARCH') {
                $zone = get_page_zone($_attributes['page'], false);
                if ($zone === null) {
                    $zone = '';
                }
            }
            $external = (array_key_exists('external', $attributes) && $attributes['external'] == '1');
            $pl_url = build_url($_attributes, $zone, [], false, false, false, $hash);
            $temp_tpl = hyperlink($pl_url, $caption, $external, true);
            $page = $_attributes['page'];

            if ($page != '') {
                if ($zone == '_SELF') {
                    $zone = get_zone_name();
                }
                if ($zone == '_SEARCH') {
                    $zone = get_page_zone($page, false);
                    if ($zone === null) {
                        $zone = ''; // Oh dear, well it will be correctly identified as not found anyway
                    }
                }
                $ptest = _request_page($page, $zone);
                if ($ptest !== false) {
                    if (($page == 'topicview') && (get_forum_type() == 'cns') && (array_key_exists('id', $_attributes))) {
                        if (!is_numeric($_attributes['id'])) {
                            $_attributes['id'] = $GLOBALS['SITE_DB']->query_select_value_if_there('url_id_monikers', 'm_resource_id', ['m_resource_page' => $page, 'm_moniker' => $_attributes['id']]);
                        }
                        if ($_attributes['id'] !== null) {
                            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics', 'id', ['id' => $_attributes['id']]);
                            if ($test === null) {
                                $ptest = false;
                            }
                        } else {
                            $ptest = false;
                        }
                    }
                }
                if ($ptest === false) {
                    //$temp_tpl->attach(' [' . do_lang('MISSING_RESOURCE') . ']');  // Don't want this as we might be making the page immediately
                    if (($GLOBALS['FORUM_DRIVER']->is_staff($source_member)) && (running_script('index'))) {
                        if ($ignore_if_hidden) {
                            $temp_tpl = do_template('COMCODE_DEL', ['_GUID' => 'df638c61bc17ca975e95cf5f749836f5', 'CONTENT' => $caption]);
                        } else {
                            require_code('failure');
                            relay_error_notification(do_lang('MISSING_RESOURCE_COMCODE', 'page_link', $page_link), false, $GLOBALS['FORUM_DRIVER']->is_staff($source_member) ? 'error_occurred_missing_reference_important' : 'error_occurred_missing_reference');
                        }
                    }
                }
            }
            break;

        case 'thumb':
            $_embed = $embed->evaluate();
            $given_url = $embed->evaluate();
            $url_full = absoluteise_and_test_comcode_url($given_url, $source_member, $as_admin, $tag);

            $align = array_key_exists('align', $attributes) ? $attributes['align'] : 'bottom';

            if ((!has_privilege($source_member, 'draw_to_server')) && (!$as_admin)) {
                $url_thumb = $url_full;
            } else {
                if ($attributes['param'] != '') {
                    $url_thumb = url_is_local($attributes['param']) ? (get_custom_base_url() . '/' . $attributes['param']) : $attributes['param'];
                }
                if (($attributes['param'] == '') || ((url_is_local($attributes['param'])) && (!file_exists(get_custom_file_base() . '/' . rawurldecode($attributes['param']))))) {
                    $new_name = url_to_filename($url_full);
                    require_code('images');
                    $file_thumb = get_custom_file_base() . '/uploads/auto_thumbs/' . $new_name;
                    if ((!file_exists($file_thumb)) && (strpos($file_thumb, '{$') === false)) {
                        $url_thumb = convert_image($url_full, $file_thumb, null, null, intval(get_option('thumb_width')), false);
                    } else {
                        $url_thumb = get_custom_base_url() . '/uploads/auto_thumbs/' . rawurlencode($new_name);
                    }
                }
            }

            $caption = array_key_exists('caption', $attributes) ? $attributes['caption'] : '';

            $temp_tpl = do_template('COMCODE_THUMB', ['_GUID' => '1b0d25f72ef5f816091269e29c586d60', 'CAPTION' => $caption, 'ALIGN' => $align, 'URL_THUMB' => $url_thumb, 'URL_FULL' => $url_full]);

            if (array_key_exists('float', $attributes)) {
                $temp_tpl = do_template('FLOATER', ['_GUID' => 'cbc56770714a44f56676f43da282cc7a', 'FLOAT' => $attributes['float'], 'CONTENT' => $temp_tpl]);
            }
            break;

        case 'img':
            if (($semiparse_mode) && (array_key_exists('rollover', $attributes))) {
                $temp_tpl = make_string_tempcode(add_wysiwyg_comcode_markup($tag, $attributes, $embed, ($in_semihtml) || ($is_all_semihtml), WYSIWYG_COMCODE__STANDOUT_BLOCK, $html_errors));
                break;
            }

            $_embed = $embed->evaluate();
            $given_url = $embed->evaluate();
            $url_full = absoluteise_and_test_comcode_url($given_url, $source_member, $as_admin, $tag);

            $align = array_key_exists('align', $attributes) ? $attributes['align'] : '';

            $width = array_key_exists('width', $attributes) ? intval(str_replace('px', '', $attributes['width'])) : null;
            $height = array_key_exists('height', $attributes) ? intval(str_replace('px', '', $attributes['height'])) : null;

            $caption = comcode_to_tempcode($attributes['param'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);

            if (array_key_exists('title', $attributes)) {
                $tooltip = comcode_to_tempcode($attributes['title'], $source_member, $as_admin, null, $db, COMCODE_NORMAL, $highlight_bits, $on_behalf_of_member);
            } else {
                $tooltip = $caption;
            }

            $rollover = array_key_exists('rollover', $attributes) ? $attributes['rollover'] : null;
            if (($rollover !== null) && (url_is_local($rollover))) {
                if ((file_exists(get_file_base() . '/' . $rollover)) && (!file_exists(get_custom_file_base() . '/' . $rollover))) {
                    $rollover = get_base_url() . '/' . $rollover;
                } else {
                    $rollover = get_custom_base_url() . '/' . $rollover;
                }
            }

            $refresh_time = array_key_exists('refresh_time', $attributes) ? strval(@intval($attributes['refresh_time'])) : '0';

            $temp_tpl->attach(do_template('COMCODE_IMG', ['_GUID' => '70166d8dbb0aff064b99c0dd30ed77a8', 'WIDTH' => ($width === null) ? null : strval($width), 'HEIGHT' => ($height === null) ? null : strval($height), 'REFRESH_TIME' => $refresh_time, 'ROLLOVER' => $rollover, 'ALIGN' => $align, 'URL' => $url_full, 'TOOLTIP' => $tooltip, 'CAPTION' => $caption]));

            if (array_key_exists('float', $attributes)) {
                $temp_tpl = do_template('FLOATER', ['_GUID' => '918162250c80e10212efd9a051545b9b', 'FLOAT' => $attributes['float'], 'CONTENT' => $temp_tpl]);
            }

            break;

        case 'media_set':
            $width = array_key_exists('width', $attributes) ? $attributes['width'] : '';
            $height = array_key_exists('height', $attributes) ? $attributes['height'] : '';

            $temp_tpl = do_template('COMCODE_MEDIA_SET', [
                '_GUID' => 'd8f811e2f3d13263edd32a3fe46678aa',
                'WIDTH' => $width,
                'HEIGHT' => $height,
                'MEDIA' => $embed,
            ]);
            break;

        case 'media':
            $url_full = $embed->evaluate();

            if (!$as_admin && !has_privilege($source_member, 'comcode_dangerous')) {
                unset($attributes['mime_type']);
            }

            require_code('media_renderer');
            $temp_tpl = render_media_url(
                $url_full,
                $url_full,
                $attributes + ['context' => 'comcode_media'],
                $as_admin,
                $source_member,
                MEDIA_TYPE_ALL,
                ((array_key_exists('type', $attributes)) && ($attributes['type'] != '')) ? $attributes['type'] : null
            );
            break;

        case 'attachment':
        case 'attachment_safe':
            // Work out display type
            $attributes['type'] = array_key_exists('type', $attributes) ? $attributes['type'] : '';
            // LEGACY
            if ($attributes['type'] == 'inline' || $attributes['type'] == 'left_inline' || $attributes['type'] == 'right_inline') {
                $attributes['framed'] = '0';
                $attributes['type'] = '';
                if ($attributes['type'] == 'left_inline') {
                    $attributes['float'] = 'left';
                }
                if ($attributes['type'] == 'right_inline') {
                    $attributes['float'] = 'right';
                }
            } elseif ($attributes['type'] == 'island' || $attributes['type'] == 'lightbox' || $attributes['type'] == 'left_island' || $attributes['type'] == 'right_island') {
                $attributes['framed'] = '1';
                $attributes['type'] = '';
                if ($attributes['type'] == 'left_island') {
                    $attributes['float'] = 'left';
                }
                if ($attributes['type'] == 'right_island') {
                    $attributes['float'] = 'right';
                }
            } elseif ($attributes['type'] == 'download') {
                $attributes['framed'] = '1';
                $attributes['type'] = 'hyperlink';
            }

            if ($on_behalf_of_member === null) {
                $on_behalf_of_member = $source_member;
            }

            if (!array_key_exists('thumb_url', $attributes)) {
                $attributes['thumb_url'] = '';
            }

            if (!$as_admin && !has_privilege($source_member, 'comcode_dangerous')) {
                unset($attributes['mime_type']);
            }

            global $COMCODE_ATTACHMENTS;

            $attachment_row = null;
            $original_filename = null;
            $id = $embed->evaluate();

            // Check against quota. We work all this out before we do any downloads, to make sure orphaned files aren't dumped on the file system (possible hack method)
            if ((!is_numeric($id))/*=new upload*/ && (!$as_admin) && (!has_privilege($source_member, 'exceed_filesize_limit'))) {
                if (get_forum_type() == 'cns') {
                    require_code('cns_groups');
                    $daily_quota = cns_get_member_best_group_property($source_member, 'max_daily_upload_mb');
                } else {
                    require_code('files');
                    $daily_quota = NON_CNS_QUOTA;
                }
                require_code('upload_syndication');
                if (($daily_quota !== null) && ((substr($id, 0, 4) != 'new_') || (!upload_will_syndicate('file' . substr($id, 4))))) {
                    $_size_uploaded_today = $db->query('SELECT SUM(a_file_size) AS the_answer FROM ' . $db->get_table_prefix() . 'attachments WHERE a_member_id=' . strval($source_member) . ' AND a_add_time>' . strval(time() - 60 * 60 * 24) . ' AND a_add_time<=' . strval(time()));
                    if ($_size_uploaded_today[0]['the_answer'] === null) {
                        $_size_uploaded_today[0]['the_answer'] = 0;
                    }
                    $size_uploaded_today = ceil(floatval($_size_uploaded_today[0]['the_answer']) / 1024.0 / 1024.0);
                    $attach_size = 0;
                    require_code('uploads');
                    is_plupload(true);
                    foreach ($_FILES as $_file) {
                        $attach_size += floatval($_file['size']) / 1024.0 / 1024.0;
                    }
                    if (($size_uploaded_today + $attach_size) > floatval($daily_quota)) {
                        $syn_services = [];
                        $hooks = find_all_hook_obs('systems', 'upload_syndication', 'Hook_upload_syndication_');
                        foreach ($hooks as $ob) {
                            if ($ob->is_enabled()) {
                                $syn_services[] = $ob->get_label();
                            }
                        }

                        require_code('upload_syndication');
                        list($syndication_json,) = get_upload_syndication_json(CMS_UPLOAD_ANYTHING);

                        if (($daily_quota > 0) || (empty($syn_services))) {
                            $over_quota_str = 'OVER_DAILY_QUOTA';
                        } else {
                            if (count($syn_services) > 1) {
                                $over_quota_str = '_OVER_DAILY_QUOTA';
                            } else {
                                $over_quota_str = '__OVER_DAILY_QUOTA';
                            }
                        }

                        $temp_tpl = do_template('WARNING_BOX', [
                            '_GUID' => '89b7982164ccf8d98f3d0596ad425f78',
                            'RESTRICT_VISIBILITY' => strval($source_member),
                            'WARNING' => do_lang_tempcode(
                                $over_quota_str,
                                escape_html(integer_format($daily_quota, 0)),
                                escape_html(float_format($size_uploaded_today)),
                                [
                                    escape_html($GLOBALS['FORUM_DRIVER']->get_username($source_member)),
                                    escape_html(get_site_name()),
                                    escape_html(isset($syn_services[0]) ? $syn_services[0] : ''),
                                ]
                            ),
                        ]);
                        break;
                    }
                }
            }

            if ((!is_numeric($id)) && (substr($id, 0, 4) != 'new_')) { // New attachments: embedded attachments (base64)
                $file = base64_decode(str_replace("\n", '', $id));
                if ($file === false) {
                    $temp_tpl = do_template('WARNING_BOX', ['_GUID' => '422658aee3c0eea77ad85d8621af742b', 'WARNING' => do_lang_tempcode('comcode:CORRUPT_ATTACHMENT')]);
                    break;
                }
                $md5 = md5(substr($file, 0, 30));
                $original_filename = array_key_exists('filename', $attributes) ? $attributes['filename'] : ($md5 . '.bin');
                if (get_file_extension($original_filename) != 'bin') {
                    require_code('files2');
                    check_extension($original_filename, true);
                    $new_filename = $md5 . '.' . get_file_extension($original_filename) . '.bin';
                } else {
                    $new_filename = $md5 . '.' . get_file_extension($original_filename);
                }
                require_code('files');
                $path = get_custom_file_base() . '/uploads/attachments/' . $new_filename;
                $success_status = cms_file_put_contents_safe($path, $file, FILE_WRITE_FAILURE_SILENT | FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE);
                if (!$success_status) {
                    $temp_tpl = do_template('WARNING_BOX', ['_GUID' => '428a36aa6cea693d01429f3d21caac36', 'WARNING' => intelligent_write_error_inline($path)]);
                    break;
                }
                $_size = strlen($file);
                $url = 'uploads/attachments/' . $new_filename;
                if ($db->is_forum_db()) {
                    $url = get_custom_base_url() . '/' . $url;
                }
            } elseif (!is_numeric($id)) { // New attachments: uploads
                if (substr($id, 0, 4) == 'new_') {
                    disable_php_memory_limit(); // In case needs lots of RAM for thumbnail generation

                    // Get/test ID
                    $_id = substr($id, 4);
                    if (!is_numeric($_id)) {
                        $temp_tpl = do_template('WARNING_BOX', ['_GUID' => 'dd7035da4ad83b55fbd185267ab31fe6', 'WARNING' => do_lang_tempcode('comcode:INVALID_ATTACHMENT')]);
                        break;
                    }

                    // Grab actual file
                    require_code('uploads');
                    require_code('images');
                    is_plupload(true);
                    $enforce_type = CMS_UPLOAD_ANYTHING;
                    if (((empty($attributes['type'])) || ($attributes['type'] == 'image_websafe')) && (array_key_exists('file' . $_id, $_FILES)) && (is_image($_FILES['file' . $_id]['name'], IMAGE_CRITERIA_GD_READ | IMAGE_CRITERIA_GD_WRITE))) {
                        $enforce_type = CMS_UPLOAD_IMAGE; // Images cleanup pipeline
                    }
                    set_images_cleanup_pipeline_settings(IMG_RECOMPRESS_LOSSLESS, null, null, true); // Code to strip GPS
                    $urls = get_url('', 'file' . $_id, 'uploads/attachments', OBFUSCATE_BIN_SUFFIX, $enforce_type, ((!array_key_exists('thumb', $attributes)) || ($attributes['thumb'] != '0')) && ($attributes['thumb_url'] == ''), '', '', true, true, true, true, $source_member);
                    reset_images_cleanup_pipeline_settings();
                    if ($urls[0] == '') {
                        //warn_exit(do_lang_tempcode('ERROR_UPLOADING'));  Can't do this, because this might not be post-calculated if something went wrong once
                        return new Tempcode();
                    }
                    $_size = $_FILES['file' . $_id]['size'];
                    $original_filename = $_FILES['file' . $_id]['name'];

                    require_code('upload_syndication');
                    $urls[0] = handle_upload_syndication('file' . $_id, '', array_key_exists('description', $attributes) ? $attributes['description'] : '', $urls[0], $original_filename, true);
                } else { // Should not get here
                    $temp_tpl = do_template('WARNING_BOX', ['_GUID' => 'f7c0ead08bf7e19f3b78a536c755d6a5', 'WARNING' => do_lang_tempcode('comcode:INVALID_ATTACHMENT')]);
                    break;
                }

                // If it did not work
                if ($urls[0] == '') {
                    require_code('images');
                    require_code('files2');
                    $temp_tpl = do_template('WARNING_BOX', [
                        '_GUID' => '81dce25ce8c1e0a9a2407315df0cf99c',
                        'WARNING' => do_lang_tempcode('ATTACHMENT_WOULD_NOT_UPLOAD', escape_html(float_format(get_max_file_size() / 1024 / 1024)), escape_html(float_format(get_max_image_size() / 1024 / 1024))),
                    ]);
                    break;
                }

                $url = $urls[0];
                if ($attributes['thumb_url'] == '') {
                    $attributes['thumb_url'] = array_key_exists(1, $urls) ? $urls[1] : '';
                }
            } else {
                // Existing attachments

                $__id = intval($id);

                // Load attachment
                $attachment_rows = $db->query_select('attachments', ['*'], ['id' => $__id], '', 1);
                if (!array_key_exists(0, $attachment_rows)) { // Missing attachment!
                    $temp_tpl = do_template('WARNING_BOX', ['_GUID' => 'be1c9c26a8802a00955fbd7a55b08bd3', 'WARNING' => do_lang_tempcode('MISSING_RESOURCE_COMCODE', 'attachment', escape_html(strval($__id)))]);
                    if (($GLOBALS['FORUM_DRIVER']->is_staff($source_member)) && (running_script('index'))) {
                        require_code('failure');
                        relay_error_notification(do_lang('MISSING_RESOURCE_COMCODE', 'attachment', strval($__id)), false, $GLOBALS['FORUM_DRIVER']->is_staff($source_member) ? 'error_occurred_missing_reference_important' : 'error_occurred_missing_reference');
                    }
                    break;
                }
                $attachment_row = $attachment_rows[0];

                // Check permission
                require_code('attachments');
                $already_referenced = array_key_exists($__id, $GLOBALS['ATTACHMENTS_ALREADY_REFERENCED']);
                if (($already_referenced) || ($as_admin) || (/*(!is_guest($source_member)) && */($source_member === $attachment_row['a_member_id'])) || ((has_privilege($source_member, 'reuse_others_attachments')) && (has_attachment_access($source_member, $__id)))
                ) {
                    if (!array_key_exists('type', $attributes)) {
                        $attributes['type'] = 'auto';
                    }
                    $COMCODE_ATTACHMENTS[$pass_id][] = ['tag_type' => $tag, 'time' => $attachment_row['a_add_time'], 'type' => 'existing', 'initial_id' => $id, 'id' => $__id, 'attachmenttype' => $attributes['type'], 'comcode' => $comcode];
                } else { // No permission
                    require_lang('permissions');
                    $username = $GLOBALS['FORUM_DRIVER']->get_username($source_member, false, USERNAME_DEFAULT_DELETED);
                    $temp_tpl = do_template('WARNING_BOX', [
                        '_GUID' => 'af61f96b5cc6819979ce681d6f49b384',
                        'RESTRICT_VISIBILITY' => strval($source_member),
                        'WARNING' => do_lang_tempcode('permissions:ACCESS_DENIED__REUSE_ATTACHMENT', escape_html($username)),
                    ]);
                    break;
                }
            }

            // New attachments need inserting
            if ($attachment_row === null) {
                require_code('images');

                // Thumbnail generation
                if ($attributes['thumb_url'] == '') {
                    if (is_image($original_filename, IMAGE_CRITERIA_WEBSAFE | IMAGE_CRITERIA_GD_READ | IMAGE_CRITERIA_GD_WRITE, has_privilege($source_member, 'comcode_dangerous'))) {
                        require_code('images');
                        $ext = '.' . get_file_extension($original_filename);
                        $md5 = md5(substr($original_filename, 0, 30));
                        $thumb_path = get_custom_file_base() . '/uploads/attachments_thumbs/' . $md5 . $ext;
                        $attributes['thumb_url'] = convert_image($url, $thumb_path, null, null, intval(get_option('thumb_width')), true, null, false, true);

                        if ($db->is_forum_db()) {
                            $attributes['thumb_url'] = get_custom_base_url() . '/' . $attributes['thumb_url'];
                        }
                    } elseif ((addon_installed('galleries')) && (is_video($original_filename, $as_admin, true)) && (url_is_local($url))) {
                        require_code('galleries2');
                        $attributes['thumb_url'] = video_get_default_thumb_url(url_is_local($url) ? (get_custom_base_url() . '/' . $url) : $url);
                    }
                }

                // Width/height auto-detection
                if ((addon_installed('galleries')) && (is_video($original_filename, $as_admin)) && (url_is_local($url))) {
                    require_code('galleries2');
                    if (url_is_local($url)) {
                        $vid_details = video_get_default_metadata($url, '', $original_filename);
                    } else {
                        $vid_details = false;
                    }

                    if ($vid_details !== false) {
                        list($_width, $_height) = $vid_details;
                        if ($_width !== null) {
                            if ((!array_key_exists('width', $attributes)) || ($attributes['width'] == '')) {
                                $attachment_row['width'] = strval($_width);
                            }
                        }
                        if ($_height !== null) {
                            if ((!array_key_exists('height', $attributes)) || ($attributes['height'] == '')) {
                                $attachment_row['height'] = strval($_height);
                            }
                        }
                    }
                }

                // Set URL correctly, if on an M.S.N.
                if ($db->is_forum_db()) {
                    if (url_is_local($url)) {
                        $url = get_custom_base_url() . '/' . $url;
                    }
                    if (url_is_local($attributes['thumb_url'])) {
                        $attributes['thumb_url'] = get_custom_base_url() . '/' . $attributes['thumb_url'];
                    }
                }

                // Insert attachment
                $attachment_row = [
                    'a_member_id' => $on_behalf_of_member,
                    'a_file_size' => $_size,
                    'a_url' => $url,
                    'a_thumb_url' => preg_replace('#^' . preg_quote(get_custom_base_url() . '/') . '#', '', $attributes['thumb_url']),
                    'a_original_filename' => $original_filename,
                    'a_num_downloads' => 0,
                    'a_last_downloaded_time' => null,
                    'a_add_time' => time(),
                    'a_description' => array_key_exists('description', $attributes) ? $attributes['description'] : '',
                ];
                $attachment_row['id'] = $db->query_insert('attachments', $attachment_row, true);

                // Create and document attachment
                $COMCODE_ATTACHMENTS[$pass_id][] = ['type' => 'new', 'initial_id' => $id, 'id' => $attachment_row['id']]; // Marker will allow us to search back and replace this with the added ID
            }

            // Lock it if we are doing a 'safe' attachment
            if ($tag == 'attachment_safe') {
                $db->query_insert('attachment_refs', ['r_referer_type' => 'null', 'r_referer_id' => '', 'a_id' => $attachment_row['id']], false, true);
            }

            // Now, render it
            // ==============
            require_code('attachments');
            $temp_tpl = render_attachment($tag, $attributes, $attachment_row, $pass_id, $source_member, $as_admin, $db, $highlight_bits, $on_behalf_of_member, $semiparse_mode);
            break;
    }

    if ($temp_tpl === null) {
        $temp_tpl = new Tempcode();
    }

    // Last ditch effort: custom tags
    if ($temp_tpl->is_empty_shell()) {
        global $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE;
        if (array_key_exists($tag, $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE)) {
            $replace = $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE[$tag]['replace'];
            $parameters = explode(',', $CUSTOM_COMCODE_REPLACE_TARGETS_CACHE[$tag]['parameters']);
            $binding = ['CONTENT' => $embed];
            foreach ($parameters as $parameter) {
                $parameter = trim($parameter);
                $parts = explode('=', $parameter);
                if (count($parts) == 1) {
                    $parts[] = '';
                }
                if (count($parts) != 2) {
                    continue;
                }
                list($parameter, $default) = $parts;
                if ((!array_key_exists($parameter, $attributes)) || ($attributes[$parameter] == '')) {
                    $attributes[$parameter] = $default;
                }
                $binding[cms_strtoupper_ascii($parameter)] = $attributes[$parameter];
                if (is_string($replace)) {
                    $replace = str_replace('{' . $parameter . '}', '{' . cms_strtoupper_ascii($parameter) . '*}', $replace);
                }
            }
            if (is_string($replace)) {
                $replace = str_replace('{content}', array_key_exists($tag, $GLOBALS['TEXTUAL_TAGS']) ? '{CONTENT}' : '{CONTENT*}', $replace);
                require_code('tempcode_compiler');
                $temp_tpl = template_to_tempcode($replace);
                $temp_tpl = $temp_tpl->bind($binding, '(custom comcode: ' . $tag . ')');
            } else {
                $temp_tpl = call_user_func($replace, $embed, $attributes);
            }
        }
    }

    return $temp_tpl;
}

/**
 * Render a code box.
 *
 * @param  string $type The data type (e.g. file extension) we are rendering.
 * @param  Tempcode $embed Contents (code) to render
 * @param  boolean $numbers Whether to show line numbers
 * @param  boolean $in_semihtml Whether what we have came from inside a semihtml tag
 * @param  boolean $is_all_semihtml Whether what we have came from semihtml mode
 * @return array A pair: The Tempcode for the code box, and the title of the box
 */
function do_code_box(string $type, object $embed, bool $numbers = true, bool $in_semihtml = false, bool $is_all_semihtml = false) : array
{
    $_embed = null;
    $title = do_lang_tempcode('CODE');
    if ((file_exists(get_file_base() . '/sources_custom/geshi/' . filter_naughty(($type == 'HTML') ? 'html5' : cms_strtolower_ascii($type)) . '.php')) && (!in_safe_mode())) {
        $evaluated = $embed->evaluate();

        if (($in_semihtml) || ($is_all_semihtml)) {
            require_code('comcode_from_html');
            $evaluated = semihtml_to_comcode($evaluated, true);
            $evaluated = preg_replace('#^\[(semi)?html\]#', '', $evaluated);
            $evaluated = preg_replace('#\[/(semi)?html\]$#', '', $evaluated);
        }

        require_code('geshi');
        if (class_exists('GeSHi')) {
            require_code('developer_tools');
            destrictify();
            $geshi = new GeSHi($evaluated, ($type == 'HTML') ? 'html5' : cms_strtolower_ascii($type));
            $geshi->set_header_type(GESHI_HEADER_DIV);
            if ($numbers) {
                $geshi->enable_line_numbers(GESHI_NORMAL_LINE_NUMBERS);
            }
            $title = do_lang_tempcode('comcode:CODE_IN_LANGUAGE', escape_html($type));
            require_code('xhtml');
            $_embed = xhtmlise_html($geshi->parse_code());
            restrictify();
        }
    } else {
        switch (cms_strtolower_ascii($type)) {
            case 'php':
                if (php_function_allowed('highlight_string')) {
                    $evaluated = $embed->evaluate();

                    if (($in_semihtml) || ($is_all_semihtml)) {
                        require_code('comcode_from_html');
                        $evaluated = semihtml_to_comcode($evaluated, true);
                        $evaluated = preg_replace('#^\[(semi)?html\]#', '', $evaluated);
                        $evaluated = preg_replace('#\[/(semi)?html\]$#', '', $evaluated);
                    }

                    if (strpos($evaluated, '<' . '?php') === false) {
                        $strip = true;
                        $evaluated = "<" . "?php\n" . $evaluated . "\n?" . ">";
                    } else {
                        $strip = false;
                    }
                    require_code('xhtml');
                    ob_start();
                    highlight_string($evaluated);
                    $h_result = ob_get_clean();
                    $_embed = xhtmlise_html($h_result);
                    if ($strip) {
                        $_embed = str_replace('&lt;?php<br />', '', $_embed);
                        $_embed = str_replace('?&gt;', '', $_embed);
                    }
                    $title = do_lang_tempcode('comcode:PHP_CODE');
                }
                break;
        }
    }

    return [$_embed, $title];
}

/**
 * Recursive algorithm to make table of contents.
 *
 * @param  array $tree_structure The TOC (sub)tree
 * @param  array $list_types The list types to use for each level
 * @param  integer $base The level to start from
 * @param  integer $the_level The level we are at in the recursion
 * @return Tempcode The TOC node
 *
 * @ignore
 */
function _do_contents_level(array $tree_structure, array $list_types, int $base, int $the_level = 0) : object
{
    $lines = [];
    foreach ($tree_structure as $level) {
        if (array_key_exists(3, $level)) {
            $under = _do_contents_level($level[3], $list_types, $base, $the_level + 1);
            if ($the_level < $base - 1) {
                return $under; // Top level not assembled because it has top level title, above contents
            }
        } else {
            $under = new Tempcode();
        }

        $lines[] = ['ID' => $level[0], 'LINE' => $level[1], 'URL' => $level[2], 'UNDER' => $under];
    }

    if (empty($lines)) {
        return new Tempcode();
    }

    return do_template('COMCODE_CONTENTS_LEVEL', ['_GUID' => 'cd2811bf69387ca05bf9612319db956b', 'TYPE' => $list_types[max($the_level - $base + 1/*because $base counts from 1 not 0*/, 0)], 'LINES' => $lines]);
}

/**
 * Find a specified tutorial link identifier.
 *
 * @param  ID_TEXT $name The name of the value
 * @return ?SHORT_TEXT The value (null: value not found)
 */
function get_tutorial_link(string $name) : ?string
{
    static $cache = [];
    if (isset($cache[$name])) {
        $ret = $cache[$name];
    } else {
        $ret = $GLOBALS['SITE_DB']->query_select_value_if_there('tutorial_links', 'the_value', ['the_name' => cms_mb_strtolower($name)]);
        $cache[$name] = $ret;
    }
    return $ret;
}

/**
 * Set the specified value to the specified tutorial link identifier.
 *
 * @param  ID_TEXT $name The name of the value
 * @param  SHORT_TEXT $value The value
 */
function set_tutorial_link(string $name, string $value)
{
    if (strpos($value, ':search:') !== false) {
        return; // Do not want tutorial links to search results page
    }

    if (get_tutorial_link($name) !== $value) {
        $GLOBALS['SITE_DB']->query_insert_or_replace('tutorial_links', ['the_value' => $value], ['the_name' => cms_mb_strtolower($name)]);
    }
}
