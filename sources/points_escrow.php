<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    points
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__points_escrow()
{
    require_lang('points');
}

/**
 * Get a results table of the escrows between two members.
 *
 * @param  MEMBER $member_id_of Who we are looking at escrows for
 * @param  MEMBER $member_id_viewing Who we are looking at escrows using the account of
 * @return Tempcode The UI
 */
function points_get_escrow(int $member_id_of, int $member_id_viewing) : object
{
    $start = get_param_integer('escrow_start', 0);
    $max = get_param_integer('escrow_max', intval(get_option('point_logs_per_page')));
    $sortables = ['date_and_time' => do_lang_tempcode('DATE'), 'amount' => do_lang_tempcode('AMOUNT')];
    $test = explode(' ', get_param_string('escrow_sort', 'date_and_time DESC', INPUT_FILTER_GET_COMPLEX));
    if (count($test) == 1) {
        $test[1] = 'DESC';
    }
    list($sortable, $sort_order) = $test;
    if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
        log_hack_attack_and_exit('ORDERBY_HACK');
    }

    if (($member_id_of == $member_id_viewing) || (has_privilege($member_id_viewing, 'moderate_points_escrow'))) {
        $where = ' AND (sender_id=' . strval($member_id_of) . ' OR recipient_id=' . strval($member_id_of) . ')';
    } else {
        $where = ' AND (sender_id=' . strval($member_id_of) . ' OR sender_id=' . strval($member_id_viewing) . ') AND (recipient_id=' . strval($member_id_of) . ' OR recipient_id=' . strval($member_id_viewing) . ')';
    }

    $max_rows = $GLOBALS['SITE_DB']->query_select_value('escrow', 'COUNT(*)', [], $where);
    if ($max_rows == 0) {
        return new Tempcode();
    }
    $rows = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], [], $where . ' ORDER BY ' . $sortable . ' ' . $sort_order, $max, $start);

    $out = new Tempcode();

    $viewing_name = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true);

    require_code('templates_results_table');

    $header_columns = [
        do_lang_tempcode('IDENTIFIER'),
        do_lang_tempcode('DATE'),
        do_lang_tempcode('AMOUNT'),
        do_lang_tempcode('SENDER'),
        do_lang_tempcode('RECIPIENT'),
        do_lang_tempcode('REASON')
    ];
    $header_row = results_header_row($header_columns, $sortables, 'escrow_sort', $sortable . ' ' . $sort_order);

    foreach ($rows as $myrow) {
        // Their name
        $from_name = is_guest($myrow['sender_id']) ? get_site_name() : $GLOBALS['FORUM_DRIVER']->get_username($myrow['sender_id'], true);
        $to_name = $GLOBALS['FORUM_DRIVER']->get_username($myrow['recipient_id'], true);
        $_from_name = (is_guest($myrow['sender_id'])) ? make_string_tempcode(escape_html($from_name)) : hyperlink(points_url($myrow['sender_id']), escape_html($from_name), false, false, do_lang_tempcode('VIEW_POINTS'));
        $_to_name = hyperlink(points_url($myrow['recipient_id']), escape_html($to_name), false, false, do_lang_tempcode('VIEW_POINTS'));

        $date = get_timezoned_date_time($myrow['date_and_time'], false);
        $_date = hyperlink(build_url(['page' => 'points', 'type' => 'view_escrow', 'id' => $myrow['id'], 'member_id_of' => $member_id_of], get_module_zone('points')), escape_html($date), false, false, do_lang_tempcode('ESCROW_VIEW'));

        $amount = $myrow['amount'];
        $reason = get_translated_tempcode('escrow', $myrow, 'reason');

        $results_entry = [
            strval($myrow['id']),
            $_date,
            integer_format($amount),
            $_from_name,
            $_to_name,
            $reason
        ];
        $out->attach(results_entry($results_entry, true));
    }
    return results_table(do_lang_tempcode('_ESCROW', escape_html($viewing_name)), $start, 'escrow_start', $max, 'escrow_max', $max_rows, $header_row, $out, $sortables, $sortable, $sort_order, 'escrow_sort', null, [], null, 8, 'gfhfghtrhhjghgfhfgf', false, 'tab--points');
}

/**
 * Get a results table of the logs for a provided escrow.
 *
 * @param  AUTO_LINK $id The ID of the escrow
 * @return Tempcode The UI
 */
function escrow_get_logs(int $id) : object
{
    require_code('templates_interfaces');

    $start = get_param_integer('start', 0);
    $max = get_param_integer('max', 50);
    $sortables = ['date_and_time' => do_lang_tempcode('DATE')];
    $test = explode(' ', get_param_string('sort', 'date_and_time DESC', INPUT_FILTER_GET_COMPLEX));
    if (count($test) == 1) {
        $test[1] = 'DESC';
    }
    list($sortable, $sort_order) = $test;
    if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
        log_hack_attack_and_exit('ORDERBY_HACK');
    }

    $max_rows = $GLOBALS['SITE_DB']->query_select_value('escrow_logs', 'COUNT(*)', ['escrow_id' => $id]);
    if ($max_rows == 0) {
        return new Tempcode();
    }
    $rows = $GLOBALS['SITE_DB']->query_select('escrow_logs', ['*'], ['escrow_id' => $id], 'ORDER BY ' . $sortable . ' ' . $sort_order, $max, $start);
    $out = new Tempcode();

    require_code('templates_results_table');

    $header_columns = [
        do_lang_tempcode('DATE'),
        do_lang_tempcode('ACTION'),
        do_lang_tempcode('MEMBER'),
        do_lang_tempcode('ADDITIONAL_INFO')
    ];
    $header_row = results_header_row($header_columns, $sortables, 'sort', $sortable . ' ' . $sort_order);

    foreach ($rows as $myrow) {
        // Their name
        if ($myrow['member_id'] !== null) {
            $_name = is_guest($myrow['member_id']) ? do_lang('SYSTEM') : $GLOBALS['FORUM_DRIVER']->get_username($myrow['member_id'], true);
            $name = (is_guest($myrow['member_id'])) ? make_string_tempcode(escape_html($_name)) : hyperlink(points_url($myrow['member_id']), escape_html($_name), false, false, do_lang_tempcode('VIEW_POINTS'));
        }

        $date = get_timezoned_date_time($myrow['date_and_time'], false);

        if ($myrow['information'] !== null) {
            $reason = get_translated_tempcode('escrow_logs', $myrow, 'information');
        }

        $results_entry = [
            $date,
            do_lang_tempcode($myrow['log_type']),
            ($myrow['member_id'] !== null) ? $name : '',
            ($myrow['information'] !== null) ? symbol_truncator([$reason, '200', '1', '1'], 'left') : ''
        ];

        $out->attach(results_entry($results_entry, true));
    }
    return results_table(do_lang_tempcode('ESCROW_LOGS'), $start, 'start', $max, 'max', $max_rows, $header_row, $out, $sortables, $sortable, $sort_order, 'sort', null, [], null, 8, 'gfhfghtrhhjghgfhfgf', false, null, false, false);
}

/**
 * Create a new points escrow between two members.
 *
 * @param  MEMBER $sender_id The member creating and putting the points into escrow
 * @param  MEMBER $recipient_id The member who will receive the points once the escrow conditions are met
 * @param  integer $amount The amount of points to escrow
 * @param  SHORT_TEXT $reason The reason for escrow used in logs
 * @param  LONG_TEXT $agreement The detailed terms and conditions for the escrow
 * @param  ?TIME $expiry_time The time this escrow will automatically cancel or enter dispute if the terms are not met (null: do not automatically expire)
 * @param  boolean $escrow_log Whether to log the escrow creation in its own log
 * @param  ?boolean $send_notifications Whether to send notifications for this escrow (null: false, and do not send to staff)
 * @return ?AUTO_LINK The ID of the escrow record (null: There was an error)
 */
function escrow_points(int $sender_id, int $recipient_id, int $amount, string $reason, string $agreement, ?int $expiry_time = null, bool $escrow_log = true, ?bool $send_notifications = true) : ?int
{
    if (is_guest($sender_id) || is_guest($recipient_id)) {
        return null;
    }
    if ($amount <= 0) {
        return null;
    }

    $username = $GLOBALS['FORUM_DRIVER']->get_username($recipient_id, true, USERNAME_GUEST_AS_DEFAULT | USERNAME_DEFAULT_ERROR);

    require_code('points2');

    // Actually debit the points into escrow (use null for gift points so we prioritize escrowing gift points first, when applicable)
    $escrow_id = points_debit_member($sender_id, do_lang('ESCROW_REASON', $username, $reason), $amount, null, 0, $send_notifications, 0, ['create', 'points_escrow']);
    if ($escrow_id === null) {
        return null;
    }

    // Insert the escrow into the database
    $map = [
        'date_and_time' => time(),
        'amount' => $amount,
        'original_points_ledger_id' => $escrow_id,
        'sender_id' => $sender_id,
        'recipient_id' => $recipient_id,
        'expiration' => $expiry_time,
        'sender_status' => 0,
        'recipient_status' => 0,
        'status' => 1,
    ];
    $map += insert_lang_comcode('reason', $reason, 4);
    $map += insert_lang_comcode('agreement', $agreement, 5);
    $id = $GLOBALS['SITE_DB']->query_insert('escrow', $map, true);
    $GLOBALS['SITE_DB']->query_update('points_ledger', ['code_explanation' => json_encode(['create', 'points_escrow', strval($id)])], ['id' => $escrow_id], '', 1);

    // Log it
    if ($escrow_log) {
        escrow_log_it('LOG_ESCROW_CREATED', $id, $sender_id, $agreement);
    }
    log_it('LOG_ESCROW_CREATED', strval($id), $username);

    // Dispatch notification
    require_code('notifications');
    if ($send_notifications !== null) {
        $link_comcode = '[page="_SEARCH:points:view_escrow:' . comcode_escape(strval($id)) . '"]' . comcode_escape($reason) . '[/page]';
        $map = [
            '_GUID' => '1225d89038254b979fe8068a57766e0e',
            'ID' => strval($id),
            'INTRO' => do_lang_tempcode('NEW_ESCROW_TRANSACTION_INTRO', $link_comcode),
            'ESCROW_FROM' => strval($sender_id),
            'ESCROW_TO' => strval($recipient_id),
            'AMOUNT' => integer_format($amount),
            'REASON' => $reason,
            'TERMS' => $agreement,
        ];
        if ($expiry_time !== null) {
            $map['EXPIRATION'] = strval($expiry_time);
        }

        // Involved members
        if ($send_notifications) {
            $subject = do_lang_tempcode('NEW_ESCROW_TRANSACTION_SUBJECT', $reason);
            $mail = do_notification_template('ESCROW_TRANSACTIONS_MAIL', $map, get_lang($recipient_id), false, null, '.txt', 'text');
            dispatch_notification('point_escrows', null, $subject->evaluate(get_lang($recipient_id)), $mail->evaluate(get_lang($recipient_id)), [$recipient_id], $sender_id);
        }

        // Staff
        $subject = do_lang_tempcode('NEW_ESCROW_TRANSACTION_SUBJECT_STAFF', $reason);
        $map['INTRO'] = do_lang_tempcode('NEW_ESCROW_TRANSACTION_INTRO_STAFF', $link_comcode);
        $mail = do_notification_template('ESCROW_TRANSACTIONS_MAIL', $map, null, false, null, '.txt', 'text');
        dispatch_notification('point_escrows_staff_passive', null, $subject->evaluate(), $mail->evaluate(), null, $sender_id);
    }

    return $id;
}

/**
 * Mark an escrow as satisfied by a member. Also completes the escrow if both members satisfied.
 *
 * @param  AUTO_LINK $id The ID of the escrow to satisfy
 * @param  MEMBER $member_id The member who is satisfying it
 * @param  ?array $row If the escrow was already queried from the database, this is the row (null: query for the escrow)
 * @param  boolean $escrow_log Whether to log this in the escrow logs
 * @param  ?boolean $send_notifications Whether to send notifications (null: false, and do not send to escrow moderators)
 * @return ?array Tuple [integer ID of the recipient ledger, ?integer ID of the ledger refunding the sender (null means no refund processed), ?integer total points refunded (null means no refund), ?integer number of refunded points that were gift points (null means no refund)] (null: the escrow was not yet fully satisfied by all members)
 */
function satisfy_escrow(int $id, int $member_id, ?array $row = null, bool $escrow_log = true, ?bool $send_notifications = true) : ?array
{
    if ($row === null) {
        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];
    }

    // Cannot mark an escrow satisfied if it is not active
    if (($row['status'] < 1)) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    // Mark the escrow satisfied
    $map = [];
    if ($row['sender_id'] == $member_id) {
        $map['sender_status'] = 1;
    } elseif ($row['recipient_id'] == $member_id) {
        $map['recipient_status'] = 1;
    } else { // This should never happen!
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }
    $GLOBALS['SITE_DB']->query_update('escrow', $map, ['id' => $id], '', 1);

    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id, true, USERNAME_GUEST_AS_DEFAULT | USERNAME_DEFAULT_ERROR);

    // Log it
    if ($escrow_log) {
        escrow_log_it('LOG_ESCROW_SATISFIED', $id, $member_id);
    }
    log_it('LOG_ESCROW_SATISFIED', strval($id), $username);

    // If both members satisfied the escrow, then complete it
    $finished = @intval($GLOBALS['SITE_DB']->query_select_value('escrow', '(SUM(sender_status)+SUM(recipient_status))', ['id' => $id]));
    if ($finished == 2) {
        return _complete_escrow($row, null, $escrow_log, $send_notifications);
    }
    return null;
}

/**
 * The actualiser for completing an escrow and crediting the points to the recipient. Also returns points to the sender if we are not crediting the full amount.
 *
 * @param  array $row The database row for the escrow to mark complete
 * @param  ?integer $amount The number of points to credit to the recipient; the rest will be refunded to the sender (null: credit the full amount from the escrow)
 * @param  boolean $escrow_log Whether to log this in the escrow logs
 * @param  ?boolean $send_notifications Whether to send notifications for the completion of this escrow (null: false, and do not notify staff)
 * @return array Tuple [integer ID of the recipient ledger, ?integer ID of the ledger refunding the sender (null means no refund processed), ?integer total points refunded (null means no refund), ?integer number of refunded points that were gift points (null means no refund)]
 */
function _complete_escrow(array $row, ?int $amount = null, bool $escrow_log = true, ?bool $send_notifications = true) : array
{
    if ($amount !== null && $amount <= 0) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }
    if ($amount === null || $amount > $row['amount']) {
        $amount = $row['amount'];
    }

    $response = [];

    require_code('points2');

    $id = $row['id'];
    $sender_id = $row['sender_id'];
    $recipient_id = $row['recipient_id'];
    $reason = get_translated_text($row['reason']);

    $username = $GLOBALS['FORUM_DRIVER']->get_username($sender_id, true, USERNAME_GUEST_AS_DEFAULT | USERNAME_DEFAULT_ERROR);

    // Update the escrow status
    $GLOBALS['SITE_DB']->query_update('escrow', ['status' => 0], ['id' => $id], '', 1);

    // Credit the points to the recipient in a new transaction
    $_id = points_credit_member($recipient_id, do_lang('ESCROW_REASON_FROM', $username, $reason), $amount, 0, 0, true, 0, ['complete', 'points_escrow', strval($id)]);
    $response[] = $_id;

    // If we are not crediting the recipient with the full escrow points, then we need to refund the rest to the sender
    if ($amount < $row['amount']) {
        $_ledger = $GLOBALS['SITE_DB']->query_select('points_ledger', ['*'], ['id' => $row['original_points_ledger_id']], '', 1);
        if ($_ledger === null || !array_key_exists(0, $_ledger)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $ledger = $_ledger[0];

        $refund = ($row['amount'] - $amount);
        $refund_gift_points = min($refund, $ledger['amount_gift_points']);

        $id_b = points_credit_member($row['sender_id'], do_lang('ESCROW_REASON_FROM', $username, $reason), $amount, $refund_gift_points, 0, true, 1, ['partial_refund', 'points_escrow', strval($id)]);
        $response[] = $id_b;
        $response[] = $refund;
        $response[] = $refund_gift_points;

        // Also, edit the points amount on the escrow itself
        $GLOBALS['SITE_DB']->query_update('escrow', ['amount' => $amount], ['id' => $id], '', 1);
    }

    // Log it
    if ($escrow_log) {
        escrow_log_it('LOG_ESCROW_COMPLETED', $id, null, do_lang('NOTIFICATION_POINTS_TRANSACTION_POINTS_L', integer_format($amount)));
    }
    log_it('LOG_ESCROW_COMPLETED', strval($id), do_lang('NOTIFICATION_POINTS_TRANSACTION_POINTS_L', integer_format($amount)));

    if ($send_notifications !== null) {
        // Process notifications
        require_code('notifications');

        $map = [
            '_GUID' => 'ffcc0e59fb7040308076826f8d1307d6',
            'ID' => strval($id),
            'ESCROW_FROM' => strval($sender_id),
            'ESCROW_TO' => strval($recipient_id),
            'AMOUNT' => integer_format($amount),
            'REASON' => $reason,
        ];

        // Involved members
        if ($send_notifications) {
            $notification_members = [$sender_id, $recipient_id];
            $subject = do_lang_tempcode('ESCROW_FULLY_SATISFIED_SUBJECT', $reason);
            foreach ($notification_members as $n_member) {
                $mail = do_notification_template('ESCROW_FULLY_SATISFIED_MAIL', $map, get_lang($n_member), false, null, '.txt', 'text');
                dispatch_notification('point_escrows', null, $subject->evaluate(get_lang($n_member)), $mail->evaluate(get_lang($n_member)), [$n_member], A_FROM_SYSTEM_UNPRIVILEGED);
            }
        }

        // Staff
        $subject = do_lang_tempcode('ESCROW_FULLY_SATISFIED_SUBJECT', $reason);
        $mail = do_notification_template('ESCROW_FULLY_SATISFIED_MAIL', $map, null, false, null, '.txt', 'text');
        dispatch_notification('point_escrows_staff_passive', null, $subject->evaluate(), $mail->evaluate(), null, A_FROM_SYSTEM_UNPRIVILEGED);
    }

    return $response;
}

/**
 * Cancel an escrow, refunding the points and sending out a notification.
 *
 * @param  AUTO_LINK $id The ID of the escrow to cancel
 * @param  MEMBER $member_id The member cancelling the escrow (use guest for system)
 * @param  LONG_TEXT $reason The explanation for cancelling the escrow
 * @param  ?array $row The database row for the escrow (null: query for it)
 * @param  boolean $actually_refund Whether to actually refund the points to the sender (this should be false if the original points transaction is being reversed)
 * @return ?AUTO_LINK The ID of the points_ledger transaction refunding the points to the sender (null: the refund was not processed)
 */
function cancel_escrow(int $id, int $member_id, string $reason, ?array $row = null, bool $actually_refund = true) : ?int
{
    if ($row === null) {
        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];
    }

    // Cannot mark an escrow cancelled if it is not active
    if (($row['status'] < 1)) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    $escrow_reason = get_translated_tempcode('escrow', $row, 'reason');
    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id, true, USERNAME_GUEST_AS_DEFAULT);

    // Update status
    $GLOBALS['SITE_DB']->query_update('escrow', ['status' => -1], ['id' => $id], '', 1);

    $refund_id = null;
    if ($actually_refund) {
        // Get the original points ledger
        $_ledger = $GLOBALS['SITE_DB']->query_select('points_ledger', ['id', 'amount_gift_points'], ['id' => $row['original_points_ledger_id']], '', 1);
        if ($_ledger === null || !array_key_exists(0, $_ledger)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $ledger = $_ledger[0];

        // Refund points to the sender
        require_code('points2');
        $_reason = do_lang_tempcode('ESCROW_REASON_CANCELLED', $escrow_reason);
        $refund_id = points_refund($GLOBALS['FORUM_DRIVER']->get_guest_id(), $row['sender_id'], $_reason->evaluate(), $row['amount'], $ledger['amount_gift_points'], 0, $ledger['id'], true, ['escrow', 'cancel', strval($id)]);
    }

    // Log it
    escrow_log_it('LOG_ESCROW_CANCELLED', $id, $member_id, $reason);
    log_it('LOG_ESCROW_CANCELLED', strval($id), $username);

    // Send out a notification
    require_code('notifications');

    $subject = do_lang_tempcode('ESCROW_CANCELLED_SUBJECT', $escrow_reason);
    $map = [
        '_GUID' => '9981b4baa98547ad9a2571e5b2464c91',
        'ID' => strval($id),
        'ESCROW_REASON' => $escrow_reason,
        'CANCELLING_MEMBER' => strval($member_id),
        'REASON' => $reason,
    ];

    // Involved members
    $notification_members = [$row['recipient_id'], $row['sender_id']];
    foreach ($notification_members as $n_member) {
        $mail = do_notification_template('ESCROW_CANCELLED_MAIL', $map, get_lang($n_member), false, null, '.txt', 'text');
        dispatch_notification('point_escrows', null, $subject->evaluate(get_lang($n_member)), $mail->evaluate(get_lang($n_member)), [$n_member], $member_id);
    }

    // Staff
    $mail = do_notification_template('ESCROW_CANCELLED_MAIL', $map, null, false, null, '.txt', 'text');
    dispatch_notification('point_escrows_staff_passive', null, $subject->evaluate(), $mail->evaluate(), null, $member_id);

    return $refund_id;
}

/**
 * Mark an escrow as disputed, and send out notifications.
 *
 * @param  AUTO_LINK $id The ID of the escrow being disputed
 * @param  MEMBER $member_id The member disputing the escrow (use guest for system)
 * @param  LONG_TEXT $reason The reason / message for the dispute
 * @param  ?array $row The database row for the escrow (null: query it)
 */
function dispute_escrow(int $id, int $member_id, string $reason, ?array $row = null) : void
{
    if ($row === null) {
        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];
    }

    // Cannot dispute a non-active escrow
    if (($row['status'] < 1)) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    $escrow = get_translated_tempcode('escrow', $row, 'reason');
    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id, true, USERNAME_GUEST_AS_DEFAULT);

    // Update status
    $GLOBALS['SITE_DB']->query_update('escrow', ['status' => 2], ['id' => $id], '', 1);

    // Log it
    escrow_log_it('LOG_ESCROW_DISPUTED', $id, $member_id, $reason);
    log_it('LOG_ESCROW_DISPUTED', strval($id), $username);

    // Send out a notification to staff
    require_code('notifications');
    $subject = do_lang_tempcode('ESCROW_DISPUTED_SUBJECT', $escrow);
    $map = [
        '_GUID' => '9981b4baa98547ad9a2571e5b2464c91',
        'ID' => strval($id),
        'ESCROW_REASON' => $escrow,
        'DISPUTING_MEMBER' => strval($member_id),
        'REASON' => $reason,
    ];
    $mail = do_notification_template('ESCROW_DISPUTED_MAIL', $map, null, false, null, '.txt', 'text');
    dispatch_notification('point_escrows_staff_active', null, $subject->evaluate(), $mail->evaluate(), null, $member_id);
}

/**
 * Moderate an escrow, and send out notifications.
 *
 * @param  AUTO_LINK $id The ID of the escrow to moderate
 * @param  MEMBER $member_id The member applying the dispute resolution action
 * @param  ID_TEXT $action The action to take
 * @set amend complete cancel
 * @param  LONG_TEXT $new_reason The new reason for the escrow
 * @param  LONG_TEXT $new_agreement The new agreement terms for the escrow
 * @param  integer $points The number of points to credit to the recipient (only applicable for the 'complete' action)
 * @param  LONG_TEXT $reason The explanation for the action taken to resolve this dispute
 * @param  ?array $row The database row for the escrow (null: query for it)
 */
function moderate_escrow(int $id, int $member_id, string $action, string $new_reason, string $new_agreement, int $points, string $reason, ?array $row = null) : void
{
    if ($row === null) {
        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];
    }

    // Invalid action
    if (!in_array($action, ['amend', 'complete', 'cancel'])) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    $escrow_reason = get_translated_tempcode('escrow', $row, 'reason');
    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id, true, USERNAME_GUEST_AS_DEFAULT);

    // Modify reason and agreement text
    $map = [];
    $map += lang_remap_comcode('reason', $row['reason'], $new_reason);
    $map += lang_remap_comcode('agreement', $row['agreement'], $new_agreement);

    $GLOBALS['SITE_DB']->query_update('escrow', $map, ['id' => $id], '', 1);

    // Do not proceed further if the escrow is not active
    if ($row['status'] < 1) {
        escrow_log_it('LOG_ESCROW_AMENDED', $id, $member_id, $reason);
        log_it('LOG_ESCROW_AMENDED', strval($id), $username);
        return;
    }

    require_code('notifications');
    require_code('points2');

    // Perform action (edit action does nothing else)
    switch ($action) {
        case 'cancel':
            cancel_escrow($id, $member_id, $reason, $row);
            break;
        case 'complete':
            // Log it
            escrow_log_it('LOG_ESCROW_AMENDED', $id, $member_id, $reason);
            log_it('LOG_ESCROW_AMENDED', strval($id), $username);

            // Complete the escrow
            $data = _complete_escrow($row, $points, true, null);
            $points_refunded = ((array_key_exists(1, $data)) && (array_key_exists(2, $data))) ? ($data[2] - $data[1]) : 0;
            $gift_points_refunded = array_key_exists(2, $data) ? $data[2] : 0;

            // Send out a notification
            $subject = do_lang_tempcode('ESCROW_AMENDED_SUBJECT', $escrow_reason);
            $map = [
                '_GUID' => '9981b4baa98547ad9a2571e5b2464c91',
                'ID' => strval($id),
                'ESCROW_REASON' => $escrow_reason,
                'MODERATING_MEMBER' => strval($member_id),
                'RECIPIENT' => strval($row['recipient_id']),
                'POINTS_RECEIVED' => integer_format($points),
                'SENDER' => strval($row['sender_id']),
                'POINTS_REFUNDED' => integer_format($points_refunded),
                'GIFT_POINTS_REFUNDED' => integer_format($gift_points_refunded),
                'REASON' => $reason,
            ];

            // Involved members
            $notification_members = [$row['recipient_id'], $row['sender_id']];
            foreach ($notification_members as $n_member) {
                $mail = do_notification_template('ESCROW_AMENDED_MAIL', $map, get_lang($n_member), false, null, '.txt', 'text');
                dispatch_notification('point_escrows', null, $subject->evaluate(get_lang($n_member)), $mail->evaluate(get_lang($n_member)), [$n_member], $member_id);
            }

            // Staff
            $mail = do_notification_template('ESCROW_AMENDED_MAIL', $map, null, false, null, '.txt', 'text');
            dispatch_notification('point_escrows_staff_passive', null, $subject->evaluate(), $mail->evaluate(), null, $member_id);
            break;
        case 'amend':
            // Log it
            escrow_log_it('LOG_ESCROW_AMENDED', $id, $member_id, $reason);
            log_it('LOG_ESCROW_AMENDED', strval($id), $username);

            // Send out a notification
            $subject = do_lang_tempcode('ESCROW_AMENDED_SUBJECT', $escrow_reason);
            $map = [
                '_GUID' => '9981b4baa98547ad9a2571e5b2464c91',
                'ID' => strval($id),
                'ESCROW_REASON' => $escrow_reason,
                'MODERATING_MEMBER' => strval($member_id),
                'REASON' => $reason,
            ];

            // Involved members
            $notification_members = [$row['recipient_id'], $row['sender_id']];
            foreach ($notification_members as $n_member) {
                $mail = do_notification_template('ESCROW_AMENDED_MAIL', $map, get_lang($n_member), false, null, '.txt', 'text');
                dispatch_notification('point_escrows', null, $subject->evaluate(get_lang($n_member)), $mail->evaluate(get_lang($n_member)), [$n_member], $member_id);
            }

            // Staff
            $mail = do_notification_template('ESCROW_AMENDED_MAIL', $map, null, false, null, '.txt', 'text');
            dispatch_notification('point_escrows_staff_passive', null, $subject->evaluate(), $mail->evaluate(), null, $member_id);
            break;
    }
}

/**
 * Log something in a points escrow.
 *
 * @param  ID_TEXT $type The type of log; a language string
 * @param  AUTO_LINK $id The ID of the escrow
 * @param  ?MEMBER $member_id The member associated with this log (null: no member associated)
 * @param  LONG_TEXT $information Additional information pertaining to this log
 * @return AUTO_LINK The ID of the record
 */
function escrow_log_it(string $type, int $id, ?int $member_id = null, string $information = '') : int
{
    $map = [
        'escrow_id' => $id,
        'date_and_time' => time(),
        'log_type' => $type,
        'member_id' => $member_id
    ];
    $map += insert_lang_comcode('information', $information, 5);

    return $GLOBALS['SITE_DB']->query_insert('escrow_logs', $map, true);
}
