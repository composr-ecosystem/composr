<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

/**
 * Get a config option, with override support.
 *
 * @param  ID_TEXT $option_name The config option
 * @param  ?array $overrides Map of config option codenames and overridden values (null: no overrides)
 * @return ID_TEXT Config option value
 */
function get_option_with_overrides($option_name, $overrides)
{
    if ((isset($overrides[$option_name])) && ($overrides[$option_name] != '')) {
        return $overrides[$option_name];
    }
    return get_option($option_name);
}

/**
 * Find whether a member's field must be filled in.
 *
 * @param  ?MEMBER $member_id The member being edited (null: new member)
 * @param  string $field_class Special code representing what kind of field it is
 * @set email_address dob required_cpfs
 * @param  ?string $current_value The value the field has now (null: lookup from member record; cannot do this for a CPF)
 * @param  ?MEMBER $editing_member The member doing the adding/editing operation (null: current member)
 * @param  ?array $adjusted_config_options A map of adjusted config options (null: none)
 * @return boolean Whether the field must be filled in
 */
function member_field_is_required($member_id, $field_class, $current_value = null, $editing_member = null, $adjusted_config_options = null)
{
    if (($field_class == 'dob') && ((get_option_with_overrides('dobs', $adjusted_config_options) == '0') || ((get_option_with_overrides('dobs', $adjusted_config_options) == '1') && ($member_id === null)))) {
        return false;
    }

    if ($editing_member === null) {
        $editing_member = get_member();
    }

    if (has_privilege($editing_member, 'bypass_' . $field_class)) {
        return false;
    }

    // Existing member, allow blank to persist if such a privilege
    if ($member_id !== null) {
        if ($current_value === null) {
            $current_value = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, ($field_class == 'dob') ? ('m_' . $field_class . '_day') : ('m_' . $field_class));
        }

        $cv = trim($current_value);
        if ((@empty($cv)) && (has_privilege($editing_member, 'bypass_' . $field_class . '_if_already_empty'))) {
            return false;
        }
    }

    return true;
}

/**
 * Add a member.
 *
 * @param  SHORT_TEXT $username The username
 * @param  SHORT_TEXT $password The password
 * @param  SHORT_TEXT $email_address The e-mail address
 * @param  ?GROUP $primary_group The member's primary usergroup. Note there are no security checks, so make sure anything you pass is already available for this user (null: default)
 * @param  ?array $secondary_groups A list of secondary usergroups. Note there are no security checks, so make sure anything you pass is already available for this user (null: default/current usergroups)
 * @param  ?integer $dob_day Day of date of birth (null: unknown)
 * @param  ?integer $dob_month Month of date of birth (null: unknown)
 * @param  ?integer $dob_year Year of date of birth (null: unknown)
 * @param  array $custom_fields A map of custom field values (fieldID=>value)
 * @param  ?ID_TEXT $timezone The member timezone, should not be blank (null: auto-detect)
 * @param  ?LANGUAGE_NAME $language The member's language (null: auto detect) (blank: site default)
 * @param  ID_TEXT $theme The member's default theme (blank: default)
 * @param  SHORT_TEXT $title The member's title (blank: get from primary)
 * @param  URLPATH $photo_url The URL to the member's photo (blank: none)
 * @param  URLPATH $photo_thumb_url The URL to the member's photo thumbnail (blank: none)
 * @param  ?URLPATH $avatar_url The URL to the member's avatar (blank: none) (null: choose one automatically)
 * @param  LONG_TEXT $signature The member's signature (blank: none)
 * @param  ?BINARY $preview_posts Whether posts are previewed before they are made (null: global configured default)
 * @param  BINARY $reveal_age Whether the member's age may be shown
 * @param  BINARY $views_signatures Whether the member sees signatures in posts
 * @param  ?BINARY $auto_monitor_contrib_content Whether the member automatically is enabled for notifications for content they contribute to (null: get default from config)
 * @param  ?BINARY $smart_topic_notification Whether to do smart topic notification [i.e. avoid sending so many notifications] (null: global configured default)
 * @param  ?BINARY $mailing_list_style Whether to send mailing-list style notifications (null: global configured default)
 * @param  BINARY $auto_mark_read Mark topics as read automatically
 * @param  ?BINARY $sound_enabled Whether sound is enabled (null: global configured default)
 * @param  BINARY $allow_emails Whether the member allows e-mails via the site
 * @param  BINARY $allow_emails_from_staff Whether the member allows e-mails from staff via the site
 * @param  BINARY $highlighted_name Whether the member username will be highlighted
 * @param  SHORT_TEXT $pt_allow Usergroups that may PT the member
 * @param  LONG_TEXT $pt_rules_text Rules that other members must agree to before they may start a PT with the member
 * @param  BINARY $validated Whether the account has been validated
 * @param  SHORT_TEXT $validated_email_confirm_code The code required before the account becomes active (blank: already entered)
 * @param  ?TIME $on_probation_until When the member is on probation until (null: not on probation)
 * @param  BINARY $is_perm_banned Whether the member is permanently banned
 * @param  boolean $check_correctness Whether to check details for correctness
 * @param  ?IP $ip_address The member's IP address (blank: unknown) (null: IP address of current user)
 * @param  ?ID_TEXT $password_compatibility_scheme The compatibility scheme that the password operates in (blank: none) (null: none [meaning normal Composr salted style] or plain, depending on whether passwords are encrypted)
 * @param  SHORT_TEXT $salt The password salt (blank: password compatibility scheme does not use a salt / auto-generate)
 * @param  ?TIME $join_time When the member joined (null: now)
 * @param  ?TIME $last_visit_time When the member last visited (null: now)
 * @param  ?TIME $last_submit_time The time the member last made a submission (null: set to now)
 * @param  BINARY $profile_views Total number of views to the profile
 * @param  BINARY $total_sessions Total number of sessions (basically, visits)
 * @param  ?AUTO_LINK $id Force an ID (null: don't force an ID)
 * @return AUTO_LINK The ID of the new member
 */
function cns_make_member($username, $password, $email_address = '', $primary_group = null, $secondary_groups = null, $dob_day = null, $dob_month = null, $dob_year = null, $custom_fields = array(), $timezone = null, $language = null, $theme = '', $title = '', $photo_url = '', $photo_thumb_url = '', $avatar_url = null, $signature = '', $preview_posts = null, $reveal_age = 0, $views_signatures = 1, $auto_monitor_contrib_content = null, $smart_topic_notification = null, $mailing_list_style = null, $auto_mark_read = 1, $sound_enabled = null, $allow_emails = 1, $allow_emails_from_staff = 1, $highlighted_name = 0, $pt_allow = '*', $pt_rules_text = '', $validated = 1, $validated_email_confirm_code = '', $on_probation_until = null, $is_perm_banned = 0, $check_correctness = true, $ip_address = null, $password_compatibility_scheme = null, $salt = '', $join_time = null, $last_visit_time = null, $last_submit_time = null, $profile_views = 0, $total_sessions = 0, $id = null)
{
    require_code('form_templates');
    require_code('cns_members');
    require_code('cns_groups');

    if ($password_compatibility_scheme === null) {
        if (get_value('disable_password_hashing') === '1' || $password == ''/*Makes debugging easier or allows basic testing to work on PHP installs with broken OpenSSL*/) {
            $password_compatibility_scheme = 'plain';
        } else {
            $password_compatibility_scheme = '';
        }
    }
    if ((($password_compatibility_scheme == '') || ($password_compatibility_scheme == 'temporary')) && (get_value('disable_password_hashing') === '1')) {
        $password_compatibility_scheme = 'plain';
        $salt = '';
    }
    if (($salt == '') && (($password_compatibility_scheme == '') || ($password_compatibility_scheme == 'temporary'))) {
        require_code('crypt');
        $salt = get_secure_random_string();
        $password_salted = ratchet_hash($password, $salt);
    } else {
        $password_salted = $password;
    }

    if ($primary_group === null) {
        $primary_group = get_first_default_group(); // This is members
    }
    if ($secondary_groups === null) {
        $secondary_groups = cns_get_all_default_groups(false);
    }
    foreach ($secondary_groups as $_g_id => $g_id) {
        if ($g_id == $primary_group) {
            unset($secondary_groups[$_g_id]);
        }
    }

    if ($timezone === null) {
        $timezone = get_site_timezone();
    }
    if ($language === null) {
        $language = user_lang();
    }

    if ($avatar_url === null) {
        if (($GLOBALS['IN_MINIKERNEL_VERSION']) || (!addon_installed('cns_member_avatars'))) {
            $avatar_url = '';
        } else {
            if ((get_option('random_avatars') == '1') && (!running_script('stress_test_loader'))) {
                require_code('themes2');
                $codes = get_all_image_ids_type('cns_default_avatars/default_set', false, $GLOBALS['FORUM_DB']);
                shuffle($codes);
                $results = array();
                foreach ($codes as $code) {
                    if ($code == 'system') {
                        continue;
                    }

                    $count = @intval($GLOBALS['FORUM_DB']->query_select_value('f_members', 'SUM(m_cache_num_posts)', array('m_avatar_url' => find_theme_image($code, false, true))));
                    $results[$code] = $count;
                }
                @asort($results); // @'d as type checker fails for some odd reason
                $found_avatars = array_keys($results);
                $avatar_url = find_theme_image(array_shift($found_avatars), true, true);
            }

            if ($avatar_url === null) {
                $GLOBALS['SITE_DB']->query_delete('theme_images', array('id' => 'cns_default_avatars/default', 'path' => '')); // In case failure cached, gets very confusing
                $avatar_url = find_theme_image('cns_default_avatars/default', true, true);
                if ($avatar_url === null) {
                    $avatar_url = '';
                }
            }
        }
    }

    $preview_posts = (get_option('default_preview_guests') == '1') ? 1 : 0;
    if ($auto_monitor_contrib_content === null) {
        $auto_monitor_contrib_content = (get_option('allow_auto_notifications') == '0') ? 0 : 1;
    }
    if ($smart_topic_notification === null) {
        $smart_topic_notification = (get_option('smart_topic_notification_default') == '1') ? 1 : 0;
    }
    if ($mailing_list_style === null) {
        $mailing_list_style = (get_option('mailing_list_style_default') == '1') ? 1 : 0;
    }
    if ($sound_enabled === null) {
        $sound_enabled = (get_option('sound_enabled_default') == '1') ? 1 : 0;
    }

    $doing_email_option = (get_option('member_email_receipt_configurability') == '2') && (addon_installed('cns_contact_member'));
    if (!$doing_email_option) {
        $allow_emails = 1;
    }
    $doing_email_from_staff_option = (get_option('staff_email_receipt_configurability') == '2');
    if (!$doing_email_from_staff_option) {
        $allow_emails_from_staff = 1;
    }

    if ($check_correctness) {
        if (!in_array($password_compatibility_scheme, array('ldap', 'httpauth'))) {
            require_code('cns_members_action2');
            cns_check_name_valid($username, null, ($password_compatibility_scheme == '') ? $password : null);
        }
        if ((!function_exists('has_actual_page_access')) || (!has_actual_page_access(get_member(), 'admin_cns_members'))) {
            require_code('type_sanitisation');
            if ((!is_email_address($email_address)) && ($email_address != '')) {
                warn_exit(do_lang_tempcode('_INVALID_EMAIL_ADDRESS', escape_html($email_address)));
            }
        }

        if ((get_option('one_per_email_address') != '0') && ($email_address != ''))
        {
            $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_members', 'id', array('m_email_address' => $email_address));
            if ($test !== null) {
                warn_exit(do_lang_tempcode('_EMAIL_ADDRESS_IN_USE'));
            }
        }
    }

    if ($ip_address === null) {
        $ip_address = get_ip_address();
    }

    if ($join_time === null) {
        $join_time = time();
    }
    if ($last_visit_time === null) {
        $last_visit_time = time();
    }
    if ($last_submit_time === null) {
        $last_submit_time = time();
    }

    // Supplement custom field values given with defaults, and check constraints
    $all_fields = list_to_map('id', cns_get_all_custom_fields_match(array_merge(array($primary_group), $secondary_groups)));
    require_code('fields');
    foreach ($all_fields as $field) {
        $field_id = $field['id'];

        if (array_key_exists($field_id, $custom_fields)) {
            if (($check_correctness) && ($field[array_key_exists('cf_show_on_join_form', $field) ? 'cf_show_on_join_form' : 'cf_required'] == 0) && ($field['cf_owner_set'] == 0) && (!has_actual_page_access(get_member(), 'admin_cns_members'))) {
                access_denied('I_ERROR');
            }
        }
    }

    if (!addon_installed('unvalidated')) {
        $validated = 1;
    }
    $map = array(
        'm_username' => $username,
        'm_pass_hash_salted' => $password_salted,
        'm_password_compat_scheme' => $password_compatibility_scheme,
        'm_pass_salt' => $salt,
        'm_password_change_code' => '',
        'm_email_address' => $email_address,
        'm_primary_group' => $primary_group,
        'm_dob_day' => $dob_day,
        'm_dob_month' => $dob_month,
        'm_dob_year' => $dob_year,
        'm_timezone_offset' => $timezone,
        'm_language' => $language,
        'm_theme' => $theme,
        'm_title' => $title,
        'm_photo_url' => $photo_url,
        'm_photo_thumb_url' => $photo_thumb_url,
        'm_avatar_url' => $avatar_url,
        'm_preview_posts' => $preview_posts,
        'm_reveal_age' => $reveal_age,
        'm_views_signatures' => $views_signatures,
        'm_auto_monitor_contrib_content' => $auto_monitor_contrib_content,
        'm_smart_topic_notification' => $smart_topic_notification,
        'm_mailing_list_style' => $mailing_list_style,
        'm_auto_mark_read' => $auto_mark_read,
        'm_sound_enabled' => $sound_enabled,
        'm_allow_emails' => $allow_emails,
        'm_allow_emails_from_staff' => $allow_emails_from_staff,
        'm_highlighted_name' => $highlighted_name,
        'm_pt_allow' => $pt_allow,
        'm_validated' => $validated,
        'm_validated_email_confirm_code' => $validated_email_confirm_code,
        'm_on_probation_until' => $on_probation_until,
        'm_is_perm_banned' => $is_perm_banned,
        'm_ip_address' => $ip_address,
        'm_join_time' => $join_time,
        'm_last_visit_time' => $last_visit_time,
        'm_last_submit_time' => $last_submit_time,
        'm_profile_views' => $profile_views,
        'm_total_sessions' => $total_sessions,
        'm_cache_num_posts' => 0,
        'm_cache_warnings' => 0,
        'm_max_email_attach_size_mb' => 5,
    );
    $map += insert_lang_comcode('m_signature', $signature, 4, $GLOBALS['FORUM_DB']);
    $map += insert_lang_comcode('m_pt_rules_text', $pt_rules_text, 4, $GLOBALS['FORUM_DB']);
    if ($id !== null) {
        $map['id'] = $id;
    }
    $member_id = $GLOBALS['FORUM_DB']->query_insert('f_members', $map, true);

    if ($check_correctness) {
        // If it was an invite/recommendation, award the referrer
        if ((addon_installed('recommend')) && ($email_address != '')) {
            $inviter = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_invites', 'i_inviter', array('i_email_address' => $email_address), 'ORDER BY i_time');
            if ($inviter !== null) {
                if (addon_installed('points')) {
                    require_code('points2');
                    require_lang('recommend');
                    system_gift_transfer(do_lang('RECOMMEND_SITE_TO', $username, get_site_name()), intval(get_option('points_RECOMMEND_SITE')), $inviter);
                }
                if (addon_installed('chat')) {
                    require_code('chat2');
                    friend_add($inviter, $member_id);
                    friend_add($member_id, $inviter);
                }
            }
        }
    }

    $value = null;

    // Store custom fields
    $row = array();
    $all_fields_types = collapse_2d_complexity('id', 'cf_type', $all_fields);
    foreach ($custom_fields as $field_num => $value) {
        if (!array_key_exists($field_num, $all_fields_types)) {
            continue; // Trying to set a field we're not allowed to (doesn't apply to our group)
        }

        $row['field_' . strval($field_num)] = $value;
    }

    // Set custom field row
    $all_fields_regardless = $GLOBALS['FORUM_DB']->query_select('f_custom_fields', array('id', 'cf_type', 'cf_default', 'cf_required'));
    foreach ($all_fields_regardless as $field) {
        $ob = get_fields_hook($field['cf_type']);
        list(, $default, $storage_type) = $ob->get_field_value_row_bits($field, $field['cf_required'] == 1, $field['cf_default'], $GLOBALS['FORUM_DB']);

        if (array_key_exists('field_' . strval($field['id']), $row)) {
            $value = $row['field_' . strval($field['id'])];
        } else {
            $value = $default;
        }

        $row['field_' . strval($field['id'])] = $value;
        if (is_string($value)) { // Should not normally be needed, but the grabbing from cf_default further up is not converted yet
            switch ($storage_type) {
                case 'short_trans':
                case 'long_trans':
                    $row = insert_lang_comcode('field_' . strval($field['id']), $value, 3, $GLOBALS['FORUM_DB']) + $row;
                    break;
                case 'integer':
                    $row['field_' . strval($field['id'])] = ($value == '') ? null : intval($value);
                    break;
                case 'float':
                    $row['field_' . strval($field['id'])] = ($value == '') ? null : floatval($value);
                    break;
            }
        }
    }
    $GLOBALS['FORUM_DB']->query_insert('f_member_custom_fields', array('mf_member_id' => $member_id) + $row);

    require_code('locations_cpfs');
    autofill_geo_cpfs($member_id);

    // Any secondary work...

    foreach ($secondary_groups as $g) {
        if ($g != $primary_group) {
            $GLOBALS['FORUM_DB']->query_delete('f_group_members', array('gm_member_id' => $member_id, 'gm_group_id' => $g), '', 1);
            $GLOBALS['FORUM_DB']->query_insert('f_group_members', array(
                'gm_group_id' => $g,
                'gm_member_id' => $member_id,
                'gm_validated' => 1,
            ));
        }
    }

    $GLOBALS['FORUM_DB']->query_insert('f_group_join_log', array(
        'member_id' => $member_id,
        'usergroup_id' => $primary_group,
        'join_time' => time()
    ));

    if ($check_correctness) {
        if (function_exists('delete_cache_entry')) {
            delete_cache_entry('side_stats');
        }
        delete_value('cns_newest_member_id');
        delete_value('cns_newest_member_username');
    }

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('member', strval($member_id), null, null, true);
    }

    $password_change_days = get_option('password_change_days');
    if (intval($password_change_days) > 0) {
        if ($password_compatibility_scheme == '') {
            require_code('password_rules');
            bump_password_change_date($member_id, $password, $password_salted, $salt);
        }
    }

    require_code('member_mentions');
    dispatch_member_mention_notifications('member', strval($member_id));

    if (function_exists('delete_cache_entry')) {
        delete_cache_entry('main_members');
    }

    if (!get_mass_import_mode()) {
        set_value('cns_member_count', strval(intval(get_value('cns_member_count')) + 1));
    }

    if ($validated == 1) {
        require_code('sitemap_xml');
        notify_sitemap_node_add('_SEARCH:members:view:' . strval($member_id), $join_time, null, SITEMAP_IMPORTANCE_LOW, 'monthly', true);
    }

    return $member_id;
}

/**
 * Get details of predefined templated fields.
 *
 * @return array List of predefined templated fields, each being a map
 */
function _cns_predefined_custom_field_details()
{
    return array(
        'sn_twitter' => array(
            'type' => 'codename',
            'icon' => 'icons/links/twitter',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="http://twitter.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'im_skype' => array(
            'type' => 'codename',
            'icon' => 'icons/links/skype',
            'section' => 'contact',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="skype:{RAW*}?call">{NAME*}</a>',
        ),
        'im_jabber' => array(
            'type' => 'codename',
            'icon' => 'icons/links/jabber',
            'section' => 'contact',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="xmpp:{RAW*}">{NAME*}</a>',
        ),
        'im_discord' => array(
            'type' => 'codename',
            'icon' => 'icons/links/discord',
            'section' => 'contact',
            'tempcode' => '{NAME*}: {RAW*}',
        ),
        'github' => array(
            'type' => 'codename',
            'icon' => 'icons/links/github',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://github.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_instagram' => array(
            'type' => 'codename',
            'icon' => 'icons/links/instagram',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://www.instagram.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_minds' => array(
            'type' => 'codename',
            'icon' => 'icons/links/minds',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://www.minds.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_pinterest' => array(
            'type' => 'codename',
            'icon' => 'icons/links/pinterest',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://www.pinterest.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_snapchat' => array(
            'type' => 'codename',
            'icon' => 'icons/links/snapchat',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://snapchat.com/add/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'soundcloud' => array(
            'type' => 'codename',
            'icon' => 'icons/links/soundcloud',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://soundcloud.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'im_telegram' => array(
            'type' => 'codename',
            'icon' => 'icons/links/telegram',
            'section' => 'contact',
            'tempcode' => '{NAME*}: {RAW*}',
        ),
        'sn_tumblr' => array(
            'type' => 'codename',
            'icon' => 'icons/links/tumblr',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://{RAW*}.tumblr.com" rel="me">{NAME*}</a>',
        ),
        'sn_twitch' => array(
            'type' => 'codename',
            'icon' => 'icons/links/twitch',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://www.twitch.tv/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'im_whatsapp' => array(
            'type' => 'codename',
            'icon' => 'icons/links/whatsapp',
            'section' => 'contact',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="whatsapp://send?phone={RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_sina_weibo' => array(
            'type' => 'codename',
            'icon' => 'icons/links/sina_weibo',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="http://weibo.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_tencent_weibo' => array(
            'type' => 'codename',
            'icon' => 'icons/links/tencent_weibo',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="http://t.qq.com/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'im_wechat' => array(
            'type' => 'codename',
            'icon' => 'icons/links/wechat',
            'section' => 'contact',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="http://weixin.qq.com/r/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'playstation_network' => array(
            'type' => 'codename',
            'icon' => 'icons/links/playstation_network',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://secure.eu.playstation.com/psn/{RAW*}/" rel="me">{NAME*}</a>',
        ),
        'xbox_live' => array(
            'type' => 'codename',
            'icon' => 'icons/links/xbox_live',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="http://live.xbox.com/en-US/Profile?gamertag={RAW*}" rel="me">{NAME*}</a>',
        ),
        'steam' => array(
            'type' => 'codename',
            'icon' => 'icons/links/steam',
            'section' => '',
            'tempcode' => '{NAME*}: {RAW*}',
        ),
        'sn_steemit' => array(
            'type' => 'codename',
            'icon' => 'icons/links/steemit',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://steemit.com/@{RAW*}" rel="me">{NAME*}</a>',
        ),
        'utopian' => array(
            'type' => 'codename',
            'icon' => 'icons/links/utopian',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://steemit.com/@{RAW*}" rel="me">{NAME*}</a>',
        ),
        'dtube' => array(
            'type' => 'codename',
            'icon' => 'icons/links/dtube',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="https://d.tube/c/{RAW*}" rel="me">{NAME*}</a>',
        ),
        'im_line' => array(
            'type' => 'codename',
            'icon' => 'icons/links/line',
            'section' => 'contact',
            'tempcode' => '{NAME*}: {RAW*}',
        ),
        'im_viber' => array(
            'type' => 'codename',
            'icon' => 'icons/links/viber',
            'section' => 'contact',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="viber://add?number={RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_facebook' => array(
            'type' => 'url',
            'icon' => 'icons/links/facebook',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'amazon' => array(
            'type' => 'url',
            'icon' => 'icons/links/amazon',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'bandcamp' => array(
            'type' => 'url',
            'icon' => 'icons/links/bandcamp',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'dailymotion' => array(
            'type' => 'url',
            'icon' => 'icons/links/dailymotion',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'dropbox' => array(
            'type' => 'url',
            'icon' => 'icons/links/dropbox',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'flattr' => array(
            'type' => 'url',
            'icon' => 'icons/links/flattr',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'hacker_news' => array(
            'type' => 'url',
            'icon' => 'icons/links/hacker_news',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_linkedin' => array(
            'type' => 'url',
            'icon' => 'icons/links/linkedin',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'patreon' => array(
            'type' => 'url',
            'icon' => 'icons/links/patreon',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'quora' => array(
            'type' => 'url',
            'icon' => 'icons/links/quora',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_reddit' => array(
            'type' => 'url',
            'icon' => 'icons/links/reddit',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'slashdot' => array(
            'type' => 'url',
            'icon' => 'icons/links/slashdot',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'spotify' => array(
            'type' => 'url',
            'icon' => 'icons/links/spotify',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'stack_exchange' => array(
            'type' => 'url',
            'icon' => 'icons/links/stack_exchange',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'stack_overflow' => array(
            'type' => 'url',
            'icon' => 'icons/links/stack_overflow',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'vimeo' => array(
            'type' => 'url',
            'icon' => 'icons/links/vimeo',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'youtube' => array(
            'type' => 'url',
            'icon' => 'icons/links/youtube',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_vk' => array(
            'type' => 'url',
            'icon' => 'icons/links/vk',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_baidu_tieba' => array(
            'type' => 'url',
            'icon' => 'icons/links/baidu_tieba',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_qzone' => array(
            'type' => 'url',
            'icon' => 'icons/links/qzone',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'bitcoin' => array(
            'type' => 'url',
            'icon' => 'icons/links/bitcoin',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'website' => array(
            'type' => 'url',
            'icon' => 'icons/menu/home',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'gender' => array(
            'type' => 'short_text',
            'icon' => '',
            'section' => '',
            'tempcode' => '',
        ),
        'location' => array(
            'type' => 'short_text',
            'icon' => '',
            'section' => '',
            'tempcode' => '',
        ),
        'occupation' => array(
            'type' => 'short_text',
            'icon' => '',
            'section' => '',
            'tempcode' => '',
        ),
        'paypal' => array(
            'type' => 'email',
            'icon' => 'icons/links/paypal',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{RAW*}" rel="me">{NAME*}</a>',
        ),
        'sn_mastodon' => array(
            'type' => 'email',
            'icon' => 'icons/links/mastodon',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{$PREG_REPLACE*,(.*)@(.*),https://$2/@$1,{RAW}}" rel="me">{NAME*}</a>',
        ),
        'sn_diaspora' => array(
            'type' => 'email',
            'icon' => 'icons/links/diaspora',
            'section' => '',
            'tempcode' => '<a title="{NAME*} {!LINK_NEW_WINDOW}" href="{$PREG_REPLACE*,(.*)@(.*),https://$2/@$1,{RAW}}" rel="me">{NAME*}</a>',
        ),
        'about' => array(
            'type' => 'long_trans',
            'icon' => '',
            'section' => '',
            'tempcode' => '',
        ),
        'staff_notes' => array(
            'type' => 'long_trans',
            'icon' => '',
            'section' => '',
            'tempcode' => '',
        ),
        'interests' => array(
            'type' => 'long_trans',
            'icon' => '',
            'section' => '',
            'tempcode' => '',
        ),
    );
}

/**
 * Make a Custom Profile Field from one of the predefined templates (this is often used by importers).
 * Also see the cpf_install source file.
 *
 * @param  ID_TEXT $type The identifier of the predefined Custom Profile Field
 * @return AUTO_LINK The ID of the new Custom Profile Field
 */
function cns_make_predefined_content_field($type)
{
    $details = _cns_predefined_custom_field_details();
    $_type = $details[$type]['type'];
    $icon = $details[$type]['icon'];
    $section = $details[$type]['section'];
    $tempcode = $details[$type]['tempcode'];

    $public_view = 1;
    $owner_view = 1;
    $owner_set = 1;
    $required = 0;
    $show_in_posts = 0;
    $show_in_post_previews = 0;

    if ($type == 'staff_notes') {
        $public_view = 0;
        $owner_view = 0;
        $owner_set = 0;
    }

    if ($type == 'interests' || $type == 'location') {
        $show_in_posts = 1;
        $show_in_post_previews = 1;
    }

    require_lang('cns_special_cpf');

    if (substr($type, 0, 4) == 'cms_') {
        $title = do_lang('SPECIAL_CPF__' . $type);
        $description = '';
    } else {
        $title = do_lang('DEFAULT_CPF_' . $type . '_NAME');
        $description = do_lang('DEFAULT_CPF_' . $type . '_DESCRIPTION');
    }

    return cns_make_custom_field($title, 0, $description, '', $public_view, $owner_view, $owner_set, 0, $_type, $required, $show_in_posts, $show_in_post_previews, null, '', 0, '', $icon, $section, $tempcode, true);
}

/**
 * Find how to store a field in the database.
 *
 * @param  ID_TEXT $type The field type
 * @param  BINARY $encrypted Whether the field is encrypted
 * @param  string $__default The default value to use
 * @return array A tuple: the DB field type, whether to index, the default (in correct data type)
 */
function get_cpf_storage_for($type, $encrypted = 0, $__default = '')
{
    $default = null;

    require_code('fields');
    $ob = get_fields_hook($type);
    list(, $_default, $storage_type) = $ob->get_field_value_row_bits(array('id' => null, 'cf_type' => $type, 'cf_default' => $__default), false, $__default);
    $_type = ($encrypted == 1) ? 'LONG_TEXT' : 'SHORT_TEXT';
    switch ($storage_type) {
        case 'short_trans':
            $_type = 'SHORT_TRANS__COMCODE';
            $default = $_default;
            break;
        case 'long_trans':
            $_type = 'LONG_TRANS__COMCODE';
            $default = $_default;
            break;
        case 'long':
            $_type = 'LONG_TEXT';
            $default = $_default;
            break;
        case 'integer':
            $_type = '?INTEGER';
            $default = ($_default == '') ? null : intval($_default);
            break;
        case 'float':
            $_type = '?REAL';
            $default = ($_default == '') ? null : floatval($_default);
            break;
        default:
            $default = $_default;
            break;
    }

    $index = true;
    switch ($type) {
        case 'short_trans':
        case 'short_trans_multi':
        case 'long_trans':
        case 'posting_field':
        case 'tick':
        case 'float':
        case 'color':
        case 'content_link':
        case 'date':
        case 'just_date':
        case 'just_time':
        case 'picture':
        case 'password':
        case 'page_link':
        case 'upload':
            $index = false;
            break;
    }

    return array($_type, $index, $default);
}

/**
 * Make a Custom Profile Field.
 *
 * @param  SHORT_TEXT $name Name of the field
 * @param  BINARY $locked Whether the field is locked (i.e. cannot be deleted from the system).
 * @param  SHORT_TEXT $description Description of the field
 * @param  LONG_TEXT $default The default value for the field
 * @param  BINARY $public_view Whether the field is publicly viewable
 * @param  BINARY $owner_view Whether the field is viewable by the owner
 * @param  BINARY $owner_set Whether the field may be set by the owner
 * @param  BINARY $encrypted Whether the field is encrypted
 * @param  ID_TEXT $type The type of the field
 * @set short_text long_text short_trans long_trans integer upload picture url list tick float
 * @param  BINARY $required Whether it is required that every member have this field filled in
 * @param  BINARY $show_in_posts Whether this field is shown in posts and places where member details are highlighted (such as an image in a member gallery)
 * @param  BINARY $show_in_post_previews Whether this field is shown in preview places, such as in the forum member tooltip
 * @param  ?integer $order The order of this field relative to other fields (null: next)
 * @param  LONG_TEXT $only_group The usergroups that this field is confined to (comma-separated list)
 * @param  BINARY $show_on_join_form Whether the field is to be shown on the join form
 * @param  SHORT_TEXT $options Field options
 * @param  ID_TEXT $icon Whether it is required that every member have this field filled in
 * @param  ID_TEXT $section Whether it is required that every member have this field filled in
 * @param  LONG_TEXT $tempcode Whether it is required that every member have this field filled in
 * @param  boolean $no_name_dupe Whether to check that no field has this name already
 * @return AUTO_LINK The ID of the new Custom Profile Field
 */
function cns_make_custom_field($name, $locked = 0, $description = '', $default = '', $public_view = 0, $owner_view = 0, $owner_set = 0, $encrypted = 0, $type = 'long_text', $required = 0, $show_in_posts = 0, $show_in_post_previews = 0, $order = null, $only_group = '', $show_on_join_form = 0, $options = '', $icon = '', $section = '', $tempcode = '', $no_name_dupe = false)
{
    require_code('global4');
    prevent_double_submit('ADD_CUSTOM_PROFILE_FIELD', null, $name);

    if ($only_group == '-1') {
        $only_group = '';
    }

    // Can't have publicly-viewable encrypted fields
    require_code('encryption');
    if ($encrypted == 1) {
        $public_view = 0;
    }

    if ($no_name_dupe) {
        $test = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_custom_fields', 'id', array($GLOBALS['FORUM_DB']->translate_field_ref('cf_name') => $name));
        if ($test !== null) {
            pop_db_scope_check();
            return $test;
        }
    }

    if ($order === null) {
        $order = $GLOBALS['FORUM_DB']->query_select_value('f_custom_fields', 'MAX(cf_order)');
        if ($order === null) {
            $order = 0;
        } else {
            $order++;
        }
    }

    $map = array(
        'cf_locked' => $locked,
        'cf_default' => $default,
        'cf_public_view' => $public_view,
        'cf_owner_view' => $owner_view,
        'cf_owner_set' => $owner_set,
        'cf_type' => $type,
        'cf_required' => $required,
        'cf_show_in_posts' => $show_in_posts,
        'cf_show_in_post_previews' => $show_in_post_previews,
        'cf_order' => $order,
        'cf_only_group' => $only_group,
        'cf_show_on_join_form' => $show_on_join_form,
        'cf_icon' => $icon,
        'cf_section' => $section,
        'cf_tempcode' => $tempcode,
    );

    // LEGACY
    $_version_database = get_value('ocf_version');
    if ($_version_database === null) {
        $_version_database = get_value('cns_version');
    }
    if ((intval($_version_database) !== 8) && (intval($_version_database) !== 9)) {
        $map['cf_options'] = $options;
    }

    if (substr($name, 0, 4) == 'cms_') {
        require_code('lang3');
        $map += lang_code_to_static_content('cf_name', $name, false, 2, $GLOBALS['FORUM_DB']);
    } else {
        $map += insert_lang('cf_name', $name, 2, $GLOBALS['FORUM_DB']);
    }
    $map += insert_lang('cf_description', $description, 2, $GLOBALS['FORUM_DB']);
    $id = $GLOBALS['FORUM_DB']->query_insert('f_custom_fields', $map + array('cf_encrypted' => $encrypted), true);

    list($_type, $index, $_default) = get_cpf_storage_for($type, $encrypted, $default);

    $GLOBALS['FORUM_DB']->add_table_field('f_member_custom_fields', 'field_' . strval($id), $_type, $_default);

    build_cpf_indices($id, $index, $type, $_type);

    log_it('ADD_CUSTOM_PROFILE_FIELD', strval($id), $name);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('cpf', strval($id), null, null, true);
    }

    if (function_exists('delete_cache_entry')) {
        delete_cache_entry('main_members');
    }

    if (function_exists('persistent_cache_delete')) {
        persistent_cache_delete('CUSTOM_FIELD_CACHE');
        persistent_cache_delete('LIST_CPFS');
    }

    return $id;
}

/**
 * Make Custom Profile Field indices.
 *
 * @param  AUTO_LINK $id CPF ID
 * @param  boolean $index Whether an index is needed for search purposes (there may be other reasons though)
 * @param  ID_TEXT $type CPF type
 * @param  ID_TEXT $_type Underlying field type
 */
function build_cpf_indices($id, $index, $type, $_type)
{
    $indices_count = $GLOBALS['FORUM_DB']->query_select_value('db_meta_indices', 'COUNT(*)', array('i_table' => 'f_member_custom_fields'));
    if ($indices_count < 60) { // Could be 64 but trying to be careful here...
        if ($index) {
            if ($_type != 'LONG_TEXT') {
                $GLOBALS['FORUM_DB']->create_index('f_member_custom_fields', 'mcf' . strval($id), array('field_' . strval($id)), 'mf_member_id');
            }
            if (strpos($_type, '_TEXT') !== false) {
                $GLOBALS['FORUM_DB']->create_index('f_member_custom_fields', '#mcf_ft_' . strval($id), array('field_' . strval($id)), 'mf_member_id');
            }
        } elseif ((strpos($type, 'trans') !== false) || ($type == 'posting_field')) { // for efficient joins
            $GLOBALS['FORUM_DB']->create_index('f_member_custom_fields', 'mcf' . strval($id), array('field_' . strval($id)), 'mf_member_id');
        }
    }
}
