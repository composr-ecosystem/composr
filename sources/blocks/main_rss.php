<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    syndication_blocks
 */

/**
 * Block class.
 */
class Block_main_rss
{
    /**
     * Find details of the block.
     *
     * @return ?array Map of block info (null: block is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 3;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'syndication_blocks';
        $info['parameters'] = ['param', 'max_entries', 'title', 'copyright'];
        return $info;
    }

    /**
     * Find caching details for the block.
     *
     * @return ?array Map of cache details (cache_on and ttl) (null: block is disabled)
     */
    public function caching_environment() : ?array
    {
        $info = [];
        $info['cache_on'] = ['block_main_rss__cache_on'];
        $info['ttl'] = intval(get_option('rss_update_time'));
        return $info;
    }

    /**
     * Execute the block.
     *
     * @param  array $map A map of parameters
     * @return Tempcode The result of execution
     */
    public function run(array $map) : object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('syndication_blocks', $error_msg)) {
            return $error_msg;
        }

        if (!addon_installed('news')) {
            return do_template('RED_ALERT', ['_GUID' => 'u0z4xtei5rorsx4ahx6gxuol8y64yi29', 'TEXT' => do_lang_tempcode('MISSING_ADDON', escape_html('news'))]);
        }

        require_lang('news');
        require_lang('rss');
        require_css('news');
        require_code('crypt');

        $block_id = get_block_id($map);

        $url = empty($map['param']) ? (get_brand_base_url() . '/backend.php?type=rss&mode=news') : $map['param'];

        require_code('rss');
        $rss_feeds = [];
        $urls = preg_split('#\s+#', $url);
        $error = null;
        foreach (array_reverse($urls) as $url) { // Reversed so that $rss stays as the first feed, and hence the title etc comes from the first, not the last
            $url = trim($url);
            if ($url == '') {
                continue;
            }

            $rss = new CMS_RSS($url, false, 6.0 / floatval(count($urls)));
            if ($rss->error !== null) {
                $error = $rss->error;
                if ($GLOBALS['FORUM_DRIVER']->is_staff(get_member())) {
                    attach_message($url . ': ' . $error, 'warn', false, true);
                }
                continue;
            }
            $rss_feeds[] = $rss;
        }

        if (($error !== null) && (empty($rss_feeds))) {
            $GLOBALS['DO_NOT_CACHE_THIS'] = true;
            require_code('failure');
            cms_error_log(brand_name() . ': WARNING ' . do_lang('rss:ERROR_HANDLING_RSS_FEED', $url, $error), 'error_occurred_rss');
            if (cron_installed(true)) {
                if (!$GLOBALS['FORUM_DRIVER']->is_staff(get_member())) {
                    return new Tempcode();
                }
            }
            return do_template('INLINE_WIP_MESSAGE', ['_GUID' => 'c2a067db18cd5f14392fa922b06967e4', 'MESSAGE' => htmlentities($error)]);
        }

        if (addon_installed('news')) {
            require_code('news');
            $news_cats = load_news_cat_rows('nc_owner IS NULL');
        } else {
            $news_cats = [];
        }

        if (!array_key_exists('title', $rss->gleamed_feed)) {
            $rss->gleamed_feed['title'] = do_lang_tempcode('RSS_STREAM');
        }
        if (array_key_exists('title', $map)) {
            $rss->gleamed_feed['title'] = $map['title'];
        }

        // Reduce what we collected about the feed to a minimum. This is very awkward, as we don't know what's here.
        if (!array_key_exists('copyright', $rss->gleamed_feed)) {
            $rss->gleamed_feed['copyright'] = '';
        }
        if (array_key_exists('copyright', $map)) {
            $rss->gleamed_feed['copyright'] = $map['copyright'];
        }

        // Now for the actual stream contents
        $max = array_key_exists('max_entries', $map) ? intval($map['max_entries']) : 10;
        $content = new Tempcode();
        $items = [];
        foreach ($rss_feeds as $_rss) {
            foreach ($_rss->gleamed_items as $item) {
                if (!array_key_exists('clean_add_date', $item)) {
                    $item['clean_add_date'] = time();
                }
                $items[] = $item;
            }
        }
        sort_maps_by($items, 'clean_add_date');
        $items = array_reverse($items);
        foreach ($items as $i => $item) {
            if ($i >= $max) {
                break;
            }

            if (array_key_exists('full_url', $item)) {
                $_full_url = $item['full_url'];
            } elseif (array_key_exists('guid', $item)) {
                $_full_url = $item['guid'];
            } elseif (array_key_exists('comment_url', $item)) {
                $_full_url = $item['comment_url'];
            } else {
                $_full_url = '';
            }

            $_title = array_key_exists('title', $item) ? $item['title'] : do_lang('UNKNOWN');
            $_title = array_key_exists('title', $item) ? $item['title'] : '';

            $full_url = ($_full_url != '') ? hyperlink($_full_url, do_lang_tempcode('VIEW'), true, false, $_title) : new Tempcode();

            $news_full = '';
            if (!array_key_exists('news', $item)) {
                $news = (array_key_exists('news_article', $item)) ? $item['news_article'] : '';
            } else {
                $news = $item['news'];
                if (array_key_exists('news_article', $item)) {
                    $news_full = $item['news_article'];
                }
            }

            if (array_key_exists('author', $item)) {
                $_author = $item['author'];
                if (array_key_exists('author_url', $item)) {
                    $__author = hyperlink($item['author_url'], $_author, false, true);
                } elseif (array_key_exists('author_email', $item)) {
                    $__author = hyperlink(protect_from_escaping(mailto_obfuscated() . ((strpos($item['author_email'], '&') !== false) ? $item['author_email'] : obfuscate_email_address($item['author_email']))), $_author, false, true);
                } else {
                    $__author = make_string_tempcode($_author);
                }
                $author = do_lang_tempcode('SUBMITTED_BY', $__author->evaluate());
            } else {
                $author = new Tempcode();
            }

            $category = '';
            $category_img = '';
            if (array_key_exists('category', $item)) {
                global $THEME_IMAGES_CACHE;
                $cat = null;
                foreach ($news_cats as $_cat => $news_cat) {
                    if (get_translated_text($news_cat['nc_title']) == $item['category']) {
                        $cat = $_cat;
                    }
                }
                if ($cat !== null) {
                    $category_img = ($news_cats[$cat]['nc_img'] == '') ? '' : find_theme_image($news_cats[$cat]['nc_img']);
                }
                $category = $item['category'];
            }

            if ($category_img == '') {
                if (!empty($item['rep_image'])) {
                    $category_img = $item['rep_image'];
                }
            }

            $content->attach(do_template('BLOCK_MAIN_RSS_SUMMARY', [
                '_GUID' => '9ca64090348263449ea1fcea75c8ed5f',
                'BLOCK_ID' => $block_id,
                'FEED_URL' => $url,
                'DATE' => array_key_exists('add_date', $item) ? $item['add_date'] : '',
                'DATE_RAW' => array_key_exists('clean_add_date', $item) ? strval($item['clean_add_date']) : '',
                'AUTHOR' => $author,
                'CATEGORY' => $category,
                'CATEGORY_IMG' => $category_img,
                'FULL_URL' => $full_url,
                'FULL_URL_RAW' => $_full_url,
                'NEWS_TITLE' => $_title,
                'NEWS' => $news,
                'NEWS_FULL' => $news_full,
            ]));
        }

        if (array_key_exists('author', $rss->gleamed_feed)) {
            $__author = null;
            $_author_string = $rss->gleamed_feed['author'];
            if (array_key_exists('url', $rss->gleamed_feed)) {
                $__author = hyperlink($rss->gleamed_feed['url'], $_author_string, true, true);
            } elseif (array_key_exists('author_url', $rss->gleamed_feed)) {
                $__author = hyperlink($rss->gleamed_feed['author_url'], $_author_string, true, true);
            } elseif (array_key_exists('author_email', $rss->gleamed_feed)) {
                $__author = hyperlink(mailto_obfuscated() . obfuscate_email_address($rss->gleamed_feed['author_email']), $_author_string, true, true);
            }
            if ($__author !== null) {
                $author = do_lang_tempcode('RSS_SOURCE_FROM', $__author->evaluate());
            } else {
                $author = do_lang_tempcode('RSS_SOURCE_FROM', escape_html($_author_string));
            }
        } else {
            $author = new Tempcode();
        }

        return do_template('BLOCK_MAIN_RSS', [
            '_GUID' => '6c9c1287abff88fda881e3e25ef7b296',
            'BLOCK_ID' => $block_id,
            'FEED_URL' => $url,
            'TITLE' => $rss->gleamed_feed['title'],
            'COPYRIGHT' => $rss->gleamed_feed['copyright'],
            'AUTHOR' => $author,
            'CONTENT' => $content,
        ]);
    }
}

/**
 * Find the cache signature for the block.
 *
 * @param  array $map The block parameters
 * @return array The cache signature
 */
function block_main_rss__cache_on(array $map) : array
{
    return [cron_installed(true) ? null : $GLOBALS['FORUM_DRIVER']->is_staff(get_member()), array_key_exists('max_entries', $map) ? intval($map['max_entries']) : 10, array_key_exists('title', $map) ? $map['title'] : '', array_key_exists('copyright', $map) ? $map['copyright'] : '', array_key_exists('param', $map) ? $map['param'] : ''];
}
