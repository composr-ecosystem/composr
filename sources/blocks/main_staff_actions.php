<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_adminzone_dashboard
 */

/**
 * Block class.
 */
class Block_main_staff_actions
{
    /**
     * Find details of the block.
     *
     * @return ?array Map of block info (null: block is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 3;
        $info['locked'] = true;
        $info['parameters'] = ['max', 'filter_by_member', 'include_duplicates', 'include_user_activities', 'sort'];
        return $info;
    }

    /**
     * Find caching details for the block.
     *
     * @return ?array Map of cache details (cache_on and ttl) (null: block is disabled)
     */
    public function caching_environment() : ?array
    {
        $info = [];
        $info['cache_on'] = <<<'PHP'
        [
            (get_param_integer('filter_by_member', array_key_exists('filter_by_member', $map) ? intval($map['filter_by_member']) : 0) == 1),
            (get_param_integer('include_duplicates', isset($_GET['filter_by_member']) ? 0 : (array_key_exists('include_duplicates', $map) ? intval($map['include_duplicates']) : 1)) == 1),
            (get_param_integer('include_user_activities', isset($_GET['filter_by_member']) ? 0 : (array_key_exists('include_user_activities', $map) ? intval($map['include_user_activities']) : 0)) == 1) ? get_member() : null,
            get_param_integer('sa_start', 0),
            get_param_integer('sa_max', array_key_exists('max', $map) ? intval($map['max']) : 10),
            get_param_string('sa_sort', array_key_exists('sort', $map) ? $map['sort'] : 'date_and_time DESC'),
        ]
PHP;
        $info['ttl'] = 60 * 5;
        return $info;
    }

    /**
     * Uninstall the block.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('actionlogs');
    }

    /**
     * Install the block.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        $GLOBALS['SITE_DB']->create_table('actionlogs', [
            'id' => '*AUTO',
            'the_type' => 'ID_TEXT',
            'param_a' => 'ID_TEXT',
            'param_b' => 'SHORT_TEXT',
            'member_id' => 'MEMBER',
            'warning_id' => '?AUTO_LINK',
            'ip' => 'IP',
            'date_and_time' => 'TIME',
        ]);

        $GLOBALS['SITE_DB']->create_index('actionlogs', 'xas', ['member_id']);
        $GLOBALS['SITE_DB']->create_index('actionlogs', 'ts', ['date_and_time']);
        $GLOBALS['SITE_DB']->create_index('actionlogs', 'aip', ['ip']);
        $GLOBALS['SITE_DB']->create_index('actionlogs', 'athe_type', ['the_type']);

        if (($upgrade_from !== null) && ($upgrade_from < 3)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('actionlogs', 'warning_id', '?AUTO_LINK');
        }
    }

    /**
     * Execute the block.
     *
     * @param  array $map A map of parameters
     * @return Tempcode The result of execution
     */
    public function run(array $map) : object
    {
        if (!addon_installed('actionlog')) {
            return do_template('RED_ALERT', ['_GUID' => 'kimazz9b50kv3de1drxujlw7p5haozvo', 'TEXT' => do_lang_tempcode('MISSING_ADDON', escape_html('actionlog'))]);
        }

        require_all_lang();
        require_css('adminzone_dashboard');
        require_code('actionlog');

        $block_id = get_block_id($map);

        $filter_by_member = (get_param_integer('filter_by_member', array_key_exists('filter_by_member', $map) ? intval($map['filter_by_member']) : 0) == 1);
        $include_duplicates = (get_param_integer('include_duplicates', isset($_GET['filter_by_member']) ? 0 : (array_key_exists('include_duplicates', $map) ? intval($map['include_duplicates']) : 1)) == 1);
        $include_user_activities = (get_param_integer('include_user_activities', isset($_GET['filter_by_member']) ? 0 : (array_key_exists('include_user_activities', $map) ? intval($map['include_user_activities']) : 0)) == 1);

        $start = get_param_integer('sa_start', 0);
        $max = get_param_integer('sa_max', array_key_exists('max', $map) ? intval($map['max']) : 10);
        $sort = get_param_string('sa_sort', array_key_exists('sort', $map) ? $map['sort'] : 'date_and_time DESC', INPUT_FILTER_GET_COMPLEX);

        $sortables = [
            'date_and_time' => [do_lang_tempcode('TIME'), 'DESC'],
            'frequency' => [do_lang_tempcode('POPULARITY'), 'DESC'],
        ];
        $test = explode(' ', $sort, 2);
        if (count($test) == 1) {
            $test[1] = 'DESC';
        }
        list($sortable, $sort_order) = $test;
        if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
        }
        inform_non_canonical_parameter('sa_sort');

        require_code('templates_results_table');
        $header_row = results_header_row(
            [
                do_lang_tempcode('USERNAME'),
                /*do_lang_tempcode('IP_ADDRESS'),*/
                do_lang_tempcode($include_duplicates ? 'ACTION_WHEN_LAST' : 'ACTION_WHEN'),
                do_lang_tempcode('ACTION'),
                do_lang_tempcode('DETAILS'),
                null,
            ],
            $sortables,
            'sa_sort',
            $sortable . ' ' . $sort_order
        );

        $where = [];
        if ($filter_by_member) {
            $where['member_id'] = get_member();
        }

        if ($sortable == 'frequency') {
            $_sortable = '(SELECT COUNT(*) FROM ' . get_table_prefix() . 'actionlogs x WHERE x.the_type=r.the_type)' . ' ' . $sort_order . ',date_and_time' . ' ' . $sort_order;
        } else {
            $_sortable = $sortable . ' ' . $sort_order;
        }

        $result_entries = new Tempcode();
        $done = 0;
        $max_rows = $GLOBALS['SITE_DB']->query_select_value('actionlogs', 'COUNT(*)', $where);
        $done_already = [];
        $_start = $start;

        do {
            $rows = $GLOBALS['SITE_DB']->query_select('actionlogs r', ['*'], $where, 'ORDER BY ' . $_sortable, $max, $_start);
            foreach ($rows as $myrow) {
                if ($myrow['param_a'] !== null) {
                    $a = $myrow['param_a'];
                } else {
                    $a = '';
                }
                if ($myrow['param_b'] !== null) {
                    $b = $myrow['param_b'];
                } else {
                    $b = '';
                }

                require_code('templates_tooltip');
                $crop_length_a = 17;
                $crop_length_b = 22;
                $_a = generate_tooltip_by_truncation($a, ($b == '') ? ($crop_length_a + $crop_length_b + 3/*A bit of extra tolerance*/) : $crop_length_a);
                $_b = ($b == '') ? null : generate_tooltip_by_truncation($b, $crop_length_b);

                $type_str = do_lang($myrow['the_type'], $_a, $_b, null, null, false);
                if ($type_str === null) {
                    $type_str = $myrow['the_type'];
                }

                $test = actionlog_linkage($myrow, $crop_length_a, $crop_length_b);
                if ($test !== null) {
                    list($_a, $_b, $flags) = $test;
                    if ((!$include_user_activities) && (($flags & ACTIONLOG_FLAG__USER_ACTION) != 0)) {
                        continue;
                    }
                }

                if (!$include_duplicates) {
                    if ($sortable == 'frequency') {
                        $sz_key = serialize([$myrow['the_type']]);
                    } else {
                        $sz_key = serialize([$myrow['the_type'], $_a->evaluate(), ($_b === null) ? null : $_b->evaluate()]);
                    }
                    if (array_key_exists($sz_key, $done_already)) {
                        continue;
                    }
                    $done_already[$sz_key] = true;
                }

                $username = $GLOBALS['FORUM_DRIVER']->get_username($myrow['member_id']);
                if ($username === null) {
                    $username = do_lang('UNKNOWN');
                }

                $ip = generate_tooltip_by_truncation($myrow['ip'], 12);

                $mode = array_key_exists('l_reason', $myrow) ? 'cns' : 'cms';
                $url = build_url(['page' => 'admin_actionlog', 'type' => 'view', 'id' => $myrow['id'], 'mode' => $mode], get_module_zone('admin_actionlog'));
                $mode_nice = ($mode == 'cms') ? 'Composr' : 'Conversr';
                $date = hyperlink(
                    $url,
                    symbol_tempcode('MAKE_RELATIVE_DATE', [strval($myrow['date_and_time']), '1'], [ENTITY_ESCAPED]),
                    false,
                    false,
                    '#' . strval($myrow['id']),
                    null,
                    null,
                    null,
                    '_top'
                );

                $result_entries->attach(results_entry(
                    [
                        escape_html($username),
                        /*Not enough space $ip,*/
                        $date,
                        $type_str,
                        $_a,
                        $_b
                    ],
                    false
                ));

                $done++;

                if ($done == $max) {
                    break 2;
                }
            }

            $_start += $max;
        } while (!empty($rows));

        $content = results_table(do_lang_tempcode('ACTIONS'), $start, 'sa_start', $max, 'sa_max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order, 'sa_sort', new Tempcode(), [], null, 5, '1c8645bc2a3ff5bec2e003142185561g', false, 'tray-actionlog');

        // Render block wrapper template around actions table
        return do_template('BLOCK_MAIN_STAFF_ACTIONS', [
            '_GUID' => '16a5b384015504a6a57fc4ddedbe91a7',
            'BLOCK_ID' => $block_id,
            'BLOCK_PARAMS' => comma_list_arr_to_str($map),
            'CONTENT' => $content,
            'FILTER_BY_MEMBER' => $filter_by_member,
            'INCLUDE_DUPLICATES' => $include_duplicates,
            'INCLUDE_USER_ACTIVITIES' => $include_user_activities,
        ]);
    }
}
