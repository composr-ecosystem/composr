<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    newsletter
 */

/**
 * Block class.
 */
class Block_main_newsletter_signup
{
    /**
     * Find details of the block.
     *
     * @return ?array Map of block info (null: block is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'newsletter';
        $info['parameters'] = ['subject', 'path', 'to', 'param', 'button_only'];
        return $info;
    }

    /**
     * Find caching details for the block.
     *
     * @return ?array Map of cache details (cache_on and ttl) (null: block is disabled)
     */
    public function caching_environment() : ?array
    {
        $info = [];
        $info['cache_on'] = <<<'PHP'
        (count($_POST) == 0)
        ?
        $map
        :
        null
PHP;
        $info['special_cache_flags'] = CACHE_AGAINST_DEFAULT;
        $info['ttl'] = 60 * 24;
        return $info;
    }

    /**
     * Execute the block.
     *
     * @param  array $map A map of parameters
     * @return Tempcode The result of execution
     */
    public function run(array $map) : object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('newsletter', $error_msg)) {
            return $error_msg;
        }

        require_lang('newsletter');

        $block_id = get_block_id($map);

        $newsletter_id = @cms_empty_safe($map['param']) ? db_get_first_id() : intval($map['param']);

        $button_only = array_key_exists('button_only', $map) ? ($map['button_only'] == '1') : false;

        $_newsletter_title = $GLOBALS['SITE_DB']->query_select_value_if_there('newsletters', 'title', ['id' => $newsletter_id]);
        if ($_newsletter_title === null) {
            return paragraph(do_lang_tempcode('MISSING_RESOURCE'), '6rg82p4wj198c6p8h9t4qcn6x7ke9q88', 'nothing-here');
        }
        $newsletter_title = get_translated_text($_newsletter_title);

        $address = post_param_string('address' . strval($newsletter_id), '');
        if ($address != '') {
            // Actualiser...

            require_code('newsletter');
            require_code('newsletter2');

            require_code('type_sanitisation');
            if (!is_valid_email_address($address)) {
                $msg = do_template('INLINE_WIP_MESSAGE', ['_GUID' => '9ce849d0d2dc879acba609b907317c74', 'MESSAGE' => do_lang_tempcode('INVALID_EMAIL_ADDRESS')]);
                return do_template('BLOCK_MAIN_NEWSLETTER_SIGNUP', [
                    '_GUID' => '3759e07077d74e6537cab04c897e76d2',
                    'BLOCK_PARAMS' => comma_list_arr_to_str($map),
                    'BLOCK_ID' => $block_id,
                    'NEWSLETTER_TITLE' => $newsletter_title,
                    'NID' => strval($newsletter_id),
                    'URL' => get_self_url(),
                    'MSG' => $msg,
                    'BUTTON_ONLY' => $button_only,
                ]);
            }

            if (!array_key_exists('path', $map)) {
                $map['path'] = 'uploads/website_specific/signup.txt';
            }
            $path_exists = file_exists(get_custom_file_base() . '/' . $map['path']);

            require_code('character_sets');
            $forename = post_param_string('forename' . strval($newsletter_id), '');
            $surname = post_param_string('surname' . strval($newsletter_id), '');
            $password = basic_newsletter_join($address, null, !$path_exists/*Send confirm if we're not sending an intro e-mail through this block*/, $newsletter_id, $forename, $surname);

            if (addon_installed('stats')) {
                require_code('stats');
                log_stats_event('newsletter:__NEWSLETTER_JOIN');
            }

            if ($password == '') {
                return do_template('INLINE_WIP_MESSAGE', ['_GUID' => 'bbbf2b31e71cbdbc2bcf2bdb7605142c', 'MESSAGE' => do_lang_tempcode('NEWSLETTER_THIS_ALSO')]);
            }
            if ($password == do_lang('NA')) {
                $manage_url = build_url(['page' => 'newsletter', 'email' => $address], get_module_zone('newsletter'));
                return do_template('INLINE_WIP_MESSAGE', ['_GUID' => '0ece8967a12afe4248cf5976e1dc903e', 'MESSAGE' => do_lang_tempcode('ALREADY_EMAIL_ADDRESS', escape_html($manage_url->evaluate()))]);
            }

            require_code('mail');
            if ($path_exists) {
                $url = (url_is_local($map['path']) ? (get_custom_base_url() . '/') : '') . $map['path'];
                $subject = empty($map['subject']) ? do_lang('_WELCOME') : $map['subject'];
                $body = http_get_contents($url, ['convert_to_internal_encoding' => true]);
                $body = str_replace('{password}', $password, $body);
                $body = str_replace('{email}', $address, $body);
                $body = str_replace('{forename}', $forename, $body);
                $body = str_replace('{surname}', $surname, $body);
                dispatch_mail($subject, $body, [$address], empty($map['to']) ? null : $map['to'], '', '', ['as_admin' => true]);
            }

            return do_template('BLOCK_MAIN_NEWSLETTER_SIGNUP_DONE', [
                '_GUID' => '9953c83685df4970de8f23fcd5dd15bb',
                'BLOCK_PARAMS' => comma_list_arr_to_str($map),
                'BLOCK_ID' => $block_id,
                'NEWSLETTER_TITLE' => $newsletter_title,
                'NID' => strval($newsletter_id),
                'PASSWORD' => $password,
                'PATH_EXISTS' => $path_exists,
            ]);
        }

        // Form...

        if ($button_only) {
            $url = build_url(['page' => 'newsletter'], get_module_zone('newsletter'));
        } else {
            $url = get_self_url();
        }

        return do_template('BLOCK_MAIN_NEWSLETTER_SIGNUP', [
            '_GUID' => 'c0e6f9cdab3d624bf3d27b745e3de38f',
            'BLOCK_PARAMS' => comma_list_arr_to_str($map),
            'BLOCK_ID' => $block_id,
            'NEWSLETTER_TITLE' => $newsletter_title,
            'NID' => strval($newsletter_id),
            'URL' => $url,
            'BUTTON_ONLY' => $button_only,
        ]);
    }
}
