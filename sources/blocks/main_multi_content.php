<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Block class.
 */
class Block_main_multi_content
{
    /**
     * Find details of the block.
     *
     * @return ?array Map of block info (null: block is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        $info['parameters'] = [
            'filter',
            'param',
            'select',
            'select_b',
            'title',
            'zone',
            'sort',
            'days',
            'render_mode',
            'lifetime',
            'pinned',
            'no_links',
            'give_context',
            'include_breadcrumbs',
            'max',
            'start',
            'pagination',
            'root',
            'attach_to_url_filter',
            'render_if_empty',
            'guid',
            'as_guest',
            'check',
        ];
        return $info;
    }

    /**
     * Find caching details for the block.
     *
     * @return ?array Map of cache details (cache_on and ttl) (null: block is disabled)
     */
    public function caching_environment() : ?array
    {
        $info = [];
        $info['cache_on'] = <<<'PHP'
        (preg_match('#<\w+>#', (array_key_exists('filter', $map) ? $map['filter'] : '')) != 0)
        ?
        null
        :
        [
            array_key_exists('as_guest', $map) ? ($map['as_guest'] == '1') : false,
            array_key_exists('guid', $map) ? $map['guid'] : '',
            array_key_exists('render_if_empty', $map) ? $map['render_if_empty'] : '0',
            ((array_key_exists('attach_to_url_filter', $map) ? $map['attach_to_url_filter'] : '0') == '1'),
            get_param_integer($block_id . '_max', array_key_exists('max', $map) ? intval($map['max']) : 30),
            get_param_integer($block_id . '_start', array_key_exists('start', $map) ? intval($map['start']) : 0),
            ((array_key_exists('pagination', $map) ? $map['pagination'] : '0') == '1'),
            ((array_key_exists('root', $map)) && ($map['root'] != '')) ? intval($map['root']) : get_param_integer('keep_' . (array_key_exists('param', $map) ? $map['param'] : 'download') . '_root', null),
            (array_key_exists('give_context', $map) ? $map['give_context'] : '0') == '1',
            (array_key_exists('include_breadcrumbs', $map) ? $map['include_breadcrumbs'] : '0') == '1',
            array_key_exists('filter', $map) ? $map['filter'] : '',
            array_key_exists('no_links', $map) ? $map['no_links'] : 0,
            ((array_key_exists('days', $map)) && ($map['days'] != '')) ? intval($map['days']) : null,
            ((array_key_exists('lifetime', $map)) && ($map['lifetime'] != '')) ? intval($map['lifetime']) : null,
            ((array_key_exists('pinned', $map)) && ($map['pinned'] != '')) ? explode(',', $map['pinned']) : [],
            array_key_exists('title', $map) ? $map['title'] : '',
            array_key_exists('param', $map) ? $map['param'] : '*',
            array_key_exists('select', $map) ? $map['select'] : '',
            array_key_exists('select_b', $map) ? $map['select_b'] : '',
            array_key_exists('zone', $map) ? $map['zone'] : '_SEARCH',
            array_key_exists('sort', $map) ? $map['sort'] : 'recent',
            array_key_exists('check', $map) ? ($map['check'] == '1') : true,
            empty($map['render_mode']) ? 'boxes' : $map['render_mode'],
        ]
PHP;
        $info['special_cache_flags'] = CACHE_AGAINST_DEFAULT | CACHE_AGAINST_PERMISSIVE_GROUPS;
        if (addon_installed('content_privacy')) {
            $info['special_cache_flags'] |= CACHE_AGAINST_MEMBER;
        }
        $info['ttl'] = 30;
        return $info;
    }

    /**
     * Uninstall the block.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('feature_lifetime_monitor');
    }

    /**
     * Install the block.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        $GLOBALS['SITE_DB']->create_table('feature_lifetime_monitor', [
            'content_id' => '*ID_TEXT',
            'block_cache_id' => '*ID_TEXT',
            'run_period' => 'INTEGER',
            'running_now' => 'BINARY',
            'last_update' => 'TIME',
        ]);
    }

    /**
     * Execute the block.
     *
     * @param  array $map A map of parameters
     * @return Tempcode The result of execution
     */
    public function run(array $map) : object
    {
        $block_id = get_block_id($map);

        // Read selection parameters
        $check_perms = array_key_exists('check', $map) ? ($map['check'] == '1') : true;
        $sort = empty($map['sort']) ? 'prominence' : $map['sort']; // recent|top|views|random|title or some manually typed sort order
        $select = isset($map['select']) ? $map['select'] : '';
        $select_b = isset($map['select_b']) ? $map['select_b'] : '';
        if ($select == '*' || $select == '>' || $select_b == '*' || $select_b == '>') {
            return do_template('RED_ALERT', ['_GUID' => 'nktad4b52ustiuhzvqzin9htz4g26vow', 'TEXT' => do_lang_tempcode('INTERNAL_ERROR')]); // Indicates some kind of referencing error, probably caused by Tempcode pre-processing - skip execution
        }
        $filter = isset($map['filter']) ? $map['filter'] : '';
        $days = empty($map['days']) ? null : intval($map['days']);
        $_pinned = array_key_exists('pinned', $map) ? trim($map['pinned']) : '*';
        if ($_pinned == '') {
            $pinned = [];
        } elseif ($_pinned == '*') {
            $pinned = null;
        } else {
            $pinned = array_unique(array_map('intval', array_map('trim', explode(',', $_pinned))));
        }
        $as_guest = array_key_exists('as_guest', $map) ? ($map['as_guest'] == '1') : false;

        // Read display parameters
        $guid = isset($map['guid']) ? $map['guid'] : '';
        $zone = isset($map['zone']) ? $map['zone'] : '_SEARCH';
        $title = isset($map['title']) ? $map['title'] : '';
        $lifetime = empty($map['lifetime']) ? null : intval($map['lifetime']);
        $give_context = (isset($map['give_context']) ? $map['give_context'] : '0') == '1';
        $include_breadcrumbs = (isset($map['include_breadcrumbs']) ? $map['include_breadcrumbs'] : '0') == '1';
        $render_mode = empty($map['render_mode']) ? 'tiles' : $map['render_mode'];
        if (!in_array($render_mode, ['boxes', 'carousel', 'grid', 'list', 'mosaic', 'slider', 'table', 'tiles'])) {
            $render_mode = 'tiles';
        }

        $render_mode_requires_image = in_array($render_mode, ['carousel', 'grid', 'mosaic', 'slider']);

        // Determine content type
        require_code('content');
        if ((!@cms_empty_safe($map['param'])) && ($map['param'] != '*')) {
            $content_type = $map['param'];
            $content_types = explode(',', $map['param']);
        } else {
            $wants_all_content_types = (!@cms_empty_safe($map['param']) && ($map['param'] == '*'));

            $_default_content_types = 'catalogue_entry,comcode_page,download,event,image,news,poll,quiz,topic,video,wiki_page';
            $default_content_types = explode(',', $_default_content_types);

            $content_type = '*';
            $_content_types = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
            $content_types = [];
            foreach ($_content_types as $_content_type => $object) {
                $info = $object->info();
                if (($wants_all_content_types) || (in_array($_content_type, $default_content_types))) {
                    if (($info !== null) && ((!$render_mode_requires_image) || ($info['image_field'] !== null))) {
                        $content_types[] = $_content_type;
                    }
                }
            }

            if ($wants_all_content_types) {
                $content_type = '*';
            } else {
                $content_type = $_default_content_types;
            }
        }

        // Read pagination parameters
        $max = get_param_integer($block_id . '_max', isset($map['max']) ? intval($map['max']) : 30);
        $start = get_param_integer($block_id . '_start', isset($map['start']) ? intval($map['start']) : 0);
        $do_pagination = ((isset($map['pagination']) ? $map['pagination'] : '1') == '1');
        $attach_to_url_filter = ((isset($map['attach_to_url_filter']) ? $map['attach_to_url_filter'] : '0') == '1');
        $root = @cms_empty_safe($map['root']) ? get_param_integer('keep_' . $content_type . '_root', null) : intval($map['root']);

        if ($lifetime !== null) {
            $block_cache_id = md5(serialize($map));
        }

        // Read content object
        $objects = [];
        $infos = [];
        $extra_join = [];
        $extra_where = [];
        foreach ($content_types as $i => $content_type) {
            $object = get_content_object($content_type);
            $info = ($object === null) ? null : $object->info($zone, true, ($select_b == '') ? null : $select_b);
            if ($info === null) {
                unset($content_types[$i]);
                continue;
            }

            if (($sort == 'prominence') && ($info['default_prominence_weight'] == PROMINENCE_WEIGHT_NONE)) {
                unset($content_types[$i]);
                continue;
            }

            $objects[$content_type] = $object;
            $infos[$content_type] = $info;

            $extra_join[$content_type] = '';
            $extra_where[$content_type] = '';

            // Cycling of what has been seen before
            if (is_array($info['id_field'])) {
                $lifetime = null; // Cannot join on this
            }
            if ($lifetime !== null) {
                $first_id_field = is_array($info['id_field']) ? $info['id_field'][0] : $info['id_field'];
                $extra_join[$content_type] .= ' LEFT JOIN ' . $info['db']->get_table_prefix() . 'feature_lifetime_monitor m ON m.content_id=' . db_cast($first_id_field, 'CHAR') . ' AND ' . db_string_equal_to('m.block_cache_id', $block_cache_id);
                $extra_where[$content_type] .= ' AND (m.run_period IS NULL OR m.run_period<' . strval($lifetime * 60 * 60 * 24) . ')';
            }

            $image_field = $info['image_field'];
            if ($image_field !== null) {
                if (is_array($image_field)) {
                    $image_field = array_pop($image_field); // Anything ahead is just stuff we need to preload for the "CALL:" to work
                }
                if (($render_mode_requires_image) && (strpos($image_field, 'CALL:') === false)) {
                    $extra_where[$content_type] .= ' AND ' . db_string_not_equal_to($info['image_field'], '');
                }
            }

            // We do not want to display panel_* or hidden (_*) comcode pages. Add a WHERE clause for that. FUDGE.
            if ($content_type == 'comcode_page') {
                $extra_where[$content_type] .= ' AND ' . $info['title_field'] . ' NOT LIKE \'' . db_encode_like('\_%') . '\' AND ' . $info['title_field'] . ' NOT LIKE \'' . db_encode_like('panel\_%') . '\'';
            }

        }

        // Read rows
        $viewing_member_id = $as_guest ? $GLOBALS['FORUM_DRIVER']->get_guest_id() : get_member();
        list($rows, $max_rows) = content_rows_for_multi_type($content_types, $days, $extra_where, $extra_join, $sort, $start, $max, $select, $select_b, $filter, $check_perms, $pinned, null, $viewing_member_id, $infos);

        // Links...

        $submit_url = new Tempcode();
        if ((count($infos) == 1) && ($info['add_url'] !== null) && (has_actual_page_access(null, $info['cms_page'], null, null))) {
            $submit_url = page_link_to_tempcode_url($info['add_url']);
        }

        $archive_url = new Tempcode();
        if ((count($infos) == 1) && ($info['archive_url'] !== null)) {
            $archive_url = page_link_to_tempcode_url($info['archive_url']);
        }

        if ((isset($map['no_links'])) && ($map['no_links'] == '1')) {
            $submit_url = new Tempcode();
            $archive_url = new Tempcode();
        }

        // Sort out run periods
        if ($lifetime !== null) {
            $lifetime_monitor = list_to_map('content_id', $GLOBALS['SITE_DB']->query_select('feature_lifetime_monitor', ['content_id', 'run_period', 'last_update'], ['block_cache_id' => $block_cache_id, 'running_now' => 1]));
        }

        // Move towards render...

        // Work out what headings are shared
        $shared_keymap_headings = [];
        if (count($objects) == 1) {
            $shared_keymap_headings = $object->get_standard_keymap_headings() + $object->get_special_keymap_headings();
        } else {
            $keymap_headings_tallies = [];
            foreach ($objects as $object) {
                $keymap_headings = $object->get_standard_keymap_headings();
                $shared_keymap_headings += $keymap_headings;
                foreach (array_keys($keymap_headings) as $keymap_heading) {
                    if (!array_key_exists($keymap_heading, $keymap_headings_tallies)) {
                        $keymap_headings_tallies[$keymap_heading] = 0;
                    }
                    $keymap_headings_tallies[$keymap_heading]++;
                }
            }
            foreach ($keymap_headings_tallies as $keymap_heading => $tally) {
                if ($tally < count($objects)) {
                    unset($shared_keymap_headings[$keymap_heading]);
                }
            }
        }

        // Render rows
        $content = [];
        $content_data = [];
        foreach ($rows as $row) {
            $content_type = $row['content_type'];
            $object = $objects[$content_type];
            $info = $infos[$content_type];

            // Get content ID
            $content_id = extract_content_str_id_from_data($row, $info);

            // Lifetime managing
            if ($lifetime !== null) {
                if (!array_key_exists($content_id, $lifetime_monitor)) {
                    // Test to see if it is actually there in the past - we only loaded the "running now" ones for performance reasons. Any new ones coming will trigger extra queries to see if they've been used before, as a trade-off to loading potentially 10's of thousands of rows.
                    $lifetime_monitor += list_to_map('content_id', $GLOBALS['SITE_DB']->query_select('feature_lifetime_monitor', ['content_id', 'run_period', 'last_update'], ['block_cache_id' => $block_cache_id, 'content_id' => $content_id]));
                }

                if (array_key_exists($content_id, $lifetime_monitor)) {
                    $GLOBALS['SITE_DB']->query_update('feature_lifetime_monitor', [
                        'run_period' => $lifetime_monitor[$content_id]['run_period'] + (time() - $lifetime_monitor[$content_id]['last_update']),
                        'running_now' => 1,
                        'last_update' => time(),
                    ], ['content_id' => $content_id, 'block_cache_id' => $block_cache_id]);
                    unset($lifetime_monitor[$content_id]);
                } else {
                    $GLOBALS['SITE_DB']->query_insert('feature_lifetime_monitor', [
                        'content_id' => $content_id,
                        'block_cache_id' => $block_cache_id,
                        'run_period' => 0,
                        'running_now' => 1,
                        'last_update' => time(),
                    ]);
                }
            }

            // Fetch keymap
            if (count($objects) == 1) {
                $keymap = $object->get_standard_keymap($row) + $object->get_special_keymap($row);
            } else {
                $keymap = $object->get_standard_keymap($row);
                foreach (array_keys($keymap) as $key) {
                    if (!isset($shared_keymap_headings[$key])) {
                        unset($keymap[$key]);
                    }
                }
            }

            // Render
            if ($render_mode_requires_image) {
                $image_url = $object->get_image_url($row, IMAGE_URL_FALLBACK_HARD);
                if ($image_url == '') {
                    continue;
                }
            }
            switch ($render_mode) {
                case 'boxes':
                    $image_url = $object->get_image_url($row);
                    $content[] = $object->render_box($row, $zone, $give_context, $include_breadcrumbs, $root, $attach_to_url_filter, $guid);
                    break;

                case 'carousel':
                    $image_url = $object->get_image_url($row);
                    $content[] = ''; // Uniform. Render using $content_data
                    break;

                case 'grid':
                    $content[] = ''; // Uniform. Render using $content_data
                    break;

                case 'list':
                    $image_url = $object->get_image_url($row);
                    $content[] = $object->render_hyperlink($row);
                    break;

                case 'mosaic':
                    $content[] = ''; // Uniform. Render using $content_data
                    break;

                case 'slider':
                    $content[] = ''; // Uniform. Render using $content_data
                    break;

                case 'table':
                    $image_url = $object->get_image_url($row);
                    $content[] = ['KEYMAP' => array_change_key_case($keymap, CASE_UPPER)];
                    break;

                case 'tiles':
                    $image_url = $object->get_image_url($row, IMAGE_URL_FALLBACK_HARD);
                    $content[] = ''; // Uniform. Render using $content_data
                    break;
            }

            $timestamp = $object->get_most_relevant_time($row);

            // FUDGE: Use a short label for comcode pages
            if ($content_type == 'comcode_page') {
                $content_type_label = do_lang('zones:COMCODE_PAGE_FRIENDLY');
            } else {
                $content_type_label = $object->get_content_type_label($row);
            }

            $_content_data = [
                'CONTENT_TYPE' => $content_type,
                'CONTENT_TYPE_LABEL' => $content_type_label,
                'CONTENT_TYPE_ICON' => ($info['alternate_icon_theme_image'] === null) ? null : find_theme_image($info['alternate_icon_theme_image']),
                'CONTENT_ID' => $content_id,
                'CONTENT_URL' => $object->get_view_url($row),
                'CONTENT_TITLE_PLAIN' => $object->get_title($row, FIELD_RENDER_PLAIN),
                'CONTENT_TITLE_HTML' => protect_from_escaping($object->get_title($row, FIELD_RENDER_HTML)),
                'CONTENT_DESCRIPTION' => protect_from_escaping($object->get_description($row, FIELD_RENDER_HTML)),
                'CONTENT_IMAGE_URL' => $image_url,
                'CONTENT_USERNAME' => $object->get_username($row),
                'CONTENT_AUTHOR' => $object->get_author($row),
                'CONTENT_TIME_LABEL' => $object->get_most_relevant_time_label(),
                'CONTENT_TIME' => ($timestamp === null) ? null : get_timezoned_date_time_tempcode($timestamp),
                '_CONTENT_TIME' => ($timestamp === null) ? null : strval($timestamp),
            ];
            if ($render_mode != 'table') {
                $_content_data['CONTENT_KEYMAP'] = @array_combine($shared_keymap_headings, $keymap);
            }
            $content_data[] = $_content_data;
        }

        // Sort out run periods of stuff gone
        if ($lifetime !== null) {
            foreach (array_keys($lifetime_monitor) as $content_id) { // Any remaining have not been pulled up
                if (is_integer($content_id)) {
                    $content_id = strval($content_id);
                }

                $GLOBALS['SITE_DB']->query_update('feature_lifetime_monitor', [
                    'run_period' => $lifetime_monitor[$content_id]['run_period'] + (time() - $lifetime_monitor[$content_id]['last_update']),
                    'running_now' => 0,
                    'last_update' => time(),
                ], ['content_id' => $content_id, 'block_cache_id' => $block_cache_id]);
            }
        }

        // Empty? Bomb out somehow
        if (empty($rows)) {
            if ((isset($map['render_if_empty'])) && ($map['render_if_empty'] == '0')) {
                return new Tempcode();
            }
        }

        if (count($infos) == 1) {
            $content_type_label = $object->get_content_type_label();
            $add_string = $object->content_language_string('ADD');
        } else {
            $content_type_label = do_lang_tempcode('RESULTS');
            $add_string = do_lang_tempcode('ADD');
        }

        // Pagination
        $pagination = null;
        if ($do_pagination) {
            require_code('templates_pagination');
            $pagination = pagination($content_type_label, $start, $block_id . '_start', $max, $block_id . '_max', $max_rows);
        }

        // Render
        return do_template('BLOCK_MAIN_MULTI_CONTENT_' . cms_strtoupper_ascii($render_mode), [
            '_GUID' => ($guid != '') ? $guid : '9035934bc9b25f57eb8d23bf100b5796',
            'BLOCK_ID' => $block_id,
            'BLOCK_PARAMS' => comma_list_arr_to_str(['block_id' => $block_id] + $map),
            'TYPE' => $content_type_label,
            'TITLE' => $title,
            'CONTENT' => $content,
            'CONTENT_TYPE' => (count($objects) == 1) ? $content_type : '',
            'CONTENT_DATA' => $content_data,
            'SUBMIT_URL' => $submit_url,
            'ARCHIVE_URL' => $archive_url,
            'PAGINATION' => $pagination,
            'ADD_STRING' => $add_string,
            'SHARED_KEYMAP_HEADINGS' => $shared_keymap_headings,

            'START' => strval($start),
            'MAX' => strval($max),
            'START_PARAM' => $block_id . '_start',
            'MAX_PARAM' => $block_id . '_max',
            'EXTRA_GET_PARAMS' => (get_param_integer($block_id . '_max', null) === null) ? null : ('&' . $block_id . '_max=' . urlencode(strval($max))),
        ]);
    }
}
