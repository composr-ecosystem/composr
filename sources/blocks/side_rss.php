<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2023

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    syndication_blocks
 */

/**
 * Block class.
 */
class Block_side_rss
{
    /**
     * Find details of the block.
     *
     * @return ?array Map of block info (null: block is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'syndication_blocks';
        $info['parameters'] = ['param', 'max_entries', 'title', 'copyright', 'ticker'];
        return $info;
    }

    /**
     * Find caching details for the block.
     *
     * @return ?array Map of cache details (cache_on and ttl) (null: block is disabled)
     */
    public function caching_environment() : ?array
    {
        $info = [];
        $info['cache_on'] = ['block_side_rss__cache_on'];
        $info['ttl'] = intval(get_option('rss_update_time'));
        return $info;
    }

    /**
     * Execute the block.
     *
     * @param  array $map A map of parameters
     * @return Tempcode The result of execution
     */
    public function run(array $map) : object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('syndication_blocks', $error_msg)) {
            return $error_msg;
        }

        if (!addon_installed('news')) {
            return do_template('RED_ALERT', ['_GUID' => '0cyxfhw3xxpxosehm6togd48cs3bqwka', 'TEXT' => do_lang_tempcode('MISSING_ADDON', escape_html('news'))]);
        }

        require_lang('news');
        require_lang('rss');
        require_css('news');
        require_code('crypt');

        $block_id = get_block_id($map);

        $url = empty($map['param']) ? (get_brand_base_url() . '/backend.php?type=rss&mode=news') : $map['param'];

        if (strpos($url, '{') !== false) {
            require_code('tempcode_compiler');
            $url = static_evaluate_tempcode(template_to_tempcode($url));
        }

        $ticker = (array_key_exists('ticker', $map)) && ($map['ticker'] == '1');

        require_code('rss');
        $rss = new CMS_RSS($url);
        if ($rss->error !== null) {
            $GLOBALS['DO_NOT_CACHE_THIS'] = true;
            require_code('failure');
            cms_error_log(do_lang('rss:ERROR_HANDLING_RSS_FEED', $url, $rss->error), 'error_occurred_rss');
            if (cron_installed(true)) {
                if (!$GLOBALS['FORUM_DRIVER']->is_staff(get_member())) {
                    return new Tempcode();
                }
            }
            return do_template('INLINE_WIP_MESSAGE', ['_GUID' => 'b1da4a43b092dc991c27952a7ef530d1', 'MESSAGE' => htmlentities($rss->error)]);
        }

        // Sorting
        $items = [];
        foreach ($rss->gleamed_items as $item) {
            if (!array_key_exists('clean_add_date', $item)) {
                $item['clean_add_date'] = time();
            }
            $items[] = $item;
        }
        sort_maps_by($items, 'clean_add_date');
        $items = array_reverse($items);

        if (!array_key_exists('title', $rss->gleamed_feed)) {
            $rss->gleamed_feed['title'] = do_lang_tempcode('RSS_STREAM');
        }
        if (array_key_exists('title', $map)) {
            $rss->gleamed_feed['title'] = $map['title'];
        }

        // Reduce what we collected about the feed to a minimum. This is very awkward, as we don't know what's here.
        if (array_key_exists('author', $rss->gleamed_feed)) {
            $__author = null;
            $_author_string = $rss->gleamed_feed['author'];
            if (array_key_exists('url', $rss->gleamed_feed)) {
                $__author = hyperlink($rss->gleamed_feed['url'], $_author_string, true, true);
            } elseif (array_key_exists('author_url', $rss->gleamed_feed)) {
                $__author = hyperlink($rss->gleamed_feed['author_url'], $_author_string, true, true);
            } elseif (array_key_exists('author_email', $rss->gleamed_feed)) {
                $__author = hyperlink(mailto_obfuscated() . obfuscate_email_address($rss->gleamed_feed['author_email']), $_author_string, true, true);
            }
            if ($__author !== null) {
                $_author = do_lang_tempcode('RSS_SOURCE_FROM', $__author->evaluate());
            } else {
                $_author = do_lang_tempcode('RSS_SOURCE_FROM', escape_html($_author_string));
            }
        } else {
            $_author = new Tempcode();
        }
        if (!array_key_exists('copyright', $rss->gleamed_feed)) {
            $rss->gleamed_feed['copyright'] = '';
        }
        if (array_key_exists('copyright', $map)) {
            $rss->gleamed_feed['copyright'] = $map['copyright'];
        }

        // Now for the actual stream contents
        $max = array_key_exists('max_entries', $map) ? intval($map['max_entries']) : 5;
        $content = new Tempcode();
        foreach ($items as $i => $item) {
            if ($i >= $max) {
                break;
            }

            if (array_key_exists('full_url', $item)) {
                $full_url = $item['full_url'];
            } elseif (array_key_exists('guid', $item)) {
                $full_url = $item['guid'];
            } elseif (array_key_exists('comment_url', $item)) {
                $full_url = $item['comment_url'];
            } else {
                $full_url = '';
            }

            $_title = array_key_exists('title', $item) ? $item['title'] : do_lang('UNKNOWN');
            $_title = array_key_exists('title', $item) ? $item['title'] : '';
            $date = array_key_exists('clean_add_date', $item) ? get_timezoned_date_tempcode($item['clean_add_date']) : (array_key_exists('add_date', $item) ? make_string_tempcode($item['add_date']) : new Tempcode());

            $content->attach(do_template('BLOCK_SIDE_RSS_SUMMARY', [
                '_GUID' => '18f6d1ccfe980cc01bbdd2ee178c2410',
                'TICKER' => $ticker,
                'FEED_URL' => $url,
                'FULL_URL' => $full_url,
                'NEWS_TITLE' => $_title,
                'DATE' => $date,
                'DATE_RAW' => array_key_exists('clean_add_date', $item) ? strval($item['clean_add_date']) : '',
                'SUMMARY' => array_key_exists('news', $item) ? $item['news'] : (array_key_exists('news_article', $item) ? $item['news_article'] : ''),
            ]));
        }

        return do_template('BLOCK_SIDE_RSS', [
            '_GUID' => 'fe3319e942d75fedb83e4cf80f80e19f',
            'BLOCK_ID' => $block_id,
            'TICKER' => $ticker,
            'FEED_URL' => $url,
            'TITLE' => $rss->gleamed_feed['title'],
            'CONTENT' => $content,
        ]);
    }
}

/**
 * Find the cache signature for the block.
 *
 * @param  array $map The block parameters
 * @return array The cache signature
 */
function block_side_rss__cache_on(array $map) : array
{
    return [cron_installed(true) ? null : $GLOBALS['FORUM_DRIVER']->is_staff(get_member()), array_key_exists('max_entries', $map) ? intval($map['max_entries']) : 10, array_key_exists('title', $map) ? $map['title'] : '', array_key_exists('copyright', $map) ? $map['copyright'] : '', array_key_exists('param', $map) ? $map['param'] : ''];
}
