<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core
 */

/*EXTRA FUNCTIONS: fileinode*/

/**
 * Expand wildcarded page-links into a list of real page-links.
 *
 * @param  string $wildcarded_page_link The wildcarded page-links
 * @return array A list of page-links
 */
function expand_wildcarded_page_links(string $wildcarded_page_link) : array
{
    $wildcarded_page_link = str_replace('_WILD', '*', $wildcarded_page_link);

    $page_links = [];

    $parts = explode(':', $wildcarded_page_link, 3);
    $page_links = [];
    foreach ($parts as $i => $part) {
        switch ($i) {
            case 0: // Zone
                if ((strpos($part, '*') !== false) || (strpos($part, '?') !== false)) {
                    $start = 0;
                    do {
                        $zones = find_all_zones(true, false, false, $start, 50);
                        foreach ($zones as $zone) {
                            if (fnmatch($part, $zone)) {
                                $page_links[] = $zone;
                            }
                        }
                        $start += 50;
                    } while (!empty($zones));
                } else {
                    $page_links[] = $part;
                }
                break;
            case 1: // Page
                if ((strpos($part, '*') !== false) || (strpos($part, '?') !== false)) {
                    $_page_links = [];
                    foreach ($page_links as &$page_link) {
                        $pages = find_all_pages_wrap($page_link, false, false, FIND_ALL_PAGES__ALL);
                        foreach (array_keys($pages) as $page) {
                            if (fnmatch($part, $page)) {
                                $_page_links[] = $page_link . ':' . $page;
                            }
                        }
                    }
                    $page_links = $_page_links;
                } else {
                    foreach ($page_links as &$page_link) {
                        $page_link .= ':' . $part;
                    }
                }
                break;
            case 2: // Anything else
                foreach ($page_links as &$page_link) {
                    $page_link .= ':' . $part;
                }
                break;
        }
    }

    return $page_links;
}

/**
 * Define a Comcode page structure programmatically.
 * This function is intended for programmers, writing upgrade scripts for a custom site (dev>staging>live).
 *
 * @param  array $structure Comcode Page structure (see function code for an example)
 * @param  string $zone The zone to do this in
 * @param  ID_TEXT $parent Parent of current node in recursion (blank: no parent)
 * @param  boolean $overwrite_all Whether to flush out all existing data
 */
function define_comcode_page_structure(array $structure, string $zone = '', string $parent = '', bool $overwrite_all = false)
{
    /*
        CALLING SAMPLE:

        $structure = [
            'product' => [
                'trial',
                'pricing' => [
                    'tier1',
                    'tier2',
                    'tier3',
                ],
            ],

            'about' => [
                'contact_us',
                'team',
                'partners',
            ],
        ];
        define_comcode_page_structure($structure);
    */

    if ($parent == '') {
        if ($overwrite_all) {
            $GLOBALS['SITE_DB']->query_delete('comcode_pages');
        }
    }

    static $admin_user = null;
    if ($admin_user === null) {
        require_code('users_active_actions');
        $admin_user = get_first_admin_user();
    }

    require_code('global4');

    $i = 0;

    foreach ($structure as $page => $_structure) {
        if (strlen($page) < 1) {
            warn_exit(do_lang_tempcode('EMPTY_CODENAME'));
        }

        if (is_numeric($page)) {
            $page = $_structure;
            $_structure = [];
        }

        if (!$overwrite_all) {
            $GLOBALS['SITE_DB']->query_delete('comcode_pages', [
                'the_zone' => $zone,
                'the_page' => $page,
            ], '', 1);
        }

        $GLOBALS['SITE_DB']->query_insert('comcode_pages', [
            'the_zone' => $zone,
            'the_page' => $page,
            'p_parent_page' => $parent,
            'p_validated' => 1,
            'p_edit_date' => null,
            'p_add_date' => time(),
            'p_submitter' => $admin_user,
            'p_show_as_edit' => 0,
            'p_include_on_sitemap' => comcode_page_include_on_sitemap($zone, $page) ? 1 : 0,
            'p_order' => $i,
        ]);

        define_comcode_page_structure($_structure, $zone, $page);

        $i++;
    }
}

/**
 * Define a redirect structure programmatically.
 * This function is intended for programmers, writing upgrade scripts for a custom site (dev>staging>live).
 *
 * @param  array $redirects Simple redirect map between page names (see function code for an example)
 * @param  string $zone The zone to do this in
 * @param  boolean $overwrite_all Whether to flush out all existing data
 */
function define_redirects(array $redirects, string $zone = '', bool $overwrite_all = false)
{
    /*
        CALLING SAMPLE:

        $redirects = [
            'old_name' => 'new_name',
        ];
        define_redirects($redirects);
    }
    */

    if ($overwrite_all) {
        $GLOBALS['SITE_DB']->query_delete('redirects');
    }

    foreach ($redirects as $old_page => $new_page) {
        if (!$overwrite_all) {
            $GLOBALS['SITE_DB']->query_delete('redirects', [
                'r_from_page' => $old_page,
                'r_from_zone' => $zone,
                'r_to_page' => $new_page,
                'r_to_zone' => $zone,
            ], '', 1);
        }

        $GLOBALS['SITE_DB']->query_insert('redirects', [
            'r_from_page' => $old_page,
            'r_from_zone' => $zone,
            'r_to_page' => $new_page,
            'r_to_zone' => $zone,
            'r_is_transparent' => 0,
        ]);
    }
}

/**
 * Edit a zone.
 *
 * @param  ID_TEXT $zone The current name of the zone
 * @param  SHORT_TEXT $title The zone title
 * @param  ID_TEXT $default_page The zones default page
 * @param  SHORT_TEXT $header_text The header text
 * @param  ID_TEXT $theme The theme
 * @param  BINARY $require_session Whether the zone requires a session for pages to be used
 * @param  ID_TEXT $new_zone The new name of the zone
 * @param  boolean $uniqify Whether to force the name as unique, if there's a conflict
 * @param  boolean $skip_afm Whether to skip the AFM because we know it's not needed (or can't be loaded)
 * @param  string $base_url The base URL (blank: natural)
 * @return ID_TEXT The name
 */
function actual_edit_zone(string $zone, string $title, string $default_page, string $header_text, string $theme, int $require_session, string $new_zone, bool $uniqify = false, bool $skip_afm = false, string $base_url = '') : string
{
    if ($zone != $new_zone) {
        require_code('type_sanitisation');
        if (!is_alphanumeric($new_zone)) {
            warn_exit(do_lang_tempcode('BAD_CODENAME'));
        }

        if ($GLOBALS['CURRENT_SHARE_USER'] !== null) {
            warn_exit(do_lang_tempcode('SHARED_INSTALL_PROHIBIT'));
        }

        // Check doesn't already exist
        $test = $GLOBALS['SITE_DB']->query_select_value_if_there('zones', 'zone_header_text', ['zone_name' => $new_zone]);
        if ($test !== null) {
            if ($uniqify) {
                $new_zone .= '_' . uniqid('', false);
            } else {
                warn_exit(do_lang_tempcode('ALREADY_EXISTS', escape_html($new_zone)));
            }
        }

        require_code('abstract_file_manager');
        if (!$skip_afm) {
            force_have_afm_details(['', $zone]);
        }
        afm_move($zone, $new_zone);
    }

    $_header_text = $GLOBALS['SITE_DB']->query_select_value('zones', 'zone_header_text', ['zone_name' => $zone]);
    $_title = $GLOBALS['SITE_DB']->query_select_value('zones', 'zone_title', ['zone_name' => $zone]);

    $map = [
        'zone_name' => $new_zone,
        'zone_default_page' => $default_page,
        'zone_theme' => $theme,
        'zone_require_session' => $require_session,
    ];
    $map += lang_remap('zone_title', $_title, $title);
    $map += lang_remap('zone_header_text', $_header_text, $header_text);
    $GLOBALS['SITE_DB']->query_update('zones', $map, ['zone_name' => $zone], '', 1);

    if ($new_zone != $zone) {
        actual_rename_zone_lite($zone, $new_zone, true);

        $GLOBALS['SITE_DB']->query_update('menu_items', ['i_link' => $new_zone], ['i_link' => $zone], '', 1);
    }

    // If we're in this zone, update the theme
    global $ZONE;
    if ($ZONE['zone_name'] == $zone) {
        $ZONE['theme'] = $theme;
    }

    delete_cache_entry('menu');
    persistent_cache_delete(['ZONE', $zone]);
    persistent_cache_delete('ALL_ZONES');

    require_code('zones2');
    save_zone_base_url($zone, $base_url);

    log_it('EDIT_ZONE', $zone, $title);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('zone', $zone);
    }

    return $zone;
}

/**
 * Rename a zone in the database.
 *
 * @param  ID_TEXT $zone The old name of the zone
 * @param  ID_TEXT $new_zone The new name of the zone
 * @param  boolean $dont_bother_with_main_row Whether to assume the main zone row has already been renamed as part of a wider editing operation
 */
function actual_rename_zone_lite(string $zone, string $new_zone, bool $dont_bother_with_main_row = false)
{
    if (!$dont_bother_with_main_row) {
        $GLOBALS['SITE_DB']->query_update('zones', ['zone_name' => $new_zone], ['zone_name' => $zone], '', 1);
        $GLOBALS['SITE_DB']->query_update('group_zone_access', ['zone_name' => $new_zone], ['zone_name' => $zone]);
        $GLOBALS['SITE_DB']->query_update('member_zone_access', ['zone_name' => $new_zone], ['zone_name' => $zone]);
    } else {
        $GLOBALS['SITE_DB']->query_delete('zones', ['zone_name' => $zone], '', 1);
        $GLOBALS['SITE_DB']->query_delete('group_zone_access', ['zone_name' => $zone]);
        $GLOBALS['SITE_DB']->query_delete('member_zone_access', ['zone_name' => $zone]);
    }
    $GLOBALS['SITE_DB']->query_update('group_page_access', ['zone_name' => $new_zone], ['zone_name' => $zone]);
    $GLOBALS['SITE_DB']->query_update('member_page_access', ['zone_name' => $new_zone], ['zone_name' => $zone]);
    $GLOBALS['SITE_DB']->query_update('comcode_pages', ['the_zone' => $new_zone], ['the_zone' => $zone]);
    if (addon_installed('redirects_editor')) {
        $GLOBALS['SITE_DB']->query_update('redirects', ['r_from_zone' => $new_zone], ['r_from_zone' => $zone]);
        $GLOBALS['SITE_DB']->query_update('redirects', ['r_to_zone' => $new_zone], ['r_to_zone' => $zone]);
    }

    // Copy logo theme images if needed
    require_code('themes2');
    $themes = find_all_themes();
    foreach (array_keys($themes) as $theme) {
        $zone_logo_img = find_theme_image('logo/' . $zone . '-logo', true, true, $theme);
        $zone_logo_img_new = find_theme_image('logo/' . $new_zone . '-logo', true, true, $theme);
        if (($zone_logo_img != '') && ($zone_logo_img_new == '')) {
            $GLOBALS['SITE_DB']->query_delete('theme_images', ['id' => 'logo/' . $new_zone . '-logo', 'theme' => $theme, 'lang' => get_site_default_lang()], '', 1);
            $GLOBALS['SITE_DB']->query_insert('theme_images', ['id' => 'logo/' . $new_zone . '-logo', 'theme' => $theme, 'url' => $zone_logo_img, 'lang' => get_site_default_lang()]);
        }
    }

    global $ALL_ZONES_CACHE, $ALL_ZONES_TITLED_CACHE;
    $ALL_ZONES_CACHE = null;
    $ALL_ZONES_TITLED_CACHE = null;

    Self_learning_cache::erase_smart_cache();
}

/**
 * Delete a zone.
 *
 * @param  ID_TEXT $zone The name of the zone
 * @param  boolean $force Force, even if it contains pages
 * @param  boolean $skip_afm Whether to skip the AFM because we know it's not needed (or can't be loaded)
 */
function actual_delete_zone(string $zone, bool $force = false, bool $skip_afm = false)
{
    if ($zone == '') {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('7cdde6a361f25586b95c17ac79b9be84')));
    }

    if ($GLOBALS['CURRENT_SHARE_USER'] !== null) {
        warn_exit(do_lang_tempcode('SHARED_INSTALL_PROHIBIT'));
    }

    require_code('abstract_file_manager');
    if (!$skip_afm) {
        force_have_afm_details([$zone]);
    }

    if (!$force) {
        $old_limit = cms_disable_time_limit();
        disable_php_memory_limit();

        $pages = find_all_pages_wrap($zone, false, false, FIND_ALL_PAGES__ALL);
        $bad = [];
        foreach (array_keys($pages) as $page) {
            if ((substr($page, 0, 6) != 'panel_') && ($page != DEFAULT_ZONE_PAGE_NAME)) {
                $bad[] = $page;
            }
        }

        cms_set_time_limit($old_limit);

        if (!empty($bad)) {
            $_bad = '';
            foreach ($bad as $b) {
                if ($_bad != '') {
                    $_bad .= ', ';
                }
                $_bad .= '<kbd>' . escape_html($b) . '</kbd>';
            }

            require_lang('zones');
            warn_exit(do_lang_tempcode('DELETE_ZONE_ERROR', $_bad));
        }
    }

    actual_delete_zone_lite($zone);

    if (file_exists(get_custom_file_base() . '/' . filter_naughty($zone))) {
        afm_delete_directory(filter_naughty($zone), true);
    }
}

/**
 * Delete a zone's database stuff.
 *
 * @param  ID_TEXT $zone The name of the zone
 */
function actual_delete_zone_lite(string $zone)
{
    $GLOBALS['SITE_DB']->query_delete('zones', ['zone_name' => $zone], '', 1);
    $GLOBALS['SITE_DB']->query_delete('group_zone_access', ['zone_name' => $zone]);
    $GLOBALS['SITE_DB']->query_delete('group_page_access', ['zone_name' => $zone]);
    $GLOBALS['SITE_DB']->query_delete('comcode_pages', ['the_zone' => $zone], '', null, 0, true); // May fail because the table might not exist when this is called
    if (addon_installed('redirects_editor')) {
        $GLOBALS['SITE_DB']->query_delete('redirects', ['r_from_zone' => $zone]);
        $GLOBALS['SITE_DB']->query_delete('redirects', ['r_to_zone' => $zone]);
    }
    $GLOBALS['SITE_DB']->query_delete('menu_items', ['i_link' => $zone . ':']);

    $zone_header_text = $GLOBALS['SITE_DB']->query_select_value_if_there('zones', 'zone_header_text', ['zone_name' => $zone]);
    if ($zone_header_text === null) {
        return;
    }
    $zone_title = $GLOBALS['SITE_DB']->query_select_value('zones', 'zone_title', ['zone_name' => $zone]);
    $_zone_title = get_translated_text($zone_title);
    delete_lang($zone_header_text);
    delete_lang($zone_title);

    if (addon_installed('catalogues')) {
        update_catalogue_content_ref('zone', $zone, '');
    }

    persistent_cache_delete(['ZONE', $zone]);
    persistent_cache_delete('ALL_ZONES');

    delete_cache_entry('menu');

    global $ALL_ZONES_CACHE, $ALL_ZONES_TITLED_CACHE;
    $ALL_ZONES_CACHE = null;
    $ALL_ZONES_TITLED_CACHE = null;

    log_it('DELETE_ZONE', $zone, $_zone_title);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        expunge_resource_fs_moniker('zone', $zone);
    }

    if (addon_installed('ecommerce')) {
        require_code('ecommerce_permission_products');
        delete_prod_permission('zone', $zone);
    }
}

/**
 * The do-next manager for after content management.
 *
 * @param  ?Tempcode $title The title (output of get_screen_title) (null: don't use full page)
 * @param  ?ID_TEXT $page The name of the page just handled (null: none)
 * @param  ID_TEXT $zone The name of the zone just handled (blank: none/welcome-zone)
 * @param  Tempcode $completion_text The text to show (blank: default)
 * @return Tempcode The UI
 */
function sitemap_do_next_manager(?object $title, ?string $page, string $zone, object $completion_text) : object
{
    if ($completion_text->is_empty()) {
        $completion_text = do_lang_tempcode('SUCCESS');
    }

    require_code('templates_donext');
    $special = [
        ['admin/add', ['cms_comcode_pages', ['type' => 'browse'], get_module_zone('cms_comcode_pages')], do_lang('COMCODE_PAGE_ADD')],
        ['menu/cms/comcode_page_edit', ['cms_comcode_pages', ['type' => 'browse'], get_module_zone('cms_comcode_pages')], do_lang_tempcode('COMCODE_PAGE_EDIT')],
    ];
    if ($page !== null) {
        $special = array_merge($special, [
            ['admin/edit_this', ['_SELF', ['type' => '_edit', 'page_link' => $zone . ':' . $page], '_SELF'], do_lang('COMCODE_PAGE_EDIT_THIS')],
            ['admin/view_this', [$page, [], $zone], do_lang('COMCODE_PAGE_VIEW_THIS')],
        ]);
    }
    if (addon_installed('redirects_editor')) {
        require_lang('redirects');
        $special[] = ['menu/adminzone/structure/redirects', ['admin_redirects', ['type' => 'browse'], get_module_zone('admin_redirects')], do_lang_tempcode('REDIRECTS')];
    }
    $special = array_merge($special, [
        ['menu/adminzone/structure/sitemap/sitemap_editor', ['admin_sitemap', ['type' => 'browse'], get_module_zone('admin_sitemap')], do_lang_tempcode('SITEMAP_EDITOR')],
    ]);
    if ((is_dir(get_custom_file_base() . '/.git')) && (php_function_allowed('shell_exec')) && (php_function_allowed('escapeshellarg'))) {
        if (has_privilege(get_member(), 'mass_import')) {
            $special[] = ['admin/sync', ['cms_comcode_pages', ['type' => 'sync_revisions_with_git'], get_module_zone('cms_comcode_pages')], do_lang_tempcode('SYNC_REVISIONS_WITH_GIT')];
        }
    }

    return do_next_manager(
        $title,
        $completion_text,
        $special,
        do_lang('PAGES'),
        /* TYPED-ORDERED LIST OF 'LINKS' */
        null, // Add one
        null, // Edit this
        null, // Edit one
        null, // View this
        null, // View archive
        null, // Add one category
        null, // Edit one category
        null, // Edit this category
        null // View this category
    );
}

/**
 * Get a list of zones.
 *
 * @param  ?ID_TEXT $sel The zone in the list to select by default (null: use first)
 * @param  array $no_go A list of zone to not put into the list
 * @param  ?array $reorder A reordering (null: no reordering)
 * @param  ?TIME $updated_since Time from which content must be updated (null: no limit)
 * @return Tempcode The list
 */
function create_selection_list_zones(?string $sel = null, array $no_go = [], ?array $reorder = null, ?int $updated_since = null) : object
{
    if (($sel === 'site') && (get_option('single_public_zone') == '1')) {
        $sel = '';
    }

    if ($updated_since !== null) {
        $rows = $GLOBALS['SITE_DB']->query('SELECT zone_name,zone_title FROM ' . get_table_prefix() . 'zones z WHERE EXISTS(SELECT * FROM ' . get_table_prefix() . 'comcode_pages c WHERE z.zone_name=c.the_zone AND p_add_date>' . strval($updated_since) . ') ORDER BY zone_name');
        $zones = [];
        foreach ($rows as $row) {
            $zones[] = [$row['zone_name'], get_translated_text($row['zone_title'])];
        }
    } else {
        $zones = find_all_zones(false, true);
    }
    $content = new Tempcode();
    if ($reorder !== null) {
        $_zones_a = [];
        $_zones_b = [];
        foreach ($zones as $_zone) {
            list($zone, ) = $_zone;
            if (in_array($zone, $reorder)) {
                $_zones_a[] = $_zone;
            } else {
                $_zones_b[] = $_zone;
            }
        }
        $zones = array_merge($_zones_a, $_zones_b);
    }
    foreach ($zones as $_zone) {
        list($zone, $title) = $_zone;
        if ((has_zone_access(get_member(), $zone)) && (!in_array($zone, $no_go))) {
            $content->attach(form_input_list_entry($zone, (($sel !== null) && ($zone == $sel)), $title));
        }
    }
    return $content;
}

/**
 * Get a nice, formatted HTML list of page templates.
 *
 * @param  ?ID_TEXT $it The currently selected entry (null: none selected)
 * @return Tempcode The list of page templates
 */
function create_selection_list_page_templates(?string $it = null) : object
{
    if ($it === null) {
        $it = get_value('page_template_default', '', true);
    }

    $template_list = new Tempcode();
    $template_list->attach(form_input_list_entry('', ($it == ''), do_lang_tempcode('NONE_EM')));
    $templates = get_templates_list();
    foreach ($templates as $template => $template_title) {
        $template_list->attach(form_input_list_entry($template, ($template === $it), $template_title));
    }
    return $template_list;
}

/**
 * Get the map of names/titles of the available templates.
 *
 * @return array The names and titles of all available templates (title refers to the text within the first [title] tag in the template file)
 */
function get_templates_list() : array
{
    require_code('zones2');

    $templates_dirs = [];
    if (get_value('page_template_restrict_to_custom', '0', true) !== '1') {
        $templates_dirs[] = get_file_base() . '/data/modules/cms_comcode_pages/' . fallback_lang() . '/';
    }
    $templates_dirs[] = get_file_base() . '/data_custom/modules/cms_comcode_pages/' . fallback_lang() . '/';
    $templates = [];
    foreach ($templates_dirs as $templates_dir) {
        if (($handle = @opendir($templates_dir)) !== false) {
            $unknown_count = 0;

            while (false !== ($entry = readdir($handle))) {
                if (substr($entry, -4) == '.txt' && $entry[0] != '.') {
                    $template_path = $templates_dir . $entry;
                    $template_title = get_comcode_page_title_from_disk($template_path);
                    $templates[basename($entry, '.txt')] = $template_title;
                }
            }
            asort($templates);

            closedir($handle);
        }
    }
    return $templates;
}

/**
 * Read the contents of a template file.
 *
 * @param  string $name The name of the template (based on the filename) (blank: explicit no template)
 * @return string The contents of the file (blank if it does not exist)
 */
function get_template_contents(string $name) : string
{
    if ($name == '') {
        return '';
    }

    $templates_dir = get_file_base() . '/data_custom/modules/cms_comcode_pages/' . user_lang__with__translation_override() . '/';
    $template_path = $templates_dir . $name . '.txt';
    if (!is_file($template_path)) {
        $templates_dir = get_file_base() . '/data_custom/modules/cms_comcode_pages/' . fallback_lang() . '/';
        $template_path = $templates_dir . $name . '.txt';
    }
    if (!is_file($template_path)) {
        $templates_dir = get_file_base() . '/data/modules/cms_comcode_pages/' . user_lang__with__translation_override() . '/';
        $template_path = $templates_dir . $name . '.txt';
    }
    if (!is_file($template_path)) {
        $templates_dir = get_file_base() . '/data/modules/cms_comcode_pages/' . fallback_lang() . '/';
        $template_path = $templates_dir . $name . '.txt';
    }
    if (!is_file($template_path)) {
        $page_template_default = get_value('page_template_default', '', true);
        if (($page_template_default != '') && ($name != $page_template_default)) {
            return get_template_contents($page_template_default);
        }

        return '';
    }

    $ret = cms_file_get_contents_safe($template_path, FILE_READ_LOCK | FILE_READ_BOM);

    return $ret;
}

/**
 * Save a Comcode page.
 *
 * @param  ID_TEXT $zone The zone
 * @param  ID_TEXT $new_file The page
 * @param  ?LANGUAGE_NAME $lang The language (null: default website language)
 * @param  ?ID_TEXT $text The page text (null: unchanged)
 * @param  ?BINARY $validated The validated status (null: 1 / don't change)
 * @param  ?BINARY $include_on_sitemap Include on the sitemap (null: default / don't change)
 * @param  ?ID_TEXT $parent_page The page parent (null: none / don't change if $order is also null)
 * @param  ?integer $order The page order (null: 0 / don't change)
 * @param  ?TIME $add_time Add time (null: now / don't change)
 * @param  ?TIME $edit_time Edit time (null: not edited)
 * @param  BINARY $show_as_edit Whether to show as edited
 * @param  ?MEMBER $submitter The submitter (null: current member, or first admin if running execute_temp script)
 * @param  ?ID_TEXT $file The old page name (null: not being renamed)
 * @param  ?SHORT_TEXT $meta_keywords Meta keywords for this resource (blank: implicit) (null: no change, or no change if $text is null)
 * @param  ?LONG_TEXT $meta_description Meta description for this resource (blank: implicit) (null: no change, or no change if $text is null)
 * @return PATH The save path
 */
function save_comcode_page(string $zone, string $new_file, ?string $lang = null, ?string $text = null, ?int $validated = null, ?int $include_on_sitemap = 1, ?string $parent_page = null, ?int $order = null, ?int $add_time = null, ?int $edit_time = null, int $show_as_edit = 0, ?int $submitter = null, ?string $file = null, ?string $meta_keywords = '', ?string $meta_description = '') : string
{
    if ($lang === null) {
        $lang = get_site_default_lang();
    }

    if ($submitter === null) {
        if (running_script('execute_temp')) {
            require_code('users_active_actions');
            $submitter = get_first_admin_user();
        } else {
            $submitter = get_member();
        }
    }
    if ($file === null) {
        $file = $new_file; // Not renamed
    }

    if ($add_time === null) {
        $add_time = $GLOBALS['SITE_DB']->query_select_value_if_there('comcode_pages', 'p_add_date', ['the_zone' => $zone, 'the_page' => $file]);
        if ($add_time === null) {
            $add_time = time();
        }
    }
    if ($order === null) {
        $order = $GLOBALS['SITE_DB']->query_select_value_if_there('comcode_pages', 'p_order', ['the_zone' => $zone, 'the_page' => $file]);
        if ($order === null) {
            $order = 0;
        }
        if ($parent_page === null) {
            $parent_page = $GLOBALS['SITE_DB']->query_select_value_if_there('comcode_pages', 'p_parent_page', ['the_zone' => $zone, 'the_page' => $file]);
        }
    }
    if ($validated === null) {
        $validated = $GLOBALS['SITE_DB']->query_select_value_if_there('comcode_pages', 'p_validated', ['the_zone' => $zone, 'the_page' => $file]);
        if ($validated === null) {
            $validated = 1;
        }
    }
    if ($include_on_sitemap === null) {
        $include_on_sitemap = $GLOBALS['SITE_DB']->query_select_value_if_there('comcode_pages', 'p_include_on_sitemap', ['the_zone' => $zone, 'the_page' => $file]);
        if ($include_on_sitemap === null) {
            require_code('global4');
            $include_on_sitemap = comcode_page_include_on_sitemap($zone, $file) ? 1 : 0;
        }
    }

    require_code('site2');
    declare_if_member_has_historic_comcode_admin_privileges($submitter);

    // Check page name
    require_code('type_sanitisation');
    if ((strlen($new_file) < 1) || (!is_alphanumeric($new_file)) || ((strpos($new_file, '-') !== false) && (strpos($new_file, '_') !== false))/*can't have both*/) {
        warn_exit(do_lang_tempcode('EMPTY_CODENAME'));
    }
    require_code('zones2');
    check_page_name($zone, $new_file);

    require_code('urls2');
    suggest_new_idmoniker_for($new_file, '', $zone, $zone, $new_file);

    // Handle if the page was renamed - move stuff over
    $renaming_page = ($new_file != $file);
    if ($renaming_page) {
        // Got to rename against multiple possible languages
        $langs = find_all_langs(true);
        $rename_map = [];
        foreach (array_keys($langs) as $lang) {
            $old_path = zone_black_magic_filterer(filter_naughty($zone) . (($zone == '') ? '' : '/') . 'pages/comcode_custom/' . $lang . '/' . $file . '.txt', true);
            if (file_exists(get_file_base() . '/' . $old_path)) {
                $new_path = zone_black_magic_filterer(filter_naughty($zone) . (($zone == '') ? '' : '/') . 'pages/comcode_custom/' . $lang . '/' . $new_file . '.txt', true);
                if ((file_exists($new_path)) && (fileinode($new_path) != fileinode($old_path)/*avoid issue on case insensitive file systems while changing case*/)) {
                    warn_exit(do_lang_tempcode('ALREADY_EXISTS', escape_html($zone . ':' . $new_file)));
                }
                $rename_map[$old_path] = $new_path;
            }
            if (file_exists(get_file_base() . '/' . str_replace('/comcode_custom/', '/comcode/', $old_path))) {
                attach_message(do_lang_tempcode('ORIGINAL_PAGE_NO_RENAME'), 'warn');
            }
        }
        foreach ($rename_map as $path => $new_path) {
            rename(get_custom_file_base() . '/' . $path, get_custom_file_base() . '/' . $new_path);
            sync_file_move(get_custom_file_base() . '/' . $path, get_custom_file_base() . '/' . $new_path);
        }

        // Got to rename various resources
        rename_live_comcode_page($zone, $file, $zone, $new_file);
    }

    // Set metadata
    if ($meta_keywords !== null) {
        require_code('content2');
        if (($meta_keywords == '') && ($meta_description == '')) {
            if ($text !== null) {
                seo_meta_set_for_implicit('comcode_page', $zone . ':' . $new_file, [$text], $text);
            }
        } else {
            seo_meta_set_for_explicit('comcode_page', $zone . ':' . $new_file, $meta_keywords, $meta_description);
        }
    }

    // Store in DB
    $GLOBALS['SITE_DB']->query_delete('comcode_pages', [ // To support rename
        'the_zone' => $zone,
        'the_page' => $file,
    ]);
    $GLOBALS['SITE_DB']->query_delete('comcode_pages', [ // To stop conflicts
        'the_zone' => $zone,
        'the_page' => $new_file,
    ]);

    if ($parent_page === null) {
        $parent_page = '';
    }

    $GLOBALS['SITE_DB']->query_insert('comcode_pages', [
        'the_zone' => $zone,
        'the_page' => $new_file,
        'p_parent_page' => $parent_page,
        'p_validated' => $validated,
        'p_edit_date' => $edit_time,
        'p_add_date' => $add_time,
        'p_submitter' => $submitter,
        'p_show_as_edit' => $show_as_edit,
        'p_include_on_sitemap' => $include_on_sitemap,
        'p_order' => $order,
    ]);

    // Find file
    $full_path = zone_black_magic_filterer(get_custom_file_base() . (($zone == '') ? '' : '/') . filter_naughty($zone) . '/pages/comcode_custom/' . filter_naughty($lang) . '/' . filter_naughty($new_file) . '.txt');
    if ($text !== null) {
        $file_changed = ((!file_exists($full_path)) || ($text != cms_file_get_contents_safe($full_path, FILE_READ_LOCK | FILE_READ_BOM)));

        // Save revision
        if ($file_changed) {
            if (addon_installed('actionlog')) {
                require_code('revisions_engine_files');
                $revision_engine = new RevisionEngineFiles();
                list(, , $existing_path) = find_comcode_page($lang, $file, $zone);
                if ($existing_path != '') {
                    $revision_engine->add_revision(dirname($full_path), $new_file, 'txt', cms_file_get_contents_safe($existing_path, FILE_READ_LOCK | FILE_READ_BOM), filemtime($existing_path));
                }
            }
        }

        // Store page on disk
        if ($file_changed) {
            require_code('files');
            cms_file_put_contents_safe($full_path, $text, FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE | FILE_WRITE_BOM);
        }
    }

    // Empty caching
    erase_persistent_cache();
    //persistent_cache_delete(['PAGE_INFO']); Already erases above
    delete_cache_entry('main_comcode_page_children');
    delete_cache_entry('menu');
    $caches = $GLOBALS['SITE_DB']->query_select('cached_comcode_pages', ['string_index'], ['the_zone' => $zone, 'the_page' => $file]);
    $GLOBALS['SITE_DB']->query_delete('cached_comcode_pages', ['the_zone' => $zone, 'the_page' => $file]);
    foreach ($caches as $cache) {
        delete_lang($cache['string_index']);
    }
    $GLOBALS['COMCODE_PAGE_RUNTIME_CACHE'] = [];

    // Log
    log_it('COMCODE_PAGE_EDIT', $new_file, $zone);

    if ((addon_installed('commandr')) && (!running_script('install')) && (!get_mass_import_mode())) {
        require_code('resource_fs');
        generate_resource_fs_moniker('comcode_page', $zone . ':' . $new_file);
    }

    if ($validated == 1) {
        if ($include_on_sitemap == 1) {
            $_include_on_sitemap = 1;
        } else {
            $_include_on_sitemap = 0;
        }
    } else {
        $_include_on_sitemap = 0;
    }
    require_code('sitemap_xml');
    if ($_include_on_sitemap == 1) {
        notify_sitemap_node_edit($zone . ':' . $new_file);
    } else {
        notify_sitemap_node_delete($zone . ':' . $new_file);
    }

    return $full_path;
}

/**
 * Rename/move a Comcode page.
 * Does create a redirect, if requested.
 * Does not rename the actual .txt files or rebuild the Sitemap files or empty caches.
 *
 * @param  ID_TEXT $zone The old zone
 * @param  ID_TEXT $file The old page
 * @param  ID_TEXT $new_zone The new zone
 * @param  ID_TEXT $new_file The new page
 * @param  boolean $create_redirect Whether to create a redirect
 */
function rename_live_comcode_page(string $zone, string $file, string $new_zone, string $new_file, bool $create_redirect = false)
{
    $GLOBALS['SITE_DB']->query_update('attachment_refs', ['r_referer_id' => $new_zone . ':' . $new_file], ['r_referer_id' => $zone . ':' . $file, 'r_referer_type' => 'comcode_page']);

    if (addon_installed('catalogues')) {
        update_catalogue_content_ref('comcode_page', $zone . ':' . $file, $new_zone . ':' . $new_file);
    }

    if (addon_installed('awards')) {
        $types = $GLOBALS['SITE_DB']->query_select('award_types', ['id'], ['a_content_type' => 'comcode_page']);
        foreach ($types as $type) {
            $GLOBALS['SITE_DB']->query_update('award_archive', ['content_id' => $new_zone . ':' . $new_file], ['content_id' => $zone . ':' . $file, 'a_type_id' => $type['id']]);
        }
    }

    $GLOBALS['SITE_DB']->query_update('seo_meta', ['meta_for_id' => $new_zone . ':' . $new_file], ['meta_for_id' => $zone . ':' . $file, 'meta_for_type' => 'comcode_page'], '', 1);
    $GLOBALS['SITE_DB']->query_update('seo_meta_keywords', ['meta_for_id' => $new_zone . ':' . $new_file], ['meta_for_id' => $zone . ':' . $file, 'meta_for_type' => 'comcode_page']);

    $GLOBALS['SITE_DB']->query_update('catalogue_entry_linkage', ['content_id' => $new_zone . ':' . $new_file], ['content_id' => $zone . ':' . $file, 'content_type' => 'comcode_page'], '', 1);

    $GLOBALS['SITE_DB']->query_update('url_id_monikers', ['m_resource_page' => $new_file, 'm_resource_id' => $new_zone], ['m_resource_page' => $file, 'm_resource_id' => $zone], '', 1);

    $GLOBALS['SITE_DB']->query_update('comcode_pages', ['p_parent_page' => $new_file], ['the_zone' => $zone, 'p_parent_page' => $file]);

    $GLOBALS['SITE_DB']->query_update('comcode_pages', ['the_zone' => $new_zone, 'the_page' => $new_file], ['the_zone' => $zone, 'the_page' => $file], '', 1);

    $GLOBALS['SITE_DB']->query_update('cached_comcode_pages', ['the_zone' => $new_zone, 'the_page' => $new_file], ['the_zone' => $zone, 'the_page' => $file], '', 1);

    $GLOBALS['SITE_DB']->query_update('sitemap_cache', ['page_link' => $new_zone . ':' . $new_file], ['page_link' => $zone . ':' . $file], '', 1);

    if ($create_redirect) {
        $GLOBALS['SITE_DB']->query_delete('redirects', [
            'r_from_page' => $file,
            'r_from_zone' => $zone,
        ], '', 1);
        $GLOBALS['SITE_DB']->query_insert('redirects', [
            'r_from_page' => $file,
            'r_from_zone' => $zone,
            'r_to_page' => $new_file,
            'r_to_zone' => $zone,
            'r_is_transparent' => 0,
        ]);
    }
}

/**
 * Get the file extension for a page type.
 *
 * @param  ID_TEXT $type The page type (including any language subdirectory)
 * @return string The file extension
 */
function get_page_type_file_extension(string $type) : string
{
    $ext = '';
    if (substr($type, 0, 7) == 'modules') {
        $ext = 'php';
    } elseif (substr($type, 0, 7) == 'comcode') {
        $ext = 'txt';
    } elseif (substr($type, 0, 4) == 'html') {
        $ext = 'htm';
    } else {
        fatal_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('44d48006f6045069b12fce6591b3ca8b')));
    }
    return $ext;
}

/**
 * Delete a software page.
 *
 * @param  ID_TEXT $zone The zone
 * @param  ID_TEXT $page The page
 * @param  ID_TEXT $type The page type [NB: page is deleted in all languages regardless of which is given]
 * @set modules modules_custom minimodules minimodules_custom comcode comcode_custom html html_custom
 * @param  boolean $use_afm Whether to use the AFM
 * @param  ?LANGUAGE_NAME $only_lang Only delete this specific language (null: none)
 */
function delete_cms_page(string $zone, string $page, string $type = 'comcode_custom', bool $use_afm = false, ?string $only_lang = null)
{
    $_page = $page . '.' . get_page_type_file_extension($type);

    if ($only_lang === null) {
        $GLOBALS['SITE_DB']->query_delete('menu_items', ['i_link' => $zone . ':' . $page]);
        delete_cache_entry('menu');
    }

    if ((substr($type, 0, 7) == 'comcode') || (substr($type, 0, 4) == 'html')) {
        $type_shortened = preg_replace('#/.+#', '', $type);

        if (substr($type, 0, 7) == 'comcode') {
            if (addon_installed('actionlog')) {
                require_code('revisions_engine_files');
                $revision_engine = new RevisionEngineFiles();
                list(, , $existing_path) = find_comcode_page(($only_lang === null) ? user_lang() : $only_lang, $page, $zone);
                if ($existing_path != '') {
                    $revision_engine->add_revision(dirname($existing_path), $page, 'txt', cms_file_get_contents_safe($existing_path, FILE_READ_LOCK | FILE_READ_BOM), filemtime($existing_path));
                }
            }

            if (addon_installed('search')) {
                require_code('database_search');
                Fast_custom_index::delete_from_index($GLOBALS['SITE_DB'], 'cpages_fulltext_index', ['i_zone_name' => $zone, 'i_page_name' => $page]);
            }
        }

        $langs = find_all_langs(true);
        foreach (array_keys($langs) as $lang) {
            if (($only_lang !== null) && ($only_lang != $lang)) {
                continue;
            }

            $_path = zone_black_magic_filterer(filter_naughty($zone) . (($zone == '') ? '' : '/') . 'pages/' . filter_naughty($type_shortened) . '/' . $lang . '/' . $_page, true);
            $path = ((strpos($type, 'comcode/') !== false) ? get_file_base() : get_custom_file_base()) . '/' . $_path;
            if (file_exists($path)) {
                if ($use_afm) {
                    afm_delete_file($_path);
                } else {
                    unlink(get_custom_file_base() . '/' . $_path);
                    sync_file(get_custom_file_base() . '/' . $_path);
                }
            }
        }

        if ((substr($type, 0, 7) == 'comcode') && ($only_lang === null)) {
            require_code('attachments2');
            require_code('attachments3');
            delete_comcode_attachments('comcode_page', $zone . ':' . $page);
            $GLOBALS['SITE_DB']->query_delete('cached_comcode_pages', ['the_page' => $page, 'the_zone' => $zone]);
            $GLOBALS['COMCODE_PAGE_RUNTIME_CACHE'] = [];
            $GLOBALS['SITE_DB']->query_delete('comcode_pages', ['the_page' => $page, 'the_zone' => $zone]);
            erase_persistent_cache();
            delete_cache_entry('main_comcode_page_children');

            require_code('content2');
            seo_meta_erase_storage('comcode_page', $zone . ':' . $page);

            require_code('fields');
            delete_form_custom_fields('comcode_page', $zone . ':' . $page);
        }
    } else {
        if ($only_lang !== null) {
            fatal_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('183ba384acad55f8b89c73d1f7311a77')));
        }

        $_path = zone_black_magic_filterer(filter_naughty($zone) . (($zone == '') ? '' : '/') . 'pages/' . filter_naughty($type) . '/' . $_page, true);
        $path = ((strpos($type, '_custom') === false) ? get_file_base() : get_custom_file_base()) . '/' . $_path;
        if (file_exists($path)) {
            if ($use_afm) {
                afm_delete_file($_path);
            } else {
                unlink(get_custom_file_base() . '/' . $_path);
                sync_file(get_custom_file_base() . '/' . $_path);
            }
        }
    }

    if ($only_lang === null) {
        if (addon_installed('catalogues')) {
            update_catalogue_content_ref('comcode_page', $page, '');
        }

        $GLOBALS['SITE_DB']->query_update('url_id_monikers', ['m_deprecated' => 1], ['m_resource_page' => $page, 'm_resource_type' => '', 'm_resource_id' => $zone]);

        log_it('DELETE_PAGES', $zone . ':' . $page);

        require_code('sitemap_xml');
        notify_sitemap_node_delete($zone . ':' . $page);
    }
}
