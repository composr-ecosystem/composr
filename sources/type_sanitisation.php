<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__type_sanitisation()
{
    if (!function_exists('is_alphanumeric')) {
        /**
         * Find whether the specified string is alphanumeric or not.
         *
         * @param  string $string The string to test
         * @param  boolean $strict Whether to do stricter sanitisation, latin alphanumeric only and no dots
         * @return boolean Whether the string is alphanumeric or not
         */
        function is_alphanumeric($string, $strict = false)
        {
            if ($strict) {
                return preg_match('#^[\w\-]*$#', $string) != 0;
            }

            if (get_charset() == 'utf-8') {
                $test = @preg_match('#^[\pL\w\-\.]*$#u', $string) != 0; // unicode version, may fail on some servers
                if ($test !== false) {
                    return $test;
                }
            }
            return preg_match('#^[\w\-\.]*$#', $string) != 0;
        }
    }
}

/**
 * Find whether the specified address is a well-formed e-mail address or not.
 *
 * @param  string $string The string to test (Note: This is typed string, not e-mail, because it has to function on failure + we could make an infinite loop)
 * @return boolean Whether the string is an e-mail address or not
 */
function is_email_address($string)
{
    if ($string == '') {
        return false;
    }

    return (preg_match('#^[\w\.\-\+]+@[\w\.\-]+$#', $string) != 0); // Put "\.[a-zA-Z0-9_\-]+" before $ to ensure a two+ part domain
}

/**
 * Find whether the specified address is a well-formed IP address or not.
 *
 * @param  string $string The string to test (Note: This is typed string, not IP, because it has to function on failure)
 * @return boolean Whether the string is an IP address or not
 */
function is_ip_address($string)
{
    // ipv4
    if (strpos($string, '.') !== false) {
        $parts = explode('.', $string);
        if (count($parts) != 4) {
            return false;
        }
        $ok = true;
        foreach ($parts as $part) {
            if (preg_match('#^\d+$#', $part) != 0) {
                if (intval($part) > 255) {
                    $ok = false;
                }
            } else {
                $ok = false;
                break;
            }
        }
        return $ok;
    }

    // ipv6
    if (strpos($string, ':') !== false) {
        $parts = explode(':', $string);
        if (count($parts) > 8) {
            return false;
        }
        $num_empty_sections = 0;
        $ok = true;
        foreach ($parts as $part) {
            if ($part == '') {
                $num_empty_sections++;
            } else {
                if (preg_match('#^[0-9A-F]{1,4}$#i', $part) == 0) {
                    $ok = false;
                    break;
                }
            }
        }
        if ($num_empty_sections > 1) {
            return false;
        }
        if (($num_empty_sections == 0) && (count($parts) < 8)) {
            return false;
        }
        return $ok;
    }

    return false;
}
