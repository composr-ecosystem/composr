<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    realtime_rain
 */

/**
 * AJAX script for returning realtime-rain data.
 */
function realtime_rain_script()
{
    if (!addon_installed('realtime_rain')) {
        warn_exit(do_lang_tempcode('MISSING_ADDON', escape_html('realtime_rain')));
    }

    if (!has_actual_page_access(get_member(), 'admin_realtime_rain')) {
        access_denied('I_ERROR');
    }

    cms_ini_set('ocproducts.xss_detect', '0');

    prepare_backend_response();

    echo '<?xml version="1.0" encoding="' . escape_html(get_charset()) . '"?' . '>
<!DOCTYPE xc:content [
<!ENTITY euro "&#8364;">
<!ENTITY ldquo "&#8220;">
<!ENTITY rdquo "&#8221;">
<!ENTITY lsquo "&#8216;">
<!ENTITY rsquo "&#8217;">
<!ENTITY dagger "&#8224;">
<!ENTITY Dagger "&#8225;">
<!ENTITY permil "&#8240;">
<!ENTITY Scaron "&#352;">
<!ENTITY scaron "&#353;">
<!ENTITY Yuml "&#376;">
<!ENTITY ndash "&#8211;">
<!ENTITY mdash "&#8212;">
<!ENTITY hellip "&#8230;">
<!ENTITY copy "&#169;">
<!ENTITY nbsp " ">
<!ENTITY fnof "&#402;">
<!ENTITY reg "&#174;">
<!ENTITY trade "&#8482;">
<!ENTITY raquo "&#187;">
<!ENTITY frac14 "&#188;">
<!ENTITY frac12 "&#189;">
<!ENTITY frac34 "&#190;">
]>
';
    echo '<request><result>';
    require_code('realtime_rain');
    require_lang('realtime_rain');

    $time_now = time();
    $from = get_param_integer('from', $time_now - 10);
    $to = get_param_integer('to', $time_now);

    if (get_param_integer('keep_realtime_test', 0) == 1) {
        require_code('lorem');

        $types = ['post', 'news', 'recommend', 'polls', 'ecommerce', 'actionlog', 'security', 'chat', 'stats', 'join', 'calendar', 'search', 'banners', 'points', 'points_sent', 'escrow'];
        shuffle($types);

        $special_icons = ['email', 'news', 'phone', 'searchengine'];
        shuffle($special_icons);

        $events = [];
        foreach ($types as $i => $type) {
            if (mt_rand(0, 8) == 1) {
                break; // Don't show too much at once
            }

            $timestamp = mt_rand($from, $to);

            $special_icon = $special_icons[$i % count($special_icons)];

            $events[] = [
                'TYPE' => $type,
                'FROM_MEMBER_ID' => null,
                'TO_MEMBER_ID' => null,
                'TITLE' => lorem_phrase(),
                'IMAGE' => rain_get_country_image(placeholder_ip_uk()),
                'TIMESTAMP' => strval($timestamp),
                'RELATIVE_TIMESTAMP' => strval($timestamp - $from),
                'TICKER_TEXT' => ($i == 0) ? lorem_sentence_html() : null,
                'URL' => null,
                'IS_POSITIVE' => ($type == 'ecommerce' || $type == 'join' || $type == 'points_sent' || $type == 'escrow'),
                'IS_NEGATIVE' => ($type == 'security' || $type == 'points'),

                // These are for showing connections between drops. They are not discriminated, it's just three slots to give an ID code that may be seen as a commonality with other drops.
                'FROM_ID' => null,
                'TO_ID' => null,
                'GROUP_ID' => 'example_' . strval(mt_rand(0, 4)),

                'SPECIAL_ICON' => $special_icon,
                'SPECIAL_TOOLTIP' => lorem_phrase(),
                'MULTIPLICITY' => strval(($special_icon == 'email') ? 10 : 1),
            ];
        }
    } else {
        $events = get_realtime_events($from, $to);
    }

    shuffle($events);

    $out = new Tempcode();
    foreach ($events as $event) {
        $out->attach(do_template('REALTIME_RAIN_BUBBLE', $event));
    }
    $out->evaluate_echo();
    echo '</result></request>';

    cms_safe_exit_flow();
}

/**
 * Get all the events within a timestamp range.
 *
 * @param  TIME $from From time (inclusive)
 * @param  TIME $to To time (inclusive)
 * @return array List of template parameter sets (perfect for use in a Tempcode LOOP)
 */
function get_realtime_events(int $from, int $to) : array
{
    $drops = [];

    $hooks = find_all_hook_obs('systems', 'realtime_rain', 'Hook_realtime_rain_');
    foreach ($hooks as $ob) {
        $drops = array_merge($drops, $ob->run($from, $to));
    }

    return $drops;
}

/**
 * Make a realtime event bubble's title fit in the available space.
 *
 * @param  string $text Idealised title
 * @return Tempcode Cropped title, with tooltip for full title
 */
function rain_truncate_for_title(string $text) : object
{
    require_code('templates_tooltip');
    return protect_from_escaping(generate_tooltip_by_truncation($text, 40));
}

/**
 * Get a country flag image for an IP address.
 *
 * @param  IP $ip_address An IP address
 * @return URLPATH Country flag image (blank: could not find one)
 */
function rain_get_country_image(string $ip_address) : string
{
    if ($ip_address == '') {
        return '';
    }

    require_code('locations');

    $country = geolocate_ip($ip_address);
    if ($country === null) {
        return '';
    }

    return find_theme_image('flags/' . $country);
}

/**
 * Returns a map with an icon and multiplicity parameter (that may be null).
 *
 * @param  ?IP $ip_address An IP address (used to check against bots) (null: no IP)
 * @param  TIME $timestamp A timestamp (used to check for logged sent e-mails)
 * @param  ?string $user_agent A user agent (used to check against phones) (null: no user agent)
 * @param  ?string $news News ticker news (null: no news ticker news)
 * @return array Map with an icon and multiplicity parameter
 */
function rain_get_special_icons(?string $ip_address, int $timestamp, ?string $user_agent = null, ?string $news = null) : array
{
    $icon = null;
    $tooltip = '';
    $multiplicity = 1;
    $bot = get_bot_type($user_agent);
    if ($bot !== null) {
        $icon = 'searchengine';
        $tooltip = do_lang('RTEV_BOT');
    } else {
        if (($user_agent !== null) && (is_mobile($user_agent))) {
            $icon = 'phone';
            $tooltip = do_lang('RTEV_PHONE');
        } else {
            $mails_sent = $GLOBALS['SITE_DB']->query_select_value('logged_mail_messages', 'COUNT(*)', ['m_date_and_time' => $timestamp]); // TODO: crude; it's possible time will be off by a second depending on precision and server speed
            if ($mails_sent > 0) {
                $multiplicity = $mails_sent;
                $icon = 'email';
                $tooltip = do_lang('RTEV_EMAILS', integer_format($multiplicity, 0));
            } elseif ($news !== null) {
                $icon = 'news';
                $tooltip = do_lang('RTEV_NEWS');
            }
        }
    }

    return ['SPECIAL_ICON' => $icon, 'SPECIAL_TOOLTIP' => $tooltip, 'MULTIPLICITY' => strval(min(20, $multiplicity))];
}
