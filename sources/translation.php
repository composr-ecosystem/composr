<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_language_editing
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__translation()
{
    if (!defined('TRANS_TEXT_CONTEXT__AUTODETECT')) {
        define('TRANS_TEXT_CONTEXT__AUTODETECT', 0);
        define('TRANS_TEXT_CONTEXT__PLAIN', 1);
        define('TRANS_TEXT_CONTEXT__HTML_BLOCK', 2);
        define('TRANS_TEXT_CONTEXT__HTML_INLINE', 3);
        define('TRANS_TEXT_CONTEXT__HTML_RAW', 4);
    }
}

/**
 * Whether translation is available.
 *
 * @param  ?LANGUAGE_NAME $from Source language (null: do not consider)
 * @param  ?LANGUAGE_NAME $to Destination language (null: do not consider)
 * @param  ?object $translation_object Translation object, will be returned by reference (null: search all)
 * @param  ?string $errormsg Error message (returned by reference) (null: not set yet)
 * @return boolean Whether it is
 */
function has_translation($from = null, $to = null, &$translation_object = null, &$errormsg = null)
{
    if ($translation_object !== null) {
        return $translation_object->has_translation($from, $to, $errormsg);
    }

    $hook_obs = find_all_hook_obs('systems', 'translation', 'Hook_translation_');
    foreach ($hook_obs as $hook_ob) {
        if ($hook_ob->has_translation($from, $to, $errormsg)) {
            $translation_object = $hook_ob;
            return true;
        }
    }

    return false;
}

/**
 * Get a particular translation object.
 *
 * @param  string $hook Specific hook to use
 * @return ?object Translation object (null: could not find)
 */
function get_translation_object_for_hook($hook)
{
    if ($hook === null) {
        return null;
    }

    require_code('hooks/systems/translation/' . $hook);
    return object_factory('Hook_translation_' . $hook);
}

/**
 * Translate some text.
 *
 * @param  string $text The text to translate
 * @param  integer $context A TRANS_TEXT_CONTEXT_* constant
 * @param  ?LANGUAGE_NAME $from Source language (null: autodetect from the text itself)
 * @param  ?LANGUAGE_NAME $to Destination language (null: current user's language)
 * @param  ?string $hook Specific hook to use (null: first that'll do it)
 * @param  ?string $errormsg Error message (returned by reference) (null: not set yet)
 * @return ?string Translated text (null: some kind of error)
 */
function translate_text($text, $context = 0, $from = null, $to = null, $hook = null, &$errormsg = null)
{
    if ($text == '') {
        return '';
    }

    $translation_object = get_translation_object_for_hook($hook);
    if (!has_translation($from, $to, $translation_object, $errormsg)) {
        return null;
    }

    if ($to === null) {
        $to = user_lang();
    }

    if ($to === $from) {
        return null; // No translation needed
    }

    if ($from === null) {
        if (($to === 'EN') && (preg_match('#^[\x00-\x7F]*$#', ($context == TRANS_TEXT_CONTEXT__PLAIN) ? $text : html_entity_decode($text, ENT_QUOTES, 'utf-8')) != 0)) {
            return null; // Looks like it's already in English (no other languages work well in ASCII): don't waste money on translation
        }
    }

    $context_metadata = $translation_object->get_translation_context($context, $from, $to, $errormsg);

    $cache_map = [
        't_lang_from' => ($from === null) ? '' : $from,
        't_lang_to' => $to,
        't_text' => $text,
        't_context' => $context,
    ];
    $text_result = $GLOBALS['SITE_DB']->query_select_value_if_there('translation_cache', 't_text_result', $cache_map);

    if ($text_result === null) { // Not cached
        $text_result = $translation_object->translate_text($text, $context, $context_metadata, $from, $to, $errormsg);
        if ($text_result === null) { // Some kind of error
            return null;
        }

        // Store into cache
        $GLOBALS['SITE_DB']->query_insert('translation_cache', $cache_map + ['t_text_result' => $text_result]);
    }

    $ret = $translation_object->put_result_into_context($text_result, $context, $context_metadata);

    return $ret;
}

/**
 * Get HTML to provide credit to the translation backend, as appropriate.
 *
 * @param  ?LANGUAGE_NAME $from Source language (null: do not consider)
 * @param  ?LANGUAGE_NAME $to Destination language (null: do not consider)
 * @param  ?string $hook Specific hook to use (null: first that'll do it)
 * @return string Credit HTML
 */
function get_translation_credit($from = null, $to = null, $hook = null)
{
    $translation_object = get_translation_object_for_hook($hook);
    if (!has_translation($from, $to, $translation_object)) {
        return '';
    }
    return $translation_object->get_translation_credit();
}
