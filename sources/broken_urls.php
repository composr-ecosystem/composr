<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cleanup_tools
 */

/**
 * Hook class.
 *
 * @package core_cleanup_tools
 */
class BrokenURLScanner
{
    /**
     * Scan URL fields for URLs.
     *
     * @param  array $live_base_urls The live base URL(s)
     * @param  integer $maximum_api_results Maximum results to query from APIs
     * @return array List of URLs (each list entry is a map of URL details)
     */
    public function enumerate_url_fields(array $live_base_urls, int $maximum_api_results) : array
    {
        $urls = [];

        push_db_scope_check(false);

        $skip_hooks = find_all_hooks('systems', 'non_active_urls');
        $sql = 'SELECT m_name,m_table FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'db_meta WHERE m_type LIKE \'' . db_encode_like('%URLPATH%') . '\'';
        $urlpaths = $GLOBALS['SITE_DB']->query($sql);
        foreach ($urlpaths as $field) {
            if (array_key_exists($field['m_table'], $skip_hooks)) {
                continue;
            }
            if (in_array($field['m_table'], ['hackattack', 'url_title_cache', 'theme_images', 'incoming_uploads'])) {
                continue;
            }

            $key_sql = 'SELECT m_name FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'db_meta WHERE m_type LIKE \'*%\' AND ' . db_string_equal_to('m_table', $field['m_table']);
            $key_fields = $GLOBALS['SITE_DB']->query($key_sql);
            $select = array_unique(array_merge([$field['m_name']], collapse_1d_complexity('m_name', $key_fields)));

            $ofs = $GLOBALS['SITE_DB']->query_select($field['m_table'], $select);
            foreach ($ofs as $of) {
                $url = $of[$field['m_name']];

                if ($url == '') {
                    continue;
                }

                $table_name = $field['m_table'];
                $field_name = $field['m_name'];

                $id = '';
                foreach ($key_fields as $i => $key_field) {
                    if ($i != 0) {
                        $id .= ':';
                    }
                    $id .= @strval($of[$key_field['m_name']]);
                }

                $edit_url = $this->find_table_content_edit_url($table_name, $id, $key_fields);

                $urls[] = [
                    'url' => $url,
                    'table_name' => $table_name,
                    'field_name' => $field_name,
                    'identifier' => array_key_exists('id', $of) ? strval($of['id']) : (array_key_exists('name', $of) ? $of['name'] : do_lang('UNKNOWN')),
                    'edit_url' => $edit_url,
                ];
            }
        }

        pop_db_scope_check();

        return $urls;
    }

    /**
     * Scan Comcode fields for URLs.
     *
     * @param  array $live_base_urls The live base URL(s)
     * @param  integer $maximum_api_results Maximum results to query from APIs
     * @return array List of URLs (each list entry is a map of URL details)
     */
    public function enumerate_comcode_fields(array $live_base_urls, int $maximum_api_results) : array
    {
        $urls = [];

        /*
        For testing...
        $url = get_base_url() . '/foo.html';
        $urls[] = [
            'url' => $url,
            'table_name' => null,
            'field_name' => null,
            'identifier' => null,
            'edit_url' => null,
        ];
        return $urls;
        */

        push_db_scope_check(false);

        global $COMCODE_URLS;

        push_lax_comcode(true);

        $sql = 'SELECT m_table,m_name FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'db_meta WHERE m_type LIKE \'' . db_encode_like('%LONG\_TRANS\_\_COMCODE%') . '\'';
        $possible_comcode_fields = $GLOBALS['SITE_DB']->query($sql);
        foreach ($possible_comcode_fields as $field) {
            if (in_array($field['m_table'], ['seo_meta', 'cached_comcode_pages'])) {
                continue;
            }

            $key_sql = 'SELECT m_name FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'db_meta WHERE m_type LIKE \'*%\' AND ' . db_string_equal_to('m_table', $field['m_table']);
            $key_fields = $GLOBALS['SITE_DB']->query($key_sql);
            $select = array_unique(array_merge([$field['m_name']], collapse_1d_complexity('m_name', $key_fields)));

            $ofs = $GLOBALS['SITE_DB']->query_select($field['m_table'], $select);
            foreach ($ofs as $of) {
                if ((!multi_lang_content()) && (strpos($of[$field['m_name']], '/') === false)) {
                    continue; // Doesn't appear to contain any URLs
                }

                $COMCODE_URLS = [];

                get_translated_tempcode($field['m_table'], $of, $field['m_name']);

                if ($COMCODE_URLS !== null) {
                    foreach (array_keys($COMCODE_URLS) as $url) {
                        if ($url == '') {
                            continue;
                        }

                        $table_name = $field['m_table'];
                        $field_name = $field['m_name'];
                        if (multi_lang_content()) {
                            $table_name .= ' / translate';
                            $field_name .= ' / text_original';
                        }

                        $id = '';
                        foreach ($key_fields as $i => $key_field) {
                            if ($i != 0) {
                                $id .= ':';
                            }
                            $id .= @strval($of[$key_field['m_name']]);
                        }

                        $edit_url = $this->find_table_content_edit_url($table_name, $id, $key_fields);

                        if (multi_lang_content()) {
                            $id .= '/' . strval($of[$field['m_name']]);
                        }

                        $urls[] = [
                            'url' => $url,
                            'table_name' => $table_name,
                            'field_name' => $field_name,
                            'identifier' => $id,
                            'edit_url' => $edit_url,
                        ];
                    }
                }
            }
        }

        pop_lax_comcode();

        pop_db_scope_check();

        return $urls;
    }

    /**
     * Find the URL to some content.
     *
     * @param  string $table_name Table
     * @param  string $id ID
     * @param  array $key_fields Key fields
     * @return ?Tempcode Edit URL (null: none)
     */
    protected function find_table_content_edit_url(string $table_name, string $id, array $key_fields) : ?object
    {
        $edit_url = null;
        if (count($key_fields) == 1) {
            require_code('content');
            $content_type = convert_composr_type_codes('table', $table_name, 'content_type');
            if ($content_type != '') {
                $cma_ob = get_content_object($content_type);
                if (is_object($cma_ob)) {
                    $cma_info = $cma_ob->info();
                    if (!empty($cma_info['edit_page_link_pattern'])) {
                        $edit_page_link = str_replace('_WILD', $id, $cma_info['edit_page_link_pattern']);
                        $edit_url = page_link_to_tempcode_url($edit_page_link);
                    }
                }
            }
        }
        return $edit_url;
    }

    /**
     * Scan catalogues for URLs.
     *
     * @param  array $live_base_urls The live base URL(s)
     * @param  integer $maximum_api_results Maximum results to query from APIs
     * @return array List of URLs (each list entry is a map of URL details)
     */
    public function enumerate_catalogue_fields(array $live_base_urls, int $maximum_api_results = 50) : array
    {
        $urls = [];

        if (addon_installed('catalogues')) {
            $catalogue_fields = $GLOBALS['SITE_DB']->query_select('catalogue_fields', ['id'], ['cf_type' => 'url']);
            $or_list = '';
            foreach ($catalogue_fields as $field) {
                if ($or_list != '') {
                    $or_list .= ' OR ';
                }
                $or_list .= 'cf_id=' . strval($field['id']);
            }
            if ($or_list != '') {
                $sql = 'SELECT id,cv_value,ce_id FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'catalogue_efv_short WHERE ' . $or_list;
                $values = $GLOBALS['SITE_DB']->query($sql, null, 0, false, true);
                foreach ($values as $value) {
                    $url = $value['cv_value'];

                    if ($url == '') {
                        continue;
                    }

                    $urls[] = [
                        'url' => $url,
                        'table_name' => 'catalogue_efv_short',
                        'field_name' => 'cv_value',
                        'identifier' => strval($value['id']),
                        'edit_url' => build_url(['page' => 'cms_catalogues', 'type' => '_edit_entry', 'id' => $value['ce_id']], get_module_zone('cms_catalogues')),
                    ];
                }
            }
        }

        return $urls;
    }

    /**
     * Scan Comcode pages for URLs.
     *
     * @param  array $live_base_urls The live base URL(s)
     * @param  integer $maximum_api_results Maximum results to query from APIs
     * @return array List of URLs (each list entry is a map of URL details)
     */
    public function enumerate_comcode_pages(array $live_base_urls, int $maximum_api_results = 50) : array
    {
        $urls = [];

        global $COMCODE_URLS;

        push_lax_comcode(true);

        $zones = find_all_zones();
        foreach ($zones as $zone) {
            $pages = [];
            $pages += find_all_pages($zone, 'comcode_custom/' . get_site_default_lang(), 'txt', false, null, FIND_ALL_PAGES__ALL);
            $pages += find_all_pages($zone, 'comcode/' . get_site_default_lang(), 'txt', false, null, FIND_ALL_PAGES__ALL);
            foreach ($pages as $page => $type) {
                $COMCODE_URLS = [];

                $file_path = zone_black_magic_filterer(((strpos($type, '_custom') !== false) ? get_custom_file_base() : get_file_base()) . '/' . $zone . '/pages/' . $type . '/' . $page . '.txt');
                $comcode = cms_file_get_contents_safe($file_path, FILE_READ_LOCK | FILE_READ_UNIXIFIED_TEXT | FILE_READ_BOM);

                if (strpos($comcode, '/') === false) {
                    continue; // Doesn't appear to contain any URLs
                }

                $eval = @static_evaluate_tempcode(comcode_to_tempcode($comcode, null, true));

                $matches = [];
                $num_matches = preg_match_all('#\shref="([^"]+)"#', $eval, $matches);
                for ($i = 0; $i < $num_matches; $i++) {
                    $url = html_entity_decode($matches[1][$i], ENT_QUOTES);
                    $COMCODE_URLS[$url] = true;
                }

                if ($COMCODE_URLS !== null) {
                    foreach (array_keys($COMCODE_URLS) as $i => $url) {
                        if ($url == '') {
                            continue;
                        }

                        $urls[] = [
                            'url' => $url,
                            'table_name' => null,
                            'field_name' => null,
                            'identifier' => $zone . ':' . $page,
                            'edit_url' => build_url(['page' => 'cms_comcode_pages', 'type' => '_edit', 'page_link' => $zone . ':' . $page], get_module_zone('cms_comcode_pages')),
                        ];
                    }
                }
            }
        }

        pop_lax_comcode();

        return $urls;
    }

    /**
     * Enumerate the backlinks Moz has found.
     *
     * @param  array $live_base_urls The live base URL(s)
     * @param  integer $maximum_api_results Maximum results to query from APIs (more than 50 is very slow unless you have a paid API key)
     * @return array List of URLs (each list entry is a map of URL details)
     */
    public function enumerate_moz_backlinks(array $live_base_urls, int $maximum_api_results = 50) : array
    {
        $domains = [];
        foreach ($live_base_urls as $live_base_url) {
            $domain = @parse_url($live_base_url, PHP_URL_HOST);
            if (!empty($domain)) {
                $domains[$domain] = $live_base_url;
            }
        }

        $urls = [];

        foreach ($domains as $domain => $live_base_url) {
            $next_token = null;

            do {
                $continuing = false;

                $api_url = 'https://lsapi.seomoz.com/v2/links';

                $params = [
                    'target' => $live_base_url,
                    'target_scope' => 'subdomain',
                    'sort' => 'source_page_authority',
                    'filter' => 'not_deleted+external',
                    'limit' => 50,
                ];
                if ($next_token !== null) {
                    $params['next_token'] = $next_token;
                }
                $json = json_encode($params);

                $auth = [get_option('moz_access_id'), get_option('moz_secret_key')];

                $options = [
                    'convert_to_internal_encoding' => true,
                    'trigger_error' => false,
                    'auth' => $auth,
                    'timeout' => 5.0,
                    'post_params' => $json,
                    'ignore_http_status' => true,
                ];

                $_result = cms_http_request($api_url, $options);
                $result = @json_decode($_result->data, true);

                if (!is_array($result)) {
                    $errormsg = $_result->message;
                    throw new Exception($errormsg);
                } elseif (array_key_exists('message', $result)) {
                    $errormsg = $result['message'];
                    throw new Exception($errormsg);
                } else {
                    foreach ($result['results'] as $_url) {
                        $urls[] = [
                            'url' => 'https://' . $_url['target']['page'],
                            'table_name' => null,
                            'field_name' => null,
                            'identifier' => cms_parse_url_safe('https://' . $_url['source']['page'], PHP_URL_HOST),
                            'edit_url' => 'https://' . $_url['source']['page'],
                        ];
                    }

                    if ((count($result) == 50) && ($maximum_api_results > count($urls))) {
                        $continuing = true;
                        $next_token = $result['next_token'];
                    }
                }

                if ($continuing) {
                    if (get_option('moz_paid') == '0') {
                        if (php_function_allowed('usleep')) {
                            usleep(10000000); // 10 seconds between requests
                        }
                    }
                }
            } while ($continuing);
        }

        return $urls;
    }

    /**
     * Check to see if a URL is there.
     *
     * @param  URLPATH $url URL to check
     * @param  string $message HTTP response code, returned by reference
     * @return boolean Whether the URL is there (i.e. false = broken)
     */
    public function check_url(string $url, string &$message) : bool
    {
        // Check if it's a local file URL
        if (((substr($url, 0, 8) == 'uploads/') || (substr($url, 0, 7) == 'themes/')) && (strpos($url, '?') === false)) {
            return file_exists(rawurldecode($url));
        }

        // Normal URL...

        require_code('urls2');
        $destination_url = '';
        $exists = check_url_exists($url, 0, true, 1, $message, $destination_url);

        if (!$exists) {
            return false;
        }

        // If a URL is only redirecting back to the home page, we can consider that broken too...

        static $undesirable_redirects = null;
        if ($undesirable_redirects === null) {
            $undesirable_redirects = [
                get_base_url(),
                get_base_url() . '/',
                static_evaluate_tempcode(build_url(['page' => ''], '', [], false, false, true)),
                static_evaluate_tempcode(build_url(['page' => ''], '', [], false, true, true)),
            ];
        }

        if ((in_array($destination_url, $undesirable_redirects)) && (!in_array($url, $undesirable_redirects))) {
            return false;
        }

        // ---

        return true;
    }
}
