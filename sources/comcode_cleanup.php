<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_rich_media
 */

/**
 * Take Comcode page-hint comments out of some Comcode, preparing a UI instead.
 *
 * @param  string $name Input field name
 * @param  string $post The Comcode
 * @return array A list of template-ready maps specifying checkboxes
 */
function comcode_page_hints_ui(string $name, string &$post) : array
{
    $hints = [];

    $hooks = find_all_hook_obs('systems', 'comcode_page_hints', 'Hook_comcode_page_hints_');
    foreach ($hooks as $hook => $object) {
        $details = $object->get_details(true);
        if ($details !== null) {
            $hint_comment = '{$,page hint: ' . $hook . '}';
            $present = (strpos($post, $hint_comment) !== false);

            if ($present) {
                $post = str_replace($hint_comment, '', $post);
            }

            if ($details['inverted']) {
                $selected = !$present;
            } else {
                $selected = $present;
            }

            $hints[] = [
                'HINT_CODENAME' => $hook,
                'HINT_LABEL' => $details['label'],
                'HINT_DESCRIPTION' => $details['description'],
                'HINT_SELECTED' => $selected,
            ];
        }
    }

    return $hints;
}

/**
 * Put Comcode page-hint comments into some Comcode, based on UI choices.
 *
 * @param  string $name Input field name
 * @param  string $post The Comcode
 */
function comcode_page_hints_post(string $name, string &$post)
{
    $hooks = find_all_hook_obs('systems', 'comcode_page_hints', 'Hook_comcode_page_hints_');
    foreach ($hooks as $hook => $object) {
        $details = $object->get_details(true);
        if ($details !== null) {
            $selected = post_param_integer('comcode_page_hint__' . $name . '__' . $hook, null);
            if ($selected !== null) {
                if ($details['inverted']) {
                    $present = ($selected === 0);
                } else {
                    $present = ($selected === 1);
                }

                $hint_comment = '{$,page hint: ' . $hook . '}';

                $post = str_replace($hint_comment, '', $post);

                if ($present) {
                    $post .= $hint_comment;

                    // If possible, put it before [/semihtml], it's neater
                    $post = str_replace('[/semihtml]' . $hint_comment, $hint_comment . '[/semihtml]', $post);
                }
            }
        }
    }
}

/**
 * Censor some Comcode raw code so that another user can see it.
 * This function isn't designed to be perfectly secure, and we don't guarantee it's always run, but as a rough thing we prefer to do it.
 *
 * @param  string $comcode Comcode
 * @param  ?MEMBER $aggressive Force an HTML-evaluation of the Comcode through this security ID then back to Comcode, as a security technique (null: don't)
 * @return string Censored Comcode
 */
function comcode_censored_raw_code_access(string $comcode, ?int $aggressive = null) : string
{
    if ($aggressive !== null) {
        $eval = comcode_to_tempcode($comcode, $aggressive);
        require_code('comcode_from_html');
        $comcode = semihtml_to_comcode($comcode, true);
        return $comcode;
    }

    $comcode = preg_replace('#\[staff_note\].*\[/staff_note\]#Us', '', $comcode);
    return $comcode;
}

/**
 * Filter external media, copying it locally.
 *
 * @param  string $text Comcode / HTML
 */
function download_associated_media(string &$text)
{
    $matches = [];
    $num_matches = preg_match_all('#<(img|source)\s[^<>]*src="([^"<>]*)"#i', $text, $matches);
    for ($i = 0; $i < $num_matches; $i++) {
        $old_url = $matches[2][$i];
        _download_associated_media($text, $old_url);
    }
    $num_matches = preg_match_all('#<(img|source)\s[^<>]*src=\'([^\'<>]*)\'#i', $text, $matches);
    for ($i = 0; $i < $num_matches; $i++) {
        $old_url = $matches[2][$i];
        _download_associated_media($text, $old_url);
    }
}

/**
 * Filter external media, copying it locally (helper function).
 *
 * @param  string $text Comcode / HTML
 * @param  string $old_url Old URL to download and replace
 */
function _download_associated_media(string &$text, string $old_url)
{
    if (!is_our_server(parse_url($old_url, PHP_URL_HOST))) {
        require_code('crypt');
        $temp_filename = get_secure_random_string();
        $temp_dir = get_file_base(true) . '/uploads/external_media';
        if (!file_exists($temp_dir)) {
            require_code('files2');
            make_missing_directory($temp_dir);
        }
        $temp_path = $temp_dir . '/' . $temp_filename;

        $write_to_file = fopen($temp_path, 'wb');
        $http_result = cms_http_request($old_url, ['write_to_file' => $write_to_file]);
        if ($http_result->data === null) {
            @unlink($temp_path);
            return;
        }

        $mapping = [
            'image/png' => 'png',
            'image/gif' => 'png',
            'image/jpeg' => 'png',
            'video/mp4' => 'mp4',
            'video/ogg' => 'ogv',
            'video/webm' => 'webm',
            'video/mpeg' => 'mp3',
            'audio/ogg' => 'ogg',
        ];
        if (!isset($mapping[$http_result->download_mime_type])) {
            @unlink($temp_path);
            return;
        }

        $new_filename = preg_replace('#\..*#', '', basename($http_result->filename));
        if ($new_filename == '') {
            require_code('crypt');
            $new_filename = get_secure_random_string();
        }
        $new_filename .= '.' . $mapping[$http_result->download_mime_type];
        require_code('urls2');
        list($new_path, $new_url) = find_unique_path('uploads/external_media', $new_filename);

        rename($temp_path, $new_path);
        fix_permissions($new_path);

        $new_url = baseify_local_url($new_url);
        $text = str_replace($old_url, $new_url, $text);
    }
}
