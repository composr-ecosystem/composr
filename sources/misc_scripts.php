<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/*EXTRA FUNCTIONS: curl_.*|imagefilledrectangle|usleep*/

/**
 * Script to access a gravatar, while protecting the user's privacy.
 *
 * @ignore
 */
function gravatar_script()
{
    header('X-Robots-Tag: noindex');

    $id = get_param_integer('id');

    $email_address = $GLOBALS['FORUM_DRIVER']->get_member_email_address($id);
    $avatar_url = $GLOBALS['FORUM_DRIVER']->get_member_avatar_url($id, false);

    $is_error = true; // We'll only set to false once everything is good

    if (($avatar_url == '') && ($email_address != '')) {
        $gravatar_url = 'https://www.gravatar.com/avatar/' . md5($email_address) . '?d=404';
        $f = @fopen($gravatar_url, 'rb');
    } else {
        $f = false; // We already have an avatar, or can't get a gravatar, so let it get to error state
    }

    if (($f !== false) && (!empty($http_response_header))) {
        // Work out appropriate content type (with restrictions)
        $content_type = 'image/png';
        $matches = [];
        foreach ($http_response_header as $header) {
            if (preg_match('#^HTTP/[\d\.]* 20#i', $header, $matches) != 0) {
                $is_error = false;
            }
            if (preg_match('#^Content-Type:\s*(.*)\s*#i', $header, $matches) != 0) {
                $content_type = $matches[1];
            }
        }
        if (substr($content_type, 0, 6) != 'image/') {
            fatal_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }
    }

    if ($is_error) {
        if (($avatar_url == '') && (get_forum_type() == 'cns')) {
            require_code('cns_members2');
            $avatar_url = cns_choose_default_avatar($email_address, 'dynamic');
        }

        if ((url_is_local($avatar_url)) && ($avatar_url != '')) {
            $avatar_url = get_complex_base_url($avatar_url) . '/' . $avatar_url;
        }

        if ($avatar_url == '') {
            $avatar_url = 'https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y';
        }

        header('Location: ' . $avatar_url);
        return;
    }

    // All good, so show gravatar...

    cms_ini_set('ocproducts.xss_detect', '0');

    foreach ($http_response_header as $header) {
        if (preg_match('#^Content-Type:\s*(.*)\s*#i', $header) == 0) {
            header($header);
        }
    }

    header('Content-Type: ' . $content_type);

    cms_ob_end_clean();
    fpassthru($f);
    @fclose($f);
}

/**
 * Script to make a nice textual image, vertical writing.
 *
 * @ignore
 */
function gd_text_script()
{
    if (!function_exists('imagefontwidth')) {
        return;
    }

    header('X-Robots-Tag: noindex');

    $text = get_param_string('text', false, INPUT_FILTER_GET_COMPLEX);

    $direction = array_key_exists('direction', $_GET) ? $_GET['direction'] : 'vertical';

    $font_size = array_key_exists('size', $_GET) ? intval($_GET['size']) : 8;

    require_code('fonts');
    $font = get_param_string('font', find_default_font(true));
    $font_path = find_font_path($font);

    if (!has_ttf()) {
        switch ($font_size) {
            case 1:
            case 2:
                $pfont = 1;
                break;

            case 3:
            case 4:
                $pfont = 2;
                break;

            case 5:
            case 6:
                $pfont = 3;
                break;

            case 7:
            case 8:
                $pfont = 4;
                break;

            default:
                $pfont = 5;
        }
        $baseline_offset = 0;

        if ($direction == 'horizontal') {
            $width = intval(imagefontwidth($pfont) * strlen($text) * 1.05);
            $height = imagefontheight($pfont);
        } else {
            $height = intval(imagefontwidth($pfont) * strlen($text) * 1.05);
            $width = imagefontheight($pfont);
        }
    } else {
        $scale = 4;

        if ($direction == 'horizontal') {
            list(, , $width, , , , , $height) = imagettfbbox(floatval($font_size * $scale), 0.0, $font_path, $text);
            $baseline_offset = 2 * $scale * intval(ceil(floatval($font_size) / 8.0));
            $height = abs($height);
            $width += $font_size * $scale * 2; // This is just due to inaccuracy in imagettfbbox, possibly due to italics not being computed correctly
            $height += $baseline_offset;

            list(, , $real_width, , , , , $real_height) = imagettfbbox(floatval($font_size), 0.0, $font_path, $text);
            $real_height = abs($real_height);
            $real_width += $font_size * 2;
            $real_height += $baseline_offset / $scale;
        } else {
            list(, , $height, , , , , $width) = imagettfbbox(floatval($font_size * $scale), 0.0, $font_path, $text);
            $baseline_offset = 2 * $scale * intval(ceil(floatval($font_size) / 8.0));
            $width = abs($width);
            $width += $baseline_offset;
            $height += $font_size * $scale * 2; // This is just due to inaccuracy in imagettfbbox, possibly due to italics not being computed correctly

            list(, , $real_height, , , , , $real_width) = imagettfbbox(floatval($font_size), 0.0, $font_path, $text);
            $real_width = abs($real_width);
            $real_width += $baseline_offset / $scale;
            $real_height += $font_size * 2;
        }
    }
    if ($width == 0) {
        $width = 1;
    }
    if ($height == 0) {
        $height = 1;
    }
    $trans_color = array_key_exists('trans_color', $_GET) ? $_GET['trans_color'] : 'FF00FF';
    $img = imagecreatetruecolor($width, $height + $baseline_offset);
    imagealphablending($img, false);
    $fg_color = array_key_exists('fg_color', $_GET) ? $_GET['fg_color'] : '000000';
    if (substr($fg_color, 0, 5) == 'seed-') {
        $theme = substr($fg_color, 5);

        require_code('themes2');
        $fg_color = find_theme_seed($theme);
    }
    if (strlen($fg_color) == 3) {
        $fg_color = $fg_color[0] . $fg_color[0] . $fg_color[1] . $fg_color[1] . $fg_color[2] . $fg_color[2];
    }
    if (preg_match('#^[\dA-F]{6}$#i', $fg_color) == 0) {
        $fg_color = '000000';
    }
    $color = imagecolorallocate($img, hexdec(substr($fg_color, 0, 2)), hexdec(substr($fg_color, 2, 2)), hexdec(substr($fg_color, 4, 2)));
    if (!has_ttf()) {
        $trans = imagecolorallocate($img, hexdec(substr($trans_color, 0, 2)), hexdec(substr($trans_color, 2, 2)), hexdec(substr($trans_color, 4, 2)));
        imagefill($img, 0, 0, $trans);
        imagecolortransparent($img, $trans);
        if ($direction == 'horizontal') {
            imagestring($img, $pfont, 0, intval($height * 0.02), $text, $color);
        } else {
            imagestringup($img, $pfont, 0, $height - 1 - intval($height * 0.02), $text, $color);
        }
    } else {
        if (function_exists('imagecolorallocatealpha')) {
            $trans = imagecolorallocatealpha($img, hexdec(substr($trans_color, 0, 2)), hexdec(substr($trans_color, 2, 2)), hexdec(substr($trans_color, 4, 2)), 127);
        } else {
            $trans = imagecolorallocate($img, hexdec(substr($trans_color, 0, 2)), hexdec(substr($trans_color, 2, 2)), hexdec(substr($trans_color, 4, 2)));
        }
        imagefilledrectangle($img, 0, 0, $width, $height, $trans);
        require_code('character_sets');
        $text = convert_to_html_encoding(convert_to_internal_encoding($text, cms_strtolower_ascii(get_param_string('charset', get_charset())), get_charset()));
        if (strpos($text, '&#') === false) {
            $previous = null;
            $nxpos = 0;
            for ($i = 0; $i < strlen($text); $i++) {
                if ($previous !== null) { // check for existing previous character
                    list(, , $rx1, , $rx2) = imagettfbbox(floatval($font_size * $scale), 0.0, $font_path, $previous);
                    $nxpos += max($rx1, $rx2) + 3;
                }
                if ($direction == 'horizontal') {
                    imagettftext($img, floatval($font_size * $scale), 0.0, $nxpos, $height - $baseline_offset, $color, $font_path, $text[$i]);
                } else {
                    imagettftext($img, floatval($font_size * $scale), 270.0, $baseline_offset, $nxpos, $color, $font_path, $text[$i]);
                }
                $previous = $text[$i];
            }
        } else {
            if ($direction == 'horizontal') {
                imagettftext($img, floatval($font_size * $scale), 0.0, 0, $height - 4, $color, $font_path, $text);
            } else {
                imagettftext($img, floatval($font_size * $scale), 270.0, 4, 0, $color, $font_path, $text);
            }
        }
        $dest_img = imagecreatetruecolor($real_width + intval(ceil(floatval($baseline_offset) / floatval($scale))), $real_height);
        imagealphablending($dest_img, false);
        imagecopyresampled($dest_img, $img, 0, 0, 0, 0, $real_width + intval(ceil(floatval($baseline_offset) / floatval($scale))), $real_height, $width, $height); // Sizes down, for simple antialiasing-like effect
        imagedestroy($img);
        $img = $dest_img;
        if (function_exists('imagesavealpha')) {
            imagesavealpha($img, true);
        }
    }

    header('Content-Type: image/png');
    imagepng($img);
    imagedestroy($img);
}

/**
 * Script to show previews of content being added/edited.
 *
 * @ignore
 */
function preview_script()
{
    disable_browser_reflective_xss_detection();

    require_code('preview');

    $result = build_preview(true);
    list($output, $validation, $keyword_density, $spelling, $health_check, $has_device_preview_modes) = $result;

    if (get_param_integer('js_only', 0) == 0) {
        $output = do_template('PREVIEW_SCRIPT', [
            '_GUID' => '97bd8909e8b9983a0bbf7ab68fab92f3',
            'OUTPUT' => $output->evaluate(),
            'WEBSTANDARDS' => $validation,
            'KEYWORD_DENSITY' => $keyword_density,
            'SPELLING' => $spelling,
            'HEALTH_CHECK' => $health_check,
            'HIDDEN' => build_keep_post_fields(),
            'HAS_DEVICE_PREVIEW_MODES' => $has_device_preview_modes,
        ]);

        $tpl = do_template('STANDALONE_HTML_WRAP', [
            '_GUID' => '0a96e3b9be154e8b29bee5b1c1c7cc69',
            'TITLE' => do_lang_tempcode('PREVIEW'),
            'FRAME' => true,
            'TARGET' => '_top',
            'NOINDEX' => true,
            'CONTENT' => $output,
        ]);
    } else {
        $tpl = $output;
    }
    $tpl->handle_symbol_preprocessing();
    $tpl->evaluate_echo();
}

/**
 * Script to perform System scheduler scripts called by (usually) the real Cron.
 *
 * @param  PATH $caller File path of the cron_bridge.php script
 *
 * @ignore
 */
function cron_bridge_script(string $caller)
{
    header('X-Robots-Tag: noindex');

    // Read options
    $loop = false;
    $loop_wait_seconds = 3;
    $loop_max_seconds = 3595;
    if (is_cli()) {
        $cli_options = getopt('', ['limit_hooks:', 'verbose', 'query_mode', 'force', 'include_msn', 'loop', 'loop_wait_seconds:', 'loop_max_seconds:']);

        $_limit_hooks = isset($cli_options['limit_hooks']) ? $cli_options['limit_hooks'] : '';
        $verbose = isset($cli_options['verbose']);
        $query_mode = isset($cli_options['query_mode']);
        $force = isset($cli_options['force']);
        $include_msn = isset($cli_options['include_msn']);

        // Read looping options
        $loop = isset($cli_options['loop']);
        if (!@cms_empty_safe($cli_options['loop_wait_seconds'])) {
            $loop_wait_seconds = intval($cli_options['loop_wait_seconds']);
        }
        if (!@cms_empty_safe($cli_options['loop_max_seconds'])) {
            $loop_max_seconds = intval($cli_options['loop_max_seconds']);
        }
    } else {
        $_limit_hooks = get_param_string('limit_hooks', '');
        $verbose = (get_param_integer('verbose', 0) == 1);
        $query_mode = (get_param_integer('query_mode', 0) == 1);
        $force = (get_param_integer('force', 0) == 1);
        $include_msn = (get_param_integer('include_msn', 0) == 1);
    }
    if ($_limit_hooks == '') {
        $limit_hooks = null;
    } else {
        $limit_hooks = explode(',', $_limit_hooks);
        foreach ($limit_hooks as &$limit_hook) {
            $limit_hook = preg_replace('#\.php$#', '', $limit_hook);
        }
    }

    // In query mode, Composr will just give advice on the system scheduler settings to use
    if ($query_mode) {
        header('Content-Type: text/plain; charset=' . get_charset());
        cms_ini_set('ocproducts.xss_detect', '0');
        require_code('files2');
        $php_path = find_php_path();
        echo $php_path . ' -C -q -c ' . get_file_base() . '/.user.ini ' . $caller;
        exit();
    }

    // Get ready
    if ($verbose) {
        cms_ini_set('ocproducts.xss_detect', '0');
        header('Content-Type: text/plain; charset=' . get_charset());
    }
    require_code('failure');

    // Upgrade pending?
    $version_files = float_to_raw_string(cms_version_number(), 10, true);
    if ((get_value('version') != $version_files) || (get_value('cns_version') != $version_files)) {
        if ($verbose) {
            echo loggable_date() . ' An upgrade is pending, cannot run' . "\n";
        }
        return;
    }

    // Check global locking, but only in looping mode
    if ($loop) {
        if ((get_value_newer_than('cron_currently_running', time() - 60 * 60/*large 1 hour timeout in case an instance is stuck doing something very slow*/, true) === '1') && (!$force)) {
            if ($verbose) {
                echo loggable_date() . ' Cron is still locked' . "\n";
            }
            return;
        }
        set_value('cron_currently_running', '1', true);
    }

    // For multi-site installs, run for each install
    if ($include_msn) {
        global $CURRENT_SHARE_USER, $SITE_INFO;
        if (($CURRENT_SHARE_USER === null) && (!empty($SITE_INFO['custom_share_domain']))) {
            require_code('files');

            foreach ($SITE_INFO as $key => $val) {
                if (substr($key, 0, 12) == 'custom_user_') {
                    $url = preg_replace('#://[\w\.]+#', '://' . substr($key, 12) . '.' . $SITE_INFO['custom_share_domain'], get_base_url()) . '/data/cron_bridge.php';
                    http_get_contents($url, ['timeout' => 180.0]);
                }
            }
        }
    }

    // Starting logging
    $_log_file = get_custom_file_base() . '/data_custom/cron.log';
    $log_file = null;
    $log_message = loggable_date() . '  (CRON STARTING)' . "\n";
    if ($verbose) {
        echo $log_message;
    }
    if (is_file($_log_file)) {
        require_code('files');
        $log_file = cms_fopen_text_write($_log_file, true, 'ab');
        fwrite($log_file, $log_message);
        flock($log_file, LOCK_UN);
    }

    // Hook details
    $cron_hooks = find_all_hook_obs('systems', 'cron', 'Hook_cron_');
    ksort($cron_hooks);

    // Set precedence (FUDGE: This would be better coded in formally)
    if (array_key_exists('tasks', $cron_hooks)) { // 2nd
        $cron_hooks = ['tasks' => $cron_hooks['tasks']] + $cron_hooks;
    }
    if (array_key_exists('cloud_propagation', $cron_hooks)) { // 1st (other hooks may need the files)
        $cron_hooks = ['cloud_propagation' => $cron_hooks['cloud_propagation']] + $cron_hooks;
    }
    if (array_key_exists('mail_queue', $cron_hooks)) { // 2nd to last
        $x = $cron_hooks['mail_queue'];
        unset($cron_hooks['mail_queue']);
        $cron_hooks = $cron_hooks + ['mail_queue' => $x];
    }
    if (array_key_exists('newsletter_drip_send', $cron_hooks)) { // Last
        $x = $cron_hooks['newsletter_drip_send'];
        unset($cron_hooks['newsletter_drip_send']);
        $cron_hooks = $cron_hooks + ['newsletter_drip_send' => $x];
    }
    $cron_hooks_info = [];

    // Load progression data
    $cron_progression = list_to_map('c_hook', $GLOBALS['SITE_DB']->query_select('cron_progression', ['*']));

    // So the block knows the system scheduler has run
    if (intval(get_value('last_cron')) < time() - 60 * 60 * 12) {
        delete_cache_entry('main_staff_checklist');
    }

    do {
        // Logging of timings
        set_value('last_cron', strval(time()));
        set_value('last_cron_started', strval(time()), true);

        // Call the hooks which do the real work
        foreach ($cron_hooks as $hook => $object) {
            // Inclusion-listed?
            if (($limit_hooks !== null) && (!in_array($hook, $limit_hooks))) {
                unset($cron_hooks[$hook]);
                continue;
            }

            // Find Cron-progression data
            if (isset($cron_progression[$hook])) {
                // Manually disabled?
                if ($cron_progression[$hook]['c_enabled'] == 0) {
                    unset($cron_hooks[$hook]);
                    continue;
                }

                $last_run = $cron_progression[$hook]['c_last_run'];
            } else {
                $last_run = null;
            }

            // Not available?
            if (array_key_exists($hook, $cron_hooks_info)) {
                $info = $cron_hooks_info[$hook];
            } else {
                $info = $object->info($last_run, true); // Need to do this so that any calculations done in here can then be used by ->run()
                if ($info === null) {
                    unset($cron_hooks[$hook]);
                    continue;
                }
                $cron_hooks_info[$hook] = $info;
            }

            // Is it time to run it?
            if (($limit_hooks === null) || ($limit_hooks !== [$hook])) { // Only if not directly requested
                if (($last_run !== null) && ($last_run + $info['minutes_between_runs'] * 60 > time())) {
                    if ($verbose) {
                        echo loggable_date() . ' Not yet time to run ' . $hook . "\n";
                    }

                    continue;
                }
            }

            // Run, with basic locking support
            if ((get_value_newer_than('cron_currently_running__' . $hook, time() - 60 * 60 * 5/*huge 5 hour timeout in case a particular hook is badly broken and we do not want frequent trip ups*/, true) !== '1') || ($force)) {
                // Update log to say starting
                $log_message = loggable_date() . '  STARTING ' . $hook . ' (' . $info['label'] . ')' . "\n";
                if ($verbose) {
                    echo $log_message;
                }
                if ($log_file !== null) {
                    flock($log_file, LOCK_EX);
                    fseek($log_file, 0, SEEK_END);
                    fwrite($log_file, $log_message);
                    flock($log_file, LOCK_UN);
                }

                // Lock
                set_value('cron_currently_running__' . $hook, '1', true);

                // Run, with timing and error catching
                $last_error = '';
                $time_before = time();
                if ($verbose) {
                    $object->run($last_run);
                } else {
                    set_throw_errors(true);
                    try {
                        $object->run($last_run);
                    } catch (Exception $e) {
                        $last_error = $e->getMessage();
                    }
                    set_throw_errors(false);
                }
                $time_after = time();

                // Reset time limit (hook may have overwritten / we provide same max time for each hook)
                cms_extend_time_limit(TIME_LIMIT_EXTEND__CRAWL);

                // Update cron_progression table
                if (isset($cron_progression[$hook])) {
                    $cron_progression[$hook]['c_last_run'] = time();
                    $cron_progression[$hook]['c_last_execution_secs'] = $time_after - $time_before;
                    $cron_progression[$hook]['c_last_error'] = $last_error;

                    $GLOBALS['SITE_DB']->query_update(
                        'cron_progression',
                        [
                            'c_last_run' => time(),
                            'c_last_execution_secs' => $time_after - $time_before,
                            'c_last_error' => $last_error,
                        ],
                        [
                            'c_hook' => $hook,
                        ],
                        '',
                        1
                    );
                } else {
                    $cron_progression[$hook] = [
                        'c_hook' => $hook,
                        'c_last_run' => time(),
                        'c_last_execution_secs' => $time_after - $time_before,
                        'c_last_error' => $last_error,
                        'c_enabled' => 1,
                    ];
                    $GLOBALS['SITE_DB']->query_insert('cron_progression', $cron_progression[$hook]);
                }

                // Unlock
                delete_value('cron_currently_running__' . $hook, true);

                // Update log to say finished
                $log_message = loggable_date() . '  FINISHED ' . $hook . ' (' . $info['label'] . ')' . "\n";
                if ($verbose) {
                    echo $log_message;
                }
                if ($log_file !== null) {
                    flock($log_file, LOCK_EX);
                    fseek($log_file, 0, SEEK_END);
                    fwrite($log_file, $log_message);
                    flock($log_file, LOCK_UN);
                }
            } else {
                // Update log to say locked
                $log_message = loggable_date() . '  WAS LOCKED ' . $hook . ' (' . $info['label'] . ')' . "\n";
                if ($verbose) {
                    echo $log_message;
                }
                if ($log_file !== null) {
                    flock($log_file, LOCK_EX);
                    fseek($log_file, 0, SEEK_END);
                    fwrite($log_file, $log_message);
                    flock($log_file, LOCK_UN);
                }
            }
        }

        // Logging of timings
        set_value('last_cron_finished', strval(time()), true);

        if ($loop) {
            $loop_ending = (time() - $_SERVER['REQUEST_TIME'] >= $loop_max_seconds);

            if ($loop_ending) {
                $log_message = loggable_date() . '  REACHED END OF LOOPING' . "\n";
            } else {
                $log_message = loggable_date() . '  PAUSED FOR ' . integer_format($loop_wait_seconds) . ' SECONDS BEFORE LOOPING' . "\n";
            }
            if ($verbose) {
                echo $log_message;
            }
            if ($log_file !== null) {
                flock($log_file, LOCK_EX);
                fseek($log_file, 0, SEEK_END);
                fwrite($log_file, $log_message);
                flock($log_file, LOCK_UN);
            }

            if ($loop_ending) {
                break;
            }

            if ($loop_wait_seconds != 0) {
                if (php_function_allowed('sleep')) {
                    sleep($loop_wait_seconds);
                } elseif (php_function_allowed('usleep')) {
                    usleep($loop_wait_seconds * 1000000);
                } else {
                    $log_message = loggable_date() . '  PHP sleep and usleep functions are missing so loop_wait_seconds will be ignored' . "\n";
                    if ($verbose) {
                        echo $log_message;
                    }
                    if ($log_file !== null) {
                        flock($log_file, LOCK_EX);
                        fseek($log_file, 0, SEEK_END);
                        fwrite($log_file, $log_message);
                        flock($log_file, LOCK_UN);
                    }
                }
            }

            $kill_cron_looping = get_value('kill_cron_looping', '0', true);
            clearstatcache(false, get_file_base() . '/sources/version.php');
            if (($kill_cron_looping == '1') || (filemtime(get_file_base() . '/sources/version.php') > $_SERVER['REQUEST_TIME'])) {
                $log_message = loggable_date() . '  LOOPING KILL SIGNAL DETECTED' . "\n";
                if ($verbose) {
                    echo $log_message;
                }
                if ($log_file !== null) {
                    flock($log_file, LOCK_EX);
                    fseek($log_file, 0, SEEK_END);
                    fwrite($log_file, $log_message);
                    flock($log_file, LOCK_UN);
                }

                // Composr has sent itself a signal that it needs to stop looping over Cron
                delete_value('kill_cron_looping');
                break;
            }
        }
    } while ($loop); // Don't manually set $loop to false to terminate, do a break - we still rely on $loop being correct below

    if ($loop) {
        // Unlock
        delete_value('cron_currently_running', true);
    }

    // Ending logging
    $log_message = loggable_date() . '  (CRON ENDING)' . "\n";
    if ($verbose) {
        echo $log_message;
    }
    if ($log_file !== null) {
        flock($log_file, LOCK_EX);
        fseek($log_file, 0, SEEK_END);
        fwrite($log_file, $log_message);
        flock($log_file, LOCK_UN);

        fclose($log_file);
    }

    if (!headers_sent()) {
        header('Content-Type: text/plain; charset=' . get_charset());
    }
}

/**
 * Script to handle iframe.
 *
 * @ignore
 */
function iframe_script()
{
    $zone = get_param_string('zone');
    $page = get_page_name();
    $ajax = (get_param_integer('ajax', 0) == 1);

    process_url_monikers(true, true, $page);

    // AJAX prep
    if ($ajax) {
        prepare_backend_response(null, BACKEND_RESPONSE_NOINDEX | BACKEND_RESPONSE_AJAX);
    }

    // Check permissions
    $zones = $GLOBALS['SITE_DB']->query_select('zones', ['*'], ['zone_name' => $zone], '', 1);
    if (!array_key_exists(0, $zones)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }
    if ($zones[0]['zone_require_session'] == 1) {
        set_no_clickjacking_csp();
    }
    if (($zones[0]['zone_name'] != '') && (get_value('windows_auth_is_enabled') !== '1') && ((get_session_id() == '') || (!$GLOBALS['SESSION_CONFIRMED_CACHE'])) && (!is_guest()) && ($zones[0]['zone_require_session'] == 1) && (!is_guest())) {
        access_denied('ZONE_ACCESS_SESSION');
    }
    if (!has_actual_page_access(get_member(), $page, $zone)) {
        access_denied('ZONE_ACCESS');
    }

    // Closed site
    $site_closed = get_option('site_closed');
    if (($site_closed == '1') && (!has_privilege(get_member(), 'access_closed_site')) && (!$GLOBALS['IS_ACTUALLY_ADMIN'])) {
        http_response_code(503);
        header('Content-Type: text/plain; charset=' . get_charset());
        @exit(get_option('closed'));
    }

    // SEO
    require_code('site');
    attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML

    // Load page
    $output = request_page($page, true);

    // Simple AJAX output?
    if ($ajax) {
        cms_ini_set('ocproducts.xss_detect', '0');

        $output->handle_symbol_preprocessing();
        echo $output->evaluate();
        return;
    }

    // Normal output
    $tpl = do_template('STANDALONE_HTML_WRAP', [
        '_GUID' => '04cf4ef7aac4201bb985327ec0e04c87',
        'OPENS_BELOW' => get_param_integer('opens_below', 0) == 1,
        'FRAME' => true,
        'NOINDEX' => true,
        'TARGET' => '_top',
        'CONTENT' => $output,
        'TITLE' => ($GLOBALS['DISPLAYED_TITLE'] === null) ? do_lang_tempcode('NA') : $GLOBALS['DISPLAYED_TITLE'],
    ]);
    $tpl->handle_symbol_preprocessing();
    $tpl->evaluate_echo();

    require_code('site');
    save_static_caching($tpl);
}

/**
 * Outputs the page-link chooser pop-up.
 *
 * @ignore
 */
function page_link_chooser_script()
{
    // Check we are allowed here
    if (!has_zone_access(get_member(), 'adminzone')) {
        access_denied('ZONE_ACCESS');
    }

    require_lang('menus');

    require_javascript('core_menus');
    require_javascript('tree_list');

    require_code('site');
    attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML

    // Display
    $content = do_template('PAGE_LINK_CHOOSER', [
        '_GUID' => '235d969528d7b81aeb17e042a17f5537',
        'NAME' => 'tree_list',
        'VALUE' => '',
        'GET_TITLE_TOO' => true,
        'AS_FIELD' => null,
        'PAGE_TYPE' => null,
    ]);
    $echo = do_template('STANDALONE_HTML_WRAP', [
        '_GUID' => '58768379196d6ad27d6298134e33fabd',
        'TITLE' => do_lang_tempcode('CHOOSE'),
        'CONTENT' => $content,
        'POPUP' => true,
        'NOINDEX' => true,
    ]);
    $echo->handle_symbol_preprocessing();
    $echo->evaluate_echo();
}

/**
 * Shows an HTML page of all emoticons clickably.
 *
 * @ignore
 */
function emoticons_script()
{
    if (get_forum_type() != 'cns') {
        warn_exit(do_lang_tempcode('NO_CNS'));
    }

    require_css('cns');

    require_lang('cns');
    require_javascript('editing');

    $extra = has_privilege(get_member(), 'use_special_emoticons') ? '' : ' AND e_is_special=0';
    $_rows = $GLOBALS['FORUM_DB']->query('SELECT * FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_emoticons WHERE e_relevance_level<3' . $extra);

    // Work out what grid spacing to use
    $max_emoticon_width = 0;
    require_code('images');
    foreach ($_rows as $myrow) {
        $test = cms_getimagesize_url(find_theme_image($myrow['e_theme_img_code'], true));
        if (($test !== false) && ($test[0] !== null)) {
            list($_width,) = $test;
            $max_emoticon_width = max($max_emoticon_width, $_width);
        }
    }
    if ($max_emoticon_width == 0) {
        $max_emoticon_width = 36;
    }
    $padding = 2;
    $window_width = 300;
    $cols = intval(floor(floatval($window_width) / floatval($max_emoticon_width + $padding)));
    if ($cols == 0) {
        $cols = 1;
    }

    // Render UI
    $rows = [];
    $cells = [];
    foreach ($_rows as $i => $myrow) {
        if (($i % $cols == 0) && ($i != 0)) {
            $rows[] = ['CELLS' => $cells];
            $cells = [];
        }

        $code_esc = $myrow['e_code'];
        $cells[] = [
            '_GUID' => 'ddb838e6fa296df41299c8758db92f8d',
            'COLS' => strval($cols),
            'FIELD_NAME' => filter_naughty_harsh(get_param_string('field_name', 'post')),
            'CODE_ESC' => $code_esc,
            'THEME_IMG_CODE' => $myrow['e_theme_img_code'],
            'CODE' => $myrow['e_code'],
        ];
    }
    if (!empty($cells)) {
        $rows[] = ['CELLS' => $cells];
    }

    $content = do_template('CNS_EMOTICON_TABLE', ['_GUID' => 'fb8c4c51f57cd8334800ef12e60d2a8a', 'ROWS' => $rows]);

    require_code('site');
    attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML

    $echo = do_template('STANDALONE_HTML_WRAP', ['_GUID' => '8acac778b145bfe7b063317fbcae7fde', 'TITLE' => do_lang_tempcode('EMOTICONS_POPUP'), 'POPUP' => true, 'CONTENT' => $content]);
    $echo->handle_symbol_preprocessing();
    $echo->evaluate_echo();
}

/**
 * Outputs a modal question dialog.
 *
 * @ignore
 */
function question_ui_script()
{
    $title = get_param_string('window_title', false, INPUT_FILTER_GET_COMPLEX);
    $_message = nl2br(escape_html(get_param_string('message', false, INPUT_FILTER_GET_COMPLEX)));
    if (function_exists('ocp_mark_as_escaped')) {
        ocp_mark_as_escaped($_message);
    }
    $button_set = explode(',', get_param_string('button_set', false, INPUT_FILTER_GET_COMPLEX));
    $_image_set = get_param_string('image_set', false, INPUT_FILTER_GET_COMPLEX);
    $image_set = ($_image_set == '') ? [] : explode(',', $_image_set);
    $message = do_template('QUESTION_UI_BUTTONS', ['_GUID' => '0c5a1efcf065e4281670426c8fbb2769', 'TITLE' => $title, 'IMAGES' => $image_set, 'BUTTONS' => $button_set, 'MESSAGE' => $_message]);

    require_code('site');
    attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML

    $echo = do_template('STANDALONE_HTML_WRAP', ['_GUID' => '8d72daa4c9f922656b190b643a6fe61d', 'TITLE' => escape_html($title), 'POPUP' => true, 'CONTENT' => $message]);
    $echo->handle_symbol_preprocessing();
    $echo->evaluate_echo();
}

/**
 * Allows conversion of a URL to a thumbnail via a simple script.
 *
 * @ignore
 */
function thumb_script()
{
    $url_full = get_param_string('url', false, INPUT_FILTER_URL_GENERAL);

    require_code('images');

    $new_name = url_to_filename($url_full);
    $file_thumb = get_custom_file_base() . '/uploads/auto_thumbs/' . $new_name;
    if (!file_exists($file_thumb)) {
        $url_thumb = convert_image($url_full, $file_thumb, null, null, intval(get_option('thumb_width')), false);
    } else {
        $url_thumb = get_custom_base_url() . '/uploads/auto_thumbs/' . rawurlencode($new_name);
    }

    require_code('mime_types');
    $mime_type = get_mime_type($url_thumb, false);
    header('Content-Type: ' . $mime_type);

    cms_ini_set('ocproducts.xss_detect', '0');

    if ((strpos($url_thumb, "\n") !== false) || (strpos($url_thumb, "\r") !== false)) {
        log_hack_attack_and_exit('HEADER_SPLIT_HACK');
    }
    header('Location: ' . escape_header($url_thumb)); // assign_refresh not used, as no UI here
}

/**
 * Redirect the browser to where a page_link specifies.
 *
 * @ignore
 */
function page_link_redirect_script()
{
    $page_link = get_param_string('id');
    $tpl = symbol_tempcode('PAGE_LINK', [$page_link]);

    $x = $tpl->evaluate();

    if ((strpos($x, "\n") !== false) || (strpos($x, "\r") !== false)) {
        log_hack_attack_and_exit('HEADER_SPLIT_HACK');
    }

    require_code('site2');
    redirect_exit($x);
}

/**
 * Proxy an external URL.
 *
 * @ignore
 */
function external_url_proxy_script()
{
    header('X-Robots-Tag: noindex');

    $url = get_param_string('url', false, INPUT_FILTER_URL_GENERAL);

    // Don't allow loops
    if (strpos($url, 'external_url_proxy.php') !== false) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    // Don't allow non-HTTP(S)
    if (preg_match('#^https?://#', $url) == 0) {
        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }

    // No time-limits wanted
    cms_disable_time_limit();

    // No ocProducts XSS filter
    cms_ini_set('ocproducts.xss_detect', '0');

    // Stream
    $content_type = 'application/octet-stream';
    $f = @fopen($url, 'rb');
    if (isset($http_response_header)) {
        // Work out appropriate content type (with restrictions)
        require_code('mime_types');
        $mime_types = array_flip(get_mime_types(false));
        $matches = [];
        foreach ($http_response_header as $header) {
            if (preg_match('#^Content-Type:\s*(.*)\s*#i', $header, $matches) != 0) {
                $content_type = $matches[1];
            }
        }
        if (!isset($mime_types[$content_type])) {
            $content_type = 'application/octet-stream';
        }
        header('Content-Type: ' . $content_type);

        foreach ($http_response_header as $header) {
            if (preg_match('#^Content-Type:\s*(.*)\s*#i', $header) == 0) {
                header($header);
            }
        }
    } else {
        header('Content-Type: ' . $content_type);
    }
    if ($f !== false) {
        cms_ob_end_clean();
        fpassthru($f);
        @fclose($f);
    }
}
