<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    newsletter
 */

/*
 * ---------------------
 * What's New generation
 * ---------------------
 */

/**
 * Get text representing content categories the user can rearrange etc.
 *
 * @param  TIME $cutoff_time Cutoff time for when new content must be available
 * @param  LANGUAGE_NAME $lang Language to send in
 * @return string Categories
 */
function newsletter_get_category_choices(int $cutoff_time, string $lang) : string
{
    require_code('global4');

    $chosen_categories = '';

    $_hooks = find_all_hook_obs('modules', 'admin_newsletter', 'Hook_whatsnew_');
    foreach ($_hooks as $hook => $object) {
        $done = false;
        if (method_exists($object, 'choose_categories')) {
            send_http_output_ping();

            list($cats, $_title) = $object->choose_categories($cutoff_time);
            if (is_object($cats)) {
                $cats = $cats->evaluate($lang);
            }
            $matches = [];
            $num_matches = preg_match_all('#<option [^>]*value="([^"]*)"[^>]*>([^<]*)</option>#', $cats, $matches); // FUDGE: Reparsing HTML. Needs to do this as Composr's APIs are been used and they output HTML.
            if ($num_matches < 1500) { /*reasonable limit on how many categories to consider*/
                for ($i = 0; $i < $num_matches; $i++) {
                    $hook_result = $object->run($cutoff_time, $lang, $matches[1][$i]);
                    if (empty($hook_result)) {
                        continue;
                    }
                    list($hook_content, $_title) = $hook_result;
                    if (!$hook_content->is_empty()) {
                        $decoded = @html_entity_decode($matches[2][$i], ENT_QUOTES);
                        $chosen_categories .= $_title . ': ' . trim($decoded) . ' [' . $hook . '/' . $matches[1][$i] . "]\n";
                    }
                }
                $done = true;
            }
        }
        if (!$done) {
            $new = $object->run($cutoff_time, $lang, '*');
            if (!empty($new)) {
                list($hook_content, $_title) = $new;
                if (!$hook_content->is_empty()) {
                    $chosen_categories .= $_title . ' [' . $hook . "]\n";
                }
            }
        }
    }

    return $chosen_categories;
}

/**
 * Generate Comcode for a what's new newsletter.
 *
 * @param  LONG_TEXT $chosen_categories Category selection
 * @param  BINARY $in_full Whether to show articles in full (as opposed to summaries)
 * @param  LANGUAGE_NAME $lang Language to send in
 * @param  TIME $cutoff_time When to cut off content from
 * @return ?string The Comcode (null: no content)
 */
function generate_whatsnew_comcode(string $chosen_categories, int $in_full, string $lang, int $cutoff_time) : ?string
{
    require_code('global4');

    // Generate Comcode for content selected, drawing on hooks
    $automatic = [];
    $i = 0;
    $catarr = explode("\n", $chosen_categories);
    $_hooks = find_all_hook_obs('modules', 'admin_newsletter', 'Hook_whatsnew_');
    foreach ($_hooks as $hook => $object) {
        $found_one_match = false;
        $last_find_id = null;
        $last_cat_id = null;
        $filter = '';
        foreach ($catarr as $find_id => $line) {
            $matches = [];
            if (preg_match('#\[' . preg_quote($hook, '#') . '/(.*)\]#', $line, $matches) != 0) {
                $found_one_match = true;

                if (($last_find_id !== null) && (($find_id != $last_find_id + 1)/* || ($last_cat_id>intval($matches[1]))*/)) {
                    $last_cat_id = intval($matches[1]);

                    $temp = $object->run(intval($cutoff_time), $lang, $filter);
                    if (($temp === null) || (empty($temp))) {
                        continue;
                    }
                    if (!$temp[0]->is_empty()) {
                        $tmp = do_template('NEWSLETTER_WHATSNEW_SECTION_FCOMCODE', [
                            '_GUID' => 'bd228cdeafacfffac2d8d98d5f2da565',
                            'I' => strval($i + 1),
                            'TITLE' => $temp[1],
                            'CONTENT' => $temp[0],
                            'IMAGE_URL' => array_key_exists(2, $temp) ? $temp[2] : '',
                        ], null, false, null, '.txt', 'text');
                        $automatic[$last_find_id] = $tmp->evaluate($lang);/*Conserve memory*/
                        $i++;
                    }

                    $filter = $matches[1];
                } else {
                    if ($filter != '') {
                        $filter .= ',';
                    }
                    $filter .= $matches[1];
                }

                $last_find_id = $find_id;
            }
        }
        if (!$found_one_match) {
            $found = false;
            foreach ($catarr as $find_id => $line) {
                if (strpos($line, '[' . $hook . ']') !== false) {
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                continue;
            }

            $temp = $object->run(intval($cutoff_time), $lang, '*', $in_full);
            if (($temp === null) || (empty($temp))) {
                continue;
            }
            if (!$temp[0]->is_empty()) {
                $tmp = do_template('NEWSLETTER_WHATSNEW_SECTION_FCOMCODE', [
                    '_GUID' => '64c8870e7c75354c07b2e94f299cd38c',
                    'I' => strval($i + 1),
                    'TITLE' => $temp[1],
                    'CONTENT' => $temp[0],
                    'IMAGE_URL' => '',
                ], null, false, null, '.txt', 'text');
                $automatic[$find_id] = $tmp->evaluate($lang);/*Conserve memory*/
                $i++;
            }
        } elseif ($filter != '') {
            $temp = $object->run(intval($cutoff_time), $lang, $filter, $in_full);
            if (($temp === null) || (empty($temp))) {
                continue;
            }
            if (!$temp[0]->is_empty()) {
                $tmp = do_template('NEWSLETTER_WHATSNEW_SECTION_FCOMCODE', [
                    '_GUID' => '8d1e7f448d11853b675a0949b8a0c2c9',
                    'I' => strval($i + 1),
                    'TITLE' => $temp[1],
                    'CONTENT' => $temp[0],
                    'IMAGE_URL' => '',
                ], null, false, null, '.txt', 'text');
                $automatic[$last_find_id] = $tmp->evaluate($lang);/*Conserve memory*/
                $i++;
            }
        }
    }

    if (empty($automatic)) {
        return null;
    }

    ksort($automatic);
    $_automatic = '';
    foreach ($automatic as $tp) {
        $_automatic .= $tp;
    }
    $__message = do_template('NEWSLETTER_WHATSNEW_FCOMCODE', ['_GUID' => '20f6adc244b04d9e5206682ec4e0cc0f', 'CONTENT' => $_automatic], null, false, null, '.txt', 'text');
    $_message = $__message->evaluate($lang);

    if (newsletter_is_html()) {
        $message = static_evaluate_tempcode(comcode_to_tempcode($_message, get_member(), true));
    } else {
        $message = $_message;
    }

    return $message;
}

/*
 * ----------------
 * Generation logic
 * ----------------
 */

/**
 * Prepare a newsletter, with the Tempcode/Wrapper/Substitution flow.
 *
 * @param  string $message_raw The unprocessed newsletter message
 * @param  SHORT_TEXT $subject The newsletter subject
 * @param  ?LANGUAGE_NAME $lang User language (null: default site language)
 * @param  SHORT_TEXT $forename Subscribers forename (blank: unknown)
 * @param  SHORT_TEXT $surname Subscribers surname (blank: unknown)
 * @param  ?SHORT_TEXT $name Subscribers name (or username) (null: generic)
 * @param  EMAIL $email_address Subscribers e-mail address
 * @param  ID_TEXT $send_id Specially encoded ID of subscriber (begins either 'n' for newsletter subscriber, or 'm' for member - then has normal subscriber/member ID following)
 * @param  SHORT_TEXT $hash Password hash of subscriber (blank: can not unsubscribe by URL)
 * @param  array $extra_mappings Extra mappings to be substituted
 * @param  ?string $wrapper_tpl Wrapper template (null: do not wrap)
 * @return string The processed newsletter message
 */
function newsletter_prepare(string $message_raw, string &$subject, ?string $lang = null, string $forename = '', string $surname = '', ?string $name = null, string $email_address = '', string $send_id = '', string $hash = '', array $extra_mappings = [], ?string $wrapper_tpl = 'NEWSLETTER_DEFAULT_FCOMCODE') : string
{
    if ($lang === null) {
        $lang = fallback_lang();
    }

    // Step 1: Evaluate tempcode
    require_code('tempcode_compiler');
    $message_tempcode = template_to_tempcode($message_raw);

    // Step 2: Apply variable substitution to message
    $message_tempcode = newsletter_variable_substitution($message_tempcode, $subject, $lang, $forename, $surname, $name, $email_address, $send_id, $hash, $extra_mappings);

    // Step 3: Wrap
    if ($wrapper_tpl === null) {
        $message_wrapped = $message_tempcode;
    } else {
        $message_wrapped = newsletter_wrap($message_tempcode, $subject, $lang, $wrapper_tpl);
    }

    // Step 4: Apply variable substitution to wrapper
    $message_wrapped = newsletter_variable_substitution($message_wrapped, $subject, $lang, $forename, $surname, $name, $email_address, $send_id, $hash, $extra_mappings);

    // NB: Any Comcode formatting is done within the mailer, or not done at all if newsletter_is_html(), or for content-auto-generation && newsletter_is_html() done as a step 0 before further hand-editing

    return $message_wrapped->evaluate($lang);
}

/**
 * Apply the newsletter wrapper.
 *
 * @param  Tempcode $message_tempcode The newsletter message
 * @param  SHORT_TEXT $subject The newsletter subject
 * @param  ?LANGUAGE_NAME $lang User language (null: default site language)
 * @param  string $wrapper_tpl Wrapper template
 * @return Tempcode The newsletter with wrapper
 */
function newsletter_wrap(object $message_tempcode, string $subject = '', ?string $lang = null, string $wrapper_tpl = 'NEWSLETTER_DEFAULT_FCOMCODE') : object
{
    if ($lang === null) {
        $lang = fallback_lang();
    }

    require_css('email');

    return do_template($wrapper_tpl, ['_GUID' => '53c02947915806e519fe14c318813f42', 'CONTENT' => $message_tempcode, 'LANG' => $lang, 'SUBJECT' => $subject], null, false, null, '.txt', 'text');
}

/**
 * Sub in newsletter variables.
 *
 * @param  Tempcode $message The original newsletter message
 * @param  SHORT_TEXT $subject The newsletter subject
 * @param  LANGUAGE_NAME $lang The language
 * @param  SHORT_TEXT $forename Subscribers forename (blank: unknown)
 * @param  SHORT_TEXT $surname Subscribers surname (blank: unknown)
 * @param  ?SHORT_TEXT $name Subscribers name (or username) (null: generic)
 * @param  EMAIL $email_address Subscribers e-mail address
 * @param  ID_TEXT $send_id Specially encoded ID of subscriber (begins either 'n' for newsletter subscriber, or 'm' for member - then has normal subscriber/member ID following)
 * @param  SHORT_TEXT $hash Password hash of subscriber (blank: can not unsubscribe by URL)
 * @param  array $extra_mappings Extra mappings to be substituted
 * @return Tempcode The new newsletter message
 */
function newsletter_variable_substitution(object $message, string &$subject, string $lang, string $forename = '', string $surname = '', ?string $name = null, string $email_address = '', string $send_id = '', string $hash = '', array $extra_mappings = []) : object
{
    if ($name === null) {
        require_lang('newsletter');
        $name = do_lang('READER');
    }

    $unsub_url = new Tempcode();
    if (($hash == '') || ($send_id == '')) {
        if (get_option('staff_email_receipt_configurability') != '0') {
            $unsub_url = build_url(['page' => 'members', 'type' => 'view'], get_module_zone('members'), [], false, false, true, 'tab--edit');
        } else {
            $unsub_url = new Tempcode();
        }
    } else {
        $unsub_hash = get_unsubscribe_hash($hash);
        if (substr($send_id, 0, 1) == 'm') {
            $unsub_url = build_url(['page' => 'members', 'type' => 'unsub', 'id' => substr($send_id, 1), 'hash' => $unsub_hash], get_module_zone('members'), [], false, false, true);
        } else {
            $unsub_url = build_url(['page' => 'newsletter', 'type' => 'unsub', 'id' => substr($send_id, 1), 'hash' => $unsub_hash], get_module_zone('newsletter'), [], false, false, true);
        }
    }

    $member_id = null;
    $prefix = substr($send_id, 0, 1);
    if (($prefix == 'm') || ($prefix == 'w')) {
        $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($name);
        $name = $GLOBALS['FORUM_DRIVER']->get_displayname($name);
    }

    require_lang('newsletter');

    $vars = [
        'title' => $subject,
        'forename' => $forename,
        'surname' => $surname,
        'name' => $name,
        'member_id' => cms_empty_safe($member_id) ? '' : strval($member_id),
        'email_address' => $email_address,
        'send_id' => $send_id,
        'unsub_url' => $unsub_url,
        'unsub_comcode' => do_lang(cms_empty_safe($member_id) ? 'NEWSLETTER_UNSUBSCRIBE_NEWSLETTER' : 'NEWSLETTER_UNSUBSCRIBE_MEMBER', $unsub_url->evaluate()),
    ] + $extra_mappings;

    require_code('tempcode_compiler');
    $_subject = template_to_tempcode($subject);

    foreach ($vars as $var => $sub) {
        $message->singular_bind(cms_strtoupper_ascii($var), $sub);
        $_subject->singular_bind(cms_strtoupper_ascii($var), $sub);
    }

    $subject = $_subject->evaluate($lang);

    return $message;
}

/**
 * Get the unsubscription hash from a newsletter subscriber hash (salt is not involved).
 *
 * @param  string $hash Subscriber hash
 * @return string Unsubscription hash
 */
function get_unsubscribe_hash(string $hash) : string
{
    require_code('crypt');
    return ratchet_hash($hash, 'xunsub');
}

/**
 * Find if a newsletter is HTML.
 *
 * @param  ?string $message Newsletter message after wrapping applied (null: just look at wrapper on its own)
 * @return boolean Whether it is
 */
function newsletter_is_html(?string $message = null) : bool
{
    if ($message === null) {
        $_message = newsletter_wrap(make_string_tempcode('test'), 'test', fallback_lang());
        $message = $_message->evaluate();
    }

    return (preg_match('#^\s*<html(\s|>)#i', $message) != 0);
}

/**
 * Generate a newsletter preview in full HTML and full text.
 *
 * @param  string $message_raw The message
 * @param  string $subject The subject
 * @param  LANGUAGE_NAME $lang The language
 * @param  boolean $html_only Send in HTML only
 * @param  ?string $forename Forename (null: reasonable default)
 * @param  ?string $surname Surname (null: reasonable default)
 * @param  ?string $name Name (null: reasonable default)
 * @param  ?string $email_address E-mail address (null: reasonable default)
 * @param  ?string $send_id Send ID (null: reasonable default)
 * @param  ?string $hash Password hash (null: reasonable default)
 * @param  ID_TEXT $template The mail template to preview with
 * @return array A triple: HTML version, Text version, Whether the e-mail has to be fully HTML
 */
function newsletter_preview(string $message_raw, string $subject, string $lang, bool $html_only, ?string $forename = null, ?string $surname = null, ?string $name = null, ?string $email_address = null, ?string $send_id = null, ?string $hash = null, string $template = 'MAIL') : array
{
    if ($forename === null) {
        $forename = do_lang('SAMPLE_FORENAME');
    }

    if ($surname === null) {
        $surname = do_lang('SAMPLE_SURNAME');
    }

    if ($name === null) {
        $name = do_lang('SAMPLE_NAME');
    }

    if ($email_address === null) {
        $email_address = $GLOBALS['FORUM_DRIVER']->get_member_email_address(get_member());
        if ($email_address == '') {
            $email_address = do_lang('SAMPLE_ADDRESS');
        }
    }

    if ($send_id === null) {
        $send_id = 'm' . strval(get_member());
    }

    if ($hash === null) {
        $hash = $GLOBALS['FORUM_DRIVER']->get_member_row_field(get_member(), 'm_pass_hash_salted');
    }

    $message_wrapped = newsletter_prepare($message_raw, $subject, $lang, $forename, $surname, $name, $email_address, $send_id, $hash);

    // HTML message
    if (newsletter_is_html($message_wrapped)) {
        // Is already full HTML (with maybe some Tempcode)

        $html_version = make_string_tempcode($message_wrapped);

        $html_only = true; // Force on, regardless
    } else {
        // Is Comcode

        require_code('media_renderer');
        push_media_mode(peek_media_mode() | MEDIA_LOWFI);
        $comcode_version = comcode_to_tempcode($message_wrapped, get_member(), true);
        pop_media_mode();

        $html_version = do_template(
            $template,
            [
                '_GUID' => 'b081cf9104748b090f63b6898027985e',
                'TITLE' => $subject,
                'CSS' => css_tempcode(true, true, $comcode_version->evaluate()),
                'LANG' => get_site_default_lang(),
                'LOGOURL' => get_logo_url(''),
                'CONTENT' => $comcode_version,
            ],
            null,
            false,
            null,
            '.tpl',
            'templates',
            $GLOBALS['FORUM_DRIVER']->get_theme('')
        );
    }

    // Text message
    $text_version = $html_only ? '' : strip_comcode($message_wrapped);

    return [$html_version, $text_version, $html_only];
}

/*
 * -------
 * Sending
 * -------
 */

/**
 * Send out the newsletter.
 *
 * @param  LONG_TEXT $message The newsletter message
 * @param  SHORT_TEXT $subject The newsletter subject
 * @param  LANGUAGE_NAME $language The language
 * @param  array $send_details A map describing what newsletters the newsletter is being sent to
 * @param  BINARY $html_only Whether to only send in HTML format
 * @param  EMAIL $from_email Override the e-mail address the mail is sent from (blank: staff address)
 * @param  string $from_name Override the name the mail is sent from (blank: site name)
 * @param  integer $priority The message priority (1=urgent, 3=normal, 5=low)
 * @range  1 5
 * @param  array $spreadsheet_data Spreadsheet data of extra subscribers. This is in the same Composr newsletter spreadsheet format that we export elsewhere.
 * @param  ID_TEXT $mail_template The template used to show the e-mail
 * @return Tempcode UI
 */
function send_newsletter(string $message, string $subject, string $language, array $send_details, int $html_only = 0, string $from_email = '', string $from_name = '', int $priority = 3, array $spreadsheet_data = [], string $mail_template = 'MAIL') : object
{
    require_lang('newsletter');

    // Put in archive
    $archive_map = [
        'subject' => $subject,
        'newsletter' => $message,
        'language' => $language,
        'from_email' => $from_email,
        'from_name' => $from_name,
        'priority' => $priority,
        'template' => $mail_template,
        'html_only' => $html_only,
    ];
    $message_id = $GLOBALS['SITE_DB']->query_select_value_if_there('newsletter_archive', 'id', $archive_map);
    if ($message_id === null) {
        $message_id = $GLOBALS['SITE_DB']->query_insert('newsletter_archive', $archive_map + ['date_and_time' => time()], true);
    }

    // Mark as done
    log_it('NEWSLETTER_SEND', $subject);
    set_value('newsletter_send_time', strval(time()));

    // Schedule the task
    require_code('tasks');
    return call_user_func_array__long_task(do_lang('NEWSLETTER_SEND'), get_screen_title('NEWSLETTER_SEND'), 'send_newsletter', [$message_id, $message, $subject, $language, $send_details, $html_only, $from_email, $from_name, $priority, $spreadsheet_data, $mail_template], false, get_param_integer('keep_send_immediately', 0) == 1, false);
}

/**
 * Find a group of people the newsletter will go to.
 *
 * @param  ?array $send_details A map describing what newsletters the newsletter is being sent to (if $spreadsheet_data is not empty we will always process that regardless) (null: no limitation)
 * @param  ?LANGUAGE_NAME $lang Language subscribers should be using (if we're running a multi-language site) (null: no filter)
 * @param  integer $start Start position in result set (results are returned in parallel for each category of result)
 * @param  integer $max Maximum records to return from each category
 * @param  array $spreadsheet_data Spreadsheet data to also consider
 * @param  boolean $filter_confirms Filter non-confirmed addresses out
 * @return array A pair: List of subscriber detail maps, and a map of newsletter identifier to record count (null if $start is not zero, for performance reasons]
 */
function newsletter_who_send_to(?array $send_details = null, ?string $lang = null, int $start = 0, int $max = 0, array $spreadsheet_data = [], bool $filter_confirms = true) : array
{
    $subscribers = [];
    $totals = ($start == 0) ? [] : null;

    // Standard newsletter subscribers
    $newsletters = $GLOBALS['SITE_DB']->query_select('newsletters', ['*']);
    $where_lang = ((multi_lang()) && ($lang !== null)) ? (' AND ' . db_string_equal_to('language', $lang)) : '';
    foreach ($newsletters as $newsletter) {
        $key = strval($newsletter['id']);
        if (($send_details === null) || (!empty($send_details[$key]))) {
            $fields = 'n.id,n.email,the_password,n_forename,n_surname,language,pass_salt,code_confirm,join_time';
            $table = get_table_prefix() . 'newsletter_subscribe s LEFT JOIN ' . get_table_prefix() . 'newsletter_subscribers n ON n.email=s.email';
            $where = 's.newsletter_id=' . strval($newsletter['id']) . $where_lang;
            if ($filter_confirms) {
                $where .= ' AND code_confirm=0';
            }
            $sql = 'SELECT ' . $fields . ' FROM ' . $table . ' WHERE ' . $where . ' ORDER BY n.id';
            $_rows = ($max == 0) ? [] : $GLOBALS['SITE_DB']->query($sql, $max, $start);

            if ($start == 0) {
                $sql_count = 'SELECT COUNT(*) FROM ' . $table . ' WHERE ' . $where;
                $totals[$key] = $GLOBALS['SITE_DB']->query_value_if_there($sql);
            }

            foreach ($_rows as $_temp) {
                $email_address = $_temp['email'];

                if (!isset($subscribers[$email_address])) {
                    $name = trim($_temp['n_forename'] . ' ' . $_temp['n_surname']);
                    if ($name == '') {
                        $name = do_lang('NEWSLETTER_SUBSCRIBER_DEFAULT_NAME', get_site_name());
                    }

                    $subscribers[$email_address] = [
                        'forename' => $_temp['n_forename'],
                        'surname' => $_temp['n_surname'],
                        'name' => $name,
                        'send_id' => 'n' . strval($_temp['id']),
                        'hash' => $_temp['the_password'],
                        'language' => $_temp['language'],
                        'salt' => $_temp['pass_salt'],
                        'code_confirm' => strval($_temp['code_confirm']),
                        'join_time' => $_temp['join_time'],
                    ];
                }
            }
        }
    }

    // Conversr imports
    if (get_forum_type() == 'cns') {
        $fields = 'm.id,m.m_email_address,m.m_username,m.m_pass_hash_salted,m.m_language,m.m_pass_salt,m.m_join_time,m.m_validated_email_confirm_code';

        $table = $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_members m';

        $where_lang = ((multi_lang()) && ($lang !== null)) ? (' AND (' . db_string_equal_to('m_language', $lang) . ' OR ' . db_string_equal_to('m_language', '') . ')') : '';
        $where = db_string_not_equal_to('m_email_address', '') . $where_lang . ' AND m_validated=1 AND m_is_perm_banned=\'0\'';
        if ($filter_confirms) {
            $where .= ' AND ' . db_string_equal_to('m_validated_email_confirm_code', '');
        }
        if (get_option('staff_email_receipt_configurability') != '0') {
            $where .= ' AND m_allow_emails=1';
        }

        // Usergroups
        $groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list();
        foreach (array_keys($groups) as $group_id) {
            $key = 'g' . strval($group_id);
            if (($send_details === null) || (!empty($send_details[$key]))) {
                if ($group_id != db_get_first_id()) {
                    $table_a = $table . ' LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_group_members g ON m.id=g.gm_member_id AND g.gm_validated=1';
                    $where_a = 'gm_group_id=' . strval($group_id) . ' AND ' . $where;
                    $sql_a = 'SELECT ' . $fields . ' FROM ' . $table_a . ' WHERE ' . $where_a;

                    $table_b = $table;
                    $where_b = 'm_primary_group=' . strval($group_id) . ' AND ' . $where;
                    $sql_b = 'SELECT ' . $fields . ' FROM ' . $table_b . ' WHERE ' . $where_b;

                    $_rows = ($max == 0) ? [] : $GLOBALS['FORUM_DB']->query($sql_a . ' UNION ' . $sql_b . ' ORDER BY id', $max, $start, false, true);

                    if ($start == 0) {
                        $sql_count_a = 'SELECT COUNT(*) FROM ' . $table_a . ' WHERE ' . $where_a;
                        $sql_count_b = 'SELECT COUNT(*) FROM ' . $table_b . ' WHERE ' . $where_b;
                        $totals[$key] = $GLOBALS['FORUM_DB']->query_value_if_there('SELECT (' . $sql_count_a . ') + (' . $sql_count_b . ')', false, true);
                    }

                    foreach ($_rows as $_temp) { // For each member
                        $email_address = $_temp['m_email_address'];

                        if (!isset($subscribers[$email_address])) {
                            $subscribers[$email_address] = [
                                'forename' => '',
                                'surname' => '',
                                'name' => $_temp['m_username'],
                                'send_id' => 'm' . strval($_temp['id']),
                                'hash' => $_temp['m_pass_hash_salted'],
                                'language' => $_temp['m_language'],
                                'salt' => $_temp['m_pass_salt'],
                                'code_confirm' => $_temp['m_validated_email_confirm_code'],
                                'join_time' => $_temp['m_join_time'],
                            ];
                        }
                    }
                }
            }
        }

        // *All* Conversr members
        $key = '-1';
        if (($send_details === null) || (!empty($send_details[$key]))) {
            $sql = 'SELECT ' . $fields . ' FROM ' . $table . ' WHERE ' . $where;
            $_rows = ($max == 0) ? [] : $GLOBALS['FORUM_DB']->query($sql . ' ORDER BY id', $max, $start, false, true);

            if ($start == 0) {
                $sql_count = 'SELECT COUNT(*) FROM ' . $table . ' WHERE ' . $where;
                $totals[$key] = $GLOBALS['FORUM_DB']->query_value_if_there($sql_count);
            }

            foreach ($_rows as $_temp) {
                $email_address = $_temp['m_email_address'];

                if (!isset($subscribers[$email_address])) {
                    $subscribers[$email_address] = [
                        'forename' => '',
                        'surname' => '',
                        'name' => $_temp['m_username'],
                        'send_id' => 'm' . strval($_temp['id']),
                        'hash' => $_temp['m_pass_hash_salted'],
                        'language' => $_temp['m_language'],
                        'salt' => $_temp['m_pass_salt'],
                        'code_confirm' => $_temp['m_validated_email_confirm_code'],
                        'join_time' => $_temp['m_join_time'],
                    ];
                }
            }
        }
    }

    // From spreadsheet
    if (!empty($spreadsheet_data)) {
        $key = 'spreadsheet';

        $email_address_index = 0;
        $forename_index = 1;
        $surname_index = 2;
        $name_index = 3;
        $send_id_index = 4;
        $hash_index = 5;
        $language_index = 6;
        $salt_index = 7;
        $code_confirm_index = 8;
        $join_time_index = 9;

        if ($start == 0) {
            $totals['spreadsheet'] = 0;
        }

        $pos = 0;
        foreach ($spreadsheet_data as $i => $spreadsheet_line) {
            // If this looks like a header row, try and detect columns using it (if we don't have a header row we assume the default header order)
            if (($i == 0) && (count($spreadsheet_line) >= 1) && (strpos($spreadsheet_line[0], '@') === false) && ((!isset($spreadsheet_line[1])) || (strpos($spreadsheet_line[1], '@') === false))) {
                list($email_address_index, $forename_index, $surname_index, $name_index, $send_id_index, $hash_index, $language_index, $salt_index, $code_confirm_index, $join_time_index) = detect_newsletter_spreadsheet_columns($spreadsheet_line);
                continue;
            }

            if ((count($spreadsheet_line) >= 1) && (isset($spreadsheet_line[$email_address_index])) && (strpos($spreadsheet_line[$email_address_index], '@') !== false)) {
                $email_address = $spreadsheet_line[$email_address_index];

                $language = (($language_index !== null) && (array_key_exists($language_index, $spreadsheet_line))) ? $spreadsheet_line[$language_index] : '';
                $code_confirm = (($code_confirm_index !== null) && (array_key_exists($code_confirm_index, $spreadsheet_line))) ? $spreadsheet_line[$code_confirm_index] : '';

                if ((multi_lang()) && ($lang !== null) && ($language != '') && ($lang != $language)) {
                    continue;
                }

                if (($filter_confirms) && ($code_confirm != '0') && ($code_confirm != '')) {
                    continue;
                }

                if (($pos >= $start) && ($pos - $start < $max)) {
                    if (!isset($subscribers[$email_address])) {
                        $subscribers[$email_address] = [
                            'forename' => (($forename_index !== null) && (array_key_exists($forename_index, $spreadsheet_line))) ? $spreadsheet_line[$forename_index] : '',
                            'surname' => (($surname_index !== null) && (array_key_exists($surname_index, $spreadsheet_line))) ? $spreadsheet_line[$surname_index] : '',
                            'name' => (($name_index !== null) && (array_key_exists($name_index, $spreadsheet_line))) ? $spreadsheet_line[$name_index] : '',
                            'send_id' => (($send_id_index !== null) && (array_key_exists($send_id_index, $spreadsheet_line))) ? $spreadsheet_line[$send_id_index] : '',
                            'hash' => (($hash_index !== null) && (array_key_exists($hash_index, $spreadsheet_line))) ? $spreadsheet_line[$hash_index] : '',
                            'language' => $language,
                            'salt' => (($salt_index !== null) && (array_key_exists($salt_index, $spreadsheet_line))) ? $spreadsheet_line[$salt_index] : '',
                            'code_confirm' => $code_confirm,
                            'join_time' => (($join_time_index !== null) && (array_key_exists($join_time_index, $spreadsheet_line))) ? $spreadsheet_line[$join_time_index] : '',
                        ];
                    }
                }

                if ($start == 0) {
                    $totals[$key]++;
                }

                $pos++;
            }
        }
    }

    return [$subscribers, $totals];
}

/*
 * ---------
 * Importing
 * ---------
 */

/**
 * Try and detect what columns are what in a newsletter spreadsheet.
 *
 * @param  array $header_row Header row of the spreadsheet
 * @return array A tuple of spreadsheet columns
 */
function detect_newsletter_spreadsheet_columns(array $header_row) : array
{
    require_lang('cns');

    $email_address_index = null;
    $forename_index = null;
    $surname_index = null;
    $name_index = null;
    $send_id_index = null;
    $hash_index = null;
    $language_index = null;
    $salt_index = null;
    $code_confirm_index = null;
    $join_time_index = null;

    foreach ($header_row as $j => $val) {
        if (in_array(cms_mb_strtolower($val), ['e-mail', 'email', 'email address', 'e-mail address', cms_mb_strtolower(do_lang('EMAIL_ADDRESS')), 'to'])) {
            $email_address_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['forename', 'forenames', 'first name', cms_mb_strtolower(do_lang('FORENAME'))])) {
            $forename_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['surname', 'surnames', 'last name', cms_mb_strtolower(do_lang('SURNAME'))])) {
            $surname_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['name', 'username', cms_mb_strtolower(do_lang('NAME'))])) {
            $name_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['id', 'identifier', do_lang('NEWSLETTER_SEND_ID')])) {
            $send_id_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['hash', 'password', 'pass', 'pword', 'pw', 'p/w', 'code', 'secret', cms_mb_strtolower(do_lang('PASSWORD_HASH'))])) {
            $hash_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['salt', cms_mb_strtolower(do_lang('SALT'))])) {
            $salt_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['lang', 'language', cms_mb_strtolower(do_lang('LANGUAGE'))])) {
            $language_index = $j;
        }
        if (in_array(cms_mb_strtolower($val), ['confirm', 'confirm code', cms_mb_strtolower(do_lang('CONFIRM_CODE'))])) {
            $code_confirm_index = $j;
        }
        if ((stripos($val, 'time') !== false) || (stripos($val, 'date') !== false) || (cms_mb_strtolower($val) == do_lang('JOIN_DATE'))) {
            $join_time_index = $j;
        }
    }

    return [
        $email_address_index,
        $forename_index,
        $surname_index,
        $name_index,
        $send_id_index,
        $hash_index,
        $language_index,
        $salt_index,
        $code_confirm_index,
        $join_time_index,
    ];
}

/*
 * --------
 * Metadata
 * --------
 */

/**
 * Work out stats of what domains are used.
 * Returns in reverse count order.
 *
 * @param  string $key The newsletter identifier (as expected in $send_details parameter of newsletter_who_send_to)
 * @return array A map between domains and counts
 */
function newsletter_domain_subscriber_stats(string $key) : array
{
    $domains = [];
    $start = 0;
    do {
        if (substr($key, 0, 1) == 'g') {
            if ($GLOBALS['DB_STATIC_OBJECT']->has_expression_ordering()) {
                $rows = $GLOBALS['FORUM_DB']->query_select('f_members', ['DISTINCT m_email_address AS email', 'COUNT(*) as cnt'], ['m_allow_emails' => 1, 'm_primary_group' => intval(substr($key, 1))], 'GROUP BY SUBSTRING_INDEX(m_email_address,\'@\',-1)'); // Far less PHP processing
            } else {
                $rows = $GLOBALS['FORUM_DB']->query_select('f_members', ['DISTINCT m_email_address AS email'], ['m_allow_emails' => 1, 'm_primary_group' => intval(substr($key, 1))], '', 500, $start);
            }
        } elseif ($key == '-1') {
            if ($GLOBALS['DB_STATIC_OBJECT']->has_expression_ordering()) {
                $rows = $GLOBALS['FORUM_DB']->query_select('f_members', ['DISTINCT m_email_address AS email', 'COUNT(*) as cnt'], ['m_allow_emails' => 1], 'GROUP BY SUBSTRING_INDEX(m_email_address,\'@\',-1)'); // Far less PHP processing
            } else {
                $rows = $GLOBALS['FORUM_DB']->query_select('f_members', ['DISTINCT m_email_address AS email'], ['m_allow_emails' => 1], '', 500, $start);
            }
        } else {
            if ($GLOBALS['DB_STATIC_OBJECT']->has_expression_ordering()) {
                $rows = $GLOBALS['SITE_DB']->query_select('newsletter_subscribe', ['DISTINCT email', 'COUNT(*) as cnt'], [], 'GROUP BY SUBSTRING_INDEX(email,\'@\',-1)'); // Far less PHP processing
            } else {
                $where = ['newsletter_id' => $key, 'code_confirm' => 0];
                $rows = $GLOBALS['SITE_DB']->query_select('newsletter_subscribe s JOIN ' . get_table_prefix() . 'newsletter_subscribers x ON s.email=x.email', ['DISTINCT s.email'], $where, '', 500, $start);
            }
        }
        foreach ($rows as $row) {
            $email = $row['email'];
            if (strpos($email, '@') === false) {
                continue;
            }
            $domain = substr($email, strpos($email, '@') + 1);
            if (!is_string($domain)) {
                continue;
            }
            $cnt = array_key_exists('cnt', $row) ? $row['cnt'] : 1;
            if (!array_key_exists($domain, $domains)) {
                $domains[$domain] = 0;
            }
            $domains[$domain] += $cnt;
        }

        $start += 500;
    } while ((array_key_exists(0, $rows)) && (!$GLOBALS['DB_STATIC_OBJECT']->has_expression_ordering()));

    arsort($domains);

    return $domains;
}

/**
 * Work out newsletter block list.
 *
 * @return array List of blocked e-mail addresses (actually a map)
 */
function newsletter_block_list() : array
{
    $blocked = [];
    $block_path = get_custom_file_base() . '/uploads/website_specific/newsletter_blocked.csv';
    if (is_file($block_path)) {
        require_code('files_spreadsheets_read');
        $sheet_reader = spreadsheet_open_read($block_path, null, CMS_Spreadsheet_Reader::ALGORITHM_RAW);
        while (($row = $sheet_reader->read_row()) !== false) {
            if ($row[0] != '') {
                $blocked[$row[0]] = true;
            }
        }
        $sheet_reader->close();
    }
    return $blocked;
}
