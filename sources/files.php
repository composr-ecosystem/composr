<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__files()
{
    if (!defined('IGNORE_DEFAULTS')) {
        define('IGNORE_DEFAULTS', 0);
        // -
        define('IGNORE_ACCESS_CONTROLLERS', 1);
        define('IGNORE_HIDDEN_FILES', 2);
        define('IGNORE_EDITFROM_FILES', 4);
        define('IGNORE_REVISION_FILES', 8);
        define('IGNORE_REBUILDABLE_OR_TEMP_FILES_FOR_BACKUP', 16); // Stuff that could be re-generated by Composr on-demand
        define('IGNORE_CUSTOM_ZONES', 32);
        define('IGNORE_CUSTOM_THEMES', 64);
        define('IGNORE_CUSTOM_LANGS', 128);
        define('IGNORE_NONBUNDLED', 256); // Known non-bundled addon files
        define('IGNORE_FLOATING', 512); // Particular patterns of file which we know may appear but outside the scope of normal checks
        define('IGNORE_SHIPPED_VOLATILE', 1024); // Specific files liable to change that exist out-if-the-box
        define('IGNORE_UNSHIPPED_VOLATILE', 2048); // Specific files liable to change that don't exist out-of-the-box
        define('IGNORE_CUSTOM_DIRS', 4096); // Any *_custom directory, except for the default index.html/.htaccess files (access controller files) in them
        define('IGNORE_CUSTOM_DIR_FLOATING_CONTENTS', 8192); // Any *_custom directory which represents user-data we should ignore within a dev machine [very conservative compared to IGNORE_CUSTOM_DIRS, only Comcode pages and theme images], except for the default index.html/.htaccess files (access controller files) in them
        define('IGNORE_UPLOADS', 16384); // The uploads directory, except for the default index.html/.htaccess files (access controller files) in them

        define('FILE_WRITE_FAILURE_SILENT', 1);
        define('FILE_WRITE_FAILURE_SOFT', 2);
        define('FILE_WRITE_SYNC_FILE', 4);
        define('FILE_WRITE_FIX_PERMISSIONS', 8);

        define('NON_CNS_QUOTA', 5); // A hard-coded default for non-Conversr forums
    }
}

/**
 * Write out to a file, with lots of error checking and locking.
 *
 * @param  PATH $path File path
 * @param  string $contents File contents
 * @param  integer $flags FILE_WRITE_* flags
 * @param  integer $retry_depth How deep it is into retrying if somehow the data did not get written
 * @return boolean Success status
 */
function cms_file_put_contents_safe($path, $contents, $flags = 4, $retry_depth = 0)
{
    $num_bytes_to_save = strlen($contents);

    $error_message = mixed();

    $exists_already = file_exists($path);

    if (!$exists_already) {
        // If the directory is missing
        if (!is_dir(dirname($path))) {
            require_code('files2');
            if (($flags & FILE_WRITE_FAILURE_SILENT) != 0) {
                $test = @make_missing_directory(dirname($path));
                if ($test === false) {
                    return false;
                }
            } else {
                make_missing_directory(dirname($path));
            }
        }
    }

    // Error condition: If there's a lack of disk space
    if (php_function_allowed('disk_free_space')) {
        $num_bytes_to_write = $num_bytes_to_save;
        if (is_file($path)) {
            $num_bytes_to_write -= @filesize($path); /* @ is for race condition */
        }
        static $disk_space = null;
        if ($disk_space === null) {
            $disk_space = @disk_free_space(dirname($path));
        }
        if ($disk_space !== false) {
            if ($disk_space < $num_bytes_to_write) {
                if (($flags & FILE_WRITE_FAILURE_SILENT) == 0) {
                    if (function_exists('do_lang_tempcode')) {
                        $error_message = do_lang_tempcode('COULD_NOT_SAVE_FILE', escape_html($path));
                    } else {
                        $error_message = 'Could not save file ' . htmlentities($path);
                    }
                } else {
                    $error_message = '';
                }
                return _cms_file_put_contents_safe_failed($error_message, $path, $flags);
            }
        }
    }

    // Save
    $num_bytes_written = @file_put_contents($path, $contents, (strpos($path, '://') !== false) ? 0 : LOCK_EX);
    if (php_function_allowed('disk_free_space')) {
        if (($disk_space !== false) && ($num_bytes_written !== false)) {
            $disk_space -= $num_bytes_written;
        }
    }

    // Error condition: If it failed to save
    if ($num_bytes_written === false) {
        if (($flags & FILE_WRITE_FAILURE_SILENT) == 0) {
            $error_message = intelligent_write_error_inline($path);
        } else {
            $error_message = '';
        }
        return _cms_file_put_contents_safe_failed($error_message, $path, $flags);
    }

    // Error condition: If it did not save all bytes
    if ($num_bytes_written < $num_bytes_to_save) {
        if ($exists_already) {
            @unlink($path);
        }

        if (($flags & FILE_WRITE_FAILURE_SILENT) == 0) {
            if (function_exists('do_lang_tempcode')) {
                $error_message = do_lang_tempcode('COULD_NOT_SAVE_FILE', escape_html($path));
            } else {
                $error_message = 'Could not save file ' . htmlentities($path);
            }
        } else {
            $error_message = '';
        }
        return _cms_file_put_contents_safe_failed($error_message, $path, $flags);
    }

    // Find file size
    clearstatcache(true, $path);
    $size = @filesize($path);

    // Special condition: File already deleted
    if ($size === false) {
        return true; // We'll assume it was okay before something else deleted it
    }

    // Error condition: If somehow it said it saved but didn't actually (maybe a race condition on servers with buggy locking)
    if ($size != $num_bytes_to_save) {
        if ($retry_depth < 5) {
            return cms_file_put_contents_safe($path, $contents, $flags, $retry_depth + 1);
        }

        if (($flags & FILE_WRITE_FAILURE_SILENT) == 0) {
            if (function_exists('do_lang_tempcode')) {
                $error_message = do_lang_tempcode('COULD_NOT_SAVE_FILE', escape_html($path));
            } else {
                $error_message = 'Could not save file ' . htmlentities($path);
            }
        } else {
            $error_message = '';
        }
        return _cms_file_put_contents_safe_failed($error_message, $path, $flags);
    }

    // Extra requested operations
    if (($flags & FILE_WRITE_FIX_PERMISSIONS) != 0) {
        fix_permissions($path);
    }
    if (($flags & FILE_WRITE_SYNC_FILE) != 0) {
        sync_file($path);
    }

    return true;
}

/**
 * If cms_file_put_contents_safe has failed, process the error messaging.
 *
 * @param  mixed $error_message Error message (Tempcode or string)
 * @param  PATH $path File path
 * @param  integer $flags FILE_WRITE_* flags
 * @return boolean Success status (always false)
 */
function _cms_file_put_contents_safe_failed($error_message, $path, $flags = 4)
{
    if (($flags & FILE_WRITE_FAILURE_SILENT) != 0) {
        return false;
    }

    static $looping = false;
    if ($looping) {
        critical_error('PASSON', 'Could not write to ' . htmlentities($path)); // Bail out hard if would cause a loop
    }
    $looping = true;

    if (($flags & FILE_WRITE_FAILURE_SOFT) != 0) {
        global $IN_MINIKERNEL_VERSION;
        if (!$IN_MINIKERNEL_VERSION) {
            require_code('site');
            attach_message($error_message, 'warn', false, true);
        }
    } else { // default to hard error
        warn_exit($error_message, false, true);
    }

    $looping = false;

    return false;
}

/**
 * Get the number of bytes for a PHP config option. Code taken from the PHP manual.
 *
 * @param  string $val PHP config option value
 * @return integer Number of bytes
 */
function php_return_bytes($val)
{
    $val = trim($val);
    if ($val == '') {
        return 0;
    }
    $last = strtolower($val[strlen($val) - 1]);
    $_val = intval(preg_replace('#[^\d]#', '', $val));
    switch ($last) {
        case 'g':
            $_val *= 1024;
        case 'm':
            $_val *= 1024;
        case 'k':
            $_val *= 1024;
    }

    return $_val;
}

/**
 * Get a formatted-string filesize for the specified file. It is formatted as such: x MB/KB/Bytes (or unknown). It is assumed that the file exists.
 *
 * @param  URLPATH $url The URL that the file size of is being worked out for. Should be local.
 * @return string The formatted-string file size
 */
function get_file_size($url)
{
    if (substr($url, 0, strlen(get_base_url())) == get_base_url()) {
        $url = substr($url, strlen(get_base_url()));
    }

    if (!url_is_local($url)) {
        return do_lang('UNKNOWN');
    }

    $_full = rawurldecode($url);
    $_full = get_file_base() . '/' . $_full;
    $file_size_bytes = filesize($_full);

    return clean_file_size($file_size_bytes);
}

/**
 * Format the specified filesize.
 *
 * @param  integer $bytes The number of bytes the file has
 * @return string The formatted-string file size
 */
function clean_file_size($bytes)
{
    if ($bytes < 0) {
        return '-' . clean_file_size(-$bytes);
    }

    if ($bytes === null) {
        return do_lang('UNKNOWN') . ' bytes';
    }
    if ($bytes == 2147483647) {
        return do_lang('UNKNOWN') . ' bytes';
    }
    if (floatval($bytes) > 2.0 * 1024.0 * 1024.0 * 1024.0) {
        return strval(intval(round(floatval($bytes) / 1024.0 / 1024.0 / 1024.0))) . ' GB';
    }
    if (floatval($bytes) > 1024.0 * 1024.0 * 1024.0) {
        return float_format(floatval($bytes) / 1024.0 / 1024.0 / 1024.0, 2) . ' GB';
    }
    if (floatval($bytes) > 2.0 * 1024.0 * 1024.0) {
        return strval(intval(round(floatval($bytes) / 1024.0 / 1024.0))) . ' MB';
    }
    if (floatval($bytes) > 1024.0 * 1024.0) {
        return float_format(floatval($bytes) / 1024.0 / 1024.0, 2) . ' MB';
    }
    if (floatval($bytes) > 2.0 * 1024.0) {
        return strval(intval(round(floatval($bytes) / 1024.0))) . ' KB';
    }
    if (floatval($bytes) > 1024.0) {
        return float_format(floatval($bytes) / 1024.0, 2) . ' KB';
    }
    return strval($bytes) . ' Bytes';
}

// TODO: #3467 Rename to cms_parse_ini_file_safe
// TODO: #3467 add boolean parameters as per cms_file_get_contents, possibly using that as a front-end
// TODO: #3467 change calls to parse_ini_file() to use this using boolean parameters as appropriate, as appropriate
/**
 * Parse the specified INI file, and get an array of what it found.
 *
 * @param  ?PATH $filename The path to the ini file to open (null: given contents in $file instead)
 * @param  ?string $file The contents of the file (null: the file needs opening)
 * @return array A map of the contents of the ini files
 */
function better_parse_ini_file($filename, $file = null)
{
    // NB: 'file()' function not used due to slowness compared to file_get_contents then explode

    if ($file === null) {
        global $FILE_ARRAY;
        if (@is_array($FILE_ARRAY)) {
            $file = file_array_get($filename);
        } else {
            $file = function_exists('cms_file_get_contents_safe') ? cms_file_get_contents_safe($filename) : file_get_contents($filename);
        }
    }

    $ini_array = array();
    $lines = explode("\n", $file);
    foreach ($lines as $line) {
        $line = rtrim($line);

        if ($line == '') {
            continue;
        }
        if ($line[0] == '#') {
            continue;
        }

        $bits = explode('=', $line, 2);
        if (isset($bits[1])) {
            list($property, $value) = $bits;
            $value = trim($value, '"');
            $ini_array[$property] = str_replace('\n', "\n", $value);
        }
    }

    return $ini_array;
}

/**
 * Find whether a file/directory is known to be something that should/could be there but isn't a Composr distribution file, or for some other reason should be ignored.
 *
 * @param  string $path Path (relative to Composr base directory)
 * @param  integer $bitmask Bitmask of extra stuff to ignore (see IGNORE_* constants)
 * @return boolean Whether it should be ignored
 */
function should_ignore_file($path, $bitmask = 0)
{
    $is_dir = @is_dir(get_file_base() . '/' . $path);
    $is_file = @is_file(get_file_base() . '/' . $path);

    // Normalise
    if (strpos($path, '/') !== false) {
        $dir = dirname($path);
        $filename = basename($path);
    } else {
        $dir = '';
        $filename = $path;
    }
    $filename_lower = strtolower($filename);

    $ignore_filenames_and_dir_names = array( // Case insensitive, define in lower case
        '.' => '.*',
        '..' => '.*',

        // Operating system files
        '__macosx' => '.*',
        '.bash_history' => '.*',
        'thumbs.db:encryptable' => '.*',
        'thumbs.db' => '.*',
        '.ds_store' => '.*',
        "icon\r" => '.*',

        // Source code control systems
        '.git' => '.*',
        'git-hooks' => '',
        '.gitattributes' => '',
        '.gitignore' => '',
        '.gitconfig' => '',

        // Build files
        'phpdoc.dist.xml' => '',

        // Web server files
        'error_log' => '.*',
        'web-inf' => '.*',
        'www.pid' => '',
        '.ftaccess' => '',
        '.ftpquota' => '',
        'cgi-bin' => '',
        'stats' => '', // ISPConfig
        'php.ini' => '.*',
        '.htpasswd' => '.*',
        'robots.txt' => '',
        'favicon.ico' => '', // Not used for Composr, but default path for other scripts on server
        '400.shtml' => '',
        '500.shtml' => '',
        '404.shtml' => '',
        '403.shtml' => '',
        'cron.yaml' => '',
        'dos.yaml' => '',
        'queue.yaml' => '',
        '.htaccess' => '',

        // Authorisation files
        'bingsiteauth.xml' => '',

        // Dynamically created meta-tree, huge and must be ignored for anything
        '_meta_tree' => 'themes/[^/]*',

        // Specially-recognised naming conventions
        '_old' => '.*',
        '_old_backups' => '.*',

        // Syntax's used during Composr testing
        'gibb' => '.*',
        'gibberish' => '.*',

        // Installer files
        'install.php' => '', // Sometimes we do need to check this in our automated tests. Typically we just add it back into the file list or define a special case!
        'data.cms' => '',
        'install_ok' => '',
        'install_locked' => '',
        'cms.sql' => '', // Temporary backup
        'restore.php' => '',

        // IDE projects
        'nbproject' => '', // Netbeans
        '.project' => '', // Eclipse
        '.idea' => '', // JetBrains / PhpStorm
        '.editorconfig' => '',
        '.eslintignore' => '', // ESLint ignore file
        '.eslintrc.json' => '', // ESLint config file

        // Composr control files
        'closed.html' => '',
        'closed.html.old' => '',

        // Temporary files
        'temp' => '',
        'safe_mode_temp' => '', // LEGACY

        // Composr testing platform
        'checker.ini' => '_tests/codechecker',
    );

    $ignore_extensions = array( // Case insensitive, define in lower case
        // Cache files
        'lcd' => 'caches/.*',
        'gcd' => 'caches/.*',
        'htm' => 'caches/guest_pages',
        'xml' => 'caches/guest_pages',
        'tcp' => 'themes/[^/]*/templates_cached/.*',
        'css' => 'themes/[^/]*/templates_cached/.*',
        'js' => 'themes/[^/]*/templates_cached/.*',
        'gz' => '(themes/[^/]*/templates_cached/.*|caches/guest_pages)',

        // Log files
        'log' => '.*',

        // Custom fonts
        'ttf' => 'data_custom/fonts',

        // Temporary files
        'tmp' => '.*',
        'bin' => 'caches/http',
        'bak' => '.*',
        'old' => '.*',
        'cms' => '.*', // Installers and upgraders

        // IDE projects
        'clpprj' => '', // Code Lobster
        'csprj' => '', // Code Lobster
        'geany' => '', // Geany
    );

    $ignore_filename_and_dir_name_patterns = array( // Case insensitive
        // Operating system files
        array('\..*\.(png|gif|jpeg|jpg)', '.*'), // Image metadata file, e.g. ".example.png"
        array('\.\_.*', '.*'), // Mac OS extended attributes

        // Web server files
        array('\_vti\_.*', '.*'), // Frontpage

        // Authorisation files
        array('google.*\.html', ''),
    );

    $ignore_filename_patterns = array( // Case insensitive; we'll use this only when we *need* directories that would match to be valid
    );

    if (($bitmask & IGNORE_ACCESS_CONTROLLERS) != 0) {
        $ignore_filenames_and_dir_names = array_merge($ignore_filenames_and_dir_names, array(
            '.htaccess' => '.*',
            'index.html' => '.*',
        ));
    }

    if (($bitmask & IGNORE_HIDDEN_FILES) != 0) {
        $ignore_filename_and_dir_name_patterns = array_merge($ignore_filename_and_dir_name_patterns, array(
            array('\..*', '.*'),
        ));
    }

    if (($bitmask & IGNORE_EDITFROM_FILES) != 0) {
        $ignore_extensions = array_merge($ignore_extensions, array(
            'editfrom' => '.*',
        ));
    }

    if (($bitmask & IGNORE_REVISION_FILES) != 0) { // E.g. global.css.<timestamp>
        $ignore_filename_and_dir_name_patterns = array_merge($ignore_filename_and_dir_name_patterns, array(
            array('.*\.\d+.*', '.*'),
            array('.*\.latest_in_cms_edit', '.*'),
            array('.*\.\d+.*', 'exports/file_backups'),
        ));
    }

    if (($bitmask & IGNORE_REBUILDABLE_OR_TEMP_FILES_FOR_BACKUP) != 0) {
        if (preg_match('#^exports/(builds|backups|addons)(/|$)#i', $path) != 0) {
            return true;
        }
        if (preg_match('#^uploads/(auto_thumbs)(/|$)#i', $path) != 0) {
            return true;
        }
    }

    if (($bitmask & IGNORE_CUSTOM_ZONES) != 0) {
        if ((is_dir(get_file_base() . '/' . $path)) && (is_file(get_file_base() . '/' . $path . '/index.php')) && (is_dir(get_file_base() . '/' . $path . '/pages')) && (!in_array($filename_lower, array('adminzone', 'cms', 'forum', 'site')))) {
            return true;
        }
    }

    if (($bitmask & IGNORE_CUSTOM_THEMES) != 0) {
        if ((preg_match('#^themes($|/)#i', $dir) != 0) && (substr($path, 0, strlen('themes/default/')) != 'themes/default/') && (substr($path, 0, strlen('themes/admin/')) != 'themes/admin/') && (!in_array($path, array('themes/default', 'themes/admin', 'themes/index.html', 'themes/map.ini')))) {
            return true;
        }
    }

    if (($bitmask & IGNORE_CUSTOM_LANGS) != 0) {
        // Wrong lang packs
        if (((strlen($filename) == 2) && (strtoupper($filename) == $filename) && ($filename_lower != $filename) && ($filename != 'EN')) || ($filename == 'EN_us') || ($filename == 'ZH-TW') || ($filename == 'ZH-CN')) {
            return true;
        }
    }

    if (($bitmask & IGNORE_NONBUNDLED) != 0) {
        static $addon_files = null;
        if ($addon_files === null) {
            $addon_files = array();
            $hooks = find_all_hooks('systems', 'addon_registry');
            if (!defined('DEFAULT_ZONE_PAGE_NAME')) {
                define('DEFAULT_ZONE_PAGE_NAME', 'home');
            }
            foreach ($hooks as $hook => $place) {
                if ($place == 'sources_custom') {
                    if (function_exists('extract_module_functions')) {
                        require_code('addons');
                        $hook_path = get_file_base() . '/sources_custom/hooks/systems/addon_registry/' . filter_naughty_harsh($hook) . '.php';
                        $addon_info = read_addon_info($hook, false, null, null, $hook_path);
                        $addon_files = array_merge($addon_files, array_map('strtolower', $addon_info['files']));
                    } else { // Running from outside Composr
                        require_code('hooks/systems/addon_registry/' . filter_naughty_harsh($hook));
                        $ob = object_factory('Hook_addon_registry_' . filter_naughty_harsh($hook));
                        $addon_files = array_merge($addon_files, array_map('strtolower', $ob->get_file_list()));
                    }
                }
            }
            $addon_files = array_flip($addon_files);
        }
        if ((isset($addon_files[$path])) || (isset($addon_files[strtolower($path)]))) {
            return true;
        }
        // Note that we have no support for identifying directories related to addons, only files inside. Code using this function should detect directories with no usable files in as relating to addons.
    }

    if (($bitmask & IGNORE_FLOATING) != 0) {
        if (preg_match('#^tracker/uploads(/|$)#i', $path) != 0) {
            return true; // Mantis upload files
        }
        if (preg_match('#^uploads/website_specific/compo.sr/demonstratr/servers(/|$)#i', $path) != 0) {
            return true; // Demonstrate site
        }
        if (preg_match('#^exports/(static|builds|backups)(/|$)#i', $path) != 0) {
            return true; // Huge exported stuff
        }
        if (preg_match('#^data_custom/images/addon_screenshots(/|$)#i', $path) != 0) {
            return true; // Relating to addon build, but not defined in addons
        }
        if (preg_match('#^_tests/(html_dump|screens_tested)(/|$)#i', $path) != 0) {
            return true; // Test set may have various temporary files buried within
        }
        if (preg_match('#^data_custom/ckeditor(/|$)#i', $path) != 0) {
            return true; // Development version of CKEditor
        }
        if ((function_exists('get_db_site')) && (preg_match('#^uploads/website_specific/' . preg_quote(get_db_site(), '#') . '(/|$)#i', $path) != 0)) {
            return true; // Development version of CKEditor
        }

        $ignore_extensions = array_merge($ignore_extensions, array(
            'gz' => '(themes/[^/]*/templates_cached/.*|caches/guest_pages|imports/.*|exports/.*)',

            // Import/Export files
            'tar' => '(imports|exports)/.*',
            'txt' => '(imports|exports)/.*',

            'xml' => 'data_custom/sitemaps',
        ));

        $ignore_filename_and_dir_name_patterns = array_merge($ignore_filename_and_dir_name_patterns, array(
            array('(?!index\.html$)(?!\.htaccess$).*', 'data_custom/modules/chat'), // Various chat data files
            array('(?!index\.html$)(?!\.htaccess$).*', 'data_custom/modules/admin_stats'), // Various temporary XML files get created under here, for SVG graphs
        ));

        $ignore_filenames_and_dir_names = array_merge($ignore_filenames_and_dir_names, array(
            'critical_errors' => '',

            // Non-bundled addons inside the git repository
            'upgrades' => '', // composr_homesite
            'sites' => '', // demonstratr

            // API docs
            'api' => 'docs',
            'composr-api-template' => 'docs',
        ));
    }

    if (($bitmask & IGNORE_CUSTOM_DIRS) != 0) {
        $ignore_filename_patterns = array_merge($ignore_filename_and_dir_name_patterns, array(
            array('(?!index\.html$)(?!\.htaccess$).*', '.*_custom(/.*)?'), // Stuff under custom folders
        ));
    }

    if (($bitmask & IGNORE_CUSTOM_DIR_FLOATING_CONTENTS) != 0) {
        $ignore_filename_and_dir_name_patterns = array_merge($ignore_filename_and_dir_name_patterns, array(
            array('(?!index\.html$)(?!\.htaccess$).*', 'themes/default/images_custom'), // We don't want deep images_custom directories either
            array('(?!index\.html$)(?!\.htaccess$).*', '.*/(comcode|html)_custom/.*'), // Comcode pages
        ));
    }

    if (($bitmask & IGNORE_UPLOADS) != 0) {
        $ignore_filename_and_dir_name_patterns = array_merge($ignore_filename_and_dir_name_patterns, array(
            array('(?!index\.html$)(?!\.htaccess$).*', 'uploads/.*'), // Uploads
        ));
    }

    if (($bitmask & IGNORE_SHIPPED_VOLATILE) != 0) {
        $ignore_filenames_and_dir_names = array_merge($ignore_filenames_and_dir_names, array(
            '_config.php' => '',
            'map.ini' => 'themes',
            'functions.bin' => 'data_custom',
            'errorlog.php' => 'data_custom',
            'execute_temp.php' => 'data_custom',
            '.user.ini' => '.*',
        ));
    }

    if (($bitmask & IGNORE_UNSHIPPED_VOLATILE) != 0) {
        $ignore_filename_and_dir_name_patterns = array_merge($ignore_filename_and_dir_name_patterns, array(
            array('(?!index\.html$)(?!\.htaccess$).*', 'data_custom/modules/chat'), // Various chat data files
        ));

        $ignore_filenames_and_dir_names = array_merge($ignore_filenames_and_dir_names, array(
            'upgrader.cms.tmp' => 'data_custom',
            'unit_test_positive_ignore_sampler.xxx' => 'data_custom', // To help us test this function. This file won't ever exist.
            'latest.bin' => 'data_custom/modules/web_notifications',
            'failover_rewritemap.txt' => 'data_custom',
            'failover_rewritemap__mobile.txt' => 'data_custom',
            'aggregate_types.xml' => 'data_custom/xml_config',
            'breadcrumbs.xml' => 'data_custom/xml_config',
            'fields.xml' => 'data_custom/xml_config',
            'page_errors.xml' => 'data_custom/xml_config',
            'EN.pwl' => 'data_custom/spelling/personal_dicts',
            '_critical_error.html' => '',

            // Non-bundled addons inside the git repository
            'out.csv' => 'data_custom/modules/user_export', // user_simple_csv_sync
            'request_helper.bin' => 'mobiquo/include', // tapatalk
            'server_certificates.pem' => 'data_custom/modules/composr_mobile_sdk/ios', // composr_mobile_sdk
            'if_hosted_service.txt' => 'text', // composr_homesite (Demonstratr)
        ));
    }

    // Special case checks...

    // Composr dupe (e.g. an ad-hoc backup) install?
    if (($dir != '') && (is_dir(get_file_base() . '/' . $path)) && (is_dir(get_file_base() . '/' . $path . '/sources_custom'))) {
        return true;
    }

    // Run checks on our data...

    if (isset($ignore_filenames_and_dir_names[$filename_lower])) {
        if (preg_match('#^' . $ignore_filenames_and_dir_names[$filename_lower] . '$#i', $dir) != 0) {
            return true; // Check dir context
        }
    }

    $extension = get_file_extension($filename);
    $extension_lower = strtolower($extension);
    if (isset($ignore_extensions[$extension_lower])) {
        if (preg_match('#^' . $ignore_extensions[$extension_lower] . '$#i', $dir) != 0) {
            return true; // Check dir context
        }
    }
    foreach (array_merge($is_file ? $ignore_filename_patterns : array(), $ignore_filename_and_dir_name_patterns) as $pattern) {
        list($filename_pattern, $dir_pattern) = $pattern;
        if (preg_match('#^' . $filename_pattern . '$#i', $filename) != 0) {
            if (preg_match('#^' . $dir_pattern . '$#i', $dir) != 0) { // Check dir context
                return true;
            }
        }
    }

    return false;
}

/**
 * Delete all the contents of a directory, and any subdirectories of that specified directory (recursively).
 * Does not delete the directory itself.
 *
 * @param  PATH $dir The pathname to the directory to delete
 * @param  boolean $default_preserve Whether to preserve files there by default
 * @param  boolean $just_files Whether to just delete files
 */
function deldir_contents($dir, $default_preserve = false, $just_files = false)
{
    require_code('files2');
    _deldir_contents($dir, $default_preserve, $just_files);
}
