[title sub="Written by Chris Graham (ocProducts)"]Composr Supplementary: Facebook Support / Open Graph[/title]

[media thumb="0" framed="0" float="right"]data_custom/images/docs/sup_facebook/fb_composr.jpg[/media]
This tutorial describes {$IS_MAINTAINED,facebook,Composr Facebook integration}. It mostly describes functionality supplied by the non-bundled Facebook Support addon.

You may want to get a developer to help configure things. We're helping people getting Composr integrated, even when you're not a developer, but bear in mind that it can be tricky sometimes. Facebook is in flux, and Composr has to play catch-up quite a lot. All the standards involved in the integration are also in flux. Things are a lot better than they were, but still not always ideal. Any screenshots we show for Facebook could be out-dated by the time you read this.

[contents]decimal,lower-alpha[/contents]

[title="2"]Configuration and Authorisation[/title]

Before you can use any of the Facebook Support addon features you need to configure it.

[title="3"]Step 1) Configuration on Facebook[/title]

[media thumb="0" framed="0" float="right"]data_custom/images/docs/sup_facebook/facebook.png[/media]
Integration is done via configuring an app on Facebook; no actual app code needs writing, but this is how you get an API key.

[list="1"]
[*] Go to [url="set up your app on Facebook"]https://developers.facebook.com/apps/[/url]
[*] Click on right upper corner "Add a New App" button
[*] Type your site name
[*] Go into the setup of the new app
[*] Go to the "Settings" section
[*] Enter your domain name into the "Main App Domain" field
[*] Enter your privacy page URL into the "Privacy policy URL" field (link to your website's privacy page)
[*] Change the "Contact e-mail" field if no e-mail address is currently there, or if it is wrong
[*] Click "Add Platform"
[*] Choose "Website"
[*] Enter your base URL into the "Site URL" field
[*] Click "Save Changes"
[*] Click "Add Product" in the left pane
[*] Select "Facebook Login" (click "Get Started" next to it)
[*] Enter [tt]<base url>/adminzone/index.php?page=facebook-oauth&oauth_in_progress=1[/tt] into the "Valid OAuth redirect URIs" field. As with "Site URL" it is crucial that you get this right.
[*] Click "Save Changes"
[*] Go to the Dashboard section
[*] Note down your "App ID" and your "App Secret"
[/list]

If you want to allow admin publishing to a Facebook page, go to App Review and enable via "Add Items" (with explanations of why):
 - [tt]publish_pages[/tt]
 - [tt]manage_pages[/tt]
Facebook will likely make you record a screencast of how exactly the system works, which is likely to take you around half a day of work once everything's said and done. Unfortunately it's not easy anymore.

And if you want to request additional member details for logging in users:
 - [tt]user_gender[/tt]
 - [tt]user_birthday[/tt]
 - [tt]user_location[/tt]
Which will also require App Review.

[title="4"]Special case: Delegating access[/title]

If you need to add someone else to your Facebook app (what you added above), to help development/debug it:
1) Go to [url="Facebook developer apps section"]https://developers.facebook.com/apps[/url]
2) Click the "Edit App" button
3) Click "Developer roles" under the "Settings" menu
4) Click "Add" over the Administrators section
5) Type their Facebook ID (the one they chose, not the numeric one) -- or, if they are your Facebook friend, just their name will work

[title="4"]Special case: Testing on a private server (e.g. localhost)[/title]

To use the Facebook login support your Facebook app needs to be told the domain name you are using. This is for security reasons and because it saves login cookies to this domain. It can't be a domain like 'localhost' or 'mycomputer', so if you are testing on a local computer you will need to create an imaginary domain name and link it into 127.0.0.1 via your computers 'hosts' file, and configure your [tt]_config.php[/tt] file to use that as the base URL.

For example, [tt]mycomposrtestsite.com[/tt], with a line like the following in your hosts file:
[code="Text"]
127.0.0.1 mycomposrtestsite.com
[/code]

All major operating systems support a hosts file. Rackspace provide a nice [url="tutorial for editing the hosts file"]https://www.howtogeek.com/howto/27350/beginner-geek-how-to-edit-your-hosts-file/[/url].

Note there is no need to use a real domain name, it can be completely made up.

[title="3"]Step 2) Install the Composr Facebook Support addon[/title]

[surround]
[media width="150" description="Choosing the addon" float="right"]data_custom/images/docs/sup_facebook/facebook_addon_b.png[/media]
[media width="150" description="Going to import a non-bundled addon" float="right"]data_custom/images/docs/sup_facebook/facebook_addon_a.png[/media]
To install...

1) Go to Admin Zone > Structure > Addons.
2) Scroll down and go to "Import non-bundled addon(s)".
3) Click the "Download" option, expand Third Party Integration, and select Facebook Support
4) Click the Import non-bundled addon(s) button
5) Proceed through normally.
[/surround]

[title="3"]Special case: Theme integration (advanced)[/title]

Installing the addon to Composr will override some key templates to [tt]themes/default/templates_custom[/tt]; this may be blocked by your existing themeing having its own overrides already in place. If you have a theme with overrides in place then you'll need to amend those overrides to incorporate the changes within the new overrides from the default theme.

The templates involved from the [tt]facebook_support[/tt] addon are:
 - [tt]themes/default/templates_custom/BLOCK_MAIN_SCREEN_ACTIONS.tpl[/tt]

The templates involved from the [tt]hybridauth[/tt] addon are:
 - [tt]themes/default/templates_custom/BLOCK_SIDE_PERSONAL_STATS_NO.tpl[/tt]
 - [tt]themes/default/templates_custom/BLOCK_SIDE_PERSONAL_STATS.tpl[/tt]
 - [tt]themes/default/templates_custom/LOGIN_SCREEN.tpl[/tt]
 - [tt]themes/default/templates_custom/CNS_GUEST_BAR.tpl[/tt]
 - [tt]themes/default/templates_custom/BLOCK_TOP_LOGIN.tpl[/tt]

[title="3"]Step 3) Configuration[/title]

[surround]
[media width="150" description="Configuration options" float="right"]data_custom/images/docs/sup_facebook/facebook_config.png[/media]
1) Go to Admin Zone > Setup > Configuration > Composr API options > Facebook.
2) Configure the "Facebook app ID" configuration option and "Facebook app secret" configuration option. You noted down the values earlier.
3) Also configure the "Facebook page ID" configuration option. This is a useful helper tool: https://lookup-id.com/.

Make sure your site is not closed (you can change the settings in Admin Zone > Setup > Configuration > Site options > Closed site). Facebook integration cannot work if Facebook is denied from connecting back to your website.
[/surround]

[title="3"]Step 4) Authorisation[/title]

1) Go to Admin Zone > Setup > Setup API access
2) Follow the instructions given for "Facebook (Hybridauth)"
3) When authorising on Facebook make sure to tick (check) any pages you want to syndicate to, the one you configured as "Facebook page ID" (if any)

[title="2"]Integration blocks[/title]

We have the following Composr blocks, based upon the Facebook [url="Social Plugins"]https://developers.facebook.com/docs/plugins/[/url]:
 - [tt]main_facebook_page[/tt] (based on Page plugin)
 - [tt]main_facebook_like[/tt] (based on Like plugin)
 - [tt]main_facebook_comments[/tt] (based on Comments plugin)

The plugins are mostly just thin wrappers to what Facebook does. If you want to tweak any options that we haven't made specific block parameters for you can just edit the appropriate templates. For example, [tt]BLOCK_MAIN_FACEBOOK_COMMENTS.tpl[/tt] is the template used by the [tt]main_facebook_comments[/tt] block.

If you wish you can use Facebook code directly within Composr. This would allow you to do integrations we have not made a block for, sure as the [url="Embedded Posts"]https://developers.facebook.com/docs/plugins/embedded-posts[/url] integration (that let's you embed a specific individual Facebook post).

You probably will not want to use [tt]main_facebook_like[/tt], as a Like Button is already pre-integrated into Composr's [tt]main_screen_actions[/tt] block (i.e. the social sharing block). [tt]main_screen_actions[/tt] is already embedded throughout key default Composr templates.

[title="3"]main_facebook_page[/title]

This block can be used to show Facebook page fans, and Facebook page posts. There are block parameters to determine what exactly to show in it.

This is the block you are most likely going to want to use.

[title="3"]main_facebook_like[/title]

This block is very straight-forward: it puts in a Facebook "Like" when clicked by a user, for the URL it is placed on. It doesn't require the user to be logged in to Composr using Facebook, but they will need to be logged into Facebook itself.

[title="3"]main_facebook_comments[/title]

This block is useful if you want people to be able to comment on your site directly using their Facebook accounts, rather than native Composr accounts (or Composr accounts tied to their Facebook account).

Most webmasters will not want to use this, as usually encouraging users to create a native account is strongly preferable.
You can consider having both Facebook comments, and native Composr comments, but this would be messy.

The Facebook comments block will only work if placed somewhere where Guest access is allowed, as it relies on Open Graph to gather details of the page it is placed on (Open Graph is described later in this tutorial).

You can either place this block manually within Comcode, similar to the standard Composr [tt]main_comments[/tt] block -- or, you can modify Composr templates to place this block instead of the default comments. For example, in [tt]DOWNLOAD_SCREEN.tpl[/tt] you can change [tt]{COMMENT_DETAILS}[/tt] to [tt]{$BLOCK,block=main_facebook_comments}[/tt], so that Facebook comments are used for downloads, rather than native Composr comments.

[title="2"]Social sharing[/title]

[i]This section is relevant even if you are not using the Facebook Support addon.[/i]

The [tt]main_screen_actions[/tt] block contains a Facebook share link if the Facebook Support addon is not installed. If the Facebook Support addon is installed it (by default) becomes a Like Button instead (which associates to your Facebook Page, allowing ongoing flow of your content to said user).

It is important to understand how the Facebook share button works. The button does not transfer the shared page's image/title to Facebook. Instead, Facebook comes back at the shared URL, and looks at the Open Graph meta tags. Open Graph is described in the next section.

[title="2"]Metadata when people link to you from Facebook (Open Graph)[/title]

[i]This section is relevant even if you are not using the Facebook Support addon.[/i]

[url="Open Graph"]http://ogp.me/[/url] is a Facebook-sponsored standard for web-page metadata. It allows you to provide the details used to render previews when a link is posted on Facebook. It's an Open Standard that may also be used by others.

Composr automatically includes Open Graph data in your pages, so that Facebook can automatically discern information about URLs on your website. This is handled in the [tt]HTML_HEAD.tpl[/tt] template. It is built on top of Composr's standard metadata system. Note that we also can support other metadata formats such as Dublin Core, but that is outside the scope of this tutorial (we're focusing only on Facebook metadata here, even though in some cases Facebook may itself support other metadata standards).

In your HTML the Open Graph tags come out similar to:
[code="HTML"]
<meta property="og:title" content="Example page" />
<meta property="og:type" content="comcode_page" />
<meta property="og:url" content="http://yourbaseurl/docs/index.php?page=tut_metadata" /><meta property="og:site_name" content="yourdomain.com" />
<meta property="og:image" content="http://yourbaseurl/themes/default/images/EN/logo/standalone_logo.png" />
<meta property="og:locale" content="en_GB" />
[/code]

The following Open Graph data (or extensions to Open Graph) is provided, where possible:
 - [tt]og:title[/tt] -- Content title
 - [tt]og:type[/tt] -- Content type (e.g. News)
 - [tt]og:url[/tt] -- Canonical URL to the content (i.e. stripped down/standardised URL)
 - [tt]og:site_name[/tt] -- Site name
 - [tt]og:description[/tt] -- Description for page content
 - [tt]og:image[/tt] -- URL to page image
 - [tt]og:video[/tt] -- URL to page video
  - [tt]og:video:width[/tt] -- Width of video
  - [tt]og:video:height[/tt] -- Height of video
  - [tt]og:video:type[/tt] -- Mime-type of video
 - [tt]og:locale[/tt] -- Page locale (advanced)
 - News:
  - [tt]article:published_time[/tt] -- Article posting time
  - [tt]article:modified_time[/tt] -- Article modification time
  - [tt]article:section[/tt] -- Article category
  - [tt]article:tag[/tt] -- Article meta-keywords
  - [tt]article:author[/tt] -- Article author
 - Member profiles:
  - [tt]profile:username[/tt] -- Username
 - [tt]fb:admins[/tt] -- Facebook user ID of page admin ([i]disabled by default as auto-detected data is probably wrong, can be filled manually via a template edit to [tt]HTML_HEAD.tpl[/tt][/i])
 - [tt]fb:app_id[/tt] -- ID of Facebook app used on the site ([i]disabled by default to save bandwidth, it's not usually useful[/i])

Facebook provides a [url="tool for testing Open Graph data"]https://developers.facebook.com/tools/debug/[/url].

For Open Graph to work, the content must have public access. If you deny Guests access to the content then Open Graph tags cannot be accessed by Facebook and Facebook would then have to refer to the page as a login screen. That's not awful (you probably don't want content titles and images to leak to unauthorised users anyway), but bear it in mind. Similarly, if the site is closed, Facebook won't be able to access Open Graph.

[title="3"]Images ([tt]og:image[/tt])[/title]

The Composr code hints what image to use for Open Graph, in precedence order it tries the following to find a [i]suitable[/i] image:[list="1"]
[*] Where possible, a natural image is used. For example when viewing a gallery image, the thumbnail will be the Open Graph image.
[*] When viewing something with custom fields (including catalogue entries), the first picture-style field will be the Open Graph image, unless some other picture field has the [tt]is_metadata=1[/tt] field option set for it, and unless the first picture field has the [tt]is_metadata=0[/tt] field option set for it. Note that this works even for hidden fields, so is the perfect way to set image metadata.
[*] Otherwise, a content-type icon image will be used. For example, for a chatroom the [tt]icons/menu/social/chat/chat[/tt] theme image will be used. However, [b]actually it typically won't[/b] because Composr ships with [tt].svg[/tt] files, which Open Graph can't use.
[*] Otherwise we are getting desparate because nothing good has been defined, some default templates are programmed to search primary content for embedded images, and use the first one. This applies to the following content types: Comcode pages, news articles, topics, Wiki+. i.e. posts and pages.
[*] If some custom changes to [tt]HTML_HEAD[/tt] change the [tt]fallback_image[/tt] setting (e.g. contextually), the coded fall-back image will be used (see section below).
[*] Otherwise the [tt]logo/standalone_logo[/tt] theme image is used (as it is coded as the fallback in the [tt]HTML_HEAD.tpl[/tt] template). i.e. Composr will fall-back to using your site logo if it can't find some other appropriate image. Note that [tt]logo/standalone_logo[/tt] is used for a number of things, including the e-mail header, and in RSS feeds. It is intended to be a simple standalone logo (i.e. not tied into the overall web design). You'll likely want to change it.
[*] (If all the Open Graph image code was removed from [tt]HTML_HEAD.tpl[/tt], Facebook would choose its own image.)
[/list]

Note that any changes to Open Graph images won't reflect on Facebook for existing URLs until Facebook refreshes its caching for those URLs. So initially test Open Graph images by looking at the HTML your site is producing, not how links immediately look on Facebook.

[title="4"]Vastly simplifying the images[/title]

You may want to just simplify everything and make your own theme image for Open Graph and reference that in [tt]HTML_HEAD.tpl[/tt]. This will probably also end up looking nicer because Facebook:
a) recommends a 1.91:1 aspect ratio on your image (to avoid cropping) which is unlikely to be close to true for automatically chosen images
b) there is a bare minimum of 200x200 (more information is included on https://developers.facebook.com/docs/sharing/best-practices#images)

By doing this you'll remove all the complex logic above and worries about always having appropriate images.

Instructions:
[list="1"]
[*] Add Theme image...

Add a theme image called [tt]opengraph[/tt] to the default theme:
1) Go to Admin Zone > Style > Themes
2) After this you will be taken to "Manage Themes" page, where you would find the Theme of your current website and the default Composr theme
3) Look under your site theme, and in the options listed for it you should see a link for "Manage theme images"; click this
4) Scroll down and click "Add a theme image"
5) Set the codename as [tt]opengraph[/tt]
6) Attach your a new file ("Browse")
7) Scroll down towards the bottom of the page and click "Add"

Alternative to the steps above you can just upload a [tt]themes/default/images_custom/opengraph.png[/tt] file (or [tt]opengraph.jpg[/tt] or any other valid web image file type).
[*] Edit Template...

Edit the [tt]HTML_HEAD.tpl[/tt] template...

Replace:
[code="HTML"]
{+START,IF_NON_EMPTY,{$METADATA,image}}
	<meta property="og:image" content="{$METADATA*,image}" />
	<meta property="og:image:width" content="{$IMG_WIDTH*,{$METADATA,image}}" />
	<meta property="og:image:height" content="{$IMG_HEIGHT*,{$METADATA,image}}" />
	{$,NB: You may also want to define a image_src link tag for some social sites}
{+END}
{+START,IF_EMPTY,{$METADATA,image}}
	{$SET,fallback_image,{$IMG,logo/standalone_logo}}
	<meta property="og:image" content="{$GET*,fallback_image}" />
	<meta property="og:image:width" content="{$IMG_WIDTH*,{$GET,fallback_image}}" />
	<meta property="og:image:height" content="{$IMG_HEIGHT*,{$GET,fallback_image}}" />
{+END}
[/code]
With:
[code="HTML"]
{$SET,fallback_image,{$IMG,opengraph}}
<meta property="og:image" content="{$GET*,fallback_image}" />
<meta property="og:image:width" content="{$IMG_WIDTH*,{$GET,fallback_image}}" />
<meta property="og:image:height" content="{$IMG_HEIGHT*,{$GET,fallback_image}}" />
[/code]
[/list]

[title="4"]Changing individual default content-type images (advanced)[/title]

This example shows how to change shared topics to use a custom theme image (for cases where there is no better image):
[list="1"]
[*] Add Theme image...

Add a theme image called [tt]opengraph_defaults/forums[/tt] to the default theme:
1) Go to Admin Zone > Style > Themes
2) After this you will be taken to "Manage Themes" page, where you would find the Theme of your current website and the default Composr theme
3) Look under your site theme, and in the options listed for it you should see a link for "Manage theme images"; click this
4) Scroll down and click "Add a theme image"
5) Set the codename as [tt]opengraph_defaults/forums[/tt]
6) Attach your a new file ("Browse")
7) Scroll down towards the bottom of the page and click "Add"

Alternative to the steps above you can just create a [tt]themes/default/images_custom/opengraph_defaults/[/tt] directory and upload a [tt]forums.png[/tt] file to it (or [tt]forums.jpg[/tt] or any other valid web image file type).
[*] Edit Template...

Edit the [tt]HTML_HEAD.tpl[/tt] template...

Replace:
[code="HTML"]
{$SET,fallback_image,{$IMG,logo/standalone_logo}}
[/code]
With:
[code="HTML"]
{$SET,fallback_image,{$IMG,logo/standalone_logo}}
{+START,IF,{$EQ,{$METADATA,type},Forum topic}}
	{$SET,fallback_image,{$IMG,opengraph_defaults/forums}}
{+END}
[/code]
[/list]

Our new code detects if the page is a forum topic and performs a substitution to our custom image in such cases.

[title="4"]Validation rules (advanced)[/title]

If you want to add validation rules to make sure the chosen metadata image meets Open Graph requirements, there are samples defined in the [tt]fields.xml[/tt] system (see the [page="_SEARCH:tut_fields_filter"]The form field filter system[/page] tutorial).

[title="2"]Logging in using Facebook[/title]

You can allow users to log in to your Composr site using their Facebook accounts, as long as the [tt]hybridauth[/tt] addon is installed.

Be aware that this is a trade-off: allowing quick log in, but limiting your ability to control sign-ups. Facebook login differs from normal Composr joining in the following ways:
 - Password or username restriction rules will not apply, as the user does not choose these on your site
 - Rule acceptance will not happen (so make sure you link to your rules somewhere); Facebook login is generally designed as one-click, so extra steps are the antithesis of this
 - There is only one step, unless there are required Custom Profile Fields configured in Composr (in which case a profile completion step is required)
 - E-mail address confirmation is not required

This functionality is enabled via a configuration option at Admin Zone > Setup > Configuration > Composr API options > Facebook.

Enabling the option turns on some template changes that incorporate the Facebook login button into the site design.
(See the "Special case: Theme integration" section)

The following details are taken from Facebook profiles:
 - Date-of-birth
 - E-mail address
 - Username
 - Photo

There are a number of configuration options you can set regarding active synchronisation of some of the above details. If synchronisation is enabled then if they are changed on Facebook the new settings copy through next time the user accesses your site. Regardless of configuration, synchronisation happens the first time a Facebook login occurs.

[title="3"]How the process basically works[/title]

When a user logs in using Facebook, Composr never is given the Facebook username and password of that user. Composr stores the Facebook account ID into the member account, and communicates securely with Facebook to ask Facebook if that member is logged in. So in effect (from Composr's point of view) it is a passwordless login.

[title="3"]Account de-binding[/title]

If you joined using Facebook, or bound an existing account using Facebook (as above), you may want to convert it (back) to a normal account.
This is very simple. Just do a "reset password" on your account and it will be turned into a normal account you log in with.

[title="2"]Content/Activity syndication[/title]

[media thumb="0" framed="0" float="right"]data_custom/images/docs/sup_facebook/twitter.png[/media]
Content and Activities can be syndicated out to Facebook, if the Hybridauth and Activity Feed non-bundled addons are installed. Most of this advice applies also to the Composr non-bundled Twitter Support addon, and other Hybridauth providers that support the Hybridauth Atom API for writing. The Hybridauth addon contains additional documentation in the addon description.

[title="3"]Maybe just keep it simple / separate-out responsibilities?[/title]

You may prefer to use a dedicated service such as [url="dlvr.it"]https://dlvr.it/[/url] to tie in any of the Composr RSS feeds. This is sometimes a simpler, and more flexible, solution.

Also, don't discount the idea of simply manually sharing things. It gives you more control and quality assurance (i.e. you'll get to see how the sharing actually looks). You can also find third-party tools to do cross-posting across multiple social media sites in one go.

[title="2"]Ongoing work[/title]

Composr integrations with services such as Facebook are ongoing projects. Facebook will often change their capabilities and deprecate old systems. Therefore be aware that nothing is set in stone.

Facebook will e-mail out notices about changes in functionality and has a phased 'opt in' system before it forces everyone to update; we try and track these but usually they only affect a minority of Facebook apps and not Composr.

If Facebook does change something to stop the addon working, the developers aren't necessarily going to guarantee to jump on changing our addon too; if Facebook integration is important to you be ready to help sponsor ongoing maintenance of the addon and/or [url="Hybridauth"]https://hybridauth.github.io/[/url] to ensure it is funded.

We may add additional functionality to the addon in the future, again mainly if it is sponsored. There is plenty of scope to push further integration.

[title="2"]See also[/title]

 - [page="_SEARCH:tut_members"]Composr member system[/page]
 - [page="_SEARCH:tut_seo"]Improving your search engine ranking[/page]
 - [page="_SEARCH:tut_metadata"]Metadata[/page]
 - https://hootsuite.com/

{$SET,tutorial_tags,facebook_support,activity_feed,Addon,Social,regular}{$SET,tutorial_add_date,Apr 2015}{$SET,tutorial_summary,Details of Composr Facebook support, particularly capabilities of the non-bundled Facebook Support addon.}[block]main_tutorial_rating[/block]
