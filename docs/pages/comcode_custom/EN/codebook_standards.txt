[title sub="Written by Chris Graham (ocProducts)"]Code Book, part 4 (Coding Standards)[/title]

&laquo; Return to [page="_SEARCH:codebook"]Code Book table of contents[/page]{$REQUIRE_CSS,tutorials}

[contents][/contents]

[title="2"]Introduction[/title]

This document documents many coding standards. Agencies may wish to integrate some of this into their own assessment spreadsheet for projects.

Ideally you should try and learn to apply all these standards naturally, so going through this as a checklist will be a quick final formality when you're finished coding.

You may also wish to read the "Engineering standards and trade-off" section of [page="_SEARCH:codebook_3"]Code Book, part 3 (Miscellany)[/page] and the descriptions of design concerns across the main compo.sr website (particularly the Composr Manifesto).

[title="2"]What standards to apply[/title]

If you are writing code that you think should be included in future Composr versions, you must meet the full standards.

For client work you can afford to meet only a subset of standards, as you control the environment much more, and a limited set of programmers will need to work with the code. Team members can agree on the standards used on a per-project basis.

We want to maintain high standards, but we also don't want to weigh you down.

The categories:
 - "All development" should be done by any developer using Composr
 - "Composr development +" means it's needed for Composr code (i.e. code for redistribution to end users), but also very advisable to do in general (it's best to try and learn to do it by habit if it's something that doesn't make things slower to do).
 - "Product only" only usually needs considering for bundled Composr code, although you may want to consider it anyway.
 - "Projects" applies only to client projects, not for the normal coding of bundled Composr code.

[title="2"]Automatic application[/title]

Any standard not marked in [color="red"]red[/color] has some kind of automatic way of being checked, assuming all the recommended tools are used.

[title="3"]Development mode[/title]

The mentioned Composr development mode runs automatically if you are working out of a Git repository.

[title="3"]Code Quality Checker[/title]

The Code Quality Checker (described in the Code Book, and its [tt]readme.txt[/tt] file) has various options, including pedantic mode. When we refer to pedantic mode here we might actually mean one of the other non-default options: check to see what's available.

[title="3"]Automated tests[/title]

Automated tests are implemented as "unit tests" in the [tt]testing_platform[/tt] addon. Technically they are not actually unit tests, they are integration tests, but we aren't pedantic about that.

Almost any rule has exceptions, and thus many of the tests define lists of exceptions internally, which you are invited to amend as required. Use your common sense and good judgement.

Many automated tests support a [tt]debug=1[/tt] parameter to output additional debug information for why things are failing.

You are invited to improve automated test code as you see fit.

[title="3"]Code formatting within editors[/title]

To automatically format code for PSR-12 you can either use the "PHP CodeSniffer" Open Source project, or PhpStorm.

The optimum PHP CodeSniffer command is:
[code="Bash"]
phpcbf --parallel=1024 .
[/code]

This is running PHP CodeSniffer in beautification mode and uses the bundled [tt].phpcs.xml[/tt] file, which defines our standards (this file is also used by our CQC integration of PHP CodeSniffer).

Don't reformat other people's code automatically without checking the changes, as you may cause problems with comment or line alignment.

It is a good idea to use an editor/IDE with support for the [tt].editorconfig[/tt] standard. Most editors/IDEs have a plugin for it. [tt].editorconfig[/tt] will help you automatically set correct tab settings (among other things) as you move between different projects.

[title="2"]Standards[/title]

{$SET,cs_count,1}[surround="coding-standards-tables"]
[title="3"]General programming[/title]

[title="4"]Good programming practices[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]DRY (Don't Repeat Yourself)[/color]
| Technical debt
| All development
| Manually
| Don't copy & paste big chunks of code (exceptions: see below), or the same snippet of code time-and-time-again. If you spot a reusable chunk of code, consider making both usages work via a new shared function. Sometimes if you see the same [b]pattern[/b] of code time-and-time-again it makes sense to abstract that too.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Only ever copy & paste if you need to, and use care[/color]
| Technical debt
| All development
| Manually
| If you do copy & paste a chunk of code, e.g. if implementing a new importer and using a pre-existing one as a base -- then make sure you at least adjust your copied code to make sense. Don't leave comments in there that refer to the old context (e.g. refer to the wrong importer in the pasted code).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Know what you are doing in all your code[/color]
| Technical debt
| All development
| Manually
| Understand all the code you write. Don't just copy some existing pattern into a new context.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Write well structured code[/color]
| Technical debt
| All development
| Code Quality Checker can check function length (pedantic mode)
| Divide into functions into appropriate units (sensible modules interacting over reasonable interfaces). Where possible create functions and classes that are isolated from specific screens, as these can then have automated tests written for them. Try and make your code flow from top to bottom roughly represent execution order.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Keep your code tidy[/color]
| Technical debt
| All development
| Manually
| Just generally try and keep your code neat. Don't misspell in comments and variable names. Tidy code encourages a mindset of zero tolerance for messiness in other areas, and increases general team morale such as to keep a high level of standards.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Separate code chunks with blank lines[/color]
| Technical debt
| Product development only
| Manually
| A chunk of code is usually a few lines long and does a common purpose. Usually the chunk will start with a short comment, and end with a single blank line or a function's closing brace. Make your blank lines mean something (i.e. the end of a code chunk), don't just add them to space things out randomly.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Keep track of things you intend to fix later[/color]
| Technical debt: stops things being forgotten
| All development
| Manually
| If you have to do some code that really should be cleaner, put a comment by it starting [tt]FUDGE[/tt]. If you haven't finished something put a comment starting [tt]TODO[/tt] (with optional reference to a tracker ID which will suppress it reporting as a test failure), so it is easy for someone to later pick up if you forgot to finish it. If you have an idea put [tt]IDEA[/tt] (with optional reference to a tracker ID).
We do not use [tt]HACKHACK[/tt] or [tt]FIXME[/tt] markers, although the CQC will pick up on these.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Any legacy code must be marked as such[/color]
| Technical debt
| Product development only
| Manually
| Legacy code, due to supporting data from old Composr versions, must be marked with a [tt]LEGACY[/tt] comment. This will allow us to clean it out in future versions, should we want to break old compatibility.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't write cryptic code[/color]
| Technical debt
| All development
| Manually
| Don't write code that is too "clever" or relies on too deep an understanding, unless there's good reason to. For example, don't assume the programmer knows the precedence order of some of the less common operators so put in explicit parentheses to make things clear.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use software engineering best practices[/color]
| Technical debt
| Composr development +
| Manually
| Use software engineering best practices (while also keeping things consistent with how Composr is designed, sometimes unconventional decisions may have been made for a reason).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use meaningful function / class / variable / file / identifier names[/color]
| Technical debt
| Composr development +
| Manually
| Use sensible function / class / variable / file / identifier / token names that make full intuitive sense in whatever context they are used in; this is particularly important for global functions (you should have an idea what specifically the function is for without having to look it up).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Comment your code, but not too much
| Technical debt
| Composr development +
| Code Quality Checker can check comment density (pedantic mode)
| Write comments for non-obvious code. Don't comment obvious things ("this is a loop", "this runs if $foo equals $bar"). Write comments that explain your algorithms, and comments that give a high-level overview of what chunks of code do. Very roughly one of two comments per 7 lines, but don't feel bound to match that.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Write comments in the standard way
| Consistency
| Product development only
| Manually
| Comments typically look like [tt]// This is an example[/tt]. Notice the [tt]//[/tt] commenting method is used, followed by a space, followed by a capital letter. There are many special cases for why you would not do it like this, but generally speaking you should follow this format. This will make the code look neat and tidy, rather than comments looking like rough notes.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use constants instead of "magic numbers"[/color]
| Technical debt
| Composr development +
| Manually
| Don't use "magic numbers". For example, instead of using the numbers 1, 2, and 3 with special meanings throughout your code, define constants and reference those instead.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Everything should be configurable from within Composr[/color]
| Usability for webmasters
| Product development only
| Manually
| No FTP/file-manager should ever be necessary to operate, configure, or extend an installed Composr website.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use our standard code header[/color]
| Legal
| Product development only
| Manually
| We have a standard comment format at the top of files (different depending on the file type). Use it consistently.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Support offline[/color]
| Offline development and Intranets
| Product development only
| Manually
| Unless intrinsically necessary for a particular piece of functionality, do not rely on external URLs such as CDNs. External URLs create a number of problems, including: network firewalls operating with safelist blocking functionality (e.g. in museums), erratic firewall blocking (e.g. in China), full functionality not being available offline (e.g. when developing on an airplane), or full functionality not working in private offline Intranets (e.g. in schools). If users want to make use of CDNs they can make manual changes to achieve it.
|}

[title="4"]Code text formatting[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Blank lines at the end of files
| Portability
| Product development only
| Automated test ([tt]basic_code_formatting.php[/tt])
| There is a Unix standard that text files should have a terminating line break. As various tools enforce this we standardise on a single line-break for most files. A few exceptions are defined within the automated test for the rare cases where we can't do this.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Unix line endings
| Consistency
| Product development only
| Automated test ([tt]basic_code_formatting.php[/tt])
| We work in Unix line-ending format, not Windows.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
No trailing whitespace
| Consistency
| Product development only
| Automated test ([tt]basic_code_formatting.php[/tt])
| Unless there's a good reason, we don't want floating white-space on the end of lines of code. It's messy.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
No BOM markers
| Stability
| All development
| Automated test ([tt]basic_code_formatting.php[/tt])
| Many programs are not compatible with byte-order-markers.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use ASCII
| Stability
| Composr development +
| Automated test ([tt]basic_code_formatting.php[/tt])
| In order to avoid having to configure IDEs and text editors on what character set to use, and problems with Composr running on different character sets, just make it so your code files don't require any specific character set. Certainly don't have your code outputting non-ASCII characters directly -- encode such characters in some smarter way, e.g. using HTML entities.
|}

[title="3"]Back-end programming[/title]

[box="Third party code"]
[media thumb="0" framed="0" float="right"]data_custom/images/docs/remember.png[/media]
You do not need to make third-party libraries meet our particular choice of standards. We trust third-party developers to have their own methods for ensuring standards are high. Exclude PHP files from automated testing by putting [tt]/*CQC: No check*/[/tt] (disables the CQC) and/or [tt]/*CQC: No API check*/[/tt] (disables the CQC's PHPDoc scanning/compilation) at the top of the file.
[/box]

[title="4"]General[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use PSR-12 coding standard
| Consistency
| Composr development +
| Code Quality Checker, PHP CodeSniffer (integrated with CQC)
| Use PSR-12, e.g. the bracing style, 4-spaces not tabs. Our only exceptions are relating to:
 - class and namespace structure, as we are not an OOP-heavy codebase and not a library
 - we allow long lines
 - don't split function/method declarations across multiple lines
 - we may split function calls (parameters) across multiple lines and include blank lines to space out groups of parameters
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Spaces around operators
| Consistency
| Product development only
| Code Quality Checker
| Do like [tt]$a + $b[/tt] not [tt]$a+$b[/tt]. This makes the code easier to read and understand for some programmers, and largely consistent with what other projects do.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use short array syntax
| Consistency
| Composr development +
| Code Quality Checker
| We want our code to be concise and clear, so we use the [tt][...][/tt] syntax not the [tt]array(...)[/tt] syntax. This syntax is similar to JavaScript, so very recognisable to the modern developer.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Trailing commas for multi-line arrays[/color]
| Revision control
| Product development only
| Code Quality Checker
| If you have split an array or JavaScript object initialiser across multi-lines, use a trailing comma. This means every array element has a comma after it. The advantages are it looks more symmetrical and it is less likely to conflict in revision control should the array be extended with further elements.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Align functions precisely in code
| Modularity: So Composr code-overriding can work on it
| Composr development +
| Automated test ([tt]override_issues.php[/tt])
| Functions must not be indented in code, and methods must be indented by exactly 4 spaces. There must be exactly one space after the [tt]function[/tt] keyword and no tabs. Braces must go on the next line with the same indentation as the function and the closing brace must match too. The contents of the function must be 4 spaces deeper.
These rules are very standard, but if broken then code-overriding may not work correctly because Composr assumes them while doing efficient function-level overriding (there is no full PHP parser involved).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Pass URLs properly[/color]
| Compatibility with ModSecurity
| Product development only
| Manually
| URLs-within-URLs need to be encoded carefully so as to bypass ModSecurity restrictions (often any embedded URL is blocked). Basically URLs should be read in with a [tt]INPUT_FILTER_URL_*[/tt] flag to [tt]*_param_string[/tt], and URLs should be placed within URLs/forms with a [tt]protect_url_parameter[/tt] call around their value.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Trim white-space for usernames/passwords/e-mails[/color]
| User experience
| Composr development +
| Manually
| Look to see how usernames/passwords/e-mails/domain-names/paths etc are input in other parts of the code and do the same. Mainly we trim white-space to reduce the chance of copy & paste errors. Also we don't do other normal manipulations on password fields.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use Composr APIs wherever appropriate[/color]
| Security, stability, consistency
| Composr development +
| Manually
| If is very easy to make mistakes when writing new code. Our functions have been tuned over years. For example, our [tt]http_get_contents[/tt] function works on any server and supports lots of options.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the [tt]temporal[/tt] API, not PHP date/time functions[/color]
| Internationalisation / consistency
| All development
| Manually
| Don't forget about users potentially being in different timezones. Rarely if ever use PHP's inbuilt date/time functions -- use Composr's temporal API. The PHP [tt]date[/tt] function doesn't even support non-English strings, and [tt]strftime[/tt] has many issues.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the [tt]type[/tt] parameter for your modules[/color]
| URL schemes
| All development
| Manually
| All modules should be coded to use [tt]type[/tt] as the internal specifier of what 'screen' to show. The [tt]run[/tt] function should decide what function to call based on this parameter, and typically also the [tt]run_pre[/tt] function will be there to load metadata for the screen (allows HTML to start streaming while the screen code runs). The default entry point for a module must either not exist, or be named [tt]browse[/tt]. Do not hardcode defaults other than [tt]browse[/tt] as it will interfere with the page-link permission security and the URL scheme support.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Remember to apply sorting wherever appropriate[/color]
| Usability: so live sites are tidy
| All development
| Manually
| Remember to sort things. Sometimes this needs doing in PHP code, and sometimes it needs doing in your queries ([tt]ORDER BY[/tt]). If doing it in PHP code consider you usually will want to do a "natural" sort, to consider whether case-insensitivity needs enabling, and to consider Unicode-safe sorting (handled by the [tt]cms_mb_*sort[/tt] functions). Typically you should order data records by date, not by ID (because IDs may not be sequential, especially on exotic database backends). You should never assume that data comes out of the database in the same order as it goes in.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Remember to apply pagination wherever appropriate[/color]
| Performance
| All development
| Manually
| Don't forget to paginate your browse screens using Composr's [tt]pagination[/tt] or back/next system.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Consider performance[/color]
| Performance: on real live sites
| All development
| Manually
| Don't do silly things that affect performance like running queries inside a loop/recursion.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Performance over architecture[/color]
| Performance: on real live sites
| All development
| Manually
| We put performance ahead of what other's may consider strong architecture -- we don't create complex or abstractions or heavy code structures for core code to keep our framework's footprint low. Latency and memory usage is very important, and we don't want to make the same overhead mistakes other systems have made.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Be careful with case conversions and case insensitivity checks[/color]
| Stability
| Product development only
| Manually
| If you use the PHP [tt]strtoupper[/tt] or [tt]strtolower[/tt] functions, it won't work correctly for the letter i/I if the locale is Turkish, and on a threaded shared server environment the locale may be changed by other system users. Similarly, [tt]preg_*[/tt] functions in case insensitivity mode won't work for i/I, so if you really need case insensitivity for that letter then provide both in a character class, [tt][iI][/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Never start a file [tt]<?[/tt]
| Portability
| Composr development +
| Code Quality Checker
| PHP [tt]short_tags[/tt] option may be off.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Never end a PHP file with [tt]?>[/tt]
| Stability
| Composr development +
| Code Quality Checker
| It is not needed, and if a blank line ends up after it accidentally (e.g. added by FTP) then cookies won't save.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use unique function and class names
| Modularity: you may need to load up both at some point
| All development
| Code Quality Checker
| No two classes or functions may have the same name, regardless of where they are defined or used. It should be possible for the whole set of Composr PHP files to be simultaneously loaded.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't rely on "Security through obscurity"[/color]
| Security
| All development
| Manually
| Always assume that people will try and hack the website, and that they have the full source code, so don't rely on them not guessing URL parameters etc. For example, if you implement some kind of permission scheme for a feature, don't just limit how the link to the feature is shown, also limit the interface and actualiser functions for the feature.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Be careful with: [tt]header()[/tt], [tt]eval()[/tt], [tt]preg_replace()[/tt][/color]
| Security
| All development
| Manually, Code Quality Checker pedantic mode will help
| If you're putting variables into the header function consider data could contain [tt]\r[/tt] or [tt]\n[/tt] symbols, so escape via the [tt]escape_header[/tt] function. If you're using eval be [b]extremely[/b] careful to validated input; there's rarely a reason to use it anyway. If you're using [tt]preg_replace[/tt] make sure to use [tt]preg_quote[/tt] and to manually escape the regular expression encapsulation character (usually [tt]#[/tt] or [tt]/[/tt]).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Avoid using [tt]eval[/tt], [tt]$$[/tt], [tt]create_function[/tt], or [tt]preg_replace[/tt] with [tt]/e[/tt]
| Security
| Product development only
| Manually
| It's hackerish and prone to security issues. There's rarely a good reason to do it.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Long running requests should be tasks[/color]
| Stability, performance
| All development
| Manually
| If a page request may take more than 30 seconds to complete, it should be codified as a task so that it can execute out of the task queue in an orderly manner.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Make your code robust against accessed deleted content[/color]
| Stability
| All development
| Manually
| Imagine some content was added, then later deleted. Imagine that someone or a web crawler calls up a URL associated with the old content. It should produce an intentional error message (usually our [tt]MISSING_RESOURCE[/tt] error), not a PHP error.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[tt]underlining_for_names[/tt]
| Consistency
| Composr development +
| Code Quality Checker
| Use [tt]underlining_for_names[/tt] in PHP variables, PHP function names, PHP arrays, database tables, database fields, and filenames. Not for JavaScript or CSS though.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[tt]UPPER_CASE[/tt] should be used for globals and constants
| Consistency
| Composr development +
| Code Quality Checker
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Support minimum PHP version
| Portability
| Product development only
| Code Quality Checker
| The version listed in Composr's [page="_SEARCH:tut_webhosting"]minimum requirements[/page] must be supported.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Do not use [tt]$_GET[/tt] or [tt]$_POST[/tt] directly
| Security: implements security filtering
| Product development only
| Code Quality Checker, pedantic mode
| Instead use one of the set of [tt]get_param_*/post_param_*[/tt] functions. Some exceptions are allowed, e.g. looping over all input to find what input exists.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use our MVC model as described in the Code Book[/color]
| Technical debt
| Composr development +
| Manually, Code Quality Checker will help
| Composr enforces a strict separation between content, presentation and code. This is referred to as the MVC (model, view, controller) design pattern. No HTML is allowed in the PHP code except for very select exceptions, such as [tt]<option>[/tt] (for efficiency) and hardcoded emergency error pages. You can usually assume the output will be some kind of HTML though (you don't need to code so abstractly that output could be a speech API, for example).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't assume PHP extensions or PEAR are installed
| Portability
| Composr development +
| Code Quality Checker
| Never assume that any extensions are installed unless they are listed in Composr's [page="_SEARCH:tut_webhosting"]minimum requirements[/page]. If you do use something else (necessarily so, and only for auxiliary behaviour) you must cleanly handle the situation where it is not present using either code branching or helpful error messages.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use only safelisted functions
| Portability: PHP [tt]disabled_functions[/tt] option
| Product development only
| Code Quality Checker
| In fact, don't assume any rarely-used function is available unless it is listed in the [tt]sources/phpstub.php[/tt] file (Code Quality Checker will check, no need to manually check). We have avoided many functions where webhosts often block using the PHP [tt]disable_functions[/tt] option. Use our [tt]php_function_allowed[/tt] function.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not require cookies to be available on visitor machines[/color]
| Compatibility with user computers
| Product development only
| Manually
| Cookies must not be required for functionality to work (except session cookies), unless said functionality is not needed to operate the system (i.e. alternatives exist).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
If you use cookies, use the Composr cookie API
| Portability
| Composr development +
| Code Quality Checker, pedantic mode
| If you do use cookies, use the Composr cookie functions to read/set/delete them, as these are written to respect the webmaster's defined cookie settings (cookie domain, cookie path).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Document cookies[/color]
| GDPR
| Composr development +
| 
| Document any cookies in a privacy hook, so that the privacy policy may be generated correctly.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Template GUIDs must be unique
| Themeing
| Product development only
| Release scripts
| Don't copy and paste GUIDs in template calls. If you copy and paste a line with a GUID ([tt]'_GUID' => 'blahblahblah'[/tt]), remove it completely from your new line. Our automated scripts can put one back in later. The reason: these are used to allow different uses of shared templates to be differentiated via Tempcode. The GUID is a unique identifier for a specific template call.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Put standard [tt]index.html[/tt] and [tt].htaccess[/tt] files in new directories
| Security: stops probing/tunnelling
| Composr development +
| Automated test ([tt]standard_dir_files.php[/tt])
| Almost all directories should contain an empty [tt]index.html[/tt] (to stop directory browsing on web servers that have it enabled). Most directories should also contain the small [tt].htaccess[/tt] file (copy it from another deep directory) that we use to block direct file access. If you strictly need to block access to a directory for security reasons you should also update [tt]web.config[/tt] to reflect that (for IIS users).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Functions should have proper API documentation
| Technical debt, and it allows the Code Quality Checker to check more
| Product development only
| Code Quality Checker, function signatures feature
| Use the "PHPDoc"-style syntax correctly, and never ad-lib on its syntax (it gets parsed). Make sure the data types specified are accurate. Where [tt]null[/tt] is allowed for a value make sure that is specified (via [tt]?[/tt] before the data type) and its meaning explained. Do not copy and paste comments from elsewhere without changing it to be fully correct for where you've added it.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Remember that a site can have multiple themes/languages[/color]
| Stability
| Product development only
| Manually
| Remember that a site can have multiple themes and languages -- be careful that you do not cache things with implicit assumptions that should not have been made (e.g. instead of caching something in English, you should cache stuff per-language).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Support multi-site-networks (i.e. site db != forum db)
| Stability
| Product development only
| Composr development mode
| Remember that Conversr may be run over an M.S.N. (i.e. different URL, not just from the [tt]forum[/tt] zone) and also from a separate database -- don't make false assumptions about databases, tables (e.g. using [tt]SITE_DB[/tt] instead of [tt]FORUM_DB[/tt] and hence wrongly assuming the forum and site always share a database) and file-storage/URLs (e.g. using [tt]get_base_url[/tt] instead of [tt]get_forum_base_url[/tt]). Use the correct APIs for referencing Conversr data and files. As a general rule, any table starting [tt]f_[/tt] is an Conversr table and therefore should be accessed through [tt]FORUM_DB[/tt]. If you are running development mode you will get an error ("Using Conversr queries on the wrong driver") if you use the wrong database object.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Handle errors in failure-prone function calls (e.g. [tt]fopen[/tt])
| Stability
| Product development only
| Code Quality Checker, pedantic mode
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Always respect/handle character-sets properly[/color]
| Internationalisation, stability
| Composr development +
| Manually
| Don't assume the character set is [tt]utf-8[/tt], or [tt]ISO-8859-1[/tt] for input data or for output data (including files and HTTP API calls). Use appropriate conversions when interfacing with things that come-from/go-to a potentially alien character set. Composr has file APIs that deal with byte-order-marks (BOMs) appropriately.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't put loose code (code outside functions) in any PHP file
| Security: stops hackers "jumping in"
| All development
| Code Quality Checker
| The only loose code allowed is our standard boot code in the entry point files.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't add more than a few lines of code to an "entry script"
| Modularity: So Composr code-overriding can work on it
| Product development only
| Composr development mode / Code Quality Checker
| Instead of directly placing code in the entry-point file, put it in a sources file and require it in then call it as a function.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Make choice of [tt]GET[/tt] or [tt]POST[/tt] carefully[/color]
| Compatibility: So bookmarking works and web accelerators don't break things
| Composr development +
| Manually
| HTTP [tt]GET[/tt] requests should not change database state in any major way (it can cause problems with web spiders, problems with web accelerator systems, and XSS vulnerabilities). [tt]POST[/tt] requests should not be used for screens that might be reasonably bookmarked (e.g. search result screens, or result filtering screens). Composr has specific features in its API to allow you to choose whether forms use [tt]GET[/tt] or [tt]POST[/tt] requests. You absolutely must not make anything that will show up directly on the Sitemap change state in a major way.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"][tt]REQUEST_METHOD[/tt] being [tt]POST[/tt] is not a good enough check for a form being submitted[/color]
| Security
| Composr development +
| Manually
| You may be tempted to distinguish between showing forms and actualising them by looking at [tt]REQUEST_METHOD[/tt]. However, a login screen will generate a [tt]POST[/tt] that relays any existing (if any) POST data along with login POST data to whatever URL the login had to happen from. This means that you cannot relay on [tt]REQUEST_METHOD[/tt] being [tt]POST[/tt] alone for there being a genuine regular form submission to where the user is at. You need to either have some required POST fields, or do detection based on a special hidden POST field being present. 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Set appropriate class visibility.
| Technical debt
| Composr development +
| Manually
| Class variables and functions that are not accessed from outside the class should generally be declared as [tt]protected[/tt]. This allows subclasses to access them, but not external code. Note a major exception: almost all functions in a module will be [tt]public[/tt] because we want deep external control of module code flow (e.g. by automated tests).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Code as if PHP was "strict typed".
| Security, stability
| Product development only
| Code Quality Checker / ocProducts PHP version
| This is hard for many PHP programmers to grasp so is explained in a separate section in our Code Book.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't write code that'll output PHP 'notice' errors
| Stability
| Composr development +
| Composr makes all PHP notices generate stack traces
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Allow initialisation functions to run twice
| Stability
| Product development only
| Automated test ([tt]override_issues.php[/tt])
| If a developer overrides a [tt].php[/tt] file then the initialisation function of the original will also run. The person doing the override doesn't usually understand this and accommodate for it, so make sure you check that you are not doing anything that can't run twice. Usually this just involves guarding [tt]define[/tt] calls.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't assume about platforms[/color]
| Portability
| Product development only
| Manually
| Do not assume Composr is running on Linux, or Microsoft Windows, or Apache, or IIS, or Mac OS, or a case-sensitive filesystem, or a case-insensitive filesystem, or anything else unless it is defined in our minimum requirements. This is an important lesson for new programmers who may be used to just making something work for the computer they are in-front of. You need to use universally accepted techniques rather than platform-specific APIs.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use [tt]log_it[/tt] calls
| Usability
| Composr development +
| Manually
| For any non-trivial admin action, do a [tt]log_it[/tt] call for it, and implement good quality metadata in an [tt]actionlog[/tt] hook for that.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use the correct redirection APIs
| Portability
| Composr development +
| Manually
| There are a number of internal functions to do redirects ([tt]redirect_screen[/tt], [tt]redirect_exit[/tt], [tt]assign_refresh[/tt]), supporting [tt]<meta>[/tt]-redirect for situations that don't allow HTTP-redirect, and attached-message hand-over. If you must output a [tt]Location[/tt] header manually then comment why you are doing so.
|}

[title="4"]Calling web APIs[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Show good error messages[/color]
| Stability
| Composr development +
| Manually
| Web API calls must be able to sense the best possible error messages within payloads, or if a payload is missing ([tt]!is_array[/tt]) then an error message from the HTTP message. This implies to call [tt]cms_http_request[/tt] with [tt]ignore_http_status[/tt] as true. We need to do this to help people debug their key configuration, and so people can provide good bug reports.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Log errors[/color]
| Stability
| Composr development +
| Manually
| Web API calls must log their errors and send an error notification (usually both via [tt]cms_error_log[/tt]), or pass back their errors via exceptions or reference parameters (then the callers must do said logging/notification). This implies to call [tt]cms_http_request[/tt] with [tt]trigger_error[/tt] as false, so that errors don't result in insta-exit (most APIs should be designed to gracefully handle errors rather than exiting anyway). We need to do this because API failure should not go unnoticed.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not e-mail ocProducts[/color]
| Stability
| Composr development +
| Manually
| Web API errors should not result in anything that would send an error e-mail to ocProducts (e.g. [tt]fatal_exit[/tt]). We do not want to be spammed when people mess up their key configuration or exceed quota.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Write automated tests[/color]
| Stability
| Composr development +
| Manually
| Any web API with an API key should have a Health Check to ensure the key continues to function correctly; otherwise at least a testing platform automated test is still probably needed.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not assume JSON is intact[/color]
| Stability
| Composr development +
| Manually
| When calling [tt]json_decode[/tt] use [tt]@[/tt]. Generally also we will parse into PHP arrays, as we tend to use arrays for data structures in Composr.
|}

[title="4"]Addons[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Write well modularised code[/color]
| Modularity
| Composr development +
| Manually
| Group things into separate files where appropriate. For example, an API acting for a certain addon would be in a number of code files named after that addon. CSS for an addon would be in a file named after that addon.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
All files must be associated with an addon
| Modularity
| Product development only
| Automated test ([tt]modularisation.php[/tt])
| Every file intended to be distributed with Composr must be registered in one addon, installation / uninstallation / integrity-scans. To do this list it in the obvious position within one of the [tt]sources/hooks/systems/addon_registry[/tt] files. If it is a PHP file it should have a matching [tt]@package[/tt] line at the top of the file.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Manage any interdependencies between addons[/color]
| Modularity: so addons may be uninstalled freely
| Product development only
| Manually, Automated test ([tt]addon_references.php[/tt]) helps a bit, Automated test ([tt]addon_guards.php[/tt]) helps a bit
| Dependencies should be properly handled via hooks, using the [tt]get_dependencies[/tt] function in the [tt]addon_registry[/tt] hook (i.e. say addons only work if some other addon is also there), and via code that uses the [tt]addon_installed[/tt] function to guard off the dependency. For example, if you used the [tt]galleries[/tt] addon in some feature in the [tt]downloads[/tt] addon, you would make sure the [tt]downloads[/tt] addon did not break if the [tt]galleries[/tt] addon was uninstalled (instead you'd write code to turn off the feature if the dependency was not met, or return an error message via the [tt]ADDON_MISSING[/tt] language string).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Hooks should not crash for missing dependencies
| Integrity
| Product development only
| Automated test ([tt]addon_guards.php[/tt])
| Hooks should not crash for missing dependencies (including the files owner addon), they should just exit cleanly.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Blocks should not crash for missing dependencies
| Integrity
| Product development only
| Automated test ([tt]addon_guards.php[/tt])
| Blocks should not crash for missing dependencies (including the files owner addon), they should just put out an error as the block output. The [tt]addon_installed__messaged[/tt] function may be used for the check on the files owner addon.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Modules should not crash for missing dependencies
| Integrity
| Product development only
| Automated test ([tt]addon_guards.php[/tt])
| Modules should not crash for missing dependencies (including the files owner addon), they should just put out an error. The [tt]addon_installed__messaged[/tt] function may be used for the check on the files owner addon.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Entry-point scripts should not crash for missing dependencies
| Integrity
| Product development only
| Automated test ([tt]addon_guards.php[/tt])
| Entry-point scripts should not crash for missing dependencies (including the files owner addon), they should just put out an error.
|}

[title="4"]AJAX[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Set [tt]KNOWN_UTF[/tt] in front-end controller
| Internationalisation
| Product development only
| Manually
| This will tell Composr how to do a character set conversion -- as JavaScript uses utf-8 regardless of your document character set. If you don't feel a front-end controller is needed, you may be able to just code using a [tt]snippet[/tt] hook, and the [tt]snippet.php[/tt] front-end controller.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Put your code in a function named [tt]<filename>_script()[/tt]
| Consistency
| Product development only
| Manually
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Call [tt]prepare_backend_response[/tt]
| Internationalisation
| Product development only
| Manually
| This function will do character set conversions, and put out appropriate HTTP headers.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Call [tt]exit();[/tt] after your code runs
| Compatibility
| Product development only
| Manually
| If you do not explicitly exit your code then hosting using [tt]auto_append_file[/tt] could append junk to your XML/JSON, corrupting it. This is common on free webhosting plans.
|}

[title="4"]Files[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use the [tt]fix_permissions[/tt] function after making a new file
| Portability: makes the file deletable via FTP
| Product development only
| ocProducts PHP version
| The [tt]cms_file_put_contents_safe[/tt] function has a flag to do this automatically.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Run the [tt]sync_file[/tt] function after making any file changes
| Scalability
| Product development only
| ocProducts PHP version
| The [tt]cms_file_put_contents_safe[/tt] function has a flag to do this automatically.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Be clever about text line-endings[/color]
| Portability
| Product development only
| Manually
| Multi-line textual input (from the web browser, or from the file-system) should go through the [tt]unixify_line_format[/tt] function, to make sure line-terminations are converted to the correct format that the server operating-system needs.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Generally use binary mode[/color]
| Internationalisation, portability
| Product development only
| Manually
| We almost always open text files as binary, not text ([tt]t[/tt] mode). This is because we don't benefit from line-ending auto-conversion and we prefer consistency across platforms. We use our [tt]unixify_line_format[/tt] function instead to enforce consistency.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Make sure you use appropriate file read/write locking[/color]
| Stability
| Composr development +
| Manually
| Files are never locked automatically, and it can cause big problems if you don't manually do locking -- writes can mess up each other, or partial files can read in and cache. The [tt]cms_file_put_contents_safe[/tt] will handle locking well.
|}

[title="4"]URLs and file paths[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use the [tt]build_url[/tt] function and [tt]PAGE_LINK[/tt] symbol
| Portability, URL schemes
| All development
| Composr development mode
| Do not hard-code URLs -- use [tt]build_url()[/tt] correctly. This function will convert to whatever URL scheme is in place, as well as propagate [tt]keep_[/tt] fields. Never use relative URLs as a [tt]<base>[/tt] tag can break them, and we also want all URLs to easily be downloadable server-side in utility functions and when debugging.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use [tt]build_url[/tt]'s [tt]$skip_keep[/tt] parameter for e-mailed Comcode[/color]
| URL schemes
| All development
| Manually
| If you are using a URL in an e-mail, make sure the [tt]$skip_keep[/tt] parameter is set to true, as [tt]keep_[/tt] parameters should not go out in e-mails.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Fix broken user input[/color]
| Usability: Users often miss out [tt]http://[/tt]
| All development
| Manually
| If you write functionality that accepts URLs into the system via a form interface then use the [tt]remove_url_mistakes[/tt] function to make sure the URLs start [tt]http://[/tt] (users will often miss it out). It should add that on the front if the URL does not already contain [tt]://[/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Avoid relative paths
| Portability
| All development
| ocProducts PHP version
| Don't assume any current directory (either URL or filesystem): use full paths (using [tt]get_file_base[/tt] or [tt]get_custom_file_base[/tt] to start off the full path).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't assume where a module is located when you link[/color]
| Flexibility: webmasters may move modules around
| Product development only
| Manually
| Don't assume which zone a module is located in, except in the case of admin modules. Use the [tt]get_module_zone[/tt] function or [tt]_SEARCH[/tt] token to break down such assumptions.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't link to screens using non-canonical URLs[/color]
| SEO: canonical URLs, SEO: avoid duplicate content
| Product development only
| Manually
| For example, the [tt]forumview[/tt] module doesn't pass through a [tt]type[/tt] if it is [tt]browse[/tt]. Most other modules do. Any [tt]browse[/tt] screen doesn't use an ID if the ID would be [tt]db_get_first_id()[/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't assume where an entry-point is located when you link[/color]
| Flexibility: webmasters may move entry-point scripts around
| Product development only
| Manually
| Use the [tt]FIND_SCRIPT[/tt] symbol or [tt]find_script[/tt] function to find zone-based scripts. Put non zone-based scripts in [tt]data[/tt] (or [tt]data_custom[/tt] if for a non-bundled addon).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the [tt]*_custom[/tt] filing system properly[/color]
| Modularity: so the override system can work
| Product development only
| Manually
| Never put custom/user-files/logs in a non-custom directory, and never put code files in a custom directory if they are going to be distributed with Composr. Generally don't put files in places where they don't belong.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the [tt]get_custom_base_url[/tt], [tt]get_custom_file_base[/tt], [tt]get_base_url[/tt] and [tt]get_file_base[/tt] distinctions properly[/color]
| Shared installs: multiple sites with one Composr install, GAE, unreliable include paths and default execution paths
| Product development only
| Manually
| Use a [tt]custom_*[/tt] function if referencing custom/user-data, otherwise don't. Core Composr files that can't be changed from inside Composr are not custom, other files are. i.e. non-custom files are those that would be shared between sites.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use [tt]/[/tt] as a directory separator, even on Microsoft Windows[/color]
| Simplicity
| Composr development +
| Manually
| If we use multiple directory separators it gets messy. [tt]/[/tt] is safe for all PHP library functions, even on Microsoft platforms.
|}

[title="4"]Databases[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Avoid writing SQL
| Security, portability
| All development
| Code Quality Checker, pedantic mode
| Wherever possible just use our APIs, don't write SQL by hand. Use [tt]query_insert[/tt], [tt]query_update[/tt] and [tt]query_delete[/tt]. The only common cases where you need to write SQL by hand completely are if you need to do [tt]OR[/tt] queries, or do wildcard searches.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
When you need to write SQL, write it securely
| Security
| All development
| Code Quality Checker, pedantic mode
| Never ever write SQL without thinking about security, particular SQL injection vulnerabilities.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use [tt]db_escape_string[/tt] not [tt]mysql_escape_string[/tt] / [tt]addslashes[/tt]
| Portability
| All development
| Manually
| Avoids assumption about how escaping is done (you might not know this but the MySQL escaping method is non-standard and the Microsoft one is actually "correct"!)
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Be type-strict
| Portability
| Composr development +
| MySQL-strict-mode and XML database driver
| For example, do not do [tt]WHERE validated='1'[/tt] as [tt]validated[/tt] is an integer field and thus must be referred to as such. Most database are type-strict, MySQL is an exception so it's a big mistake to get things wrong here. We automatically enable MySQL strict mode, unless it is disabled with [tt]destrictify()[/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use sensible database indices[/color]
| Performance
| All development
| Manually
| Create database indexes if you regularly query a table using non-key field(s).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the most appropriate Composr database field types[/color]
| Consistency: higher-level meta functions can work
| All development
| Manually
| When you define database schemas via [tt]create_table[/tt] use the closest Composr field type you can. For example, make use of [tt]AUTO_LINK[/tt] and [tt]TIME[/tt] and [tt]USER[/tt] rather than always using [tt]INTEGER[/tt]. Use [tt]URLPATH[/tt] for URLs. This will help Composr understand its own database better (which it does need to do in some situations such as broken URL scanning). If a field needs to support Comcode, define it as [tt]SHORT_TRANS__COMCODE[/tt] or [tt]LONG_TRANS__COMCODE[/tt] (never run [tt]comcode_to_tempcode[/tt] on-the-fly).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Be careful about key fields[/color]
| Internationalisation, portability
| All development
| Manually
| Most tables will have an [tt]AUTO[/tt] field called [tt]id[/tt] as the key field. However, there are many cases where normal field(s) make sense for use as a key. If you're sure these will be reliable keys, even into the future, then you should usually go for it. However, there is an important special case. If you have a 255-character field then this cannot be used for a [tt]utf8mb4[/tt] table, because it will exceed the 1000 bytes limit (4*255>1000). For this situation you either need to use an [tt]id[/tt] key, or you need to shorten the maximum length of the field (e.g. [tt]ID_TEXT[/tt] instead of [tt]SHORT_TEXT[/tt]), or you need to accept that Composr will automatically detect the issue and make it a [tt]utf8[/tt] table (which cannot store emojis). You probably don't need emojis for any field you'd want as a key, but be wary.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Avoid complex SQL
| Portability
| Product development only
| Automated test ([tt]__installer_xml_db.php[/tt])
| You cannot use SQL syntax that is not widely supported such as the MySQL substring functions, unless the [tt]db_function[/tt] function supports it.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't use [tt]LIMIT[/tt] manually, use the API
| Portability: MS Access
| Product development only
| Composr development mode
| Make use of the from/max parameters to the query functions rather than hard-coding an SQL [tt]LIMIT[/tt] clause (this is required for MS Access compatibility).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
]Don't use ` symbols in your SQL and don't use keywords for table/field names
| Portability: they are MySQL-specific
| Product development only
| Automated test ([tt]__installer_xml_db.php[/tt]), table creation code checks
| You will have been forced to choose field names that don't require escaping anyway.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]In queries use [tt]<>[/tt] rather than [tt]!=[/tt][/color]
| Portability
| Product development only
| Manually
| Not all databases support the latter syntax.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use [tt]db_string_equal_to[/tt][/color]
| Portability: Oracle
| Product development only
| Manually
| Do not build string equalities into WHERE clauses directly (e.g. [tt]WHERE foo='bar'[/tt]), use the [tt]db_string_equal_to[/tt] function (e.g. [tt]WHERE ' . db_string_equal_to('foo', 'bar')[/tt]).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Keep your queries as simple as possible[/color]
| Portability
| Product development only
| Manually
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not assume the first record in a table is [tt]1[/tt][/color]
| Portability
| Product development only
| Manually
| This is the case for MySQL but does not necessarily hold true. Use [tt]db_get_first_id()[/tt] to find the number to use.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use upper case SQL keywords (e.g. [tt]WHERE[/tt] not [tt]where[/tt])[/color]
| Consistency
| Product development only
| Manually
| If you must write your own SQL, write SQL keywords in upper case (e.g. [tt]SELECT[/tt], [tt]FROM[/tt], [tt]UPDATE[/tt], [tt]WHERE[/tt], [tt]LIKE[/tt], [tt]AND[/tt], [tt]OR[/tt]). This makes it easier to scan over them, and makes it look distinct from PHP code.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the correct forum API[/color]
| Forum compatibility layer
| Product development only
| Manually
| Do not assume you are developing for Conversr (unless you are coding Conversr directly), or other forum driver. In other words, use the forum driver API properly and do not assume anything about the forum and member software beyond that.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use table prefixes[/color]
| Portability
| Product development only
| Manually
| Do not assume any database table prefix (so don't assume [tt]cms_[/tt] is at the start of the table names -- use [tt]db_get_table_prefix[/tt] to find out what to use).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Avoid processing full row sets[/color]
| Performance
| Composr development +
| Manually
| For many kinds of table there could be 10's of thousands of rows, and it is very easy to forget this scaling problem when devising algorithms during development.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
No null key fields
| Portability
| Product development only
| Table creation code checks
| You may not include a field that may be null within a key.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
No null strings
| Portability
| Product development only
| Table creation code checks
| You may not allow nullability of a string field, as some databases can't distinguish null from the empty string.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't assume case (in)sensitivity[/color]
| Portability
| Product development only
| 
| It is up to the database layer whether database string comparisons are case sensitive or not. Usually you don't need to think about it because the sensitivity just maps straight to the application behaviour you'd expect, but there may be occasional issues to consider. The default supported MySQL driver is case insensitive as the default collation used is [tt]utf8mb4_general_ci[/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Define [tt]privacy[/tt] hooks, Manually
| GDPR
| Composr development +
| Automated test ([tt]privacy_hooks.php[/tt])
| Any member-ID, IP address, e-mail address, or human-name fields need to be managed for GDPR purposes. This includes support for downloading (serialising), deleting, and anonymising. Serialised content should be understandable without further context, so things like category titles may need to be included (if important) rather than IDs. Database records often should not be deleted without further consideration, so proper deletion API calls should be codified.
|}

[title="4"]Templates and Interfaces[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use existing conventions and features and re-use templates where possible[/color]
| Consistent UI, usability, performance, themeing
| Composr development +
| Manually
| Generally try and replicate the interface conventions of existing modules, unless there is a strong argument that you are dealing with a special case. For example, don't design new ways of previewing things, use the standard previewing mechanism. Another example, use the [tt]pagination[/tt] function instead of implementing new previous/next navigation code. There are almost always API functions or templates for you to use, so it's actually easier to use conventions than re-implementing from scratch. Some are listed further down.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Define breadcrumbs in the standard way[/color]
| Consistent UI, usability for webmasters
| Composr development +
| Manually
| Use [tt]breadcrumb_set_self[/tt] / [tt]breadcrumb_set_parents[/tt] as required to generate appropriate breadcrumb chains. Try to do it at the start of screen code, so it'll be set if an error happens during screen generation.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Inline edit links[/color]
| Consistent UI, usability for webmasters
| Composr development +
| Manually
| For viewing content: if someone has permission to edit something, then for the template that shows the content, pass in a parameter called [tt]EDIT_URL[/tt] (typically), containing the URL to edit the content. If the user doesn't have edit permission, then pass in [tt]EDIT_URL[/tt] empty. Use the standard [tt]STAFF_ACTIONS[/tt] include method for displaying any actions within the template (see the [tt]DOWNLOAD_SCREEN[/tt] template for an example).
|}

These guidelines apply for admin modules...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Write CRUD (add/edit/delete) modules[/color]
| Consistent UI, usability for webmasters
| Composr development +
| Manually
| Write content/data management modules as a Composr CRUD module (add/edit/delete).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use standard approaches after an action is performed[/color]
| Consistent UI, usability for webmasters
| Composr development +
| Manually
| CMS/Admin "completion" screens should either be redirects to an appropriate location (e.g. the [tt]view[/tt] screen for what was just added/edited), do-next managers, or very rarely, message screens. Follow the conventions other modules use. If you do do a redirect, use the proper API (the [tt]redirect_screen[/tt] function) so that the 'success' messages show up on the destination screen for the redirect.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Give admin modules a do-next manager for the [tt]browse[/tt] screen[/color]
| Consistent UI, usability for webmasters
| Product development only
| Manually
| A CMS/Admin module's functions should generally be divided by a welcoming do-next manager (i.e. a set of icons). Exceptions include: when adding only involves specifying a single field (in which case you can put add and edit on the same screen), and also when adding is for power-users only (in which case the add form would be hidden behind a button). Follow the conventions other modules use.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Minimise number of interfaces, mark-up jump links consistently[/color]
| Consistent UI, usability for webmasters
| Composr development +
| Manually
| Don't duplicate interface elements in Composr, unless the duplicate is clearly marked as some kind of shortcut/dupe/jump. For example, if there is a shortcut link between two modules (a duplication in navigation), use the standard Composr convention for informing the user they are jumping between modules (for an example, see how the link from the "Manage themes" screen to the "Zones" screen works).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Populate the helper panel[/color]
| Consistent UI, usability for webmasters
| Composr development +
| Manually
| Wherever appropriate define helper-panel tutorial links, and inline help, for Admin Zone and CMS Zone modules. There are functions for setting them.
|}

Here are some guidelines for designing/naming templates...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Templates should be in correct case[/color]
| Portability
| Composr development +
| Composr development mode
| All template file names should be upper case, except for CSS and JavaScript files which should always be in lower case. Case sensitive file systems mean we want a strong convention. There may be a few exceptions, particularly CSS and JavaScript templates are all lower case.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Included CSS and JavaScript templates should start with an underscore
| Consistency
| Composr development +
| Manually
| This makes it clear which templates are includes. Note we don't have this convention for other kinds of template, as sometimes they may serve both as standalone and be included into other templates.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use [tt]_SCREEN[/tt] templates
| Consistent UI, themeing
| Composr development +
| Composr development mode
| All screens should ultimately be wrapped with some kind of template suffixed [tt]_SCREEN[/tt] that includes a [tt]{TITLE}[/tt]. This might be a standard screen template that already exists, such as [tt]INDEX_SCREEN[/tt] or it might be custom one such as [tt]DOWNLOAD_SCREEN[/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Implement screen previews for new templates and maintain them with template changes
| Testability
| Product development only
| Automated test ([tt]template_previews.php[/tt])
| Previews allow themers to confirm a theme works on all screens, and allow us to do mass-checks of HTML.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use filename prefixes to group templates[/color]
| Usability for webmasters
| Composr development +
| Manually
| For example, the download addon's templates mostly start [tt]DOWNLOAD_[/tt]. There's no strict rule, be sensible.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Prefix templates used by blocks with [tt]BLOCK_[/tt][/color]
| Easy to relate templates to features
| Composr development +
| Manually
| Do this unless the template is also used by a module too.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Prefix mail templates (Comcode) with [tt]MAIL_[/tt][/color]
| Easy to relate templates to features
| Composr development +
| Manually
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Suffix other templates that are Comcode with [tt]_FCOMCODE[/tt][/color]
| Easy to relate templates to features
| Composr development +
| Manually
| Any template that is for Comcode must contain the filename substring [tt]_MAIL[/tt] or [tt]_FCOMCODE[/tt]. Any template named like this must be in Comcode format.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Store templates in the correct directory[/color]
| Consistency
| Composr development +
| Manually
| XML and text (including Comcode) templates must be in their respective directories.
|}

Here are some specific templates to use where appropriate...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]MAP_TABLE[/tt][/color]
| Consistent UI
| Composr development +
| Manually
| A part of a screen that is for viewing title/value data in a table. There are also some functions to help with map tables.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]COLUMNED_TABLE[/tt][/color]
| Consistent UI
| Composr development +
| Manually
| Templates for rendering a plain table of something.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]INDEX_SCREEN[/tt] / [tt]INDEX_SCREEN_ENTRY[/tt][/color]
| Consistent UI
| Composr development +
| Manually
| A screen having a shortish paragraphed sequence of things to choose.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]INDEX_SCREEN_FANCIER_SCREEN[/tt] / [tt]INDEX_SCREEN_FANCIER_ENTRY[/tt][/color]
| Consistent UI
| Composr development +
| Manually
| A screen having a shortish tabled/described list of things to choose.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]CONFIRM_SCREEN[/tt][/color]
| Consistent UI
| Composr development +
| Manually
| Show a preview and confirm it's okay.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]PAGINATION_*[/tt][/color]
| Consistent UI
| Composr development +
| Manually
| Very simple browsing through multiple screens. Usually you'll want to use pagination instead.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]SCREEN_BUTTON[/tt] / [tt]SCREEN_ITEM_BUTTON[/tt][/color]
| Consistent UI
| Composr development +
| Manually
| Show a standard shaped button on the screen.
|}

Here are some specific interfaces to use where appropriate...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]pagination[/tt] function[/color]
| Consistent UI
| Composr development +
| Manually
| An interface for pagination.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]...[tt]results_table[/tt] function[/color]
| Consistent UI
| Composr development +
| Manually
| An interface for pagination of a table.
|}

When showing errors use inform / error messaging APIs / conventions, correctly. There are 6 top-level kinds of messaging output...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Where appropriate, access-denied screens[/color]
| Consistent UI, usability
| Composr development +
| Manually
| Use the [tt]access_denied[/tt] function as appropriate. It can be passed a language code, or a string. For Composr development, it should be a language code, so that the logs may be internationalised.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Where appropriate, Fatal/Warn/Inform exit/screen[/color]
| Consistent UI, usability
| Composr development +
| Manually
| For full-screen messaging. Use the [tt]whatever_screen[/tt] or [tt]whatever_exit[/tt] function. Specify the appropriate [tt]$type[/tt] of the message.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Where appropriate, Fatal/Warn/Inform attached message[/color]
| Consistent UI, usability
| Composr development +
| Manually
| For response-embedded messaging where the code isn't failing per-se, but it's more like a predictable messaging situation occurred. Use the [tt]attach_message[/tt] function for this. Specify the appropriate [tt]$type[/tt] of the message. Logging is optional.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Where appropriate, trigger a PHP-level error[/color]
| Consistent UI, usability
| Composr development +
| Manually
| For response-embedded messaging of something that really is a kind of unexpected failure. Use the [tt]trigger_error[/tt] function for this. Ultimately Composr will also call [tt]attach_message[/tt], and log the error.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Where appropriate, include the [tt]WARNING_BOX[/tt] template[/color]
| Consistent UI, usability
| Composr development +
| Manually
| Places an on-screen warning about the action or content that a screen is providing. More contextualised than [tt]attach_message[/tt] but requires a predetermined place for it within the template you're embedding into.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Where appropriate, inline errors[/color]
| Consistent UI, usability
| Composr development +
| Manually
| Use one of the standard CSS classes, such as [tt]nothing-here[/tt] or [tt]red-alert[/tt] or [tt]inline-wip-message[/tt] to mark the error using standard Composr styles. Generally this logic will be performed deep within templates or when a block has to terminate with a clean error.
|}

Specific guidance for input forms...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use [tt]FORM_SCREEN[/tt] for forms[/color]
| Consistent UI, usability
| Composr development +
| Manually
| Use a standard form template such as [tt]FORM_SCREEN[/tt] (most cases) or [tt]FORM[/tt] (if the form is just part of a complex screen). These templates provide automatic client-side field validation; server-side field validation is provided automatically also, via the standard field retrieval functions (e.g. [tt]post_param_string[/tt]).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the form field API to generate input fields[/color]
| Consistent UI, usability
| Composr development +
| Manually
| Use our most appropriate standard input field types (e.g. [tt]form_input_integer[/tt]), or creating a new type if you have a special case.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the standard method to split up large forms[/color]
| Consistent UI, usability
| Composr development +
| Manually
| Split complex forms into groups by using the [tt]FORM_SCREEN_FIELD_SPACER[/tt] template to separate them. Hide groups of advanced functionality that is not often needed (often this functionality can fit nearly into a single "Advanced" group).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the standard method for showing groups of alternative fields[/color]
| Consistent UI, usability
| Composr development +
| Manually
| Use the [tt]alternate_fields_set__start[/tt] system to mark alternative fields (i.e. the case where users may enter something in a field, or something in a different field, but never in both fields). Look at examples in existing code to see how it works.
|}

[title="4"]Blocks[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
List block parameters
| Usability for webmasters
| Product development only
| Automated test ([tt]blocks.php[/tt])
| Define all block parameters in the block code itself (in the [tt]info[/tt] function for the block) then document all block parameters via inserting the language strings in language files for the addon the block is a part of (see how it's done for existing blocks for examples).
|}

[title="3"]Front-end programming[/title]

[title="4"]Spelling/grammar/lexicon[/title]

(examples of what not to do are in [i]italics[/i])

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't assume English[/color]
| Internationalisation
| Product development only
| Manually
| Don't hard-code English text into your code, unless it is only designed for programmers to ever see.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"][i]Do Not Capitalise words just for the Effect[/i][/color]
| Usability
| Composr development +
| Manually
| Capitalisation is for proper nouns (e.g. Charlie or Microsoft, but not box), for new sentences, or sometimes for sentence-like standalone phrases. We do not generally capitalise things for effect, e.g. "Add News".
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Check readability from an outsider's perspective[/color]
| Usability
| Composr development +
| Manually
| Triple check everything you write to make sure it is completely clear, as concise as reasonably possible, and cannot be misinterpreted.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Where appropriate use attractive HTML entities, not just ASCII[/color]
| Usability
| Product development only
| Manually
| Use HTML entities where possible, in particular [tt]ndash[/tt], [tt]mdash[/tt], [tt]hellip[/tt], [tt]ldquo[/tt], [tt]rdquo[/tt], [tt]lsquo[/tt] and [tt]lrquo[/tt]. These make the output that much nicer, and grammatically more correct (doing [tt] - [/tt] instead of [tt] &ndash; [/tt] is technically wrong, as a hyphen is not a dash).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use terminology with consistency
| Usability
| Product development only
| Automated test ([tt]lang_spelling.php[/tt])
| Apply consistency to your terminology. Sometimes multi-word proper nouns are given hyphens (e.g. "multi-word"), sometimes concatenation is used (e.g. "multiword"), sometimes abbreviation is used by just using the first letters placed together as capitals (e.g. "MW"), and sometimes each word is given in capitals (e.g. "Multi Word"). All this inconsistency is ingrained in English, but for any single term, reference it in a uniform way. We do not usually use the antiquated form of abbreviations using dots (e.g. "M.W.").
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't pollute [tt]global.ini[/tt][/color]
| Technical debt
| Product development only
| Manually, Automated test to limit [tt].ini[/tt] file size ([tt]lang_ini_size.php[/tt])
| If phrases are not general to the rest of Composr, then put them in a language file that can be individually included by a module.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Most lang strings support HTML, some do not: be aware
| Stability
| Product development only
| Automated test ([tt]lang_html_safe.php[/tt])
| You may assume language strings can contain HTML. There are only a few exceptions where this is not true. Theoretically the burden usually lies on code removing HTML formatting that is there and can't be used, rather than the other-way-around. Practically, there are some cases where HTML entities are allowed but not HTML tags (e.g. if a language string is used for a [tt]title[/tt] attribute), and you will just need to use your judgement and test if you change an existing language string to include HTML tags. The flip-side to HTML being allowed is that you must encode things like the ampersand symbol as entities.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Minimise adding new language strings[/color]
| Internationalisation
| Product development only
| Manually
| Try to reuse strings as much as possible. Don't add new strings unless it is an improvement, as they need to be translated into potentially dozens of languages. To facilitate this, phrases should be made as general as reasonable... i.e. avoid using context where possible (e.g. use [tt]Added entry {1}[/tt] rather than [tt]Added download {1}[/tt]). Don't do this if it creates a usability problem though.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't use the name "Composr", use the phrase "the software"
| Debranding
| Product development only
| Automated test ([tt]lang_spelling.php[/tt])
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use [tt]<kbd>[/tt] within language strings as appropriate[/color]
| Usability
| Product development only
| Manually
| Use this for something typed, or for code.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use our standard terminology[/color]
| Consistent UI
| Product development only
| Manually
| Use correct terminology like 'Codename', 'Option', 'Title', 'Description'.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
End form field descriptions with a full stop
| Consistent UI
| Product development only
| Composr development mode
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Encode pluralisation in language strings
| Usability
| Composr development +
| Automated test ([tt]lang_misc.php[/tt])
| Use the [tt]There are {1} {1|thing|things}[/tt] syntax to use the correct word pluralisation form depending on if the language string parameter is a singular number or not.
Non-English languages may invent their own syntax, which is outside the scope of these coding standards.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Encode article+noun vowel rule correctly in language strings
| Usability
| Composr development +
| Automated test ([tt]lang_misc.php[/tt])
| Use the [tt]{1|A|An} {1}[/tt] syntax to use the correct article word depending on if the language string parameter starts with a vowel or not.
Non-English languages may invent their own syntax, which is outside the scope of these coding standards.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use Oxford Commas[/color]
| Usability
| Product development only
| Manually
| Use the [url="Oxford Comma"]https://en.wikipedia.org/wiki/Serial_comma[/url].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Define administrative split
| Internationalisation: ease of
| Product development only
| Automated test ([tt]lang_administrative_split.php[/tt])
| The [tt]sources_custom/string_scan.php[/tt] lists which language strings are and are not administrative. This is done so that translation can be focused on the non-administrative strings only.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't define binary options in negative terms
| Usability
| Composr development +
| Manually
| Do not create an option such as "Disable widgets". It is unnecessarily confusing because you can just make an option "Enable widgets" that defaults to on. This coding standard applies universally across the product, including configuration options, form fields, and code. The only exception is hidden configuration options, which are often set to '1' to disable something.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Do not use problematic language
| Social equity
| Composr development +
| Manually
| Instead of saying "blacklist", say "blocklist" or "exclusion-list" or "deny-list". Instead of saying "whitelist", say "safelist" or "inclusion-list" or "allow-list". This is to reduce subconcious suggestion that black=bad and white=good.
|}

Respect the Queen of England ;), but also do not confuse Americans...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not use American spellings such as [i]color[/i] or [i]center[/i] or [i]license[/i][/color]
| Consistent UI
| Product development only
| Manually, Automated test in [tt]verbose[/tt] mode ([tt]lang_spelling.php[/tt])
| Composr originates from the UK. We have special processing to support American English automatically. We only allow American spellings in a code-context, but this exemption also stops us automatically scanning for violations.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use British English standard for mixing periods and parentheses[/color]
| Consistent UI
| Product development only
| Manually
| Periods and parentheses mix so that the period follows the closing parenthesis. For example: example (example).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Say "tick (check)" rather than just "tick" or just "check"
| Internationalisation
| Product development only
| Automated test ([tt]lang_spelling.php[/tt])
| The word "tick" in British English is "check" in American English (referring to the square 'tickbox'/'checkbox' on HTML forms). Due to this disparity, write both like "tick (check)".
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use American-friendly bracket terminology[/color]
| Consistent UI
| Product development only
| Manually
| Brackets in US English typically means square brackets, or sometimes some unspecified type of bracketing, while in British English it means parentheses. Parenthesis/parentheses is a word valid in both UK and US English. Therefore never use the word "bracket" when specifically referring to parentheses.
|}

Language for submit buttons...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]For an add button, use the title text ("Add xxx")[/color]
| Consistent UI
| Product development only
| Manually
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
For an edit button, use the language string [tt]SAVE[/tt] ("Save")
| Consistent UI
| Product development only
| Manually
| Only use the language string [tt]EDIT[/tt] ("Edit") when you are distinguishing it against the language string [tt]DELETE[/tt] ("Delete").
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
For a delete button use the language string [tt]DELETE[/tt] ("Delete")
| Consistent UI
| Product development only
| Manually
| Usually these are actually ticks for an edit screen, but sometimes we do have them. If it's more of a removal than a deletion, the language string [tt]REMOVE[/tt] ("Remove").
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
For an intermediary button, use the language string [tt]PROCEED[/tt] ("Proceed")
| Consistent UI
| Product development only
| Manually
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
For sorting, use the language string [tt]SORT[/tt] ("Sort")
| Consistent UI
| Product development only
| Manually
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use [tt]CHANGE[/tt] and [tt]PER_PAGE[/tt] where appropriate
| Consistent UI
| Product development only
| Manually
| For changing the number of items shown, use the language string [tt]CHANGE[/tt] ("Change"), or use the language string [tt]PER_PAGE[/tt] ("Per page") if you are doing it as a sentence.
|}

[title="4"]Markup/Tempcode[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use tabs for HTML code[/color]
| Performance
| Product development only
| [tt].editorconfig[/tt] / Automated test ([tt]basic_code_formatting.php[/tt])
| HTML code (e.g. in templates) should be written using tab for indentations rather than spaces, unlike most other file types in Composr. This is to reduce page size slightly (while JavaScript and CSS is minified, HTML is not due to the overhead and risk of doing so).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Take into account that content may not all be filled in[/color]
| Usability for webmaster
| All development
| Manually
| Remember that if something may be blank (e.g. if it is possible for a field to not be filled in, or for there to be no entries in a list) you need to accommodate for that possibility. Sometimes no changes are required, but often if there are headings or boxes used to contain it then you'll want to wrap around the [tt]IF_NON_EMPTY[/tt] directive so as to avoid empty headings/boxes. For example to stop an empty paragraph element producing an accessibility problem when [tt]SOMETHING[/tt] is blank, guard it with [tt]IF_NON_EMPTY[/tt] as follows:
[code="Tempcode"]
{+START,IF_NON_EMPTY,{SOMETHING}}
	<p>{SOMETHING*}</p>
{+END}
[/code]
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Make templates beautiful[/color]
| Technical debt
| Product development only
| Manually
| Indent Tempcode HTML neatly. Each multi-line Tempcode directive or HTML tag should have its contents indented an extra level. Indentation is for the purposes of people reading/modifying the templates, not the final HTML, so indent with this in mind (i.e. Tempcode indenting is fine even though it'll make the final HTML look messier). The browser DOM inspector is how people view outputted HTML nowadays and that does its own automatic indentation.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Align Tempcode-guarded parameters consistently[/color]
| Consistency
| Product development only
| Manually
| We write code like:
[code="HTML"]
<div {+START,IF,{FOO}} foo="bar"{+END} a="b"{+START,IF_PASSED,A} x="y"{+END}>Example</div>
[/code]
Note how the space for the attribute comes at the start of the inside of the Tempcode directive. Note also for the first attribute we also have an additional leading space, so that IDE syntax highlighting works well.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use the Tempcode escaping syntax correctly
| Security
| All development
| ocProducts PHP version
| For example, if you are outputting a textual parameter, make sure to reference it as [tt]{PARAM*}[/tt] rather than just [tt]{PARAM}[/tt]. Give big thought to this if you are outputting the variable into JavaScript code: usually you'll want to use the [tt]%[/tt] escaper which locks down data very tightly.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Meet WCAG (Web Content Accessibility Guidelines) and {$IS_MAINTAINED,standard_accessibility,ATAG}
| Accessibility
| Composr development +
| Automated test ([tt]template_previews.php[/tt])
| Meet WCAG (Web Content Accessibility Guidelines) 1 level 3, and WCAG 2 (read them!). Write semantic markup. Always use the [tt]<p>[/tt] element to mark true paragraphs if they are not alone in a table cell, and if they are always going to be just one single paragraph. Images should not be wrapped in paragraphs. Short lines may be wrapped in paragraphs as/if you wish.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
No deprecated tags or attributes
| Accessibility
| Composr development +
| Automated test ([tt]template_previews.php[/tt])
| Meet WCAG (Web Content Accessibility Guidelines) 1 level 3, and WCAG 2 (read them!). Write semantic markup. Always use the [tt]<p>[/tt] element to mark true paragraphs if they are not alone in a table cell, and if they are always going to be just one single paragraph. Images should not be wrapped in paragraphs. Short lines may be wrapped in paragraphs as/if you wish.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Write to XHTML5
| Accessibility
| Product development only
| Firefox HTML validator extension / Automated test ([tt]template_previews.php[/tt])
| We don't actually output XHTML mime-type, or write JavaScript as XHTML-compatible, but we do have the actual markup be XHTML-compatible for better readability and tooling-parsability.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't make assumptions about word order by coding things like [tt]{!GO} {!HERE}[/tt][/color]
| Internationalisation
| Product development only
| Manually
| Word order in languages may vary.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't use native language directly in templates or PHP code[/color]
| Internationalisation
| Product development only
| Manually
| However, colons and so forth may be used in templates in a visual way (even though strictly it is an Englishism).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Avoid the [tt]style[/tt] attribute ("inline styles")
| Technical debt
| Product development only
| Automated test ([tt]template_previews.php[/tt])
| Don't use the HTML style attribute except where you need to pass in styles contingent on template parameters.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Make links accessible
| Accessibility
| Composr development +
| Manually
| Any important link (i.e. a link that isn't just duplicating another) must be distinguishable by the contents of that link. Title attributes are not enough because Composr may turn those into JavaScript driven tooltips, which won't automatically come up in the normal link-cycling process a screen-reader will go through. In particular if you have a link around an image, make sure that image has alt-text that describes the link (not the image).
Links should also be distinguished from one another, and you may use the title attribute to do this if you want (as the screen-reader's initial list of links should be able to include that properly, even if we later remove that attribute).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Only forcibly open up links in new windows in certain conditions[/color]
| Accessibility
| Product development only
| Manually
| Only forcibly open up links in new windows in these conditions:
 - The action is strictly auxiliary to an ongoing action (e.g. opening up documentation to read while performing the action, or opening a small pop-up window)
 - An ongoing action is being performed that will spawn many followup actions that are not going to flow in sequence
 - It is a link to an external website on the main website placed in a prominent position (e.g. link to RSS news story)
To be clear, do not forcibly open up links in these conditions (or any other not mentioned above):
 - When it's a link to an external site not in a prominent position on the main website
 - The action is arguably auxiliary but often may not be
 - When moving between non-strongly related resources (e.g. clicking on a username in the forum-view)
Do not provide a choice of "open in new-window" and "open in same-window" links to the user -- their web browser already gives them this choice.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use [tt]{!LINK_NEW_WINDOW}[/tt]
| Accessibility
| Composr development +
| Automated test ([tt]template_previews.php[/tt])
| When links are sent to new windows, remember to use [tt]{!LINK_NEW_WINDOW}[/tt] in the link title attribute. The purpose of the link should precede [tt]{!LINK_NEW_WINDOW}[/tt], so that the link title makes sense when read out alone.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't use tooltips for critical information[/color]
| Mobile, Compatibility with user computers
| Composr development +
| Manually
| Touch screen devices can't see them.
|}

Guidance for tables...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't use layout tables[/color]
| Accessibility
| Composr development +
| Manually
| If you are showing tabular data -- e.g. a map table or a columned table, it's always correct to use a table -- if it can have sensible [tt]th[/tt] tags, it's a proper table.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the [tt]results-table[/tt] CSS class on most tables[/color]
| Consistent UI
| Composr development +
| Manually
| [tt]standard_border[/tt] is formalised for other kinds of "Map table" or "Columned table", or just about any other kind of table.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use the [tt]th[/tt] tag properly, and also [tt]thead[/tt] / [tt]tbody[/tt][/color]
| Accessibility
| Composr development +
| Manually
| Use the [tt]th[/tt] tag to define headers. If you have a case where there are top-level and secondary-level headers, put the top-level header in [tt]thead[/tt] and also make use of [tt]tbody[/tt].
|}

Guidance for form autocomplete...
{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Never use [tt][autocomplete="off"][/tt][/color]
| Accessibility
| Composr development +
| Manually
| Browsers don't respect [tt][autocomplete="off"][/tt] and it breaks auto-refill upon clicking back. Use the special/invalid value [tt][autocomplete="autocomplete-disabled"][/tt] instead, it prevents autofill in most cases.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use standardised field [tt][name][/tt]s when autofill is desired
| Consistent UI
| Composr development +
| Manually
| We standardise around these autofill-able field [tt][name][/tt]s: [tt]username[/tt], [tt]password[/tt], [tt]email[/tt], [tt]firstname[/tt], [tt]lastname[/tt], [tt]name[/tt], [tt]birthday[/tt], [tt]address1[/tt], [tt]city[/tt], [tt]state[/tt], [tt]postalcode[/tt], [tt]country[/tt], [tt]phone[/tt], and [tt]email[/tt]. These are the field names most reliably supported for autofill and the [tt]form_templates.php[/tt] API will provide the appropriate [tt]autocomplete[/tt] attribute value for them automatically.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Avoid standardised field names to prevent autofill[/color]
| Consistent UI
| Composr development +
| Manually
| Avoid the field names mentioned in the row above when autofill is undesirable. For example: avoid any field named [tt]'name'[/tt] unless it really is a human name; consider [tt]'title'[/tt].
|}

[title="4"][acronym="Cascading Style Sheets"]CSS[/acronym] and JavaScript[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use comment encapsulation
| Tooling: syntax highlighting
| Product development only
| Automated test ([tt]comment_encapsulation.php[/tt])
| Tempcode directives should use comment encapsulation so that syntax highlighting in text editors works.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[tt]kebab-case[/tt] should be used for CSS ID and class names
| Consistency
| Composr development +
| Manually
| IDs should use kebab-case EXCEPT when mirroring (or closely mirroring) a name attribute.
|}

[title="4"][acronym="Cascading Style Sheets"]CSS[/acronym][/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Follow naming and layout standards[/color]
| Consistency
| Product development only
| Manually
| Use the same bracing style, use of quotes, and way of layout out attributes, as existing CSS code broadly is using. The way we do it is very mainstream.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use hyphens to split words[/color]
| Consistency
| Product development only
| Manually
| By mainstream contention we use hyphens to split words, not underscores or camelCase.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use tabs for CSS code[/color]
| Consistency
| Product development only
| [tt].editorconfig[/tt] / Automated test ([tt]basic_code_formatting.php[/tt])
| To keep things tidy we use tabs for indentation rather than spaces.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Keep CSS minimal and simple[/color]
| Technical debt, performance
| Composr development +
| Manually
| The key to writing good CSS is understanding. Understand your way through how browsers render CSS, and the quirks of particular browsers. Never ever write CSS by adding or hacking with properties until it works.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use reliable CSS
| Compatibility with user computers, Standards compliance
| Product development only
| Automated test ([tt]template_previews.php[/tt])
| Only use standards-compliant CSS that works across all supported browsers. Test on all [page="_SEARCH:tut_browsers"]the browsers that we support[/page].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Avoid setting heights[/color]
| Accessibility
| All development
| Manually
| If you set heights then if people increase their font size (or a translation uses longer/more words) then it's likely text will overflow and look awful. There's rarely a true reason to set a height anyway: if you need to clear floats use [tt]float-surrounder[/tt] (described elsewhere in this document). You can also sometimes make use of [tt]min-height[/tt] to meet certain constraints.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]If possible avoid setting dimensions[/color]
| Stability, themeing, internationalisation
| All development
| Manually
| Do not assign widths or heights or min-widths or min-heights unless
necessary (e.g. to make sure you align with a background's size). It makes it very hard to adapt designs later if the spacings change and it makes pixel-level browser bugs cause larger problems.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]If you mix percentages and pixels, use [tt]box-sizing[/tt][/color]
| Themeing
| All development
| Manually
| An element with [tt]100%[/tt] width and [tt]2px[/tt] padding will actually use more than 100% of the available space. Don't hack around this problem by setting percentages to be slightly smaller: instead use [tt]box-sizing: border-box[/tt] to change this behaviour to what you'd expect).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Extra CSS files should only define specific stylings[/color]
| Stability
| All development
| Manually
| CSS defined outside [tt]global.css[/tt] and [tt]nocache.css[/tt] must not have wide-sweeping effects (it must be modular and target specific elements that would not normally exist on arbitrary screens).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not float everything[/color]
| Stability
| Product development only
| Manually
| Do not use floats unless doing it to make stuff sit next to something else.
Do not float stuff just to make it not overlap with another float.
Use a [tt]float-surrounder[/tt] CSS class like Composr does (i.e. [tt]overflow: hidden[/tt]) around stuff that is floated and what it is floated next to, to contain them without affecting other content. It is a much better stable solution. The only exception is when positioned CSS layers are present, in which case use our [tt]clearfix[/tt] CSS class.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not use a CSS reset or overly-broad rules[/color]
| Themeing
| All development
| Manually
| Do not use a CSS reset (e.g. [tt]* { margin: 0; padding: 0 }[/tt]): Composr does not use a CSS reset in its default templates so you would need to re-theme all Composr screens to re-apply default spacings if you used a CSS reset. If you must use a CSS reset then it will need adjusting to be scoped beneath a particular position(s) in the DOM tree.

Similarly, don't apply overly-broad styles thinking you'll undo them for any case that does not match -- any broadly defined style must be a very general one, because you won't want to add dozens of exceptions back in to cater for the pre-coded HTML usage that Composr has in its myriad of templates.

A common example broad styling you should avoid is removing all bullets and spacings from default lists.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use meaningful naming for CSS classes[/color]
| Technical debt
| Product development only
| Manually
| Name CSS classes according to what they are for and not what they do (e.g. [tt]big_and_red_page_icon[/tt] is a terrible name, but [tt]warning_icon[/tt] is a good one).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't use the [tt]clear[/tt] property[/color]
| Themeing
| Product development only
| Manually
| We know this is a very common technique, but we don't use it in Composr. Instead, wrap all your floats inside...
[code="HTML"]
<div class="clearfix">
    (floats)
</div>
[/code]
It works a lot better, is easier to understand, and the way our theme is built, it's necessary.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Put your CSS neatly into the most appropriate CSS file[/color]
| Consistency, performance
| Composr development +
| Manually
| Don't put all your code into [tt]global.css[/tt]. If you have lots of styles relating to a new feature, give a neat comment formatted exactly the same as other formats in the file.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't leave cruft lying around
| Technical debt, performance
| Composr development +
| Automated test ([tt]css_file.php[/tt]), or Firefox "Dustme selectors" addon
| Don't leave old unused styles in the CSS files.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Don't break the Theme Wizard
| Themeing
| Product development only
| Automated test ([tt]missing_colour_equations.php[/tt])
| If colours are added to the CSS then a proper Theme Wizard colour equation should also be added (see how it works for other colours for examples). The best thing to do is usually to re-use an existing colour definition -- not only does that make the colour palette consistent, it stops you needing to calculate a new equation. We made our calculations using Photoshop, by adding white/black layers above the [tt]seed[/tt] color and adjusting its opacity.
[tt]/*{$,hardcoded_ok}*/[/tt] may be put next to a colour for very rare exceptions.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Never allow default border colours[/color]
| Themeing: the Theme Wizard needs to keep working
| Product development only
| Manually
| The default border colour is black, which doesn't look great on our default theme, but may look far worse on other themes. Always set a colour for borders and follow the above rule so that the Theme Wizard can set the colour. To find a border colour, just grab the code from an existing bit of CSS that performs a similar styling to what you want.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use relative font sizes
| Accessibility
| Product development only
| Automated test ([tt]web_resources.php[/tt])
| We want output to be easily scalable, so write sizes using [tt]em[/tt]. It's really easy: if you want something smaller, use something like [tt]0.85em[/tt] and something bigger like [tt]1.1em[/tt]. The advantage to scaling is a themer can easily knock the whole theme's font sizing up, and also it is possible to proportional down-scale content for embed contexts. There is a tool to convert the default theme to [tt]px[/tt] units for designers who prefer it (professional designers have good reason to want to do pixel-perfect designs).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Front-end designs should work responsively[/color]
| Mobile, Compatibility with user computers
| Composr development +
| Manually, Mobile Usability tests in Google Search Console
| 
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use [tt]BETA_CSS_PROPERTY[/tt] instead of vendor prefixing
| Future proofing
| Composr development +
| Automated test ([tt]css_beta.php[/tt])
| Rather than setting up multiple vendor prefixes for CSS properties that need them, use the [tt]{$BETA_CSS_PROPERTY,...}[/tt] symbol around just one normal call to the CSS property as it would ideally be written in the future. This allows PHP code to automatically add vendor prefixing and make dynamic modifications should there be some kind of standards change in the future. Don't mark stuff beta if it works unprefixed on all supported browsers.
|}

[title="4"]JavaScript[/title]

We broadly follow the same kind of conventions other JavaScript developers do, but with a focus on modern ways of doing things wherever possible.
JavaScript has been historically a very clunky language with a messy history of new innovations that get constantly recycled as the basic platform moves forward or developers fight over approaches. We've designed a framework that moves beyond all this as much as possible. Our framework is broadly post-jQuery (although we do have jQuery bundled for third-party code) and post-preprocessor (because JavaScript is more powerful on its own than it was in the past) and polyfill-charged.

You do not need to:
1) define jsdoc fully
2) minify scripts (Composr does it for you)
3) make third-party libraries meet our particular choice of standards (we trust third-party developers to have their own methods for ensuring standards are high) [exclude JavaScript libraries from automated testing by putting [tt]/*{$,parser hint: pure}*/[/tt] at the top of the file]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use reliable JavaScript
| Compatibility with user computers, Standards compliance
| Product development only
| Automated test ([tt]template_previews.php[/tt])
| Only use standards-compliant JavaScript that works across all supported browsers.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Follow framework standards[/color]
| Consistency
| Composr development +
| Manually
| The JavaScript framework defines a way of writing objects, hooking in functionality (via data attributes, views, and behaviors), naming variables, querying the DOM tree, and lots of other helper methods -- follow the existing standard of the code.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Code formatting[/color]
| Consistency
| Product development only
| Manually
| Generally code is formatted to ESLint-preferred standards, with spaces around operators, camelCase for identifiers rather than underscores, and we place function opening braces on the same line as the function declaration. For functions assigned to a variable we put a space between the function keyword and opening parenthesis ([tt]function (foo)[/tt]). Rather than us prescribing all the rules we bundle an ESLint configuration.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use of classes[/color]
| Technical debt
| Product development only
| Manually
| Generally JavaScript files should define at least one class (using the weird but de facto closure and construction mechanism). Class constructors should start with an upper case letter.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use polyfills[/color]
| Future proofing
| Composr development +
| Manually
| We want to align to future versions of JavaScript. If we want to benefit from future functionality then we typically will add a polyfill for that (loaded up in [tt]global.js[/tt]) rather than adding a compatibility layer in the framework or implementing an alternative. This allows us to easily remove the polyfill later when we can, and also let's us get better performance.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Do not use inline JavaScript
| Security
| Composr development +
| Automated test ([tt]template_previews.php[/tt])
| We use CSP to avoid XSS vulnerabilities, so inline JS is blocked.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Do not use synchronous XmlHttpRequest
| Standards compliance
| All development
| Browser errors in console
| Browsers are strongly advocating against using this for performance reasons, so we must use more sophisticated JavaScript-side form submit processing rather than traditional returning of [tt]false[/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Fix any strict warnings
| Standards compliance, future proofing
| Product development only
| JavaScript files should have [tt]use strict;[/tt] in, automated test ([tt]js_strict_mode.php[/tt])
| Ideally don't check things are defined just using a raw [tt]if[/tt] because it's not very clear. However, it is acceptable to do an [tt]if[/tt] that considers [tt]undefined[/tt]/[tt]null[/tt]/[tt]false[/tt] [i]values[/i] to be the same thing (a missing function parameter will be an [tt]undefined[/tt] [i]value[/i] on an actual variable). For referencing variables that don't just hold an [tt]undefined[/tt] value but really are undefined, do check them like [tt]object.foo == undefined[/tt] or [tt]object.foo === undefined[/tt] (if null shouldn't count). It is important to include the object (which may be [tt]window[/tt]), otherwise the strict mode will complain.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't use the browser [tt]window.alert[/tt] / [tt]window.prompt[/tt] / [tt]window.confirm[/tt] / [tt]window.showModalDialog[/tt] UIs -- use Composr's [tt]fauxmodal_*[/tt] APIs[/color]
| Usability
| Composr development +
| Manually (although if you try and call from the global scope the [tt]web_resources.php[/tt] test will complain)
| Better styling, no issues with pop-up blockers, no issues on full-screen UIs and tablets with poor window management.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Don't rely on [tt]window.focus[/tt] / [tt]window.print[/tt] / [tt]window.scrollTo[/tt] / [tt]window.scrollBy[/tt] / [tt]window.resizeTo[/tt] / [tt]window.resizeBy[/tt] / [tt]window.moveTo[/tt] / [tt]window.moveBy[/tt] existing[/color]
| Stability
| Composr development +
| Manually
| Pop-up blockers may remove this functionality, setting them to null. You must catch exceptions over the calls.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]It's written JavaScript not [tt]Javascript[/tt] or [tt]ECMAScript[/tt][/color]
| Standards compliance
| Product development only
| Manually
| A minor point, but if we capitalise our technology names incorrectly we look less professional. While JavaScript is standardised as ECMAScript, we all still call it JavaScript in practice.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Name DOM nodes variables as [tt]el[/tt] as appropriate[/color]
| Consistency
| Product development only
| Manually
| It is very common for JavaScript code to be manipulating a single DOM node. If we consistently call this [tt]el[/tt] then the code is easier to scan over.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use standard system for reading function parameters[/color]
| Consistency
| Product development only
| Manually
| JavaScript has no feature for default function parameters (they automatically default to [tt]undefined[/tt]). It also has no simple casting system. We therefore have implemented a standardised way of doing this within the library.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Reference language strings in a safe way
| Stability
| All development
| Automated test ([tt]js_lang_references.php[/tt])
| Any language strings that are not in either [tt]global.ini[/tt] or [tt]critical_error.ini[/tt] must be referenced using the full [tt]{!file:CODENAME}[/tt] syntax. This is because we cannot assume what language files have already been explicitly loaded before any individual JavaScript file is evaluated.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Do not reference global variables directly
| Stability
| Composr development +
| Automated test ([tt]web_resources.php[/tt])
| Reference global variables and functions that are defined outside any particular [tt].js[/tt] file by explicitly prefixing them with [tt]window.[/tt]. This allows the JavaScript code scanner to detect undeclared variables because there's no longer an ambiguity.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Do not omit semicolons
| Stability
| Product development only
| Automated test ([tt]web_resources.php[/tt])
| JavaScript allows semicolons to be omitted in certain cases, but we do not because of the potential for error.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use [tt]href="#!"[/tt] for JS-controlled links[/color]
| Stability
| Product development only
| Manually
| This is a special value used by Composr to indicate "prevent default" that you can make use of. There's a global listener for all clicks which finds such links and calls [tt]e.preventDefault()[/tt] so to not make the screen jump. [tt]href="#!"[/tt] is used because [tt]href="#"[/tt] could have valid uses like "jump to top".
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Make images relative[/color]
| Stability
| Product development only
| Automated test ([tt]js_standards.php[/tt])
| Calls to [tt]{$IMG}[/tt] must be wrapped with [tt]$util.srl()[/tt]. This is because they need to be turned from absolute URLs to relative URLs, just in case a JavaScript file is cached under HTTP but used under HTTPS (it would generate a security error).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use relative base URLs[/color]
| Stability
| Product development only
| Automated test ([tt]js_standards.php[/tt])
| Use the relative version of the base URL ([tt]$util.rel($cms.getBaseUrl())[/tt]), just in case a JavaScript file is cached under HTTP but used under HTTPS (it would generate a security error) -- or if the JavaScript is working across multiple domains (another potential security error). When Composr runs on multiple domains all URLs will work on all domains, with the exception of page URLs.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use relative script URLs[/color]
| Stability
| Product development only
| Manually
| Use [tt]{$FIND_SCRIPT_NOHTTP}[/tt] not [tt]{$FIND_SCRIPT}[/tt], just in case a JavaScript file is cached under HTTP but used under HTTPS (it would generate a security error) -- or if the JavaScript is working across multiple domains (another potential security error). When Composr runs on multiple domains all URLs will work on all domains, with the exception of page URLs.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not encode page-links directly in JavaScript files[/color]
| Stability
| Product development only
| Automated test ([tt]js_standards.php[/tt])
| Use of [tt]{$PAGE_LINK}[/tt] will encode [tt]keep_[/tt] parameters, including potential session IDs. It must therefore be passed into JavaScript via an HTML [tt]data-[/tt] attribute, or you must generate with the [tt]{$PAGE_LINK}[/tt] parameter to avoid [tt]keep_[/tt] parameters and manually attach them using [tt]$cms.keep()[/tt] (being very careful on whether the existing URL does or doesn't have a [tt]?[/tt] in already, which may vary by URL scheme).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not break bfcache[/color]
| Performance
| Composr development +
| Manually
| Do not use JavaScript [tt]beforeunload[/tt] and [tt]unload[/tt] events, as it will turn off the bfcache in browsers that support it (particularly Firefox).
|}

[title="4"]Images[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not refer to theme images directly by URL[/color]
| Themeing: the webmaster may change image mappings
| Product development only
| Manually
| Bundled images should be referred to via the theme image system, not by direct URL.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Usually use SVG (or PNG) files[/color]
| Performance
| Composr development +
| Manually, Automated test ([tt]svg_quality[/tt]
| Use SVG images in most cases, PNG images in rarer cases (e.g. avatars and emoticons), GIF when animation is needed (with a APNG versions too), or JPEG if there is zero chance of the image needing any transparency and never likely to be edited again (i.e. only use it at a post-development optimisation stage) and it compresses better as JPEG.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Specify image dimensions in markup/CSS[/color]
| Performance, stability
| Composr development +
| Manually
| You should not assume any image will be automatically placed by the web browser at some particular size. Explicitly set sizes using HTML [tt]width[/tt]/[tt]height[/tt] attributes or the CSS [tt]background-size[/tt] property. This both helps performance, and decouples the need for (auto-scalable) SVG files to be saved with a particular default size.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Organise theme images neatly[/color]
| Consistency
| Product development only
| Manually, Automated test ([tt]theme_images[/tt]
| Square theme images generally should be classified somewhere under the [tt]icons[/tt] theme image directory. All icons must be square. Generally try and keep a neat directory structure, rather than littering theme images at the top level.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Icons are multi-purpose[/color]
| Themeing
| Product development only
| Automated test ([tt]modularisation[/tt])
| You will likely create new icons for very specific purposes. However, icons (especially SVG icons) are also an excellent resource for webmasters to use in their designs (regardless of what addons they've installed). For this reason every icon must be packaged both for the specific addon it is associated with, and the general purpose [tt]all_icons[/tt] addon.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Compress images and strip gamma from PNG files
| Performance, compatibility
| Composr development +
| Automated test checks compression ratios ([tt]image_compression.php[/tt]), Automated test checks SVG quality ([tt]theme_images.php[/tt])
| Pass PNG images through a compression program such as PNGGauntlet or PNGThing, and strip gamma settings in the process (needed for colour compatibility on some browsers). Strip any unneeded code from SVG files.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use inlining correctly[/color]
| Performance
| Composr development +
| Manually
| If an image is referenced in the CSS and used very commonly, consider using [tt]{$IMG_INLINE,...}[/tt] so that it loads without any additional HTTP request.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Supply hi-dpi images as appropriate[/color]
| Performance
| Composr development +
| Manually
| Wherever appropriate use [tt].svg[/tt] images. If raster images must be used then supply both normal and hi-dpi ("retina") images. Do this using the HTML [tt]srcset[/tt] attribute.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Good contrast for icons[/color]
| Design quality
| Composr development +
| Manually
| Icons need to look good when laid over common pale and dark backgrounds, within reason.
|}

[title="3"]Miscellany[/title]

[title="4"]Testing[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Design tests first or write automated tests after[/color]
| Testability, technical debt
| Composr development +
| Manually
| Before writing any code, you could design/document the tests you are going to run to make sure your written code works. Think of how it might break under situations you might have otherwise forgotten about (e.g. what if a guest user is running your module) and add in tests to test that it doesn't break. Use your judgement.
|}

[title="4"]Documentation[/title]

If you make a Composr tutorial that doesn't meet the normal rules (e.g. a video tutorial), then you can still add it in. There's a feature on the compo.sr website to link it through.

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Provide documentation for new features[/color]
| Usability
| Product development only
| Manually
| After your code is written and tested make sure that the user documentation for Composr is updated (edit a [tt]tut_*[/tt] file in [tt]docs/pages/comcode_custom/EN[/tt], or create a new tutorial).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]List new features[/color]
| Communication
| Product development only
| Manually
| If you've added a non-trivial feature it will need to be added to the Composr website's feature-list eventually ([tt]composr_homesite_featuretray.php[/tt]), and also announced.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Provide addon screenshots
| Communication
| Composr development +
| Automated test ([tt]addon_screenshots.php[/tt])
| Every non-bundled addon that is non-development addon must have a screenshot in [tt]data_custom/images/addon_screenshots[/tt].
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use standardised navigation paths[/color]
| Communication: consistency
| Product development only
| Manually, Automated test ([tt]tutorial_nav_paths.php[/tt])
| Navigation paths should be a bit like breadcrumbs starting from the Admin Zone, e.g. "Admin Zone > Setup > Configuration" or "Admin Zone > Content > Downloads"; or breadcrumbs on the default menu written like "Content > Quizzes on the default menus". Don't describe the navigation paths using prose.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Update these standards[/color]
| Communication
| Product development only
| Manually
| If you have introduced a new coding standard make sure to update this document too!
|}

[title="4"]General guidelines[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Think of Composr as a whole, keep it consistent[/color]
| Consistency
| Product development only
| Manually
| For example, Chris once found that [tt]XMLHttpRequest[/tt] on Internet Explorer had a caching bug... so instead of just throwing in a solution to where it affected him, he considered the problem architecturally, making sure all AJAX-facing PHP scripts have a common approach to solving the problem. This kind of approach is essential.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Properly index 3rd-party code/APIs[/color]
| Legal, ethics, maintainability, communication, stability
| Product development only
| Manually
| If you include some third party code/API you must update:
 - [tt]docs/LICENSE.md[/tt] (this file is shown when users install)
 - [tt]sources_custom/third_party_code.php[/tt] (general list of files)
 - [tt]phpdoc.dist.xml[/tt] (if appropriate, PHPDoc generation)
 - [tt]data/maintenance_sheet.csv[/tt] (if appropriate, non-maintained systems)
 - [tt]data_custom/third_party_code.csv[/tt] (spreadsheet of SDKs/libraries used, except very tiny pieces of third-party code we've fully integrated)
 - [tt]data_custom/third_party_apis.csv[/tt] (spreadsheet of APIs used, except those covered by [tt]third_party_code.csv[/tt])
 - [tt].eslintignore[/tt] (files for ESLint to ignore)
 - [tt].phpcs[/tt] (files for PHP_CodeSniffer to ignore)

Some general advice regarding (re)integrating libraries:
 - When getting from GitHub, we generally use the latest 'Release' rather than latest clone, but it varies -- and the version number is whatever is given, even if fixes were made since it was changed
 - When running Composer to download dependencies: For the "No composer.json in current directory, do you want to use the one at" questions, answer 'N'
 - We don't try and force third party libraries to work with ocProducts PHP type strictness, instead we disable/reenable it around library calls
 - Often you'll need to open up [tt]_tests/index.php?id=unit_tests%2Fstandard_dir_files&debug=1[/tt] to generate [tt]index.html[/tt] and [tt].htaccess[/tt] files, as many projects do not ship these files
 - Run [tt]find some_dir -type f | sort[/tt] find the new file list for the [tt]addon_registry[/tt] hook
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Update maintenance sheet[/color]
| Communication
| Product development only
| Manually
| If you are making functionality that will be costly to maintain for some reason (e.g. dependency on third-parties, or fragile code) then it should either:
1) be added to [tt]maintenance_status.csv[/tt] for responsibility tracking (mandatory for bundled addons)
2) a Health Check hook (where an API key is involved)
3) an automated test (where no API key is involved)
4) have a [tt]FRAGILE[/tt] comment in the code (where automated testing is not possible)
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use text-based file formats[/color]
| Revision control
| Composr development +
| Manually
| Use text-based file formats rather than binary documents (like [tt]xlsx[/tt] or [tt]docx[/tt]). Revision management and global search and replace works much better with text files.
|}

[title="4"]Use of the Composr Git repository[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Use standardised commit messages
| So that the tracker and Git are bound together. Also so that typos don't generally happen in Git commit messages, given all the custom text is in the tracker issue.
| Composr development
| Git hooks
| The message for any commit on a stable branch must start with either "Fixed MANTIS-<tracker-ID>" or "Implementing MANTIS-<tracker-ID>" or "Implemented MANTIS-<tracker-ID>" or "Security fix for MANTIS-<tracker-ID>" or "New build" (for updating metadata files around a new release) or "Merge branch" (for a merge). Multiple commits may reference the same tracker issue. When doing a clone get the hooks working via [tt]git config core.hooksPath git-hooks; chmod +x git-hooks/*[/tt] (Linux/Mac OS -- perform whatever equivalent action for Windows). When fixing bugs you can use the "push bugfix" Admin Zone module to automatically create appropriate Git commits, tracker issues, and hotfixes. Note that this guideline does not apply for alpha branches, as commits tend to be more chaotic when major project reworkings are under way, and the commit log is also going to be under less scrutiny.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Granular commits[/color]
| Changelogs are auto-generated from Git history for new releases.
| Composr development
| Manually
| Any commit on a stable branch should fix one issue only (tip: [url="use the Git patch technique"]https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git[/url] if a file contains changes that should be made across multiple commits).
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Use temporary branches and commit regularly[/color]
| [list="1"]
[*] Entanglements occur when multiple developments are happening in parallel (changes to the same files), which is unavoidable when working over an extended period of time. The isolation capabilities of branches makes things much more manageable with only the small overhead of creating and merging these branches.
[*] Being able to make regular commits is useful for many reasons, but if it's not on a branch it looks like a messy chain of consciousness scattered within a wider sea of other work. The aforementioned reasons include getting backups, delineating (logging) clear steps within the development, and being able to share your progress with others at relatively stable stopping points.
[/list]
| Composr development
| Manually
| If working on something for extended periods of time (days or longer), use a Git branch for it. That branch may or may not be pushed upstream, this is your choice depending on whether collaboration is required while it is developed as a separate branch. By the way, it's your personal choice whether to use merge or rebase.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
Appropriate branch naming
| Consistency
| Composr development
| Automated test ([tt]sensible_git_branches[/tt])
| The current stable version branch should be in the {$STABLE_BRANCH_NAME} branch, and any other version branch should be in [tt]v<version-number>[/tt].
|}

[title="3"]Agency standards[/title]

{|
! Standard
! Reason
! Scope
! Test method
! Notes
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Do not use [tt]*_custom[/tt] dirs for code that will make it into Composr[/color]
| Ease of upgrading
| Projects
| Manually
| If you make some changes which are being merged back into Composr, put them where they will be in the final Composr. That will make large future upgrades easier.
It will also make patch upgrades harder, but for most client projects you'll be hand-patching only relevant fixes as fixing every minor issue is less of a concern than implementing and maintaining new features.
|-
| [size="0.8"]{$INC,cs_count,1})[/size]
[color="red"]Add new CSS/templates/images into the default theme [tt]*_custom[/tt] dirs[/color]
| Deployment, collaboration
| Projects
| Manually
| If you decide to switch themes, or preview from the Admin Zone, you want to know your functionality will still work.
|}
[/surround]

{$SET,tutorial_tags,Development,PHP,Development,CSS,JavaScript,expert}{$SET,tutorial_add_date,Jun 2017}{$SET,tutorial_summary,The programmer's guide for Composr development. Coding Standards.}[block]main_tutorial_rating[/block]
