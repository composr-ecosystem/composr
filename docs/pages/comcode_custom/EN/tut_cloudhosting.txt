[title sub="Written by Chris Graham (ocProducts)"]Composr Tutorial: Cloud-hosting for Composr[/title]

Composr has some excellent built-in support for hosting across multiple servers, i.e. cloud hosting.

In particular, Composr has the following cloud features:
 - Storage management:
  - Mount a single shared storage directory, and have Composr feed shared data through it
  - Syncing certain directories across all machines in a cloud (i.e. combining the benefits of a shared directory but with local latency)
 - Log routing:
  - Choice of (customisable on a per-log basis):
   - Syndication of individual log lines (as they come in) across all hosts (for easy access)
   - Routing of log lines to [concept]syslog[/concept]
   - Purely local storage
  - Clear indication of which host each log line (or error notification) comes from
 - Configurable system scheduler:
  - Designate one machine as the machine running the system scheduler, and others will just run a subset of the schedule necessary for maintaining the local host
 - [concept]RPC[/concept]:
  - Cache clearance operations will automatically run across all hosts

[box="A note of caution"]
[media float="right" thumb="0" framed="0"]data_custom/images/docs/remember.png[/media]
Deploying this requires some expertise, as you need to be familiar with system administration and setting up networks of machines (e.g. VMs, or maybe actual bare metal servers).
Be wary of any cloud hosting service that advertises automatic scaling of software, with you just installing it and not needing to know anything about database replication or storage management -- it's frankly not possible to do correctly.
The Composr cloud support is designed to work optimally based on the actual architecture needed for high performance scaling -- it's not magic, it's careful engineering.
[/box]

[contents]decimal,lower-alpha[/contents]

[title="2" sub="A foreword"]Comparison of Composr multi-server/cloud-integration mechanisms[/title]

Composr has many ways of connecting to other servers and systems, and it can get a little overwhelming. Here we provide a summary of the systems available in Composr, what they are for, and how they are used. This doesn't directly relate to this tutorial (these systems are generally documented elsewhere), but may help avoid some confusion.

{|
! Mechanism
! Type
! Purpose
! Usage
|-
| Cloud-FS
| File hosting
| Host a site across multiple servers, but make sure all files are accessible and updated between those servers (using various potential techniques). Allows scaling a website to handle unlimited usage. This is what this tutorial is covering.
| Configured using installation options, and either a Commandr command to initialise necessary file structures or doing it by hand
|-
| Git
| File hosting
| Used by developers to develop and test functionality (be it code, or web assets), prior to them going live. May be used for sharing code directly between developers, for deployment to staging servers, and also to deploy changes to multiple servers in parallel.
| Either by hand, or with the [tt]git_status[/tt] non-bundled addon
|-
| [acronym="Content Delivery Network"]CDN[/acronym]
| File hosting
| Allow web assets (images, JavaScript files, CSS files, fonts, etc) to be served from a machine closer to the user. Improves site speed by lowering latency for all the numerous asset files. Reduces cookie overhead.
| Configuration option, which specifies what CDNs can serve what asset files
|-
| [tt]cdn_transfer[/tt] hooks
| File hosting
| Developers may code these hooks to automatically transfer select file uploads to a CDN. Most CDNs will not need this as they will operate a "pull on demand" policy, but necessary if you are using a service not explicitly designed as a CDN (such as a photo hosting site, or a simple FTP server).
| Programming
|-
| Multi-site-networks
| Shared communities
| Composr can integrate with some common forum systems for handling members and topics. This includes having multiple different Composr sites integrating with a single forum system as a network with a shared community (shared forum and set of accounts).
| At installation
|-
| Shared installs
| Shared installs
| Shared installs may be used for a single Composr installation to power multiple websites, for demoing systems or simple site builder systems for example. It shares some of the implementation of Cloud-FS, as an abstraction for finding where files are to be stored (on the shared install, or an individual site).
| By developers (not supported)
|-
| Hybridauth
| Content syndication / Account integration
| The [tt]hybridauth[/tt] addon integrates with many social networks to allow pushing out content to those networks, account log in integration with those networks, and also bridging content from the networks to Atom feeds.
| XML configuration
|-
| LDAP
| Account integration
| LDAP can be used to integrate accounts with many common providers, such as Microsoft Active Directory.
| Configuration options
|-
| Data standards (push)
| Data bridging
| Formats such as RSS/Atom/iCalendar/WebDAV/JSON/CSV can be used to make data available to other systems. In general our policy is to use established standards for sharing data between systems.
| N/A
|-
| Data standards (pull)
| Data bridging
| Similarly to the above, established standards can be used to pull data into Composr in many cases. This includes oEmbed, for smart linking to external content.
| N/A
|-
| [tt]main_screen_actions[/tt] block
| Social sharing
| Sharing content to social networks (manually be members) can be achieved using this block. As a side-note, we also have default CPFs that can be deployed on your site so members can link out to their own social network accounts.
| Usage of block
|}

[title="2"]Requirements and limitations[/title]

Cloud hosting requirements have intentionally been kept very low. You will need to configure the architecture described in this tutorial. Other than that, your copy of PHP must not have the [tt]symlink[/tt], [tt]readlink[/tt] or [tt]stream_wrapper_register[/tt] functions disabled.

[title="3"]Geographic distribution of servers[/title]

Some people with very ambitious goals want to have multiple servers dotted around the world, able to operate in isolation to each other for maximum redundancy and performance. Priority-based geo-DNS resolution would be used for request routing.

Composr can not currently support this, as ID numbers would conflict if database servers are not kept in strict sync with each other. We hope in a future version we can make changes for it to be possible (see https://compo.sr/tracker/view.php?id=3147). 

[title="2"]Fundamental architecture and setup[/title]

[title="3"]Storage management with Cloud-FS[/title]

Composr provides [concept]Cloud-FS[/concept], which is a virtual filesystem that abstracts specialised handling/routing of different parts of the Composr file/directory structure. Cloud-FS is used both when Composr is supporting cloud hosting and supporting shared-code installs (not covered in this tutorial).

There are certain files you want to store locally on each host (particularly code files and other non-changing assets), and certain files you need to share between hosts (such as user data, or data edited from within the Admin Zone).
The files shared between hosts can be further subdivided into files that need to be low latency (such as custom Comcode pages that need to be quickly enumerated), and files that can be modest latency but always need to be there (like individual user uploads).

We term these 3 categories as:
 - [b][concept]Local file[/concept][/b]: Files stored individually on each host
 - Shared:
  - [b][concept]Propagated file[/concept][/b]: Files stored on each host but automatically kept in sync via a database queue
   - Fast
  - [b][concept]Remote file[/concept][/b]: Files stored on some kind of shared storage, like a [acronym="Network Attached Storage"]NAS[/acronym]/[acronym="Storage Area Network"]SAN[/acronym] or just storage on a shared server
   - Always up-to-date
   - No wasting space via duplication

Remote storage works with industry-standard filesystem mounting technology. The Installation Options editor has a [tt]remote_storage_directory[/tt] option that needs to configured to where you have mounted your shared storage. If defaults to a directory [tt]shared_storage[/tt], one level above Composr.
You may choose to mount some kind of remote storage using standard protocols such as NFS. There are also many [url="FUSE filesystems"]https://en.wikipedia.org/wiki/Filesystem_in_Userspace[/url], including implementations for mounting Amazon S3 storage.

Composr has inbuilt rules that specify what files should be treated in what ways.
If you are a programmer and for some reason you need to change the rules, you need to override the [tt]define_cloud_fs_bindings[/tt] function in [tt]cloud_fs.php[/tt].
The Cloud-FS implementation works via a set of PHP stream wrappers that encapsulate all I/O and directs it as necessary. Instead of [concept]native path[/concept]s, Cloud-FS uses [concept]Cloud-FS path[/concept]s.

[title="4"]Initial setup[/title]

Before remote storage can work naturally any directories/files under the scope of remote storage actually have to be moved under the configured [tt]remote_storage_directory[/tt]. Ideally the original directories/files that have been moved will also be symlinked, allowing code that is not written to support Cloud-FS to work without modification, and allowing things to work still if cloud mode is not turned on.

Fortunately there is a Commandr command to handle this, [tt]cloud_fs_initialise[/tt]. Run without arguments the command will tell you what Linux commands are needed to perform the necessary optimisations, or if run as [tt]cloud_fs_initialise -y[/tt] it will actually make the changes for you. The command is not automatically reversible, so use with care. The command should be run [i]before[/i] cloud mode is enabled: the symlinks created will allow things to work even if cloud mode is not running.

[title="4"]Third-party code[/title]

We cannot guarantee that all third-party code will work correctly with Cloud-FS. The biggest risk is code that tries to use [tt]shell_exec[/tt] to call non-PHP programs on files without the necessary considerations.

[title="3"]Creating hosts[/title]

It is up to you exactly how you want to create hosts. You may want to start with some standard VM image to clone out to create hosts, or just some kind of simple script to get things going. We have a [url="sample script"]https://gitlab.com/composr-foundation/composr-vm-init[/url].

We recommend using Git to deploy code and files (the [i]local[/i] and [i]propagated[/i] files). You can set up a central Git repository and clone the repository onto a host to activate it. Git is nice because you can pull in code changes quickly and easily using the non-bundled [tt]git_status[/tt] addon (the addon allows propagating a pull across hosts).

The Installation Options editor has a [tt]cloud_mode[/tt] option that needs to configured on each host. One host will be configured as [tt]primary[/tt] and the rest as [tt]replica[/tt] (this is similar to MySQL's database replication terminology, except we say [tt]primary[/tt] instead of [tt]source[/tt] for it to make more sense).

[title="4"]System scheduler[/title]

The system scheduler must be tied into Cron on each host, set up as you normally would.
The primary host is where most of the system scheduler code will be running, ensuring that there is no undesirable duplication across hosts.

[title="3"]Directing traffic[/title]

You need to set up some mechanism for traffic to be directed to different hosts. Common approaches include:
 - A reverse proxy server, configured to decide where to send traffic
 - Geo-based DNS
 - Round-robin DNS

Discussing these systems is outside the scope of this tutorial, but they are standard technologies.

You should configure so that any particular user is consistently directed to the same server within a single session. This allows you to manage sessions separately for each server.

[title="3"]Logging[/title]

All Composr log files except [tt]data_custom/errorlog.php[/tt] can be configured to route log data in different ways via [tt]TARGETS[/tt] set on the first line of the file itself. This would set all of them:
[code="Text"]
TARGETS: file, syslog, cloud
[/code]
The targets available are:
 - [tt]file[/tt]: save into this log file
 - [tt]syslog[/tt]: save into the [concept]syslog[/concept] facility (on Windows it's the Event Log); this is useful when managing large IT environments using standard tools
 - [tt]cloud[/tt]: synchronise all log files across the cloud, so each host has a complete log (only works if [tt]file[/tt] is also set); this is useful so long as you don't have huge numbers of cloud hosts

[tt]data_custom/errorlog.php[/tt] can be sent to syslog or the weblogs (web server's own logs) by setting the [tt]errorlog[/tt] installation option. It cannot be syndicated to the cloud because (a) PHP will write to the error log itself, outside of Composr's direct control (b) errors may happen before Composr can boot. In most cases we do include a lot of extra metadata in the log though.

[title="3"]Database[/title]

The Composr cloud hosting puts no specific requirements on how you choose to host your database.

[title="4"]Replication[/title]

You may wish to set up database replication. Replication allows scaling up your database performance by employing multiple servers, and also making sure database servers are hosted in close proximity to your web servers. There are other use cases for replication, such as backups, fail-over, or mirroring a database for remote access purposes -- but we will not be discussing them in this tutorial.

In Composr we use the modern terminology, having ‘Source’ and ‘Replica’ servers. ‘Source’ is where the writes happen, and ‘Replica’ is where the reads happen. Older terminology (still used by some software) uses the terms ‘Master’ and ‘Slave’. MariaDB actually uses ‘Primary’ and ‘Replica’.

This tutorial only covers specifics related to MySQL and MariaDB. Other database software generally has similar concepts.

Our [url="sample script"]https://gitlab.com/composr-foundation/composr-vm-init[/url] has some sample configuration code for setting up MySQL replication.

[title="5"]Limitations[/title]

Composr [url="does not support running across multiple data centers"]https://compo.sr/tracker/view.php?id=4717[/url] remote to each other. There is one reason for this: we make heavy use of [tt]auto_increment[/tt] IDs, which are guaranteed to quickly get into conflict.

[title="5"]Configuring in Composr[/title]

If you wish to use Source-Replica replication (i.e. where writes all go to a single Replica), change the [tt]db_site_host[/tt] and [tt]db_forums_host[/tt] (if set) values using [tt]http://yourbaseurl/config_editor.php[/tt] (or editing [tt]_config.php[/tt] by hand in a text editor) so that they contain a comma-separated list of host names. You may wish to use just two hosts (if you are configuring each Composr site to use a different database server explicitly), or lots of hosts if you want randomisation. The first host in the list must be the Source server. It is assumed that each server has equivalent credentials and database naming. Due to the Source server being a bottleneck, it will never be picked as a read-access server in the randomisation process.

If you use Replica-Replica replication, configure each site's [tt]db_site_host[/tt]/[tt]db_forums_host[/tt] to the specific database server you want that site to connect to.

It is advised to not set replication for the Composr [tt]sessions[/tt] table, as this is highly volatile. Instead you should remove any display of 'users online' from your templates because if you're at the point of replication there will be too many to list anyway (and Composr will have realised this and stopped showing it consistently in many cases, to stop performance issues).

[title="5"]Configuration dimensions[/title]

Replication isn’t simply something that is simply enabled or not, there are many wildly different configurations. Essentially, configuration various along the following dimensions:
 - Synchronization type
 - Replication topology
 - Replication format
 - Replication method
 - Location of database servers
Everything is a trade-off, but Composr has particular requirements/recommendations.

[title="5"]Synchronization type[/title]

There are 3 synchronization types (recommendation in bold):

{| 30%:70% wide
! Type
! Description
|-
| Asynchronous
| A write to a Source will be marked completed before it has been copied to any Replicas. The default.
|-
| Synchronous
| A write to a Source will not be completed until it has been copied to all Replicas. [i]Not supported on MySQL or MariaDB[/i].
|-
| [b]Semi-synchronous[/b]
| A write to a Source will not be completed until it has been copied to at least one Replica. Only available in MySQL 5.5+ with a plugin, MariaDB 10.2 with a plugin, or MariaDB 10.3.3+.
|}

Synchronous writes are much slower. They also are vexed by timeout lag if one of the Replica database servers becomes unavailable to the Source server (the timeout can be configured).

For the purposes of Composr you will need to configure semi-synchronous replication (we'd prefer synchronous, but it's not supported by MySQL/MariaDB). We need any database read call that happens after a database write call to have accurate data. Composr is coded to not require database writes to be particularly fast, as common writes on the front-end are performed after the page layout is sent to the user’s browser (where server configuration allows).

Pertinent options:
 - [tt]rpl_semi_sync_source_enabled[/tt] ([tt]rpl_semi_sync_master_enabled[/tt] for MySQL < 8.0.26 / MariaDB)
 - [tt]rpl_semi_sync_replica_enabled[/tt] ([tt]rpl_semi_sync_slave_enabled[/tt] for MySQL < 8.0.26 / MariaDB)
 - [tt]rpl_semi_sync_source_timeout[/tt] ([tt]rpl_semi_sync_master_timeout[/tt] for MySQL < 8.0.26 / MariaDB)

[title="5"]Replication topology[/title]

There are 2 main ways to configure your replication topology (recommendation in bold):

{| 30%:70% wide
! Topology
! Description
|-
| Source-Source
| You can write to all your database servers, and the writes are replicated out to every other database server.
Also known as: Multi-Master, Master-Master, Star, Multi Leader, Primary-Primary.
Not known as Multi-Source, because that is something entirely different in MySQL.
|-
| [b]Source-Replica[/b]
| You write only to the Source, but you read from a Replica.
Also known as: Single-Source, Slave-Slave, Single Leader, Primary-Replica.
|}

In truth you can configure any topology. In MySQL and MariaDB you configure servers to support replication from them, and you configure servers to replicate from any number of other servers. The topology you configure with this is up to you. For example, you could have one Source per data center.

Source-Source replication has the advantage of faster writes if you have servers hosted in different data centers. Source-Source replication has the disadvantage of failure if one or more Sources becomes unavailable to each other, causing at best timeouts or at worst inconsistencies. Inconsistencies could also happen because writes from different Sources are not guaranteed to be in the same order. Source-Source replication is also much more complex to configure and manage, exponentially so for larger numbers of Sources. Note that generally writes are not a bottleneck in terms of overall database load as they are simpler and far less numerous than often-complex read queries – but could be for huge community/eCommerce websites.

Given that Composr does not support hosting across multiple data centers (even with synchronous replication, sync lag with multiple Sources means critical conflicts can occur between [tt]auto_increment[/tt] IDs), we recommend Source-Replica replication.

You will note that Source-Source replication is particularly fraught. This is a big reason why MySQL Group Replication and MariaDB Galera Cluster exist. These products manage server interconnection with elegance, as well as helping with sharding and partitioning.

[title="5"]Replication format[/title]

There are 3 ways to configure the replication format (recommendation in bold):

{| 30%:70% wide
! Format
! Description
|-
| Statement Based
| SQL statements are what is synched across servers.
|-
| Row Based
| Actual row changes are what is synched across servers. The default.
|-
| [b]Mixed Based[/b]
| A combination of the above.
|}

Statement Based replication is not entirely reliable, as it wrongly assumes a query will always produce the same result on the same data. This is not true, particularly because there are functions, such as random number generation, that by design produce different outputs.

Row Based replication requires replicating additional data, is harder to debug, and has more scope for failure (due to it operating with exacting precision).

Mixed Based replication provides the best of both worlds, with the database software picking the appropriate format based on the complexities of the query. This is what we recommend for Composr.

Pertinent options:
 - [tt]binlog_format[/tt]

[title="5"]Replication method[/title]

There are 2 replication methods in MySQL (recommendation in bold):

{| 30%:70% wide
! Method
! Description
|-
| [b]Binary log[/b]
| Replication works from a sequenced log of actions. The binary log on the Source is copied incrementally as the relay log on the Replica.
|-
| GTID
| Replication also includes unique transaction IDs, to better keep track of actions (particularly useful when manually resolving conflicts).
|}

These are documented as separate things, but actually GTID overlays on top of the binary log. In MariaDB, GTID is always on.

Given Composr does not use transactions, the binary log method is fine. Disable GTID so that replication start positions are not determined by transaction IDs that may exist.

Pertinent options:
 - [tt]log_bin[/tt]
 - [tt]log_bin_basename[/tt]
 - [tt]relay_log[/tt]
 - [tt]gtid_mode[/tt]

[title="5"]Location of database servers[/title]

You need to consider whether your database servers are standalone or not (recommendation in bold):

{| 30%:70% wide
! Location
! Description
|-
| Standalone
| Servers are separate to the web server.
|-
| [b]On Web Server[/b]
| The web server hosts the database software also.
|}

If the database software is on the web server then queries will execute faster. Larger operations may want to separate them so that different engineers can be responsible for the separate architecture, so that hardware may be better tuned, or if code other than Composr accesses the database. Most operations will not really benefit from any separate though.
At the very least you need a very low (sub-millisecond) latency connection between web servers and database servers.

[title="5"]Limiting what tables are replicated[/title]

The MySQL [tt]CHANGE REPLICATION FILTER[/tt] query can limit what tables are replicated, as can starting MySQL with [tt]--replicate-wild-ignore-table=name[/tt]. As previously discussed, you should disable replication on the [tt]sessions[/tt] table.

[title="2"]Maintenance[/title]

[title="3"]Clearing caches[/title]

If you clear caches through the Cleanup Tools in the Admin Zone then this operation will automatically be synched across clients.

[title="3"]Updating files[/title]

The non-bundled [tt]git_status[/tt] addon allows pulling in changes made to all hosts.

[title="3"]Upgrading[/title]

Anyone using cloud hosting with Composr likely has more than a small number of customisations to the system, so upgrades would be considered part of a wider development process.

Generally upgrading would be performed in two parts:
1) Upgrade on a development machine and commit/push any file changes
2) Upgrade the cloud

Upgrading a development machine would be fairly straight forward, like any normal upgrade. Commit/push all the file changes into Git as any new development change set would be committed.

Upgrading the cloud is a bit trickier:
a) You will likely want to schedule some down time, then close the site during scheduled downtime.
b) You would use the [tt]git_status[/tt] addon to pull down any changes from Git.
c) The database upgrade step could be performed using the regular Composr upgrader, on the primary machine.
d) Caches can then be cleared.
e) Testing can then be performed
f) The site would then be re-opened

Sophisticated operations would have a staging cloud as well as a live cloud, so that an upgrade could be properly tested on the staging cloud first.

Very sophisticated operations may choose to develop custom upgrade scripts that completely bypass Composr's regular upgrade process to avoid down-time entirely.

[title="2"]Platform-specific notes[/title]

This section contain some very specific guidance for different platform(s) you may wish to use Composr with.

[title="3"]Amazon EC2[/title]

Composr does quite a lot of disk I/O when checking for installed files, etc (much more than a traditional hard-coded custom application would need to do).
Because of this we recommend using 'magnetic' rather than 'SSD' storage, because SSD storage on Amazon's infrastructure has extremely very low IOPS allowances (presumably so that their internal bandwidth is used for very-fast burst reads/writes from/to fast SSD rather than more regular reads/writes).

[concepts
 1_key="Syslog"             1_value="Operating system facility for managing logs in a consistent and centralised way"
 2_key="RPC"                2_value="Remote Procedure Call, used in Composr's case when an action on one host needs to trigger an action on all the others and orchestrated through a queue in the database"
 3_key="Local file"         3_value="A file that is not synched between hosts, i.e. one expected not to change like a source code file"
 4_key="Propagated file"    4_value="Our mode of automatic file sharing between hosts that works similarly to a system like Dropbox/Google Drive/ownCloud/etc"
 5_key="Remote file"        5_value="A file held on a networked mounted shared directory, e.g. a SAN or NAS"
 6_key="Cloud-FS"           6_value="The virtual filesystem used for handling synching of files between hosts in the optimal way for each file/directory"
 7_key="Cloud-FS path"      7_value="A Cloud-FS path uses a URL protocol handler (PHP stream wrapper), so that these paths are handled via Cloud-FS."
 8_key="Native path"        8_value="A normal filesystem path where Cloud-FS is not involved. Native paths are necessary for anything happening outside the scope of the PHP code."
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_webhosting"]Webhosting for Composr[/page]
 - [page="_SEARCH:tut_install_linux"]Installation on Linux[/page]
 - [page="_SEARCH:tut_performance"]Optimising Performance[/page]

{$SET,tutorial_tags,Webhosting,installer,Installation,expert}{$SET,tutorial_add_date,Nov 2021}{$SET,tutorial_summary,How Composr can operate with cloud hosting.}[block]main_tutorial_rating[/block]
