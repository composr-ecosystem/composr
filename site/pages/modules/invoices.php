<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    ecommerce
 */

/*
A note about currencies...

The invoice module is only in the configured site currency. It is intentionally kept very simple.

If you need more sophisticated invoicing then you should override the invoicing code with your own.

The core eCommerce functionality does support multiple currencies.
*/

/**
 * Module page class.
 */
class Module_invoices
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 3;
        $info['locked'] = false;
        $info['update_require_upgrade'] = true;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'ecommerce';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('ecom_invoices');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('ecom_invoices', [
                'id' => '*AUTO',
                'i_type_code' => 'ID_TEXT',
                'i_item_name' => 'SHORT_TEXT', // A custom product name; blank means use the default
                'i_member_id' => 'MEMBER',
                'i_state' => 'ID_TEXT', // new|pending|paid|delivered (pending means payment has been requested)
                'i_price' => 'REAL', // can't always find this from i_type_code
                'i_tax_code' => 'ID_TEXT',
                'i_tax_derivation' => 'LONG_TEXT', // Needs to be stored, as the product is dynamic and it's locked in time // TODO: #6074
                'i_tax' => 'REAL', // Needs to be stored, as the product is dynamic and it's locked in time
                'i_tax_tracking' => 'LONG_TEXT', // Needs to be stored, as the product is dynamic and it's locked in time // TODO: #6074
                'i_currency' => 'ID_TEXT',
                'i_processing_code' => 'SHORT_TEXT', // depending on i_type_code, would trigger something special in the actualiser such as a key upgrade
                'i_time' => 'TIME',
                'i_note' => 'LONG_TEXT',
            ]);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 3)) { // LEGACY
            $GLOBALS['SITE_DB']->rename_table('invoices', 'ecom_invoices');
            $GLOBALS['SITE_DB']->alter_table_field('ecom_invoices', 'i_amount', 'REAL', 'i_price');
            $GLOBALS['SITE_DB']->alter_table_field('ecom_invoices', 'i_special', 'SHORT_TEXT', 'i_processing_code');
            $GLOBALS['SITE_DB']->add_table_field('ecom_invoices', 'i_item_name', 'SHORT_TEXT', '');
            $GLOBALS['SITE_DB']->add_table_field('ecom_invoices', 'i_tax_code', 'ID_TEXT', '0%');
            $GLOBALS['SITE_DB']->add_table_field('ecom_invoices', 'i_tax_derivation', 'LONG_TEXT', '');
            $GLOBALS['SITE_DB']->add_table_field('ecom_invoices', 'i_tax', 'REAL', 0.00);
            $GLOBALS['SITE_DB']->add_table_field('ecom_invoices', 'i_tax_tracking', 'LONG_TEXT', '');
            $GLOBALS['SITE_DB']->add_table_field('ecom_invoices', 'i_currency', 'ID_TEXT', get_option('currency'));
        }

        if (($upgrade_from === null) || ($upgrade_from < 3)) {
            $GLOBALS['SITE_DB']->create_index('ecom_invoices', 'i_member_id', ['i_member_id']);
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        if ($member_id === null) {
            $member_id = get_member();
        }

        if ((!$check_perms || !is_guest($member_id)) && (get_forum_type() != 'cns') && ($GLOBALS['SITE_DB']->query_select_value('ecom_invoices', 'COUNT(*)', ['i_member_id' => $member_id]) > 0)) {
            return [
                'browse' => ['MY_INVOICES', 'menu/adminzone/audit/ecommerce/invoices'],
            ];
        }
        return [];
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('ecommerce', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_code('ecommerce');

        if ($type == 'browse') {
            $this->title = get_screen_title('MY_INVOICES');

            $member_id = get_member();
            if (has_privilege(get_member(), 'assume_any_member')) {
                $member_id = get_param_integer('id', $member_id);
            }

            if (get_forum_type() == 'cns') {
                $breadcrumbs = [['_SEARCH:members', do_lang_tempcode('MEMBERS')], ['_SEARCH:members:view:' . strval($member_id), escape_html($GLOBALS['FORUM_DRIVER']->get_username($member_id))]];
                breadcrumb_set_parents($breadcrumbs);
            }
        }

        if ($type == 'pay') {
            $this->title = get_screen_title('MAKE_PAYMENT');
        }

        if ($type == 'invoice') {
            $this->title = get_screen_title('INVOICE');
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_css('ecommerce');

        // Kill switch
        if ((ecommerce_test_mode()) && (!$GLOBALS['IS_ACTUALLY_ADMIN']) && (!has_privilege(get_member(), 'access_ecommerce_in_test_mode'))) {
            warn_exit(do_lang_tempcode('PURCHASE_DISABLED'));
        }

        if (is_guest()) {
            access_denied('NOT_AS_GUEST');
        }

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->my();
        }
        if ($type == 'pay') {
            return $this->pay();
        }
        if ($type == 'invoice') {
            return $this->invoice();
        }
        return new Tempcode();
    }

    /**
     * Show my invoices.
     *
     * @return Tempcode The interface
     */
    public function my() : object
    {
        $member_id = get_member();
        if (has_privilege(get_member(), 'assume_any_member')) {
            $member_id = get_param_integer('id', $member_id);
        }

        $where = ['i_member_id' => $member_id];
        $filter_id = get_param_integer('filter_id', null);
        if ($filter_id !== null) {
            $where['id'] = $filter_id;
            attach_message(do_lang_tempcode('INVOICES_FILTERED_BY_ID', escape_html(static_evaluate_tempcode(build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF')))));
        }

        $invoices = [];
        $rows = $GLOBALS['SITE_DB']->query_select('ecom_invoices', ['*'], $where, 'ORDER BY i_time');
        foreach ($rows as $row) {
            $type_code = $row['i_type_code'];
            list($details) = find_product_details($type_code);
            if ($details === null) {
                continue;
            }

            if ($row['i_item_name'] != '') {
                $item_name = $row['i_item_name'];
            } else {
                $item_name = $details['item_name'];
            }

            $invoice_url = build_url(['page' => '_SELF', 'type' => 'invoice', 'id' => $row['id'], 'wide_high' => 1], '_SELF');
            $title_linker = hyperlink($invoice_url, $item_name, true, true, do_lang('INVOICE'));
            $date = get_timezoned_date_time($row['i_time'], false);
            $payable = ($row['i_state'] == 'new');
            $fulfillable = ($row['i_state'] == 'paid');
            $state = do_lang('PAYMENT_STATE_' . $row['i_state']);
            $currency = isset($details['currency']) ? $details['currency'] : get_option('currency');
            if (perform_local_payment()) {
                $transaction_button = hyperlink(build_url(['page' => '_SELF', 'type' => 'pay', 'id' => $row['id']], '_SELF'), do_lang_tempcode('MAKE_PAYMENT'), false, false);
            } else {
                $transaction_button = make_transaction_button(
                    $type_code,
                    $item_name,
                    strval($row['id']),
                    $row['i_price'],
                    ($row['i_tax_derivation'] == '') ? [] : json_decode($row['i_tax_derivation'], true),
                    $row['i_tax'],
                    ($row['i_tax_tracking'] == '') ? [] : json_decode($row['i_tax_tracking'], true),
                    0.00,
                    0.00,
                    $currency
                );
            }
            $invoices[] = [
                'TRANSACTION_BUTTON' => $transaction_button,
                'INVOICE_TITLE' => $title_linker,
                'INVOICE_ID' => strval($row['id']),
                'PRICE' => float_to_raw_string($row['i_price']),
                'TAX' => float_to_raw_string($row['i_tax']),
                'CURRENCY' => $row['i_currency'],
                'DATE' => $date,
                'STATE' => $state,
                'FULFILLABLE' => $fulfillable,
                'PAYABLE' => $payable,
                'NOTE' => $row['i_note'],
                'TYPE_CODE' => $row['i_type_code'],
            ];
        }
        if (empty($invoices)) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }

        return do_template('ECOM_INVOICES_SCREEN', ['_GUID' => '144a893d93090c105eecc48fa58921a7', 'TITLE' => $this->title, 'INVOICES' => $invoices]);
    }

    /**
     * Pay invoice.
     *
     * @return Tempcode The interface
     */
    public function pay() : object
    {
        $id = get_param_integer('id');

        $rows = $GLOBALS['SITE_DB']->query_select('ecom_invoices', ['*'], ['id' => $id], '', 1);
        if (!array_key_exists(0, $rows)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $rows[0];
        $type_code = $row['i_type_code'];

        list($details) = find_product_details($type_code);

        $currency = isset($details['currency']) ? $details['currency'] : get_option('currency');

        $invoice_title = $details['item_name'];

        $post_url = build_url(['page' => 'purchase', 'type' => 'finish', 'type_code' => $type_code], get_module_zone('purchase'));

        $needs_shipping_address = !empty($details['needs_shipping_address']);

        list($fields, $hidden) = get_transaction_form_fields(
            $type_code,
            $invoice_title,
            strval($id),
            $row['i_price'],
            ($row['i_tax_derivation'] == '') ? [] : json_decode($row['i_tax_derivation'], true),
            $row['i_tax'],
            ($row['i_tax_tracking'] == '') ? [] : json_decode($row['i_tax_tracking'], true),
            0.00,
            0.00,
            $currency,
            0,
            null,
            '',
            get_option('payment_gateway'),
            $needs_shipping_address
        );

        $text = do_lang_tempcode('TRANSACT_INFO');

        return do_template('FORM_SCREEN', [
            '_GUID' => 'e90a4019b37c8bf5bcb64086416bcfb3',
            'TITLE' => $this->title,
            'SKIP_WEBSTANDARDS' => '1',
            'FIELDS' => $fields,
            'URL' => $post_url,
            'TEXT' => $text,
            'HIDDEN' => $hidden,
            'SUBMIT_ICON' => 'menu/rich_content/ecommerce/purchase',
            'SUBMIT_NAME' => do_lang_tempcode('MAKE_PAYMENT'),
        ]);
    }

    /**
     * Show an invoice.
     *
     * @return Tempcode The result of execution
     */
    public function invoice() : object
    {
        require_css('ecommerce');

        $GLOBALS['SCREEN_TEMPLATE_CALLED'] = '';

        $id = get_param_integer('id');
        $invoice = display_invoice($id);
        return $invoice;
    }
}
