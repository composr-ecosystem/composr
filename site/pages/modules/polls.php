<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    polls
 */

/**
 * Module page class.
 */
class Module_polls
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 8;
        $info['update_require_upgrade'] = true;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'polls';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists(['poll', 'poll_votes']);

        $privileges = [
            'choose_poll',

            'autocomplete_keyword_poll',
            'autocomplete_title_poll',
        ];
        delete_privilege($privileges);

        $GLOBALS['SITE_DB']->query_delete('trackbacks', ['trackback_for_type' => 'polls']);
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('poll', [
                'id' => '*AUTO',
                'question' => 'SHORT_TRANS__COMCODE',
                'option1' => 'SHORT_TRANS__COMCODE',
                'option2' => 'SHORT_TRANS__COMCODE',
                'option3' => 'SHORT_TRANS__COMCODE',
                'option4' => 'SHORT_TRANS__COMCODE',
                'option5' => 'SHORT_TRANS__COMCODE',
                'option6' => 'SHORT_TRANS__COMCODE',
                'option7' => 'SHORT_TRANS__COMCODE',
                'option8' => 'SHORT_TRANS__COMCODE',
                'option9' => 'SHORT_TRANS__COMCODE',
                'option10' => 'SHORT_TRANS__COMCODE',
                'votes1' => 'INTEGER',
                'votes2' => 'INTEGER',
                'votes3' => 'INTEGER',
                'votes4' => 'INTEGER',
                'votes5' => 'INTEGER',
                'votes6' => 'INTEGER',
                'votes7' => 'INTEGER',
                'votes8' => 'INTEGER',
                'votes9' => 'INTEGER',
                'votes10' => 'INTEGER',
                'allow_rating' => 'BINARY',
                'allow_comments' => 'SHORT_INTEGER',
                'allow_trackbacks' => 'BINARY',
                'notes' => 'LONG_TEXT',
                'num_options' => 'SHORT_INTEGER',
                'is_current' => 'BINARY',
                'date_and_time' => '?TIME',
                'submitter' => 'MEMBER',
                'add_time' => 'TIME',
                'poll_views' => 'INTEGER',
                'edit_date' => '?TIME',
            ]);

            $GLOBALS['SITE_DB']->create_index('poll', 'poll_views', ['poll_views']);
            $GLOBALS['SITE_DB']->create_index('poll', 'get_current', ['is_current']);
            $GLOBALS['SITE_DB']->create_index('poll', 'ps', ['submitter']);
            $GLOBALS['SITE_DB']->create_index('poll', 'padd_time', ['add_time']);
            $GLOBALS['SITE_DB']->create_index('poll', 'date_and_time', ['date_and_time']);

            add_privilege('POLLS', 'choose_poll', false);

            $GLOBALS['SITE_DB']->create_index('poll', 'ftjoin_pq', ['question']);
            $GLOBALS['SITE_DB']->create_index('poll', 'ftjoin_po1', ['option1']);
            $GLOBALS['SITE_DB']->create_index('poll', 'ftjoin_po2', ['option2']);
            $GLOBALS['SITE_DB']->create_index('poll', 'ftjoin_po3', ['option3']);
            $GLOBALS['SITE_DB']->create_index('poll', 'ftjoin_po4', ['option4']);
            $GLOBALS['SITE_DB']->create_index('poll', 'ftjoin_po5', ['option5']);
        }

        if (($upgrade_from === null) || ($upgrade_from < 5)) {
            $GLOBALS['SITE_DB']->create_table('poll_votes', [
                'id' => '*AUTO',
                'v_poll_id' => 'AUTO_LINK',
                'v_voting_member' => '?MEMBER',
                'v_voting_ip_address' => 'IP',
                'v_vote_for' => '?SHORT_INTEGER',
                'v_vote_time' => 'TIME',
            ]);

            $GLOBALS['SITE_DB']->create_index('poll_votes', 'v_vote_for', ['v_vote_for']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 5)) { // LEGACY
            $polls = $GLOBALS['SITE_DB']->query_select('poll', ['id', 'ip']);
            foreach ($polls as $poll) {
                $voters = explode('-', $poll['ip']);
                foreach ($voters as $voter) {
                    $GLOBALS['SITE_DB']->query_insert('poll_votes', [
                        'v_poll_id' => $poll['id'],
                        'v_voting_member' => is_numeric($voter) ? intval($voter) : null,
                        'v_voting_ip_address' => is_numeric($voter) ? '' : $voter,
                        'v_vote_for' => null,
                        'v_vote_time' => time(),
                    ]);
                }
            }
            $GLOBALS['SITE_DB']->delete_table_field('poll', 'ip');
        }

        if (($upgrade_from === null) || ($upgrade_from < 6)) {
            $GLOBALS['SITE_DB']->create_index('poll', '#poll_search__combined', ['question', 'option1', 'option2', 'option3', 'option4', 'option5']);

            add_privilege('SEARCH', 'autocomplete_keyword_poll', false);
            add_privilege('SEARCH', 'autocomplete_title_poll', false);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 7)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('poll_votes', 'v_vote_time', 'TIME', time());

            for ($i = 1; $i <= 10; $i++) {
                $GLOBALS['SITE_DB']->alter_table_field('poll', 'option' . strval($i), 'SHORT_TRANS__COMCODE');
            }

            $GLOBALS['FORUM_DRIVER']->install_delete_custom_field('points_gained_voting');
        }

        if (($upgrade_from === null) || ($upgrade_from < 7)) {
            // Deny non-staff/Guest access to set polls (overrides a privilege that some liberally-permissive sites may set)
            $staff_groups = $GLOBALS['FORUM_DRIVER']->get_moderator_groups();
            $usergroups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);
            foreach (array_keys($usergroups) as $id) {
                if ((!isset($staff_groups[$id])) && $id != (db_get_first_id())) {
                    set_privilege($id, 'bypass_validation_midrange_content', false, 'cms_polls');
                    set_privilege($id, 'edit_own_midrange_content', false, 'cms_polls');
                }
            }
        }

        if (($upgrade_from !== null) && ($upgrade_from < 8)) { // LEGACY: 11.beta1
            // Database consistency fixes
            $GLOBALS['SITE_DB']->alter_table_field('poll', 'add_time', 'TIME');
            $GLOBALS['SITE_DB']->alter_table_field('poll_votes', 'v_voter_id', '?MEMBER', 'v_voting_member');
            $GLOBALS['SITE_DB']->alter_table_field('poll_votes', 'v_voter_ip', 'IP', 'v_voting_ip_address');

            $GLOBALS['SITE_DB']->delete_index_if_exists('poll_votes', 'v_voter_id');
            $GLOBALS['SITE_DB']->delete_index_if_exists('poll_votes', 'v_voter_ip');
        }

        if (($upgrade_from === null) || ($upgrade_from < 8)) {
            $GLOBALS['SITE_DB']->create_index('poll_votes', 'v_voting_member', ['v_voting_member']);
            $GLOBALS['SITE_DB']->create_index('poll_votes', 'v_voting_ip_address', ['v_voting_ip_address']);
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('polls')) {
            return null;
        }

        return [
            'browse' => ['POLLS', 'menu/social/polls'],
        ];
    }

    public $title;
    public $id;
    public $myrow;
    public $_title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('polls', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_lang('polls');

        inject_feed_url('?mode=polls&select=', do_lang('POLLS'));

        if ($type == 'browse') {
            $this->title = get_screen_title('POLL_ARCHIVE');
        }

        if ($type == 'view') {
            $id = get_param_integer('id');

            // Breadcrumbs
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('POLL_ARCHIVE')]]);

            $this->title = get_screen_title('POLL');

            // Load data
            $rows = $GLOBALS['SITE_DB']->query_select('poll', ['*'], ['id' => $id], '', 1);
            if (!array_key_exists(0, $rows)) {
                return warn_screen($this->title, do_lang_tempcode('MISSING_RESOURCE', 'poll'));
            }
            $myrow = $rows[0];
            $_title = get_translated_text($myrow['question']);

            // Metadata
            set_extra_request_metadata([
                'identifier' => '_SEARCH:polls:view:' . strval($id),
            ], $myrow, 'poll', strval($id));


            $this->id = $id;
            $this->myrow = $myrow;
            $this->_title = $_title;
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_code('feedback');
        require_code('polls');
        require_css('polls');

        // What are we doing?
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->view_polls();
        }
        if ($type == 'view') {
            return $this->view();
        }

        return new Tempcode();
    }

    /**
     * The UI to view a list of polls.
     *
     * @return Tempcode The UI
     */
    public function view_polls() : object
    {
        // Action links
        if ((has_actual_page_access(null, 'cms_polls', null, null)) && (has_submit_permission('mid', get_member(), get_ip_address(), 'cms_polls'))) {
            $submit_url = build_url(['page' => 'cms_polls', 'type' => 'add', 'redirect' => protect_url_parameter(SELF_REDIRECT_RIP)], get_module_zone('cms_polls'));
        } else {
            $submit_url = new Tempcode();
        }

        return do_template('POLL_ARCHIVE_SCREEN', [
            '_GUID' => 'bed3e31c98b35fea52a991e381e6cfaa',
            'TITLE' => $this->title,
            'ADD_URL' => $submit_url,
        ]);
    }

    /**
     * The UI to view a poll.
     *
     * @return Tempcode The UI
     */
    public function view() : object
    {
        $id = $this->id;
        $myrow = $this->myrow;
        $_title = $this->_title;

        $date_raw = ($myrow['date_and_time'] === null) ? '' : strval($myrow['date_and_time']);
        $add_date_raw = strval($myrow['add_time']);
        $edit_date_raw = ($myrow['edit_date'] === null) ? '' : strval($myrow['edit_date']);
        $date = ($myrow['date_and_time'] === null) ? null : get_timezoned_date_time($myrow['date_and_time']);
        $add_date = get_timezoned_date_time($myrow['add_time']);
        $edit_date = ($myrow['edit_date'] === null) ? null : get_timezoned_date_time($myrow['edit_date']);

        // Views
        cms_register_shutdown_function_safe(function () use ($myrow, $id) {
            $increment = statistical_update_model('poll', $myrow['poll_views']);
            if ($increment != 0) {
                $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'poll SET poll_views=poll_views+' . strval($increment) . ' WHERE id=' . strval($id), 1, 0, true); // Errors suppressed in case DB write access broken
                persistent_cache_delete('POLL');
            }
        });

        // Feedback
        list($rating_details, $comment_details, $trackback_details) = embed_feedback_systems(
            get_page_name(),
            strval($id),
            $myrow['allow_rating'],
            $myrow['allow_comments'],
            $myrow['allow_trackbacks'],
            ($myrow['date_and_time'] === null) ? 0 : 1,
            $myrow['submitter'],
            build_url(['page' => '_SELF', 'type' => 'view', 'id' => $id], '_SELF', [], false, false, true),
            $_title,
            find_overridden_comment_forum('polls'),
            $myrow['add_time']
        );

        // Management links
        if ((has_actual_page_access(null, 'cms_polls', null, null)) && (has_edit_permission('high', get_member(), $myrow['submitter'], 'cms_polls'))) {
            $edit_url = build_url(['page' => 'cms_polls', 'type' => '_edit', 'id' => $id], get_module_zone('cms_polls'));
        } else {
            $edit_url = new Tempcode();
        }

        // Show the poll
        $show_poll_results = get_param_integer('show_poll_results_' . strval($id), 0);
        if ($show_poll_results == 0) {
            $poll_details = render_poll_box(false, $myrow, '_SELF', false, false);
        } else {
            // Vote
            $cast = post_param_integer('cast_' . strval($id), null);
            $myrow = vote_in_poll($id, $cast, $myrow); // Either an active vote, or a forfeited vote (viewing results)

            // Show poll, with results
            $poll_details = render_poll_box(true, $myrow, '_SELF', false, false);
        }

        // Render
        return do_template('POLL_SCREEN', [
            '_GUID' => '1463a42354c3ad154e2c6bb0c96be3b9',
            'TITLE' => $this->title,
            'SUBMITTER' => strval($myrow['submitter']),
            'ID' => strval($id),
            'DATE_RAW' => $date_raw,
            'ADD_DATE_RAW' => $add_date_raw,
            'EDIT_DATE_RAW' => $edit_date_raw,
            'DATE' => $date,
            'ADD_DATE' => $add_date,
            'EDIT_DATE' => $edit_date,
            '_VIEWS' => strval($myrow['poll_views']),
            'VIEWS' => integer_format($myrow['poll_views'], 0),
            'TRACKBACK_DETAILS' => $trackback_details,
            'RATING_DETAILS' => $rating_details,
            'COMMENT_DETAILS' => $comment_details,
            'EDIT_URL' => $edit_url,
            'POLL_DETAILS' => $poll_details,
        ]);
    }
}
