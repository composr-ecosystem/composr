<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    banners
 */

/**
 * Module page class.
 */
class Module_banners
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 9;
        $info['locked'] = true;
        $info['update_require_upgrade'] = true;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'banners';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $tables = [
            'banners',
            'banners_types',
            'banner_types',
            'banner_clicks',
        ];
        $GLOBALS['SITE_DB']->drop_table_if_exists($tables);

        $GLOBALS['SITE_DB']->query_delete('group_category_access', ['module_the_name' => 'banners']);

        $privileges = [
            'full_banner_setup',
            'view_anyones_banner_stats',
            'banner_free',
            'use_html_banner',
            'use_php_banner',
        ];
        delete_privilege($privileges);

        require_code('files');
        if (!$GLOBALS['DEV_MODE']) {
            deldir_contents(get_custom_file_base() . '/uploads/banners', true);
        }
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            require_lang('banners');
            require_code('banners');

            $GLOBALS['SITE_DB']->create_table('banners', [
                'name' => '*ID_TEXT',
                'expiry_date' => '?TIME',
                'submitter' => 'MEMBER',
                'img_url' => 'URLPATH',
                'deployment_agreement' => 'SHORT_INTEGER', // a BANNER_* constant
                'title_text' => 'SHORT_TEXT',
                'caption' => 'SHORT_TRANS__COMCODE',
                'direct_code' => 'LONG_TEXT',
                'campaign_remaining' => 'INTEGER',
                'site_url' => 'URLPATH',
                'hits_from' => 'INTEGER',
                'views_from' => 'INTEGER',
                'hits_to' => 'INTEGER',
                'views_to' => 'INTEGER',
                'display_likelihood' => 'INTEGER',
                'notes' => 'LONG_TEXT',
                'validated' => 'BINARY',
                'validation_time' => '?TIME',
                'add_date' => 'TIME',
                'edit_date' => '?TIME',
                'b_type' => 'ID_TEXT',
            ]);

            $GLOBALS['SITE_DB']->create_index('banners', 'banner_child_find', ['b_type']);
            $GLOBALS['SITE_DB']->create_index('banners', 'expiry_date', ['expiry_date']);
            $GLOBALS['SITE_DB']->create_index('banners', 'badd_date', ['add_date']);
            $GLOBALS['SITE_DB']->create_index('banners', 'topsites', ['hits_from', 'hits_to']);
            $GLOBALS['SITE_DB']->create_index('banners', 'campaign_remaining', ['campaign_remaining']);
            $GLOBALS['SITE_DB']->create_index('banners', 'bvalidated', ['validated']);

            require_code('content2');
            install_predefined_content('banners');

            add_privilege('BANNERS', 'full_banner_setup', false);
            add_privilege('BANNERS', 'view_anyones_banner_stats', false);

            $GLOBALS['SITE_DB']->create_table('banner_types', [
                'id' => '*ID_TEXT',
                't_is_textual' => 'BINARY',
                't_image_width' => 'INTEGER',
                't_image_height' => 'INTEGER',
                't_max_file_size' => 'INTEGER',
                't_comcode_inline' => 'BINARY',
            ]);

            $GLOBALS['SITE_DB']->create_index('banner_types', 'hottext', ['t_comcode_inline']);

            $GLOBALS['SITE_DB']->query_insert('banner_types', [
                'id' => '',
                't_is_textual' => 0,
                't_image_width' => 728,
                't_image_height' => 90,
                't_max_file_size' => 150,
                't_comcode_inline' => 0,
            ]);

            $GLOBALS['SITE_DB']->create_table('banner_clicks', [
                'id' => '*AUTO',
                'c_date_and_time' => 'TIME',
                'c_member_id' => 'MEMBER',
                'c_ip_address' => 'IP',
                'c_source' => 'ID_TEXT',
                'c_banner_id' => 'ID_TEXT',
            ]);
            $GLOBALS['SITE_DB']->create_index('banner_clicks', 'clicker_ip', ['c_ip_address']);

            add_privilege('BANNERS', 'banner_free', false);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 6)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('banners', 'direct_code', 'LONG_TEXT');
            delete_config_option('money_ad_code');
            delete_config_option('advert_chance');
            delete_config_option('is_on_banners');
        }

        if (($upgrade_from === null) || ($upgrade_from < 6)) {
            add_privilege('BANNERS', 'use_html_banner', false);
            add_privilege('BANNERS', 'use_php_banner', false, true);
        }

        if (($upgrade_from === null) || ($upgrade_from < 7)) {
            $GLOBALS['SITE_DB']->create_table('banners_types', [
                'name' => '*ID_TEXT',
                'b_type' => '*ID_TEXT',
            ]);

            $GLOBALS['SITE_DB']->create_index('banner_clicks', 'c_banner_id', ['c_banner_id']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 8)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('banners', 'importance_modulus', 'INTEGER', 'display_likelihood');
            $GLOBALS['SITE_DB']->alter_table_field('banners', 'the_type', 'SHORT_INTEGER', 'deployment_agreement');
            $GLOBALS['SITE_DB']->alter_table_field('banners', 'b_title_text', 'SHORT_TEXT', 'title_text');
            $GLOBALS['SITE_DB']->alter_table_field('banners', 'b_direct_code', 'LONG_TEXT', 'direct_code');
        }

        if (($upgrade_from === null) || ($upgrade_from < 8)) {
            $GLOBALS['SITE_DB']->create_index('banner_clicks', 'member_id', ['c_member_id']);
            $GLOBALS['SITE_DB']->create_index('banners', 'deployment_agreement', ['deployment_agreement']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 9)) { // LEGACY: 11 beta7
            $GLOBALS['SITE_DB']->add_table_field('banners', 'validation_time', '?TIME');
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('banners')) {
            return null;
        }

        if ($check_perms) {
            if (is_guest($member_id)) {
                return [];
            }

            if ($member_id === null) {
                $member_id = get_member();
            }
            if (!has_zone_access($member_id, 'adminzone')) {
                $num_banners_owned = $GLOBALS['SITE_DB']->query_select_value('banners', 'COUNT(*)', ['submitter' => $member_id]);
                if ($num_banners_owned == 0) {
                    return null;
                }
            }
        }

        return [
            'browse' => ['BANNERS', 'menu/cms/banners'],
        ];
    }

    public $title;
    public $source;
    public $myrow;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('banners', $error_msg)) {
            return $error_msg;
        }

        require_lang('banners');
        $type = get_param_string('type', 'browse');

        require_lang('banners');

        if ($type == 'browse') {
            $this->title = get_screen_title('BANNERS');
        }

        if ($type == 'view') {
            inform_non_canonical_parameter('sort');

            $source = get_param_string('source');

            $rows = $GLOBALS['SITE_DB']->query_select('banners', ['*'], ['name' => $source], '', 1);
            if (!array_key_exists(0, $rows)) {
                set_http_status_code(404);
                warn_exit(do_lang_tempcode('BANNER_MISSING_SOURCE'), false, false, 404);
            }
            $myrow = $rows[0];

            set_extra_request_metadata([
                'identifier' => '_SEARCH:banners:view:' . $source,
            ], $myrow, 'banner', $source);

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('BANNERS')]]);

            $this->title = get_screen_title('BANNER_INFORMATION');

            $this->source = $source;
            $this->myrow = $myrow;
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        if ($GLOBALS['CURRENT_SHARE_USER'] !== null) {
            warn_exit(do_lang_tempcode('SHARED_INSTALL_PROHIBIT'));
        }

        require_code('banners');

        // Decide what we're doing
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->choose_banner();
        }
        if ($type == 'view') {
            return $this->view_banner();
        }
        if ($type == 'reset') {
            return $this->reset_banner();
        }

        return new Tempcode();
    }

    /**
     * The UI to choose a banner to view.
     *
     * @return Tempcode The UI
     */
    public function choose_banner() : object
    {
        require_code('templates_results_table');

        $current_ordering = get_param_string('sort', 'name ASC', INPUT_FILTER_GET_COMPLEX);
        $sortables = [
            'name' => do_lang_tempcode('CODENAME'),
            'b_type' => do_lang_tempcode('BANNER_TYPE'),
            'deployment_agreement' => do_lang_tempcode('DEPLOYMENT_AGREEMENT'),
            'campaign_remaining' => do_lang_tempcode('HITS_ALLOCATED'),
            'display_likelihood' => do_lang_tempcode('DISPLAY_LIKELIHOOD'),
            'expiry_date' => do_lang_tempcode('EXPIRY_DATE'),
            'add_date' => do_lang_tempcode('ADDED'),
        ];
        if (addon_installed('validation')) {
            $sortables['validated'] = do_lang_tempcode('VALIDATED');
        }
        list($sql_sort, $sort_order, $sortable) = process_sorting_params('banner', $current_ordering);

        $hr = [
            do_lang_tempcode('CODENAME'),
            do_lang_tempcode('BANNER_TYPE'),
            //do_lang_tempcode('DEPLOYMENT_AGREEMENT'),
            //do_lang_tempcode('HITS_ALLOCATED'),
            do_lang_tempcode('_DISPLAY_LIKELIHOOD'),
            do_lang_tempcode('EXPIRY_DATE'),
            do_lang_tempcode('ADDED'),
        ];
        if (addon_installed('validation')) {
            $hr[] = protect_from_escaping(do_template('COMCODE_ABBR', ['_GUID' => '77d1bbbfc8e6847ecdce12489913a96a', 'TITLE' => do_lang_tempcode('VALIDATED'), 'CONTENT' => do_lang_tempcode('VALIDATED_SHORT')]));
        }
        $hr[] = do_lang_tempcode('ACTIONS');
        $header_row = results_header_row($hr, $sortables, 'sort', $sortable . ' ' . $sort_order);

        $result_entries = new Tempcode();

        $url_map = ['page' => '_SELF', 'type' => 'view'];

        require_code('form_templates');
        $only_owned = has_privilege(get_member(), 'edit_midrange_content', 'cms_banners') ? null : get_member();
        $max_rows = $GLOBALS['SITE_DB']->query_select_value('banners', 'COUNT(*)', ($only_owned === null) ? [] : ['submitter' => $only_owned]);
        if ($max_rows == 0) {
            inform_exit(do_lang_tempcode('NO_ENTRIES', 'banner'));
        }
        $max = get_param_integer('banner_max', 20);
        $start = get_param_integer('banner_start', 0);
        $rows = $GLOBALS['SITE_DB']->query_select('banners', ['*'], ($only_owned === null) ? [] : ['submitter' => $only_owned], 'ORDER BY ' . str_replace('r.', '', $sql_sort), $max, $start);
        foreach ($rows as $row) {
            $view_url = build_url($url_map + ['source' => $row['name']], '_SELF');

            $deployment_agreement = new Tempcode();
            switch ($row['deployment_agreement']) {
                case BANNER_PERMANENT:
                    $deployment_agreement = do_lang_tempcode('BANNER_PERMANENT');
                    break;
                case BANNER_CAMPAIGN:
                    $deployment_agreement = do_lang_tempcode('BANNER_CAMPAIGN');
                    break;
                case BANNER_FALLBACK:
                    $deployment_agreement = do_lang_tempcode('BANNER_FALLBACK');
                    break;
            }

            $fr = [
                do_template('COMCODE_TELETYPE', ['_GUID' => '4ac291a8c2eabc304cd26f7d6b4bf8a2', 'CONTENT' => escape_html($row['name'])]),
                ($row['b_type'] == '') ? do_lang('_DEFAULT') : $row['b_type'],
                //$deployment_agreement,  Too much detail
                //integer_format($row['campaign_remaining']),  Too much detail
                strval($row['display_likelihood']),
                ($row['expiry_date'] === null) ? protect_from_escaping(do_lang_tempcode('NA_EM')) : make_string_tempcode(get_timezoned_date_time($row['expiry_date'])),
                get_timezoned_date($row['add_date']),
            ];
            if (addon_installed('validation')) {
                $fr[] = ($row['validated'] == 1) ? do_lang_tempcode('YES') : do_lang_tempcode('NO');
            }
            $fr[] = protect_from_escaping(hyperlink($view_url, do_lang_tempcode('VIEW'), false, true, $row['name']));

            $result_entries->attach(results_entry($fr, true));
        }

        $table = results_table(do_lang('BANNERS'), $start, 'banner_start', $max, 'banner_max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order);

        $text = do_lang_tempcode('CHOOSE_VIEW_LIST');

        $tpl = do_template('COLUMNED_TABLE_SCREEN', [
            '_GUID' => 'be5248da379faeead5a18d9f2b62bd6b',
            'TITLE' => $this->title,
            'TEXT' => $text,
            'TABLE' => $table,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => null,
            'POST_URL' => get_self_url(),
            'JS_FUNCTION_CALLS' => [],
        ]);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * The UI to view a banner.
     *
     * @return Tempcode The UI
     */
    public function view_banner() : object
    {
        $source = $this->source;

        $myrow = $this->myrow;

        if ((is_guest($myrow['submitter'])) || ($myrow['submitter'] != get_member())) {
            check_privilege('view_anyones_banner_stats');
        }

        // Banner details table...

        switch ($myrow['deployment_agreement']) {
            case BANNER_PERMANENT:
                $type = do_lang_tempcode('BANNER_PERMANENT');
                break;
            case BANNER_CAMPAIGN:
                $type = do_lang_tempcode('BANNER_HITS_LEFT', do_lang_tempcode('BANNER_CAMPAIGN'), escape_html(integer_format($myrow['campaign_remaining'], 0)));
                break;
            case BANNER_FALLBACK:
                $type = do_lang_tempcode('BANNER_FALLBACK');
                break;
        }

        if ($myrow['site_url'] == '') {
            $click_through = do_lang_tempcode('CANT_TRACK');
        } else {
            if ($myrow['views_to'] != 0) {
                $click_through = protect_from_escaping(escape_html(float_format(round(100.0 * ($myrow['hits_to'] / $myrow['views_to']))) . '%'));
            } else {
                $click_through = do_lang_tempcode('NA_EM');
            }
        }

        $_sum_views = $GLOBALS['SITE_DB']->query_select_value('banners', 'SUM(views_from)');
        $sum_views = @intval($_sum_views);
        $has_banner_network = ($sum_views != 0);

        $fields = new Tempcode();
        require_code('templates_map_table');
        $fields->attach(map_table_field(do_lang_tempcode('TYPE'), $type, true));

        $fields->attach(map_table_field(do_lang_tempcode('BANNER_TYPE'), ($myrow['b_type'] == '') ? do_lang('_DEFAULT') : $myrow['b_type'], true));

        $banner_types = implode(', ', collapse_1d_complexity('b_type', $GLOBALS['SITE_DB']->query_select('banners_types', ['b_type'], ['name' => $myrow['name']])));
        $fields->attach(map_table_field(do_lang_tempcode('SECONDARY_CATEGORIES'), ($banner_types == '') ? do_lang_tempcode('NA_EM') : protect_from_escaping(escape_html($banner_types)), true));

        if (addon_installed('stats')) {
            $banners_regions = implode(', ', collapse_1d_complexity('region', $GLOBALS['SITE_DB']->query_select('content_regions', ['region'], ['content_type' => 'banner', 'content_id' => $myrow['name']])));
            $fields->attach(map_table_field(do_lang_tempcode('FILTER_REGIONS'), ($banners_regions == '') ? do_lang_tempcode('ALL_EM') : protect_from_escaping(escape_html($banners_regions)), true));
        }

        $fields->attach(map_table_field(do_lang_tempcode('ADDED'), get_timezoned_date_time($myrow['add_date']), true));

        $expiry_date = ($myrow['expiry_date'] === null) ? do_lang_tempcode('NA_EM') : protect_from_escaping(escape_html(get_timezoned_date_time($myrow['expiry_date'])));
        $fields->attach(map_table_field(do_lang_tempcode('EXPIRY_DATE'), $expiry_date, true));

        if ($has_banner_network) {
            $fields->attach(map_table_field(do_lang_tempcode('BANNER_HITS_FROM'), integer_format($myrow['hits_from'], 0), true, 'hits_from'));
            $fields->attach(map_table_field(do_lang_tempcode('BANNER_VIEWS_FROM'), integer_format($myrow['views_from'], 0), true, 'views_from'));
        }
        $fields->attach(map_table_field(do_lang_tempcode('BANNER_HITS_TO'), ($myrow['site_url'] == '') ? do_lang_tempcode('CANT_TRACK') : protect_from_escaping(escape_html(integer_format($myrow['hits_to'], 0))), true, 'hits_to'));
        $fields->attach(map_table_field(do_lang_tempcode('BANNER_VIEWS_TO'), ($myrow['site_url'] == '') ? do_lang_tempcode('CANT_TRACK') : protect_from_escaping(escape_html(integer_format($myrow['views_to'], 0))), true, 'views_to'));
        $fields->attach(map_table_field(do_lang_tempcode('BANNER_CLICKTHROUGH'), $click_through, true));

        $username = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($myrow['submitter']);
        $fields->attach(map_table_field(do_lang_tempcode('SUBMITTER'), $username, true));

        $map_table = do_template('MAP_TABLE', ['_GUID' => 'eb97a46d8e9813da7081991d5beed270', 'FIELDS' => $fields, 'RESPONSIVE' => true]);

        $banner = show_banner($myrow['name'], $myrow['title_text'], get_translated_tempcode('banners', $myrow, 'caption'), $myrow['direct_code'], $myrow['img_url'], $source, $myrow['site_url'], $myrow['b_type'], $myrow['submitter']);

        $edit_url = new Tempcode();
        if ((has_actual_page_access(null, 'cms_banners', null, null)) && (has_edit_permission('mid', get_member(), $myrow['submitter'], 'cms_banners'))) {
            $edit_url = build_url(['page' => 'cms_banners', 'type' => '_edit', 'id' => $source], get_module_zone('cms_banners'));
        }

        // Results table...

        if ($myrow['site_url'] != '') {
            require_lang('dates');

            require_code('templates_results_table');

            $current_ordering = get_param_string('sort', 'month ASC', INPUT_FILTER_GET_COMPLEX);
            if (strpos($current_ordering, ' ') === false) {
                warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('369894bd146f56ddb72bf32abfea74e7')));
            }
            list($sortable, $sort_order) = explode(' ', $current_ordering, 2);
            $sortables = [
                'day' => do_lang_tempcode('DAY'),
                'month' => do_lang_tempcode('MONTH'),
            ];
            if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
                log_hack_attack_and_exit('ORDERBY_HACK');
                warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('b360702a7c145c89b3d424b697e35650')));
            }

            $hr = [
                do_lang_tempcode('DATE'),
                do_lang_tempcode('BANNER_HITS_TO'),
            ];
            $header_row = results_header_row($hr, $sortables, 'sort', $sortable . ' ' . $sort_order);

            $max = get_param_integer('max', 50);
            $start = get_param_integer('start', 0);
            $rows = $GLOBALS['SITE_DB']->query_select('banner_clicks', ['c_date_and_time'], ['c_banner_id' => $source], 'ORDER BY c_date_and_time ' . $sort_order, 10000);
            $tally_sets = [];
            foreach ($rows as $row) {
                if ($sortable == 'day') {
                    $period = get_timezoned_date($row['c_date_and_time']);
                } else {
                    $period = cms_date('F Y', $row['c_date_and_time']);
                }

                if (!isset($tally_sets[$period])) {
                    $tally_sets[$period] = 0;
                }
                $tally_sets[$period]++;
            }

            $fields = new Tempcode();
            foreach ($tally_sets as $period => $hits) {
                $fr = [
                    $period,
                    integer_format($hits),
                ];

                $fields->attach(results_entry($fr, true));
            }

            $results_table = results_table(do_lang('BANNER_HITS_TO'), get_param_integer('start', 0), 'start', get_param_integer('max', 20), 'max', count($tally_sets), $header_row, $fields, $sortables, $sortable, $sort_order);
        } else {
            $results_table = new Tempcode();
        }

        // Reset feature...

        $reset_url = new Tempcode();
        if (has_actual_page_access(get_member(), 'admin_banners')) {
            $reset_url = build_url(['page' => '_SELF', 'type' => 'reset', 'source' => $source], '_SELF');
        }

        // Conflict resolution for reset banner statistics (staff)
        require_code('form_templates');
        list($warning_details, $ping_url) = handle_conflict_resolution($source, null, true);

        // ---

        return do_template('BANNER_VIEW_SCREEN', [
            '_GUID' => 'ed923ae0682c6ed679c0efda688c49ea',
            'TITLE' => $this->title,
            'EDIT_URL' => $edit_url,
            'MAP_TABLE' => $map_table,
            'BANNER' => $banner,
            'RESULTS_TABLE' => $results_table,
            'RESET_URL' => $reset_url,
            'NAME' => $source,
            'WARNING_DETAILS' => $warning_details,
            'PING_URL' => $ping_url,
        ]);
    }

    /**
     * The actualiser to reset a banner.
     *
     * @return Tempcode The UI
     */
    public function reset_banner() : object
    {
        $title = get_screen_title('RESET_BANNER_STATS');

        post_param_string('confirm'); // Just to confirm it is a POST request, i.e. not a CSRF

        $source = get_param_string('source');

        if (!has_actual_page_access(get_member(), 'admin_banners')) {
            access_denied('I_ERROR');
        }

        $GLOBALS['SITE_DB']->query_delete('banner_clicks', ['c_banner_id' => $source]);
        $GLOBALS['SITE_DB']->query_update('banners', ['hits_from' => 0, 'hits_to' => 0, 'views_from' => 0, 'views_to' => 0], ['name' => $source], '', 1);

        $url = build_url(['page' => '_SELF', 'type' => 'view', 'source' => $source], '_SELF');
        return redirect_screen($title, $url, do_lang_tempcode('SUCCESS'));
    }
}
