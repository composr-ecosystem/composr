<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    authors
 */

/**
 * Module page class.
 */
class Module_authors
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 5;
        $info['update_require_upgrade'] = true;
        $info['locked'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('authors');

        delete_privilege('set_own_author_profile');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('authors', [
                'author' => '*ID_TEXT',
                'url' => 'URLPATH',
                'member_id' => '?MEMBER',
                'the_description' => 'LONG_TRANS__COMCODE',
                'skills' => 'LONG_TRANS__COMCODE',
            ]);

            add_privilege('SUBMISSION', 'set_own_author_profile');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 3)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('authors', 'member_id', '?MEMBER');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 4)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('authors', 'forum_handle', '?MEMBER', 'member_id');

            $GLOBALS['SITE_DB']->delete_index_if_exists('authors', 'findmemberlink');
        }

        if (($upgrade_from === null) || ($upgrade_from < 4)) {
            $GLOBALS['SITE_DB']->create_index('authors', 'findmemberlink', ['member_id']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 5)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('authors', 'description', 'LONG_TRANS__COMCODE', 'the_description');
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('authors')) {
            return null;
        }

        if ($check_perms && is_guest($member_id)) {
            return [];
        }
        return [
            'browse' => ['VIEW_MY_AUTHOR_PROFILE', 'menu/rich_content/authors'],
        ];
    }

    public $title;
    public $author;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('authors', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_lang('authors');
        require_code('authors');

        $author = get_param_string('id', null);
        if ($author === null) {
            if (is_guest()) {
                attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML

                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'author'));
            }

            $author = $GLOBALS['FORUM_DRIVER']->get_username(get_member());
        }
        if (empty($author)) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR')); // Really don't want to have to search on this
        }

        if ((get_value('disable_awards_in_titles') !== '1') && (addon_installed('awards'))) {
            require_code('awards');
            $awards = find_awards_for('author', $author);
        } else {
            $awards = [];
        }
        $this->title = get_screen_title('_AUTHOR', true, [escape_html($author)], null, $awards);

        seo_meta_load_for('authors', $author);

        $rows = $GLOBALS['SITE_DB']->query_select('authors', ['*'], ['author' => $author], '', 1);
        if (!array_key_exists(0, $rows)) {
            if ((has_actual_page_access(get_member(), 'cms_authors')) && (has_edit_author_permission(get_member(), $author))) {
                set_http_status_code(404);

                $_author_add_url = build_url(['page' => 'cms_authors', 'type' => '_add', 'id' => $author], get_module_zone('cms_authors'));
                $author_add_url = $_author_add_url->evaluate();
                $message = do_lang_tempcode('NO_SUCH_AUTHOR_CONFIGURE_ONE', escape_html($author), escape_html($author_add_url));

                attach_message($message, 'inform');
            } else {
                $message = do_lang_tempcode('NO_SUCH_AUTHOR', escape_html($author));
            }
            $details = ['author' => $author, 'url' => '', 'member_id' => get_author_id_from_name($author), 'the_description' => null, 'skills' => null];
        } else {
            $details = $rows[0];
        }

        // Metadata
        set_extra_request_metadata([
            'identifier' => '_SEARCH:authors:browse:' . $author,
        ], $details, 'author', $author);

        $this->author = $author;
        $this->details = $details;

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        set_feed_url('?mode=authors&select=');

        // Decide what we're doing
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->show_author();
        }

        return new Tempcode();
    }

    /**
     * The UI to view an author.
     *
     * @return Tempcode The UI
     */
    public function show_author() : object
    {
        $author = $this->author;
        $details = $this->details;

        // Links associated with the mapping between the author and a forum member
        $handle = get_author_id_from_name($author);
        if ($handle !== null) {
            $forum_details = do_template('AUTHOR_SCREEN_POTENTIAL_ACTION_ENTRY', [
                '_GUID' => 'b90b606f263eeabeba38e06eef40a21e',
                'ACTION' => hyperlink($GLOBALS['FORUM_DRIVER']->member_profile_url($handle, true), do_lang_tempcode('AUTHOR_PROFILE'), false, false, '', null, null, 'me'),
            ]);
            if (addon_installed('points')) {
                $give_points_url = build_url(['page' => 'points', 'type' => 'member', 'id' => $handle], get_module_zone('points'));
                $point_details = do_template('AUTHOR_SCREEN_POTENTIAL_ACTION_ENTRY', [
                    '_GUID' => '2bfb9bf9b5fdf1dad34102abd4bc4648',
                    'ACTION' => hyperlink($give_points_url, do_lang_tempcode('AUTHOR_POINTS'), false, false),
                ]);
            } else {
                $point_details = new Tempcode();
            }
        } else {
            $forum_details = new Tempcode();
            $point_details = new Tempcode();
        }

        // Homepage
        $url = $details['url'];
        if (strlen($url) > 0) {
            $url_details = do_template('AUTHOR_SCREEN_POTENTIAL_ACTION_ENTRY', [
                '_GUID' => '4276bac5acb0ce5839a90614438c1049',
                'ACTION' => hyperlink($url, do_lang_tempcode('AUTHOR_HOMEPAGE'), false, false, '', null, null, 'me'),
            ]);
        } else {
            $url_details = new Tempcode();
        }

        // (Self?) description
        $description = cms_empty_safe($details['the_description']) ? new Tempcode() : get_translated_tempcode('authors', $details, 'the_description');

        // Skills
        $skills = cms_empty_safe($details['skills']) ? new Tempcode() : get_translated_tempcode('authors', $details, 'skills');

        // Search link
        if (addon_installed('search')) {
            $search_url = build_url(['page' => 'search', 'author' => $author], get_module_zone('search'));
            $search_details = do_template('AUTHOR_SCREEN_POTENTIAL_ACTION_ENTRY', ['_GUID' => '6fccd38451bc1198024e2452f8539411', 'ACTION' => hyperlink($search_url, do_lang_tempcode('SEARCH'), false, false)]);
        } else {
            $search_details = new Tempcode();
        }

        // Downloads
        // Not done via main_multi_content block due to need for custom query
        $downloads_released = new Tempcode();
        if (addon_installed('downloads')) {
            require_code('downloads');
            require_lang('downloads');

            $count = $GLOBALS['SITE_DB']->query_select_value('download_downloads', 'COUNT(*)', ['author' => $author, 'validated' => 1]);
            if ($count > 50) {
                $downloads_released = paragraph(do_lang_tempcode('TOO_MANY_TO_CHOOSE_FROM'));
            } else {
                $rows = $GLOBALS['SITE_DB']->query_select('download_downloads', ['*'], ['author' => $author, 'validated' => 1], 'ORDER BY add_date');
                foreach ($rows as $myrow) {
                    if (addon_installed('content_privacy')) {
                        require_code('content_privacy');
                        if (!has_privacy_access('download', strval($myrow['id']))) {
                            continue;
                        }
                    }

                    if (may_enter_download_category(get_member(), $myrow['category_id'])) {
                        require_code('downloads');
                        $downloads_released->attach(render_download_box($myrow, true, true/*breadcrumbs?*/, null, null, false/*context?*/));
                    }
                }
            }
        }

        // News
        // Not done via main_multi_content block due to need for custom query
        $news_released = new Tempcode();
        if (addon_installed('news')) {
            require_lang('news');

            $count = $GLOBALS['SITE_DB']->query_select_value('news', 'COUNT(*)', ['author' => $author, 'validated' => 1]);
            if ($count > 50) {
                $news_released = paragraph(do_lang_tempcode('TOO_MANY_TO_CHOOSE_FROM'));
            } else {
                $rows = $GLOBALS['SITE_DB']->query_select('news', ['*'], ['author' => $author, 'validated' => 1], 'ORDER BY date_and_time');
                foreach ($rows as $i => $row) {
                    if (addon_installed('content_privacy')) {
                        require_code('content_privacy');
                        if (!has_privacy_access('news', strval($row['id']))) {
                            continue;
                        }
                    }

                    if (has_category_access(get_member(), 'news', strval($row['news_category']))) {
                        require_code('news');
                        $news_released->attach(render_news_box($row, '_SEARCH', false, true));
                    }
                }
            }
        }

        // Edit link
        $edit_url = new Tempcode();
        if (has_edit_author_permission(get_member(), $author)) {
            $edit_url = build_url(['page' => 'cms_authors', 'type' => '_add', 'id' => $author], get_module_zone('cms_authors'));
        }

        return do_template('AUTHOR_SCREEN', [
            '_GUID' => 'ea789367b15bc90fc28d1c586e6e6536',
            'TAGS' => get_loaded_tags(),
            'TITLE' => $this->title,
            'EDIT_URL' => $edit_url,
            'AUTHOR' => $author,
            'NEWS_RELEASED' => $news_released,
            'DOWNLOADS_RELEASED' => $downloads_released,
            'POINT_DETAILS' => $point_details,
            'SEARCH_DETAILS' => $search_details,
            'URL_DETAILS' => $url_details,
            'FORUM_DETAILS' => $forum_details,
            'SKILLS' => $skills,
            'DESCRIPTION' => $description,
        ]);
    }
}
