<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    wiki
 */

/**
 * Module page class.
 */
class Module_wiki
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 11;
        $info['update_require_upgrade'] = true;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'wiki';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $tables = [
            'wiki_children',
            'wiki_pages',
            'wiki_posts',
        ];
        $GLOBALS['SITE_DB']->drop_table_if_exists($tables);

        $privileges = [
            'wiki_manage_tree',
            'wiki_edit_pages',
            'wiki_edit',
        ];
        delete_privilege($privileges);

        $values = [
            'num_wiki_pages',
            'num_wiki_posts',
            'num_wiki_files',
        ];
        delete_values($values);

        delete_attachments('wiki_page');
        delete_attachments('wiki_post');

        $GLOBALS['SITE_DB']->query_delete('group_category_access', ['module_the_name' => 'wiki_page']);
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        require_lang('wiki');

        require_code('lang3');

        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('wiki_children', [
                'parent_id' => '*AUTO_LINK',
                'child_id' => '*AUTO_LINK',
                'the_order' => 'INTEGER',
                'title' => 'SHORT_TEXT',
            ]);

            $GLOBALS['SITE_DB']->create_table('wiki_pages', [
                'id' => '*AUTO',
                'title' => 'SHORT_TRANS',
                'notes' => 'LONG_TEXT',
                'the_description' => 'LONG_TRANS__COMCODE',
                'add_date' => 'TIME',
                'edit_date' => '?TIME',
                'wiki_views' => 'INTEGER',
                'show_posts' => 'BINARY',
                'submitter' => 'MEMBER',
            ]);

            $GLOBALS['SITE_DB']->create_index('wiki_pages', 'sps', ['submitter']);
            $GLOBALS['SITE_DB']->create_index('wiki_pages', 'sadd_date', ['add_date']);

            $map = [
                'submitter' => $GLOBALS['FORUM_DRIVER']->get_guest_id() + 1,
                'edit_date' => null,
                'show_posts' => 1,
                'wiki_views' => 0,
                'add_date' => time(),
                'notes' => '',
            ];
            $map += insert_lang_comcode('the_description', '', 2);
            $map += lang_code_to_default_content('title', 'WIKI_HOME', false, 1);
            $GLOBALS['SITE_DB']->query_insert('wiki_pages', $map);
            require_code('permissions2');
            set_global_category_access('wiki_page', db_get_first_id());

            add_privilege('WIKI', 'wiki_manage_tree', false);

            $GLOBALS['SITE_DB']->create_table('wiki_posts', [
                'id' => '*AUTO',
                'page_id' => 'AUTO_LINK',
                'the_message' => 'LONG_TRANS__COMCODE',
                'date_and_time' => 'TIME',
                'validated' => 'BINARY',
                'validation_time' => '?TIME',
                'wiki_views' => 'INTEGER',
                'member_id' => 'MEMBER',
                'edit_date' => '?TIME',
            ]);

            $GLOBALS['SITE_DB']->create_index('wiki_posts', 'posts_on_page', ['page_id']);
            $GLOBALS['SITE_DB']->create_index('wiki_posts', 'cdate_and_time', ['date_and_time']);
            $GLOBALS['SITE_DB']->create_index('wiki_posts', 'svalidated', ['validated']);

            $GLOBALS['SITE_DB']->create_index('wiki_posts', 'ftjoin_spm', ['the_message']);
            $GLOBALS['SITE_DB']->create_index('wiki_pages', 'ftjoin_spt', ['title']);
            $GLOBALS['SITE_DB']->create_index('wiki_pages', 'ftjoin_spd', ['the_description']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 9)) { // LEGACY
            $GLOBALS['SITE_DB']->rename_table('seedy_children', 'wiki_children');
            $GLOBALS['SITE_DB']->rename_table('seedy_pages', 'wiki_pages');
            $GLOBALS['SITE_DB']->rename_table('seedy_posts', 'wiki_posts');

            $GLOBALS['SITE_DB']->alter_table_field('wiki_pages', 'seedy_views', 'INTEGER', 'wiki_views');

            $GLOBALS['SITE_DB']->alter_table_field('wiki_posts', 'seedy_views', 'INTEGER', 'wiki_views');
            $GLOBALS['SITE_DB']->alter_table_field('wiki_posts', 'the_user', 'MEMBER', 'member_id');

            $GLOBALS['SITE_DB']->add_table_field('wiki_pages', 'edit_date', '?TIME');

            rename_config_option('points_cedi', 'points_wiki');
            rename_config_option('cedi_show_stats_count_pages', 'wiki_show_stats_count_pages');
            rename_config_option('cedi_show_stats_count_posts', 'wiki_show_stats_count_posts');

            rename_privilege('seedy_manage_tree', 'wiki_manage_tree');
            rename_privilege('seedy_edit_pages', 'wiki_edit_pages');
            rename_privilege('seedy_edit', 'wiki_edit');

            $GLOBALS['SITE_DB']->query_update('group_category_access', ['module_the_name' => 'wiki_page'], ['module_the_name' => 'seedy_page']);
            $GLOBALS['SITE_DB']->query_update('group_privileges', ['module_the_name' => 'wiki_page'], ['module_the_name' => 'seedy_page']);
            $GLOBALS['SITE_DB']->query_update('group_privileges', ['the_page' => 'wiki'], ['the_page' => 'cedi']);
            $GLOBALS['SITE_DB']->query_update('group_page_access', ['page_name' => 'wiki'], ['page_name' => 'cedi']);
            $GLOBALS['SITE_DB']->query_update('group_page_access', ['page_name' => 'cms_wiki'], ['page_name' => 'cms_cedi']);

            $GLOBALS['SITE_DB']->query_update('notifications_enabled', ['l_notification_code' => 'wiki'], ['l_notification_code' => 'cedi']);

            $GLOBALS['SITE_DB']->query_update('attachment_refs', ['r_referer_type' => 'wiki_post'], ['r_referer_type' => 'cedi_post']);
            $GLOBALS['SITE_DB']->query_update('attachment_refs', ['r_referer_type' => 'wiki_page'], ['r_referer_type' => 'cedi_page']);

            $GLOBALS['SITE_DB']->query_update('translate', ['text_original' => 'cms_points_gained_wiki'], ['text_original' => 'cms_points_gained_seedy']);

            if (addon_installed('catalogues')) {
                foreach (['catalogues', 'catalogue_categories', 'catalogue_fields', 'catalogue_entries'] as $table) {
                    $GLOBALS['SITE_DB']->query_update($table, ['c_name' => '_wiki_post'], ['c_name' => '_seedy_post']);
                }
            }
            $GLOBALS['SITE_DB']->query_update('catalogue_entry_linkage', ['content_type' => 'wiki_page'], ['content_type' => 'cedi_page']);
            $GLOBALS['SITE_DB']->query_update('catalogue_entry_linkage', ['content_type' => 'wiki_post'], ['content_type' => 'cedi_post']);

            $GLOBALS['SITE_DB']->drop_table_if_exists('seedy_changes');

            $GLOBALS['SITE_DB']->query_update('privilege_list', ['p_section' => 'WIKI'], ['p_section' => 'SEEDY']);

            $GLOBALS['SITE_DB']->delete_index_if_exists('wiki_posts', 'seedy_views');
            $GLOBALS['SITE_DB']->delete_index_if_exists('wiki_pages', 'seedy_views');
            $GLOBALS['SITE_DB']->delete_index_if_exists('wiki_posts', 'spos');
        }

        if (($upgrade_from === null) || ($upgrade_from < 9)) {
            $GLOBALS['SITE_DB']->create_index('wiki_pages', '#wiki_search__combined', ['title', 'the_description']);

            $GLOBALS['SITE_DB']->create_index('wiki_posts', 'wiki_views', ['wiki_views']);
            $GLOBALS['SITE_DB']->create_index('wiki_pages', 'wiki_views', ['wiki_views']);
            $GLOBALS['SITE_DB']->create_index('wiki_posts', 'spos', ['member_id']);
        }

        if (($upgrade_from === null) || ($upgrade_from < 10)) {
            $GLOBALS['SITE_DB']->create_index('wiki_posts', 'member_id', ['member_id']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 10)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('wiki_pages', 'hide_posts', 'BINARY', 'show_posts');
            $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'wiki_pages SET show_posts=1-show_posts');
            $GLOBALS['SITE_DB']->alter_table_field('wiki_pages', 'description', 'LONG_TRANS__COMCODE', 'the_description');

            $GLOBALS['FORUM_DRIVER']->install_delete_custom_field('points_gained_wiki');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 11)) { // LEGACY: 11.beta7
            $GLOBALS['SITE_DB']->add_table_field('wiki_posts', 'validation_time', '?TIME');
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('wiki')) {
            return null;
        }

        $ret = [
            'browse' => ['WIKI_HOME', 'menu/rich_content/wiki'],
            'random' => ['RANDOM_PAGE', 'menu/rich_content/wiki/random_page'],
        ];
        if (addon_installed('actionlog')) {
            $ret['revisions'] = ['REVISIONS', 'admin/revisions'];
        }
        return $ret;
    }

    public $title;
    public $id;
    public $chain;
    public $page;
    public $current_title;
    public $title_to_use;
    public $title_to_use_2;
    public $db_posts;
    public $num_posts;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('wiki', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_lang('wiki');
        require_code('wiki');

        inject_feed_url('?mode=wiki&select=', do_lang('WIKI_PAGES'));

        if ($type == 'browse') {
            // Find our page by whatever means
            $find = get_param_string('find', '', INPUT_FILTER_GET_COMPLEX);
            if ($find != '') { // Allow quick 'find' remapping to a real ID
                $id = $GLOBALS['SITE_DB']->query_select_value_if_there('wiki_pages', 'id', [$GLOBALS['SITE_DB']->translate_field_ref('title') => $find]);
                if ($id === null) {
                    $this->title = get_screen_title('ERROR_OCCURRED');
                    $add_access = (has_submit_permission('low', get_member(), get_ip_address(), 'cms_wiki'));
                    require_lang('zones');
                    $add_url = $add_access ? build_url(['page' => 'cms_wiki', 'type' => 'add_page', 'id' => $find, 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('cms_wiki')) : new Tempcode();
                    return do_template('MISSING_SCREEN', [
                        '_GUID' => 'ba778c816860a9594983ed9ef03d0c42',
                        'TITLE' => $this->title,
                        'ADD_URL' => $add_url,
                        'PAGE' => $find,
                        'SKIP_SITEMAP' => false,
                    ]);
                }
                $chain = wiki_derive_chain($id);
            } else {
                list($id, $chain) = get_param_wiki_chain('id', strval(db_get_first_id()));
            }
            $pages = $GLOBALS['SITE_DB']->query_select('wiki_pages', ['*'], ['id' => $id], '', 1);

            // Display title
            if (!array_key_exists(0, $pages)) {
                return warn_screen(get_screen_title('WIKI'), do_lang_tempcode('MISSING_RESOURCE', 'wiki_page'));
            }
            $page = $pages[0];
            $current_title = get_translated_text($page['title']);
            $title_to_use = do_lang_tempcode('WIKI_PAGE', escape_html($current_title));
            $title_to_use_2 = do_lang('WIKI_PAGE', $current_title);
            if ((get_value('disable_awards_in_titles') !== '1') && (addon_installed('awards'))) {
                require_code('awards');
                $awards = find_awards_for('wiki_page', strval($page['id']));
            } else {
                $awards = [];
            }
            $this->title = get_screen_title($title_to_use, false, [], null, $awards);

            if (!has_category_access(get_member(), 'wiki_page', strval($page['id']))) {
                access_denied('CATEGORY_ACCESS');
            }

            seo_meta_load_for('wiki_page', strval($id), $title_to_use_2);

            // Build up navigation tree
            $breadcrumbs = wiki_breadcrumbs($chain, $current_title, has_privilege(get_member(), 'open_virtual_roots') && (get_option('virtual_root_links') == '1'), true, true);

            $where_map = ['page_id' => $id];
            if ((!has_privilege(get_member(), 'see_not_validated')) && (addon_installed('validation'))) {
                $where_map['validated'] = 1;
            }

            $db_posts = $GLOBALS['SITE_DB']->query_select('wiki_posts', ['*'], $where_map, 'ORDER BY date_and_time', intval(get_option('general_safety_listing_limit')));
            $num_posts = count($db_posts);

            set_extra_request_metadata([
                'identifier' => '_SEARCH:wiki:browse:' . strval($page['id']),
                'numposts' => strval($num_posts),
            ], $page, 'wiki_page', strval($id));

            breadcrumb_set_parents($breadcrumbs);

            // Redefined canonical URL
            global $CANONICAL_URL, $NON_CANONICAL_PARAMS;
            $non_canonical = [];
            if (is_array($NON_CANONICAL_PARAMS)) {
                foreach (array_keys($NON_CANONICAL_PARAMS) as $n) {
                    $non_canonical[$n] = null;
                }
            }
            $CANONICAL_URL = get_self_url(true, false, $non_canonical + ['type' => 'browse', 'id' => $id, 'find' => null]);

            $this->id = $id;
            $this->chain = $chain;
            $this->page = $page;
            $this->current_title = $current_title;
            $this->title_to_use = $title_to_use;
            $this->title_to_use_2 = $title_to_use_2;
            $this->db_posts = $db_posts;
            $this->num_posts = $num_posts;
        }

        if (($type == 'revisions') && addon_installed('actionlog')) {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('WIKI')]]);

            $this->title = get_screen_title('actionlog:REVISIONS');
        }

        if ($type == 'post') {
            $_chain = get_param_wiki_chain('id', strval(db_get_first_id()));
            $chain = $_chain[1];

            $posting = (get_param_integer('post_id', null) === null);

            $breadcrumbs = wiki_breadcrumbs($chain, null, true, true);
            $breadcrumbs[] = ['', do_lang_tempcode($posting ? 'MAKE_POST' : 'SAVE')];
            breadcrumb_set_parents($breadcrumbs);

            if ($posting) {
                $this->title = get_screen_title('WIKI_MAKE_POST');
            } else {
                $this->title = get_screen_title('WIKI_EDIT_POST');
            }

            $this->chain = $chain;
        }

        if ($type == '_post') {
            $posting = (post_param_integer('post_id', null) === null);

            if ($posting) {
                $this->title = get_screen_title('WIKI_MAKE_POST');
            } else {
                $this->title = get_screen_title('WIKI_EDIT_POST');
            }
        }

        if (($type == 'merge') || ($type == '_merge')) {
            $this->title = get_screen_title('MERGE_WIKI_POSTS');
        }

        if (($type == 'move') || ($type == '_move')) {
            $this->title = get_screen_title('WIKI_MOVE_POST');
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        $type = get_param_string('type', 'browse');

        require_css('wiki');

        // Decide what to do
        if ($type == 'findpost') {
            $post_id = get_param_integer('id');
            $page_id = $GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'page_id', ['id' => $post_id]);
            $redirect = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $page_id], '_SELF', [], false, false, false, 'post_' . strval($post_id));
            return redirect_screen(get_screen_title('WIKI'), $redirect);
        }
        if ($type == 'browse') {
            return $this->page();
        }
        if ($type == 'random') {
            return $this->random();
        }
        if (($type == 'revisions') && addon_installed('actionlog')) {
            return $this->revisions();
        }
        if ($type == 'merge') {
            return $this->do_wiki_merge_interface();
        }
        if ($type == '_merge') {
            return $this->do_wiki_merge();
        }
        if ($type == 'move') {
            return $this->move();
        }
        if ($type == '_move') {
            return $this->_move();
        }
        if ($type == 'post') {
            return $this->post();
        }
        if ($type == '_post') {
            return $this->_post();
        }

        return new Tempcode();
    }

    /**
     * Redirect to a random page.
     *
     * @return Tempcode The UI
     */
    public function random() : object
    {
        attach_message(do_lang_tempcode('TAKEN_RANDOM_WIKI_PAGE'), 'inform');

        $id = $GLOBALS['SITE_DB']->query_select_value('wiki_pages', 'id', [], ' ORDER BY ' . db_function('RAND'));
        $redir_url = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $id], '_SELF');
        return redirect_screen(get_screen_title('RANDOM_PAGE'), $redir_url);
    }

    /**
     * The UI to show a page.
     *
     * @return Tempcode The UI
     */
    public function page() : object
    {
        $id = $this->id;
        $chain = $this->chain;
        $page = $this->page;
        $current_title = $this->current_title;
        $db_posts = $this->db_posts;
        $num_posts = $this->num_posts;

        require_code('feedback');

        // We will use Conversr styling
        require_lang('cns');

        if (get_option('wiki_enable_content_posts') == '0') {
            $page['show_posts'] = 0;
        }

        // Views
        cms_register_shutdown_function_safe(function () use ($page, $id) {
            $increment = statistical_update_model('wiki_pages', $page['wiki_views']);
            if ($increment != 0) {
                $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'wiki_pages SET wiki_views=wiki_views+' . strval($increment) . ' WHERE id=' . strval($id), 1, 0, true); // Errors suppressed in case DB write access broken
            }
        });

        // Description
        $description = get_translated_tempcode('wiki_pages', $page, 'the_description');

        // Child Links
        $children = [];
        if (get_option('wiki_enable_children') == '1') {
            $children_rows = $GLOBALS['SITE_DB']->query_select('wiki_children c LEFT JOIN ' . get_table_prefix() . 'wiki_pages p ON c.child_id=p.id', ['child_id', 'c.title', 'show_posts', 'the_description'], ['c.parent_id' => $id], 'ORDER BY c.the_order');
            foreach ($children_rows as $myrow) {
                $child_id = $myrow['child_id'];

                if ($myrow['the_description'] === null) {
                    continue; // Broken database reference
                }

                if (!has_category_access(get_member(), 'wiki_page', strval($child_id))) {
                    continue;
                }

                if (get_option('wiki_enable_content_posts') == '0') {
                    $myrow['show_posts'] = 0;
                }

                $child_title = $myrow['title'];

                $child_description = get_translated_text($myrow['the_description']);

                $my_child_posts = $GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'COUNT(*)', ['page_id' => $child_id]);
                $my_child_children = $GLOBALS['SITE_DB']->query_select_value('wiki_children', 'COUNT(*)', ['parent_id' => $child_id]);

                $url = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => wiki_derive_chain($child_id)], '_SELF');
                $children[] = [
                    'URL' => $url,
                    'CHILD' => $child_title,

                    '_MY_CHILD_POSTS' => strval($my_child_posts),
                    '_MY_CHILD_CHILDREN' => strval($my_child_children),
                    'MY_CHILD_POSTS' => integer_format($my_child_posts, 0),
                    'MY_CHILD_CHILDREN' => integer_format($my_child_children, 0),
                    'BODY_CONTENT' => (trim($child_description) != '') ? strval(strlen($child_description)) : '0',
                    'SHOW_POSTS' => $myrow['show_posts'] == 1,
                ];
            }
        }

        $staff_access = has_privilege(get_member(), 'edit_lowrange_content', 'cms_wiki', ['wiki_page', $id]);

        // Main text (posts)
        $posts = new Tempcode();
        foreach ($db_posts as $myrow) {
            // Work out posters details
            $poster = $myrow['member_id'];
            $username = $GLOBALS['FORUM_DRIVER']->get_username($poster);

            $post_id = $myrow['id'];

            // Date post was made
            $post_date_raw = $myrow['date_and_time'];
            $post_date = get_timezoned_date_time($myrow['date_and_time']);

            // Rating
            actualise_rating(true, 'wiki_post', strval($post_id), build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $chain], '_SELF'), $current_title);
            $rating_array = get_rating_simple_array(build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $chain], '_SELF'), $current_title, 'wiki_post', strval($post_id), 'WIKI_RATING_FORM', $poster);
            if ($rating_array !== null) {
                $rating = do_template('WIKI_RATING', $rating_array);
            } else {
                $rating = new Tempcode();
            }

            // Display the post then ;)
            $post_comcode = get_translated_text($myrow['the_message']);
            $include_expansion_here = (strpos($post_comcode, '[attachment') !== false);
            $post = get_translated_tempcode('wiki_posts', $myrow, 'the_message');
            if ((has_edit_permission('low', get_member(), $poster, 'cms_wiki', ['wiki_page', $id])) && (($id != db_get_first_id()) || (has_privilege(get_member(), 'feature')))) {
                $edit_url = build_url(['page' => '_SELF', 'type' => 'post', 'id' => $chain, 'post_id' => $post_id], '_SELF');
                $extra = do_template('BUTTON_SCREEN_ITEM', [
                    '_GUID' => '37404e2e5cf7e4cb806f796e9df90898',
                    'REL' => 'edit',
                    'IMMEDIATE' => false,
                    'URL' => $edit_url,
                    'FULL_TITLE' => do_lang_tempcode('EDIT'),
                    'TITLE' => do_lang_tempcode('EDIT'),
                    'IMG' => 'admin/edit',
                ]);
                $move_url = build_url(['page' => '_SELF', 'type' => 'move', 'id' => $chain, 'post_id' => $post_id], '_SELF');
                $extra->attach(do_template('BUTTON_SCREEN_ITEM', ['_GUID' => 'b4325cd1bac924cc83771d4c3c41be8b', 'REL' => 'move', 'IMMEDIATE' => false, 'URL' => $move_url, 'FULL_TITLE' => do_lang_tempcode('MOVE'), 'TITLE' => do_lang_tempcode('MOVE'), 'IMG' => 'admin/move']));
            } else {
                $extra = new Tempcode();
            }
            $poster_url = is_guest($poster) ? '' : $GLOBALS['FORUM_DRIVER']->member_profile_url($poster, true);
            $rate_url = get_self_url(true);
            $posts->attach(do_template('WIKI_POST', [
                '_GUID' => 'a29b107abfaf7689c8392676c63093f5',
                'INCLUDE_EXPANSION' => $include_expansion_here,
                'NOT_VALIDATED' => ($myrow['validated'] == 0) ? do_lang_tempcode('NOT_VALIDATED') : new Tempcode(),
                'STAFF_ACCESS' => $staff_access,
                'RATE_URL' => $rate_url . '#post_' . strval($post_id),
                'RATING' => $rating,
                'ID' => strval($myrow['id']),
                'POSTER_URL' => $poster_url,
                'POSTER' => $username,
                'POST_DATE_RAW' => strval($post_date_raw),
                'POST_DATE' => $post_date,
                'POST' => $post,
                'BUTTONS' => $extra,
            ]));
        }

        if ($num_posts >= intval(get_option('general_safety_listing_limit'))) {
            attach_message(do_lang_tempcode('TOO_MANY_WIKI_POSTS'), 'notice');
        }

        $buttons = $this->_render_screen_buttons($chain, $id, $num_posts < intval(get_option('general_safety_listing_limit')));

        return do_template('WIKI_PAGE_SCREEN', [
            '_GUID' => '1840d6934be3344c4f93a159fc737a45',
            'TAGS' => get_loaded_tags('wiki_pages'),
            'SHOW_POSTS' => $page['show_posts'] == 1,
            'ID' => strval($id),
            'CHAIN' => $chain,
            '_VIEWS' => strval($page['wiki_views']),
            'VIEWS' => integer_format($page['wiki_views'], 0),
            'STAFF_ACCESS' => $staff_access,
            'DESCRIPTION' => $description,
            'TITLE' => $this->title,
            'CHILDREN' => $children,
            'POSTS' => $posts,
            '_NUM_POSTS' => strval($num_posts),
            'NUM_POSTS' => integer_format($num_posts, 0),
            'BUTTONS' => $buttons,
        ]);
    }

    /**
     * Show the buttons on the Wiki+ page viewing screen.
     *
     * @param  SHORT_TEXT $chain The ID chain being used to get to this page
     * @param  AUTO_LINK $id The ID of the page we are showing the menu on
     * @param  boolean $may_post Whether posting is generally allowed (may be passed false if too many posts)
     * @return Tempcode The button Tempcode
     */
    public function _render_screen_buttons(string $chain, int $id, bool $may_post = true) : object
    {
        /*if ((addon_installed('search')) && (has_actual_page_access(get_member(),'search'))) { // Not enough space
            $search_url = build_url(['page' => 'search', 'type' => 'browse', 'id' => 'wiki_posts', 'search_under' => $id], get_module_zone('search'));
            $search_button = do_template('BUTTON_SCREEN', [
                '_GUID' => 'ad8783a0af3a35f21022b30397f1b03e',
                'IMMEDIATE' => false,
                'REL' => 'search',
                'URL' => $search_url,
                'TITLE' => do_lang_tempcode('SEARCH'),
                'IMG' => 'buttons/search',
            ]);
        } else */
        $search_button = new Tempcode();
        $revisions_button = new Tempcode();

        if (addon_installed('actionlog')) {
            $revisions_url = build_url(['page' => '_SELF', 'type' => 'revisions', 'id' => $chain], '_SELF');
            $revisions_button = do_template('BUTTON_SCREEN', [
                '_GUID' => '99ad7faac817326510583a69ac719d58',
                'IMMEDIATE' => false,
                'REL' => 'revisions',
                'URL' => $revisions_url,
                'TITLE' => do_lang_tempcode('actionlog:REVISIONS'),
                'IMG' => 'admin/revisions',
            ]);
        }

        if ((get_option('wiki_enable_children') == '1') && (has_privilege(get_member(), 'wiki_manage_tree', 'cms_wiki', ['wiki_page', $id])) && (has_actual_page_access(get_member(), 'cms_wiki'))) {
            $tree_url = build_url(['page' => 'cms_wiki', 'type' => 'edit_tree', 'id' => $chain, 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('cms_wiki'));
            $tree_button = do_template('BUTTON_SCREEN', [
                '_GUID' => 'e6edc9f39b6b0aff86cffbaa98c51827',
                'REL' => 'edit',
                'IMMEDIATE' => false,
                'URL' => $tree_url,
                'TITLE' => do_lang_tempcode('__WIKI_EDIT_TREE'),
                'IMG' => 'admin/wiki_edit_tree',
            ]);
        } else {
            $tree_button = new Tempcode();
        }

        if ((has_edit_permission('cat_low', get_member(), null, 'cms_wiki', ['wiki_page', $id])) && (has_actual_page_access(get_member(), 'cms_wiki'))) {
            $edit_url = build_url(['page' => 'cms_wiki', 'type' => 'edit_page', 'id' => $chain, 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('cms_wiki'));
            $edit_button = do_template('BUTTON_SCREEN', [
                '_GUID' => '5d8783a0af3a35f21022b30397f1b03e',
                'REL' => 'edit',
                'IMMEDIATE' => false,
                'URL' => $edit_url,
                'TITLE' => do_lang_tempcode('_WIKI_EDIT_PAGE'),
                'IMG' => 'admin/edit',
            ]);
        } else {
            $edit_button = new Tempcode();
        }

        if (($may_post) && (has_submit_permission('low', get_member(), get_ip_address(), 'cms_wiki', ['wiki_page', $id])) && (($id != db_get_first_id()) || (has_privilege(get_member(), 'feature')))) {
            $post_url = build_url(['page' => '_SELF', 'type' => 'post', 'id' => $chain], '_SELF');
            $post_button = do_template('BUTTON_SCREEN', [
                '_GUID' => 'c26462f34a64c4bf80c1fb7c40102eb0',
                'IMMEDIATE' => false,
                'URL' => $post_url,
                'TITLE' => do_lang_tempcode('MAKE_POST'),
                'IMG' => 'buttons/new_reply',
            ]);
        } else {
            $post_button = new Tempcode();
        }

        $tpl = new Tempcode();
        $tpl->attach($search_button);
        if (addon_installed('actionlog')) {
            $tpl->attach($revisions_button);
        }
        $tpl->attach($post_button);
        $tpl->attach($tree_button);
        $tpl->attach($edit_button);
        return $tpl;
    }

    /**
     * The UI to show revisions.
     * More details are shown in the actionlog, which is linked from here.
     *
     * @return Tempcode The UI
     */
    public function revisions() : object
    {
        $_id = get_param_string('id', null);
        $id = null;
        if ($_id !== null) {
            list($id,) = get_param_wiki_chain('id');
        }

        $_header_rows = [
            do_lang_tempcode('PAGE'),
            do_lang_tempcode('MEMBER'),
            do_lang_tempcode('DATE'),
            do_lang_tempcode('ACTION'),
        ];

        require_code('revisions_engine_database');
        $revision_engine = new RevisionEngineDatabase();
        return $revision_engine->ui_revisions_browser(
            $this->title,
            $_header_rows,
            ['wiki_page', 'wiki_post'],
            [$this, '_render_revision'],
            null,
            ($id === null) ? null : strval($id),
            null,
            'wiki_page'
        );
    }

    /**
     * Render a revision.
     *
     * @param  array $revision A revision map
     * @return ?Tempcode A rendered revision row (null: won't render)
     */
    public function _render_revision(array $revision) : ?object
    {
        $_id = get_param_string('id', null);
        $id = null;
        if ($_id !== null) {
            list($id,) = get_param_wiki_chain('id');
        }

        $page_id = intval($revision['r_category_id']);

        $l = $GLOBALS['SITE_DB']->query_select_value_if_there('wiki_pages', 'title', ['id' => $page_id]);
        if ($l === null) {
            return null;
        }

        $chain = ($id === null) ? wiki_derive_chain($page_id) : $_id;
        $view_link = span(breadcrumb_segments_to_tempcode(wiki_breadcrumbs($chain, get_translated_text($l), true)), '', 'breadcrumbs');

        $member_link = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($revision['log_member_id']);

        $date = get_timezoned_date_time($revision['log_time']);

        $action = do_lang_tempcode($revision['log_action']);
        $do_actionlog = has_actual_page_access(get_member(), 'admin_actionlog');
        if ($do_actionlog) {
            $actionlog_url = build_url(['page' => 'admin_actionlog', 'type' => 'view', 'id' => ($revision['r_actionlog_id'] === null) ? $revision['r_moderatorlog_id'] : $revision['r_actionlog_id'], 'mode' => ($revision['r_actionlog_id'] === null) ? 'cns' : 'cms'], get_module_zone('admin_actionlog'));
            $action = hyperlink($actionlog_url, $action, false, false, strval($revision['r_actionlog_id']));
        }

        $_revision = [
            $view_link,
            $member_link,
            escape_html($date),
            $action,
        ];
        require_code('templates_results_table');
        return results_entry($_revision, false);
    }

    /**
     * Get markers of posts from the POST/GET.
     *
     * @return array A list of markers
     */
    public function get_markers() : array
    {
        $markers = [];
        foreach (array_keys($_REQUEST) as $key) {
            if (substr($key, 0, 5) == 'mark_') {
                $markers[] = intval(substr($key, 5));
            }
        }
        return $markers;
    }

    /**
     * The UI for merging Wiki+ posts.
     *
     * @return Tempcode The UI
     */
    public function do_wiki_merge_interface() : object
    {
        $_redir_url = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => get_param_string('id', false, INPUT_FILTER_GET_COMPLEX)], '_SELF');
        $merge_url = build_url(['page' => '_SELF', 'type' => '_merge', 'id' => get_param_string('id', false, INPUT_FILTER_GET_COMPLEX), 'redirect' => protect_url_parameter($_redir_url)], '_SELF', [], true);

        $merged = '';
        $markers = $this->get_markers();
        if (empty($markers)) {
            warn_exit(do_lang_tempcode('NOTHING_SELECTED'), false, false, 400);
        }
        foreach ($markers as $id) {
            $rows = $GLOBALS['SITE_DB']->query_select('wiki_posts', ['*'], ['id' => $id], '', 1);
            if (!array_key_exists(0, $rows)) {
                continue;
            }
            $myrow = $rows[0];

            if (!has_category_access(get_member(), 'wiki_page', strval($myrow['page_id']))) {
                access_denied('CATEGORY_ACCESS');
            }
            check_edit_permission('low', null, ['wiki_page', $myrow['page_id']], 'cms_wiki');

            if ($merged != '') {
                $merged .= "\n\n";
            }
            $merged .= get_translated_text($myrow['the_message']);
        }

        require_code('form_templates');

        $posting_form = get_posting_form(do_lang('MERGE_WIKI_POSTS'), 'admin/merge', $merged, $merge_url, new Tempcode(), new Tempcode());

        return do_template('POSTING_SCREEN', [
            '_GUID' => '4372327fb689ef70a9ac5d275dd454f1',
            'POSTING_FORM' => $posting_form,
            'TITLE' => $this->title,
            'TEXT' => do_lang_tempcode('WIKI_MERGE_TEXT'),
        ]);
    }

    /**
     * The actualiser for merging Wiki+ posts.
     *
     * @return Tempcode The UI
     */
    public function do_wiki_merge() : object
    {
        check_edit_permission('low', null, ['wiki_page', get_param_string('id', false, INPUT_FILTER_GET_COMPLEX)], 'cms_wiki');

        require_code('comcode_check');

        @ignore_user_abort(true);

        $page_id = get_param_integer('id');

        $page_title = $GLOBALS['SITE_DB']->query_select_value('wiki_pages', 'title', ['id' => $page_id]);

        $message = post_param_string('post');
        check_comcode($message, null, false, null, true);
        $map = [
            'edit_date' => null,
            'member_id' => get_member(),
            'date_and_time' => time(),
            'page_id' => $page_id,
            'validated' => 1,
            'wiki_views' => 0,
        ];
        if (multi_lang_content()) {
            $map['the_message'] = 0;
        } else {
            $map['the_message'] = '';
            $map['the_message__text_parsed'] = '';
            $map['the_message__source_user'] = get_member();
        }
        $post_id = $GLOBALS['SITE_DB']->query_insert('wiki_posts', $map, true);
        require_code('attachments2');
        $map = [];
        $map += insert_lang_comcode_attachments('the_message', 2, $message, 'wiki_post', strval($post_id));
        $GLOBALS['SITE_DB']->query_update('wiki_posts', $map, ['id' => $post_id], '', 1);

        @ignore_user_abort(false);

        $markers = $this->get_markers();
        foreach ($markers as $id) {
            wiki_delete_post($id);
        }

        log_it('MERGE_WIKI_POSTS', strval($page_id), $page_title);

        // Show it worked / Refresh
        $url = get_param_string('redirect', false, INPUT_FILTER_URL_INTERNAL);
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI for moving a Wiki+ post.
     *
     * @return Tempcode The UI
     */
    public function move() : object
    {
        $_id = get_param_wiki_chain('id');
        $id = $_id[0];
        $post_id = get_param_integer('post_id');

        $original_poster = $GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'member_id', ['id' => $post_id]);

        $true_page_id = $GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'page_id', ['id' => $post_id]);
        if (!has_category_access(get_member(), 'wiki_page', strval($true_page_id))) {
            access_denied('CATEGORY_ACCESS');
        }
        check_edit_permission('low', $original_poster, ['wiki_page', $true_page_id], 'cms_wiki');

        $_redir_url = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => get_param_string('id', false, INPUT_FILTER_GET_COMPLEX)], '_SELF');
        $move_url = build_url(['page' => '_SELF', 'type' => '_move', 'id' => get_param_string('id', false, INPUT_FILTER_GET_COMPLEX), 'redirect' => protect_url_parameter($_redir_url)], '_SELF');

        require_code('form_templates');

        $fields = form_input_tree_list(do_lang_tempcode('DESTINATION'), '', 'new_page', null, 'choose_wiki_page', [], true, strval($id));

        $hidden = form_input_hidden('source', strval($post_id));

        return do_template('FORM_SCREEN', [
            '_GUID' => 'f231626424aa83d75df571a818665152',
            'SKIP_WEBSTANDARDS' => true,
            'TITLE' => $this->title,
            'URL' => $move_url,
            'TEXT' => do_lang_tempcode('SELECT_TARGET_POST_DESTINATION'),
            'FIELDS' => $fields,
            'HIDDEN' => $hidden,
            'SUBMIT_ICON' => 'admin/move',
            'SUBMIT_NAME' => do_lang_tempcode('MOVE'),
        ]);
    }

    /**
     * The actualiser for moving a Wiki+ post.
     *
     * @return Tempcode The UI
     */
    public function _move() : object
    {
        $post_id = post_param_integer('source');
        $target = post_param_integer('new_page');
        $_id = get_param_wiki_chain('id');
        $id = $_id[0];

        $true_page_id = $GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'page_id', ['id' => $post_id]);
        if (!has_category_access(get_member(), 'wiki_page', strval($true_page_id))) {
            access_denied('CATEGORY_ACCESS');
        }

        $original_poster = $GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'member_id', ['id' => $post_id]);
        check_edit_permission('low', $original_poster, ['wiki_page', $true_page_id], 'cms_wiki');

        // Check user info
        if ($target == db_get_first_id()) {
            check_privilege('feature');
        }

        if ($id == $target) {
            return warn_screen($this->title, do_lang_tempcode('INVALID_OPERATION'));
        }

        $GLOBALS['SITE_DB']->query_update('wiki_posts', ['page_id' => $target], ['id' => $post_id], '', 1);

        if (addon_installed('actionlog')) {
            require_code('revisions_engine_database');
            $revision_engine = new RevisionEngineDatabase();
            $revision_engine->recategorise_old_revisions('wiki_post', strval($post_id), strval($target));
        }

        log_it('WIKI_MOVE_POST', strval($post_id), strval($target));

        // Show it worked / Refresh
        $url = get_param_string('redirect', false, INPUT_FILTER_URL_INTERNAL);
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI for making a Wiki+ post.
     *
     * @return Tempcode The UI
     */
    public function post() : object
    {
        $post_id = get_param_integer('post_id', null);
        $mode = ($post_id === null) ? 'post' : 'edit';

        require_code('form_templates');

        $specialisation = new Tempcode();
        $specialisation2 = new Tempcode();

        $parsed = null;

        if ($mode == 'post') {
            url_default_parameters__enable();
        }

        if ($mode == 'edit') {
            $rows = $GLOBALS['SITE_DB']->query_select('wiki_posts', ['*'], ['id' => $post_id], '', 1);
            if (!array_key_exists(0, $rows)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'wiki_post'));
            }
            $myrow = $rows[0];

            $page_id = $myrow['page_id'];

            if (!has_category_access(get_member(), 'wiki_page', strval($page_id))) {
                access_denied('CATEGORY_ACCESS');
            }

            $original_poster = $myrow['member_id'];
            check_edit_permission('low', $original_poster, ['wiki_page', $page_id], 'cms_wiki');

            // If we are editing, we need to retrieve the message
            $message = get_translated_text($myrow['the_message']);
            $parsed = get_translated_tempcode('wiki_posts', $myrow, 'the_message');

            $submit_name = do_lang_tempcode('SAVE');

            $validated = $myrow['validated'];
            $validation_time = $myrow['validation_time'];

            list($warning_details, $ping_url) = handle_conflict_resolution();

            if ((addon_installed('validation')) && has_privilege(get_member(), 'bypass_validation_lowrange_content', 'cms_wiki', ['wiki_page', $page_id])) {
                $specialisation2->attach(form_input_tick(do_lang_tempcode('VALIDATED'), do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'wiki_post'), 'validated', $validated == 1));
            }
            if ((addon_installed('validation')) && (addon_installed('commandr')) && has_privilege(get_member(), 'scheduled_publication_times')) {
                $specialisation2->attach(form_input_date__cron(do_lang_tempcode('VALIDATION_TIME'), do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATION_TIME_SIMPLE' : 'DESCRIPTION_VALIDATION_TIME', 'wiki_post'), 'validation_time', false, ($validation_time === null), true, $validation_time));
            }

            require_code('content2');
            $specialisation2->attach(metadata_get_fields('wiki_post', strval($post_id)));

            if (has_delete_permission('low', get_member(), $original_poster, 'cms_wiki', ['wiki_page', $page_id])) {
                $specialisation2->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '1bc81f9bcc3e86bcd20ceceaece7d501', 'TITLE' => do_lang_tempcode('ACTIONS')]));
                $specialisation2->attach(form_input_tick(do_lang_tempcode('DELETE'), do_lang_tempcode('DESCRIPTION_DELETE'), 'delete', false));
            }
        } else {
            $_id = get_param_wiki_chain('id');
            $page_id = $_id[0];

            if ($GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'COUNT(*)', ['page_id' => $page_id]) >= intval(get_option('general_safety_listing_limit'))) {
                warn_exit(do_lang_tempcode('TOO_MANY_WIKI_POSTS'));
            }

            check_submit_permission('low', ['wiki_page', $page_id], 'cms_wiki');

            $message = '';

            $submit_name = do_lang_tempcode('MAKE_POST');

            list($warning_details, $ping_url) = [null, null];

            if ((addon_installed('validation')) && has_privilege(get_member(), 'bypass_validation_lowrange_content', 'cms_wiki')) {
                $specialisation2->attach(form_input_tick(do_lang_tempcode('VALIDATED'), do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'wiki_post'), 'validated', true));
            }
            if ((addon_installed('validation')) && (addon_installed('commandr')) && has_privilege(get_member(), 'scheduled_publication_times')) {
                $specialisation2->attach(form_input_date__cron(do_lang_tempcode('VALIDATION_TIME'), do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATION_TIME_SIMPLE' : 'DESCRIPTION_VALIDATION_TIME', 'wiki_post'), 'validation_time', false, true, true, null));
            }

            require_code('content2');
            $specialisation2->attach(metadata_get_fields('wiki_post', null));

            $specialisation2->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => 'c414a5cd1e2a1d5597b9315dfa2db836', 'TITLE' => do_lang_tempcode('ACTIONS')])); // Send notification field will be added
        }

        $hidden_fields = new Tempcode();

        require_code('fields');
        if (has_tied_catalogue('wiki_post')) {
            append_form_custom_fields('wiki_post', ($mode == 'edit') ? strval($post_id) : null, $specialisation, $hidden_fields);
        }

        $text = new Tempcode();

        list($page_id,) = get_param_wiki_chain('id', strval(db_get_first_id()));
        require_lang('notifications');
        if (addon_installed('actionlog')) {
            require_code('revisions_engine_database');
            $revision_engine = new RevisionEngineDatabase(false);
            $notify = ($revision_engine->find_most_recent_category_change('wiki_post', strval($page_id)) < time() - (60 * 10));
        } else {
            $notify = true;
        }
        $radios = form_input_radio_entry('send_notification', '0', !$notify, do_lang_tempcode('NO'));
        $radios->attach(form_input_radio_entry('send_notification', '1', $notify, do_lang_tempcode('YES')));
        $specialisation2->attach(form_input_radio(do_lang_tempcode('SEND_NOTIFICATION'), do_lang_tempcode('DESCRIPTION_SEND_NOTIFICATION'), 'send_notification', $radios));

        if (addon_installed('captcha')) {
            require_code('captcha');
            if (use_captcha()) {
                $specialisation->attach(form_input_captcha($hidden_fields));
                $text->attach(paragraph(do_lang_tempcode('captcha:FORM_TIME_SECURITY')));
            }
        }

        if (addon_installed('points')) {
            $login_url = build_url(['page' => 'login', 'type' => 'browse', 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('login'));
            $_login_url = escape_html($login_url->evaluate());
            if ((is_guest()) && ((get_forum_type() != 'cns') || (has_actual_page_access(get_member(), 'join')))) {
                $text->attach(paragraph(do_lang_tempcode('NOT_LOGGED_IN_NO_CREDIT', $_login_url)));
            }
        }

        // Awards?
        if (addon_installed('awards')) {
            require_code('awards');
            $specialisation2->attach(get_award_fields('wiki_post', ($post_id === null) ? null : strval($post_id)));
        }

        $message = post_param_string('message', $message);

        $_redir_url = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => get_param_string('id', strval($page_id), INPUT_FILTER_GET_COMPLEX)], '_SELF');
        $post_url = build_url(['page' => '_SELF', 'type' => '_post', 'id' => get_param_string('id', strval(db_get_first_id()), INPUT_FILTER_GET_COMPLEX), 'redirect' => protect_url_parameter($_redir_url)], '_SELF');

        $hidden_fields->attach(form_input_hidden('post_id', ($post_id === null) ? '' : strval($post_id)));

        $js_function_calls = ((function_exists('captcha_ajax_check_function')) && (captcha_ajax_check_function() != '')) ? [captcha_ajax_check_function()] : [];

        $posting_form = get_posting_form($submit_name, ($mode == 'edit') ? 'admin/edit_this' : 'admin/add', $message, $post_url, $hidden_fields, $specialisation, null, '', $specialisation2, $parsed, $js_function_calls);

        if ($mode == 'post') {
            url_default_parameters__disable();
        }

        return do_template('WIKI_POSTING_SCREEN', [
            '_GUID' => 'efdea6198cba136eb6809937c2322458',
            'PING_URL' => $ping_url,
            'WARNING_DETAILS' => $warning_details,
            'TEXT' => $text,
            'TITLE' => $this->title,
            'POSTING_FORM' => $posting_form,
        ]);
    }

    /**
     * The actualiser for making a Wiki+ post.
     *
     * @return Tempcode The UI
     */
    protected function _post() : object
    {
        require_code('temporal2');

        if (addon_installed('captcha')) {
            require_code('captcha');
            enforce_captcha();
        }

        $post_id = post_param_integer('post_id', null);
        $mode = ($post_id === null) ? 'post' : 'edit';

        require_code('uploads');

        $_id = get_param_wiki_chain('id');
        $id = $_id[0];
        $delete = 0;
        if ($mode == 'edit') {
            $delete = post_param_integer('delete', 0);
        } elseif ($GLOBALS['SITE_DB']->query_select_value('wiki_posts', 'COUNT(*)', ['id' => $id]) >= intval(get_option('general_safety_listing_limit'))) {
            warn_exit(do_lang_tempcode('TOO_MANY_WIKI_POSTS'));
        }

        // Post Text
        $message = post_param_string('post');

        $validated = post_param_integer('validated', 0);
        $validation_time = post_param_date_components_utc('validation_time');

        if ($id == db_get_first_id()) {
            check_privilege('feature');
        }

        // Do it
        if ($mode == 'post') {
            require_code('antispam');
            inject_action_spamcheck();
            if (!has_privilege(get_member(), 'bypass_validation_lowrange_content', 'cms_wiki', ['wiki_page', $id])) {
                $validated = 0;
            }
            if (!has_category_access(get_member(), 'wiki_page', strval($id))) {
                access_denied('CATEGORY_ACCESS');
            }

            check_submit_permission('low', null, 'cms_wiki');

            require_code('content2');
            $metadata = actual_metadata_get_fields('wiki_post', null);

            $post_id = wiki_add_post($id, $message, $validated, $metadata['submitter'], true, $metadata['add_time'], $metadata['views']);

            set_url_moniker('wiki_post', strval($post_id));

            if ($validated == 0) {
                require_code('submit');
                $edit_url = build_url(['page' => 'wiki', 'type' => 'post', 'post_id' => $post_id, 'validated' => 1], '_SELF', [], false, false, true);
                if (addon_installed('validation')) {
                    send_validation_request('WIKI_MAKE_POST', 'wiki_posts', false, strval($post_id), $edit_url);
                }
            }
        } else {
            $rows = $GLOBALS['SITE_DB']->query_select('wiki_posts', ['*'], ['id' => $post_id], '', 1);
            if (!array_key_exists(0, $rows)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'wiki_post'));
            }
            $myrow = $rows[0];
            if (!has_category_access(get_member(), 'wiki_page', strval($myrow['page_id']))) {
                access_denied('CATEGORY_ACCESS');
            }

            $original_poster = $myrow['member_id'];

            if (!has_privilege(get_member(), 'bypass_validation_lowrange_content', 'cms_wiki', ['wiki_page', $myrow['page_id']])) {
                $validated = 0;
            }

            if ($delete == 1) {
                check_delete_permission('low', $original_poster, ['wiki_page', $myrow['page_id']], 'cms_wiki');

                wiki_delete_post($post_id);

                require_code('fields');
                if (has_tied_catalogue('wiki_post')) {
                    delete_form_custom_fields('wiki_post', strval($post_id));
                }
            } else {
                check_edit_permission('low', $original_poster, ['wiki_page', $myrow['page_id']], 'cms_wiki');

                require_code('content2');
                $metadata = actual_metadata_get_fields('wiki_post', strval($post_id));

                wiki_edit_post($post_id, $message, $validated, $metadata['submitter'], null, $metadata['edit_time'], $metadata['add_time'], $metadata['views'], true);
            }
        }

        require_code('fields');
        if (has_tied_catalogue('wiki_post')) {
            save_form_custom_fields('wiki_post', strval($post_id));
        }

        if (addon_installed('awards')) {
            require_code('awards');
            handle_award_setting('wiki_post', strval($post_id));
        }

        if (addon_installed('validation')) {
            require_code('validation');
            schedule_validation('wiki_post', strval($post_id), $validation_time);
        }

        // Show it worked / Refresh
        $url = get_param_string('redirect', false, INPUT_FILTER_URL_INTERNAL);
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }
}
