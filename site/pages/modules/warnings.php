<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    cns_warnings
 */

require_code('crud_module');

/**
 * Module page class.
 */
class Module_warnings extends Standard_crud_module
{
    public $lang_type = 'WARNING';
    public $select_name = 'SUBMITTER';
    public $select_name_description = '';
    public $redirect_type = '!';
    public $menu_label = 'WARNINGS';
    public $table = 'f_warnings';
    public $orderer = 'w_time';

    /**
     * Find icon for this module, specifically to find an icon for the module's main sitemap node. Defined when there is no entry-point for a default page call.
     *
     * @return string Icon
     */
    public function get_wrapper_icon() : string
    {
        return 'menu/social/warnings';
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('cns_warnings')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        if ($be_deferential) {
            return null;
        }

        if ($check_perms) {
            cns_require_all_forum_stuff();
            if (!cns_may_warn_members()) {
                return null;
            }
        }

        return (!$check_perms || !is_guest($member_id)) ? (parent::get_entry_points()) : [];
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @param  boolean $top_level Whether this is running at the top level, prior to having sub-objects called
     * @param  ?ID_TEXT $type The screen type to consider for metadata purposes (null: read from environment)
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run(bool $top_level = true, ?string $type = null) : ?object
    {
        require_code('cns_warnings');
        require_lang('cns_warnings');

        $error_msg = new Tempcode();
        if (!addon_installed__messaged('cns_warnings', $error_msg)) {
            return $error_msg;
        }

        if (get_forum_type() != 'cns') {
            warn_exit(do_lang_tempcode('NO_CNS'));
        }

        $type = get_param_string('type', 'history');
        $member_id = get_param_integer('id', null);

        cns_require_all_forum_stuff();

        if (addon_installed('securitylogging')) {
            require_lang('submitban');
        }

        if ($type == 'history') {
            $this->title = get_screen_title('REVIEW_WARNING_HISTORY');
            if ($member_id !== null) {
                $breadcrumbs = [['_SEARCH:members', do_lang_tempcode('MEMBERS')], ['_SEARCH:members:view:' . strval($member_id), $GLOBALS['FORUM_DRIVER']->get_username($member_id)]];
                breadcrumb_set_parents($breadcrumbs);
            }
            breadcrumb_set_self(do_lang_tempcode('WARNINGS'));
        }

        if ($type == 'view') {
            $this->title = get_screen_title('WARNING_NUMBER', true, [strval(get_param_integer('id'))]);
            $member_id = get_param_integer('member_id', null);
            breadcrumb_set_self(do_lang_tempcode('WARNING_NUMBER', strval(get_param_integer('id'))));
            if ($member_id !== null) {
                $breadcrumbs = [['_SEARCH:members', do_lang_tempcode('MEMBERS')], ['_SEARCH:members:view:' . strval($member_id), $GLOBALS['FORUM_DRIVER']->get_username($member_id)], ['_SEARCH:warnings:history:' . strval($member_id), do_lang_tempcode('WARNINGS')]];
                breadcrumb_set_parents($breadcrumbs);
            } else {
                $breadcrumbs = [['_SEARCH:warnings:history', do_lang_tempcode('WARNINGS')]];
                breadcrumb_set_parents($breadcrumbs);
            }
        }

        if ($type == 'undo_group_change') {
            $this->title = get_screen_title('UNDO_GROUP_CHANGE');
        }

        if ($type == 'undo_charge') {
            $this->title = get_screen_title('UNDO_CHARGE');
        }

        if ($type == 'undo_probation') {
            $this->title = get_screen_title('UNDO_PROBATION');
        }

        if ($type == 'undo_banned_ip') {
            $this->title = get_screen_title('UNBAN_IP');
        }

        if ($type == 'undo_banned_member') {
            $this->title = get_screen_title('UNBAN_MEMBER');
        }

        if ($type == 'undo_silence_from_topic') {
            $this->title = get_screen_title('UNSILENCE_TOPIC');
        }

        if ($type == 'undo_silence_from_forum') {
            $this->title = get_screen_title('UNSILENCE_FORUM');
        }

        return parent::pre_run($top_level);
    }

    /**
     * Standard crud_module run_start.
     *
     * @param  ID_TEXT $type The type of module execution
     * @return Tempcode The output of the run
     */
    public function run_start(string $type) : object
    {
        require_code('cns_moderation_action');
        require_code('cns_moderation_action2');

        if (!cns_may_warn_members()) {
            access_denied('PRIVILEGE', 'warn_members');
        }

        if ($type == 'history') {
            return $this->history();
        }

        if ($type == 'view') {
            return $this->view();
        }

        if ($type == 'undo_group_change') {
            return $this->undo_group_change();
        }
        if ($type == 'undo_charge') {
            return $this->undo_charge();
        }
        if ($type == 'undo_probation') {
            return $this->undo_probation();
        }
        if ($type == 'undo_banned_ip') {
            return $this->undo_banned_ip();
        }
        if ($type == 'undo_banned_member') {
            return $this->undo_banned_member();
        }
        if ($type == 'undo_silence_from_topic') {
            return $this->undo_silence_from_topic();
        }
        if ($type == 'undo_silence_from_forum') {
            return $this->undo_silence_from_forum();
        }

        return new Tempcode();
    }

    /**
     * Get Tempcode for an adding form.
     *
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function get_form_fields_for_add()
    {
        return $this->get_form_fields();
    }

    /**
     * Get Tempcode for a warning adding/editing form.
     *
     * @param  boolean $new Whether it is a new warning/punishment record
     * @param  LONG_TEXT $explanation The explanation for the warning/punishment record
     * @param  BINARY $is_warning Whether to make this a formal warning
     * @param  ?MEMBER $member_id The member the warning is for (null: get from environment)
     * @return array A pair: The input fields, Hidden fields
     */
    public function get_form_fields(bool $new = true, string $explanation = '', int $is_warning = 1, ?int $member_id = null) : array
    {
        $spam_mode = (get_param_integer('spam', 0) == 1);

        if ($member_id === null) {
            $member_id = get_param_integer('member_id', get_member());
        }

        $hidden = new Tempcode();
        $fields = new Tempcode();

        $post_id = get_param_integer('post_id', null);
        $ip_address = ($post_id === null) ? null : $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_ip_address', ['id' => $post_id]);

        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        $num_warnings = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_cache_warnings');
        $_rules_url = build_url(['page' => 'rules']);
        $rules_url = $_rules_url->evaluate();
        $_history_url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        $history_url = $_history_url->evaluate();
        if (((!is_guest($member_id)) || ($ip_address !== null)) && (addon_installed('securitylogging'))) {
            $lookup_url = build_url(['page' => 'admin_lookup', 'type' => 'results', 'param' => is_guest($member_id) ? $ip_address : $member_id], 'adminzone');
        } else {
            $lookup_url = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true);
        }
        if (is_object($lookup_url)) {
            $lookup_url = $lookup_url->evaluate();
        }

        $this->add_text = new Tempcode();

        // Information about their history, and the rules - to educate the warner/punisher
        if ($new) {
            $hidden->attach(form_input_hidden('member_id', strval($member_id)));

            $this->add_text = do_lang_tempcode('WARNINGS_FORM', escape_html($username), escape_html(integer_format($num_warnings, 0)), [escape_html(get_site_name()), escape_html($rules_url), escape_html($history_url), escape_html($lookup_url)]);
        }

        // Warnings...

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', [
            '_GUID' => 'cb4511a58a4c78eb75346a468e6e6fdf',
            'TITLE' => do_lang_tempcode('WARNINGS'),
            'HELP' => do_lang_tempcode('HAS_ALREADY_X_WARNINGS', escape_html($username), escape_html(integer_format($num_warnings, 0)), [escape_html(get_site_name()), escape_html($rules_url), escape_html($history_url), escape_html($lookup_url)]),
        ]));

        $warning_radios = new Tempcode();
        $warning_radios->attach(form_input_radio_entry('is_warning', '1', $is_warning === 1, do_lang_tempcode('WARNING_FORMAL'), 0));
        $warning_radios->attach(form_input_radio_entry('is_warning', '0', $is_warning === 0, do_lang_tempcode('WARNING_OFF_THE_BOOK'), 0));
        $fields->attach(form_input_radio(do_lang_tempcode('WARNING_TYPE'), do_lang_tempcode('DESCRIPTION_WARNING_TYPE'), 'is_warning', $warning_radios, true));


        // Punitive actions...

        if ($new) {
            $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '322a026b7a56a3e4e9ac58e4979add35', 'TITLE' => do_lang_tempcode('PUNITIVE_ACTIONS')]));

            define('POST_STANDALONE_AT_END', 0);
            define('POST_STANDALONE_IN_MIDDLE', 1);
            define('POST_AS_TOPIC_FULL', 2);
            define('POST_AS_TOPIC_STARTER', 3);

            $posts_deletable = [];
            if (has_delete_permission('mid', get_member(), $member_id, 'topics')) {
                $first_post_time = $GLOBALS['FORUM_DB']->query_select_value('f_posts', 'MIN(p_time)', ['p_poster' => $member_id]);
                if (
                    (($GLOBALS['DEV_MODE']) || ($first_post_time > time() - 60 * 60 * 24 * 14)) && // i.e. a recent spammer, not a normal member being punished
                    ((!is_guest($member_id)) || ($ip_address !== null))
                ) {
                    $where = [];
                    if (is_guest($member_id)) {
                        $where['p_ip_address'] = $ip_address;
                    } else {
                        $where['p_poster'] = $member_id;
                    }
                    $sup = 'ORDER BY p_time DESC';
                    if (!has_privilege(get_member(), 'view_other_pt')) {
                        $sup = ' AND p_cache_forum_id IS NOT NULL ' . $sup;
                    }
                    $posts_by_member = $GLOBALS['FORUM_DB']->query_select('f_posts p JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_topics t ON t.id=p.p_topic_id', ['p.*', 't_cache_first_post_id', 't_cache_last_post_id', 't_cache_num_posts', 't_cache_first_title', 'p_cache_forum_id'], $where, $sup, 10);
                    $spam_urls = [];
                    foreach ($posts_by_member as $post) {
                        $just_post_row = db_map_restrict($post, ['id', 'p_post'], ['id' => 'p_id']);
                        $post_text = get_translated_tempcode('f_posts', $just_post_row, 'p_post', $GLOBALS['FORUM_DB']);
                        $matches = [];
                        $num_matches = preg_match_all('#<a\s[^<>]*href=["\']([^"\']*)["\']#', $post_text->evaluate(), $matches);
                        for ($i = 0; $i < $num_matches; $i++) {
                            $spam_url = $matches[1][$i];
                            if (!url_is_local($spam_url)) {
                                $domain = parse_url(normalise_idn_url($spam_url), PHP_URL_HOST);
                                if (($domain != get_domain()) && (!empty($domain))) {
                                    if (!isset($spam_urls[$domain])) {
                                        require_code('mail');
                                        $ip = cms_gethostbyname($domain);
                                        $spam_urls[$domain] = ['DOMAIN' => $domain, 'IP' => $ip, 'URLS' => [], 'POSTS' => []];
                                    }
                                    if (!isset($spam_urls[$domain]['URLS'][$spam_url])) {
                                        $spam_urls[$domain]['URLS'][$spam_url] = ['I' => strval(count($spam_urls[$domain]['URLS'])), 'URL' => $spam_url];
                                    }
                                    if (!isset($spam_urls[$domain]['POSTS'][$post['id']])) {
                                        $spam_urls[$domain]['POSTS'][$post['id']] = ['I' => strval(count($spam_urls[$domain]['POSTS'])), 'POST_TITLE' => $post['p_title'], 'POST' => strip_html($post_text->evaluate())];
                                    }
                                }
                            }
                        }

                        if ($post['t_cache_first_post_id'] == $post['id']) {
                            if ($post['t_cache_num_posts'] == 1) {
                                $post_context = POST_AS_TOPIC_STARTER;
                            } else {
                                $post_context = POST_AS_TOPIC_FULL;
                            }
                        } else {
                            if ($post['t_cache_last_post_id'] == $post['id']) {
                                $post_context = POST_STANDALONE_AT_END;
                            } else {
                                $post_context = POST_STANDALONE_IN_MIDDLE;
                            }
                        }
                        $posts_deletable[$post['id']] = [$post_context, $post['id'], $post['p_topic_id'], $post['t_cache_first_title'], $post['p_time'], $post['p_cache_forum_id']];
                    }
                    if (!empty($spam_urls)) {
                        $this->add_text->attach(paragraph(do_template('CNS_WARN_SPAM_URLS', ['_GUID' => '54bf9592bb5cf793370ff4b38fff92a6', 'USERNAME' => $username, 'SPAM_URLS' => $spam_urls])));
                    }
                }
            }

            if (addon_installed('securitylogging')) {
                if (has_actual_page_access(get_member(), 'admin_ip_ban')) {
                    $already_banned_ip = ip_banned($GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_ip_address'));
                    $fields->attach(form_input_tick(do_lang_tempcode('WHETHER_BANNED_IP'), do_lang_tempcode('DESCRIPTION_WHETHER_BANNED_IP'), 'banned_ip', $spam_mode || $already_banned_ip, null, '1', false, $already_banned_ip));
                }

                $stopforumspam_api_key = get_option('stopforumspam_api_key');
                if ($stopforumspam_api_key === null) {
                    $stopforumspam_api_key = '';
                }
                $tornevall_api_username = get_option('tornevall_api_username');
                if ($tornevall_api_username === null) {
                    $tornevall_api_username = '';
                }
                if ($stopforumspam_api_key . $tornevall_api_username != '') {
                    require_lang('submitban');
                    $fields->attach(form_input_tick(do_lang_tempcode('SYNDICATE_TO_STOPFORUMSPAM'), do_lang_tempcode('DESCRIPTION_SYNDICATE_TO_STOPFORUMSPAM'), 'stopforumspam', $spam_mode));
                }
            }

            if (has_privilege(get_member(), 'member_maintenance')) {
                $already_banned = ($GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_is_perm_banned') != '0');

                require_code('input_filter');
                list(, $reasoned_bans) = load_advanced_banning();
                if ((empty($reasoned_bans)) || ($already_banned)) {
                    $fields->attach(form_input_tick(do_lang_tempcode('BAN_MEMBER'), do_lang_tempcode('DESCRIPTION_BANNED_MEMBER'), 'banned_member', $spam_mode || $already_banned, null, '1', false, $already_banned));
                } else {
                    $reasoned_bans_list = new Tempcode();
                    $reasoned_bans_list->attach(form_input_list_entry('0', !$spam_mode, do_lang_tempcode('NO')));
                    $reasoned_bans_list->attach(form_input_list_entry('1', $spam_mode, do_lang_tempcode('YES')));
                    foreach (array_keys($reasoned_bans) as $reasoned_ban) {
                        $reasoned_bans_list->attach(form_input_list_entry($reasoned_ban));
                    }
                    $fields->attach(form_input_list(do_lang_tempcode('BAN_MEMBER'), do_lang_tempcode('DESCRIPTION_BANNED_MEMBER'), 'banned_member', $reasoned_bans_list, null, false, false));
                }
            }

            if ((has_privilege(get_member(), 'member_maintenance')) && (has_privilege(get_member(), 'assume_any_member'))) {
                $rows = $GLOBALS['FORUM_DB']->query_select('f_groups', ['id', 'g_name'], ['g_is_private_club' => 0]);
                $groups = new Tempcode();
                $groups->attach(form_input_list_entry('', false, do_lang_tempcode('NA_EM')));
                $current_group_id = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_primary_group');
                foreach ($rows as $group) {
                    if (($group['id'] != db_get_first_id()) && ($group['id'] != $current_group_id)) {
                        $groups->attach(form_input_list_entry(strval($group['id']), false, get_translated_text($group['g_name'], $GLOBALS['FORUM_DB'])));
                    }
                }
                $fields->attach(form_input_list(do_lang_tempcode('CHANGE_USERGROUP_TO'), do_lang_tempcode('DESCRIPTION_CHANGE_USERGROUP_TO'), 'changed_usergroup_to', $groups, null, false, false));
            }

            if (($post_id !== null) && (!$spam_mode)) {
                $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_topic_id', ['id' => $post_id]);
                if ($topic_id !== null) {
                    $forum_id = $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_forum_id', ['id' => $topic_id]);
                    $hidden->attach(form_input_hidden('topic_id', strval($topic_id)));
                    $hidden->attach(form_input_hidden('forum_id', strval($forum_id)));
                    $silence_topic_time = null;//time() + 60 * 60 * 24 * 7;
                    $silence_forum_time = null;//time() + 60 * 60 * 24 * 7;
                    $active_until = $GLOBALS['FORUM_DB']->query_select_value_if_there('member_privileges', 'active_until', [
                        'member_id' => $member_id,
                        'privilege' => 'submit_lowrange_content',
                        'the_page' => '',
                        'module_the_name' => 'topics',
                        'category_name' => strval($topic_id),
                    ]);
                    if ($active_until !== null) {
                        $silence_topic_time = $active_until;
                    }
                    $active_until = $GLOBALS['FORUM_DB']->query_select_value_if_there('member_privileges', 'active_until', [
                        'member_id' => $member_id,
                        'privilege' => 'submit_lowrange_content',
                        'the_page' => '',
                        'module_the_name' => 'forums',
                        'category_name' => strval($forum_id),
                    ]);
                    if ($active_until !== null) {
                        $silence_forum_time = $active_until;
                    }
                    $fields->attach(form_input_date(do_lang_tempcode('SILENCE_FROM_TOPIC'), do_lang_tempcode('DESCRIPTION_SILENCE_FROM_TOPIC'), 'silence_from_topic', false, true, true, $silence_topic_time, 2));
                    $fields->attach(form_input_date(do_lang_tempcode('SILENCE_FROM_FORUM'), do_lang_tempcode('DESCRIPTION_SILENCE_FROM_FORUM'), 'silence_from_forum', false, true, true, $silence_forum_time, 2));
                }
            }

            if (has_privilege(get_member(), 'probate_members')) {
                $fields->attach(form_input_integer(do_lang_tempcode('EXTEND_PROBATION'), do_lang_tempcode('DESCRIPTION_EXTEND_PROBATION'), 'probation', 0, true));
            }

            if (addon_installed('points')) {
                if (has_actual_page_access(get_member(), 'admin_points')) {
                    require_code('points');
                    $num_points_currently = available_points($member_id);
                    $fields->attach(form_input_integer(do_lang_tempcode('CHARGED_POINTS'), do_lang_tempcode('DESCRIPTION_CHARGED_POINTS', escape_html(integer_format($num_points_currently, 0))), 'charged_points', 0, true));
                }
            }
        }

        // Moderation actions
        if ($new) {
            $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => 'c7eb70b13be74d8f3bd1f1c5e739d9ab', 'TITLE' => do_lang_tempcode('DELETE'), 'HELP' => do_lang_tempcode('DESCRIPTION_DELETE_CONTENT')]));

            foreach ($posts_deletable as $_post_id => $_post_deletable) {
                list($post_context, $_post_id, $topic_id, $topic_title, $post_time, $forum_id) = $_post_deletable;
                $post_url = $GLOBALS['FORUM_DRIVER']->post_url($_post_id, $forum_id, true);

                $list_options = new Tempcode();
                $list_options->attach(form_input_list_entry('', !$spam_mode, do_lang_tempcode('HANDLE_POST__NOTHING')));
                switch ($post_context) {
                    case POST_STANDALONE_AT_END:
                        $handle_label = do_lang_tempcode('HANDLE_POST__POST_STANDALONE_AT_END', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate())]);
                        $list_options->attach(form_input_list_entry('delete_post', $spam_mode, do_lang_tempcode('HANDLE_POST__DELETE_POST', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate())])));
                        break;

                    case POST_STANDALONE_IN_MIDDLE:
                        $num_replies = $GLOBALS['FORUM_DB']->query_value_if_there('SELECT COUNT(*) FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_posts WHERE p_topic_id=' . strval($topic_id) . ' AND p_time>' . strval($post_time));
                        $handle_label = do_lang_tempcode('HANDLE_POST__POST_STANDALONE_IN_MIDDLE', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate()), escape_html(integer_format($num_replies, 0))]);
                        $list_options->attach(form_input_list_entry('delete_post', $spam_mode, do_lang_tempcode('HANDLE_POST__DELETE_POST_WITH_GAP', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate()), escape_html(integer_format($num_replies, 0))])));
                        $list_options->attach(form_input_list_entry('delete_post_and_following', false, do_lang_tempcode('HANDLE_POST__DELETE_POST_AND_FOLLOWING', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate()), escape_html(strval($num_replies))])));
                        break;

                    case POST_AS_TOPIC_FULL:
                        $num_replies = $GLOBALS['FORUM_DB']->query_value_if_there('SELECT COUNT(*) FROM ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_posts WHERE p_topic_id=' . strval($topic_id) . ' AND p_time>' . strval($post_time));
                        $handle_label = do_lang_tempcode('HANDLE_POST__POST_AS_TOPIC_FULL', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate()), escape_html(integer_format($num_replies, 0))]);
                        $list_options->attach(form_input_list_entry('delete_post_and_following', $spam_mode, do_lang_tempcode('HANDLE_POST__DELETE_TOPIC_WITH_REPLIES', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate()), escape_html(integer_format($num_replies, 0))])));
                        break;

                    case POST_AS_TOPIC_STARTER:
                        $handle_label = do_lang_tempcode('HANDLE_POST__POST_AS_TOPIC_STARTER', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate())]);
                        $list_options->attach(form_input_list_entry('delete_post_and_following', $spam_mode, do_lang_tempcode('HANDLE_POST__DELETE_TOPIC', escape_html($topic_title), escape_html(strval($_post_id)), [escape_html(strval($topic_id)), escape_html($post_url->evaluate())])));
                        break;
                }
                $fields->attach(form_input_list($handle_label, '', 'handle_post__' . strval($_post_id), $list_options, null, false, false));
            }

            // See also privacy_purge.php - this code handles deletion of individually-identified high-level content items, while privacy-purging will delete/anonymise on mass for any kinds of database record
            if (addon_installed('commandr') && has_privilege(get_member(), 'delete_highrange_content')) {
                $content = find_member_content($member_id);
                foreach ($content as $content_details) {
                    list($content_type_title, $content_type, $content_id, $content_title, $content_url, $content_timestamp, $auto_selected) = $content_details;
                    if (is_object($content_url)) {
                        $content_url = $content_url->evaluate();
                    }
                    $content_description = do_lang_tempcode('DESCRIPTION_DELETE_THIS', escape_html($content_title), escape_html(get_timezoned_date_time($content_timestamp)), [escape_html($content_url), $content_type_title]);

                    $fields->attach(form_input_tick($content_title, $content_description, 'delete__' . $content_type . '_' . $content_id, $auto_selected));
                }
            }
        }

        // Explanatory text...

        $keep = symbol_tempcode('KEEP');
        $load_url = find_script('warnings_browse') . '?type=load' . $keep->evaluate();
        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => 'c7eb70b13be74d8f3bd1f1c5e739d9aa', 'TITLE' => do_lang_tempcode('EXPLANATORY_TEXT'), 'HELP' => do_lang_tempcode('LOAD_SAVED_WARNING', escape_html($load_url))]));
        if (($explanation == '') && ($spam_mode)) {
            $explanation = do_lang('SPAM');
        }
        $fields->attach(form_input_line_comcode(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_REASON'), 'explanation', $explanation, true));
        if ($new) {
            $message = '';
            if ($post_id !== null) {
                $_postdetails_text = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_posts', 'p_post', ['id' => $post_id]);
                if ($_postdetails_text !== null) {
                    $message = '[quote="' . $username . '"]' . "\n" . get_translated_text($_postdetails_text, $GLOBALS['FORUM_DB']) . "\n" . '[/quote]';
                    $message .= "\n\n" . do_lang('MODERATED_AS_SPAM', get_site_name());
                }
            }
            $fields->attach(form_input_text_comcode(do_lang_tempcode('MESSAGE'), do_lang_tempcode('DESCRIPTION_PP_MESSAGE'), 'message', $message, false));

            $fields->attach(form_input_line(do_lang_tempcode('SAVE_WARNING_DETAILS'), do_lang_tempcode('DESCRIPTION_SAVE_WARNING_DETAILS'), 'save', '', false));

            $fields->attach(form_input_tick(do_lang_tempcode('INCLUDE_PUNITIVE_TEXT'), do_lang_tempcode('DESCRIPTION_INCLUDE_PUNITIVE_TEXT'), 'include_punitive_text', false));

            require_javascript('cns_warnings');
        }

        if (!$new) {
            $this->do_preview = false;
        }

        return [$fields, $hidden];
    }

    /**
     * Standard crud_module table function.
     *
     * @param  array $url_map Details to go to build_url for link to the next screen
     * @return array A quartet: The choose table, Whether re-ordering is supported from this screen, Search URL, Archive URL
     */
    public function create_selection_list_choose_table(array $url_map) : array
    {
        require_code('templates_results_table');

        $current_ordering = get_param_string('sort', 'w_time DESC', INPUT_FILTER_GET_COMPLEX);
        if (strpos($current_ordering, ' ') === false) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }
        list($sortable, $sort_order) = explode(' ', $current_ordering, 2);
        $sortables = [
            'w_time' => do_lang_tempcode('DATE'),
        ];
        if (addon_installed('points')) {
            $sortables['p_charged_points'] = do_lang_tempcode('POINTS');
        }
        if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
        }

        $fh = [
            do_lang_tempcode('USERNAME'),
            do_lang_tempcode('BY'),
            do_lang_tempcode('DATE'),
        ];
        if (addon_installed('points')) {
            $fh[] = do_lang_tempcode('POINTS');
        }
        $fh[] = do_lang_tempcode('ACTIONS');

        $header_row = results_header_row($fh, $sortables, 'sort', $sortable . ' ' . $sort_order);

        $result_entries = new Tempcode();

        list($rows, $max_rows) = $this->get_entry_rows(false, $current_ordering);
        foreach ($rows as $row) {
            $edit_url = build_url($url_map + ['id' => $row['id']], '_SELF');

            $username = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_member_id'], '', false);
            $by = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_by']);

            $map = [
                protect_from_escaping($username),
                protect_from_escaping($by),
                get_timezoned_date_time($row['w_time']),
            ];

            if (addon_installed('points')) {
                $map[] = integer_format($row['p_charged_points']);
            }

            $map[] = protect_from_escaping(hyperlink($edit_url, do_lang_tempcode('EDIT'), false, true, do_lang('EDIT') . ' #' . strval($row['id'])));

            $result_entries->attach(results_entry($map, true));
        }

        $search_url = null;
        $archive_url = null;

        return [results_table(do_lang($this->menu_label), get_param_integer('start', 0), 'start', get_param_integer('max', 20), 'max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order), false, $search_url, $archive_url];
    }

    /**
     * Standard crud_module list function.
     *
     * @return Tempcode The selection list
     */
    public function create_selection_list_entries() : object
    {
        $_m = $GLOBALS['FORUM_DB']->query_select('f_warnings', ['*'], [], 'ORDER BY w_time DESC');
        $entries = new Tempcode();
        foreach ($_m as $m) {
            $entries->attach(form_input_list_entry(strval($m['id']), false, $GLOBALS['FORUM_DRIVER']->get_username($m['w_member_id']) . ' (' . get_timezoned_date_time($m['w_time']) . ')'));
        }

        return $entries;
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function fill_in_edit_form(string $id)
    {
        $warning = $GLOBALS['FORUM_DB']->query_select('f_warnings', ['w_explanation', 'w_by', 'w_member_id', 'w_is_warning'], ['id' => intval($id)], '', 1);
        if (!array_key_exists(0, $warning)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }

        return $this->get_form_fields(false, $warning[0]['w_explanation'], $warning[0]['w_is_warning'], $warning[0]['w_member_id']);
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return array A pair: The entry added, description about usage
     */
    public function add_actualisation() : array
    {
        require_code('global4');

        $explanation = post_param_string('explanation');
        $member_id = post_param_integer('member_id');
        $message = post_param_string('message', '');
        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id, false, USERNAME_DEFAULT_ERROR);
        $message_punitive = post_param_integer('include_punitive_text', 0);

        // Gather post parameters for punitive actions
        $charged_points = post_param_integer('charged_points', 0);
        $silence_from_topic = post_param_integer('topic_id', null);
        $_silence_from_topic = post_param_date('silence_from_topic', false);
        $silence_from_forum = post_param_integer('forum_id', null);
        $_silence_from_forum = post_param_date('silence_from_forum', false);
        $probation = post_param_integer('probation', 0);
        $banned_member = post_param_string('banned_member', '0');
        $stopforumspam = post_param_integer('stopforumspam', 0);

        // Get member IP address if banning their IP and permitted to do so
        $_banned_ip = post_param_integer('banned_ip', 0);
        $banned_ip = '';
        if (addon_installed('securitylogging')) {
            if (has_actual_page_access(get_member(), 'admin_ip_ban')) {
                if ($_banned_ip == 1) {
                    $banned_ip = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_ip_address');
                }
            }
        }

        // Get usergroup changes if changing usergroup and permitted to do so
        if (has_privilege(get_member(), 'member_maintenance')) {
            $changed_usergroup_to = post_param_integer('changed_usergroup_to', null);
        } else {
            $changed_usergroup_to = null;
        }

        // Set silence from topic or silence from forum to null if no date specified
        if ($_silence_from_topic === null) {
            $silence_from_topic = null;
        }
        if ($_silence_from_forum === null) {
            $silence_from_forum = null;
        }

        // Save explanatory details if asked to
        $save = post_param_string('save');
        if ($save != '') {
            $GLOBALS['FORUM_DB']->query_delete('f_saved_warnings', ['s_title' => $save], '', 1);
            $GLOBALS['FORUM_DB']->query_insert('f_saved_warnings', [
                's_title' => $save,
                's_explanation' => $explanation,
                's_message' => $message,
            ]);
        }

        // Attach punitive actions to end of message
        $_message = generate_punitive_text();
        if ($message != '' && $_message != '') {
            $message .= "\n\n" . $_message;
        } else {
            $message .= $_message;
        }

        // Make the warning now so we can associate its warning ID with logs
        $warning_id = cns_make_warning($member_id, $explanation, null, null, post_param_integer('is_warning', 0), $silence_from_topic, $silence_from_forum, $probation, $banned_ip, $charged_points, ($banned_member == '0') ? 0 : 1, $changed_usergroup_to);
        set_related_warning_id($warning_id);

        // Topic silencing
        if ($silence_from_topic !== null && $_silence_from_topic !== false) {
            $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'topics',
                'category_name' => strval($silence_from_topic),
            ]);

            $GLOBALS['FORUM_DB']->query_insert('member_privileges', [
                'active_until' => $_silence_from_topic,
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'topics',
                'category_name' => strval($silence_from_topic),
                'the_value' => '0',
            ]);

            require_code('cns_general_action2');
            cns_mod_log_it('SILENCE_FROM_TOPIC', strval($member_id), strval($silence_from_topic), $explanation);
        }

        // Forum silencing
        if ($silence_from_forum !== null && $_silence_from_forum !== false) {
            $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
            ]);
            $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
                'member_id' => $member_id,
                'privilege' => 'submit_midrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
            ]);

            $GLOBALS['FORUM_DB']->query_insert('member_privileges', [
                'active_until' => $_silence_from_forum,
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
                'the_value' => '0',
            ]);
            $GLOBALS['FORUM_DB']->query_insert('member_privileges', [
                'active_until' => $_silence_from_forum,
                'member_id' => $member_id,
                'privilege' => 'submit_midrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
                'the_value' => '0',
            ]);

            require_code('cns_general_action2');
            cns_mod_log_it('SILENCE_FROM_FORUM', strval($member_id), strval($silence_from_forum), $explanation);
        }

        // Post deletion
        $deleted_all = false;
        if (has_delete_permission('mid', get_member(), $member_id, 'topics')) {
            $where = ['p_poster' => $member_id];
            $sup = 'ORDER BY p_time';
            if (!has_privilege(get_member(), 'view_other_pt')) {
                $sup = ' AND p_cache_forum_id IS NOT NULL ' . $sup;
            }
            $posts_already_deleted = [];
            $posts_by_member = $GLOBALS['FORUM_DB']->query_select('f_posts', ['id', 'p_title', 'p_topic_id', 'p_time'], $where, $sup);
            $deleted_all = true;
            foreach ($posts_by_member as $post) {
                if (isset($posts_already_deleted[$post['id']])) {
                    continue;
                }
                $p_title = do_lang('POST_IN_TITLED', strval($post['p_title']), $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $GLOBALS['FORUM_DB']->query_select_value('f_posts', 'p_topic_id', ['id' => intval($post['id'])])]));
                if (empty($post['p_title'])) {
                    $p_title = do_lang('POST_IN_NUMBERED', strval($post['id']), $GLOBALS['FORUM_DB']->query_select_value('f_topics', 't_cache_first_title', ['id' => $GLOBALS['FORUM_DB']->query_select_value('f_posts', 'p_topic_id', ['id' => intval($post['id'])])]));
                }
                require_code('cns_posts_action3');
                $post_action = post_param_string('handle_post__' . strval($post['id']), '');
                $posts = [];
                switch ($post_action) {
                    case 'delete_post':
                        $posts[] = $post['id'];
                        $posts_already_deleted[$post['id']] = true;
                        break;
                    case 'delete_post_and_following':
                        $posts[] = $post['id'];
                        $further_posts = $GLOBALS['FORUM_DB']->query_select('f_posts', ['id'], ['p_topic_id' => $post['p_topic_id']], 'AND p_time>' . strval($post['p_time']));
                        foreach ($further_posts as $_post) {
                            $posts[] = $_post['id'];
                            $posts_already_deleted[$_post['id']] = true;
                        }
                        break;
                    default:
                        $deleted_all = false;
                        break;
                }
                cns_delete_posts_topic($post['p_topic_id'], $posts, $explanation, false);
            }
        }

        // Probation
        if (has_privilege(get_member(), 'probate_members')) {
            if ($probation != 0) {
                $on_probation_until = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_on_probation_until');
                if (($on_probation_until === null) || ($on_probation_until < time())) {
                    $on_probation_until = time();
                }
                $on_probation_until += $probation * 60 * 60 * 24;
                $GLOBALS['FORUM_DB']->query_update('f_members', ['m_on_probation_until' => $on_probation_until], ['id' => $member_id], '', 1);

                require_code('cns_general_action2');
                cns_mod_log_it('START_PROBATION', strval($member_id), $username, $explanation);
            }
        }

        // Ban member
        if (has_privilege(get_member(), 'member_maintenance')) {
            if ($banned_member != '0') {
                $GLOBALS['FORUM_DB']->query_update('f_members', ['m_is_perm_banned' => $banned_member], ['id' => $member_id], '', 1);

                require_code('cns_general_action2');
                cns_mod_log_it('BAN_MEMBER', strval($member_id), $username, $explanation);
            }
        } else {
            $banned_member = '0';
        }

        // IP ban
        if (addon_installed('securitylogging')) {
            if (has_actual_page_access(get_member(), 'admin_ip_ban')) {
                if ($_banned_ip == 1) {
                    require_code('failure');
                    add_ip_ban($banned_ip, $explanation);
                    log_it('IP_BANNED', $banned_ip);
                }
            }
        }

        // Stop Forum Spam report
        if ($stopforumspam == 1) {
            $banned_ip = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_ip_address');
            require_code('failure');
            require_code('failure_spammers');
            syndicate_spammer_report($banned_ip, $username, $GLOBALS['FORUM_DRIVER']->get_member_email_address($member_id), $explanation, false);

            require_code('cns_general_action2');
            cns_mod_log_it('MARK_AS_SPAMMER', strval($member_id), $username, $explanation);
        }

        // Change group
        if ((has_privilege(get_member(), 'member_maintenance')) && (has_privilege(get_member(), 'assume_any_member'))) {
            if ($changed_usergroup_to !== null) {
                $GLOBALS['FORUM_DB']->query_update('f_members', ['m_primary_group' => $changed_usergroup_to], ['id' => $member_id], '', 1);
                cns_mod_log_it('GROUP_CHANGE', strval($member_id), strval($changed_usergroup_to));
            }
        }

        // Charge points
        if (addon_installed('points')) {
            if (has_actual_page_access(get_member(), 'admin_points')) {
                if ($charged_points != 0) {
                    require_code('points2');
                    charge_member($member_id, $charged_points, $explanation);
                }
            }
        }

        // Delete content
        if (addon_installed('commandr') && has_privilege(get_member(), 'delete_highrange_content')) {
            $content = find_member_content($member_id);
            $done_deleting = false;
            foreach ($content as $content_details) {
                list($content_type_title, $content_type, $content_id, $content_title, $content_url, $content_timestamp, $auto_selected) = $content_details;

                if (post_param_integer('delete__' . $content_type . '_' . $content_id, 0) == 1) {
                    require_all_lang();
                    require_code('resource_fs');
                    $object_fs = get_resource_commandr_fs_object($content_type);
                    if ($object_fs !== null) {
                        $filename = $object_fs->convert_id_to_filename($content_type, $content_id);
                        if ($filename !== null) {
                            $subpath = $object_fs->search($content_type, $content_id, true);
                            $object_fs->resource_delete($content_type, $filename, dirname($subpath));

                            $done_deleting = true;
                        }
                    }
                }
            }
        }

        // Send PT
        if ($message != '') {
            require_code('cns_topics_action');
            require_code('cns_topics_action2');
            require_code('cns_posts_action');
            require_code('cns_posts_action2');

            $_title = do_lang('NEW_WARNING_TO_YOU');

            $pt_topic_id = cns_make_topic(null, '', '', 1, 1, 0, 0, get_member(), $member_id);
            $post_id = cns_make_post($pt_topic_id, $_title, $message, 0, true, 1, 1/*emphasised*/, null, null, null, null, null, null, null, false);

            send_pt_notification($post_id, $_title, $pt_topic_id, $member_id);

            // Update warning row with the new private topic ID
            $GLOBALS['FORUM_DB']->query_update('f_warnings', ['w_topic_id' => $pt_topic_id], ['id' => $warning_id], '', 1);
        }

        // Disable warning id association
        set_related_warning_id(null);

        // Redirect after issuing the warning if applicable
        if ((get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL) == '') || ($deleted_all)) {
            require_code('site2');
            assign_refresh($GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true), 0.0); // redirect_screen not used because there is already a legitimate output screen happening
            unset($_GET['redirect']);
        }

        return [strval($warning_id), null];
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return ?Tempcode Description about usage (null: none)
     */
    public function edit_actualisation(string $id) : ?object
    {
        $member_id = cns_edit_warning(intval($id), post_param_string('explanation'), post_param_integer('is_warning', 0));

        if (get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL) == '') {
            require_code('site2');
            assign_refresh($GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true), 0.0); // redirect_screen not used because there is already a legitimate output screen happening
        }

        return null;
    }

    /**
     * Standard crud_module submitter getter.
     *
     * @param  ID_TEXT $id The entry for which the submitter is sought
     * @return array The submitter, and the time of submission (null submission time implies no known submission time)
     */
    public function get_submitter(string $id) : array
    {
        $rows = $GLOBALS['FORUM_DB']->query_select('f_warnings', ['w_by', 'w_time'], ['id' => intval($id)], '', 1);
        if (!array_key_exists(0, $rows)) {
            return [null, null];
        }
        return [$rows[0]['w_by'], $rows[0]['w_time']];
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $id The entry being deleted
     */
    public function delete_actualisation(string $id)
    {
        $member_id = cns_delete_warning(intval($id));

        if (get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL) == '') {
            require_code('site2');
            assign_refresh($GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true), 0.0); // redirect_screen not used because there is already a legitimate output screen happening
        }
    }

    /**
     * View the warning/punishment history for a member.
     *
     * @return Tempcode The output of the run
     */
    public function history() : object
    {
        require_code('templates_results_table');

        $start = get_param_integer('start', 0);
        $max = get_param_integer('max', 50);

        $member_id = get_param_integer('id', null);

        $f = [do_lang_tempcode('DATE')];

        if ($member_id !== null) {
            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
            if ($member_id != get_member()) {
                log_it('REVIEW_WARNING_HISTORY', strval($member_id), $username);
            }
            $where = ['w_member_id' => $member_id];
        } else {
            $where = [];
            $f[] = do_lang_tempcode('MEMBER');
        }

        $rows = $GLOBALS['FORUM_DB']->query_select('f_warnings', ['*'], $where, 'ORDER BY w_time DESC', $max, $start);
        $max_rows = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'COUNT(*)', $where);

        $f = array_merge($f, [do_lang_tempcode('BY'), do_lang_tempcode('IS_FORMAL_WARNING'), do_lang_tempcode('ACTIONS')]);

        if (empty($rows)) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }

        $out = new Tempcode();
        $header_row = results_header_row($f, []);
        foreach ($rows as $row) {
            $date = hyperlink(build_url(['page' => '_SELF', 'type' => 'view', 'id' => $row['id'], 'member_id' => $member_id, 'redirect' => protect_url_parameter(SELF_REDIRECT)], '_SELF'), get_timezoned_date_time($row['w_time']), false, true, $row['w_explanation']);
            $member = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_member_id']);
            $by = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_by']);

            $is_warning = $row['w_is_warning'] ? do_lang_tempcode('YES') : do_lang_tempcode('NO');

            $action_edit = hyperlink(build_url(['page' => '_SELF', 'type' => '_edit', 'id' => $row['id'], 'redirect' => protect_url_parameter(SELF_REDIRECT)], '_SELF'), do_lang('EDIT'), false, true, '');
            $actions = new Tempcode();
            $actions->attach($action_edit);

            if ($member_id !== null) {
                $g = [$date, $by, $is_warning, $actions];
            } else {
                $g = [$date, $member, $by, $is_warning, $actions];
            }
            $out->attach(results_entry($g, false));
        }

        $_username = mixed();
        if ($member_id !== null) {
            $_username = $username;
            $add_warning_url = build_url(['page' => '_SELF', 'type' => 'add', 'id' => $member_id, 'redirect' => protect_url_parameter(SELF_REDIRECT)], '_SELF');
            $view_profile_url = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true);
        } else {
            $_username = do_lang_tempcode('ALL_MEMBERS');
            $view_profile_url = null;
            $add_warning_url = null;
        }

        $results_table = results_table(do_lang_tempcode('REVIEW_WARNING_HISTORY'), $start, 'start', $max, 'max', $max_rows, $header_row, $out, [], null, null, null, paragraph(do_lang_tempcode('WARNINGS_HISTORY_TEXT', $_username), '4t4ygyerhrth4'));

        $tpl = do_template('CNS_WARNING_HISTORY_SCREEN', [
            '_GUID' => '4444beed9305f0460a6c00e6c87d4208',
            'TITLE' => $this->title,
            'MEMBER_ID' => strval($member_id),
            'VIEW_PROFILE_URL' => $view_profile_url,
            'ADD_WARNING_URL' => $add_warning_url,
            'RESULTS_TABLE' => $results_table,
        ]);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * View details about a specific warning.
     *
     * @return Tempcode The output of the run
     */
    public function view() : object
    {
        require_code('actionlog');
        require_code('cns_topics');
        require_code('templates_interfaces');

        $fields = [];

        $id = get_param_integer('id');

        $rows = $GLOBALS['FORUM_DB']->query_select('f_warnings', ['*'], ['id' => $id], '', 1);
        if (!array_key_exists(0, $rows)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }

        $row = $rows[0];

        // Basic info
        $fields['MEMBER'] = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_member_id']);
        $fields['BY'] = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_by']);
        $fields['DATE_TIME'] = get_timezoned_date_time($row['w_time'], false, false, get_member());
        $fields['IS_FORMAL_WARNING'] = ($row['w_is_warning'] == 0) ? do_lang('NO') : do_lang('YES');
        $fields['EXPLANATION'] = $row['w_explanation'];

        // Warning private topic
        if ($row['w_topic_id'] !== null) {
            $topic_rows = $GLOBALS['FORUM_DB']->query_select('f_topics', ['*'], ['id' => $row['w_topic_id']], '', 1);
            if (array_key_exists(0, $topic_rows)) {
                $topic_row = $topic_rows[0];
                if (cns_may_access_topic($row['w_topic_id'])) {
                    $pt_url = build_url(['page' => 'topicview', 'id' => $row['w_topic_id']], get_module_zone('topicview'));
                    $fields['PRIVATE_TOPIC'] = hyperlink($pt_url, do_lang('VIEW_TOPIC'), false, false);
                }
            }
        }

        if ($row['p_probation'] > 0) {
            $fields['PROBATION'] = do_lang('DAYS', $row['p_probation']);
        }

        if ($row['p_charged_points'] != 0) {
            $fields['CHARGED_POINTS'] = integer_format($row['p_charged_points']);
        }

        // These actions are based on action logs
        $rows = $GLOBALS['SITE_DB']->query_select('actionlogs', ['*'], ['warning_id' => $id]);
        foreach ($rows as $_row) {
            if ($_row['the_type'] === 'PRIVATE_TOPIC') {
                continue;
            }
            $test = actionlog_linkage($_row, null, null, false);
            if ($test !== null) {
                $fields[$_row['the_type']] = $test[0];
            }
        }
        $rows2 = $GLOBALS['FORUM_DB']->query_select('f_moderator_logs', ['l_reason AS reason', 'id', 'l_by AS member_id', 'l_date_and_time AS date_and_time', 'l_the_type AS the_type', 'l_param_a AS param_a', 'l_param_b AS param_b', 'l_warning_id AS warning_id'], ['l_warning_id' => $id]);
        foreach ($rows2 as $_row2) {
            if ($_row2['the_type'] === 'ADD_WARNING') {
                continue;
            }
            $test = actionlog_linkage($_row2, null, null, false);
            if ($test !== null) {
                $fields[$_row2['the_type']] = $test[0];
            }
        }

        $fields['ACTIONS'] = new Tempcode();

        // Edit action
        $fields['ACTIONS']->attach(hyperlink(build_url(['page' => '_SELF', 'type' => '_edit', 'id' => $row['id'], 'redirect' => protect_url_parameter(SELF_REDIRECT)], '_SELF'), do_lang('EDIT'), false, true, ''));

        // Undo actions
        if ($row['p_probation'] != 0) {
            $_undoing_url = build_url(['page' => '_SELF', 'type' => 'undo_probation'], '_SELF');
            $_undoing_link = div(hyperlink($_undoing_url, do_lang_tempcode('REMOVE_PROBATION_DAYS', escape_html(integer_format($row['p_probation']))), false, false, '', null, form_input_hidden('id', strval($row['id']))), '46t54yhrtghdfhdhdfg');
            $fields['ACTIONS']->attach($_undoing_link);
        }
        if (($row['p_changed_usergroup_from'] !== null) && ($row['p_changed_usergroup_to'] == $GLOBALS['FORUM_DRIVER']->get_member_row_field($row['w_member_id'], 'm_primary_group'))) {
            $fields['ACTIONS']->attach(div(hyperlink(build_url(['page' => '_SELF', 'type' => 'undo_group_change'], '_SELF'), do_lang_tempcode('RESTORE_USERGROUP_TO', escape_html(cns_get_group_name($row['p_changed_usergroup_from'], false))), false, true, '', null, form_input_hidden('id', strval($row['id']))), '53y5ryrtyhrtyrt'));
        }
        if (addon_installed('points')) {
            $charged_points = ($row['p_charged_points'] == 0) ? new Tempcode() : div(hyperlink(build_url(['page' => '_SELF', 'type' => 'undo_charge'], '_SELF'), do_lang_tempcode('RESTORE_POINTS', escape_html(integer_format($row['p_charged_points'], 0))), false, true, '', null, form_input_hidden('id', strval($row['id']))), 'dsgsgdfgddgdf');
            $fields['ACTIONS']->attach($charged_points);
        }
        if ($row['p_banned_ip'] != '') {
            $fields['ACTIONS']->attach(div(hyperlink(build_url(['page' => '_SELF', 'type' => 'undo_banned_ip'], '_SELF'), do_lang_tempcode('UNBAN_IP'), false, true, '', null, form_input_hidden('id', strval($row['id']))), '4teryeryrydfhyhrgf'));
        }
        if ($row['p_banned_member'] == 1) {
            $fields['ACTIONS']->attach(div(hyperlink(build_url(['page' => '_SELF', 'type' => 'undo_banned_member'], '_SELF'), do_lang_tempcode('UNBAN_MEMBER'), false, true, '', null, form_input_hidden('id', strval($row['id']))), '56ytryrtyhrtyrt'));
        }
        if ($row['p_silence_from_topic'] !== null) {
            $fields['ACTIONS']->attach(div(hyperlink(build_url(['page' => '_SELF', 'type' => 'undo_silence_from_topic'], '_SELF'), do_lang_tempcode('UNSILENCE_TOPIC'), false, true, '', null, form_input_hidden('id', strval($row['id']))), 'rgergdfhfhg'));
        }
        if ($row['p_silence_from_forum'] !== null) {
            $fields['ACTIONS']->attach(div(hyperlink(build_url(['page' => '_SELF', 'type' => 'undo_silence_from_forum'], '_SELF'), do_lang_tempcode('UNSILENCE_FORUM'), false, true, '', null, form_input_hidden('id', strval($row['id']))), 'ghgfhfghggf'));
        }
        if ($fields['ACTIONS']->is_empty()) {
            $fields['ACTIONS'] = do_lang_tempcode('NA_EM');
        }

        require_code('templates_map_table');
        return map_table_screen($this->title, $fields, null, null, true);
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_group_change() : object
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', ['id' => $id]);
        $changed_usergroup_from = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_changed_usergroup_from', ['id' => $id]);
        $GLOBALS['FORUM_DB']->query_update('f_members', ['m_primary_group' => $changed_usergroup_from], ['id' => $member_id], '', 1);

        log_it('UNDO_GROUP_CHANGE', strval($id), $GLOBALS['FORUM_DRIVER']->get_username($member_id));

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_charge() : object
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', ['id' => $id]);
        $charged_points = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_charged_points', ['id' => $id]);
        require_code('points2');
        charge_member($member_id, -$charged_points, do_lang('UNDO_CHARGE_FOR', strval($id)));
        $GLOBALS['FORUM_DB']->query_update('f_warnings', ['p_charged_points' => 0], ['id' => $id], '', 1);

        log_it('UNDO_CHARGE', strval($id), $GLOBALS['FORUM_DRIVER']->get_username($member_id));

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_probation() : object
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', ['id' => $id]);
        $probation = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_probation', ['id' => $id]);
        $on_probation_until = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_on_probation_until');
        if ($on_probation_until !== null) {
            $GLOBALS['FORUM_DB']->query_update('f_members', ['m_on_probation_until' => $on_probation_until - $probation * 60 * 60 * 24], ['id' => $member_id], '', 1);
        }
        $GLOBALS['FORUM_DB']->query_update('f_warnings', ['p_probation' => 0], ['id' => $id], '', 1);

        require_code('cns_general_action2');
        cns_mod_log_it('STOP_PROBATION', strval($id), $GLOBALS['FORUM_DRIVER']->get_username($member_id));

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_banned_ip() : object
    {
        require_code('failure');

        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', ['id' => $id]);
        $banned_ip = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_banned_ip', ['id' => $id]);
        remove_ip_ban($banned_ip);
        $GLOBALS['FORUM_DB']->query_update('f_warnings', ['p_banned_ip' => ''], ['id' => $id], '', 1);

        log_it('IP_UNBANNED', $banned_ip, strval($member_id));

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_banned_member() : object
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', ['id' => $id]);
        $banned_member = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_banned_member', ['id' => $id]);
        $GLOBALS['FORUM_DB']->query_update('f_members', ['m_is_perm_banned' => '0'], ['id' => $member_id], '', 1);
        $GLOBALS['FORUM_DB']->query_update('f_warnings', ['p_banned_member' => 0], ['id' => $id], '', 1);

        require_code('cns_general_action2');
        cns_mod_log_it('UNBAN_MEMBER', strval($id), $GLOBALS['FORUM_DRIVER']->get_username($member_id));

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_silence_from_topic() : object
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', ['id' => $id]);
        $silence_from_topic = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_silence_from_topic', ['id' => $id]);
        $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
            'member_id' => $member_id,
            'privilege' => 'submit_lowrange_content',
            'the_page' => '',
            'module_the_name' => 'topics',
            'category_name' => strval($silence_from_topic),
        ]);
        $GLOBALS['FORUM_DB']->query_update('f_warnings', ['p_silence_from_topic' => null], ['id' => $id], '', 1);

        require_code('cns_general_action2');
        cns_mod_log_it('UNSILENCE_TOPIC', strval($member_id), strval($id));

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_silence_from_forum() : object
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', ['id' => $id]);
        $silence_from_forum = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_silence_from_forum', ['id' => $id]);
        $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
            'member_id' => $member_id,
            'privilege' => 'submit_lowrange_content',
            'the_page' => '',
            'module_the_name' => 'forums',
            'category_name' => strval($silence_from_forum),
            'the_value' => '0',
        ]);
        $GLOBALS['FORUM_DB']->query_delete('member_privileges', [
            'member_id' => $member_id,
            'privilege' => 'submit_midrange_content',
            'the_page' => '',
            'module_the_name' => 'forums',
            'category_name' => strval($silence_from_forum),
            'the_value' => '0',
        ]);
        $GLOBALS['FORUM_DB']->query_update('f_warnings', ['p_silence_from_forum' => null], ['id' => $id], '', 1);

        require_code('cns_general_action2');
        cns_mod_log_it('UNSILENCE_FORUM', strval($member_id), strval($id));

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'history', 'id' => $member_id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }
}
