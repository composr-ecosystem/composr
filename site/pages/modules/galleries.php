<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    galleries
 */

/**
 * Module page class.
 */
class Module_galleries
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 11;
        $info['update_require_upgrade'] = true;
        $info['locked'] = false;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('galleries');
        $GLOBALS['SITE_DB']->drop_table_if_exists('images');
        $GLOBALS['SITE_DB']->drop_table_if_exists('videos');
        $GLOBALS['SITE_DB']->drop_table_if_exists('video_transcoding');

        delete_privilege('may_download_gallery');
        delete_privilege('high_personal_gallery_limit');
        delete_privilege('no_personal_gallery_limit');

        delete_privilege('autocomplete_keyword_gallery');
        delete_privilege('autocomplete_title_gallery');
        delete_privilege('autocomplete_keyword_image');
        delete_privilege('autocomplete_title_image');
        delete_privilege('autocomplete_keyword_videos');
        delete_privilege('autocomplete_title_videos');

        $GLOBALS['SITE_DB']->query_delete('group_category_access', ['module_the_name' => 'galleries']);

        $GLOBALS['SITE_DB']->query_delete('trackbacks', ['trackback_for_type' => 'galleries']);

        require_code('files');
        if (!$GLOBALS['DEV_MODE']) {
            deldir_contents(get_custom_file_base() . '/uploads/galleries', true);
            deldir_contents(get_custom_file_base() . '/uploads/galleries_thumbs', true);
        }
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        require_code('galleries');
        require_lang('galleries');
        require_code('galleries2');

        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('galleries', [
                'name' => '*ID_TEXT',
                'the_description' => 'LONG_TRANS__COMCODE',
                'fullname' => 'SHORT_TRANS__COMCODE',
                'add_date' => 'TIME',
                'rep_image' => 'URLPATH',
                'parent_id' => 'ID_TEXT',
                'watermark_top_left' => 'URLPATH',
                'watermark_top_right' => 'URLPATH',
                'watermark_bottom_left' => 'URLPATH',
                'watermark_bottom_right' => 'URLPATH',
                'accept_images' => 'BINARY',
                'accept_videos' => 'BINARY',
                'allow_rating' => 'BINARY',
                'allow_comments' => 'SHORT_INTEGER',
                'notes' => 'LONG_TEXT',
                'is_member_synched' => 'BINARY',
                'layout_mode' => 'ID_TEXT',
                'gallery_views' => 'INTEGER',
                'g_owner' => '?MEMBER',
                'gallery_sort' => 'ID_TEXT', // See allowed values in hooks/systems/config/galleries_sort_order
                'media_sort' => 'ID_TEXT', // See allowed values in hooks/systems/config/gallery_media_default_sort_order
            ]);
            $GLOBALS['SITE_DB']->create_index('galleries', 'watermark_top_left', ['watermark_top_left']);
            $GLOBALS['SITE_DB']->create_index('galleries', 'watermark_top_right', ['watermark_top_right']);
            $GLOBALS['SITE_DB']->create_index('galleries', 'watermark_bottom_left', ['watermark_bottom_left']);
            $GLOBALS['SITE_DB']->create_index('galleries', 'watermark_bottom_right', ['watermark_bottom_right']);
            $GLOBALS['SITE_DB']->create_index('galleries', 'gadd_date', ['add_date']);
            $GLOBALS['SITE_DB']->create_index('galleries', 'parent_id', ['parent_id']);
            $GLOBALS['SITE_DB']->create_index('galleries', 'ftjoin_gfullname', ['fullname']);
            $GLOBALS['SITE_DB']->create_index('galleries', 'ftjoin_gdescrip', ['the_description']);

            $GLOBALS['SITE_DB']->create_table('images', [
                'id' => '*AUTO',
                'cat' => 'ID_TEXT',
                'url' => 'URLPATH',
                'the_description' => 'LONG_TRANS__COMCODE',
                'allow_rating' => 'BINARY',
                'allow_comments' => 'SHORT_INTEGER',
                'allow_trackbacks' => 'BINARY',
                'notes' => 'LONG_TEXT',
                'submitter' => 'MEMBER',
                'validated' => 'BINARY',
                'add_date' => 'TIME',
                'edit_date' => '?TIME',
                'image_views' => 'INTEGER',
                'title' => 'SHORT_TRANS',
            ]);
            $GLOBALS['SITE_DB']->create_index('images', 'image_views', ['image_views']);
            $GLOBALS['SITE_DB']->create_index('images', 'category_list', ['cat']);
            $GLOBALS['SITE_DB']->create_index('images', 'i_validated', ['validated']);
            $GLOBALS['SITE_DB']->create_index('images', 'xis', ['submitter']);
            $GLOBALS['SITE_DB']->create_index('images', 'iadd_date', ['add_date']);
            $GLOBALS['SITE_DB']->create_index('images', 'ftjoin_dtitle', ['title']);

            $GLOBALS['SITE_DB']->create_table('videos', [
                'id' => '*AUTO',
                'cat' => 'ID_TEXT',
                'url' => 'URLPATH',
                'thumb_url' => 'URLPATH',
                'closed_captions_url' => 'URLPATH',
                'the_description' => 'LONG_TRANS__COMCODE',
                'allow_rating' => 'BINARY',
                'allow_comments' => 'SHORT_INTEGER',
                'allow_trackbacks' => 'BINARY',
                'notes' => 'LONG_TEXT',
                'submitter' => 'MEMBER',
                'validated' => 'BINARY',
                'add_date' => 'TIME',
                'edit_date' => '?TIME',
                'video_views' => 'INTEGER',
                'video_width' => 'INTEGER',
                'video_height' => 'INTEGER',
                'video_length' => 'INTEGER',
                'title' => 'SHORT_TRANS',
            ]);
            $GLOBALS['SITE_DB']->create_index('videos', 'video_views', ['video_views']);
            $GLOBALS['SITE_DB']->create_index('videos', 'vs', ['submitter']);
            $GLOBALS['SITE_DB']->create_index('videos', 'v_validated', ['validated']);
            $GLOBALS['SITE_DB']->create_index('videos', 'category_list', ['cat']);
            $GLOBALS['SITE_DB']->create_index('videos', 'vadd_date', ['add_date']);
            $GLOBALS['SITE_DB']->create_index('videos', 'ftjoin_dtitle', ['title']);

            add_privilege('GALLERIES', 'may_download_gallery', false);
            add_privilege('GALLERIES', 'high_personal_gallery_limit', false);
            add_privilege('GALLERIES', 'no_personal_gallery_limit', false);

            // Add root gallery
            add_gallery('root', do_lang('GALLERIES_HOME'), '', '', '', 1, 1, 0, GALLERY_LAYOUT_MODE_GRID);
            require_code('permissions2');
            set_global_category_access('galleries', 'root');

            // Setup homepage hero slider slides
            require_code('content2');
            install_predefined_content('galleries');
        }

        if (($upgrade_from === null) || ($upgrade_from < 7)) {
            delete_config_option('ffmpeg_path');

            $GLOBALS['SITE_DB']->create_table('video_transcoding', [
                't_id' => '*ID_TEXT',
                't_local_id' => '?AUTO_LINK',
                't_local_id_field' => 'ID_TEXT',
                't_error' => 'LONG_TEXT',
                't_url' => 'URLPATH',
                't_table' => 'ID_TEXT',
                't_url_field' => 'ID_TEXT',
                't_orig_filename_field' => 'ID_TEXT',
                't_width_field' => 'ID_TEXT',
                't_height_field' => 'ID_TEXT',
                't_output_filename' => 'ID_TEXT', // This is the filename in uploads/galleries where the transcoder is expected to place new files. If blank, this means that the post-transcode API call will be explicitly fed a URL instead.
            ]);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 7)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('videos', 'title', 'SHORT_TRANS');
            $GLOBALS['SITE_DB']->add_table_field('images', 'title', 'SHORT_TRANS');
            $GLOBALS['SITE_DB']->create_index('images', 'ftjoin_dtitle', ['title']);
            $GLOBALS['SITE_DB']->create_index('videos', 'ftjoin_dtitle', ['title']);
            $GLOBALS['SITE_DB']->add_table_field('galleries', 'gallery_views', 'INTEGER');
            $GLOBALS['SITE_DB']->add_table_field('galleries', 'g_owner', '?MEMBER');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 9)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('images', 'comments', 'LONG_TRANS', 'the_description');
            $GLOBALS['SITE_DB']->alter_table_field('videos', 'comments', 'LONG_TRANS', 'the_description');
            $GLOBALS['SITE_DB']->delete_table_field('galleries', 'teaser');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 10)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('video_transcoding', 't_local_id', '?AUTO_LINK', null);
            $GLOBALS['SITE_DB']->add_table_field('video_transcoding', 't_local_id_field', 'ID_TEXT', '');

            $GLOBALS['SITE_DB']->delete_index_if_exists('images', 'ftjoin_icomments');
            $GLOBALS['SITE_DB']->delete_index_if_exists('videos', 'ftjoin_vcomments');
        }

        if (($upgrade_from === null) || ($upgrade_from < 10)) {
            $GLOBALS['SITE_DB']->create_index('video_transcoding', 't_local_id', ['t_local_id']);

            $GLOBALS['SITE_DB']->create_index('galleries', '#gallery_search__combined', ['fullname', 'the_description']);
            $GLOBALS['SITE_DB']->create_index('images', '#image_search__combined', ['the_description', 'title']);
            $GLOBALS['SITE_DB']->create_index('videos', '#video_search__combined', ['the_description', 'title']);

            add_privilege('SEARCH', 'autocomplete_keyword_gallery', false);
            add_privilege('SEARCH', 'autocomplete_title_gallery', false);
            add_privilege('SEARCH', 'autocomplete_keyword_image', false);
            add_privilege('SEARCH', 'autocomplete_title_image', false);
            add_privilege('SEARCH', 'autocomplete_keyword_videos', false);
            add_privilege('SEARCH', 'autocomplete_title_videos', false);

            $GLOBALS['SITE_DB']->create_index('images', 'ftjoin_idescription', ['the_description']);
            $GLOBALS['SITE_DB']->create_index('videos', 'ftjoin_vdescription', ['the_description']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 11)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('galleries', 'description', 'LONG_TRANS__COMCODE', 'the_description');
            $GLOBALS['SITE_DB']->alter_table_field('images', 'description', 'LONG_TRANS__COMCODE', 'the_description');
            $GLOBALS['SITE_DB']->alter_table_field('videos', 'description', 'LONG_TRANS__COMCODE', 'the_description');

            rename_config_option('galleries_default_sort_order', 'gallery_media_default_sort_order');
            rename_config_option('gallery_name_order', 'galleries_sort_order');
            if (get_option('galleries_sort_order') == '1') {
                set_option('galleries_sort_order', 'title ASC');
            } else {
                set_option('galleries_sort_order', 'recent ASC');
            }
        }

        if (($upgrade_from !== null) && ($upgrade_from < 11)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('galleries', 'layout_mode', 'ID_TEXT');
            $GLOBALS['SITE_DB']->add_table_field('videos', 'closed_captions_url', 'URLPATH');

            $GLOBALS['SITE_DB']->add_table_field('galleries', 'gallery_sort', 'SHORT_TEXT');
            $GLOBALS['SITE_DB']->add_table_field('galleries', 'media_sort', 'SHORT_TEXT');

            $GLOBALS['SITE_DB']->query_update('galleries', ['layout_mode' => GALLERY_LAYOUT_MODE_GRID], ['flow_mode_interface' => '0']);
            $GLOBALS['SITE_DB']->query_update('galleries', ['layout_mode' => GALLERY_LAYOUT_MODE_CAROUSEL], ['flow_mode_interface' => '1']);

            $GLOBALS['SITE_DB']->delete_table_field('galleries', 'flow_mode_interface');

            $max = 100;
            $start = 0;
            do {
                $rows = $GLOBALS['SITE_DB']->query_select('images', ['id', 'thumb_url'], [], ' AND thumb_url LIKE \'' . db_encode_like('uploads/galleries_thumbs/%') . '\' ORDER BY id', $max, $start);
                foreach ($rows as $row) {
                    @unlink(get_custom_file_base() . '/' . urldecode($row['thumb_url']));
                }
                $start += $max;
            } while (!empty($rows));
            $GLOBALS['SITE_DB']->delete_table_field('images', 'thumb_url');

            set_option('gallery_media_default_sort_order', str_replace('add_date', 'recent', get_option('gallery_media_default_sort_order')));
            set_option('galleries_sort_order', str_replace('name', 'title', str_replace('add_date', 'recent', get_option('gallery_media_default_sort_order'))));
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('galleries')) {
            return null;
        }

        return [
            'browse' => ['GALLERIES_HOME', 'menu/rich_content/galleries'],
        ];
    }

    public $title;
    public $cat;
    public $id;
    public $myrow;
    public $root;
    public $implied_existence;
    public $fullname;
    public $rep_image;
    public $title_to_use;
    public $title_to_use_2;
    public $url;
    public $image_url;
    public $closed_captions_url;
    public $true_category_name;
    public $category_name;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('galleries', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_code('galleries');
        require_lang('galleries');
        require_code('content');

        inform_non_canonical_parameter('days');
        inform_non_canonical_parameter('select');
        inform_non_canonical_parameter('video_select');

        if ($type == 'image' || $type == 'video') {
            if (get_param_integer('slideshow', 0) == 1) {
                attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML
            }
        }

        if ($type == 'browse') {
            $cat = get_param_string('id', 'root');
            inject_feed_url('?mode=galleries&select=' . urlencode($cat), do_lang('GALLERY'));

            $root = get_param_string('keep_gallery_root', 'root');

            // Info on our gallery
            $gallery_rows = $GLOBALS['SITE_DB']->query_select('galleries', ['*'], ['name' => $cat], '', 1);
            $implied_existence = false;
            if (!array_key_exists(0, $gallery_rows)) {
                // Possibly we will 'imply' it's existence if this is a member gallery; allows normal rendering to finish, with add links
                $matches = [];
                if (preg_match('#^member_(\d+)_(.*)$#', $cat, $matches) != 0) {
                    $username = $GLOBALS['FORUM_DRIVER']->get_username(intval($matches[1]), false, USERNAME_DEFAULT_NULL);
                    if ($username !== null) {
                        $gallery_rows = $GLOBALS['SITE_DB']->query_select('galleries', ['*'], ['name' => $matches[2]], '', 1);
                    }
                }
                if (!array_key_exists(0, $gallery_rows)) {
                    return warn_screen(get_screen_title('ERROR_OCCURRED'), do_lang_tempcode('MISSING_RESOURCE', 'gallery'));
                }
                $myrow = $gallery_rows[0];
                $myrow['is_member_synched'] = 0;
                $fullname = do_lang('PERSONAL_GALLERY_OF', $username, get_translated_text($myrow['fullname']));
                $myrow['parent_id'] = $matches[2];
                $implied_existence = true;
            } else {
                $myrow = $gallery_rows[0];
                $fullname = get_translated_text($myrow['fullname']);
            }
            if ($fullname == '') {
                $fullname = $cat;
            }

            $rep_image = $myrow['rep_image'];

            if (!has_category_access(get_member(), 'galleries', $cat)) {
                access_denied('CATEGORY_ACCESS');
            }

            // Breadcrumbs
            $breadcrumbs = gallery_breadcrumbs($cat, $root, false, get_module_zone('galleries'), true);
            if ((has_privilege(get_member(), 'open_virtual_roots')) && (get_option('virtual_root_links') == '1') && ($cat != $root)) {
                $page_link = build_page_link(['page' => '_SELF', 'type' => 'browse', 'id' => $cat, 'keep_gallery_root' => $cat], '_SELF');
                $breadcrumbs[] = [$page_link, $fullname, do_lang_tempcode('VIRTUAL_ROOT')];
            } else {
                $breadcrumbs[] = ['', $fullname];
            }
            breadcrumb_set_parents($breadcrumbs);

            // Page title
            if ((get_value('disable_awards_in_titles') !== '1') && (addon_installed('awards'))) {
                require_code('awards');
                $awards = find_awards_for('gallery', $cat);
            } else {
                $awards = [];
            }
            $title_to_use = do_lang_tempcode('_GALLERY', make_fractionable_editable('gallery', $cat, $fullname));
            $title_to_use_2 = do_lang('_GALLERY', $fullname);
            $this->title = get_screen_title($title_to_use, false, [], null, $awards);

            // Metadata
            seo_meta_load_for('gallery', $cat, $title_to_use_2);
            set_extra_request_metadata([
                'identifier' => '_SEARCH:galleries:browse:' . $cat,
            ], $myrow, 'gallery', $cat);

            $this->cat = $cat;
            $this->root = $root;
            $this->implied_existence = $implied_existence;
            $this->myrow = $myrow;
            $this->fullname = $fullname;
            $this->rep_image = $rep_image;
            $this->title_to_use = $title_to_use;
            $this->title_to_use_2 = $title_to_use_2;
        }

        if ($type == 'image' || $type == 'video') {
            $id = get_param_integer('id');

            if (addon_installed('content_privacy')) {
                require_code('content_privacy');
                check_privacy($type, strval($id));
            }

            if ((get_value('disable_awards_in_titles') !== '1') && (addon_installed('awards'))) {
                require_code('awards');
                $awards = find_awards_for($type, strval($id));
            } else {
                $awards = [];
            }

            // Pic up some info
            $rows = $GLOBALS['SITE_DB']->query_select($type . 's', ['*'], ['id' => $id], '', 1);
            if (!array_key_exists(0, $rows)) {
                return warn_screen(get_screen_title('ERROR_OCCURRED'), do_lang_tempcode('MISSING_RESOURCE', escape_html($type)));
            }
            $myrow = $rows[0];
            $cat = $myrow['cat'];
            inject_feed_url('?mode=galleries&select=' . urlencode($cat), do_lang('GALLERY'));

            $url = $myrow['url'];
            if (url_is_local($url)) {
                $url = get_custom_base_url() . '/' . $url;
            }
            if ($type == 'image') {
                $image_url = $myrow['url'];
            } else {
                $image_url = $myrow['thumb_url'];
            }
            if (url_is_local($image_url)) {
                $image_url = get_custom_base_url() . '/' . $image_url;
            }

            $closed_captions_url = '';
            if ($type == 'video') {
                $closed_captions_url = $myrow['closed_captions_url'];
                if (url_is_local($closed_captions_url)) {
                    $closed_captions_url = get_custom_base_url() . '/' . $closed_captions_url;
                }
            }

            if (!has_category_access(get_member(), 'galleries', $cat)) {
                access_denied('CATEGORY_ACCESS');
            }

            $category_name = get_translated_text($GLOBALS['SITE_DB']->query_select_value('galleries', 'fullname', ['name' => $cat]));

            if (get_param_integer('slideshow', 0) == 1) {
                $this->title = get_screen_title('VIEW_SLIDESHOW', true, [make_fractionable_editable('gallery', $cat, $category_name)]);
            } else {
                $fe = directive_tempcode(
                    'FRACTIONAL_EDITABLE',
                    escape_html(get_translated_text($myrow['title'])),
                    [
                        make_string_tempcode(get_translated_text($myrow['title'])),
                        make_string_tempcode('title'),
                        make_string_tempcode((($type == 'video') ? '_SEARCH:cms_galleries:__edit_other' : '_SEARCH:cms_galleries:__edit:') . strval($id)),
                        make_string_tempcode('1'),
                        make_string_tempcode('1'),
                        make_string_tempcode(has_edit_permission('mid', get_member(), $myrow['submitter'], 'cms_galleries', ['galleries', $cat]) ? '1' : '0'),
                    ]
                );
                $this->title = get_screen_title((((get_translated_text($myrow['title']) == '') ? 'VIEW_' : '_VIEW_') . cms_strtoupper_ascii($type)), true, [$fe], null, $awards);
            }

            $title_plain = do_lang((((get_translated_text($myrow['title']) == '') ? 'VIEW_' : '_VIEW_') . cms_strtoupper_ascii($type)), get_translated_text($myrow['title']));

            $root = get_param_string('keep_gallery_root', 'root');

            seo_meta_load_for($type, strval($id));

            $breadcrumbs = gallery_breadcrumbs($cat, $root, true, get_module_zone('galleries'));
            $breadcrumbs[] = ['', $title_plain];
            breadcrumb_set_parents($breadcrumbs);

            set_extra_request_metadata([
                'identifier' => '_SEARCH:galleries:' . $type . ':' . strval($id),
            ], $myrow, $type, strval($id));

            $this->id = $id;
            $this->myrow = $myrow;
            $this->cat = $cat;
            $this->url = $url;
            $this->image_url = $image_url;
            $this->closed_captions_url = $closed_captions_url;
            $this->category_name = $category_name;
            $this->root = $root;
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_code('feedback');
        require_css('galleries');
        require_javascript('galleries');

        // What are we doing?
        $type = get_param_string('type', 'browse');
        if ($type == 'browse') {
            return $this->do_gallery();
        }

        if ((($type == 'image') || ($type === 'video')) && (get_param_integer('slideshow', null) === 1) && (get_param_integer('wide_high', null) === 1)) {
            return $this->start_slideshow();
        }

        if ($type == 'image') {
            return $this->show_image();
        }
        if ($type == 'video') {
            return $this->show_video();
        }

        return new Tempcode();
    }

    /**
     * The UI to show a gallery.
     *
     * @return Tempcode The UI
     */
    public function do_gallery() : object
    {
        $cat = $this->cat;
        $root = $this->root;
        $implied_existence = $this->implied_existence;
        $myrow = $this->myrow;
        $fullname = $this->fullname;
        $rep_image = $this->rep_image;
        $title_to_use = $this->title_to_use;
        $title_to_use_2 = $this->title_to_use_2;

        require_code('images');

        $just_gallery_row = db_map_restrict($myrow, ['name', 'the_description']);
        $description = get_translated_tempcode('galleries', $just_gallery_row, 'the_description');
        $may_download_gallery = has_privilege(get_member(), 'may_download_gallery', 'galleries', ['galleries', $cat]);

        // Management links
        if ((has_actual_page_access(null, 'cms_galleries', null, null)) && (has_submit_permission('mid', get_member(), get_ip_address(), 'cms_galleries', ['galleries', $cat])) && (can_submit_to_gallery($cat))) {
            $submit_cat = ($myrow['is_member_synched'] == 1) ? ('member_' . strval(get_member()) . '_' . $cat) : $cat;
            $submit_image_url = ($myrow['accept_images'] == 0) ? new Tempcode() : build_url(['page' => 'cms_galleries', 'type' => 'add', 'cat' => $submit_cat], get_module_zone('cms_galleries'));
            $submit_video_url = ($myrow['accept_videos'] == 0) ? new Tempcode() : build_url(['page' => 'cms_galleries', 'type' => 'add_other', 'cat' => $submit_cat], get_module_zone('cms_galleries'));
        } else {
            $submit_image_url = new Tempcode();
            $submit_video_url = new Tempcode();
        }
        if ((!$implied_existence) && (has_actual_page_access(null, 'cms_galleries', null, null)) && (has_edit_permission('cat_mid', get_member(), get_member_id_from_gallery_name($cat), 'cms_galleries', ['galleries', $cat]))) {
            $edit_url = build_url(['page' => 'cms_galleries', 'type' => '_edit_category', 'id' => $cat], get_module_zone('cms_galleries'));
        } else {
            $edit_url = new Tempcode();
        }
        if ((!$implied_existence) && (has_actual_page_access(null, 'cms_galleries', null, null)) && (has_submit_permission('cat_mid', get_member(), get_ip_address(), 'cms_galleries'))) {
            $add_gallery_url = build_url(['page' => 'cms_galleries', 'type' => 'add_category', 'parent_id' => $cat], get_module_zone('cms_galleries'));
        } else {
            $add_gallery_url = new Tempcode();
        }

        // Carousel mode puts emphasis on subgalleries, rather than entries; it is subgalleries that there are a lot of, rather than entries
        $get_layout_mode = get_param_string('layout_mode', null); // Allow override via URL
        if (($get_layout_mode !== null) && (in_array($get_layout_mode, GALLERY_LAYOUT_MODES))) {
            $myrow['layout_mode'] = $get_layout_mode;
        }

        // Views
        cms_register_shutdown_function_safe(function () use ($myrow, $cat) {
            $increment = statistical_update_model('galleries', $myrow['gallery_views']);
            if ($increment != 0) {
                $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'galleries SET gallery_views=gallery_views+' . strval($increment) . ' WHERE ' . db_string_equal_to('name', $cat), 1, 0, true); // Errors suppressed in case DB write access broken
            }
        });

        // Feedback
        list($rating_details, $comment_details, $trackback_details) = embed_feedback_systems(
            get_page_name(),
            $cat,
            $myrow['allow_rating'],
            $myrow['allow_comments'],
            0,
            1,
            null,
            build_url(['page' => '_SELF'], '_SELF', [], true, false, true),
            $title_to_use_2,
            find_overridden_comment_forum('galleries', $cat),
            $myrow['add_date']
        );

        // Sorting
        list($url_sort, $dir) = $this->get_sort_order();
        $_selectors = $this->get_sort_selectors();
        $selectors = new Tempcode();
        foreach ($_selectors as $selector_value => $selector_name) {
            $selected = ($url_sort . ' ' . $dir == $selector_value);
            $selectors->attach(do_template('PAGINATION_SORTER', ['_GUID' => '2cda0eb8456ba50801d803f33b2e1e9b', 'SELECTED' => $selected, 'NAME' => do_lang_tempcode($selector_name), 'VALUE' => $selector_value]));
        }
        $sort_url = get_self_url(false, false, ['sort' => null], false, true);
        $sorting = do_template('PAGINATION_SORT', ['_GUID' => '148c9f69ea1640fb2a6d1f6ca2e201f2', 'SORT' => 'sort', 'URL' => $sort_url, 'SELECTORS' => $selectors]);

        // Now show inner contents...

        $max = get_param_integer('module_max', get_default_gallery_max());
        $start = get_param_integer('module_start', 0);

        if ($myrow['layout_mode'] === GALLERY_LAYOUT_MODE_CAROUSEL) {
            return $this->do_gallery_carousel_mode($rating_details, $comment_details, $cat, $root, $description, $may_download_gallery, $edit_url, $add_gallery_url, $submit_image_url, $submit_video_url, $this->title, $rep_image, $start, $max, $fullname, $sorting, $myrow);
        } elseif ($myrow['layout_mode'] === GALLERY_LAYOUT_MODE_MOSAIC) {
            return $this->do_gallery_mosaic_mode($rating_details, $comment_details, $cat, $root, $description, $may_download_gallery, $edit_url, $add_gallery_url, $submit_image_url, $submit_video_url, $this->title, $fullname, $myrow);
        }
        return $this->do_gallery_grid_mode($rating_details, $comment_details, $cat, $root, $description, $may_download_gallery, $edit_url, $add_gallery_url, $submit_image_url, $submit_video_url, $this->title, $fullname, $myrow);
    }

    /**
     * The UI for a "carousel mode" gallery.
     *
     * @param  Tempcode $rating_details Rating area
     * @param  Tempcode $comment_details Commenting area
     * @param  ID_TEXT $cat Our gallery ID
     * @param  ID_TEXT $root Virtual root gallery
     * @param  Tempcode $description The description of the gallery
     * @param  boolean $may_download Whether may "download this gallery"
     * @param  Tempcode $edit_url The URL to "edit this gallery"
     * @param  Tempcode $add_gallery_url The URL to "add a gallery"
     * @param  Tempcode $submit_image_url The URL to "submit an image to this gallery"
     * @param  Tempcode $submit_video_url The URL to "submit a video to this gallery"
     * @param  Tempcode $title The title of the page (our of get_screen_title)
     * @param  URLPATH $rep_image The representative image for the gallery
     * @param  integer $start The start position we are in browsing through child galleries
     * @param  integer $max The maximum number of child galleries we can display per page
     * @param  string $fullname The gallery title
     * @param  Tempcode $sorting Sorting UI
     * @param  array $gallery_row The gallery row
     * @return Tempcode The UI
     */
    public function do_gallery_carousel_mode(object $rating_details, object $comment_details, string $cat, string $root, object $description, bool $may_download, object $edit_url, object $add_gallery_url, object $submit_image_url, object $submit_video_url, object $title, string $rep_image, int $start, int $max, string $fullname, object $sorting, array $gallery_row) : object
    {
        $myrow = $this->myrow;
        $gallery_sort = (($myrow['gallery_sort'] != '') ? $myrow['gallery_sort'] : get_option('galleries_sort_order'));
        $image_select = get_param_string('select', '*', INPUT_FILTER_GET_COMPLEX);
        $video_select = get_param_string('video_select', '*', INPUT_FILTER_GET_COMPLEX);
        $days = get_param_integer('days', null);

        // View current entry
        $row = null;
        $current_entry = new Tempcode();
        $view_url = new Tempcode();
        $full_url = '';
        $entry_edit_url = new Tempcode();
        $entry_rating_details = new Tempcode();
        $entry_comment_details = new Tempcode();
        $entry_trackback_details = new Tempcode();
        $entry_add_date_raw = '';
        $entry_edit_date_raw = '';
        $entry_views = '';
        $entry_title = '';
        $entry_submitter = null;
        $entry_description = new Tempcode();
        $probe_type = get_param_string('probe_type', 'first');
        $probe_id = get_param_integer('probe_id', 0);

        list($url_sort, $dir) = $this->get_sort_order();

        if ($probe_type == 'first') {
            $extra_where = ' AND ' . db_string_equal_to('cat', $cat);
            list($rows) = content_rows_for_multi_type(['image', 'video'], $days, $extra_where, '', $url_sort . ' ' . $dir, 0, 1, ['image' => $image_select, 'video' => $video_select], '', '', true, [], $this->get_allowed_sorts());
            if (array_key_exists(0, $rows)) {
                $row = $rows[0];
                $probe_type = $rows[0]['content_type'];
                $probe_id = $rows[0]['id'];
            }
            // If else, then we have no probe_type, and thus won't be able to show anything
        }
        if (($row !== null) && ($row['validated'] == 0) && (addon_installed('unvalidated'))) {
            if ((!has_privilege(get_member(), 'jump_to_unvalidated')) && ((is_guest()) || ($row['submitter'] != get_member()))) {
                access_denied('PRIVILEGE', 'jump_to_unvalidated');
            }

            $warning_details = do_template('WARNING_BOX', [
                '_GUID' => '5500ce574232db1e1577b3d69bbc0d6d',
                'WARNING' => do_lang_tempcode((get_param_integer('redirected', 0) == 1) ? 'UNVALIDATED_TEXT_NON_DIRECT' : 'UNVALIDATED_TEXT', 'gallery'),
            ]);
        } else {
            $warning_details = new Tempcode();
        }

        switch ($probe_type) {
            case 'video':
                if ($row === null) {
                    $map = ['cat' => $cat, 'id' => $probe_id];
                    if (addon_installed('content_privacy')) {
                        require_code('content_privacy');
                        check_privacy('video', strval($probe_id));
                    }
                    if ((!has_privilege(get_member(), 'see_unvalidated')) && (addon_installed('unvalidated'))) {
                        $map['validated'] = 1;
                    }
                    $rows = $GLOBALS['SITE_DB']->query_select('videos', ['*'], $map, '', 1);
                    if (!array_key_exists(0, $rows)) {
                        attach_message(do_lang_tempcode('MISSING_RESOURCE', 'video'), 'warn');
                        break;
                    }
                    $row = $rows[0];
                }

                $just_row = db_map_restrict($row, ['id', 'the_description']);

                if ((has_actual_page_access(null, 'cms_galleries', null, null)) && (has_edit_permission('mid', get_member(), $row['submitter'], 'cms_galleries', ['galleries', $cat]))) {
                    $entry_edit_url = build_url(['page' => 'cms_galleries', 'type' => '_edit_other', 'id' => $row['id']], get_module_zone('cms_galleries'));
                }

                // Video HTML
                $closed_captions_url = $row['closed_captions_url'];
                $thumb_url = $row['thumb_url'];
                $url = $row['url'];
                $video_player = show_gallery_video_media($url, $thumb_url, $row['video_width'], $row['video_height'], $row['video_length'], $row['submitter'], $closed_captions_url);
                $view_url = build_url(['page' => '_SELF', 'type' => 'video', 'id' => $row['id'], 'days' => (get_param_string('days', '') == '') ? null : get_param_string('days'), 'sort' => ($url_sort . ' ' . $dir == 'add_date DESC') ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select], '_SELF');

                // Some extra variables relating to the currently selected entry
                $entry_title = get_translated_text($row['title']);
                $entry_rating_details = get_rating_box(get_self_url(true), $entry_title, 'videos', strval($row['id']), $row['allow_rating'] == 1, $row['submitter']);
                $entry_comment_details = get_comments('videos', $row['allow_comments'] == 1, strval($row['id']), false, find_overridden_comment_forum('videos', $cat), null, null, false, null, $row['submitter'], $row['allow_comments'] == 2);
                $entry_trackback_details = get_trackbacks('videos', strval($row['id']), $row['allow_trackbacks'] == 1);
                $entry_add_date_raw = ($row['add_date'] === null) ? '' : strval($row['add_date']);
                $entry_edit_date_raw = ($row['edit_date'] === null) ? '' : strval($row['edit_date']);
                $entry_views = integer_format($row['video_views']);

                $current_entry = do_template('GALLERY_CAROUSEL_MODE_VIDEO', [
                    '_GUID' => 'b6a795dc3853789df2a2951293d0fb26',
                    '_TITLE' => get_translated_text($row['title']),
                    'EDIT_URL' => $entry_edit_url,
                    'MAIN' => true,
                    'RATING_DETAILS' => $entry_rating_details,
                    'DESCRIPTION' => get_translated_tempcode('videos', $just_row, 'the_description'),
                    'CAT' => $cat,
                    'THUMB_URL' => $url,
                    'FULL_URL' => $full_url,
                    'ID' => strval($row['id']),
                    'VIEWS' => strval($row['video_views']),
                    'ADD_DATE_RAW' => strval($row['add_date']),
                    'EDIT_DATE_RAW' => ($row['edit_date'] === null) ? '' : strval($row['edit_date']),
                    'SUBMITTER' => strval($row['submitter']),
                    'VIDEO_PLAYER' => $video_player,
                    'VIEW_URL' => $view_url,
                    'VIDEO_DETAILS' => show_video_details($row),
                    'COMMENT_COUNT' => ((get_option('is_on_comments') == '1') && (!has_no_forum()) && ($row['allow_comments'] >= 1)),
                ]);

                cms_register_shutdown_function_safe(function () use ($row) {
                    $increment = statistical_update_model('videos', $row['video_views']);
                    if ($increment != 0) {
                        $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'videos SET video_views=video_views+' . strval($increment) . ' WHERE id=' . strval($row['id']), 1, 0, true); // Errors suppressed in case DB write access broken
                    }
                });

                break;
            case 'image':
                if ($row === null) {
                    $map = ['cat' => $cat, 'id' => $probe_id];
                    if (addon_installed('content_privacy')) {
                        require_code('content_privacy');
                        check_privacy('image', strval($probe_id));
                    }
                    if ((!has_privilege(get_member(), 'see_unvalidated')) && (addon_installed('unvalidated'))) {
                        $map['validated'] = 1;
                    }
                    $rows = $GLOBALS['SITE_DB']->query_select('images', ['*'], $map, '', 1);
                    if (!array_key_exists(0, $rows)) {
                        attach_message(do_lang_tempcode('MISSING_RESOURCE', 'image'), 'warn');
                        break;
                    }
                    $row = $rows[0];
                }

                $just_row = db_map_restrict($row, ['id', 'the_description']);

                if ((has_actual_page_access(null, 'cms_galleries', null, null)) && (has_edit_permission('mid', get_member(), $row['submitter'], 'cms_galleries', ['galleries', $cat]))) {
                    $entry_edit_url = build_url(['page' => 'cms_galleries', 'type' => '_edit', 'id' => $row['id']], get_module_zone('cms_galleries'));
                }

                $image_url = $row['url'];
                if (url_is_local($image_url)) {
                    $file_size = file_exists(get_custom_file_base() . '/' . rawurldecode($image_url)) ? strval(filesize(get_custom_file_base() . '/' . rawurldecode($image_url))) : '';
                    $image_url = get_custom_base_url() . '/' . $image_url;
                } else {
                    $file_size = '';
                }

                $view_url = build_url(['page' => '_SELF', 'type' => 'image', 'id' => $row['id'], 'days' => (get_param_string('days', '') == '') ? null : get_param_string('days'), 'sort' => ($url_sort . ' ' . $dir == 'add_date DESC') ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select], '_SELF');

                // Some extra variables relatin to the currently selected entry
                $entry_title = get_translated_text($row['title']);
                $entry_rating_details = get_rating_box(get_self_url(true), $entry_title, 'images', strval($row['id']), $row['allow_rating'] == 1, $row['submitter']);
                $entry_comment_details = get_comments('images', $row['allow_comments'] == 1, strval($row['id']), false, find_overridden_comment_forum('images', $cat), null, null, false, null, $row['submitter'], $row['allow_comments'] == 2);
                $entry_trackback_details = get_trackbacks('images', strval($row['id']), $row['allow_trackbacks'] == 1);
                $entry_add_date_raw = ($row['add_date'] === null) ? '' : strval($row['add_date']);
                $entry_edit_date_raw = ($row['edit_date'] === null) ? '' : strval($row['edit_date']);
                $entry_views = integer_format($row['image_views']);

                $current_entry = do_template('GALLERY_CAROUSEL_MODE_IMAGE', [
                    '_GUID' => 'fd486cf9a3338bc277a7170a1961089b',
                    '_TITLE' => get_translated_text($row['title']),
                    'EDIT_URL' => $entry_edit_url,
                    'MAIN' => true,
                    'RATING_DETAILS' => $entry_rating_details,
                    'DESCRIPTION' => get_translated_tempcode('images', $just_row, 'the_description'),
                    'FILE_SIZE' => $file_size,
                    'CAT' => $cat,
                    'IMAGE_URL' => $image_url,
                    'ID' => strval($row['id']),
                    'VIEWS' => strval($row['image_views']),
                    'ADD_DATE_RAW' => strval($row['add_date']),
                    'EDIT_DATE_RAW' => ($row['edit_date'] === null) ? '' : strval($row['edit_date']),
                    'SUBMITTER' => strval($row['submitter']),
                    'VIEW_URL' => $view_url,
                    'COMMENT_COUNT' => ((get_option('is_on_comments') == '1') && (!has_no_forum()) && ($row['allow_comments'] >= 1)),
                ]);

                cms_register_shutdown_function_safe(function () use ($row) {
                    $increment = statistical_update_model('images', $row['image_views']);
                    if ($increment != 0) {
                        $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'images SET image_views=image_views+' . strval($increment) . ' WHERE id=' . strval($row['id']), 1, 0, true); // Errors suppressed in case DB write access broken
                    }
                });

                break;
        }

        // Show media
        $entries = new Tempcode();
        $extra_where = ' AND ' . db_string_equal_to('cat', $cat);
        $max = intval(get_option('gallery_entries_carousel_per_page'));
        list($rows) = content_rows_for_multi_type(['image', 'video'], $days, $extra_where, '', $url_sort . ' ' . $dir, 0, $max + 1, ['image' => $image_select, 'video' => $video_select], '', '', true, [], $this->get_allowed_sorts());
        foreach ($rows as $row) {
            $content_type = $row['content_type'];
            $table = $content_type . 's';

            if (($content_type == $probe_type) && ($row['id'] == $probe_id)) {
                // Currently viewed entry
                continue;
            }

            $just_row = db_map_restrict($row, ['id', 'the_description']);

            $entry_title = get_translated_text($row['title']);
            $entry_description = get_translated_tempcode($table, $just_row, 'the_description');

            $probe_url = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $cat, 'layout_mode' => get_param_string('layout_mode', null), 'probe_type' => $content_type, 'probe_id' => $row['id'], 'days' => (get_param_string('days', '') == '') ? null : get_param_string('days'), 'sort' => ($url_sort . ' ' . $dir == 'add_date DESC') ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select], '_SELF');
            $view_url_2 = build_url(['page' => '_SELF', 'type' => $content_type, 'id' => $row['id'], 'days' => (get_param_string('days', '') == '') ? null : get_param_string('days'), 'sort' => ($url_sort . ' ' . $dir == 'add_date DESC') ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select], '_SELF');
            if ($content_type == 'image') {
                $image_url = $row['url'];
            } else {
                $image_url = $row['thumb_url'];
            }
            if ($image_url == '') {
                $image_url = find_theme_image('na');
            }
            if (url_is_local($image_url)) {
                $image_url = get_custom_base_url() . '/' . $image_url;
            }

            $_edit_url = new Tempcode();
            if (has_delete_permission('mid', get_member(), $row['submitter'], 'cms_galleries', ['gallery', $row['cat']])) {
                $_edit_url = build_url(['page' => 'cms_galleries', 'type' => ($content_type == 'image') ? '__edit' : '__edit_other', 'id' => $row['id'], 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('cms_galleries'));
            }

            $class = (($content_type == $probe_type) && ($row['id'] == $probe_id)) ? 'currentimage' : '';
            $entries->attach(do_template('GALLERY_CAROUSEL_ENTRY', [
                '_GUID' => 'ff75c904ba7fe857484874483ed65f5a',
                'DESCRIPTION' => $entry_description,
                '_TITLE' => $entry_title,
                'TYPE' => $content_type,
                'ID' => strval($row['id']),
                'VIEWS' => strval($row[$content_type . '_views']),
                'ADD_DATE_RAW' => strval($row['add_date']),
                'EDIT_DATE_RAW' => ($row['edit_date'] === null) ? '' : strval($row['edit_date']),
                'SUBMITTER' => strval($row['submitter']),
                'CLASS' => $class,
                'IMAGE_URL' => $image_url,
                'VIEW_URL' => $probe_url,
                'VIEW_URL_2' => $view_url_2,
                '_EDIT_URL' => $_edit_url,
                'CAT' => $cat,
            ]));
        }

        // Member details
        $member_id = get_member_id_from_gallery_name($cat, null, true);
        if (get_forum_type() == 'cns') {
            require_code('cns_members');
            require_code('cns_members2');
        }
        $member_details = (($member_id === null) || (get_forum_type() != 'cns')) ? new Tempcode() : render_member_box($member_id, true, true, [], false);

        // Rep-image
        $rep_image_url = '';
        if (($rep_image != '') && (url_is_local($rep_image))) {
            $rep_image_url = get_custom_base_url() . '/' . $rep_image;
        } elseif ($rep_image != '') {
            $rep_image_url = $rep_image;
        }

        // Navigation
        list(, , , $first_entry_id, , , $first_type) = $this->build_set_navigation(db_string_equal_to('cat', $cat), '', '', $probe_id, $root, $probe_type, get_param_integer('wide_high', 0), $start, $max, $cat, $url_sort, $dir, $image_select, $video_select, $days);

        // Render
        return do_template('GALLERY_CAROUSEL_MODE_SCREEN', [
            '_GUID' => '73728cb94579f06ab487627101011d43',
            'FIRST_ENTRY_ID' => ($first_entry_id === null) ? '' : ($first_type . ':' . strval($first_entry_id)),
            'GALLERY_SORT' => $gallery_sort,
            'SORTING' => $sorting,
            '_TITLE' => $fullname,
            'MEMBER_ID' => ($member_id === null) ? '' : strval($member_id),
            'VIEW_URL' => $view_url,
            'FULL_URL' => $full_url,
            'PROBE_TYPE' => $probe_type,
            'PROBE_ID' => ($probe_id === null) ? '' : strval($probe_id),
            'ENTRY_TITLE' => $entry_title,
            'ENTRY_DESCRIPTION' => $entry_description,
            'ENTRY_SUBMITTER' => ($entry_submitter === null) ? '' : strval($entry_submitter),
            'ENTRY_VIEWS' => $entry_views,
            'ENTRY_ADD_DATE_RAW' => $entry_add_date_raw,
            'ENTRY_EDIT_DATE_RAW' => $entry_edit_date_raw,
            'ENTRY_TRACKBACK_DETAILS' => $entry_trackback_details,
            'ENTRY_RATING_DETAILS' => $entry_rating_details,
            'ENTRY_COMMENT_DETAILS' => $entry_comment_details,
            'ENTRY_EDIT_URL' => $entry_edit_url,
            'WARNING_DETAILS' => $warning_details,
            'TAGS' => get_loaded_tags('galleries'),
            'RATING_DETAILS' => $rating_details,
            'COMMENT_DETAILS' => $comment_details,
            'REP_IMAGE_URL' => $rep_image_url,
            'TITLE' => $title,
            'MEMBER_DETAILS' => $member_details,
            'DESCRIPTION' => $description,
            'CURRENT_ENTRY' => $current_entry,
            'ENTRIES' => $entries,
            'ADD_GALLERY_URL' => $add_gallery_url,
            'EDIT_URL' => $edit_url,
            'IMAGE_URL' => $submit_image_url,
            'VIDEO_URL' => $submit_video_url,
            'MAY_DOWNLOAD' => $may_download,
            'CAT' => $cat,
            'ACCEPT_IMAGES' => ($gallery_row['accept_images'] == 1),
            'ACCEPT_VIDEOS' => ($gallery_row['accept_videos'] == 1),
            'VIEWS' => strval($gallery_row['gallery_views']),
            'OWNER' => ($gallery_row['g_owner'] === null) ? null : strval($gallery_row['g_owner']),
        ]);
    }

    /**
     * The UI for an "grid mode" gallery.
     *
     * @param  Tempcode $rating_details Rating area
     * @param  Tempcode $comment_details Commenting area
     * @param  ID_TEXT $cat Our gallery ID
     * @param  ID_TEXT $root Virtual root gallery
     * @param  Tempcode $description The description of the gallery
     * @param  boolean $may_download Whether may "download this gallery"
     * @param  Tempcode $edit_url The URL to "edit this gallery"
     * @param  Tempcode $add_gallery_url The URL to "add a gallery"
     * @param  Tempcode $submit_image_url The URL to "submit an image to this gallery"
     * @param  Tempcode $submit_video_url The URL to "submit a video to this gallery"
     * @param  Tempcode $title The title of the page (our of get_screen_title)
     * @param  string $fullname The gallery title
     * @param  array $gallery_row The gallery row
     * @return Tempcode The UI
     */
    public function do_gallery_grid_mode(object $rating_details, object $comment_details, string $cat, string $root, object $description, bool $may_download, object $edit_url, object $add_gallery_url, object $submit_image_url, object $submit_video_url, object $title, string $fullname, array $gallery_row) : object
    {
        list($url_sort, $dir) = $this->get_sort_order();
        $gallery_sort = (($gallery_row['gallery_sort'] != '') ? $gallery_row['gallery_sort'] : get_option('galleries_sort_order'));

        // Entries
        if (get_option('galleries_subcat_narrowin') == '1') {
            $cat_select = $cat . '*';
        } else {
            $cat_select = $cat . '#';
        }
        $days = get_param_integer('days', null);
        $image_select = get_param_string('select', '*', INPUT_FILTER_GET_COMPLEX);
        $video_select = get_param_string('video_select', '*', INPUT_FILTER_GET_COMPLEX);
        $filter = either_param_string('active_filter', '');

        // Member gallery?
        $member_id = get_member_id_from_gallery_name($cat, null, true);
        if (get_forum_type() == 'cns') {
            require_code('cns_members');
            require_code('cns_members2');
        }
        $member_details = (($member_id === null) || (get_forum_type() != 'cns')) ? new Tempcode() : render_member_box($member_id, true, true, [], false);

        // Render
        return do_template('GALLERY_GRID_MODE_SCREEN', [
            '_GUID' => 'cec405597f47f5079b7c7f581fa6b5c2',
            '_TITLE' => $fullname,
            'MEMBER_ID' => ($member_id === null) ? '' : strval($member_id),
            'TAGS' => get_loaded_tags('galleries'),
            'CAT' => $cat,
            'MEMBER_DETAILS' => $member_details,
            'RATING_DETAILS' => $rating_details,
            'COMMENT_DETAILS' => $comment_details,
            'ADD_GALLERY_URL' => $add_gallery_url,
            'EDIT_URL' => $edit_url,
            'TITLE' => $title,
            'DESCRIPTION' => $description,
            'IMAGE_URL' => $submit_image_url,
            'VIDEO_URL' => $submit_video_url,
            'MAY_DOWNLOAD' => $may_download,
            'ACCEPT_IMAGES' => ($gallery_row['accept_images'] == 1),
            'ACCEPT_VIDEOS' => ($gallery_row['accept_videos'] == 1),
            'VIEWS' => strval($gallery_row['gallery_views']),
            'OWNER' => ($gallery_row['g_owner'] === null) ? null : strval($gallery_row['g_owner']),
            'CAT_SELECT' => $cat_select,
            'DAYS' => ($days === null) ? '' : strval($days),
            'IMAGE_SELECT' => $image_select,
            'VIDEO_SELECT' => $video_select,
            'FILTER' => $filter,
            'GALLERY_SORT' => $gallery_sort,
        ]);
    }

    /**
     * The UI for a "mosaic mode" gallery.
     *
     * @param  Tempcode $rating_details Rating area
     * @param  Tempcode $comment_details Commenting area
     * @param  ID_TEXT $cat Our gallery ID
     * @param  ID_TEXT $root Virtual root gallery
     * @param  Tempcode $description The description of the gallery
     * @param  boolean $may_download Whether may "download this gallery"
     * @param  Tempcode $edit_url The URL to "edit this gallery"
     * @param  Tempcode $add_gallery_url The URL to "add a gallery"
     * @param  Tempcode $submit_image_url The URL to "submit an image to this gallery"
     * @param  Tempcode $submit_video_url The URL to "submit a video to this gallery"
     * @param  Tempcode $title The title of the page (our of get_screen_title)
     * @param  string $fullname The gallery title
     * @param  array $gallery_row The gallery row
     * @return Tempcode The UI
     */
    public function do_gallery_mosaic_mode(object $rating_details, object $comment_details, string $cat, string $root, object $description, bool $may_download, object $edit_url, object $add_gallery_url, object $submit_image_url, object $submit_video_url, object $title, string $fullname, array $gallery_row) : object
    {
        list($url_sort, $dir) = $this->get_sort_order();
        $gallery_sort = (($gallery_row['gallery_sort'] != '') ? $gallery_row['gallery_sort'] : get_option('galleries_sort_order'));

        // Entries
        if (get_option('galleries_subcat_narrowin') == '1') {
            $cat_select = $cat . '*';
        } else {
            $cat_select = $cat . '#';
        }
        $days = get_param_string('days', '');
        $image_select = get_param_string('select', '*', INPUT_FILTER_GET_COMPLEX);
        $video_select = get_param_string('video_select', '*', INPUT_FILTER_GET_COMPLEX);
        $filter = either_param_string('active_filter', '');

        // Member gallery?
        $member_id = get_member_id_from_gallery_name($cat, null, true);
        if (get_forum_type() == 'cns') {
            require_code('cns_members');
            require_code('cns_members2');
        }
        $member_details = (($member_id === null) || (get_forum_type() != 'cns')) ? new Tempcode() : render_member_box($member_id, true, true, [], false);

        // Render
        return do_template('GALLERY_MOSAIC_MODE_SCREEN', [
            '_TITLE' => $fullname,
            'MEMBER_ID' => ($member_id === null) ? '' : strval($member_id),
            'TAGS' => get_loaded_tags('galleries'),
            'CAT' => $cat,
            'MEMBER_DETAILS' => $member_details,
            'RATING_DETAILS' => $rating_details,
            'COMMENT_DETAILS' => $comment_details,
            'ADD_GALLERY_URL' => $add_gallery_url,
            'EDIT_URL' => $edit_url,
            'TITLE' => $title,
            'DESCRIPTION' => $description,
            'IMAGE_URL' => $submit_image_url,
            'VIDEO_URL' => $submit_video_url,
            'MAY_DOWNLOAD' => $may_download,
            'ACCEPT_IMAGES' => ($gallery_row['accept_images'] == 1),
            'ACCEPT_VIDEOS' => ($gallery_row['accept_videos'] == 1),
            'VIEWS' => strval($gallery_row['gallery_views']),
            'OWNER' => ($gallery_row['g_owner'] === null) ? null : strval($gallery_row['g_owner']),
            'CAT_SELECT' => $cat_select,
            'DAYS' => ($days === null) ? '' : strval($days),
            'IMAGE_SELECT' => $image_select,
            'VIDEO_SELECT' => $video_select,
            'FILTER' => $filter,
            'GALLERY_SORT' => $gallery_sort,
        ]);
    }

    /**
     * Start a gallery slideshow.
     *
     * @return Tempcode The UI
     */
    public function start_slideshow() : object
    {
        $cat = $this->cat;
        $true_category_name = $this->category_name;

        $days = get_param_integer('days', null);
        $image_select = get_param_string('select', '*', INPUT_FILTER_GET_COMPLEX);
        $video_select = get_param_string('video_select', '*', INPUT_FILTER_GET_COMPLEX);

        $probe_type = get_param_string('type');
        $probe_id = get_param_integer('id');

        list($url_sort, $dir) = $this->get_sort_order();

        $slideshow_id = substr(md5(serialize([$cat, $url_sort, $dir, $days, $image_select, $video_select, $probe_type, $probe_id])), 0, 6);

        $extra_where = ' AND ' . db_string_equal_to('cat', $cat);
        $max = intval(get_option('gallery_entries_carousel_per_page'));
        list($rows, $total_items) = content_rows_for_multi_type(['image', 'video'], $days, $extra_where, '', $url_sort . ' ' . $dir, 0, null, ['image' => $image_select, 'video' => $video_select], '', '', true, [], $this->get_allowed_sorts());

        $current_index = 0;
        $current_url = null;
        $current_video = null;
        $current_comment_details = new Tempcode();

        $carousel_entries = new Tempcode();

        $is_on_comments = (get_option('is_on_comments') == '1') && (get_forum_type() != 'none') && ((get_forum_type() != 'cns') || (addon_installed('cns_forum')));

        $forum_by_type_and_cat = [
            'images' => [],
            'videos' => [],
        ];

        // Show media
        foreach ($rows as $i => $row) {
            $content_type = $row['content_type'];
            $table = $content_type . 's';
            $feedback_type = $content_type . 's';

            $just_row = db_map_restrict($row, ['the_description']) + ['id' => $row['id']];

            $entry_title = get_translated_text($row['title']);
            $entry_description = get_translated_tempcode($table, $just_row, 'the_description');

            $probe_url = build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $cat, 'layout_mode' => get_param_string('layout_mode', null), 'probe_type' => $content_type, 'probe_id' => $row['id'], 'days' => (get_param_string('days', '') == '') ? null : get_param_string('days'), 'sort' => ($url_sort . ' ' . $dir == 'add_date DESC') ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select], '_SELF');
            $view_url_2 = build_url(['page' => '_SELF', 'type' => $content_type, 'id' => $row['id'], 'days' => (get_param_string('days', '') == '') ? null : get_param_string('days'), 'sort' => ($url_sort . ' ' . $dir == 'add_date DESC') ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select], '_SELF');

            $full_url = $row['url'];
            if (url_is_local($full_url)) {
                $full_url = get_custom_base_url() . '/' . $full_url;
            }

            if ($content_type == 'image') {
                $image_url = $row['url'];
            } else {
                $image_url = $row['thumb_url'];
            }
            if (url_is_local($image_url)) {
                $image_url = get_custom_base_url() . '/' . $image_url;
            }

            $content_url = build_url(['page' => '_SELF', 'type' => $content_type, 'id' => $probe_id], '_SELF', [], false, false, true)->evaluate();
            $content_title = ($entry_title == '') ? do_lang('VIEW_IMAGE_IN', $true_category_name) : $entry_title;

            if (!isset($forum_by_type_and_cat[$feedback_type][$cat])) {
                $forum_by_type_and_cat[$feedback_type][$cat] = find_overridden_comment_forum($feedback_type, $cat);
            }
            $forum = $forum_by_type_and_cat[$feedback_type][$cat];

            if (($probe_type === $content_type) && ($probe_id === intval($row['id']))) {
                $current_index = $i;
                $current_url = $row['url'];
                $current_type = $content_type;

                if (url_is_local($current_url)) {
                    $current_url = get_custom_base_url() . '/' . $current_url;
                }

                if ($content_type === 'video') {
                    // Video HTML
                    $current_video = show_gallery_video_media($current_url, $image_url, $row['video_width'], $row['video_height'], $row['video_length'], $row['submitter'], $row['closed_captions_url']);
                }

                list($current_rating_details, $current_comment_details, $current_trackback_details) = embed_feedback_systems(
                    $feedback_type,
                    strval($row['id']),
                    $row['allow_rating'],
                    $row['allow_comments'],
                    $row['allow_trackbacks'],
                    $row['validated'],
                    $row['submitter'],
                    $content_url,
                    $content_title,
                    $forum,
                    $row['add_date']
                );
            }

            $_edit_url = new Tempcode();
            if (has_delete_permission('mid', get_member(), $row['submitter'], 'cms_galleries', ['gallery', $row['cat']])) {
                $_edit_url = build_url(['page' => 'cms_galleries', 'type' => ($content_type == 'image') ? '__edit' : '__edit_other', 'id' => $row['id'], 'redirect' => protect_url_parameter(SELF_REDIRECT)], get_module_zone('cms_galleries'));
            }

            $comments_options = null;
            $comments_options_hash = null;

            if ($is_on_comments && ($row['allow_comments'] == 1)) {
                $comments_options = json_encode([$feedback_type, $row['id'], $row['allow_comments'], $row['submitter'], $content_url, $content_title, $forum, $row['add_date']]);

                require_code('crypt');
                $comments_options_hash = ratchet_hash($comments_options, get_site_salt()); // A little security, to ensure $comments_options is not tampered with
            }

            $carousel_entries->attach(do_template('GALLERY_SLIDESHOW_CAROUSEL_ENTRY', [
                '_GUID' => 'ff75c904zx7fe857484874483ed65f5a',
                'INDEX' => strval($i),
                'DESCRIPTION' => $entry_description,
                '_TITLE' => $entry_title,
                'TYPE' => $content_type,
                'ID' => strval($row['id']),
                'VIEWS' => strval($row[$content_type . '_views']),
                'ADD_DATE_RAW' => strval($row['add_date']),
                'EDIT_DATE_RAW' => ($row['edit_date'] === null) ? '' : strval($row['edit_date']),
                'SUBMITTER' => strval($row['submitter']),
                'IS_CURRENT' => (($content_type == $probe_type) && ($row['id'] == $probe_id)),
                'IMAGE_URL' => $image_url,
                'FULL_URL' => $full_url,
                'VIEW_URL' => $probe_url,
                'VIEW_URL_2' => $view_url_2,
                '_EDIT_URL' => $_edit_url,
                'CAT' => $cat,
                'COMMENTS_OPTIONS' => $comments_options,
                'COMMENTS_OPTIONS_HASH' => $comments_options_hash,
            ]));
        }

        return do_template('GALLERY_SLIDESHOW_SCREEN', [
            '_GUID' => 'idkcfef2d71a4d8086d5351ede7731fe',
            'SLIDESHOW_ID' => $slideshow_id,
            '_TOTAL_ITEMS' => strval($total_items),
            'TOTAL_ITEMS' => integer_format($total_items),
            'CURRENT_INDEX' => strval($current_index),
            'CURRENT_URL' => $current_url,
            'CURRENT_VIDEO' => $current_video,
            'CURRENT_TYPE' => $current_type,
            'CURRENT_COMMENT_DETAILS' => $current_comment_details,
            'CAROUSEL_ENTRIES' => $carousel_entries,
        ]);
    }

    /**
     * The UI to show an image.
     *
     * @param  ?string $category_name Alternate category name to use (null: use standard one). This is useful if you are overriding this code to show images in virtual galleries.
     * @param  ?Tempcode $breadcrumbs Breadcrumbs (null: derive in this function)
     * @return Tempcode The UI
     */
    public function show_image(?string $category_name = null, ?object $breadcrumbs = null) : object
    {
        $id = $this->id;
        $myrow = $this->myrow;
        $cat = $this->cat;
        $url = $this->url;
        $image_url = $this->image_url;
        $true_category_name = $this->category_name;
        if ($category_name === null) {
            $category_name = $true_category_name;
        }
        $root = $this->root;

        if ((get_value('no_individual_gallery_view') === '1') && ($GLOBALS['SITE_DB']->query_select_value('galleries', 'layout_mode', ['name' => $cat]) == GALLERY_LAYOUT_MODE_CAROUSEL)) {
            return redirect_screen($this->title, build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $cat, 'probe_id' => $id, 'probe_type' => 'image'], '_SELF'));
        }

        $days = get_param_integer('days', null);
        $image_select = get_param_string('select', '*', INPUT_FILTER_GET_COMPLEX);
        $video_select = get_param_string('video_select', '*', INPUT_FILTER_GET_COMPLEX);

        list($url_sort, $dir) = $this->get_sort_order();

        // Views
        cms_register_shutdown_function_safe(function () use ($myrow, $id) {
            $increment = statistical_update_model('images', $myrow['image_views']);
            if ($increment != 0) {
                $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'images SET image_views=image_views+' . strval($increment) . ' WHERE id=' . strval($id), 1, 0, true); // Errors suppressed in case DB write access broken
            }
        });

        list($rating_details, $comment_details, $trackback_details) = embed_feedback_systems(
            'images',
            strval($id),
            $myrow['allow_rating'],
            $myrow['allow_comments'],
            $myrow['allow_trackbacks'],
            $myrow['validated'],
            $myrow['submitter'],
            build_url(['page' => '_SELF', 'type' => 'image', 'id' => $id], '_SELF', [], false, false, true),
            (get_translated_text($myrow['title']) == '') ? do_lang('VIEW_IMAGE_IN', $true_category_name) : get_translated_text($myrow['title']),
            find_overridden_comment_forum('images', $cat),
            $myrow['add_date']
        );

        // Description
        $just_row = db_map_restrict($myrow, ['cat', 'the_description']);
        $description = get_translated_tempcode('images', $just_row, 'the_description');

        // Validation
        if (($myrow['validated'] == 0) && (addon_installed('unvalidated'))) {
            if ((!has_privilege(get_member(), 'jump_to_unvalidated')) && ((is_guest()) || ($myrow['submitter'] != get_member()))) {
                access_denied('PRIVILEGE', 'jump_to_unvalidated');
            }

            $warning_details = do_template('WARNING_BOX', [
                '_GUID' => 'c32faacba974e648a67e5e91ffd3d8e5',
                'WARNING' => do_lang_tempcode((get_param_integer('redirected', 0) == 1) ? 'UNVALIDATED_TEXT_NON_DIRECT' : 'UNVALIDATED_TEXT', 'image'),
            ]);
        } else {
            $warning_details = new Tempcode();
        }

        if ((has_actual_page_access(null, 'cms_galleries', null, null)) && (has_edit_permission('mid', get_member(), $myrow['submitter'], 'cms_galleries', ['galleries', $cat]))) {
            $edit_url = build_url(['page' => 'cms_galleries', 'type' => '_edit', 'id' => $id], get_module_zone('cms_galleries'));
        } else {
            $edit_url = new Tempcode();
        }

        $add_date = get_timezoned_date_time($myrow['add_date']);
        $edit_date = ($myrow['edit_date'] === null) ? '' : get_timezoned_date_time($myrow['edit_date']);

        $extra_where = ' AND ' . db_string_equal_to('cat', $cat);
        list($n, $x, $nav) = $this->build_set_navigation($extra_where, '', $category_name, $id, $root, 'image', get_param_integer('wide_high', 0), get_param_integer('module_start', 0), get_param_integer('module_max', get_default_gallery_max()), $cat, $url_sort, $dir, $image_select, $video_select, $days);

        $member_id = get_member_id_from_gallery_name($cat, null, true);
        if (get_forum_type() == 'cns') {
            require_code('cns_members');
            require_code('cns_members2');
        }
        $member_details = (($member_id === null) || (get_forum_type() != 'cns')) ? new Tempcode() : render_member_box($member_id, true, true, [], false);

        return do_template('GALLERY_ENTRY_SCREEN', [
            '_GUID' => '332a19b6a72505f8e1eb4d288df247ce',
            'MEDIA_TYPE' => 'image',
            'E_TITLE' => get_translated_text($myrow['title']),
            'CAT' => $cat,
            'SLIDESHOW' => (get_param_integer('slideshow', 0) == 1),
            'TRUE_GALLERY_TITLE' => $true_category_name,
            'GALLERY_TITLE' => $category_name,
            'MEMBER_ID' => ($member_id === null) ? '' : strval($member_id),
            'ID' => strval($id),
            'TAGS' => get_loaded_tags('images'),
            'TITLE' => $this->title,
            'SUBMITTER' => strval($myrow['submitter']),
            'MEMBER_DETAILS' => $member_details,
            '_X' => strval($x),
            'X' => integer_format($x),
            '_N' => strval($n),
            'N' => integer_format($n),
            '_VIEWS' => strval($myrow['image_views']),
            'VIEWS' => integer_format($myrow['image_views']),
            'ADD_DATE_RAW' => strval($myrow['add_date']),
            'EDIT_DATE_RAW' => ($myrow['edit_date'] === null) ? '' : strval($myrow['edit_date']),
            'ADD_DATE' => $add_date,
            'EDIT_DATE' => $edit_date,
            'TRACKBACK_DETAILS' => $trackback_details,
            'RATING_DETAILS' => $rating_details,
            'COMMENT_DETAILS' => $comment_details,
            'EDIT_URL' => $edit_url,
            'NAV' => $nav,
            'DESCRIPTION' => $description,
            'URL' => $url,
            'IMAGE_URL' => $image_url,
            'WARNING_DETAILS' => $warning_details,
            'VIDEO_DETAILS' => null,
        ]);
    }

    /**
     * The UI to show a video.
     *
     * @param  ?string $category_name Alternate category name to use (null: use standard one). This is useful if you are overriding this code to show images in virtual galleries.
     * @param  ?Tempcode $breadcrumbs Breadcrumbs (null: derive in this function)
     * @return Tempcode The UI
     */
    public function show_video(?string $category_name = null, ?object $breadcrumbs = null) : object
    {
        $id = $this->id;
        $myrow = $this->myrow;
        $cat = $this->cat;
        $url = $this->url;
        $image_url = $this->image_url;
        $closed_captions_url = $this->closed_captions_url;
        $true_category_name = $this->category_name;
        if ($category_name === null) {
            $category_name = $true_category_name;
        }
        $root = $this->root;

        if ((get_value('no_individual_gallery_view') === '1') && ($GLOBALS['SITE_DB']->query_select_value('galleries', 'layout_mode', ['name' => $cat]) === GALLERY_LAYOUT_MODE_CAROUSEL)) {
            return redirect_screen($this->title, build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $cat, 'probe_id' => $id, 'probe_type' => 'video'], '_SELF'));
        }

        $days = get_param_integer('days', null);
        $image_select = get_param_string('select', '*', INPUT_FILTER_GET_COMPLEX);
        $video_select = get_param_string('video_select', '*', INPUT_FILTER_GET_COMPLEX);

        list($url_sort, $dir) = $this->get_sort_order();

        // Views
        cms_register_shutdown_function_safe(function () use ($myrow, $id) {
            $increment = statistical_update_model('videos', $myrow['video_views']);
            if ($increment != 0) {
                $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'videos SET video_views=video_views+' . strval($increment) . ' WHERE id=' . strval($id), 1, 0, true); // Errors suppressed in case DB write access broken
            }
        });

        list($rating_details, $comment_details, $trackback_details) = embed_feedback_systems(
            'videos',
            strval($id),
            $myrow['allow_rating'],
            $myrow['allow_comments'],
            $myrow['allow_trackbacks'],
            $myrow['validated'],
            $myrow['submitter'],
            build_url(['page' => '_SELF', 'type' => 'video', 'id' => $id], '_SELF', [], false, false, true),
            (get_translated_text($myrow['title']) == '') ? do_lang('VIEW_VIDEO_IN', $true_category_name) : get_translated_text($myrow['title']),
            find_overridden_comment_forum('videos', $cat),
            $myrow['add_date']
        );

        // Description
        $just_row = db_map_restrict($myrow, ['cat', 'the_description']);
        $description = get_translated_tempcode('videos', $just_row, 'the_description');

        // Validation
        if (($myrow['validated'] == 0) && (addon_installed('unvalidated'))) {
            if ((!has_privilege(get_member(), 'jump_to_unvalidated')) && ((is_guest()) || ($myrow['submitter'] != get_member()))) {
                access_denied('PRIVILEGE', 'jump_to_unvalidated');
            }

            $warning_details = do_template('WARNING_BOX', [
                '_GUID' => 'b32faacba974e648a67e5e91ffd3d8e5',
                'WARNING' => do_lang_tempcode((get_param_integer('redirected', 0) == 1) ? 'UNVALIDATED_TEXT_NON_DIRECT' : 'UNVALIDATED_TEXT', 'video'),
            ]);
        } else {
            $warning_details = new Tempcode();
        }

        if ((has_actual_page_access(null, 'cms_galleries', null, null)) && (has_edit_permission('mid', get_member(), $myrow['submitter'], 'cms_galleries', ['galleries', $cat]))) {
            $edit_url = build_url(['page' => 'cms_galleries', 'type' => '_edit_other', 'id' => $id], get_module_zone('cms_galleries'));
        } else {
            $edit_url = new Tempcode();
        }

        $add_date = get_timezoned_date_time($myrow['add_date']);
        $edit_date = ($myrow['edit_date'] === null) ? '' : get_timezoned_date_time($myrow['edit_date']);

        // Video HTML
        $video = show_gallery_video_media($url, $image_url, $myrow['video_width'], $myrow['video_height'], $myrow['video_length'], $myrow['submitter'], $myrow['closed_captions_url']);

        $extra_where = ' AND ' . db_string_equal_to('cat', $cat);
        list($n, $x, $nav) = $this->build_set_navigation($extra_where, '', $category_name, $id, $root, 'video', get_param_integer('wide_high', 0), get_param_integer('module_start', 0), get_param_integer('module_max', get_default_gallery_max()), $cat, $url_sort, $dir, $image_select, $video_select, $days);

        $member_id = get_member_id_from_gallery_name($cat, null, true);
        if (get_forum_type() == 'cns') {
            require_code('cns_members');
            require_code('cns_members2');
        }
        $member_details = (($member_id === null) || (get_forum_type() != 'cns')) ? new Tempcode() : render_member_box($member_id, true, true, [], false);

        $video_details = show_video_details($myrow);

        return do_template('GALLERY_ENTRY_SCREEN', [
            '_GUID' => '91e231906ed899513ec2db8a2974dddf',
            'MEDIA_TYPE' => 'video',
            'E_TITLE' => get_translated_text($myrow['title']),
            'CAT' => $cat,
            'SLIDESHOW' => (get_param_integer('slideshow', 0) == 1),
            'TRUE_GALLERY_TITLE' => $true_category_name,
            'GALLERY_TITLE' => $category_name,
            'MEMBER_ID' => ($member_id === null) ? '' : strval($member_id),
            'ID' => strval($id),
            'TAGS' => get_loaded_tags('videos'),
            'TITLE' => $this->title,
            'SUBMITTER' => strval($myrow['submitter']),
            'URL' => $url,
            'VIDEO_DETAILS' => $video_details,
            'MEMBER_DETAILS' => $member_details,
            '_X' => strval($x),
            'X' => integer_format($x),
            '_N' => strval($n),
            'N' => integer_format($n),
            '_VIEWS' => strval($myrow['video_views']),
            'VIEWS' => integer_format($myrow['video_views']),
            'ADD_DATE_RAW' => strval($myrow['add_date']),
            'EDIT_DATE_RAW' => ($myrow['edit_date'] === null) ? '' : strval($myrow['edit_date']),
            'ADD_DATE' => $add_date,
            'EDIT_DATE' => $edit_date,
            'RATING_DETAILS' => $rating_details,
            'TRACKBACK_DETAILS' => $trackback_details,
            'COMMENT_DETAILS' => $comment_details,
            'EDIT_URL' => $edit_url,
            'NAV' => $nav,
            'DESCRIPTION' => $description,
            'VIDEO' => $video,
            'WARNING_DETAILS' => $warning_details,
            'IMAGE_URL' => $image_url,
        ]);
    }

    /**
     * Sort out gallery back/next navigation.
     *
     * @param  string $extra_where Where clause for doing set query
     * @param  string $join Join clause for doing set query
     * @param  string $category_name The actual title for the gallery we are using
     * @param  ?AUTO_LINK $current_id The ID of the current entry of the type we are browsing in the gallery we are using (null: assume first)
     * @param  ID_TEXT $root The root gallery (the gallery we are considering as an ad hoc root, to allow gallery splitting-up)
     * @param  ?ID_TEXT $current_type The current type being browsed (null: assume first)
     * @set image video
     * @param  BINARY $wide_high If panels hidden
     * @param  integer $start Start position when returning to category
     * @param  integer $max Max to show when returning to category
     * @param  ID_TEXT $cat Category
     * @param  string $url_sort Sort parameter
     * @param  string $dir Sort direction
     * @set ASC DESC
     * @param  string $image_select Selectcode for limiting images displayed
     * @param  string $video_select Selectcode for limiting videos displayed
     * @param  ?integer $days Day limit for recency (null: no limit)
     * @return array A tuple of the navigation bits
     */
    public function build_set_navigation(string $extra_where, string $join, string $category_name, ?int $current_id, string $root, ?string $current_type, int $wide_high, int $start, int $max, string $cat, string $url_sort, string $dir, string $image_select, string $video_select, ?int $days) : array
    {
        $max = 500;
        list(, $max_rows) = content_rows_for_multi_type(['image', 'video'], $days, $extra_where, '', $url_sort . ' ' . $dir, 0, 0, ['image' => $image_select, 'video' => $video_select], '', '', true, [], $this->get_allowed_sorts());

        // These will hopefully be replaced with proper values
        $position = 1;
        $back_id = null;
        $back_type = $current_type;
        $next_id = null;
        $next_type = $current_type;
        $first_id = $current_id;
        $first_type = $current_type;

        if ($max_rows < $max) { // Not too many to navigate through
            list($rows, $max_rows) = content_rows_for_multi_type(['image', 'video'], $days, $extra_where, '', $url_sort . ' ' . $dir, 0, null, ['image' => $image_select, 'video' => $video_select], '', '', true, [], $this->get_allowed_sorts());

            list($url_sort, $dir) = $this->get_sort_order();

            // Find current position in navigation set, and neighbour positions
            foreach ($rows as $position => $row) {
                if ($position == 0) {
                    $first_id = $row['id'];
                    $first_type = $row['content_type'];
                }

                if (($current_id === null) || (($row['content_type'] == $current_type) && ($row['id'] == $current_id))) {
                    if ($position != 0) {
                        $back_id = $rows[$position - 1]['id'];
                        $back_type = $rows[$position - 1]['content_type'];
                    }

                    if ($position != count($rows) - 1) {
                        $next_id = $rows[$position + 1]['id'];
                        $next_type = $rows[$position + 1]['content_type'];
                    }

                    $position++; // We're not counting from zero

                    break;
                }
            }
        }

        // UI for navigating all this
        $nav_ui = ($first_id === null) ? new Tempcode() : $this->show_nav($category_name, $extra_where, $join, $current_id, $first_id, $back_id, $next_id, $root, $position, $max_rows, $current_type, $first_type, $back_type, $next_type, $wide_high, $start, $max, $cat, $url_sort, $dir, $image_select, $video_select, $days);

        return [$max_rows/*aka $n*/, $position/*aka $x*/, $nav_ui, $first_id, $back_id, $next_id, $first_type, $back_type, $next_type];
    }

    /**
     * Show gallery navigation bits used when viewing images/videos.
     *
     * @param  string $category_name The actual title for the gallery we are using
     * @param  string $extra_where Where clause for doing set query
     * @param  string $join Join clause for doing set query
     * @param  AUTO_LINK $current_id The ID of the current entry of the type we are browsing in the gallery we are using
     * @param  ?AUTO_LINK $first_id The ID of the first entry of the type we are browsing in the gallery we are using (null: no first)
     * @param  ?AUTO_LINK $back_id The ID of the previous entry of the type we are browsing in the gallery we are using (null: no previous)
     * @param  ?AUTO_LINK $next_id As above, except next entry (null: no next)
     * @param  ID_TEXT $root The root gallery (the gallery we are considering as an ad hoc root, to allow gallery splitting-up)
     * @param  integer $x Position in collection
     * @param  integer $n Total in collection
     * @param  ID_TEXT $current_type The first type being browsed
     * @set image video
     * @param  ID_TEXT $first_type The current type being browsed
     * @set image video
     * @param  ID_TEXT $back_type The type for the back link
     * @set image video
     * @param  ID_TEXT $next_type The type for the next link
     * @set image video
     * @param  BINARY $wide_high If panels hidden
     * @param  integer $start Start position when returning to category
     * @param  integer $max Max to show when returning to category
     * @param  ?ID_TEXT $cat Category (null: not in a category)
     * @param  string $url_sort Sort parameter
     * @param  string $dir Sort direction
     * @set ASC DESC
     * @param  string $image_select Selectcode for limiting images displayed
     * @param  string $video_select Selectcode for limiting videos displayed
     * @param  ?integer $days Day limit for recency (null: no limit)
     * @return Tempcode The navigation bits
     */
    public function show_nav(string $category_name, string $extra_where, string $join, int $current_id, ?int $first_id, ?int $back_id, ?int $next_id, string $root, int $x, int $n, string $current_type, string $first_type, string $back_type, string $next_type, int $wide_high, int $start, int $max, ?string $cat, string $url_sort, string $dir, string $image_select, string $video_select, ?int $days) : object
    {
        if ($back_id !== null) {
            $slideshow_previous_url = build_url(['page' => '_SELF', 'type' => $back_type, 'wide_high' => 1, 'id' => $back_id, 'slideshow' => 1, 'days' => $days, 'sort' => ($url_sort . ' ' . $dir == get_option('gallery_media_default_sort_order')) ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select] + propagate_filtercode(), '_SELF', [], true); // Continues, but as slideshow
            $back_url = build_url(['page' => '_SELF', 'type' => $back_type, 'id' => $back_id, 'wide_high' => ($wide_high == 0) ? null : $wide_high, 'days' => $days, 'sort' => ($url_sort . ' ' . $dir == get_option('gallery_media_default_sort_order')) ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select] + propagate_filtercode(), '_SELF', [], true);

            $select_fields = ['id', 'title'];
            if ($back_type == 'video') {
                $select_fields[] = 'thumb_url';
            } else {
                $select_fields[] = 'url';
            }

            $prev_row = $GLOBALS['SITE_DB']->query_select(($back_type === 'image') ? 'images' : 'videos', $select_fields, ['id' => $back_id]);
            $prev_row = $prev_row[0];

            $back_entry_title = get_translated_text($prev_row['title']);

            if ($back_type === 'image') {
                $back_image_url = $prev_row['url'];
            } else {
                $back_image_url = $prev_row['thumb_url'];
                if ($back_image_url == '') {
                    $back_image_url = find_theme_image('na');
                }
                if (url_is_local($back_image_url)) {
                    $back_image_url = get_custom_base_url() . '/' . $back_image_url;
                }
            }
        } else {
            $slideshow_previous_url = new Tempcode();
            $back_url = new Tempcode();
            $back_image_url = '';
            $back_entry_title = '';
        }
        if ($next_id !== null) {
            $slideshow_next_url = build_url(['page' => '_SELF', 'type' => $next_type, 'wide_high' => 1, 'id' => $next_id, 'slideshow' => 1, 'days' => $days, 'sort' => ($url_sort . ' ' . $dir == get_option('gallery_media_default_sort_order')) ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select] + propagate_filtercode(), '_SELF', [], true); // Continues, but as slideshow
            $next_url = build_url(['page' => '_SELF', 'type' => $next_type, 'id' => $next_id, 'wide_high' => ($wide_high == 0) ? null : $wide_high, 'days' => $days, 'sort' => ($url_sort . ' ' . $dir == get_option('gallery_media_default_sort_order')) ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select] + propagate_filtercode(), '_SELF', [], true);

            $select_fields = ['id', 'title'];
            if ($next_type == 'video') {
                $select_fields[] = 'thumb_url';
            } else {
                $select_fields[] = 'url';
            }

            $next_row = $GLOBALS['SITE_DB']->query_select(($next_type === 'image') ? 'images' : 'videos', $select_fields, ['id' => $next_id]);
            $next_row = $next_row[0];

            $next_entry_title = get_translated_text($next_row['title']);

            if ($next_type === 'image') {
                $next_image_url = $next_row['url'];
            } else {
                $next_image_url = $next_row['thumb_url'];
                if ($next_image_url == '') {
                    $next_image_url = find_theme_image('na');
                }
                if (url_is_local($next_image_url)) {
                    $next_image_url = get_custom_base_url() . '/' . $next_image_url;
                }
            }
        } else {
            $slideshow_next_url = new Tempcode();
            $next_url = new Tempcode();
            $next_image_url = '';
            $next_entry_title = '';
        }

        // Link to show more. Preserve info about where we were
        $slideshow_url = build_url(['page' => '_SELF', 'type' => $current_type, 'wide_high' => 1, 'id' => $current_id, 'slideshow' => 1, 'days' => $days, 'sort' => ($url_sort . ' ' . $dir == get_option('gallery_media_default_sort_order')) ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select] + propagate_filtercode(), '_SELF', [], true);
        $more_url = ($cat === null) ? null : build_url(['page' => '_SELF', 'type' => 'browse', 'id' => $cat, 'module_start' => ($start == 0) ? null : $start, 'module_max' => ($max == get_default_gallery_max()) ? null : $max, 'days' => $days, 'sort' => ($url_sort . ' ' . $dir == get_option('gallery_media_default_sort_order')) ? null : ($url_sort . ' ' . $dir), 'select' => ($image_select == '*') ? null : $image_select, 'video_select' => ($video_select == '*') ? null : $video_select] + propagate_filtercode(), '_SELF');

        // Only one entry?
        if ($n == 1) {
            $slideshow_url = new Tempcode();
        }

        return do_template('GALLERY_NAV', [
            '_GUID' => 'efd58f97d9c6254bd727125dfabb5a95',
            'X' => integer_format($x),
            'N' => integer_format($n),
            '_X' => strval($x),
            '_N' => strval($n),
            'SLIDESHOW_URL' => $slideshow_url,
            'SLIDESHOW_NEXT_URL' => $slideshow_next_url,
            'SLIDESHOW_PREVIOUS_URL' => $slideshow_previous_url,
            'BACK_ENTRY_TITLE' => $back_entry_title,
            'BACK_URL' => $back_url,
            'BACK_IMAGE_URL' => $back_image_url,
            'NEXT_ENTRY_TITLE' => $next_entry_title,
            'NEXT_URL' => $next_url,
            'NEXT_IMAGE_URL' => $next_image_url,
            'MORE_URL' => $more_url,
            'CATEGORY_NAME' => $category_name,
        ]);
    }

    /**
     * Read in the sort order currently active, and a suffix to the select statement to allow it to work. Apply security.
     *
     * @return array A pair: The URL-style sort order, The URL-style sort direction
     */
    protected function get_sort_order() : array
    {
        if (isset($this->myrow) && array_key_exists('media_sort', $this->myrow) && ($this->myrow['media_sort'] != '')) {
            return read_abstract_sorting_params($this->myrow['media_sort'], $this->get_allowed_sorts());
        }

        $sort = get_param_string('sort', get_option('gallery_media_default_sort_order'), INPUT_FILTER_GET_COMPLEX);
        return read_abstract_sorting_params($sort, $this->get_allowed_sorts());
    }

    /**
     * Get a mapping of the sort selectors that are supported for media.
     *
     * @return array A map between sort selector and language string
     */
    protected function get_sort_selectors() : array
    {
        $_selectors = [
            'recent ASC' => 'OLDEST_FIRST',
            'recent DESC' => 'NEWEST_FIRST',
            'title ASC' => 'TITLE',
            'url ASC' => 'FILENAME',
            'fixed_random ASC' => 'RANDOM',
        ];
        if (get_option('is_on_rating') == '1') {
            $_selectors = array_merge($_selectors, [
                'average_rating DESC' => 'RATING',
                'compound_rating DESC' => 'POPULARITY',
            ]);
        }
        return $_selectors;
    }

    /**
     * Get a list of the sorting supported for media.
     *
     * @return array A list of allowed sorts
     */
    protected function get_allowed_sorts() : array
    {
        $allowed_sorts = [];
        $_selectors = $this->get_sort_selectors();
        foreach (array_keys($_selectors) as $selector) {
            list($sort, ) = explode(' ', $selector, 2);
            $allowed_sorts[$sort] = true;
        }
        return array_keys($allowed_sorts);
    }
}
