<?php /*
  Composr
  Copyright (c) ocProducts, 2004-2022
  See docs/LICENSE.md for full licensing information.
  NOTE TO PROGRAMMERS:
  Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
  **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    points
 */

/**
 * Module page class.
 */
class Module_points

{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 9;
        $info['locked'] = true;
        $info['update_require_upgrade'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('points_ledger');
        $GLOBALS['SITE_DB']->drop_table_if_exists('escrow');
        $GLOBALS['SITE_DB']->drop_table_if_exists('escrow_logs');

        delete_privilege('send_points_to_self');
        delete_privilege('view_points_ledger');
        delete_privilege('use_points');
        delete_privilege('trace_anonymous_points_transactions');
        delete_privilege('use_points_escrow');
        delete_privilege('moderate_points_escrow');
        delete_privilege('send_points');
        delete_privilege('moderate_points');
        delete_privilege('amend_point_transactions');

        $GLOBALS['FORUM_DRIVER']->install_delete_custom_field('points_spent');
        $GLOBALS['FORUM_DRIVER']->install_delete_custom_field('gift_points_sent');
        $GLOBALS['FORUM_DRIVER']->install_delete_custom_field('points_received');
        $GLOBALS['FORUM_DRIVER']->install_delete_custom_field('points_gained_rating');
        $GLOBALS['FORUM_DRIVER']->install_delete_custom_field('points_gained_visiting');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('points_ledger', [
                'id' => '*AUTO',
                'date_and_time' => 'TIME',
                'amount_gift_points' => 'INTEGER',
                'amount_points' => 'INTEGER',
                'sender_id' => 'MEMBER',
                'recipient_id' => 'MEMBER',
                'reason' => 'SHORT_TRANS__COMCODE',
                'anonymous' => 'BINARY',
                'linked_to' => '?AUTO_LINK',
                'code_explanation' => 'LONG_TEXT',
                'status' => 'ID_TEXT', // See !POINTS:LEDGER_STATUS_*,
                'locked' => 'BINARY', // Status cannot be changed
            ]);
            $GLOBALS['SITE_DB']->create_index('points_ledger', 'sender_id', ['sender_id']);
            $GLOBALS['SITE_DB']->create_index('points_ledger', 'recipient_id', ['recipient_id']);
            $GLOBALS['SITE_DB']->create_index('points_ledger', 'amount_gift_points', ['amount_gift_points']); // admin_points
            $GLOBALS['SITE_DB']->create_index('points_ledger', 'linked_to', ['linked_to']);
            $GLOBALS['SITE_DB']->create_index('points_ledger', 'status', ['status']);

            add_privilege('POINTS', 'use_points', true);
            add_privilege('POINTS', 'trace_anonymous_points_transactions', false);
            add_privilege('POINTS', 'send_points_to_self', false);
            add_privilege('POINTS', 'view_points_ledger', true);

            $GLOBALS['FORUM_DRIVER']->install_create_custom_field('points_spent', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
            $GLOBALS['FORUM_DRIVER']->install_create_custom_field('gift_points_sent', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
            $GLOBALS['FORUM_DRIVER']->install_create_custom_field('points_received', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
            $GLOBALS['FORUM_DRIVER']->install_create_custom_field('points_gained_rating', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 8)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('chargelog', 'user_id', 'MEMBER', 'member_id');
        }

        if (($upgrade_from === null) || ($upgrade_from < 8)) {
            $GLOBALS['FORUM_DRIVER']->install_create_custom_field('points_gained_visiting', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
        }

        if (($upgrade_from === null) || ($upgrade_from < 9)) {
            $GLOBALS['SITE_DB']->create_table('escrow', [
                'id' => '*AUTO',
                'date_and_time' => 'TIME',
                'amount' => 'INTEGER',
                'original_points_ledger_id' => 'AUTO_LINK', // This will always point to the first ledger id (when the escrow was created / points sent to the system)
                'sender_id' => 'MEMBER',
                'recipient_id' => 'MEMBER',
                'reason' => 'SHORT_TRANS__COMCODE',
                'agreement' => 'LONG_TRANS__COMCODE',
                'expiration' => '?TIME',
                'sender_status' => 'BINARY', // 1 = sender marked satisfied
                'recipient_status' => 'BINARY', // 1 = recipient marked satisfied
                'status' => 'INTEGER', // -1, = cancelled, 0 = completed, 1 = active / not disputed, 2 = active / disputed
            ]);
            $GLOBALS['SITE_DB']->create_index('escrow', 'original_points_ledger_id', ['original_points_ledger_id']);
            $GLOBALS['SITE_DB']->create_index('escrow', 'sender_id', ['sender_id']);
            $GLOBALS['SITE_DB']->create_index('escrow', 'recipient_id', ['recipient_id']);
            $GLOBALS['SITE_DB']->create_index('escrow', 'date_and_time', ['date_and_time']);
            $GLOBALS['SITE_DB']->create_index('escrow', 'sender_status', ['sender_status']);
            $GLOBALS['SITE_DB']->create_index('escrow', 'recipient_status', ['recipient_status']);
            $GLOBALS['SITE_DB']->create_index('escrow', 'status', ['status']);

            $GLOBALS['SITE_DB']->create_table('escrow_logs', [
                'id' => '*AUTO',
                'escrow_id' => 'AUTO_LINK',
                'date_and_time' => 'TIME',
                'log_type' => 'ID_TEXT', // Will be a language string from points.ini, one of LOG_ESCROW_*
                'member_id' => '?MEMBER',
                'information' => '?LONG_TRANS__COMCODE',
            ]);
            $GLOBALS['SITE_DB']->create_index('escrow_logs', 'escrow_id', ['escrow_id']);
            $GLOBALS['SITE_DB']->create_index('escrow_logs', 'date_and_time', ['date_and_time']);
            $GLOBALS['SITE_DB']->create_index('escrow_logs', 'member_id', ['member_id']);

            add_privilege('POINTS', 'send_points', true);
            add_privilege('POINTS', 'use_points_escrow', true);
            add_privilege('POINTS', 'moderate_points_escrow', false);
            add_privilege('POINTS', 'moderate_points', false);
            add_privilege('POINTS', 'amend_point_transactions', false);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 9)) { // LEGACY
            $GLOBALS['SITE_DB']->rename_table('gifts', 'points_ledger');

            $GLOBALS['FORUM_DB']->add_table_field('points_ledger', 'amount_points', 'INTEGER');
            $GLOBALS['FORUM_DB']->add_table_field('points_ledger', 'linked_to', '?AUTO_LINK');
            $GLOBALS['FORUM_DB']->add_table_field('points_ledger', 'code_explanation', '?LONG_TEXT');
            $GLOBALS['FORUM_DB']->add_table_field('points_ledger', 'status', 'ID_TEXT');
            $GLOBALS['FORUM_DB']->add_table_field('points_ledger', 'locked', 'BINARY');
            $GLOBALS['SITE_DB']->alter_table_field('points_ledger', 'amount', 'INTEGER', 'amount_gift_points');
            $GLOBALS['SITE_DB']->alter_table_field('points_ledger', 'gift_from', 'MEMBER', 'sender_id');
            $GLOBALS['SITE_DB']->alter_table_field('points_ledger', 'gift_to', 'MEMBER', 'recipient_id');

            $GLOBALS['SITE_DB']->create_index('points_ledger', 'linked_to', ['linked_to']);
            $GLOBALS['SITE_DB']->create_index('points_ledger', 'status', ['status']);
            $GLOBALS['SITE_DB']->create_index('points_ledger', 'amount_gift_points', ['amount_gift_points']); // admin_points

            // Migrate all charge-log entries to points_ledger, and delete the chargelog table
            $start = 0;
            do {
                $chargelogs = $GLOBALS['FORUM_DB']->query_select('chargelog', ['*'], [], '', 500, $start);
                foreach ($chargelogs as $i => $chargelog) {
                    $GLOBALS['FORUM_DB']->query_insert('points_ledger', [
                        'date_and_time' => $chargelog['date_and_time'],
                        'amount_gift_points' => 0,
                        'amount_points' => $chargelog['amount'],
                        'sender_id' => $chargelog['member_id'],
                        'recipient_id' => $GLOBALS['FORUM_DRIVER']->get_guest_id(),
                        'reason' => $chargelog['reason'],
                        'anonymous' => 0,
                        'linked_to' => null,
                        'code_explanation' => '',
                        'status' => 'normal',
                        'locked' => 0
                    ]);
                }

                $start += 500;
            } while (array_key_exists(0, $chargelogs));
            $GLOBALS['SITE_DB']->drop_table_if_exists('chargelog');

            delete_privilege('have_negative_gift_points');
            delete_privilege('give_negative_points');

            rename_privilege('give_points_self', 'send_points_to_self');
            rename_privilege('view_charge_log', 'view_points_ledger');
            rename_privilege('trace_anonymous_gifts', 'trace_anonymous_points_transactions');

            $GLOBALS['FORUM_DRIVER']->install_edit_custom_field('points_used', 'points_spent', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
            $GLOBALS['FORUM_DRIVER']->install_edit_custom_field('points_gained_given', 'points_received', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
            $GLOBALS['FORUM_DRIVER']->install_edit_custom_field('gift_points_used', 'gift_points_sent', 20, /*locked=*/1, /*viewable=*/0, /*settable=*/0, /*required=*/0, '', 'integer');
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('points')) {
            return null;
        }

        if (get_forum_type() == 'cns' || get_forum_type() == 'none') {
            return [];
        }
        $ret = [
            'browse' => ['MEMBER_POINT_FIND', 'buttons/search'],
        ];
        if (!$check_perms || !is_guest($member_id)) {
            $ret['member'] = ['POINTS', 'menu/social/points'];
        }
        return $ret;
    }

    public $title;
    public $member_id_of;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('points', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_lang('points');

        if ($type == 'browse' || $type == '_search') {
            set_feed_url('?mode=points&select=');
        }

        if ($type == 'browse') {
            $this->member_id_of = db_get_first_id() + 1;
            set_feed_url('?mode=points&select=' . strval($this->member_id_of));

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MEMBER_POINT_FIND')]]);

            $this->title = get_screen_title('MEMBER_POINT_FIND');
        }

        if ($type == '_search') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MEMBER_POINT_FIND')]]);

            $this->title = get_screen_title('MEMBER_POINT_FIND');

            breadcrumb_set_self(do_lang_tempcode('RESULTS'));
        }

        if ($type == 'transact') {
            $member_id_of = get_param_integer('id');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MEMBER_POINT_FIND')], ['_SELF:_SELF:member:' . strval($member_id_of), do_lang_tempcode('_POINTS', escape_html($GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true)))]]);

            $this->title = get_screen_title('POINTS');
        }

        if ($type == 'escrow' || $type == 'do_escrow') {
            $member_id_of = get_param_integer('id');
            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true, USERNAME_DEFAULT_ERROR | USERNAME_GUEST_AS_DEFAULT);

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MEMBER_POINT_FIND')], ['_SELF:_SELF:member:' . strval($member_id_of), do_lang_tempcode('_POINTS', escape_html($GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true)))]]);

            $this->title = get_screen_title('_ESCROW_TO', true, [$username]);
        }

        if ($type == 'view_escrow' || $type == 'satisfy_escrow' || $type == 'dispute_escrow' || $type == 'moderate_escrow') {
            $id = get_param_integer('id');
            $member_id_of = get_param_integer('member_id_of', null);

            // Set title
            if ($type == 'satisfy_escrow') {
                $this->title = get_screen_title('_ESCROW_SATISFY', true, [escape_html(strval($id))]);
            } elseif ($type == 'dispute_escrow') {
                $this->title = get_screen_title('_ESCROW_DISPUTE', true, [escape_html(strval($id))]);
            } elseif ($type == 'moderate_escrow') {
                $this->title = get_screen_title('_ESCROW_MODERATE', true, [escape_html(strval($id))]);
            } else {
                $this->title = get_screen_title('ESCROW_VIEW');
            }

            // Set breadcrumbs
            if ($member_id_of === null) {
                $member_id_viewing = get_member();
                $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['id', 'sender_id', 'recipient_id'], ['id' => $id], '', 1);
                if ($_row === null || !array_key_exists(0, $_row)) {
                    warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
                }
                $row = $_row[0];

                if ($member_id_viewing == $row['recipient_id']) {
                    $member_id_of = $row['recipient_id'];
                } else {
                    $member_id_of = $row['sender_id'];
                }
            }
            $map = [['_SELF:_SELF:browse', do_lang_tempcode('MEMBER_POINT_FIND')], ['_SELF:_SELF:member:' . strval($member_id_of), do_lang_tempcode('_POINTS', escape_html($GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true)))]];
            if ($type != 'view_escrow') {
                $map[] = ['_SELF:_SELF:view_escrow:' . strval($row['id']), do_lang_tempcode('_ESCROW_VIEW', escape_html(strval($row['id'])))];
            }
            breadcrumb_set_parents($map);
        }


        if ($type == 'member') {
            $this->member_id_of = get_param_integer('id', get_member());
            set_feed_url('?mode=points&select=' . strval($this->member_id_of));

            $username = $GLOBALS['FORUM_DRIVER']->get_username($this->member_id_of, true, USERNAME_DEFAULT_ERROR | USERNAME_GUEST_AS_DEFAULT);
            $this->title = get_screen_title('_POINTS', true, [escape_html($username)]);
        }

        if ($type == 'reverse') {
            $member_id_of = get_param_integer('member_id_of');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MEMBER_POINT_FIND')], ['_SELF:_SELF:member:' . strval($member_id_of), do_lang_tempcode('_POINTS', escape_html($GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true)))]]);

            $this->title = get_screen_title('REVERSE_TRANSACTION');
        }

        if ($type == 'amend') {
            $member_id_of = get_param_integer('member_id_of');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MEMBER_POINT_FIND')], ['_SELF:_SELF:member:' . strval($member_id_of), do_lang_tempcode('_POINTS', escape_html($GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true)))]]);

            $this->title = get_screen_title('AMEND_REASON');
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        if (get_forum_type() == 'none') {
            warn_exit(do_lang_tempcode('NO_FORUM_INSTALLED'));
        }

        require_code('points');
        require_css('points');

        // Work out what we're doing here
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->points_search_form();
        }
        if ($type == '_search') {
            return $this->points_search_results();
        }
        if ($type == 'transact') {
            return $this->do_transact();
        }
        if ($type == 'escrow') {
            return $this->escrow();
        }
        if ($type == 'do_escrow') {
            return $this->do_escrow();
        }
        if ($type == 'view_escrow') {
            return $this->view_escrow();
        }
        if ($type == 'satisfy_escrow') {
            return $this->satisfy_escrow();
        }
        if ($type == 'dispute_escrow') {
            return $this->dispute_escrow();
        }
        if ($type == 'moderate_escrow') {
            return $this->moderate_escrow();
        }
        if ($type == 'member') {
            return $this->points_profile();
        }
        if ($type == 'reverse') {
            return $this->reverse();
        }
        if ($type == 'amend') {
            return $this->amend();
        }

        return new Tempcode();
    }

    /**
     * The UI to search for a member (with regard to viewing their point profile).
     *
     * @return Tempcode The UI
     */
    public function points_search_form() : object
    {
        $post_url = build_url(['page' => '_SELF', 'type' => '_search'], '_SELF', [], false, true);
        require_code('form_templates');
        if (!is_guest()) {
            $username = $GLOBALS['FORUM_DRIVER']->get_username(get_member());
        } else {
            $username = '';
        }
        $fields = form_input_username(do_lang_tempcode('USERNAME'), '', 'username', $username, true, false);
        $submit_name = do_lang_tempcode('SEARCH');
        $text = new Tempcode();
        $text->attach(paragraph(do_lang_tempcode('POINTS_SEARCH_FORM')));
        $text->attach(paragraph(do_lang_tempcode('WILDCARD')));

        return do_template('FORM_SCREEN', [
            '_GUID' => 'e5ab8d5d599093d1a550cb3b3e56d2bf',
            'GET' => true,
            'SKIP_WEBSTANDARDS' => true,
            'HIDDEN' => '',
            'TITLE' => $this->title,
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'buttons/search',
            'SUBMIT_NAME' => $submit_name,
            'TEXT' => $text,
        ]);
    }

    /**
     * The actualiser for a points profile search.
     *
     * @return Tempcode The UI
     */
    public function points_search_results() : object
    {
        $username = str_replace('*', '%', get_param_string('username'));
        if ((substr($username, 0, 1) == '%') && ($GLOBALS['FORUM_DRIVER']->get_num_members() > 3000)) {
            warn_exit(do_lang_tempcode('CANNOT_WILDCARD_START'));
        }
        if ((strpos($username, '%') !== false) && (strpos($username, '%') < 6) && ($GLOBALS['FORUM_DRIVER']->get_num_members() > 30000)) {
            warn_exit(do_lang_tempcode('CANNOT_WILDCARD_START'));
        }
        if ((strpos($username, '%') !== false) && (strpos($username, '%') < 12) && ($GLOBALS['FORUM_DRIVER']->get_num_members() > 300000)) {
            warn_exit(do_lang_tempcode('CANNOT_WILDCARD_START'));
        }
        $rows = $GLOBALS['FORUM_DRIVER']->get_matching_members($username, 100);
        if (!array_key_exists(0, $rows)) {
            return warn_screen($this->title, do_lang_tempcode('NO_RESULTS'));
        }

        $results = new Tempcode();
        foreach ($rows as $myrow) {
            $id = $GLOBALS['FORUM_DRIVER']->mrow_id($myrow);
            if (!is_guest($id)) {
                $url = points_url($id);
                $username = $GLOBALS['FORUM_DRIVER']->mrow_username($myrow);

                $results->attach(do_template('POINTS_SEARCH_RESULT', ['_GUID' => 'df240255b2981dcaee38e126622be388', 'URL' => $url, 'ID' => strval($id), 'USERNAME' => $username]));
            }
        }

        return do_template('POINTS_SEARCH_SCREEN', ['_GUID' => '659af8a012d459db09dad0325a75ac70', 'TITLE' => $this->title, 'RESULTS' => $results]);
    }

    /**
     * The UI for a points profile.
     *
     * @return Tempcode The UI
     */
    public function points_profile() : object
    {
        $member_id_of = $this->member_id_of;

        if (get_forum_type() == 'cns') {
            $url = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id_of, true);
            if (is_object($url)) {
                $url = $url->evaluate();
            }
            return redirect_screen($this->title, $url . '#tab--points');
        }

        require_code('points3');
        $content = points_profile($member_id_of, get_member());

        return do_template('POINTS_SCREEN', ['_GUID' => '7fadfc2886ba063008f6333fb3f19e75', 'TITLE' => $this->title, 'CONTENT' => $content]);
    }

    /**
     * The actualiser to transact points.
     *
     * @return Tempcode The UI
     */
    public function do_transact() : object
    {
        $member_id_of = get_param_integer('id');

        $trans_type = post_param_string('trans_type', 'send');

        $amount = post_param_integer('amount');
        $reason = post_param_string('reason');

        $worked = false;
        $message = do_lang_tempcode('SUCCESS');

        $member_id_viewing = get_member();
        if (is_guest($member_id_viewing)) { // No cheating
            $message = do_lang_tempcode('MUST_LOGIN');
        } else {
            if ($trans_type == 'send') {
                $anonymous = post_param_integer('anonymous', 0);

                $viewer_points_balance = points_balance($member_id_viewing);
                $viewer_gift_points_balance = gift_points_balance($member_id_viewing);

                // Check that the member has permission to send points
                if (!has_privilege($member_id_viewing, 'send_points') && !has_privilege($member_id_viewing, 'moderate_points')) {
                    access_denied('PRIVILEGE', 'send_points');
                } elseif (($member_id_of == $member_id_viewing) && (!has_privilege($member_id_viewing, 'send_points_to_self'))) { // No cheating
                    // Handle if the member is trying to send points to themselves
                    $message = do_lang_tempcode('PE_SELF');
                } elseif ($amount < 0) {
                    // Handle trying to send negative points
                    $message = do_lang_tempcode('PE_NEGATIVE_POINTS');
                } elseif ($reason == '') {
                    // Handle if reason is not specified
                    $message = do_lang_tempcode('IMPROPERLY_FILLED_IN');
                } elseif ((($viewer_gift_points_balance + $viewer_points_balance) < $amount)) {
                    // Handle if the member does not have enough points
                    $message = do_lang_tempcode('PE_LACKING_POINTS');
                } else {
                    // Confirm / make the transaction
                    require_code('points2');

                    $member_of = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of);
                    $confirm = get_param_integer('confirm', 0);
                    if ($confirm == 0) {
                        if (get_option('enable_gift_points') == '1') {
                            $point_spread = _points_transact_calculate($member_id_viewing, $amount);
                            $preview = do_lang_tempcode('ARE_YOU_SURE_TRANSACTION_GIFT_POINTS', escape_html($member_of), escape_html(integer_format($amount)), [escape_html(integer_format($point_spread[1])), escape_html(integer_format($point_spread[0])), escape_html(get_timezoned_date_time(time(), false))]);
                        } else {
                            $preview = do_lang_tempcode('ARE_YOU_SURE_TRANSACTION_POINTS', escape_html($member_of), escape_html(integer_format($amount)));
                        }
                        return do_template('CONFIRM_SCREEN', [
                            '_GUID' => 'd3d654c7dcffb353638d08b53697488b',
                            'TITLE' => $this->title,
                            'PREVIEW' => $preview,
                            'URL' => get_self_url(false, false, ['confirm' => 1]),
                            'FIELDS' => build_keep_post_fields(),
                        ]);
                    }

                    points_transact($member_id_viewing, $member_id_of, $reason, $amount, null, $anonymous);

                    // Randomised gifts but only if gift points system is enabled and the transaction was not anonymous
                    if ($anonymous == 0) {
                        $reward_credit_chance = intval(get_option('reward_credit_chance'));
                        $reward_credit_amount = intval(get_option('reward_credit_amount'));
                        if ((get_option('enable_gift_points') == '1') && (mt_rand(0, 100) < $reward_credit_chance) && ((floatval($reward_credit_chance) / 100.0 * $reward_credit_amount) >= floatval($amount))) {
                            points_credit_member($member_id_viewing, do_lang('_PR_LUCKY'), $reward_credit_amount);

                            $message = do_lang_tempcode('PR_LUCKY', escape_html(integer_format($reward_credit_amount)));
                        } else {
                            $message = do_lang_tempcode('PR_NORMAL');
                        }
                    }

                    $worked = true;
                }
            }
            if ($trans_type == 'credit') {
                if (has_privilege($member_id_viewing, 'moderate_points')) {
                    // Do not allow crediting negative points
                    if ($amount < 0) {
                        warn_exit(do_lang_tempcode('IMPROPERLY_FILLED_IN'));
                    }
                    $member_of = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of);
                    $confirm = get_param_integer('confirm', 0);
                    if ($confirm == 0) {
                        $member_points_balance = points_balance($member_id_of);
                        $preview = do_lang_tempcode('ARE_YOU_SURE_TRANSACTION_CREDIT', escape_html($member_of), escape_html(integer_format($amount)), [escape_html(integer_format($member_points_balance)), escape_html(integer_format($member_points_balance + $amount)), escape_html(get_timezoned_date_time(time(), false))]);
                        return do_template('CONFIRM_SCREEN', [
                            '_GUID' => 'd3d654c7dcffb353638d08b53697488b',
                            'TITLE' => $this->title,
                            'PREVIEW' => $preview,
                            'URL' => get_self_url(false, false, ['confirm' => 1]),
                            'FIELDS' => build_keep_post_fields(),
                        ]);
                    }

                    require_code('points2');
                    points_credit_member($member_id_of, $reason, $amount);
                    $balance = points_balance($member_id_of);

                    $message = do_lang_tempcode('MEMBER_HAS_BEEN_CREDITED', escape_html($member_of), escape_html(integer_format($amount)), escape_html(integer_format($balance)));

                    $worked = true;
                } else {
                    access_denied('I_ERROR');
                }
            }
            if ($trans_type == 'debit') {
                if (has_privilege($member_id_viewing, 'moderate_points')) {
                    // Do not allow debiting negative points
                    if ($amount < 0) {
                        warn_exit(do_lang_tempcode('IMPROPERLY_FILLED_IN'));
                    }
                    $member_of = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of);
                    $confirm = get_param_integer('confirm', 0);
                    if ($confirm == 0) {
                        $member_points_balance = points_balance($member_id_of);
                        $preview = do_lang_tempcode('ARE_YOU_SURE_TRANSACTION_DEBIT', escape_html($member_of), escape_html(integer_format($amount)), [escape_html(integer_format($member_points_balance)), escape_html(integer_format($member_points_balance - $amount)), escape_html(get_timezoned_date_time(time(), false))]);
                        return do_template('CONFIRM_SCREEN', [
                            '_GUID' => 'd3d654c7dcffb353638d08b53697488b',
                            'TITLE' => $this->title,
                            'PREVIEW' => $preview,
                            'URL' => get_self_url(false, false, ['confirm' => 1]),
                            'FIELDS' => build_keep_post_fields(),
                        ]);
                    }

                    require_code('points2');
                    points_debit_member($member_id_of, $reason, $amount);
                    $balance = points_balance($member_id_of);

                    $message = do_lang_tempcode('MEMBER_HAS_BEEN_DEBITED', escape_html($member_of), escape_html(integer_format($amount)), escape_html(integer_format($balance)));

                    $worked = true;
                } else {
                    access_denied('I_ERROR');
                }
            }
        }

        if ($worked) {
            // Show it worked / Refresh
            $url = points_url($member_id_of);
            return redirect_screen($this->title, $url, $message);
        }
        return warn_screen($this->title, $message);
    }

    /**
     * The UI for creating a new points escrow.
     *
     * @return Tempcode The UI
     */
    public function escrow() : object
    {
        $member_id_of = get_param_integer('id');
        $member_id_viewing = get_member();
        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true, USERNAME_GUEST_AS_DEFAULT | USERNAME_DEFAULT_ERROR);

        // Check privileges
        if (is_guest($member_id_viewing)) {
            access_denied('NOT_AS_GUEST');
        } elseif (!has_privilege($member_id_viewing, 'use_points_escrow')) {
            access_denied('PRIVILEGE', 'use_points_escrow');
        } elseif (is_guest($member_id_of)) {
            return warn_screen($this->title, do_lang_tempcode('ESCROW_NO_GUEST'));
        } elseif ($member_id_of == $member_id_viewing) {
            return warn_screen($this->title, do_lang_tempcode('ESCROW_NO_SELF'));
        } elseif (!has_privilege($member_id_of, 'use_points')) {
            return warn_screen($this->title, do_lang_tempcode('ESCROW_MEMBER_CANNOT_USE_POINTS', escape_html($username)));
        }

        require_code('form_templates');

        $fields = new Tempcode();
        $fields->attach(form_input_integer(do_lang_tempcode('POINTS'), do_lang_tempcode('DESCRIPTION_ESCROW_POINTS'), 'escrow_amount', null, true));
        $fields->attach(form_input_line_comcode(do_lang_tempcode('REASON'), do_lang_tempcode('DESCRIPTION_ESCROW_REASON'), 'escrow_reason', '', true, null));
        $fields->attach(form_input_text_comcode(do_lang_tempcode('ESCROW_AGREEMENT'), do_lang_tempcode('DESCRIPTION_ESCROW_AGREEMENT'), 'escrow_agreement', '', true));
        $fields->attach(form_input_date(do_lang_tempcode('EXPIRY_DATE'), do_lang_tempcode('DESCRIPTION_ESCROW_EXPIRY_TIME', escape_html($username)), 'escrow_expiry_time', false, true, true));

        $escrow_url = build_url(['page' => 'points', 'type' => 'do_escrow', 'id' => $member_id_of], get_module_zone('points'));

        return do_template('FORM_SCREEN', [
            '_GUID' => 'ce1752a0c5508a061bffbf242a13e5bd',
            'HIDDEN' => new Tempcode(),
            'TITLE' => $this->title,
            'FIELDS' => $fields,
            'TEXT' => do_lang_tempcode('DESCRIPTION_ESCROW', escape_html($username)),
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => do_lang_tempcode('PROCEED'),
            'URL' => $escrow_url,
            'JS_FUNCTION_CALLS' => [],
        ]);
    }

    /**
     * The actualiser for escrowing points to a member.
     *
     * @return Tempcode The UI
     */
    public function do_escrow() : object
    {
        require_code('points2');

        $member_id_of = get_param_integer('id');
        $member_id_viewing = get_member();

        $amount = post_param_integer('escrow_amount');
        $reason = post_param_string('escrow_reason');
        $expiry_time = post_param_date('escrow_expiry_time');
        $agreement = post_param_string('escrow_agreement');

        $viewer_gift_points_balance = gift_points_balance($member_id_viewing);
        $viewer_points_balance = points_balance($member_id_viewing);
        $viewer_balance = ($viewer_gift_points_balance + $viewer_points_balance);

        // Make sure this is a valid transaction
        if (is_guest($member_id_viewing)) {
            access_denied('NOT_AS_GUEST');
        } elseif (!has_privilege($member_id_viewing, 'use_points_escrow')) {
            access_denied('PRIVILEGE', 'use_points_escrow');
        } elseif (is_guest($member_id_of)) {
            return warn_screen($this->title, do_lang_tempcode('ESCROW_NO_GUEST'));
        } elseif ($member_id_of == $member_id_viewing) {
            return warn_screen($this->title, do_lang_tempcode('ESCROW_NO_SELF'));
        } elseif (!has_privilege($member_id_of, 'use_points')) {
            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of, true, USERNAME_GUEST_AS_DEFAULT | USERNAME_DEFAULT_ERROR);
            return warn_screen($this->title, do_lang_tempcode('ESCROW_MEMBER_CANNOT_USE_POINTS', escape_html($username)));
        } elseif (($amount < 0) || ($reason == '') || (($expiry_time !== null) && ($expiry_time < time()))) {
            return warn_screen($this->title, do_lang_tempcode('IMPROPERLY_FILLED_IN'));
        } elseif ($viewer_balance < $amount) {
            if (get_option('enable_gift_points') == '1') {
                return warn_screen($this->title, do_lang_tempcode('ESCROW_NOT_ENOUGH_GIFT_POINTS', escape_html(integer_format($amount)), escape_html(integer_format($viewer_gift_points_balance)), escape_html(integer_format($viewer_points_balance))));
            } else {
                return warn_screen($this->title, do_lang_tempcode('ESCROW_NOT_ENOUGH_POINTS', escape_html(integer_format($amount)), escape_html(integer_format($viewer_points_balance))));
            }
        }

        // Confirmation screen
        $member_of = $GLOBALS['FORUM_DRIVER']->get_username($member_id_of);
        $confirm = get_param_integer('confirm', 0);
        if ($confirm == 0) {
            if (get_option('enable_gift_points') == '1') {
                $point_spread = _points_transact_calculate($member_id_viewing, $amount);
                $preview = do_lang_tempcode('ARE_YOU_SURE_ESCROW_GIFT_POINTS', escape_html($member_of), escape_html(integer_format($amount)), [escape_html(integer_format($point_spread[1])), escape_html(integer_format($point_spread[0])), escape_html(get_timezoned_date_time(time(), false))]);
            } else {
                $preview = do_lang_tempcode('ARE_YOU_SURE_ESCROW_POINTS', escape_html($member_of), escape_html(integer_format($amount)));
            }
            return do_template('CONFIRM_SCREEN', [
                '_GUID' => 'd3d654c7dcffb353638d08b53697488b',
                'TITLE' => $this->title,
                'PREVIEW' => $preview,
                'URL' => get_self_url(false, false, ['confirm' => 1]),
                'FIELDS' => build_keep_post_fields(),
            ]);
        }

        // Create the escrow
        require_code('points_escrow');
        $id = escrow_points($member_id_viewing, $member_id_of, $amount, $reason, $agreement, $expiry_time);

        if ($id === null) {
            return warn_screen($this->title, do_lang_tempcode('INTERNAL_ERROR'));
        }

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'view_escrow', 'id' => $id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The user interface for viewing and managing an escrow.
     *
     * @return Tempcode The UI
     */
    public function view_escrow() : object
    {
        $member_id_viewing = get_member();

        // No guests allowed
        if (is_guest($member_id_viewing)) {
            access_denied('NOT_AS_GUEST');
        }

        $id = get_param_integer('id');

        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];

        // Are we trying to access an escrow we do not have the privilege to access?
        if ($row['sender_id'] != $member_id_viewing && $row['recipient_id'] != $member_id_viewing && !has_privilege($member_id_viewing, 'moderate_points_escrow')) {
            access_denied('PRIVILEGE', 'moderate_points_escrow');
        }

        $reason = get_translated_tempcode('escrow', $row, 'reason');

        $date = get_timezoned_date_time($row['date_and_time']);
        $expiry = ($row['expiration'] !== null) ? get_timezoned_date_time($row['expiration']) : do_lang_tempcode('NA_EM');
        $from_name = is_guest($row['sender_id']) ? do_lang('SYSTEM') : $GLOBALS['FORUM_DRIVER']->get_username($row['sender_id'], true);
        $_from_name = (is_guest($row['sender_id'])) ? make_string_tempcode(escape_html($from_name)) : hyperlink(points_url($row['sender_id']), escape_html($from_name), false, false, do_lang_tempcode('VIEW_POINTS'));
        $to_name = is_guest($row['recipient_id']) ? do_lang('SYSTEM') : $GLOBALS['FORUM_DRIVER']->get_username($row['recipient_id'], true);
        $_to_name = (is_guest($row['recipient_id'])) ? make_string_tempcode(escape_html($to_name)) : hyperlink(points_url($row['recipient_id']), escape_html($to_name), false, false, do_lang_tempcode('VIEW_POINTS'));

        $buttons = new Tempcode();
        $status = new Tempcode();

        switch ($row['status']) {
            case -1: // In points2.php points_transaction_reverse, reversing the points transaction will also cancel / mark the escrow as -1
                $status = do_lang_tempcode('ESCROW_STATUS__CANCELLED');
                break;
            case 0:
                $status = do_lang_tempcode('ESCROW_STATUS__COMPLETED');
                break;
            default: // 1 and 2
                $involved = ($member_id_viewing == $row['sender_id']) || ($member_id_viewing == $row['recipient_id']);

                // Dispute button
                if ($involved) {
                    $hidden = new Tempcode();
                    $escrow_url = build_url(['page' => 'points', 'type' => 'dispute_escrow', 'id' => $row['id']]);
                    $buttons->attach(do_template('BUTTON_SCREEN', ['_GUID' => 'da69b2ee5495c9af670399dd080f662e', 'IMMEDIATE' => true, 'URL' => $escrow_url, 'TITLE' => do_lang_tempcode('ESCROW_DISPUTE'), 'IMG' => 'buttons/report', 'HIDDEN' => $hidden]));
                }

                // Satisfy escrow buttons; not shown / allowed if an escrow is disputed
                if (($row['status'] == 1) && (($member_id_viewing == $row['sender_id'] && $row['sender_status'] == 0) || ($member_id_viewing == $row['recipient_id'] && $row['recipient_status'] == 0))) {
                    $hidden = new Tempcode();
                    $escrow_url = build_url(['page' => 'points', 'type' => 'satisfy_escrow', 'id' => $row['id']]);
                    $buttons->attach(do_template('BUTTON_SCREEN', ['_GUID' => 'da69b2ee5495c9af670399dd080f662e', 'IMMEDIATE' => true, 'URL' => $escrow_url, 'TITLE' => do_lang_tempcode('ESCROW_SATISFIED'), 'IMG' => 'buttons/yes', 'HIDDEN' => $hidden]));
                }

                // Determine actual status
                if ($row['status'] == 2) {
                    $status = do_lang_tempcode('ESCROW_STATUS__DISPUTED');
                } elseif ($row['sender_status'] == 0 && $row['recipient_status'] == 0) {
                    $status = do_lang_tempcode('ESCROW_STATUS__PENDING', do_lang('_ESCROW_STATUS__PENDING_BOTH_L'));
                } elseif ($row['sender_status'] == 1 && $row['recipient_status'] == 0) {
                    $status = do_lang_tempcode('ESCROW_STATUS__PENDING', escape_html($to_name));
                } elseif ($row['sender_status'] == 0 && $row['recipient_status'] == 1) {
                    $status = do_lang_tempcode('ESCROW_STATUS__PENDING', escape_html($from_name));
                }

                // Moderation button
                if ((!$involved) && ($row['status'] >= 1) && (has_privilege($member_id_viewing, 'moderate_points_escrow'))) {
                    $hidden = new Tempcode();
                    $resolve_url = build_url(['page' => 'points', 'type' => 'moderate_escrow', 'id' => $row['id']]);
                    $buttons->attach(do_template('BUTTON_SCREEN', ['_GUID' => 'da69b2ee5495c9af670399dd080f662e', 'IMMEDIATE' => true, 'URL' => $resolve_url, 'TITLE' => do_lang_tempcode('ESCROW_MODERATE'), 'IMG' => 'buttons/advanced', 'HIDDEN' => $hidden]));
                }
        }

        require_code('points_escrow');
        require_code('templates_map_table');

        // Modified map_table_screen since we also have escrow logs on the same page
        $fields = [
            'IDENTIFIER' => strval($row['id']),
            'DATE' => $date,
            'STATUS' => $status,
            'POINTS' => integer_format($row['amount']),
            'FROM' => $_from_name,
            'TO' => $_to_name,
            'REASON' => $reason,
            'ESCROW_AGREEMENT' => get_translated_tempcode('escrow', $row, 'agreement'),
            'EXPIRY_DATE' => $expiry,
        ];
        $_fields = new Tempcode();
        foreach ($fields as $key => $val) {
            $raw = is_object($val);
            $_fields->attach(map_table_field(do_lang_tempcode($key), $val, $raw));
        }

        return do_template('POINTS_ESCROW_SCREEN', [
            'TITLE' => get_screen_title('_ESCROW_VIEW', true, [strval($row['id'])]),
            'FIELDS' => $_fields,
            'BUTTONS' => $buttons,
            'ESCROW_LOGS' => escrow_get_logs($id)
        ]);
    }

    /**
     * The UI / actualiser for satisfying an escrow.
     *
     * @return Tempcode The UI
     */
    public function satisfy_escrow() : object
    {
        $member_id_viewing = get_member();

        // No guests allowed
        if (is_guest($member_id_viewing)) {
            access_denied('NOT_AS_GUEST');
        }

        $id = get_param_integer('id');
        $confirm = get_param_integer('confirm', 0);

        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];

        // Are we trying to satisfy an escrow we do not have the privilege to access?
        if ($row['sender_id'] != $member_id_viewing && $row['recipient_id'] != $member_id_viewing) {
            access_denied('I_ERROR');
        }

        // Escrow already completed
        if ($row['status'] < 1) {
            return warn_screen($this->title, do_lang_tempcode('E_ESCROW_ALREADY_DONE'));
        }

        // Member already marked escrow as satisfied
        if ((($member_id_viewing == $row['sender_id']) && ($row['sender_status'] == 1)) || (($member_id_viewing == $row['recipient_id']) && ($row['recipient_status'] == 1))) {
            return warn_screen($this->title, do_lang_tempcode('E_ESCROW_ALREADY_SATISFIED'));
        }

        $escrow = get_translated_tempcode('escrow', $row, 'reason');

        // Confirmation screen
        if ($confirm == 0) {
            if ($member_id_viewing == $row['sender_id']) {
                $other_member = $GLOBALS['FORUM_DRIVER']->get_username($row['recipient_id'], true);
            } else {
                $other_member = $GLOBALS['FORUM_DRIVER']->get_username($row['sender_id'], true);
            }
            $preview = do_lang_tempcode('ARE_YOU_SURE_ESCROW_SATISFY', escape_html($other_member), $escrow);
            return do_template('CONFIRM_SCREEN', [
                '_GUID' => 'd3d654c7dcffb353638d08b53697488b',
                'TITLE' => $this->title,
                'PREVIEW' => $preview,
                'URL' => get_self_url(false, false, ['confirm' => 1]),
                'FIELDS' => build_keep_post_fields(),
            ]);
        }

        require_code('points_escrow');
        satisfy_escrow($id, $member_id_viewing, $row);

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'view_escrow', 'id' => $id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI / actualiser for disputing an escrow.
     *
     * @return Tempcode The UI
     */
    public function dispute_escrow() : object
    {
        $member_id_viewing = get_member();

        // No guests allowed
        if (is_guest($member_id_viewing)) {
            access_denied('NOT_AS_GUEST');
        }

        $id = get_param_integer('id');
        $reason = post_param_string('reason', null);

        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];

        // Are we trying to access an escrow we do not have the privilege to access?
        if ($row['sender_id'] != $member_id_viewing && $row['recipient_id'] != $member_id_viewing) {
            access_denied('I_ERROR');
        }

        // Escrow already completed
        if ($row['status'] < 1) {
            return warn_screen($this->title, do_lang_tempcode('E_ESCROW_ALREADY_DONE'));
        }

        if ($reason === null) {
            // Dispute reason form
            require_code('form_templates');

            $fields = new Tempcode();
            $fields->attach(form_input_text_comcode(do_lang_tempcode('ESCROW_DISPUTE_REASON'), do_lang_tempcode('DESCRIPTION_ESCROW_DISPUTE_REASON'), 'reason', '', true));

            $url = build_url(['page' => '_SELF', 'type' => 'dispute_escrow', 'id' => $id], '_SELF');

            return do_template('FORM_SCREEN', [
                '_GUID' => 'ce1752a0c5508a061bffbf242a13e5bd',
                'HIDDEN' => new Tempcode(),
                'TITLE' => $this->title,
                'FIELDS' => $fields,
                'TEXT' => do_lang_tempcode('DESCRIPTION_ESCROW_DISPUTE_REASON'),
                'SUBMIT_ICON' => 'buttons/proceed',
                'SUBMIT_NAME' => do_lang_tempcode('PROCEED'),
                'URL' => $url,
                'JS_FUNCTION_CALLS' => [],
            ]);
        }

        require_code('points_escrow');
        dispute_escrow($id, $member_id_viewing, $reason);

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'view_escrow', 'id' => $id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI / actualiser for moderating an escrow.
     *
     * @return Tempcode The UI
     */
    public function moderate_escrow() : object
    {
        $member_id_viewing = get_member();

        // No guests allowed
        if (is_guest($member_id_viewing)) {
            access_denied('NOT_AS_GUEST');
        }

        // Are we trying to moderate when we cannot moderate?
        if (!has_privilege($member_id_viewing, 'moderate_points_escrow')) {
            access_denied('PRIVILEGE', 'moderate_points_escrow');
        }

        $id = get_param_integer('id');
        $action = post_param_string('action', 'edit');
        $points = post_param_integer('points', 0);
        $mod_reason = post_param_string('mod_reason', null);

        $reason = post_param_string('reason', null);
        $agreement = post_param_string('agreement', null);

        $_row = $GLOBALS['SITE_DB']->query_select('escrow', ['*'], ['id' => $id], '', 1);
        if ($_row === null || !array_key_exists(0, $_row)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];

        // Are we trying to moderate an escrow in which we are involved?
        if ($row['sender_id'] == $member_id_viewing || $row['recipient_id'] == $member_id_viewing) {
            access_denied('I_ERROR');
        }

        $escrow_reason = get_translated_text($row['reason']);
        $escrow_agreement = get_translated_text($row['agreement']);

        if ($mod_reason === null) {
            // Dispute resolution form
            require_code('form_templates');

            $fields = new Tempcode();
            $entries = new Tempcode();

            // Cannot perform an action on an escrow that is already completed / cancelled; edit text only
            if ($row['status'] >= 1) {
                $entries = new Tempcode();
                $entries->attach(form_input_radio_entry('action', 'amend', true, do_lang_tempcode('ESCROW_MODERATE_ACTION__AMEND')));
                $entries->attach(form_input_radio_entry('action', 'complete', false, do_lang_tempcode('ESCROW_MODERATE_ACTION__COMPLETE')));
                $entries->attach(form_input_radio_entry('action', 'cancel', false, do_lang_tempcode('ESCROW_MODERATE_ACTION__CANCEL')));
                $fields->attach(form_input_radio(do_lang_tempcode('ACTION'), do_lang_tempcode('DESCRIPTION_ESCROW_MODERATE_ACTION'), 'action', $entries, true));
            }
            $fields->attach(form_input_text_comcode(do_lang_tempcode('EXPLANATION'), do_lang_tempcode('DESCRIPTION_ESCROW_MODERATE_REASON'), 'mod_reason', '', true, null, true, "", null, false, 5));
            $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', [
                '_GUID' => 'cb4511a58a4c78eb75346a468e6e6fdf',
                'TITLE' => do_lang_tempcode('DETAILS'),
            ]));
            $fields->attach(form_input_integer(do_lang_tempcode('POINTS'), do_lang_tempcode('DESCRIPTION_ESCROW_MODERATE_POINTS'), 'points', $row['amount'], true, null, null, null, true));
            $fields->attach(form_input_line_comcode(do_lang_tempcode('AMEND_REASON'), do_lang_tempcode('DESCRIPTION_ESCROW_MODERATE_AMEND_REASON'), 'reason', $escrow_reason, true));
            $fields->attach(form_input_text_comcode(do_lang_tempcode('AMEND_ESCROW_AGREEMENT'), do_lang_tempcode('DESCRIPTION_ESCROW_MODERATE_ESCROW_AGREEMENT'), 'agreement', $escrow_agreement, true));

            $url = build_url(['page' => '_SELF', 'type' => 'moderate_escrow', 'id' => $id], '_SELF');

            require_javascript('points_escrow');
            return do_template('FORM_SCREEN', [
                '_GUID' => 'ce1752a0c5508a061bffbf242a13e5bd',
                'HIDDEN' => new Tempcode(),
                'TITLE' => $this->title,
                'FIELDS' => $fields,
                'TEXT' => '',
                'SUBMIT_ICON' => 'buttons/proceed',
                'SUBMIT_NAME' => do_lang_tempcode('PROCEED'),
                'URL' => $url,
                'JS_FUNCTION_CALLS' => ['modulePointsEscrowModerate'],
            ]);
        }

        if (($points === null) || ($points < 0) || ($points > $row['amount']) || ($reason === null) || ($agreement === null)) {
            return warn_screen($this->title, do_lang_tempcode('IMPROPERLY_FILLED_IN'));
        }

        require_code('points_escrow');
        moderate_escrow($id, $member_id_viewing, $action, $reason, $agreement, $points, $mod_reason, $row);

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'view_escrow', 'id' => $id], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI/actualiser to reverse a point transaction.
     *
     * @return Tempcode The UI
     */
    public function reverse() : object
    {
        if (!has_privilege(get_member(), 'moderate_points')) {
            access_denied('PRIVILEGE', 'moderate_points');
        }

        require_code('points3');

        $id = post_param_integer('id');
        $confirm = get_param_integer('confirm', 0);

        $out = transaction_reverse_screen($id, $confirm, $this->title);

        if ($out === null) {
            // Show it worked / Refresh
            $url = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
            if ($url == '') {
                $_url = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');
                $url = $_url->evaluate();
            }
            return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
        }

        return $out;
    }

    /**
     * The UI/actualiser to amend a point transaction.
     *
     * @return Tempcode The UI
     */
    public function amend() : object
    {
        if (!has_privilege(get_member(), 'amend_point_transactions')) {
            access_denied('PRIVILEGE', 'amend_point_transactions');
        }

        require_code('points3');

        $id = post_param_integer('id');
        $reason = post_param_string('reason', null);
        $redirect = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        $member_id_of = get_param_integer('member_id_of');

        $out = transaction_amend_screen($id, $this->title, $member_id_of, $reason, $redirect);
        if ($out === null) {
            // Show it worked / Refresh
            if ($redirect == '') {
                $_redirect = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');
                $redirect = $_redirect->evaluate();
            }
            return redirect_screen($this->title, $redirect, do_lang_tempcode('SUCCESS'));
        }

        return $out;
    }
}
