<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    ecommerce
 */

/**
 * Module page class.
 */
class Module_admin_invoices
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'ecommerce';
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('ecommerce')) {
            return null;
        }

        if ($be_deferential || $support_crosslinks) {
            return null;
        }

        return [
            'browse' => ['INVOICES', 'menu/adminzone/audit/ecommerce/invoices'],
            'add' => ['CREATE_INVOICE', 'menu/adminzone/audit/ecommerce/create_invoice'],
            'view' => ['VIEW_INVOICES', 'menu/adminzone/audit/ecommerce/invoices'],
        ];
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('ecommerce', $error_msg)) {
            return $error_msg;
        }

        require_code('form_templates'); // Needs to run high so that the anti-click-hacking header is sent

        $type = get_param_string('type', 'browse');

        require_code('ecommerce');

        if ($type == 'browse') {
            breadcrumb_set_self(do_lang_tempcode('INVOICES'));
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')]]);
        }

        if ($type == 'view') {
            breadcrumb_set_self(do_lang_tempcode('INVOICES'));
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')], ['_SELF:_SELF:browse', do_lang_tempcode('INVOICES')]]);

            $this->title = get_screen_title('VIEW_INVOICES');
        }

        if ($type == 'add') {
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')], ['_SELF:_SELF:browse', do_lang_tempcode('INVOICES')]]);

            $this->title = get_screen_title('CREATE_INVOICE');
        }

        if ($type == '_add') {
            breadcrumb_set_self(do_lang_tempcode('DONE'));
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')], ['_SELF:_SELF:browse', do_lang_tempcode('INVOICES')], ['_SELF:_SELF:add', do_lang_tempcode('CREATE_INVOICE')]]);

            $this->title = get_screen_title('CREATE_INVOICE');
        }

        if ($type == 'delete') {
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')], ['_SELF:_SELF:browse', do_lang_tempcode('INVOICES')], ['_SELF:_SELF:view', do_lang_tempcode('VIEW_INVOICES')]]);
            if (post_param_integer('confirmed', 0) != 1) {
                breadcrumb_set_self(do_lang_tempcode('CONFIRM'));
            } else {
                breadcrumb_set_self(do_lang_tempcode('DONE'));
            }

            $this->title = get_screen_title('DELETE_INVOICE');
        }

        if ($type == 'fulfil') {
            breadcrumb_set_self(do_lang_tempcode('DONE'));
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')], ['_SELF:_SELF:browse', do_lang_tempcode('INVOICES')], ['_SELF:_SELF:view', do_lang_tempcode('VIEW_INVOICES')]]);

            $this->title = get_screen_title('MARK_AS_FULFILLED');
        }

        if ($type == 'invoice') {
            breadcrumb_set_self(do_lang_tempcode('INVOICES'));
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')]]);
            $this->title = get_screen_title('INVOICE');
        }

        if (($type != 'view') && ($type != 'invoice')) {
            set_helper_panel_tutorial('tut_ecommerce');
            set_helper_panel_text(comcode_lang_string('DOC_ECOMMERCE'));
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'add') {
            return $this->add();
        }
        if ($type == '_add') {
            return $this->_add();
        }
        if ($type == 'view') {
            return $this->view();
        }
        if ($type == 'delete') {
            return $this->delete();
        }
        if ($type == 'fulfil') {
            return $this->fulfil();
        }
        if ($type == 'invoice') {
            return $this->invoice();
        }
        return new Tempcode();
    }

    /**
     * The do-next manager for before invoice management.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('INVOICES'),
            comcode_lang_string('DOC_ECOMMERCE'),
            [
                ['admin/add', ['_SELF', ['type' => 'add'], '_SELF'], do_lang('CREATE_INVOICE')],
                ['menu/adminzone/audit/ecommerce/invoices', ['_SELF', ['type' => 'view'], '_SELF'], do_lang('VIEW_INVOICES')],
            ],
            do_lang('INVOICES')
        );
    }

    /**
     * UI to add an invoice.
     *
     * @return Tempcode The interface
     */
    public function add() : object
    {
        $to = get_param_string('to', '');

        $products = find_all_products();
        $list = new Tempcode();
        foreach ($products as $type_code => $details) {
            if ($details['type'] == PRODUCT_INVOICE) {
                $text = new Tempcode();
                $text->attach(escape_html($details['item_name']));
                if ($details['price'] !== null) {
                    $currency = isset($details['currency']) ? $details['currency'] : get_option('currency');
                    $text->attach(escape_html(' (' . float_format($details['price']) . ' ' . $currency . ')'));
                }
                $list->attach(form_input_list_entry($type_code, false, $text));
            }
        }
        if ($list->is_empty()) {
            inform_exit(do_lang_tempcode('NOTHING_TO_INVOICE_FOR'));
        }
        $fields = new Tempcode();
        $fields->attach(form_input_list(do_lang_tempcode('PRODUCT'), '', 'type_code', $list));
        $fields->attach(form_input_line(do_lang('INVOICE_DESCRIPTION'), do_lang('DESCRIPTION_INVOICE_DESCRIPTION'), 'item_name', '', true));         // Work description field (named item_name for consistency with the default item_name in the product details)
        $fields->attach(form_input_username(do_lang_tempcode('USERNAME'), do_lang_tempcode('DESCRIPTION_INVOICE_FOR'), 'to', $to, true));
        $fields->attach(form_input_float(do_lang_tempcode('PRICE'), do_lang_tempcode('DESCRIPTION_INVOICE_PRICE', escape_html(get_option('currency')), ecommerce_get_currency_symbol(get_option('currency'))), 'price', null, false));
        $fields->attach(form_input_tax_code(do_lang_tempcode(get_option('tax_system')), do_lang_tempcode('DESCRIPTION_INVOICE_TAX_CODE'), 'tax_code', '', false));
        $fields->attach(form_input_text(do_lang_tempcode('NOTE'), do_lang_tempcode('DESCRIPTION_INVOICE_NOTE'), 'note', '', false, false));

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '69252fa24b33a567c8e97783b9cbb9f4', 'SECTION_HIDDEN' => true, 'TITLE' => do_lang_tempcode('ADVANCED')]));
        $fields->attach(form_input_line(do_lang_tempcode('PROCESSING_CODE'), do_lang_tempcode('DESCRIPTION_PROCESSING_CODE'), 'processing_code', '', false));

        $post_url = build_url(['page' => '_SELF', 'type' => '_add'], '_SELF');
        $submit_name = do_lang_tempcode('CREATE_INVOICE');

        return do_template('FORM_SCREEN', [
            '_GUID' => 'b8a08145bd1262c277e00a1151d6383e',
            'HIDDEN' => '',
            'TITLE' => $this->title,
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
            'TEXT' => do_lang_tempcode('DESCRIPTION_INVOICE_PAGE'),
            'SUPPORT_AUTOSAVE' => true,
        ]);
    }

    /**
     * Actualiser to add an invoice.
     *
     * @return Tempcode The interface
     */
    public function _add() : object
    {
        $type_code = post_param_string('type_code');
        list($details) = find_product_details($type_code);

        $currency = isset($details['currency']) ? $details['currency'] : get_option('currency');

        $to = post_param_string('to');
        $member_id = $GLOBALS['FORUM_DRIVER']->get_member_from_username($to);
        if (($member_id === null) || (is_guest($member_id))) {
            warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($to)), false, false, 404);
        }

        $_price = post_param_string('price', '');
        $price = ($_price == '') ? null : float_unformat($_price);
        if ($price === null) {
            $price = $details['price'];
            if ($price === null) {
                warn_exit(do_lang_tempcode('INVOICE_REQUIRED_AMOUNT'));
            }
        }

        $shipping_cost = calculate_shipping_cost($details, $details['shipping_cost'], $details['product_weight'], $details['product_length'], $details['product_width'], $details['product_height']);

        $tax_code = post_param_tax_code('tax_code', $details['tax_code']);
        list($tax_derivation, $tax, $tax_tracking, $shipping_tax) = calculate_tax_due($details, $tax_code, $price, $shipping_cost, $member_id);

        $id = $GLOBALS['SITE_DB']->query_insert('ecom_invoices', [
            'i_type_code' => $type_code,
            'i_item_name' => post_param_string('item_name', ''),
            'i_member_id' => $member_id,
            'i_state' => 'new',
            'i_price' => $price,
            'i_tax_code' => $tax_code,
            'i_tax_derivation' => json_encode($tax_derivation, defined('JSON_PRESERVE_ZERO_FRACTION') ? JSON_PRESERVE_ZERO_FRACTION : 0),
            'i_tax' => $tax,
            'i_tax_tracking' => json_encode($tax_tracking, defined('JSON_PRESERVE_ZERO_FRACTION') ? JSON_PRESERVE_ZERO_FRACTION : 0),
            'i_currency' => $currency,
            'i_processing_code' => post_param_string('processing_code'),
            'i_time' => time(),
            'i_note' => post_param_string('note'),
        ], true);

        log_it('CREATE_INVOICE', strval($id), $type_code);

        send_invoice_notification($member_id, $id);

        $url = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * View invoices.
     *
     * @return Tempcode The interface
     */
    public function view() : object
    {
        // Do not display any UI if there are no records
        $has_records = $GLOBALS['SITE_DB']->query_select_value_if_there('ecom_invoices', 'id', []);
        if ($has_records === null) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }

        $start = get_param_integer('start', 0);
        $max = get_param_integer('max', 50);
        $sortables = ['i.i_time' => do_lang_tempcode('DATE'), 'i.i_price' => do_lang_tempcode('PRICE')];
        $test = explode(' ', get_param_string('sort', 'i.i_time DESC', INPUT_FILTER_GET_COMPLEX), 2);
        if (count($test) == 1) {
            $test[1] = 'DESC';
        }
        list($sortable, $sort_order) = $test;
        if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
            warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('e349a4aa3ae75e6c81eff6462f12c75e')));
        }

        // Prepare Filtercode
        require_code('filtercode');
        $active_filters = get_params_filtercode();

        // Build WHERE query from Filtercode
        $where = [];
        $end = '';
        list($extra_join, $end) = filtercode_to_sql($GLOBALS['SITE_DB'], parse_filtercode($active_filters), null, 'ecom_invoices', 'i');

        $max_rows = $GLOBALS['SITE_DB']->query_select_value('ecom_invoices i', 'COUNT(*)', $where, $end);
        $rows = $GLOBALS['SITE_DB']->query_select('ecom_invoices i', ['*'], $where, $end . ' ORDER BY ' . $sortable . ' ' . $sort_order, $max, $start);

        require_code('form_templates');
        require_code('templates_results_table');
        require_code('templates_tooltip');
        require_code('templates_map_table');

        $result_entries = new Tempcode();
        $filtercode = [
            'i_time<i_time_op><i_time>',
            'i_type_code=<i_type_code>',
            'i_member_id=<i_member_id>',
            'i_price<i_price_op><i_price>',
            'i_tax<i_tax_op><i_tax>',
            'i_state=<i_state>'
        ];
        $filtercode_labels = [
            'i_time=' . do_lang('DATE'),
            'i_type_code=' . do_lang('PRODUCT'),
            'i_member_id=' . do_lang('MEMBER'),
            'i_price=' . do_lang('PRICE'),
            'i_tax=' . do_lang(get_option('tax_system')),
            'i_state=' . do_lang('STATUS'),
        ];
        $filtercode_types = [
            'i_type_code=list',
            'i_state=list',
        ];
        $header_row = results_header_row([
            do_lang('IDENTIFIER'),
            do_lang('DATE'),
            do_lang('PRODUCT'),
            do_lang('MEMBER'),
            do_lang('PRICE'),
            do_lang(get_option('tax_system')),
            do_lang('STATUS'),
            do_lang('TRANSACTION'),
            do_lang('ACTIONS'),
        ], $sortables, 'sort', $sortable . ' ' . $sort_order);

        foreach ($rows as $row) {
            $date = get_timezoned_date_time($row['i_time']);

            if ($row['i_item_name'] != '') {
                $product_title = $row['i_item_name'];
            } else {
                $product_title = do_lang('CUSTOM_PRODUCT_' . $row['i_type_code']);
            }
            $product_tooltip = tooltip($product_title, $row['i_type_code'], true);

            $customer_link = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['i_member_id'], '', false);

            $invoice_url = build_url(['page' => '_SELF', 'type' => 'invoice', 'id' => $row['id'], 'wide_high' => 1], '_SELF');
            $price_linker = hyperlink($invoice_url, ecommerce_get_currency_symbol($row['i_currency']) . escape_html(float_format($row['i_price'])), true, false, do_lang('INVOICE'));

            $tax = ecommerce_get_currency_symbol($row['i_currency']) . escape_html(float_format($row['i_tax']));

            $transaction = $GLOBALS['SITE_DB']->query_select('ecom_transactions', ['*'], ['t_type_code' => $row['i_type_code'], 't_purchase_id' => strval($row['id'])], ' ORDER BY t_time DESC', 1);
            if (array_key_exists(0, $transaction)) {
                $transaction_linker = build_transaction_linker($transaction[0]['id'], $row['i_state'] == 'new', $transaction[0]);
            } else {
                $transaction_linker = new Tempcode();
            }

            // Delete button
            $actions = new Tempcode();
            $delete_url = build_url(['page' => '_SELF', 'type' => 'delete', 'id' => $row['id'], 'redirect' => protect_url_parameter(SELF_REDIRECT)], '_SELF');
            $actions->attach(do_template('COLUMNED_TABLE_ACTION', [
                '_GUID' => 'cb77af97ef9920f09cb885040c8a572b',
                'URL' => $delete_url,
                'HIDDEN' => new Tempcode(),
                'NAME' => '#' . strval($row['id']),
                'ACTION_TITLE' => do_lang_tempcode('DELETE'),
                'ICON' => 'admin/delete',
                'GET' => true,
            ]));

            // Fulfil button
            if ($row['i_state'] == 'paid') {
                $fulfil_url = build_url(['page' => '_SELF', 'type' => 'fulfil', 'id' => $row['id'], 'redirect' => protect_url_parameter(SELF_REDIRECT)], '_SELF');
                $actions->attach(do_template('COLUMNED_TABLE_ACTION', [
                    '_GUID' => '0045e469fcf5b5490abf8138b638c0ed',
                    'URL' => $fulfil_url,
                    'HIDDEN' => new Tempcode(),
                    'NAME' => '#' . strval($row['id']),
                    'ACTION_TITLE' => do_lang_tempcode('FULFIL'),
                    'ICON' => 'buttons/yes',
                    'GET' => true,
                ]));
            }

            $result_entries->attach(results_entry([
                escape_html(strval($row['id'])),
                escape_html($date),
                $product_tooltip,
                $customer_link,
                $price_linker,
                $tax,
                tooltip(do_lang('PAYMENT_STATE_' . $row['i_state']), $row['i_state'], true),
                $transaction_linker,
                $actions
            ], false));
        }

        $results_table = results_table(do_lang('INVOICES'), $start, 'start', $max, 'max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order, 'sort');

        $filtercode_box = do_block('main_content_filtering', [
            'param' => implode(',', $filtercode),
            'table' => 'ecom_invoices',
            'labels' => implode(',', $filtercode_labels),
            'types' => implode(',', $filtercode_types),
        ]);

        $tpl = do_template('RESULTS_TABLE_SCREEN', [
            '_GUID' => '6a57f3550b09818b5737407e2f6eea56',
            'TITLE' => $this->title,
            'TEXT' => '',
            'RESULTS_TABLE' => $results_table,
            'FORM' => new Tempcode(),
            'FILTERCODE_BOX' => $filtercode_box,
        ]);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * Actualiser to delete an invoice.
     *
     * @return Tempcode The result
     */
    public function delete() : object
    {
        if (post_param_integer('confirmed', 0) != 1) {
            $url = get_self_url();
            $text = do_lang_tempcode('DELETE_INVOICE');

            $hidden = build_keep_post_fields();
            $hidden->attach(form_input_hidden('confirmed', '1'));
            $hidden->attach(form_input_hidden('from', get_param_string('from', 'browse')));

            return do_template('CONFIRM_SCREEN', ['_GUID' => '45707062c00588c33726b256e8f9ba40', 'TITLE' => $this->title, 'FIELDS' => $hidden, 'PREVIEW' => $text, 'URL' => $url]);
        }

        $id = get_param_integer('id');

        $type_code = $GLOBALS['SITE_DB']->query_select_value_if_there('ecom_invoices', 'i_type_code', ['id' => $id]);
        if ($id === null) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }

        $GLOBALS['SITE_DB']->query_delete('ecom_invoices', ['id' => $id], '', 1);

        log_it('DELETE_INVOICE', strval($id), $type_code);

        $url = build_url(['page' => '_SELF', 'type' => post_param_string('from', 'browse')], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to fulfil an invoice.
     *
     * @return Tempcode The result
     */
    public function fulfil() : object
    {
        $rows = $GLOBALS['SITE_DB']->query_select('ecom_invoices', ['id', 'i_state', 'i_member_id'], ['id' => get_param_integer('id')], '', 1);
        if (!array_key_exists(0, $rows)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }

        $row = $rows[0];
        send_invoice_notification($row['i_member_id'], $row['id'], true);

        $GLOBALS['SITE_DB']->query_update('ecom_invoices', ['i_state' => 'delivered'], ['id' => get_param_integer('id')], '', 1);

        $url = build_url(['page' => '_SELF', 'type' => 'view'], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Show an invoice.
     *
     * @return Tempcode The result of execution
     */
    public function invoice() : object
    {
        require_css('ecommerce');

        $GLOBALS['SCREEN_TEMPLATE_CALLED'] = '';

        $id = get_param_integer('id');
        $invoice = display_invoice($id);
        return $invoice;
    }
}
