<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    shopping
 */

/**
 * Module page class.
 */
class Module_admin_shopping
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Manuprathap';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'shopping';
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('shopping')) {
            return null;
        }

        if ($be_deferential || $support_crosslinks) {
            return null;
        }

        $ret = [
            'browse' => ['ORDERS', 'menu/rich_content/ecommerce/orders'],
        ];

        return $ret;
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('shopping', $error_msg)) {
            return $error_msg;
        }

        if (!addon_installed('shopping')) {
            warn_exit(do_lang_tempcode('MISSING_ADDON', escape_html('shopping')));
        }

        require_code('form_templates'); // Needs to run high so that the anti-click-hacking header is sent

        $type = get_param_string('type', 'browse');

        require_code('ecommerce');
        require_lang('shopping');

        if ($type == 'browse') {
            breadcrumb_set_self(do_lang_tempcode('ORDERS'));
            breadcrumb_set_parents([['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')]]);

            $this->title = get_screen_title('ORDERS');
        }

        if ($type == 'order_details') {
            breadcrumb_set_parents([
                ['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')],
                ['_SELF:_SELF:browse', do_lang_tempcode('ORDERS')],
            ]);
        }

        if ($type == 'order_details') {
            $this->title = get_screen_title('ORDER_DETAILS');
        }

        if ($type == 'export_orders') {
            $this->title = get_screen_title('EXPORT_ORDER_LIST');
        }

        if ($type == 'order_act') {
            $order_id = get_param_integer('id');
            $action = either_param_string('order_action');

            breadcrumb_set_parents([
                ['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')],
                ['_SELF:_SELF:browse', do_lang_tempcode('ORDERS')],
                ['_SELF:_SELF:order_details:' . strval($order_id), do_lang_tempcode('CART_ORDER', strval($order_id))],
            ]);

            if ($action == 'add_note') {
                $this->title = get_screen_title('ADD_NOTE_TITLE', true, [escape_html(strval($order_id))]);

                breadcrumb_set_self(do_lang_tempcode('ADD_NOTE'));
            }

            if ($action == 'dispatch') {
                $this->title = get_screen_title('ORDER_STATUS_dispatched');
            }

            if ($action == 'del_order') {
                $this->title = get_screen_title('ORDER_STATUS_cancelled');
            }

            if ($action == 'return') {
                $this->title = get_screen_title('ORDER_STATUS_returned');
            }

            if ($action == 'hold') {
                $this->title = get_screen_title('ORDER_STATUS_onhold');
            }

            if ($action != 'add_note') {
                breadcrumb_set_self(do_lang_tempcode('DONE'));
            }
        }

        if ($type == '_add_note') {
            $order_id = post_param_integer('order_id');

            breadcrumb_set_parents([
                ['_SEARCH:admin_ecommerce_reports:browse', do_lang_tempcode('ECOMMERCE')],
                ['_SELF:_SELF:browse', do_lang_tempcode('ORDERS')],
                ['_SELF:_SELF:order_details:' . strval($order_id), do_lang_tempcode('CART_ORDER', strval($order_id))],
            ]);

            $this->title = get_screen_title('ADD_NOTE_TITLE', true, [escape_html(strval($order_id))]);

            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_javascript('shopping');
        require_css('shopping');
        require_code('users_active_actions');
        require_code('shopping');

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'order_details') {
            return $this->order_details();
        }
        if ($type == 'order_act') {
            $action = either_param_string('order_action');

            if ($action == 'add_note') {
                return $this->add_note();
            }
            if ($action == 'dispatch') {
                return $this->dispatch();
            }
            if ($action == 'del_order') {
                return $this->delete_order();
            }
            if ($action == 'return') {
                return $this->return_order();
            }
            if ($action == 'hold') {
                return $this->hold_order();
            }
        }
        if ($type == '_add_note') {
            return $this->_add_note();
        }
        if ($type == 'export_orders') {
            return $this->export_orders();
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for order module.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        // Do not display any UI if there are no records
        $has_records = $GLOBALS['SITE_DB']->query_select_value_if_there('shopping_orders', 'id', []);
        if ($has_records === null) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }

        // Prepare Filtercode
        require_code('filtercode');
        $active_filters = get_params_filtercode();

        // Build WHERE query from Filtercode
        $where = [];
        $end = '';
        list($extra_join, $end) = filtercode_to_sql($GLOBALS['SITE_DB'], parse_filtercode($active_filters), null, 'shopping_orders');

        $start = get_param_integer('start', 0);
        $max = get_param_integer('max', 50);

        require_code('templates_results_table');
        require_code('templates_tooltip');

        $sortables = [
            'add_date' => do_lang_tempcode('ORDERED_DATE'),
            'member_id' => do_lang_tempcode('ORDERED_BY'),
            'total_price' => do_lang_tempcode('PRICE'),
            'order_status' => do_lang_tempcode('STATUS'),
        ];

        $query_sort = explode(' ', get_param_string('sort', 'add_date ASC', INPUT_FILTER_GET_COMPLEX), 2);
        if (count($query_sort) == 1) {
            $query_sort[] = 'ASC';
        }
        list($sortable, $sort_order) = $query_sort;
        if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
            warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('748c83ee82d8525590994864e584ed5d')));
        }

        $filtercode = [
            'add_date<add_date_op><add_date>',
            'order_status=<order_status>',
            'total_price<total_price_op><total_price>',
            'total_tax<total_tax_op><total_tax>',
            'total_shipping_cost<total_shipping_cost_op><total_shipping_cost>',
            'member_id=<member_id>',
        ];
        $filtercode_labels = [
            'add_date=' . do_lang('ORDERED_DATE'),
            'order_status=' . do_lang('STATUS'),
            'total_price=' . do_lang('PRICE'),
            'total_tax=' . do_lang(get_option('tax_system')),
            'total_shipping_cost=' . do_lang('SHIPPING_COST'),
            'member_id=' . do_lang('ORDERED_BY'),
        ];
        $filtercode_types = [
            'order_status=list',
        ];
        $header_row = results_header_row([
            do_lang_tempcode('ORDER_NUMBER'),
            do_lang_tempcode('ORDERED_DATE'),
            do_lang_tempcode('STATUS'),
            do_lang_tempcode('PRICE'),
            do_lang_tempcode(get_option('tax_system')),
            do_lang_tempcode('SHIPPING_COST'),
            do_lang_tempcode('ORDERED_BY'),
            do_lang_tempcode('TRANSACTION'),
            do_lang_tempcode('ACTIONS'),
        ], $sortables, 'sort', $sortable . ' ' . $sort_order);

        $max_rows = $GLOBALS['SITE_DB']->query_select_value('shopping_orders r', 'COUNT(*)', $where, $end);
        $rows = $GLOBALS['SITE_DB']->query_select('shopping_orders r', ['*'], $where, $end . ' ORDER BY ' . db_string_equal_to('r.order_status', 'ORDER_STATUS_cancelled')/*cancelled always last*/ . ',r.' . $sortable . ' ' . $sort_order, $max, $start);

        $order_entries = new Tempcode();
        foreach ($rows as $row) {
            if ($row['purchase_through'] == 'cart') {
                $order_title = do_lang('CART_ORDER', strval($row['id']));
            } else {
                $order_title = do_lang('PURCHASE_ORDER', strval($row['id']));
            }
            $order_tooltip = tooltip($order_title, with_whitespace(get_ordered_product_list_string($row['id'])), false);

            $price_linker = new Tempcode();
            if ($row['txn_id'] != '') {
                $receipt_url = build_url(['page' => 'admin_ecommerce_reports', 'type' => 'receipt', 'id' => $row['txn_id'], 'wide_high' => 1], '_SELF');
                $price_linker = hyperlink($receipt_url, ecommerce_get_currency_symbol($row['order_currency']) . escape_html(float_format($row['total_price'])), true, false, do_lang('RECEIPT'));
            } else {
                $price_linker->attach(ecommerce_get_currency_symbol($row['order_currency']) . escape_html(float_format($row['total_price'])));
            }

            $order_details_url = build_url(['page' => '_SELF', 'type' => 'order_details', 'id' => $row['id']], '_SELF');
            $order_date = hyperlink($order_details_url, get_timezoned_date_time($row['add_date'], false), false, true);

            $submitted_by = $GLOBALS['FORUM_DRIVER']->get_username($row['member_id'], false, USERNAME_DEFAULT_NULL);
            if (($submitted_by === null) || (is_guest($row['member_id']))) {
                $member_link = do_lang_tempcode('UNKNOWN');
            } else {
                $member_url = $GLOBALS['FORUM_DRIVER']->member_profile_url($row['member_id']);
                $member_link = hyperlink($member_url, $submitted_by, false, true, do_lang('CUSTOMER'));
            }

            $transaction_linker = build_transaction_linker($row['txn_id'], $row['order_status'] == 'ORDER_STATUS_awaiting_payment', null, true);
            if ($transaction_linker === null) {
                $transaction_linker = new Tempcode();
            }

            if (strpos($row['order_status'], 'ORDER_STATUS_') === 0) {
                $order_status = do_lang_tempcode($row['order_status']);
            } else {
                $order_status = do_lang_tempcode('UNKNOWN');
            }

            $order_actualise_url = build_url(['page' => '_SELF', 'type' => 'order_act', 'id' => $row['id']], '_SELF');
            $actions = do_template('ECOM_ADMIN_ORDER_ACTIONS', [
                '_GUID' => '19ad8393aa5dba3f2f768818f22d8837',
                'ORDER_TITLE' => $order_title,
                'ORDER_ACTUALISE_URL' => $order_actualise_url,
                'ORDER_STATUS' => $order_status,
            ]);

            $order_entries->attach(results_entry([
                $order_tooltip,
                $order_date,
                tooltip($order_status, $row['order_status'], true),
                $price_linker,
                ecommerce_get_currency_symbol($row['order_currency']) . escape_html(float_format($row['total_tax'])),
                ecommerce_get_currency_symbol($row['order_currency']) . escape_html(float_format($row['total_shipping_cost'])),
                $member_link,
                $transaction_linker,
                $actions,
            ], false));
        }

        $results_table = results_table(do_lang_tempcode('ORDERS'), 0, 'start', $max_rows, 'max', $max_rows, $header_row, $order_entries, $sortables, $sortable, $sort_order, 'sort');

        // Export button
        $form = new Tempcode();
        if (count($rows) > 0) {
            $export_url = build_url(['page' => '_SELF', 'type' => 'export_orders'], '_SELF', [], true);
            $form->attach(do_template('BUTTON_SCREEN', ['_GUID' => '1d670698a7e9ddf12c0b2b9347bd4522', 'IMMEDIATE' => false, 'URL' => $export_url, 'TITLE' => do_lang_tempcode('EXPORT'), 'IMG' => 'admin/export_spreadsheet', 'HIDDEN' => new Tempcode()]));
        }

        $url = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');

        $filtercode_box = do_block('main_content_filtering', [
            'param' => implode(',', $filtercode),
            'table' => 'shopping_orders',
            'labels' => implode(',', $filtercode_labels),
            'types' => implode(',', $filtercode_types),
        ]);

        $tpl = do_template('RESULTS_TABLE_SCREEN', [
            '_GUID' => 'cc57b368038807807c7198a57a959bbf',
            'TITLE' => $this->title,
            'TEXT' => '',
            'RESULTS_TABLE' => $results_table,
            'FORM' => $form,
            'URL' => $url,
            'FILTERCODE_BOX' => $filtercode_box,
        ]);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * UI to show details of an order.
     *
     * @return Tempcode The interface
     */
    public function order_details() : object
    {
        $id = get_param_integer('id');

        $text = do_lang_tempcode('ORDER_DETAILS_TEXT');

        require_code('ecommerce_reports');
        $tpl = build_order_details($this->title, $id, $text, true);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * Method to dispatch an order.
     *
     * @return Tempcode The interface
     */
    public function dispatch() : object
    {
        $id = get_param_integer('id');

        $GLOBALS['SITE_DB']->query_update('shopping_orders', ['order_status' => 'ORDER_STATUS_dispatched'], ['id' => $id], '', 1);
        $GLOBALS['SITE_DB']->query_update('shopping_order_details', ['p_dispatch_status' => 'ORDER_STATUS_dispatched'], ['p_order_id' => $id]); // There may be more than one items to update status

        $add_note_url = build_url(['page' => '_SELF', 'type' => 'order_act', 'order_action' => 'add_note', 'last_act' => 'dispatched', 'id' => $id], '_SELF');

        return redirect_screen($this->title, $add_note_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * UI to add note to an order.
     *
     * @return Tempcode The interface
     */
    public function add_note() : object
    {
        $id = get_param_integer('id');

        $redirect_url = get_param_string('redirect', null, INPUT_FILTER_URL_INTERNAL);
        $last_action = get_param_string('last_act', null);

        $update_url = build_url(['page' => '_SELF', 'type' => '_add_note', 'redirect' => protect_url_parameter($redirect_url)], '_SELF');

        $fields = new Tempcode();

        $note = $GLOBALS['SITE_DB']->query_select_value('shopping_orders', 'notes', ['id' => $id]);

        if ($last_action !== null) {
            $note .= do_lang('ADD_NOTE_APPEND_TEXT', get_timezoned_date_time(time(), false), do_lang('ORDER_STATUS_' . $last_action));
        }

        $fields->attach(form_input_text(do_lang_tempcode('NOTE'), do_lang_tempcode('NOTE_DESCRIPTION'), 'note', $note, true, false));

        $fields->attach(form_input_hidden('order_id', strval($id)));

        if ($last_action == 'dispatched') {
            // Display dispatch mail preview
            $res = $GLOBALS['SITE_DB']->query_select('shopping_orders', ['*'], ['id' => $id], '', 1);
            $order_details = $res[0];

            $username = $GLOBALS['FORUM_DRIVER']->get_username($order_details['member_id']);

            $message = do_lang('ORDER_DISPATCHED_MAIL_MESSAGE', comcode_escape(get_site_name()), comcode_escape($username), [strval($id)], get_lang($order_details['member_id']));

            $fields->attach(form_input_text(do_lang_tempcode('DISPATCH_MAIL_PREVIEW'), do_lang_tempcode('DISPATCH_MAIL_PREVIEW_DESCRIPTION'), 'dispatch_mail_content', $message, true, false));

            $submit_name = do_lang_tempcode('SEND_DISPATCH_NOTIFICATION');
        } else {
            $submit_name = do_lang_tempcode('ADD');
        }

        // Conflict resolution in case multiple staff are trying to add the same note
        require_code('form_templates');
        list($warning_details, $ping_url) = handle_conflict_resolution();

        return do_template('FORM_SCREEN', [
            '_GUID' => 'a5bd2fd3e7f326fd7559e78015d70715',
            'TITLE' => $this->title,
            'TEXT' => do_lang_tempcode('NOTE_DESCRIPTION'),
            'HIDDEN' => '',
            'FIELDS' => $fields,
            'URL' => $update_url,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
            'SUPPORT_AUTOSAVE' => true,
            'WARNING_DETAILS' => $warning_details,
            'PING_URL' => $ping_url,
        ]);
    }

    /**
     * Actualiser to add a note to an order.
     *
     * @return Tempcode The interface
     */
    public function _add_note() : object
    {
        $id = post_param_integer('order_id');

        $notes = post_param_string('note');
        $redirect = get_param_string('redirect', null, INPUT_FILTER_URL_INTERNAL);

        $GLOBALS['SITE_DB']->query_update('shopping_orders', ['notes' => $notes], ['id' => $id], '', 1);

        $this->send_dispatch_notification($id);

        if ($redirect === null) { // If a redirect URL is not passed, redirect to the order list
            $_redirect = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');
            $redirect = $_redirect->evaluate();
        }

        return redirect_screen($this->title, $redirect, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Method to dispatch a notification for an order.
     *
     * @param  AUTO_LINK $order_id Order ID
     */
    public function send_dispatch_notification(int $order_id)
    {
        $message = post_param_string('dispatch_mail_content', null);

        if ($message === null) {
            return;
        }

        $res = $GLOBALS['SITE_DB']->query_select('shopping_orders', ['*'], ['id' => $order_id], '', 1);
        $order_details = $res[0];

        if (is_guest($order_details['member_id'])) {
            attach_message(do_lang_tempcode('NO_NOTE_GUEST'), 'warn');
        } else {
            require_code('notifications');
            dispatch_notification('order_dispatched', null, do_lang('ORDER_DISPATCHED_MAIL_SUBJECT', get_site_name(), strval($order_id), null, get_lang($order_details['member_id'])), $message, [$order_details['member_id']], A_FROM_SYSTEM_PRIVILEGED);
        }
    }

    /**
     * Method to delete order.
     *
     * @return Tempcode The interface
     */
    public function delete_order() : object
    {
        $id = get_param_integer('id');

        $GLOBALS['SITE_DB']->query_update('shopping_orders', ['order_status' => 'ORDER_STATUS_cancelled'], ['id' => $id], '', 1);
        $GLOBALS['SITE_DB']->query_update('shopping_order_details', ['p_dispatch_status' => 'ORDER_STATUS_cancelled'], ['p_order_id' => $id], '', 1);

        $add_note_url = build_url(['page' => '_SELF', 'type' => 'order_act', 'order_action' => 'add_note', 'last_act' => 'cancelled', 'id' => $id], '_SELF');

        return redirect_screen($this->title, $add_note_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Method to return order items.
     *
     * @return Tempcode The interface
     */
    public function return_order() : object
    {
        $id = get_param_integer('id');

        $GLOBALS['SITE_DB']->query_update('shopping_orders', ['order_status' => 'ORDER_STATUS_returned'], ['id' => $id], '', 1);
        $GLOBALS['SITE_DB']->query_update('shopping_order_details', ['p_dispatch_status' => 'ORDER_STATUS_returned'], ['p_order_id' => $id], '', 1);

        $add_note_url = build_url(['page' => '_SELF', 'type' => 'order_act', 'order_action' => 'add_note', 'last_act' => 'returned', 'id' => $id], '_SELF');

        return redirect_screen($this->title, $add_note_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Method to hold an order.
     *
     * @return Tempcode The interface
     */
    public function hold_order() : object
    {
        $id = get_param_integer('id');

        $GLOBALS['SITE_DB']->query_update('shopping_orders', ['order_status' => 'ORDER_STATUS_onhold'], ['id' => $id], '', 1);
        $GLOBALS['SITE_DB']->query_update('shopping_order_details', ['p_dispatch_status' => 'ORDER_STATUS_onhold'], ['p_order_id' => $id], '', 1);

        $add_note_url = build_url(['page' => '_SELF', 'type' => 'order_act', 'order_action' => 'add_note', 'last_act' => 'onhold', 'id' => $id], '_SELF');

        return redirect_screen($this->title, $add_note_url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to build orders spreadsheet from the selected filters.
     *
     * @return Tempcode The result of execution
     */
    public function export_orders() : object
    {
        $filter_id = get_param_integer('filter_id', null);
        $filter_username = get_param_string('filter_username', '', INPUT_FILTER_NONE);
        $filter_txn_id = get_param_string('filter_txn_id', '');
        $filter_order_status = get_param_string('filter_order_status', '');
        $filter_start = post_param_date('filter_start', true);
        $filter_end = post_param_date('filter_end', true);

        require_code('tasks');
        return call_user_func_array__long_task(do_lang('EXPORT_ORDER_LIST'), $this->title, 'export_shopping_orders', [$filter_id, $filter_username, $filter_txn_id, $filter_order_status, $filter_start, $filter_end]);
    }
}
