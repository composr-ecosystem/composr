<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    phpinfo
 */

/**
 * Module page class.
 */
class Module_admin_phpinfo
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'phpinfo';
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('phpinfo')) {
            return null;
        }

        return [
            '!' => ['PHPINFO', 'menu/adminzone/tools/phpinfo'],
        ];
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('phpinfo', $error_msg)) {
            return $error_msg;
        }

        if ($GLOBALS['CURRENT_SHARE_USER'] !== null) {
            warn_exit(do_lang_tempcode('SHARED_INSTALL_PROHIBIT'));
        }

        require_lang('menus');

        get_screen_title('PHPINFO');

        require_css('phpinfo');

        $GLOBALS['SCREEN_TEMPLATE_CALLED'] = '';
        $GLOBALS['TITLE_CALLED'] = true;

        require_lang('menus');
        set_helper_panel_text(comcode_lang_string('DOC_PHPINFO'));

        ob_start();
        if (php_function_allowed('phpinfo')) {
            // PHP-Info...

            echo '<div style="overflow: auto; width: 100%">';
            phpinfo();
            echo '</div>';
        } else {
            // Alternative to PHP-Info...

            var_dump(PHP_VERSION);
            var_dump($_SERVER);
            var_dump($_ENV);
            var_dump($_COOKIE);
            if (function_exists('ini_get_all')) {
                var_dump(ini_get_all());
            }
            if (function_exists('get_loaded_extensions')) {
                var_dump(get_loaded_extensions());
            }
            if (function_exists('phpcredits')) {
                var_dump(phpcredits());
            }
        }

        // Gather and cleanup the above...

        require_code('xhtml');
        $out = '<div style="overflow: auto">';
        $out .= xhtmlise_html(ob_get_contents());
        ob_end_clean();

        $out = preg_replace('#<!DOCTYPE[^>]*>#s', '', preg_replace('#</body[^>]*>#', '', preg_replace('#<body[^>]*>#', '', preg_replace('#</html[^>]*>#', '', preg_replace('#<html[^>]*>#', '', $out)))));
        $matches = [];
        if (preg_match('#<style[^>]*>#', $out, $matches) != 0) {
            $offset = strpos($out, $matches[0]) + strlen($matches[0]);
            $end = strpos($out, '</style>', $offset);
            if ($end !== false) {
                $style = substr($out, $offset - strlen($matches[0]), $end - $offset + strlen('</style>') + strlen($matches[0]));
                //attach_to_screen_header(make_string_tempcode($style));      Actually this just makes an unnecessary mess

                $out = substr($out, 0, $offset) . substr($out, $end);
            }
        }
        $out = preg_replace('#<head[^>]*>.*</head[^>]*>#s', '', $out);

        $out = str_replace(' width="600"', ' width="100%"', $out);
        $out = str_replace('<img border="0" src="/', '<img border="0" style="padding-top: 20px" src="http://' . escape_html(get_base_url_hostname()) . '/', $out);

        // Current run-time details...

        $out .= '<h2>Run-time details</h2>';
        $out .= '<p><strong>Your IP address</strong>: ' . escape_html(get_ip_address()) . '</p>';
        require_code('global4');
        list($username, $suexec) = get_exact_usernames_and_suexec();
        if (!empty($username)) {
            $out .= '<p><strong>Running as user</strong>: ' . escape_html($username) . (($suexec === null) ? '' : (' (' . ($suexec ? 'suEXEC or similar' : 'Not suEXEC') . ')')) . '</p>';
        }
        if (php_function_allowed('php_sapi_name')) {
            $out .= '<p><strong>PHP configured as</strong>: ' . escape_html(php_sapi_name()) . '</p>';
        }

        $out .= '<p><strong>Estimated MD5 uniqid operations per second</strong> (CPU speed): ' . escape_html(float_format(calculate_performance_score())) . '</p>';

        if (strpos(get_db_type(), 'mysql') !== false) {
            $mysql_version = $GLOBALS['SITE_DB']->query_value_if_there('SELECT version()');
            $out .= '<p><strong>MySQL version</strong>: ' . $mysql_version . '</p>';

            $queries = $GLOBALS['SITE_DB']->query('SHOW FULL PROCESSLIST');
            if (empty($queries)) {
                $out .= '<p><strong>MySQL executing queries</strong>: <em>none</em></p>';
            } else {
                $out .= '<p><strong>MySQL executing queries</strong>...</p><table class="wide-table results-table">';
                foreach ($queries as $i => $query) {
                    if ($i == 0) {
                        $out .= '<thead><tr>';
                        foreach (array_keys($query) as $key) {
                            $out .= '<th>' . escape_html($key) . '</th>';
                        }
                        $out .= '</tr></thead><tbody>';
                    }
                    $out .= '<tr>';
                    foreach ($query as $val) {
                        if (!is_string($val)) {
                            $val = strval($val);
                        }
                        $out .= '<td>' . escape_html($val) . '</td>';
                    }
                    $out .= '</tr>';
                }
                $out .= '</tbody></table>';
            }
        }

        if (function_exists('pg_version') && get_db_type() == 'postgresql') {
            $postgresql_version = @pg_version($GLOBALS['SITE_DB']->connection_read);
            if ($postgresql_version !== false) {
                $out .= '<p><strong>PostgreSQL server version</strong>: ' . escape_html($postgresql_version['server']) . '</p>';
                $out .= '<p><strong>PostgreSQL client version</strong>: ' . escape_html($postgresql_version['client']) . '</p>';
                $out .= '<p><strong>PostgreSQL protocol version</strong>: ' . escape_html($postgresql_version['protocol']) . '</p>';
            }
        }

        if (strpos(get_db_type(), 'sqlserver') !== false) {
            $sqlserver_version = $GLOBALS['SITE_DB']->query('SELECT @@version AS version');
            if (isset($sqlserver_version[0]['version'])) {
                $out .= '<p><strong>SQL Server version</strong>: ' . escape_html($sqlserver_version[0]['version']) . '</p>';
            }
        }

        if (php_function_allowed('shell_exec')) {
            if (strpos(PHP_OS, 'Darwin') !== false) {
                $commands = [
                    'uptime',
                    'ps -Af',
                    'top -l1',
                    'iostat',
                    'iotop 3 1',
                ];
            } else {
                $commands = [
                    'cat /proc/cpuinfo',
                    'cat /proc/diskstats',
                    'cat /proc/meminfo',
                    'uptime',
                    'ps -eo uid,pid,ppid,cmd,%mem,%cpu,time --sort=-%mem',
                    'top -n1',
                    'iostat',
                ];
                if ($username === 'root') {
                    $commands[] = 'iotop -n1 -b';
                }
            }

            foreach ($commands as $command) {
                $output = @shell_exec($command);
                if (!empty($output)) {
                    $out .= '<p style="margin-bottom: 0"><strong>' . escape_html($command) . '</strong>:</p><p style="margin-top: 0; font-family: courier; white-space: pre-wrap !important; overflow: auto; width: 100%">' . escape_html($output) . '</p>';
                }
            }
        }

        $out .= '</div>';

        // Output...

        require_code('xhtml');
        $ret = make_string_tempcode(xhtmlise_html($out));
        return $ret;
    }
}
