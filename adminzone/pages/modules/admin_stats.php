<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    stats
 */

/**
 * Module page class.
 */
class Module_admin_stats
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info()
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 10;
        $info['locked'] = true;
        $info['update_require_upgrade'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('stats');
        $GLOBALS['SITE_DB']->drop_table_if_exists('stats_preprocessed');
        $GLOBALS['SITE_DB']->drop_table_if_exists('stats_preprocessed_flat');
        $GLOBALS['SITE_DB']->drop_table_if_exists('stats_contact_forms');
        $GLOBALS['SITE_DB']->drop_table_if_exists('usersonline_track');
        $GLOBALS['SITE_DB']->drop_table_if_exists('ip_country');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install($upgrade_from = null, $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('stats', [
                'id' => '*AUTO',
                'date_and_time' => 'TIME',
                'page_link' => 'SHORT_TEXT',
                'post' => 'LONG_TEXT',
                'referer' => 'URLPATH',
                'ip' => 'IP',
                'member_id' => 'MEMBER',
                'session_id' => 'ID_TEXT',
                'browser' => 'SHORT_TEXT',
                'operating_system' => 'SHORT_TEXT',
                'requested_language' => 'ID_TEXT',
                'milliseconds' => 'INTEGER',
            ]);
            $GLOBALS['SITE_DB']->create_index('stats', 'date_and_time', ['date_and_time']);

            $GLOBALS['SITE_DB']->create_table('usersonline_track', [
                'date_and_time' => '*TIME',
                'peak' => 'INTEGER',
            ]);
            $GLOBALS['SITE_DB']->create_index('usersonline_track', 'peak_track', ['peak']);

            $GLOBALS['SITE_DB']->create_table('ip_country', [
                'id' => '*AUTO',
                'begin_num' => 'UINTEGER',
                'end_num' => 'UINTEGER',
                'country' => 'SHORT_TEXT',
            ]);

            require_lang('stats');
            require_code('crypt');
            $secure_ref = get_secure_random_string();
            $id = $GLOBALS['SITE_DB']->query_insert('task_queue', [
                't_title' => do_lang('INSTALL_GEOLOCATION_DATA'),
                't_hook' => 'install_geolocation_data',
                't_args' => serialize([]),
                't_member_id' => $GLOBALS['FORUM_DRIVER']->get_guest_id(),
                't_secure_ref' => $secure_ref, // Used like a temporary password to initiate the task
                't_send_notification' => 0,
                't_locked' => 0,
            ], true);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 8)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('stats', 'get', 'URLPATH', 's_get');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 9)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('stats', 'the_user', 'MEMBER', 'member_id');
            $GLOBALS['SITE_DB']->add_table_field('stats', 'session_id', 'ID_TEXT');
            $GLOBALS['SITE_DB']->query_update('db_meta_indices', ['i_fields' => 'member_id'], ['i_name' => 'member_track_1'], '', 1);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 10)) { // LEGACY
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'pages');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'milliseconds');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'referer');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'browser');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'operating_system');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'member_track_1');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'member_track_2');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'member_track_3');
            $GLOBALS['SITE_DB']->delete_index_if_exists('stats', 'member_track_4');

            $GLOBALS['SITE_DB']->delete_table_field('stats', 'access_denied_counter');

            $GLOBALS['SITE_DB']->add_table_field('stats', 'page_link', 'SHORT_TEXT');
            $start = 0;
            do { // Do a rough upgrade to the new format
                $rows = $GLOBALS['SITE_DB']->query_select('stats', ['id', 'the_page', 's_get'], [], 'ORDER BY id', 1000, $start);
                foreach ($rows as $row) {
                    $matches = [];
                    if (preg_match('#^(([^/]*)/)?pages/.*/([^/]+)\.\w+$#', $row['the_page'], $matches) != 0) {
                        $page_link = $matches[2] . ':' . $matches[3];
                        $GLOBALS['SITE_DB']->query_update('stats', ['page_link' => $page_link], ['id' => $row['id']]);
                    } else {
                        $GLOBALS['SITE_DB']->query_delete('stats', ['id' => $row['id']]);
                    }
                }
                $start += 1000;
            } while (count($rows) > 0);
            $GLOBALS['SITE_DB']->delete_table_field('stats', 'the_page');
            $GLOBALS['SITE_DB']->delete_table_field('stats', 's_get');

            $GLOBALS['SITE_DB']->delete_table_field('stats', 'title');

            $GLOBALS['SITE_DB']->add_table_field('stats', 'requested_language', 'LANGUAGE_NAME');
        }

        if (($upgrade_from === null) || ($upgrade_from < 10)) { // LEGACY
            $GLOBALS['SITE_DB']->create_table('stats_preprocessed', [
                'p_bucket' => '*ID_TEXT',
                'p_month' => '*INTEGER',
                'p_pivot' => '*ID_TEXT',
                'p_data' => 'LONG_TEXT',
            ]);

            $GLOBALS['SITE_DB']->create_table('stats_preprocessed_flat', [
                'p_bucket' => '*ID_TEXT',
                'p_data' => 'LONG_TEXT',
            ]);

            $GLOBALS['SITE_DB']->create_table('stats_contact_forms', [
                'id' => '*AUTO',
                'form_name' => 'SHORT_TEXT',
                'date_and_time' => 'TIME',
                'country_code' => 'ID_TEXT',
            ]);
            $GLOBALS['SITE_DB']->create_index('stats_contact_forms', 'form_name', ['form_name']);
            $GLOBALS['SITE_DB']->create_index('stats_contact_forms', 'date_and_time', ['date_and_time']);
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points($check_perms = true, $member_id = null, $support_crosslinks = true, $be_deferential = false)
    {
        if (!addon_installed('stats')) {
            return null;
        }

        require_code('stats');
        require_lang('stats');

        $ret = [
            'browse' => ['MODULE_TRANS_NAME_admin_stats', 'menu/adminzone/audit/statistics/statistics'],
        ];

        $hooks = find_all_hook_obs('modules', 'admin_stats_redirects', 'Hook_admin_stats_redirects_');
        foreach ($hooks as $ob) {
            $info = $ob->info();
            if ($info !== null) {
                foreach ($info as $graph_name => $details) {
                    $ret[get_module_zone('admin_stats') . ':admin_stats:graph:' . $graph_name] = [$details['label_lang_string'], $details['icon']];
                }
            }
        }

        $categories = stats_find_graph_categories();
        foreach ($categories as $category_name => $category) {
            $ret[get_module_zone('admin_stats') . ':admin_stats:category:' . $category_name] = [$category['label_lang_string'], $category['icon']];
        }

        static $has_geolocation_data = null;
        if ($has_geolocation_data === null) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('ip_country', 'id');
            $has_geolocation_data = ($test !== null);
        }
        if (!$has_geolocation_data) {
            $ret['install_data'] = ['INSTALL_GEOLOCATION_DATA', 'menu/adminzone/audit/statistics/geolocate'];
        }

        return $ret;
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run()
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('stats', $error_msg)) {
            return $error_msg;
        }

        require_code('stats');
        require_lang('stats');

        if (!cron_installed()) {
            attach_message(do_lang_tempcode('CRON_NEEDED_TO_WORK'), 'warn');
        }

        $type = get_param_string('type', 'browse');

        set_helper_panel_tutorial('tut_statistics');

        if ($type == 'category') {
            $categories = stats_find_graph_categories();
            $category_name = get_param_string('id');
            $this->title = get_screen_title($categories[$category_name]['label_lang_string']);

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MODULE_TRANS_NAME_admin_stats')]]);

            $_graphs = stats_find_graphs_in_category($category_name);
            foreach ($_graphs as $graph_name => $_graph) {
                list($hook_ob, $graph_details) = $_graph;
                if ($hook_ob instanceof CMSStatsProvider) {
                    foreach ($graph_details['filters'] as $filter) {
                        if ($filter !== null) {
                            inform_non_canonical_parameter($filter->filter_name);
                        }
                    }
                }
                inform_non_canonical_parameter($graph_name . '_start');
                inform_non_canonical_parameter($graph_name . '_max');
                inform_non_canonical_parameter($graph_name . '_sort');
            }
        }

        if (($type == 'graph') || ($type == 'spreadsheet')) {
            $graph_name = get_param_string('id');
            list($hook_ob, $graph_details) = stats_find_graph_details($graph_name);

            $title = get_screen_title($graph_details['label'], false);

            foreach ($graph_details['filters'] as $filter) {
                inform_non_canonical_parameter($filter->filter_name);
            }
            inform_non_canonical_parameter($graph_name . '_start');
            inform_non_canonical_parameter($graph_name . '_max');
            inform_non_canonical_parameter($graph_name . '_sort');
        }

        if ($type == 'spreadsheet') {
            $GLOBALS['OUTPUT_STREAMING'] = false;
        }

        if ($type == 'redirect') {
            $id = get_param_string('id');

            $hooks = find_all_hook_obs('modules', 'admin_stats_redirects', 'Hook_admin_stats_redirects_');
            foreach ($hooks as $ob) {
                $info = $ob->info();
                if ($info !== null) {
                    foreach ($info as $_id => $details) {
                        if ($_id == $id) {
                            $title = get_screen_title($details['label_lang_string']);

                            break 2;
                        }
                    }
                }
            }
        }

        if ($type == 'install_data') {
            $this->title = get_screen_title('INSTALL_GEOLOCATION_DATA');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MODULE_TRANS_NAME_admin_stats')]]);
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run()
    {
        require_css('stats');

        cms_set_time_limit(TIME_LIMIT_EXTEND__CRAWL);
        disable_php_memory_limit();

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        } elseif ($type == 'install_data') {
            return $this->install_geolocation_data();
        } elseif ($type == 'category') {
            return $this->category();
        } elseif ($type == 'graph') {
            return $this->graph();
        } elseif ($type == 'spreadsheet') {
            return $this->spreadsheet();
        } elseif ($type == 'redirect') {
            return $this->redirect();
        }
        return new Tempcode();
    }

    /**
     * The do-next manager for choosing a stats category.
     *
     * @return Tempcode The UI
     */
    public function browse()
    {
        require_code('templates_donext');

        $actions = [];

        $hooks = find_all_hook_obs('modules', 'admin_stats_redirects', 'Hook_admin_stats_redirects_');
        foreach ($hooks as $ob) {
            $info = $ob->info();
            if ($info !== null) {
                foreach ($info as $id => $graph_details) {
                    $actions[] = [$graph_details['icon'], ['_SELF', ['type' => 'redirect', 'id' => $id], '_SELF'], do_lang_tempcode($graph_details['label_lang_string'])];
                }
            }
        }

        $hooks = find_all_hook_obs('modules', 'admin_stats', 'Hook_admin_stats_');
        foreach ($hooks as $ob) {
            $info = $ob->info();
            if ($info !== null) {
                foreach ($info as $graph_name => $graph_details) {
                    if ($graph_details['category'] === null) {
                        $actions[] = [$graph_details['icon'], ['_SELF', ['type' => 'graph', 'id' => $graph_name], '_SELF'], $graph_details['label']];
                    }
                }
            }
        }

        $categories = stats_find_graph_categories();
        foreach ($categories as $category_name => $category) {
            $actions[] = [$category['icon'], ['_SELF', ['type' => 'category', 'id' => $category_name], '_SELF'], do_lang_tempcode($category['label_lang_string'])];
        }

        $test = $GLOBALS['SITE_DB']->query_select_value_if_there('ip_country', 'id');
        if ($test === null) {
            $actions[] = ['menu/adminzone/audit/statistics/geolocate', ['_SELF', ['type' => 'install_data'], '_SELF'], do_lang_tempcode('INSTALL_GEOLOCATION_DATA'), 'DOC_INSTALL_GEOLOCATION_DATA'];
        }

        return do_next_manager(
            get_screen_title('MODULE_TRANS_NAME_admin_stats'),
            comcode_lang_string('DOC_STATISTICS'),
            $actions,
            do_lang('MODULE_TRANS_NAME_admin_stats')
        );
    }

    /**
     * Install geolocation data.
     *
     * @return Tempcode The UI, showing the result of the installation
     */
    public function install_geolocation_data()
    {
        if (post_param_integer('confirm', 0) == 0) {
            $preview = do_lang_tempcode('INSTALL_GEOLOCATION_DATA');
            $url = get_self_url(false, false);
            return do_template('CONFIRM_SCREEN', ['_GUID' => '153e04d683281ead45497b424307aabf', 'TITLE' => $this->title, 'PREVIEW' => $preview, 'FIELDS' => form_input_hidden('confirm', '1'), 'URL' => $url]);
        }

        require_code('tasks');
        return call_user_func_array__long_task(do_lang('INSTALL_GEOLOCATION_DATA'), $this->title, 'install_geolocation_data');
    }

    /**
     * Viewing all the graphs in a stats category.
     *
     * @return Tempcode The UI
     */
    public function category()
    {
        send_http_output_ping();

        $category_name = get_param_string('id');

        $_graphs = stats_find_graphs_in_category($category_name);

        $graphs = [];
        foreach ($_graphs as $graph_name => $_graph) {
            list($hook_ob, $graph_details) = $_graph;

            $graph_rendered = stats_generate_graph($graph_name, [], null, $hook_ob, $graph_details);

            $graph_final_details = null;
            $graph_form = stats_generate_graph_form($graph_name, $hook_ob, $graph_details);

            $results_table = stats_generate_results_table($graph_name, [], null, $hook_ob, $graph_details, $graph_final_details);

            $graph = [
                'GRAPH_NAME' => $graph_name,
                'GRAPH_LABEL' => $graph_details['label'],
                'GRAPH_RENDERED' => $graph_rendered,
                'GRAPH_FORM' => $graph_form,
                'RESULTS_TABLE' => $results_table,
            ];
            $graphs[] = $graph;
        }

        return do_template('STATS_SCREEN', ['TITLE' => $this->title, 'GRAPHS' => $graphs]);
    }

    /**
     * View a specific graph.
     *
     * @return Tempcode The UI
     */
    public function graph()
    {
        $graph_name = get_param_string('id');

        send_http_output_ping();

        list($hook_ob, $graph_details) = stats_find_graph_details($graph_name);

        $graph_rendered = stats_generate_graph($graph_name, [], null, $hook_ob, $graph_details);

        $graph_final_details = null;
        $graph_form = stats_generate_graph_form($graph_name, $hook_ob, $graph_details);

        $results_table = stats_generate_results_table($graph_name, [], null, $hook_ob, $graph_details, $graph_final_details);

        $graph = [
            'GRAPH_NAME' => $graph_name,
            'GRAPH_LABEL' => $graph_details['label'],
            'GRAPH_RENDERED' => $graph_rendered,
            'GRAPH_FORM' => $graph_form,
            'RESULTS_TABLE' => $results_table,
        ];
        $graphs = [$graph];

        return do_template('STATS_SCREEN', ['TITLE' => $this->title, 'GRAPHS' => $graphs]);
    }

    /**
     * Download the spreadsheet for a graph.
     *
     * @return Tempcode The UI
     */
    public function spreadsheet()
    {
        $spreadsheet_graph_name = get_param_string('id');

        $filename = null;
        $sheet_writer = stats_generate_spreadsheet($spreadsheet_graph_name, $filename);
        $sheet_writer->output_and_exit($filename, true);

        return new Tempcode();
    }

    /**
     * Redirect to an external stats system.
     *
     * @return Tempcode The UI
     */
    public function redirect()
    {
        $id = get_param_string('id');

        $hooks = find_all_hook_obs('modules', 'admin_stats_redirects', 'Hook_admin_stats_redirects_');
        foreach ($hooks as $ob) {
            $info = $ob->info();
            if ($info !== null) {
                foreach ($info as $_id => $details) {
                    if ($_id == $id) {
                        $url = $ob->get_redirect_url($id);
                        return redirect_screen($this->title, $url);
                    }
                }
            }
        }

        warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
    }
}
