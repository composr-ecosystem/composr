<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    welcome_emails
 */

require_code('crud_module');

/**
 * Module page class.
 */
class Module_admin_cns_welcome_emails extends Standard_crud_module
{
    protected $lang_type = 'WELCOME_EMAIL';
    protected $select_name = 'SUBJECT';
    protected $select_name_description = 'DESCRIPTION_WELCOME_EMAIL_SUBJECT';
    protected $menu_label = 'WELCOME_EMAILS';
    protected $orderer = 'w_name';
    protected $donext_entry_content_type = 'welcome_email';
    protected $donext_category_content_type = null;

    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 5;
        $info['update_require_upgrade'] = true;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'welcome_emails';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('f_welcome_emails');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('f_welcome_emails', [
                'id' => '*AUTO',
                'w_name' => 'SHORT_TEXT',
                'w_subject' => 'SHORT_TRANS',
                'w_text' => 'LONG_TRANS',
                'w_send_after_hours' => 'INTEGER',
                'w_newsletter_id' => '?AUTO_LINK',
                'w_usergroup' => '?GROUP',
                'w_usergroup_type' => 'ID_TEXT', // <blank>, primary, secondary
            ]);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 4)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('f_welcome_emails', 'w_usergroup', '?AUTO_LINK', null);
            $GLOBALS['SITE_DB']->add_table_field('f_welcome_emails', 'w_usergroup_type', 'ID_TEXT', '');
            $GLOBALS['SITE_DB']->alter_table_field('f_welcome_emails', 'w_newsletter', '?AUTO_LINK');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 5)) { // LEGACY: 11.beta1
            // Database consistency changes
            $GLOBALS['SITE_DB']->alter_table_field('f_welcome_emails', 'w_send_time', 'INTEGER', 'w_send_after_hours');
            $GLOBALS['SITE_DB']->alter_table_field('f_welcome_emails', 'w_newsletter', '?AUTO_LINK', 'w_newsletter_id');
            $GLOBALS['SITE_DB']->alter_table_field('f_welcome_emails', 'w_usergroup', '?GROUP');
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('welcome_emails')) {
            return null;
        }

        if (get_forum_type() != 'cns') {
            return null;
        }

        if ($be_deferential || $support_crosslinks) {
            return null;
        }

        return [
            'browse' => ['WELCOME_EMAILS', 'menu/adminzone/setup/welcome_emails'],
        ] + parent::get_entry_points();
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @param  boolean $top_level Whether this is running at the top level, prior to having sub-objects called
     * @param  ?ID_TEXT $type The screen type to consider for metadata purposes (null: read from environment)
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run(bool $top_level = true, ?string $type = null) : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('welcome_emails', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_lang('cns_welcome_emails');
        require_css('cns_admin');

        set_helper_panel_tutorial('tut_adv_members');
        set_helper_panel_text(comcode_lang_string('DOC_WELCOME_EMAIL_PREVIEW'));

        breadcrumb_set_parents([['_SEARCH:admin_cns_members:browse', do_lang_tempcode('MEMBERS')]]);

        return parent::pre_run($top_level);
    }

    /**
     * Standard crud_module run_start.
     *
     * @param  ID_TEXT $type The type of module execution
     * @return Tempcode The output of the run
     */
    public function run_start(string $type) : object
    {
        require_code('cns_general_action');
        require_code('cns_general_action2');

        cns_require_all_forum_stuff();

        if (get_forum_type() == 'cns') {
            require_javascript('welcome_emails');
            $this->js_function_calls[] = 'moduleAdminCnsWelcomeEmailsRunStart';
        }

        $this->add_one_label = do_lang_tempcode('ADD_WELCOME_EMAIL');
        $this->edit_this_label = do_lang_tempcode('EDIT_THIS_WELCOME_EMAIL');
        $this->edit_one_label = do_lang_tempcode('EDIT_WELCOME_EMAIL');

        if ($type == 'browse') {
            return $this->browse();
        }
        return new Tempcode();
    }

    /**
     * The do-next manager for before content management.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        if (!cron_installed()) {
            attach_message(do_lang_tempcode('CRON_NEEDED_TO_WORK', escape_html(get_tutorial_url('tut_configuration'))), 'warn');
        }

        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('WELCOME_EMAILS'),
            comcode_lang_string('DOC_WELCOME_EMAILS'),
            [
                ['admin/add', ['_SELF', ['type' => 'add'], '_SELF'], do_lang('ADD_WELCOME_EMAIL')],
                ['admin/edit', ['_SELF', ['type' => 'edit'], '_SELF'], do_lang('EDIT_WELCOME_EMAIL')],
            ],
            do_lang('WELCOME_EMAILS')
        );
    }

    /**
     * Get Tempcode for an adding form.
     *
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function get_form_fields_for_add()
    {
        return $this->get_form_fields();
    }

    /**
     * Get Tempcode for adding/editing form.
     *
     * @param  SHORT_TEXT $name A name for the Welcome E-mail
     * @param  SHORT_TEXT $subject The subject of the Welcome E-mail
     * @param  LONG_TEXT $text The message body of the Welcome E-mail
     * @param  integer $send_after_hours The number of hours before sending the e-mail
     * @param  ?AUTO_LINK $newsletter What newsletter to send out to instead of members (null: none)
     * @param  ?AUTO_LINK $usergroup The usergroup to tie to (null: none)
     * @param  ID_TEXT $usergroup_type How to send regarding usergroups (blank: indiscriminately)
     * @set primary secondary ""
     * @return array A pair: The input fields, Hidden fields
     */
    public function get_form_fields(string $name = '', string $subject = '', string $text = '', int $send_after_hours = 0, ?int $newsletter = null, ?int $usergroup = null, string $usergroup_type = '') : array
    {
        $fields = new Tempcode();
        $fields->attach(form_input_line(do_lang_tempcode('NAME'), do_lang_tempcode('DESCRIPTION_NAME_REFERENCE'), 'welcome_email_name', $name, true));
        $fields->attach(form_input_line(do_lang_tempcode('SUBJECT'), do_lang_tempcode('DESCRIPTION_WELCOME_EMAIL_SUBJECT'), 'subject', $subject, true));
        $fields->attach(form_input_huge_comcode(do_lang_tempcode('TEXT'), do_lang_tempcode('DESCRIPTION_WELCOME_EMAIL_TEXT'), 'text', $text, true));
        $fields->attach(form_input_integer(do_lang_tempcode('SEND_TIME'), do_lang_tempcode('DESCRIPTION_SEND_TIME'), 'send_after_hours', $send_after_hours, true));

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '3c9bf61e762eb8715a7fdde214b7eac2', 'SECTION_HIDDEN' => false, 'TITLE' => do_lang_tempcode('SCOPE')]));

        if (addon_installed('newsletter')) {
            require_lang('newsletter');
            $newsletters = new Tempcode();
            $rows = $GLOBALS['SITE_DB']->query_select('newsletters', ['id', 'title']);
            if (get_forum_type() == 'cns') {
                $newsletters->attach(form_input_list_entry('', ($newsletter === null), do_lang_tempcode('WELCOME_EMAIL_MEMBERS')));
            }
            foreach ($rows as $_newsletter) {
                $newsletters->attach(form_input_list_entry(strval($_newsletter['id']), $_newsletter['id'] === $newsletter, get_translated_text($_newsletter['title'])));
            }
            if (!$newsletters->is_empty()) {
                $fields->attach(form_input_list(do_lang_tempcode('NEWSLETTER'), do_lang_tempcode('DESCRIPTION_WELCOME_EMAIL_NEWSLETTER'), 'newsletter', $newsletters, null, false, false));
            }
        }
        if (get_forum_type() == 'cns') {
            require_code('cns_groups');
            $usergroups = new Tempcode();
            $usergroups->attach(form_input_list_entry('', $usergroup === null, do_lang_tempcode('NA_EM')));
            $usergroups->attach(cns_create_selection_list_usergroups($usergroup));
            $fields->attach(form_input_list(do_lang_tempcode('USERGROUP'), do_lang_tempcode('DESCRIPTION_WELCOME_EMAIL_USERGROUP', escape_html(get_site_name())), 'usergroup', $usergroups, null, false, false));

            $radios = new Tempcode();
            $radios->attach(form_input_radio_entry('usergroup_type', '', true, do_lang_tempcode('WELCOME_EMAIL_USERGROUP_TYPE_BOTH')));
            $radios->attach(form_input_radio_entry('usergroup_type', 'primary', false, do_lang_tempcode('WELCOME_EMAIL_USERGROUP_TYPE_PRIMARY')));
            $radios->attach(form_input_radio_entry('usergroup_type', 'secondary', false, do_lang_tempcode('WELCOME_EMAIL_USERGROUP_TYPE_SECONDARY')));
            $fields->attach(form_input_radio(do_lang_tempcode('WELCOME_EMAIL_USERGROUP_TYPE'), do_lang_tempcode('DESCRIPTION_WELCOME_EMAIL_USERGROUP_TYPE'), 'usergroup_type', $radios, false));
        }

        return [$fields, new Tempcode()];
    }

    /**
     * Standard crud_module table function.
     *
     * @param  array $url_map Details to go to build_url for link to the next screen
     * @return array A pair: The choose table, Whether re-ordering is supported from this screen
     */
    public function create_selection_list_choose_table(array $url_map) : array
    {
        require_code('templates_results_table');

        $current_ordering = get_param_string('sort', 'w_name ASC', INPUT_FILTER_GET_COMPLEX);
        $sortables = [
            'w_name' => do_lang_tempcode('NAME'),
            'w_subject' => do_lang_tempcode('SUBJECT'),
            'w_send_after_hours' => do_lang_tempcode('SEND_TIME'),
        ];
        list($sql_sort, $sort_order, $sortable) = process_sorting_params('welcome_email', $current_ordering);

        $header_row = results_header_row([
            do_lang_tempcode('NAME'),
            do_lang_tempcode('SUBJECT'),
            do_lang_tempcode('SEND_TIME'),
            do_lang_tempcode('ACTIONS'),
        ], $sortables, 'sort', $sortable . ' ' . $sort_order);

        $result_entries = new Tempcode();

        list($rows, $max_rows) = $this->get_entry_rows(false, $sql_sort);
        foreach ($rows as $row) {
            $edit_url = build_url($url_map + ['id' => $row['id']], '_SELF');

            $result_entries->attach(results_entry([$row['w_name'], get_translated_text($row['w_subject']), do_lang_tempcode('HOURS', escape_html(strval($row['w_send_after_hours']))), protect_from_escaping(hyperlink($edit_url, do_lang_tempcode('EDIT'), false, false, do_lang('EDIT') . ' #' . strval($row['id'])))], true));
        }

        return [results_table(do_lang($this->menu_label), get_param_integer('start', 0), 'start', either_param_integer('max', 20), 'max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order), false];
    }

    /**
     * Standard crud_module list function.
     *
     * @return Tempcode The selection list
     */
    public function create_selection_list_entries() : object
    {
        $_m = $GLOBALS['SITE_DB']->query_select('f_welcome_emails', ['id', 'w_name']);
        $entries = new Tempcode();
        foreach ($_m as $m) {
            $entries->attach(form_input_list_entry(strval($m['id']), false, $m['w_name']));
        }

        return $entries;
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function fill_in_edit_form(string $id)
    {
        $m = $GLOBALS['SITE_DB']->query_select('f_welcome_emails', ['*'], ['id' => intval($id)], '', 1);
        if (!array_key_exists(0, $m)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $r = $m[0];

        return $this->get_form_fields($r['w_name'], get_translated_text($r['w_subject']), get_translated_text($r['w_text']), $r['w_send_after_hours'], $r['w_newsletter_id'], $r['w_usergroup'], $r['w_usergroup_type']);
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return array A pair: The entry added, description about usage
     */
    public function add_actualisation() : array
    {
        $name = post_param_string('welcome_email_name');
        $subject = post_param_string('subject');
        $text = post_param_string('text');
        $send_after_hours = post_param_integer('send_after_hours');
        $newsletter = post_param_integer('newsletter', null);
        $usergroup = post_param_integer('usergroup', null);
        $usergroup_type = post_param_string('usergroup_type', '');

        $id = cns_make_welcome_email($name, $subject, $text, $send_after_hours, $newsletter, $usergroup, $usergroup_type);

        return [strval($id), null];
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return ?Tempcode Description about usage (null: none)
     */
    public function edit_actualisation(string $id) : ?object
    {
        $name = post_param_string('welcome_email_name');
        $subject = post_param_string('subject');
        $text = post_param_string('text');
        $send_after_hours = post_param_integer('send_after_hours');
        $newsletter = post_param_integer('newsletter', null);
        $usergroup = post_param_integer('usergroup', null);
        $usergroup_type = post_param_string('usergroup_type', '');

        cns_edit_welcome_email(intval($id), $name, $subject, $text, $send_after_hours, $newsletter, $usergroup, $usergroup_type);

        return null;
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $id The entry being deleted
     */
    public function delete_actualisation(string $id)
    {
        cns_delete_welcome_email(intval($id));
    }
}
