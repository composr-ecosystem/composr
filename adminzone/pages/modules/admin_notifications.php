<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_notifications
 */

/**
 * Module page class.
 */
class Module_admin_notifications
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info()
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 1;
        $info['locked'] = false;
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points($check_perms = true, $member_id = null, $support_crosslinks = true, $be_deferential = false)
    {
        return [
            'browse' => ['NOTIFICATIONS', 'menu/adminzone/setup/notifications'],
            'default' => ['NOTIFICATIONS_DEFAULT', 'buttons/notifications_enable'],
            'lockdown' => ['NOTIFICATIONS_LOCKDOWN', 'menu/adminzone/setup/notifications'],
        ];
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('notification_lockdown');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install($upgrade_from = null, $upgrade_from_hack = null)
    {
        $GLOBALS['SITE_DB']->create_table('notification_lockdown', [
            'l_notification_code' => '*ID_TEXT',
            'l_setting' => 'INTEGER',
        ]);
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run()
    {
        $type = get_param_string('type', 'browse');

        require_lang('notifications');

        if ($type == 'browse') {
            $this->title = get_screen_title('NOTIFICATIONS');
        }

        if ($type == 'default') {
            $this->title = get_screen_title('NOTIFICATIONS_DEFAULT');

            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('NOTIFICATIONS')]]);
        }

        if ($type == 'lockdown') {
            $this->title = get_screen_title('NOTIFICATIONS_LOCKDOWN');

            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('NOTIFICATIONS')]]);
        }

        return null;
    }

    const NOTIFICATIONS_DEFAULT = 1;
    const NOTIFICATIONS_LOCKDOWN = 2;

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run()
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'default') {
            return $this->selection_ui(self::NOTIFICATIONS_DEFAULT);
        }
        if ($type == 'lockdown') {
            return $this->selection_ui(self::NOTIFICATIONS_LOCKDOWN);
        }

        return new Tempcode();
    }

    /**
     * The do-next manager.
     *
     * @return Tempcode The UI
     */
    public function browse()
    {
        require_code('templates_donext');
        return do_next_manager(
            $this->title,
            comcode_lang_string('DOC_NOTIFICATIONS'),
            [
                ['buttons/notifications_enable', ['_SELF', ['type' => 'default'], '_SELF'], do_lang('NOTIFICATIONS_DEFAULT')],
                ['menu/adminzone/setup/notifications', ['_SELF', ['type' => 'lockdown'], '_SELF'], do_lang('NOTIFICATIONS_LOCKDOWN')],
            ],
            do_lang('NOTIFICATIONS')
        );
    }

    /**
     * Execute the module.
     *
     * @param  integer $mode The UI mode (one of the self::NOTIFICATIONS_* constants)
     * @return Tempcode The result of execution
     */
    public function selection_ui($mode)
    {
        require_css('notifications');
        require_code('notifications');
        require_code('notifications2');
        require_all_lang();

        if ($mode == self::NOTIFICATIONS_LOCKDOWN) {
            $intro = do_lang_tempcode('NOTIFICATIONS_DEFINE_LOCKDOWN');

            $_notification_types = [
                A__CHOICE => '_CHOICE',
                A__STATISTICAL => '_STATISTICAL',
            ];

            $_saved_settings = $GLOBALS['SITE_DB']->query_select('notification_lockdown', ['*']);
        } else { // NOTIFICATIONS_DEFAULT
            $intro = do_lang_tempcode('NOTIFICATIONS_DEFINE_DEFAULT');

            $_notification_types = [
                A__INBUILT_DEFAULT => '_INBUILT_DEFAULT',
            ];

            $_saved_settings = $GLOBALS['SITE_DB']->query_select('notifications_enabled', ['*'], ['l_member_id' => $GLOBALS['FORUM_DRIVER']->get_guest_id(), 'l_code_category' => '']);
        }

        $_notification_types = $_notification_types + _get_available_notification_types();

        $saved_settings = collapse_2d_complexity('l_notification_code', 'l_setting', $_saved_settings);

        $current_setting = null;

        $notification_sections = [];
        $hooks = find_all_hook_obs('systems', 'notifications', 'Hook_notification_');
        foreach ($hooks as $hook => $ob) {
            if ((substr($hook, 0, 4) == 'cns_') && (get_forum_type() != 'cns')) {
                continue;
            }
            $_notification_codes = $ob->list_handled_codes();
            foreach ($_notification_codes as $notification_code => $notification_details) {
                $allowed_setting = $ob->allowed_settings($notification_code);

                $current_setting = array_key_exists($notification_code, $saved_settings) ? $saved_settings[$notification_code] : null;

                $notification_types = [];
                $save_query = false;
                foreach ($_notification_types as $possible => $ntype) {
                    $save_query = ($save_query) || (post_param_integer('notification_' . $notification_code . '_' . $ntype, 0) == 1);
                }
                foreach ($_notification_types as $possible => $ntype) {
                    $available = ($possible == A__CHOICE) || ($possible == A__INBUILT_DEFAULT) || ($possible == A__STATISTICAL) || (($possible & $allowed_setting) != 0);

                    if ($save_query) {
                        $checked = false; // Will strictly read from POST
                    } else {
                        if ($current_setting === null) {
                            if ($mode == self::NOTIFICATIONS_LOCKDOWN) {
                                $checked = ($possible == A__CHOICE);
                            } else { // NOTIFICATIONS_DEFAULT
                                $checked = ($possible == A__INBUILT_DEFAULT);
                            }
                        } else {
                            if ($possible == A__STATISTICAL) {
                                $checked = ($current_setting == A__STATISTICAL);
                            } elseif ($possible == A__CHOICE) {
                                $checked = false;
                            } elseif ($possible == A__INBUILT_DEFAULT) {
                                $checked = false;
                            } elseif ($current_setting == -1) {
                                $checked = false;
                            } else {
                                $checked = (($possible & $current_setting) != 0);
                            }
                        }
                    }

                    $tick_label = do_lang_tempcode('ENABLE_NOTIFICATIONS_' . $ntype);
                    if (($possible == A__CHOICE) || ($possible == A__INBUILT_DEFAULT)) {
                        $inbuilt_default = $ob->get_initial_setting($notification_code);
                        $tick_label = do_lang_tempcode('INBUILT_DEFAULT_WRAP', $tick_label, $inbuilt_default ? do_lang_tempcode('YES') : do_lang_tempcode('NO'));
                    }

                    $_checked = post_param_integer('notification_' . $notification_code . '_' . $ntype, (($_SERVER['REQUEST_METHOD'] != 'POST') && $checked) ? 1 : 0);

                    $notification_types[] = [
                        'NTYPE' => $ntype,
                        'LABEL' => $tick_label,
                        'CHECKED' => ($_checked == 1),
                        'RAW' => strval($possible),
                        'AVAILABLE' => $available,
                        'SCOPE' => $notification_code,
                    ];
                }

                if (!isset($notification_sections[$notification_details[0]])) {
                    $notification_sections[$notification_details[0]] = [
                        'NOTIFICATION_SECTION' => $notification_details[0],
                        'NOTIFICATION_CODES' => [],
                    ];
                }
                $notification_sections[$notification_details[0]]['NOTIFICATION_CODES'][] = [
                    'NOTIFICATION_CODE' => $notification_code,
                    'NOTIFICATION_LABEL' => $notification_details[1],
                    'NOTIFICATION_TYPES' => $notification_types,
                    'SUPPORTS_CATEGORIES' => false,
                    'PRIVILEGED' => !$ob->member_could_potentially_enable($ntype, $GLOBALS['FORUM_DRIVER']->get_guest_id()),
                ];
            }
        }

        // Save
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            if ($mode == self::NOTIFICATIONS_LOCKDOWN) {
                $GLOBALS['SITE_DB']->query_delete('notification_lockdown');
            } else { // NOTIFICATIONS_DEFAULT
                $GLOBALS['SITE_DB']->query_delete('notifications_enabled', ['l_member_id' => $GLOBALS['FORUM_DRIVER']->get_guest_id(), 'l_code_category' => '']);
            }

            foreach ($notification_sections as $notification_section) {
                foreach ($notification_section['NOTIFICATION_CODES'] as $notification_code) {
                    $new_setting = A_NA;
                    foreach ($notification_code['NOTIFICATION_TYPES'] as $notification_type) {
                        $ntype = $notification_type['NTYPE'];
                        if (post_param_integer('notification_' . $notification_code['NOTIFICATION_CODE'] . '_' . $ntype, 0) == 1) {
                            $new_setting = $new_setting | intval($notification_type['RAW']);
                        }
                    }

                    if (($new_setting != A__CHOICE) && ($new_setting != A__INBUILT_DEFAULT)) {
                        if ($mode == self::NOTIFICATIONS_LOCKDOWN) {
                            $GLOBALS['SITE_DB']->query_insert('notification_lockdown', [
                                'l_notification_code' => substr($notification_code['NOTIFICATION_CODE'], 0, 80),
                                'l_setting' => $new_setting,
                            ]);
                        } else { // NOTIFICATIONS_DEFAULT
                            $GLOBALS['SITE_DB']->query_insert('notifications_enabled', [
                                'l_member_id' => $GLOBALS['FORUM_DRIVER']->get_guest_id(),
                                'l_notification_code' => substr($notification_code['NOTIFICATION_CODE'], 0, 80),
                                'l_code_category' => '',
                                'l_setting' => $new_setting,
                            ]);
                        }
                    }
                }
            }

            if ($mode == self::NOTIFICATIONS_LOCKDOWN) {
                log_it('NOTIFICATIONS_LOCKDOWN');
            } else { // NOTIFICATIONS_DEFAULT
                log_it('NOTIFICATIONS_DEFAULT');
            }

            attach_message(do_lang_tempcode('SUCCESS'));
        }

        // Sort labels
        cms_mb_ksort($notification_sections, SORT_NATURAL | SORT_FLAG_CASE);
        foreach (array_keys($notification_sections) as $i) {
            sort_maps_by($notification_sections[$i]['NOTIFICATION_CODES'], 'NOTIFICATION_LABEL', false, true);
        }

        require_code('themes2');
        $color = find_theme_seed($GLOBALS['FORUM_DRIVER']->get_theme());

        $notification_types_titles = [];
        foreach ($_notification_types as $possible => $ntype) {
            $notification_types_titles[] = [
                'NTYPE' => $ntype,
                'LABEL' => do_lang_tempcode('ENABLE_NOTIFICATIONS_' . $ntype),
                'RAW' => strval($possible),
            ];
        }

        $interface = do_template('NOTIFICATIONS_MANAGE', [
            '_GUID' => '55dc192d339b570b060d61039c43b96d',
            'INTRO' => $intro,
            'SHOW_PRIVILEGES' => true,
            'COLOR' => $color,
            'NOTIFICATION_TYPES_TITLES' => $notification_types_titles,
            'NOTIFICATION_SECTIONS' => $notification_sections,
            'ADVANCED_COLUMN' => false,
            'MEMBER_ID' => strval(get_member()),
        ]);

        return do_template('NOTIFICATIONS_MANAGE_SCREEN', [
            '_GUID' => '4f6af291a40c519377879555e24c2c81',
            'TITLE' => $this->title,
            'INTERFACE' => $interface,
            'ACTION_URL' => get_self_url(),
        ]);
    }
}
