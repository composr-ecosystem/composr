<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    awards
 */

require_code('crud_module');

/**
 * Module page class.
 */
class Module_admin_awards extends Standard_crud_module
{
    protected $lang_type = 'AWARD_TYPE';
    protected $select_name = 'TITLE';
    protected $archive_entry_point = '_SEARCH:awards';
    protected $archive_label = 'VIEW_PAST_WINNERS';
    protected $permission_module = 'award';
    protected $menu_label = 'AWARDS';
    protected $table = 'award_types';
    protected $orderer = 'a_title';
    protected $donext_entry_content_type = 'award_type';
    protected $donext_category_content_type = null;

    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['update_require_upgrade'] = true;
        $info['version'] = 6;
        $info['locked'] = true;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'awards';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $tables = [
            'award_archive',
            'award_types',
        ];
        $GLOBALS['SITE_DB']->drop_table_if_exists($tables);
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('award_archive', [
                'a_type_id' => '*AUTO_LINK',
                'date_and_time' => '*TIME',
                'content_id' => 'ID_TEXT',
                'member_id' => 'MEMBER',
            ]);

            $GLOBALS['SITE_DB']->create_index('award_archive', 'awardquicksearch', ['content_id']);

            $GLOBALS['SITE_DB']->create_table('award_types', [
                'id' => '*AUTO',
                'a_title' => 'SHORT_TRANS',
                'a_description' => 'LONG_TRANS__COMCODE',
                'a_points' => 'INTEGER',
                'a_content_type' => 'ID_TEXT', // uses same naming convention as cms_merge importer
                'a_show_awardee' => 'BINARY',
                'a_update_interval_hours' => 'INTEGER',
            ]);

            require_code('content2');
            install_predefined_content('awards');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 5)) { // LEGACY
            $GLOBALS['SITE_DB']->alter_table_field('award_types', 'a_hide_awardee', 'BINARY', 'a_show_awardee');
            $GLOBALS['SITE_DB']->query('UPDATE ' . get_table_prefix() . 'award_types SET a_show_awardee=1-a_show_awardee');
        }

        if (($upgrade_from !== null) && ($upgrade_from < 6)) { // LEGACY: 11.beta1
            // Database consistency fixes
            $GLOBALS['SITE_DB']->alter_table_field('award_types', 'a_update_time_hours', 'INTEGER', 'a_update_interval_hours');
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('awards')) {
            return null;
        }

        $ret = [
            'browse' => ['MANAGE_AWARDS', 'menu/adminzone/setup/awards'],
        ];

        $ret += parent::get_entry_points();

        if ($member_id === null) {
            $member_id = get_member();
        }

        if (has_privilege($member_id, 'mass_import')) {
            $ret += [
                'predefined_content' => ['PREDEFINED_CONTENT', 'admin/import'],
            ];
        }

        return $ret;
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @param  boolean $top_level Whether this is running at the top level, prior to having sub-objects called
     * @param  ?ID_TEXT $type The screen type to consider for metadata purposes (null: read from environment)
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run(bool $top_level = true, ?string $type = null) : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('awards', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_lang('awards');

        set_helper_panel_tutorial('tut_featured');
        set_helper_panel_text(comcode_lang_string('DOC_AWARDS'));

        if ($type == 'predefined_content') {
        }

        if ($type == '_predefined_content') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('MANAGE_AWARDS')], ['_SELF:_SELF:predefined_content', do_lang_tempcode('PREDEFINED_CONTENT')]]);
            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        if ($type == 'predefined_content' || $type == '_predefined_content') {
            $this->title = get_screen_title('PREDEFINED_CONTENT');
        }

        return parent::pre_run($top_level);
    }

    /**
     * Standard crud_module run_start.
     *
     * @param  ID_TEXT $type The type of module execution
     * @return Tempcode The output of the run
     */
    public function run_start(string $type) : object
    {
        require_code('awards');
        require_code('awards2');

        $this->add_text = do_lang_tempcode('AWARD_ALLOCATEHELP');

        $this->add_one_label = do_lang_tempcode('ADD_AWARD_TYPE');
        $this->edit_this_label = do_lang_tempcode('EDIT_THIS_AWARD_TYPE');
        $this->edit_one_label = do_lang_tempcode('EDIT_AWARD_TYPE');

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'predefined_content') {
            return $this->predefined_content();
        }
        if ($type == '_predefined_content') {
            return $this->_predefined_content();
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for before content management.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('MANAGE_AWARDS'),
            comcode_lang_string('DOC_AWARDS'),
            [
                ['admin/add', ['_SELF', ['type' => 'add'], '_SELF'], do_lang('ADD_AWARD_TYPE')],
                ['admin/edit', ['_SELF', ['type' => 'edit'], '_SELF'], do_lang('EDIT_AWARD_TYPE')],
                has_privilege(get_member(), 'mass_import') ? ['admin/install', ['_SELF', ['type' => 'predefined_content'], '_SELF'], do_lang('PREDEFINED_CONTENT')] : null,
            ],
            do_lang('MANAGE_AWARDS')
        );
    }

    /**
     * Standard crud_module table function.
     *
     * @param  array $url_map Details to go to build_url for link to the next screen
     * @return array A quintet: The choose table, Whether re-ordering is supported from this screen, Search URL, Archive URL, a Filtercode box block
     */
    public function create_selection_list_choose_table(array $url_map) : array
    {
        require_code('templates_results_table');

        $hr = [];
        $hr[] = do_lang_tempcode('TITLE');
        if (addon_installed('points')) {
            $hr[] = do_lang_tempcode('POINTS');
        }
        $hr[] = do_lang_tempcode('CONTENT_TYPE');
        $hr[] = do_lang_tempcode('USED_PREVIOUSLY');
        $hr[] = do_lang_tempcode('ACTIONS');

        $current_ordering = get_param_string('sort', 'a_title ASC', INPUT_FILTER_GET_COMPLEX);
        if (strpos($current_ordering, ' ') === false) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR', escape_html('6a297c88f2eb5e58a9c77941bde0575d')));
        }
        $sortables = [
            'a_title' => do_lang_tempcode('TITLE'),
            'a_content_type' => do_lang_tempcode('CONTENT_TYPE'),
        ];
        if (addon_installed('points')) {
            $sortables['a_points'] = do_lang_tempcode('POINTS');
        }
        list($sql_sort, $sort_order, $sortable) = process_sorting_params('award_type', $current_ordering);

        $header_row = results_header_row($hr, $sortables, 'sort', $sortable . ' ' . $sort_order);

        $result_entries = new Tempcode();

        list($rows, $max_rows) = $this->get_entry_rows(false, $sql_sort);
        foreach ($rows as $row) {
            $edit_url = build_url($url_map + ['id' => $row['id']], '_SELF');

            $fr = [];
            $fr[] = protect_from_escaping(hyperlink(build_url(['page' => 'awards', 'type' => 'award', 'id' => $row['id']], get_module_zone('awards')), get_translated_text($row['a_title']), false, true));
            if (addon_installed('points')) {
                $fr[] = integer_format($row['a_points']);
            }
            $hooks = find_all_hooks('systems', 'content_meta_aware');
            $hook_title = do_lang_tempcode('UNKNOWN');
            foreach (array_keys($hooks) as $hook) {
                if ($hook == $row['a_content_type']) {
                    require_code('content');
                    $hook_object = get_content_object($hook);
                    if ($hook_object === null) {
                        continue;
                    }
                    $hook_info = $hook_object->info();
                    if ($hook_info !== null) {
                        $hook_title = do_lang_tempcode($hook_info['content_type_label']);
                    }
                }
            }
            $fr[] = $hook_title;
            $fr[] = integer_format($GLOBALS['SITE_DB']->query_select_value('award_archive', 'COUNT(*)', ['a_type_id' => $row['id']]));
            $fr[] = protect_from_escaping(hyperlink($edit_url, do_lang_tempcode('EDIT'), false, false, do_lang('EDIT') . ' #' . strval($row['id'])));

            $result_entries->attach(results_entry($fr, true));
        }

        return [results_table(do_lang($this->menu_label), get_param_integer('start', 0), 'start', either_param_integer('max', 20), 'max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order), false];
    }

    /**
     * Get Tempcode for an adding form.
     *
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function get_form_fields_for_add()
    {
        return $this->get_form_fields();
    }

    /**
     * Get Tempcode for adding/editing form.
     *
     * @param  ?AUTO_LINK $id The ID of the award (null: not added yet)
     * @param  SHORT_TEXT $title The title
     * @param  LONG_TEXT $description The description
     * @param  integer $points How many points are given to the awardee
     * @param  ID_TEXT $content_type The content type the award type is for
     * @param  ?BINARY $show_awardee Whether to show the awardee when displaying this award (null: statistical default)
     * @param  integer $update_interval_hours The approximate time in hours between awards (e.g. 168 for a week)
     * @return array A pair: The input fields, Hidden fields
     */
    public function get_form_fields(?int $id = null, string $title = '', string $description = '', int $points = 0, string $content_type = 'download', ?int $show_awardee = null, int $update_interval_hours = 168) : array
    {
        if ($show_awardee === null) {
            $val = $GLOBALS['SITE_DB']->query_select_value('award_types', 'AVG(a_show_awardee)');
            $show_awardee = ($val === null) ? 1 : @intval(round($val));
        }

        $fields = new Tempcode();
        $fields->attach(form_input_line(do_lang_tempcode('TITLE'), do_lang_tempcode('DESCRIPTION_TITLE'), 'title', $title, true));
        $fields->attach(form_input_text_comcode(do_lang_tempcode('DESCRIPTION'), do_lang_tempcode('DESCRIPTION_DESCRIPTION'), 'description', $description, true));
        if (addon_installed('points')) {
            $fields->attach(form_input_integer(do_lang_tempcode('POINTS'), do_lang_tempcode('DESCRIPTION_AWARD_POINTS'), 'points', $points, true));
        }
        $list = new Tempcode();
        $_hooks = [];
        $hooks = find_all_hooks('systems', 'content_meta_aware');
        foreach (array_keys($hooks) as $hook) {
            require_code('content');
            $hook_object = get_content_object($hook);
            if ($hook_object === null) {
                continue;
            }
            $hook_info = $hook_object->info();
            if ($hook_info !== null) {
                $_hooks[$hook] = do_lang_tempcode($hook_info['content_type_label']);
            }
        }
        asort($_hooks);
        foreach ($_hooks as $hook => $hook_title) {
            $list->attach(form_input_list_entry($hook, $hook == $content_type, $hook_title));
        }
        if ($list->is_empty()) {
            inform_exit(do_lang_tempcode('NO_CATEGORIES'));
        }
        $fields->attach(form_input_list(do_lang_tempcode('CONTENT_TYPE'), do_lang_tempcode('DESCRIPTION_CONTENT_TYPE'), 'content_type', $list));
        $fields->attach(form_input_tick(do_lang_tempcode('SHOW_AWARDEE'), do_lang_tempcode('DESCRIPTION_SHOW_AWARDEE'), 'show_awardee', $show_awardee == 1));
        $fields->attach(form_input_integer(do_lang_tempcode('AWARD_UPDATE_TIME_HOURS'), do_lang_tempcode('DESCRIPTION_AWARD_UPDATE_TIME_HOURS'), 'update_interval_hours', $update_interval_hours, true));

        // Permissions
        $fields->attach($this->get_permission_fields(($id === null) ? null : strval($id), do_lang_tempcode('AWARD_PERMISSION_HELP'), false/*We want permissions off by default so we do not say new category ($id === null)*/, do_lang_tempcode('GIVE_AWARD')));

        return [$fields, new Tempcode()];
    }

    /**
     * Standard crud_module list function.
     *
     * @return Tempcode The selection list
     */
    public function create_selection_list_entries() : object
    {
        $_m = $GLOBALS['SITE_DB']->query_select('award_types', ['id', 'a_title']);
        $entries = new Tempcode();
        foreach ($_m as $m) {
            $entries->attach(form_input_list_entry(strval($m['id']), false, get_translated_text($m['a_title'])));
        }

        return $entries;
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function fill_in_edit_form(string $id)
    {
        $m = $GLOBALS['SITE_DB']->query_select('award_types', ['*'], ['id' => intval($id)], '', 1);
        if (!array_key_exists(0, $m)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'award_type'));
        }
        $r = $m[0];

        $fields = $this->get_form_fields(intval($id), get_translated_text($r['a_title']), get_translated_text($r['a_description']), $r['a_points'], $r['a_content_type'], $r['a_show_awardee'], $r['a_update_interval_hours']);

        return $fields;
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return array A pair: The entry added, description about usage
     */
    public function add_actualisation() : array
    {
        $id = add_award_type(post_param_string('title'), post_param_string('description'), post_param_integer('points', 0), post_param_string('content_type'), post_param_integer('show_awardee', 0), post_param_integer('update_interval_hours'));

        $this->set_permissions(strval($id));

        return [strval($id), null];
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return ?Tempcode Description about usage (null: none)
     */
    public function edit_actualisation(string $id) : ?object
    {
        edit_award_type(intval($id), post_param_string('title'), post_param_string('description'), post_param_integer('points', 0), post_param_string('content_type'), post_param_integer('show_awardee', 0), post_param_integer('update_interval_hours'));

        $this->set_permissions($id);

        return null;
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $id The entry being deleted
     */
    public function delete_actualisation(string $id)
    {
        delete_award_type(intval($id));
    }

    /**
     * UI for install/uninstall of predefined content.
     *
     * @return Tempcode The UI
     */
    public function predefined_content() : object
    {
        require_code('content2');
        return predefined_content_changes_ui('awards', $this->title, build_url(['page' => '_SELF', 'type' => '_predefined_content'], '_SELF'));
    }

    /**
     * Actualise install/uninstall of predefined content.
     *
     * @return Tempcode The UI
     */
    public function _predefined_content() : object
    {
        require_code('content2');
        return predefined_content_changes_actualiser('awards', $this->title);
    }
}
