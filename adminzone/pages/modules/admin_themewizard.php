<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    themewizard
 */

/**
 * Module page class.
 */
class Module_admin_themewizard
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Allen Ellis';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('themewizard')) {
            return null;
        }

        $ret = [];

        if (!$be_deferential && !$support_crosslinks) {
            $ret['browse'] = ['THEMEWIZARD', 'menu/adminzone/style/themes/themewizard'];
        }

        $ret['make_logo'] = ['LOGOWIZARD', 'menu/adminzone/style/themes/logowizard'];

        return $ret;
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('themewizard', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');

        require_lang('themes');

        if ($type == 'make_logo' || $type == '_make_logo') {
            //set_helper_panel_text(comcode_lang_string('DOC_LOGOWIZARD'));
        }

        if (($type == 'browse') || ($type == 'actual')) {
            $this->title = get_screen_title('THEMEWIZARD');

            set_helper_panel_tutorial('tut_themes');

            set_helper_panel_text(comcode_lang_string('DOC_THEMEWIZARD'));
        }

        if ($type == 'browse') {
            breadcrumb_set_parents([['_SEARCH:admin_themes', do_lang_tempcode('MANAGE_THEMES')]]);
        }

        if ($type == 'actual') {
            breadcrumb_set_parents([['_SEARCH:admin_themes', do_lang_tempcode('MANAGE_THEMES')], ['_SELF:_SELF', do_lang_tempcode('THEMEWIZARD')]]);

            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        if ($type == 'make_logo') {
            breadcrumb_set_self(do_lang_tempcode('LOGOWIZARD'));

            $this->title = get_screen_title('_LOGOWIZARD', true, [escape_html(integer_format(1)), escape_html(integer_format(3))]);
        }

        if ($type == '_make_logo') {
            breadcrumb_set_parents([['_SELF:_SELF:make_logo', do_lang_tempcode('START')]]);

            $this->title = get_screen_title('_LOGOWIZARD', true, [escape_html(integer_format(3)), escape_html(integer_format(3))]);
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_code('themes2');
        require_code('themewizard');
        require_css('themes_editor');

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->gui();
        }
        if ($type == 'actual') {
            return $this->actual();
        }
        if ($type == 'make_logo') {
            return $this->make_logo();
        }
        if ($type == '_make_logo') {
            return $this->_make_logo();
        }

        return new Tempcode();
    }

    /**
     * UI for Theme Wizard.
     *
     * @return Tempcode The UI
     */
    public function gui() : object
    {
        $post_url = build_url(['page' => '_SELF', 'type' => 'actual'], '_SELF', ['keep_theme_seed' => true, 'keep_theme_dark' => true, 'keep_theme_source' => true, 'keep_theme_algorithm' => true], false, true);
        $text = do_lang_tempcode('THEMEWIZARD_DESCRIBE');
        $submit_name = do_lang_tempcode('PROCEED');

        require_code('form_templates');

        $source_theme = get_param_string('source_theme', 'default');

        $num_available_themes = count(find_all_themes(true));

        if ($num_available_themes == 0) {
            warn_exit(do_lang_tempcode('NO_ENTRIES'));
        }

        $hidden = new Tempcode();
        if ($num_available_themes == 1) {
            $hidden->attach(form_input_hidden('source_theme', $source_theme));
        } else {
            $themes = create_selection_list_themes($source_theme, false, false, 'RELY_FORUMS', false, true);
        }

        $fields = new Tempcode();

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '0373ce292326fa209a6a44d829f547d4', 'SECTION_HIDDEN' => false, 'TITLE' => do_lang_tempcode('PARAMETERS')]));

        require_code('themes2');
        $fields->attach(form_input_colour(do_lang_tempcode('SEED_COLOUR'), do_lang_tempcode('DESCRIPTION_SEED_COLOUR'), 'seed', '#' . preg_replace('/^\#/', '', get_param_string('seed', find_theme_seed('default'))), true));

        if ($num_available_themes != 1) {
            $fields->attach(form_input_list(do_lang_tempcode('SOURCE_THEME'), do_lang_tempcode('DESCRIPTION_SOURCE_THEME'), 'source_theme', $themes, null, true));
        }

        $radios = new Tempcode();
        $radios->attach(form_input_radio_entry('algorithm', 'equations', $source_theme == 'default', do_lang_tempcode('THEMEGEN_ALGORITHM_EQUATIONS')));
        $radios->attach(form_input_radio_entry('algorithm', 'hsv', $source_theme != 'default', do_lang_tempcode('THEMEGEN_ALGORITHM_HSV')));
        $fields->attach(form_input_radio(do_lang_tempcode('THEMEGEN_ALGORITHM'), do_lang_tempcode('DESCRIPTION_THEMEGEN_ALGORITHM'), 'algorithm', $radios, true));

        $fields->attach(form_input_tick(do_lang_tempcode('DARK_THEME'), do_lang_tempcode('DESCRIPTION_DARK_THEME'), 'dark', get_param_integer('dark', 0) == 1));

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', ['_GUID' => '1373ce292326fa209a6a44d829f547d4', 'SECTION_HIDDEN' => false, 'TITLE' => do_lang_tempcode('SETTINGS')]));

        $fields->attach(form_input_codename(do_lang_tempcode('NEW_THEME'), do_lang_tempcode('DESCRIPTION_NAME'), 'name', get_param_string('name', ''), false));

        $fields->attach(form_input_tick(do_lang_tempcode('USE_ON_ZONES'), do_lang_tempcode('DESCRIPTION_USE_ON_ZONES'), 'use_on_all', get_param_integer('use_on_all', 0) == 1));

        require_javascript('themewizard');
        return do_template('FORM_SCREEN', [
            '_GUID' => '98963f4d7ff60744382f937e6cc5acbf',
            'SKIP_WEBSTANDARDS' => true,
            'TITLE' => $this->title,
            'JS_FUNCTION_CALLS' => ['adminThemeWizard'],
            'FIELDS' => $fields,
            'URL' => $post_url,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
            'HIDDEN' => $hidden,
            'PREVIEW' => true,
        ]);
    }

    /**
     * Actualiser for Theme Wizard.
     *
     * @return Tempcode The UI
     */
    public function actual() : object
    {
        $source_theme = post_param_string('source_theme');
        $algorithm = post_param_string('algorithm');
        $seed = preg_replace('/^#/', '', post_param_string('seed'));
        $dark = (post_param_integer('dark', 0) == 1);

        $name = post_param_string('name');
        if ($name == '') {
            $name = null;
        }

        $use_on_all = (post_param_integer('use_on_all', 0) == 1);

        // Checks...

        $back_url = build_url(['page' => '_SELF', 'source_theme' => $source_theme, 'algorithm' => $algorithm, 'seed' => $seed, 'name' => $name, 'dark' => $dark ? 1 : 0, 'use_on_all' => $use_on_all ? 1 : 0], '_SELF');

        $ret = check_themewizard_theme($source_theme, $algorithm, $seed, $dark, $back_url);
        if ($ret !== null) {
            return $ret;
        }

        if ($name !== null) {
            if ((stripos(PHP_OS, 'WIN') === 0) && (version_compare(PHP_VERSION, '7.2', '<'))) { // LEGACY
                // Older versions of PHP on Windows cannot handle utf-8 filenames
                require_code('character_sets');
                $name = transliterate_string($name);
            }

            require_code('type_sanitisation');
            if ((!is_alphanumeric($name)) || (strlen($name) > 40)) {
                return redirect_screen(get_screen_title('ERROR_OCCURRED'), $back_url, do_lang_tempcode('BAD_CODENAME'));
            }

            if ($name == 'default' || $name == 'admin') {
                return redirect_screen(get_screen_title('ERROR_OCCURRED'), $back_url, do_lang_tempcode('ALREADY_EXISTS', escape_html($name)));
            }
        }

        // Create theme...

        if ($name === null) {
            require_code('tar');

            generate_themewizard_theme('_temp_', $source_theme, $algorithm, $seed, $dark, $use_on_all);

            $filename = 'theme-' . $seed . '-' . ($dark ? 'dark' : 'light') . '.zip';

            header('Content-Type: application/octet-stream');
            header('Content-Disposition: attachment; filename="' . escape_header($filename, true) . '"');

            require_code('zip');
            $file_array = [];
            foreach (get_directory_contents(get_file_base() . '/themes/_temp_', 'themes/_temp_', 0) as $subpath) {
                $file_array[] = [
                    'full_path' => get_file_base() . '/' . $subpath,
                    'name' => $subpath,
                ];
            }
            create_zip_file('php://stdout', $file_array);

            require_code('themes3');
            actual_delete_theme('_temp_');

            $GLOBALS['SCREEN_TEMPLATE_CALLED'] = '';
            exit();
        }

        generate_themewizard_theme($name, $source_theme, $algorithm, $seed, $dark, $use_on_all);

        // We're done...

        $message = do_lang_tempcode('THEMEWIZARD_DONE', escape_html('#' . $seed), escape_html($name));

        require_code('templates_donext');
        return do_next_manager(
            $this->title,
            $message,
            [],
            null,
            /* TYPED-ORDERED LIST OF 'LINKS' */
            null, // Add one
            null, // Edit this
            null, // Edit one
            null, // View this
            null, // View archive
            null, // Add one category
            null, // Edit one category
            null, // Edit this category
            null, // View this category
            /* SPECIALLY TYPED 'LINKS' */
            [],
            [],
            [
                ['admin/edit_this', ['admin_themes', ['type' => 'edit_theme', 'theme' => $name], get_module_zone('admin_themes')], do_lang_tempcode('EDIT_THEME')],
                ['menu/adminzone/style/themes/templates', ['admin_themes', ['type' => 'edit_templates', 'theme' => $name], get_module_zone('admin_themes')], do_lang('EDIT_TEMPLATES')],
                ['menu/adminzone/style/themes/theme_images', ['admin_themes', ['type' => 'manage_images', 'theme' => $name], get_module_zone('admin_themes')], do_lang('EDIT_THEME_IMAGES')],
                ['menu/adminzone/style/themes/themes', ['admin_themes', ['type' => 'browse'], get_module_zone('admin_themes')], do_lang('MANAGE_THEMES')],
            ],
            do_lang('THEME')
        );
    }

    /**
     * UI for a logo wizard step (ask for input).
     *
     * @return Tempcode The UI
     */
    public function make_logo() : object
    {
        $post_url = build_url(['page' => '_SELF', 'type' => '_make_logo'], '_SELF');

        $root_theme = $GLOBALS['FORUM_DRIVER']->get_theme('');
        $theme_image_url = build_url(['page' => 'admin_themes', 'type' => 'edit_image', 'id' => 'logo/-logo', 'lang' => user_lang(), 'theme' => $root_theme], get_module_zone('admin_themes'));
        $standalone_theme_image_url = build_url(['page' => 'admin_themes', 'type' => 'edit_image', 'id' => 'logo/standalone_logo', 'lang' => user_lang(), 'theme' => $root_theme], get_module_zone('admin_themes'));
        $text = do_lang_tempcode('LOGOWIZARD_1_DESCRIBE', escape_html($theme_image_url->evaluate()), escape_html($standalone_theme_image_url->evaluate()));

        $submit_name = do_lang_tempcode('PROCEED');

        $default_logos = get_all_image_ids_type('logo/default_logos');
        shuffle($default_logos);
        $default_backgrounds = get_all_image_ids_type('logo/default_backgrounds');
        shuffle($default_backgrounds);

        require_code('form_templates');

        require_lang('config');

        $fields = new Tempcode();
        $fields->attach(form_input_line(do_lang_tempcode('SITE_NAME'), do_lang_tempcode('DESCRIPTION_LOGO_NAME'), 'logo_name', get_option('site_name'), /*intentionally false so that custom font work can be done in a paint tool*/false));
        $fields->attach(form_input_colour(do_lang_tempcode('COLOUR'), '', 'colour', get_theme_option('header_classic_text_colour'), true));
        $fields->attach(form_input_theme_image(do_lang_tempcode('LOGO_THEME_IMAGE'), '', 'logo_theme_image', $default_logos, null, $default_logos[0]));
        $fields->attach(form_input_theme_image(do_lang_tempcode('BACKGROUND_THEME_IMAGE'), '', 'background_theme_image', $default_backgrounds, null, get_theme_option('header_classic_image')));
        require_code('fonts');
        $fonts = find_all_fonts(false, true);
        $default_font = find_default_font();
        $font_choices = new Tempcode();
        require_css('fonts');
        $font_code = '';
        foreach ($fonts as $_font => $font_label) {
            $font = basename($_font);
            $font_choices->attach(form_input_radio_entry('font', $font, $font == $default_font, '<span style="font-family: ' . escape_html($font) . '">' . escape_html($font_label) . '</span>'));
            $font_code .= '
                @font-face {
                    font-family: ' . $font . ';
                    src: url(\'' . addslashes(get_custom_base_url() . '/' . $_font . '.ttf') . '\');
                }
            ';
        }
        $fields->attach(form_input_radio(do_lang_tempcode('FONT'), '', 'font', $font_choices, true));
        attach_to_screen_header(do_template('CSS_NEED_INLINE', ['CODE' => $font_code]));

        // Find the most appropriate theme to edit for
        $theme = $GLOBALS['SITE_DB']->query_select_value_if_there('zones', 'zone_theme', ['zone_name' => 'site']);
        if ($theme === null) { // Just in case the 'site' zone no longer exists
            $theme = $GLOBALS['SITE_DB']->query_select_value('zones', 'zone_theme', ['zone_name' => '']);
        }
        if ($theme == '-1') {
            $theme = preg_replace('#[^' . URL_CONTENT_REGEXP . ']#', '_', get_site_name());
        }
        if (!file_exists(get_custom_file_base() . '/themes/' . $theme)) {
            $theme = 'default';
        }
        require_code('themes2');

        $fields->attach(form_input_list(do_lang_tempcode('THEME'), do_lang_tempcode('DESCRIPTION_LOGOWIZARD_THEME'), 'theme', create_selection_list_themes($theme, false)));

        return do_template('FORM_SCREEN', [
            '_GUID' => '08449c0ae8edf5c0b3510611c9ac9618',
            'SKIP_WEBSTANDARDS' => true,
            'TITLE' => $this->title,
            'FIELDS' => $fields,
            'URL' => $post_url,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
            'HIDDEN' => '',
            'PREVIEW' => true,
        ]);
    }

    /**
     * UI for a logo wizard step (set).
     *
     * @return Tempcode The UI
     */
    public function _make_logo() : object
    {
        $theme = post_param_string('theme');
        $font = post_param_string('font');
        $logo_theme_image = post_param_string('logo_theme_image');
        $background_theme_image = post_param_string('background_theme_image');
        $colour = post_param_string('colour');

        // Do it
        require_code('themes2');
        require_code('themes3');
        require_code('images');
        foreach ([$theme, 'default'] as $logo_save_theme) {
            foreach (['large' => '-logo', 'standalone' => 'standalone_logo', 'small' => 'small_logo', 'small_white' => 'small_white_logo'] as $logo_type => $logo_output_theme_image) {
                $img = generate_logo(post_param_string('logo_name'), $font, $colour, $logo_theme_image, $background_theme_image, false, $logo_save_theme, $logo_type);
                foreach (array_keys(find_all_langs()) as $lang) {
                    if (is_suexec_like()) {
                        $path = 'themes/' . $logo_save_theme . '/images_custom/' . $lang . '/logo/' . $logo_output_theme_image . '.png';
                    } else {
                        $path = 'themes/' . $logo_save_theme . '/images_custom/' . $logo_output_theme_image . '.png';
                    }

                    if (!file_exists(get_custom_file_base() . '/' . dirname($path))) {
                        require_code('files2');
                        make_missing_directory(get_custom_file_base() . '/' . dirname($path), true);
                    }

                    cms_imagesave($img, get_custom_file_base() . '/' . $path) or intelligent_write_error($path);
                    actual_edit_theme_image('logo/' . $logo_output_theme_image, $logo_save_theme, $lang, 'logo/' . $logo_output_theme_image, $path);
                }
                imagedestroy($img);
            }
        }

        // Header config
        require_code('config2');
        set_option('header_classic_image', $background_theme_image);
        set_option('header_classic_text_colour', $colour);

        Self_learning_cache::erase_smart_cache();

        $message = do_lang_tempcode('LOGOWIZARD_3_DESCRIBE', escape_html($theme));
        return inform_screen($this->title, $message);
    }
}
