<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    site_messaging
 */

/**
 * Module page class.
 */
class Module_admin_site_messaging
{
    public $title;

    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Patrick Schmalstig';
        $info['organisation'] = 'PDStig, LLC';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 1;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'site_messaging';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $tables = [
            'site_messages',
        ];
        $GLOBALS['SITE_DB']->drop_table_if_exists($tables);
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('site_messages', [
                'id' => '*AUTO',
                'm_submitter' => 'MEMBER',
                'm_title' => 'SHORT_TEXT',
                'm_message' => 'LONG_TRANS__COMCODE',
                'm_type' => 'SHORT_TEXT', // inform, notice, warn
                'm_start_date_time' => '?TIME',
                'm_end_date_time' => '?TIME',
                'm_validated' => 'BINARY',
            ]);

            $GLOBALS['SITE_DB']->create_table('site_messages_groups', [
                'id' => '*AUTO',
                'message_id' => 'AUTO_LINK',
                'group_id' => '*GROUP',
            ]);
            $GLOBALS['SITE_DB']->create_index('site_messages_groups', 'messagegroups', ['message_id', 'group_id']);

            $GLOBALS['SITE_DB']->create_table('site_messages_pages', [
                'id' => '*AUTO',
                'message_id' => 'AUTO_LINK',
                'page_link' => 'SHORT_TEXT', // Match-keys
            ]);
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('site_messaging')) {
            return null;
        }

        $ret = [
            'browse' => ['SITE_MESSAGING', 'menu/social/chat/chat'], // TODO: change
            'edit' => ['EDIT_SITE_MESSAGES', 'admin/edit'], // TODO: change
            'add' => ['ADD_SITE_MESSAGE', 'admin/add'], // TODO: change
        ];

        return $ret;
    }

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('site_messaging', $error_msg)) {
            return $error_msg;
        }

        set_helper_panel_tutorial('tut_site_messaging');

        $type = get_param_string('type', 'browse');

        require_lang('site_messaging');

        if ($type == 'browse') {
            breadcrumb_set_self(do_lang_tempcode('SITE_MESSAGING'));
            $this->title = get_screen_title('SITE_MESSAGING');
        }
        if ($type == 'edit') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SITE_MESSAGING')]]);
            breadcrumb_set_self(do_lang_tempcode('EDIT_SITE_MESSAGES'));
            $this->title = get_screen_title('EDIT_SITE_MESSAGES');
        }

        if (($type == 'add') || ($type == '_add')) {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SITE_MESSAGING')]]);
            breadcrumb_set_self(do_lang_tempcode('ADD_SITE_MESSAGE'));
            $this->title = get_screen_title('ADD_SITE_MESSAGE');
        }
        if (($type == '_edit') || ($type == '__edit')) {
            $id = get_param_integer('id');
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SITE_MESSAGING')]]);
            breadcrumb_set_self(do_lang_tempcode('_EDIT_SITE_MESSAGE', escape_html(integer_format($id))));
            $this->title = get_screen_title('_EDIT_SITE_MESSAGE', true, [escape_html(integer_format($id))]);
        }
        if (($type == 'delete') || ($type == '_delete')) {
            $id = get_param_integer('id');
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SITE_MESSAGING')]]);
            breadcrumb_set_self(do_lang_tempcode('_DELETE_SITE_MESSAGE', escape_html(integer_format($id))));
            $this->title = get_screen_title('_DELETE_SITE_MESSAGE', true, [escape_html(integer_format($id))]);
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'edit') {
            return $this->edit();
        }

        if ($type == 'add') {
            return $this->add_or_edit();
        }
        if ($type == '_edit') {
            return $this->add_or_edit(get_param_integer('id'));
        }
        if ($type == 'delete') {
            return $this->delete(get_param_integer('id'));
        }

        if ($type == '_add') {
            return $this->_add_or_edit();
        }
        if ($type == '__edit') {
            return $this->_add_or_edit(get_param_integer('id'));
        }
        if ($type == '_delete') {
            return $this->_delete(get_param_integer('id'));
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for after site messaging management.
     *
     * @param  ?Tempcode $title The title (output of get_screen_title) (null: don't use full page)
     * @param  Tempcode $description Some description to show, saying what happened
     * @param  ?AUTO_LINK $id The ID of whatever was just handled (null: N/A)
     * @return Tempcode The UI
     */
    public function _do_next_manager(?object $title, object $description, ?int $id = null) : object
    {
        require_code('templates_donext');

        if ($id === null) {
            return do_next_manager(
                $title,
                $description,
                [],
                null,
                /* TYPED-ORDERED LIST OF 'LINKS' */
                ['_SELF', ['type' => 'add'], '_SELF'], // Add one
                null, // Edit this
                ['_SELF', ['type' => 'edit'], '_SELF'], // Edit one
                null,
                null,
                null,
                null,
                null,
                null,
                [],
                [],
                [],
                null,
                null,
                null,
                null,
                'site_message',
                null
            );
        }

        return do_next_manager(
            $title,
            $description,
            [],
            null,
            /* TYPED-ORDERED LIST OF 'LINKS' */
            ['_SELF', ['type' => 'add'], '_SELF'], // Add one
            ['_SELF', ['type' => '_edit', 'id' => $id], '_SELF'], // Edit this
            ['_SELF', ['type' => 'edit'], '_SELF'], // Edit one
            null,
            null,
            null,
            null,
            null,
            null,
            [],
            [],
            [],
            null,
            null,
            null,
            null,
            'site_message',
            null
        );
    }

    /**
     * The do-next manager for choosing what to do.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        return $this->_do_next_manager(do_lang_tempcode('SITE_MESSAGING'), do_lang_tempcode('DOC_SITE_MESSAGING'));
    }

    /**
     * Get Tempcode for a site message form.
     *
     * @param  ?AUTO_LINK $id The message ID (null: new)
     * @param  SHORT_TEXT $title The title (blank: new)
     * @param  LONG_TEXT $message The message (blank: new)
     * @param  ID_TEXT $type The message type
     * @set inform notice warn
     * @param  ?TIME $start_date_time The start time (null: not set or new)
     * @param  ?TIME $end_date_time The end time (null: not set or new)
     * @param  BINARY $validated Whether this entry is validated
     * @param  array $groups List of groups of which to limit the message (empty: no limit or new)
     * @param  array $page_links List of page links of which to limit the message (empty: no limit or new)
     * @return array A duple: The input fields, hidden fields
     */
    public function get_form_fields(?int $id = null, string $title = '', string $message = '', string $type = 'inform', ?int $start_date_time = null, ?int $end_date_time = null, int $validated = 1, array $groups = [], array $page_links = []) : array
    {
        require_code('form_templates');

        $form = new Tempcode();
        $hidden = new Tempcode();

        $form->attach(form_input_line(do_lang_tempcode('TITLE'), do_lang_tempcode('DESCRIPTION_SITE_MESSAGE_TITLE'), 'title', $title, true));
        $form->attach(form_input_huge_comcode(do_lang_tempcode('MESSAGE'), do_lang_tempcode('DESCRIPTION_SITE_MESSAGE_MESSAGE'), 'message', $message, true, null, 5, '', null, false, true));

        require_lang('decision_tree');
        $type_list = new Tempcode();
        $type_list->attach(form_input_list_entry('inform', $type == 'inform', do_lang('DYNAMIC_NOTICE_inform')));
        $type_list->attach(form_input_list_entry('notice', $type == 'notice', do_lang('DYNAMIC_NOTICE_notice')));
        $type_list->attach(form_input_list_entry('warn', $type == 'warn', do_lang('DYNAMIC_NOTICE_warning')));
        $form->attach(form_input_list(do_lang_tempcode('TYPE'), do_lang_tempcode('DESCRIPTION_SITE_MESSAGE_TYPE'), 'type', $type_list));

        $form->attach(form_input_date(do_lang_tempcode('START'), do_lang_tempcode('DESCRIPTION_SITE_MESSAGE_START'), 'start_date_time', false, ($start_date_time === null), true, $start_date_time));
        $form->attach(form_input_date(do_lang_tempcode('EXPIRY_DATE'), do_lang_tempcode('DESCRIPTION_SITE_MESSAGE_EXPIRY_DATE'), 'end_date_time', false, ($end_date_time === null), true, $end_date_time));

        $_validated = get_param_integer('validated', 0);
        if ($validated == 0) {
            if (($_validated == 1) && (addon_installed('validation'))) {
                $validated = 1;
                attach_message(do_lang_tempcode('WILL_BE_VALIDATED_WHEN_SAVING'));
            }
        } elseif (($validated == 1) && ($_validated == 1) && ($id !== null)) {
            $action_log = build_url(['page' => 'admin_actionlog', 'type' => 'list', 'to_type' => 'VALIDATE_SITE_MESSAGE', 'param_a' => strval($id)]);
            attach_message(do_lang_tempcode('ALREADY_VALIDATED', escape_html($action_log->evaluate())), 'notice');
        }
        if (addon_installed('validation')) {
            $form->attach(form_input_tick(do_lang_tempcode('VALIDATED'), do_lang_tempcode($GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? 'DESCRIPTION_VALIDATED_SIMPLE' : 'DESCRIPTION_VALIDATED', 'site_message'), 'validated', $validated == 1));
        }

        if (get_forum_type() == 'cns') {
            require_code('cns_groups');
            $_list = new Tempcode();
            $_list->attach(form_input_list_entry('', false, do_lang_tempcode('NA_EM')));
            $_list->attach(cns_create_multi_list_usergroups($groups, true));
            $form->attach(form_input_multi_list(do_lang_tempcode('USERGROUPS'), do_lang_tempcode('DESCRIPTION_SITE_MESSAGE_USERGROUPS'), 'groups', $_list));
        }

        $form->attach(form_input_line_multi(do_lang_tempcode('MATCH_KEYS'), do_lang_tempcode('DESCRIPTION_SITE_MESSAGE_MATCH_KEYS'), 'page_links', $page_links, 0));

        return [$form, $hidden];
    }

    /**
     * The UI for browsing a list of site messages to edit.
     *
     * @return Tempcode The UI
     */
    public function edit() : object
    {
        $start = get_param_integer('start', 0);
        $max = get_param_integer('max', 50);

        // Query
        $max_rows = $GLOBALS['SITE_DB']->query_select_value('site_messages', 'COUNT(*)', []);
        $sortables = [
            'id' => do_lang_tempcode('IDENTIFIER'),
            'm_type' => do_lang_tempcode('TYPE'),
            'm_start_date_time' => do_lang_tempcode('START'),
            'm_end_date_time' => do_lang_tempcode('EXPIRY_DATE'),
        ];
        $current_ordering = get_param_string('sort', 'id ASC', INPUT_FILTER_GET_COMPLEX);
        list($sql_sort, $sort_order, $sortable) = process_sorting_params('site_message', $current_ordering);

        $rows = $GLOBALS['SITE_DB']->query_select('site_messages', ['id', 'm_type', 'm_title', 'm_start_date_time', 'm_end_date_time'], [], 'ORDER BY ' . str_replace('r.', '', $sql_sort), $max, $start);

        // Build results table
        $result_entries = new Tempcode();

        require_code('templates_results_table');
        require_code('templates_tooltip');
        require_code('temporal');

        $map = [
            do_lang_tempcode('IDENTIFIER'),
            do_lang_tempcode('TYPE'),
            do_lang_tempcode('TITLE'),
            do_lang_tempcode('START'),
            do_lang_tempcode('EXPIRY_DATE'),
            do_lang_tempcode('ACTIONS'),
        ];
        $header_row = results_header_row($map, $sortables, 'sort', $sortable . ' ' . $sort_order);

        foreach ($rows as $myrow) {
            $start_date_time = ($myrow['m_start_date_time'] !== null) ? get_timezoned_date_time($myrow['m_start_date_time'], false) : do_lang('NA');
            $end_date_time = ($myrow['m_end_date_time'] !== null) ? get_timezoned_date_time($myrow['m_end_date_time'], false) : do_lang('NA');

            $actions = new Tempcode();

            $edit_url = build_url(['page' => '_SELF', 'type' => '_edit', 'id' => $myrow['id']], '_SELF');
            $actions->attach(do_template('COLUMNED_TABLE_ACTION', [
                '_GUID' => 'b382884953dfd3a55579196fbf7b4ab9',
                'NAME' => '#' . strval($myrow['id']),
                'URL' => $edit_url,
                'HIDDEN' => new Tempcode(),
                'ACTION_TITLE' => do_lang_tempcode('EDIT'),
                'ICON' => 'admin/edit',
                'GET' => true,
            ]));

            $delete_url = build_url(['page' => '_SELF', 'type' => 'delete', 'id' => $myrow['id']], '_SELF');
            $actions->attach(do_template('COLUMNED_TABLE_ACTION', [
                '_GUID' => '77e8d13d68eba6189576b13742e2bea0',
                'NAME' => '#' . strval($myrow['id']),
                'URL' => $delete_url,
                'HIDDEN' => new Tempcode(),
                'ACTION_TITLE' => do_lang_tempcode('DELETE'),
                'ICON' => 'admin/delete',
                'GET' => true,
            ]));

            $map = [
                $myrow['id'],
                $myrow['m_type'],
                $myrow['m_title'],
                $start_date_time,
                $end_date_time,
                $actions
            ];

            $result_entries->attach(results_entry($map, true));
        }

        $results_table = results_table(do_lang_tempcode('EDIT_SITE_MESSAGES'), $start, 'start', $max, 'max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order, 'sort', paragraph(do_lang_tempcode('DOC_EDIT_SITE_MESSAGES')));

        $url = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');

        $tpl = do_template('RESULTS_TABLE_SCREEN', [
            '_GUID' => 'd1b97ca99391843a9b5972d3f23e9fee',
            'TITLE' => $this->title,
            'RESULTS_TABLE' => $results_table,
            'FORM' => new Tempcode(),
            'URL' => $url,
            'FILTERS_ROW_B' => new Tempcode(),
            'FILTERS_HIDDEN' => new Tempcode(),
        ]);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * The UI to add or edit a site message.
     *
     * @param  ?AUTO_LINK $id The ID of the message we are editing (null: adding a new one)
     * @return Tempcode The UI
     */
    public function add_or_edit(?int $id = null) : object
    {
        require_lang('zones');

        if ($id !== null) {
            $_row = $GLOBALS['SITE_DB']->query_select('site_messages', ['*'], ['id' => $id]);
            if (($_row === null) || (!array_key_exists(0, $_row))) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
            }
            $row = $_row[0];

            $_groups = $GLOBALS['SITE_DB']->query_select('site_messages_groups', ['group_id'], ['message_id' => $id]);
            $groups = collapse_1d_complexity('group_id', $_groups);

            $_page_links = $GLOBALS['SITE_DB']->query_select('site_messages_pages', ['page_link'], ['message_id' => $id]);
            $page_links = collapse_1d_complexity('page_link', $_page_links);

            list($fields, $hidden) = $this->get_form_fields(
                $id,
                $row['m_title'],
                get_translated_text($row['m_message']),
                $row['m_type'],
                $row['m_start_date_time'],
                $row['m_end_date_time'],
                $row['m_validated'],
                $groups,
                $page_links
            );

            $url = build_url(['page' => '_SELF', 'type' => '__edit', 'id' => $id], '_SELF');
        } else {
            list($fields, $hidden) = $this->get_form_fields();
            $url = build_url(['page' => '_SELF', 'type' => '_add'], '_SELF');
        }

        return do_template('FORM_SCREEN', [
            '_GUID' => 'f4776e14f3e89782c6d11bc6b5d334ff',
            'HIDDEN' => $hidden,
            'TITLE' => $this->title,
            'FIELDS' => $fields,
            'TEXT' => '',
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => do_lang_tempcode('PROCEED'),
            'URL' => $url,
        ]);
    }

    /**
     * The actualiser for adding a new site message.
     *
     * @param  ?AUTO_LINK $id The ID of the site message we are editing (null: we are adding)
     * @return Tempcode The results
     */
    public function _add_or_edit(?int $id = null) : object
    {
        if ($id !== null) {
            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('site_messages', 'id', ['id' => $id]);
            if ($test === null) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
            }
        }

        require_code('temporal');
        require_code('site_messaging2');

        $title = post_param_string('title');
        $message = post_param_string('message');
        $type = post_param_string('type');
        $start_date_time = post_param_date('start_date_time');
        $end_date_time = post_param_date('end_date_time');
        $validated = post_param_integer('validated');

        $groups = [];
        if (isset($_POST['groups'])) {
            if (is_array($_POST['groups'])) {
                $groups = array_map('intval', $_POST['groups']);
            }
        }

        $i = 0;
        $page_links = [];
        do {
            $tmp_name = 'page_links_' . strval($i);
            $_value = post_param_string($tmp_name, null);
            if (!cms_empty_safe($_value)) {
                $page_links[] = $_value;
            }
            $i++;
        } while ($_value !== null);

        if ($id === null) {
            add_site_message($title, $message, $type, $validated, $start_date_time, $end_date_time, $groups, $page_links);
        } else {
            edit_site_message($id, $title, $message, $type, $validated, $start_date_time, $end_date_time, $groups, $page_links);
        }

        $url = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');

        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI to confirm a deletion of a site message.
     *
     * @param  AUTO_LINK $id The ID of the message we are deleting
     * @return Tempcode The UI
     */
    public function delete(int $id) : object
    {
        $_row = $GLOBALS['SITE_DB']->query_select('site_messages', ['*'], ['id' => $id]);
        if (($_row === null) || (!array_key_exists(0, $_row))) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $row = $_row[0];

        $preview = do_lang_tempcode('ARE_YOU_SURE_DELETE_SITE_MESSAGE', escape_html(integer_format($id)), escape_html($row['m_title']));
        return do_template('CONFIRM_SCREEN', [
            '_GUID' => '84c9d126a6806efcbd99bed5c1660d28',
            'TITLE' => $this->title,
            'PREVIEW' => $preview,
            'URL' => build_url(['page' => '_SELF', 'type' => '_delete', 'id' => $id], '_SELF'),
            'FIELDS' => new Tempcode(),
        ]);
    }

    /**
     * The actualiser to delete a site message.
     *
     * @param  AUTO_LINK $id The ID of the message we are deleting
     * @return Tempcode The UI
     */
    public function _delete(int $id) : object
    {
        require_code('site_messaging2');

        delete_site_message($id);

        $url = build_url(['page' => '_SELF', 'type' => 'browse'], '_SELF');

        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }
}
