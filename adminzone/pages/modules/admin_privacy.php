<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_privacy
 */

/**
 * Module page class.
 */
class Module_admin_privacy
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 1;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'core_privacy';
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        return [
            'browse' => ['PRIVACY', 'menu/pages/privacy_policy'],
            'telemetry' => ['PRIVACY', 'menu/pages/privacy_policy'], // TODO: change icon
        ];

    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        require_code('privacy');
        require_lang('privacy');

        $type = get_param_string('type', 'browse');

        switch ($type) {
            case 'browse':
            case '_search':
            case '__search':
                set_helper_panel_text(comcode_lang_string('DOC_GDPR'));
                $this->title = get_screen_title('PRIVACY');
                break;

            case 'telemetry':
                set_helper_panel_tutorial('tut_telemetry');
                $this->title = get_screen_title('TELEMETRY_STATUS');
                break;
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->search();
        }
        if ($type == '_search') {
            return $this->_search();
        }
        if ($type == '__search') {
            return $this->__search();
        }
        if ($type == 'telemetry') {
            return $this->telemetry();
        }

        return new Tempcode();
    }

    /**
     * UI to do a privacy search.
     *
     * @return Tempcode The UI
     */
    public function search() : object
    {
        require_code('form_templates');

        $text = do_lang_tempcode('TEXT_PRIVACY_SEARCH');

        $fields = new Tempcode();

        // Choose search: username / IP / e-mail / other-fields
        $fields->attach(form_input_username(do_lang_tempcode('USERNAME'), '', 'username', '', false, false));
        $fields->attach(form_input_line_multi(do_lang_tempcode('IP_ADDRESS'), '', 'ip_addresses[]', [], 0));
        $fields->attach(form_input_integer(do_lang_tempcode('MEMBER_ID'), '', 'member_id', get_param_integer('member_id', null), false));
        $fields->attach(form_input_email(do_lang_tempcode('EMAIL_ADDRESS'), '', 'email', '', false));
        $fields->attach(form_input_line_multi(do_lang_tempcode('OTHER'), do_lang_tempcode('DESCRIPTION_PRIVACY_OTHER'), 'others[]', [], 0));

        // Choose whether to download or purge (delete/anonymise)
        $radios = new Tempcode();
        $radios->attach(form_input_radio_entry('result_action', 'download', true, do_lang_tempcode('DOWNLOAD')));
        $radios->attach(form_input_radio_entry('result_action', 'purge', false, do_lang_tempcode('PURGE')));
        $radios->attach(form_input_radio_entry('result_action', 'sql', false, 'SQL'));
        $fields->attach(form_input_radio(do_lang_tempcode('ACTION'), '', 'result_action', $radios));

        $hidden = new Tempcode();
        $hidden->attach(form_input_hidden('csrf_token_preserve', '1'));

        $post_url = build_url(['page' => '_SELF', 'type' => '_search'], '_SELF');

        return do_template('FORM_SCREEN', [
            '_GUID' => '2cc407037ec01a8f3483746a22889471',
            'GET' => false,
            'SKIP_WEBSTANDARDS' => true,
            'HIDDEN' => $hidden,
            'TITLE' => $this->title,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => do_lang_tempcode('SEARCH'),
            'FIELDS' => $fields,
            'URL' => $post_url,
        ]);
    }

    /**
     * UI to choose for each table.
     *
     * @return Tempcode The UI
     */
    public function _search() : object
    {
        $username = post_param_string('username', '', INPUT_FILTER_POST_IDENTIFIER);
        $ip_addresses = isset($_POST['ip_addresses']) ? $_POST['ip_addresses'] : [];
        $member_id = either_param_integer('member_id', null);
        $email_address = post_param_string('email', '', INPUT_FILTER_POST_IDENTIFIER);
        $others = isset($_POST['others']) ? $_POST['others'] : [];

        // Error if no search parameters given
        if ((empty($username)) && (empty($ip_addresses)) && (cms_empty_safe($member_id)) && (empty($email_address)) && (empty($others))) {
            warn_exit(do_lang_tempcode('NO_RESULTS')); // Obviously
        }

        fill_in_missing_privacy_criteria($username, $ip_addresses, $member_id, $email_address);

        $action = post_param_string('result_action', 'purge');

        $database_records = [];
        $hook_obs = find_all_hook_obs('systems', 'privacy', 'Hook_privacy_');

        require_code('form_templates');
        $fields = new Tempcode();
        $post_url = build_url(['page' => '_SELF', 'type' => '__search'], '_SELF');

        switch ($action) {
            case 'download':
                $options = [];
                foreach ($hook_obs as $hook_ob) {
                    $details = $hook_ob->info();
                    if ($details !== null) {
                        foreach ($details['database_records'] as $table_name => $table_details) {
                            $pretty_name = do_lang('PRIVACY_PURGE_TABLE_RECORDS', $table_name, strval(0));
                            $db = get_db_for($table_name);
                            $_sql = $hook_ob->get_selection_sql($table_name, $table_details, PRIVACY_METHOD__DOWNLOAD, false, $username, $ip_addresses, $member_id, $email_address, $others);
                            if ($_sql != '') {
                                push_db_scope_check(false);
                                $__sql = 'SELECT COUNT(*) AS search_rows FROM ' . $db->get_table_prefix() . $table_name . $_sql . ';';
                                $rows = $db->query($__sql);
                                pop_db_scope_check();
                                $pretty_name = do_lang('PRIVACY_PURGE_TABLE_RECORDS', $table_name, integer_format($rows[0]['search_rows']));
                            }

                            $options[] = [$pretty_name, $table_name, true, ''];
                        }
                    }
                }

                $fields->attach(form_input_various_ticks($options, '', null, do_lang_tempcode('TABLES'), true));

                $out = do_template('FORM_SCREEN', [
                    '_GUID' => 'a123b73bc4da433ac2e3c3d6d3526bef',
                    'GET' => false,
                    'SKIP_WEBSTANDARDS' => true,
                    'HIDDEN' => build_keep_post_fields(['csrf_token_preserve']),
                    'TITLE' => $this->title,
                    'TEXT' => do_lang_tempcode('TEXT_PRIVACY_DOWNLOAD'),
                    'SUBMIT_ICON' => 'buttons/download',
                    'SUBMIT_NAME' => do_lang_tempcode('DOWNLOAD'),
                    'FIELDS' => $fields,
                    'URL' => $post_url,
                ]);

                break;

            case 'purge':
                foreach ($hook_obs as $hook_ob) {
                    $details = $hook_ob->info();
                    if ($details !== null) {
                        foreach ($details['database_records'] as $table_name => $table_details) {
                            $purge_options = new Tempcode();
                            $purge_options->attach(form_input_list_entry(strval(PRIVACY_METHOD__LEAVE), $table_details['removal_default_handle_method'] == PRIVACY_METHOD__LEAVE, do_lang_tempcode('PRIVACY_METHOD__LEAVE')));
                            if (($table_details['allowed_handle_methods'] & PRIVACY_METHOD__ANONYMISE) != 0) {
                                $purge_options->attach(form_input_list_entry(strval(PRIVACY_METHOD__ANONYMISE), $table_details['removal_default_handle_method'] == PRIVACY_METHOD__ANONYMISE, do_lang_tempcode('PRIVACY_METHOD__ANONYMISE')));
                            }
                            if (($table_details['allowed_handle_methods'] & PRIVACY_METHOD__DELETE) != 0) {
                                $purge_options->attach(form_input_list_entry(strval(PRIVACY_METHOD__DELETE), $table_details['removal_default_handle_method'] == PRIVACY_METHOD__DELETE, do_lang_tempcode('PRIVACY_METHOD__DELETE')));
                            }
                            $fields->attach(form_input_list($table_name, '', $table_name, $purge_options));
                        }
                    }
                }

                $out = do_template('FORM_SCREEN', [
                    '_GUID' => '2cc407037ed31a8f3483746a22889471',
                    'GET' => false,
                    'SKIP_WEBSTANDARDS' => true,
                    'HIDDEN' => build_keep_post_fields(['csrf_token_preserve']),
                    'TITLE' => $this->title,
                    'TEXT' => do_lang_tempcode('TEXT_PRIVACY_PURGE'),
                    'SUBMIT_ICON' => 'admin/delete2',
                    'SUBMIT_NAME' => do_lang_tempcode('PURGE'),
                    'FIELDS' => $fields,
                    'URL' => $post_url,
                ]);

                break;

            case 'sql':
                $sql = new Tempcode();
                $sql->attach(do_lang_tempcode('TEXT_PRIVACY_SQL'));
                foreach ($hook_obs as $hook_ob) {
                    $details = $hook_ob->info();
                    if ($details !== null) {
                        foreach ($details['database_records'] as $table_name => $table_details) {
                            $db = get_db_for($table_name);
                            $__sql = $hook_ob->get_selection_sql($table_name, $table_details, PRIVACY_METHOD__LEAVE, false, $username, $ip_addresses, $member_id, $email_address, $others);
                            if ($__sql != '') {
                                $_sql = 'SELECT * FROM ' . $db->get_table_prefix() . $table_name . $__sql . ';';
                                $sql->attach(paragraph(escape_html($_sql)));
                            }
                        }
                    }
                }

                $out = do_template('FULL_MESSAGE_SCREEN', [
                    '_GUID' => '2cc407037ec01a9f3483746a22889471',
                    'TITLE' => $this->title,
                    'TEXT' => protect_from_escaping($sql),
                ]);

                break;
        }

        return $out;
    }

    /**
     * Initiate privacy task.
     *
     * @return Tempcode The UI
     */
    public function __search() : object
    {
        $username = post_param_string('username', '', INPUT_FILTER_POST_IDENTIFIER);
        $ip_addresses = isset($_POST['ip_addresses']) ? $_POST['ip_addresses'] : [];
        $member_id = post_param_integer('member_id', null);
        $email_address = post_param_string('email', '', INPUT_FILTER_POST_IDENTIFIER);
        $others = isset($_POST['others']) ? $_POST['others'] : [];

        fill_in_missing_privacy_criteria($username, $ip_addresses, $member_id, $email_address);

        $action = post_param_string('result_action', 'download'); // Defaulting to download as it's safer; don't want to unknowingly purge data

        $table_actions = [];
        $hook_obs = find_all_hook_obs('systems', 'privacy', 'Hook_privacy_');
        foreach ($hook_obs as $hook_ob) {
            $details = $hook_ob->info();
            if ($details !== null) {
                foreach ($details['database_records'] as $table_name => $table_details) {
                    if ($action == 'download') {
                        if (post_param_integer($table_name, 0) == 1) {
                            $table_actions[$table_name] = PRIVACY_METHOD__DOWNLOAD;
                        }
                        continue;
                    }

                    $table_actions[$table_name] = post_param_integer($table_name, 0);

                    if (($table_details['allowed_handle_methods'] == PRIVACY_METHOD__ANONYMISE) && ($table_actions[$table_name] == PRIVACY_METHOD__DELETE)) {
                        $table_actions[$table_name] = PRIVACY_METHOD__ANONYMISE;
                    } elseif (($table_details['allowed_handle_methods'] == PRIVACY_METHOD__DELETE) && ($table_actions[$table_name] == PRIVACY_METHOD__ANONYMISE)) {
                        $table_actions[$table_name] = PRIVACY_METHOD__DELETE;
                    }
                }
            }
        }

        switch ($action) {
            case 'download':
                log_it('PERSONAL_DATA_DOWNLOAD', ($member_id === null) ? '' : strval($member_id), json_encode([$username, $ip_addresses, $email_address, $others]));

                require_code('tasks');
                return call_user_func_array__long_task(do_lang('PERSONAL_DATA_DOWNLOAD'), $this->title, 'privacy_download', [$table_actions, $username, $ip_addresses, $member_id, $email_address, $others]);

            case 'purge':
                log_it('PERSONAL_DATA_PURGING', ($member_id === null) ? '' : strval($member_id), json_encode([$username, $ip_addresses, $email_address, $others]));

                require_code('tasks');
                return call_user_func_array__long_task(do_lang('PERSONAL_DATA_PURGING'), $this->title, 'privacy_purge', [$table_actions, $username, $ip_addresses, $member_id, $email_address, $others]);
        }

        return new Tempcode();
    }

    /**
     * The UI for current telemetry status of this site.
     *
     * @return Tempcode The UI
     */
    public function telemetry() : object
    {
        require_lang('privacy');
        require_code('http');

        if (get_option('telemetry') == '0') {
            // Check if we are still registered in the system
            $url = get_brand_base_url() . '/data/endpoint.php/cms_homesite/telemetry?type=is_registered&url=' . rawurlencode(get_base_url());
            $data = cache_and_carry('cms_http_request', [$url, ['timeout' => 6.0, 'trigger_error' => false]], 15, false, false);
            if ($data !== null) {
                list($_result) = $data;
                if ($_result !== null) {
                    $http_result = @json_decode($_result, true);
                    if (($http_result !== false) && ($http_result['success'] === true)) {
                        $final_data = $http_result['response_data'];
                        if (($final_data !== null) && ($final_data['registered'] === true)) {
                            attach_message(do_lang_tempcode('TELEMETRY_STILL_REGISTERED'), 'notice');
                        }
                    }
                }
            }

            return warn_screen($this->title, do_lang_tempcode('TELEMETRY_DISABLED'), false);
        }

        require_code('encryption');

        if (!is_encryption_enabled_telemetry()) {
            return warn_screen($this->title, do_lang_tempcode('TELEMETRY_NOT_AVAILABLE'), false);
        }

        $title = get_screen_title('TELEMETRY_STATUS');

        require_code('temporal');
        require_code('templates_map_table');

        // Prepare request to the homesite
        $__payload = [
            'version' => cms_version_pretty(),
            'website_url' => get_base_url(),
        ];
        $_payload = encrypt_data_site_telemetry(serialize($__payload));
        $payload = json_encode($_payload);
        $post = ['data' => $payload];
        $url = get_brand_base_url() . '/data/endpoint.php/cms_homesite/telemetry?type=get_data';

        // Make the request
        $data = cache_and_carry('cms_http_request', [$url, ['post_params' => $post, 'timeout' => 10.0, 'trigger_error' => false]], 15, false, false);
        if ($data === null) {
            return warn_screen($title, do_lang_tempcode('TELEMETRY_STATUS_ERROR', escape_html(get_brand_base_url())));
        }

        list($_result) = $data;
        if ($_result === null) {
            return warn_screen($title, do_lang_tempcode('TELEMETRY_STATUS_ERROR', escape_html(get_brand_base_url())));
        }

        $http_result = @json_decode($_result, true);
        if (($http_result === false) || ($http_result['success'] === false)) {
            return warn_screen($title, do_lang_tempcode('TELEMETRY_STATUS_ERROR_2', escape_html(get_brand_base_url())));
        }

        $data = $http_result['response_data']['data'];
        if ($data === null) {
            return warn_screen($title, do_lang_tempcode('TELEMETRY_NOT_REGISTERED'));
        }

        $fields = [
            'URL' => $data['website_url'],
            'ADDED' => get_timezoned_date_time($data['add_date_and_time']),
            'NAME' => $data['website_name'],
            'VERSION' => $data['software_version'],
            'CONFIG_TELEMETRY_MAY_FEATURE' => (($data['may_feature'] == 1) ? do_lang('YES') : do_lang('NO')),
            'TELEMETRY_LAST_CHECKED' => (($data['last_checked'] === null) ? do_lang('NA') : get_timezoned_date_time($data['last_checked'])),
            'TELEMETRY_WEBSITE_INSTALLED' => $data['website_installed'],
            'TELEMETRY_ADDONS_INSTALLED' => implode(', ', unserialize($data['addons_installed'])),
            'TELEMETRY_RELAYED_ERRORS' => integer_format($data['relayed_errors']),
        ];

        $stats = $data['latest_stats'];
        if ($stats !== null) {
            $fields['TELEMETRY_STATS_LAST_CHECKED'] = get_timezoned_date_time($stats['date_and_time']);
            $fields['TELEMETRY_STATS_COUNT_MEMBERS'] = integer_format($stats['count_members']);
            $fields['TELEMETRY_STATS_COUNT_DAILY_HITS'] = integer_format($stats['count_daily_hits']);
        } else {
            $fields['TELEMETRY_STATS_LAST_CHECKED'] = do_lang('NA');
        }

        return map_table_screen($title, $fields, true, do_lang_tempcode('TELEMETRY_SUPP'), null, true);
    }
}
