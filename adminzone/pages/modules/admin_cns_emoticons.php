<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_cns
 */

require_code('crud_module');

/**
 * Module page class.
 */
class Module_admin_cns_emoticons extends Standard_crud_module
{
    protected $lang_type = 'EMOTICON';
    protected $select_name = 'EMOTICON';
    protected $orderer = 'e_code';
    protected $array_key = 'e_code';
    protected $non_integer_id = true;
    protected $possibly_some_kind_of_upload = true;
    protected $do_preview = null;
    protected $menu_label = 'EMOTICONS';
    protected $donext_entry_content_type = 'emoticon';
    protected $donext_category_content_type = null;

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (get_forum_type() != 'cns') {
            return null;
        }

        if ($member_id === null) {
            $member_id = get_member();
        }

        $ret = [];

        $ret += [
            'browse' => ['EMOTICONS', 'menu/adminzone/style/emoticons'],
        ];

        $ret += parent::get_entry_points();

        if (has_privilege($member_id, 'mass_import')) {
            $ret += [
                'predefined_content' => ['PREDEFINED_CONTENT', 'admin/import'],
            ];
        }

        return $ret;
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @param  boolean $top_level Whether this is running at the top level, prior to having sub-objects called
     * @param  ?ID_TEXT $type The screen type to consider for metadata purposes (null: read from environment)
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run(bool $top_level = true, ?string $type = null) : ?object
    {
        if (get_forum_type() != 'cns') {
            warn_exit(do_lang_tempcode('NO_CNS'));
        }

        $type = get_param_string('type', 'browse');

        require_lang('cns');
        require_css('cns_admin');

        set_helper_panel_tutorial('tut_emoticons');

        if ($type == 'import') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('EMOTICONS')]]);
        }

        if ($type == '_import') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('EMOTICONS')], ['_SELF:_SELF:import', do_lang_tempcode('IMPORT_EMOTICONS')]]);
        }

        if ($type == 'import' || $type == '_import') {
            $this->title = get_screen_title('IMPORT_EMOTICONS');
        }

        if ($type == 'predefined_content') {
        }

        if ($type == '_predefined_content') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('EMOTICONS')], ['_SELF:_SELF:predefined_content', do_lang_tempcode('PREDEFINED_CONTENT')]]);
            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        if ($type == 'predefined_content' || $type == '_predefined_content') {
            $this->title = get_screen_title('PREDEFINED_CONTENT');
        }

        return parent::pre_run($top_level);
    }

    /**
     * Standard crud_module run_start.
     *
     * @param  ID_TEXT $type The type of module execution
     * @return Tempcode The output of the run
     */
    public function run_start(string $type) : object
    {
        $this->add_one_label = do_lang_tempcode('ADD_EMOTICON');
        $this->edit_this_label = do_lang_tempcode('EDIT_THIS_EMOTICON');
        $this->edit_one_label = do_lang_tempcode('EDIT_EMOTICON');

        require_lang('dearchive');
        require_code('images');
        require_code('uploads');

        cns_require_all_forum_stuff();

        require_code('cns_general_action');
        require_code('cns_general_action2');

        if ($type == 'add') {
            require_javascript('core_cns');
            $this->js_function_calls[] = 'moduleAdminCnsEmoticons';
        }

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'import') {
            return $this->import();
        }
        if ($type == '_import') {
            return $this->_import();
        }
        if ($type == 'predefined_content') {
            return $this->predefined_content();
        }
        if ($type == '_predefined_content') {
            return $this->_predefined_content();
        }
        return new Tempcode();
    }

    /**
     * The do-next manager for before content management.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('EMOTICONS'),
            comcode_lang_string('DOC_EMOTICONS'),
            [
                ['admin/import', ['_SELF', ['type' => 'import'], '_SELF'], do_lang('IMPORT_EMOTICONS')],
                ['admin/add', ['_SELF', ['type' => 'add'], '_SELF'], do_lang('ADD_EMOTICON')],
                ['admin/edit', ['_SELF', ['type' => 'edit'], '_SELF'], do_lang('EDIT_EMOTICON')],
                has_privilege(get_member(), 'mass_import') ? ['admin/install', ['_SELF', ['type' => 'predefined_content'], '_SELF'], do_lang('PREDEFINED_CONTENT')] : null,
            ],
            do_lang('EMOTICONS')
        );
    }

    /**
     * The UI to import in bulk from an archive file.
     *
     * @return Tempcode The UI
     */
    public function import() : object
    {
        if (is_on_multi_site_network()) {
            attach_message(do_lang_tempcode('EDITING_ON_WRONG_MSN'), 'warn');
        }

        $post_url = build_url(['page' => '_SELF', 'type' => '_import', 'uploading' => 1], '_SELF');
        $fields = new Tempcode();
        $fields->attach(form_input_upload_multi(do_lang_tempcode('UPLOAD'), do_lang_tempcode('DESCRIPTION_ARCHIVE_IMAGES', escape_html(str_replace(',', ', ', get_option('valid_images')))), 'file', true, null, null, true, str_replace(' ', '', get_option('valid_images'))));

        $text = paragraph(do_lang_tempcode('IMPORT_EMOTICONS_WARNING'));
        require_code('images');
        $max = floatval(get_max_image_size()) / floatval(1024 * 1024);
        /*if ($max < 1.0) { Ok - this is silly! Emoticons are tiny.
            require_code('files2');
            $text->attach(get_maximum_upload_message($max));
        }*/

        $hidden = build_keep_post_fields();
        $hidden->attach(form_input_hidden('test', '1'));
        handle_max_file_size($hidden);

        return do_template('FORM_SCREEN', [
            '_GUID' => '1910e01ec183392f6b254671dc7050a3',
            'TITLE' => $this->title,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'admin/import',
            'SUBMIT_NAME' => do_lang_tempcode('BATCH_IMPORT_ARCHIVE_CONTENTS'),
            'URL' => $post_url,
            'TEXT' => $text,
            'HIDDEN' => $hidden,
        ]);
    }

    /**
     * The actualiser to import in bulk from an archive file.
     *
     * @return Tempcode The UI
     */
    public function _import() : object
    {
        post_param_string('test'); // To pick up on max file size exceeded errors

        require_code('images');
        is_plupload(true);

        set_mass_import_mode();

        foreach ($_FILES as $attach_name => $__file) {
            $tmp_name = $__file['tmp_name'];
            $file = $__file['name'];

            if (is_image($file, IMAGE_CRITERIA_WEBSAFE, has_privilege(get_member(), 'comcode_dangerous'))) {
                $urls = get_url('', $attach_name, 'themes/default/images_custom');
                $path = $urls[0];
                $this->_import_emoticon($path);
            } else {
                attach_message(do_lang_tempcode('INVALID_FILE_TYPE_VERY_GENERAL', escape_html(get_file_extension($file))), 'warn');
            }
        }

        log_it('IMPORT_EMOTICONS');

        return $this->do_next_manager($this->title, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Import an emoticon.
     *
     * @param  PATH $path Path to the emoticon file, on disk (must be in theme images folder)
     */
    public function _import_emoticon(string $path)
    {
        $emoticon_code = basename($path, '.' . get_file_extension($path));

        if (file_exists(get_file_base() . '/themes/default/images/emoticons/index.html')) {
            $image_code = 'emoticons/' . $emoticon_code;
        } else {
            $image_code = 'cns_emoticons/' . $emoticon_code;
        }
        $url = cms_rawurlrecode('themes/default/images_custom/' . rawurlencode(basename($path)));

        // Images cleanup pipeline
        $full_path = get_custom_file_base() . '/' . $path;
        handle_images_cleanup_pipeline($full_path);

        $GLOBALS['SITE_DB']->query_delete('theme_images', ['id' => $image_code]);
        $GLOBALS['SITE_DB']->query_insert('theme_images', ['id' => $image_code, 'theme' => 'default', 'url' => $url, 'lang' => get_site_default_lang()]);
        $GLOBALS['FORUM_DB']->query_delete('f_emoticons', ['e_code' => ':' . $emoticon_code . ':'], '', 1);
        $GLOBALS['FORUM_DB']->query_insert('f_emoticons', [
            'e_code' => ':' . $emoticon_code . ':',
            'e_theme_img_code' => $image_code,
            'e_relevance_level' => 2,
            'e_use_topics' => 0,
            'e_is_special' => 0,
        ]);

        Self_learning_cache::erase_smart_cache();
    }

    /**
     * Get Tempcode for an adding form.
     *
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function get_form_fields_for_add()
    {
        return $this->get_form_fields();
    }

    /**
     * Get Tempcode for a Post Template adding/editing form.
     *
     * @param  SHORT_TEXT $code The emoticon code
     * @param  SHORT_TEXT $theme_img_code The theme image code
     * @param  integer $relevance_level The relevance level of the emoticon
     * @range  0 4
     * @param  BINARY $use_topics Whether the emoticon is usable as a topic emoticon
     * @param  BINARY $is_special Whether this may only be used by privileged members
     * @return array A pair: The input fields, Hidden fields
     */
    public function get_form_fields(string $code = ':-]', string $theme_img_code = '', int $relevance_level = 1, int $use_topics = 1, int $is_special = 0) : array
    {
        if (is_on_multi_site_network()) {
            attach_message(do_lang_tempcode('EDITING_ON_WRONG_MSN'), 'warn');
        }

        $fields = new Tempcode();
        $hidden = new Tempcode();

        $fields->attach(form_input_line(do_lang_tempcode('CODE'), do_lang_tempcode('DESCRIPTION_EMOTICON_CODE'), 'code', $code, true));

        require_code('themes2');
        $ids = get_all_image_ids_type('cns_emoticons', false, $GLOBALS['FORUM_DB']);

        if (get_base_url() == get_forum_base_url()) {
            $set_name = 'image';
            $required = true;
            $set_title = do_lang_tempcode('IMAGE');
            $field_set = (empty($ids)) ? new Tempcode() : alternate_fields_set__start($set_name);

            require_code('images');
            $field_set->attach(form_input_upload(do_lang_tempcode('UPLOAD'), '', 'file', $required, null, null, true, get_allowed_image_file_types(IMAGE_CRITERIA_WEBSAFE)));

            $image_chooser_field = form_input_theme_image(do_lang_tempcode('STOCK'), '', 'theme_img_code', $ids, null, $theme_img_code, null, false, $GLOBALS['FORUM_DB']);
            $field_set->attach($image_chooser_field);

            $fields->attach(alternate_fields_set__end($set_name, $set_title, '', $field_set, $required));

            handle_max_file_size($hidden, 'image');
        } else {
            if (empty($ids)) {
                warn_exit(do_lang_tempcode('NO_SELECTABLE_THEME_IMAGES_MSN', 'cns_emoticons'));
            }

            $image_chooser_field = form_input_theme_image(do_lang_tempcode('STOCK'), '', 'theme_img_code', $ids, null, $theme_img_code, null, true, $GLOBALS['FORUM_DB']);
            $fields->attach($image_chooser_field);
        }

        $list = new Tempcode();
        for ($i = 0; $i <= 4; $i++) {
            $list->attach(form_input_list_entry(strval($i), $i == $relevance_level, do_lang_tempcode('EMOTICON_RELEVANCE_LEVEL_' . strval($i))));
        }
        $fields->attach(form_input_list(do_lang_tempcode('RELEVANCE_LEVEL'), do_lang_tempcode('DESCRIPTION_RELEVANCE_LEVEL'), 'relevance_level', $list));

        $fields->attach(form_input_tick(do_lang_tempcode('USE_TOPICS'), do_lang_tempcode('DESCRIPTION_USE_TOPICS'), 'use_topics', $use_topics == 1));
        $fields->attach(form_input_tick(do_lang_tempcode('EMOTICON_IS_SPECIAL'), do_lang_tempcode('DESCRIPTION_EMOTICON_IS_SPECIAL'), 'is_special', $is_special == 1));

        return [$fields, $hidden];
    }

    /**
     * Standard crud_module radio-list function.
     *
     * @return Tempcode The selection list
     */
    public function create_selection_list_radio_entries() : object
    {
        $_m = $GLOBALS['FORUM_DB']->query_select('f_emoticons', ['e_code', 'e_theme_img_code']);
        $entries = new Tempcode();
        $first = true;
        foreach ($_m as $m) {
            $url = find_theme_image($m['e_theme_img_code'], true);

            if ($url == '') { // Automatic cleanup of ones deleted from disk
                $GLOBALS['FORUM_DB']->query_delete('f_emoticons', ['e_code' => $m['e_code']], '', 1);
                continue;
            }

            $entries->attach(do_template('FORM_SCREEN_INPUT_THEME_IMAGE_ENTRY', [
                '_GUID' => 'f7f64637d1c4984881f7acc68c2fe6c7',
                'PRETTY' => $m['e_code'],
                'CHECKED' => $first,
                'NAME' => 'id',
                'CODE' => $m['e_code'],
                'URL' => $url,
                'VECTOR' => (substr($url, -4) == '.svg'),
            ]));
            $first = false;
        }

        return $entries;
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function fill_in_edit_form(string $id)
    {
        $m = $GLOBALS['FORUM_DB']->query_select('f_emoticons', ['*'], ['e_code' => $id], '', 1);
        if (!array_key_exists(0, $m)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }
        $r = $m[0];

        $ret = $this->get_form_fields($r['e_code'], $r['e_theme_img_code'], $r['e_relevance_level'], $r['e_use_topics'], $r['e_is_special']);

        return $ret;
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return array A pair: The entry added, description about usage
     */
    public function add_actualisation() : array
    {
        require_code('themes2');

        $theme_img_code = post_param_theme_img_code('cns_emoticons', true, 'file', 'theme_img_code', $GLOBALS['FORUM_DB']);

        cns_make_emoticon(post_param_string('code'), $theme_img_code, post_param_integer('relevance_level'), post_param_integer('use_topics', 0), post_param_integer('is_special', 0));

        return [post_param_string('code'), null];
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return ?Tempcode Description about usage (null: none)
     */
    public function edit_actualisation(string $id) : ?object
    {
        require_code('themes2');

        $theme_img_code = post_param_theme_img_code('cns_emoticons', true, 'file', 'theme_img_code', $GLOBALS['FORUM_DB']);

        cns_edit_emoticon($id, post_param_string('code'), $theme_img_code, post_param_integer('relevance_level'), post_param_integer('use_topics', 0), post_param_integer('is_special', 0));

        $this->new_id = post_param_string('code');

        return null;
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $id The entry being deleted
     */
    public function delete_actualisation(string $id)
    {
        cns_delete_emoticon($id);
    }

    /**
     * UI for install/uninstall of predefined content.
     *
     * @return Tempcode The UI
     */
    public function predefined_content() : object
    {
        require_code('content2');
        return predefined_content_changes_ui('core_cns', $this->title, build_url(['page' => '_SELF', 'type' => '_predefined_content'], '_SELF'), [], ['have_default_full_emoticon_set']);
    }

    /**
     * Actualise install/uninstall of predefined content.
     *
     * @return Tempcode The UI
     */
    public function _predefined_content() : object
    {
        require_code('content2');
        return predefined_content_changes_actualiser('core_cns', $this->title, [], ['have_default_full_emoticon_set']);
    }
}
