<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2020

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    redirects_editor
 */

/**
 * Module page class.
 */
class Module_admin_redirects
{
    protected const URL_REDIRECT_HTACCESS_REF_LINE = "\n# RewriteRule somerule sometarget (leave this comment here!)\n";
    protected const URL_REDIRECT_HTACCESS_COMMENT_LINE = '#^\#(.*)$#';
    protected const URL_REDIRECT_HTACCESS_REDIRECT_LINE = '#^RewriteRule ([^ ]+) ([^ ]+) \[L,R(,NC)?(,QSA)?(,QSD)?\]$#';
    protected const URL_REDIRECT_HTACCESS_QUERY_STRING_LINE = '#^RewriteCond %\{QUERY_STRING\} \^(.*)$#';

    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info()
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 4;
        $info['locked'] = true;
        $info['update_require_upgrade'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('redirects');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install($upgrade_from = null, $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('redirects', [
                'r_from_page' => '*ID_TEXT',
                'r_from_zone' => '*ID_TEXT',
                'r_to_page' => 'ID_TEXT',
                'r_to_zone' => 'ID_TEXT',
                'r_is_transparent' => 'BINARY',
            ]);

            $GLOBALS['SITE_DB']->query_insert('redirects', ['r_from_page' => 'rules', 'r_from_zone' => 'site', 'r_to_page' => 'rules', 'r_to_zone' => '', 'r_is_transparent' => 1]);
            $GLOBALS['SITE_DB']->query_insert('redirects', ['r_from_page' => 'rules', 'r_from_zone' => 'forum', 'r_to_page' => 'rules', 'r_to_zone' => '', 'r_is_transparent' => 1]);
        }

        if (($upgrade_from === null) || ($upgrade_from < 3)) {
            $zones = find_all_zones();
            if (!in_array('site', $zones)) {
                $zones[] = 'site';
            }
            foreach ($zones as $zone) {
                if ($zone == 'adminzone' || $zone == 'cms') {
                    continue;
                }

                if (!file_exists(get_file_base() . '/' . $zone . (($zone == '') ? '' : '/') . 'pages/comcode/' . fallback_lang() . '/panel_top.txt')) {
                    $GLOBALS['SITE_DB']->query_insert('redirects', ['r_from_page' => 'panel_top', 'r_from_zone' => $zone, 'r_to_page' => 'panel_top', 'r_to_zone' => '', 'r_is_transparent' => 1]);
                }
            }
        }

        if (($upgrade_from === null) || ($upgrade_from < 4)) {
            $zones = find_all_zones();
            if (!in_array('site', $zones)) {
                $zones[] = 'site';
            }
            foreach ($zones as $zone) {
                if ($zone == 'adminzone' || $zone == 'cms') {
                    continue;
                }

                if (!file_exists(get_file_base() . '/' . $zone . (($zone == '') ? '' : '/') . 'pages/comcode/' . fallback_lang() . '/panel_bottom.txt')) {
                    $GLOBALS['SITE_DB']->query_insert('redirects', ['r_from_page' => 'panel_bottom', 'r_from_zone' => $zone, 'r_to_page' => 'panel_bottom', 'r_to_zone' => '', 'r_is_transparent' => 1], false, true); // errors suppressed in case already there
                }
            }
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points($check_perms = true, $member_id = null, $support_crosslinks = true, $be_deferential = false)
    {
        if (!addon_installed('redirects_editor')) {
            return null;
        }

        return [
            'browse' => ['REDIRECTS', 'menu/adminzone/structure/redirects'],
            'page' => ['PAGE_REDIRECTS', 'content_types/page'],
            'url' => ['URL_REDIRECTS', 'buttons/redirect'],
        ];
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run()
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('redirects_editor', $error_msg)) {
            return $error_msg;
        }

        require_code('form_templates'); // Needs to run high so that the anti-click-hacking header is sent

        $type = get_param_string('type', 'browse');

        require_lang('redirects');
        require_css('redirects_editor');

        set_helper_panel_tutorial('tut_subcom');

        if ($type == 'browse') {
            $this->title = get_screen_title('REDIRECTS');
        }

        if (($type == 'page') || ($type == '_page')) {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('REDIRECTS')]]);

            $this->title = get_screen_title('PAGE_REDIRECTS');

            set_helper_panel_text(comcode_lang_string('DOC_PAGE_REDIRECTS'));
        }

        if (($type == 'url') || ($type == '_url')) {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('REDIRECTS')]]);

            $this->title = get_screen_title('URL_REDIRECTS');

            set_helper_panel_text(comcode_lang_string('DOC_URL_REDIRECTS'));
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run()
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }

        if ($type == 'page') {
            return $this->page();
        }
        if ($type == '_page') {
            return $this->_page();
        }

        if ($type == 'url') {
            return $this->url();
        }
        if ($type == '_url') {
            return $this->_url();
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for before content management.
     *
     * @return Tempcode The UI
     */
    public function browse()
    {
        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('REDIRECTS'),
            comcode_lang_string('DOC_REDIRECTS'),
            [
                ['content_types/page', ['_SELF', ['type' => 'page'], '_SELF'], do_lang('PAGE_REDIRECTS')],
                ['buttons/redirect', ['_SELF', ['type' => 'url'], '_SELF'], do_lang('URL_REDIRECTS')],
            ],
            do_lang('REDIRECTS')
        );
    }

    /**
     * The UI for managing Page Redirects.
     *
     * @return Tempcode The UI
     */
    public function page()
    {
        $post_url = build_url(['page' => '_SELF', 'type' => '_page'], '_SELF');
        $existing = new Tempcode();
        $rows = $GLOBALS['SITE_DB']->query_select('redirects', ['*']);
        $num_zones = $GLOBALS['SITE_DB']->query_select_value('zones', 'COUNT(*)');
        require_code('zones3');
        foreach ($rows as $i => $row) {
            if ($num_zones > 50) {
                $from_zones = new Tempcode();
            } else {
                $from_zones = create_selection_list_zones($row['r_from_zone']);
                $from_zones->attach(form_input_list_entry('*', $row['r_from_zone'] == '*', do_lang_tempcode('_ALL')));
            }
            $to_zones = ($num_zones > 50) ? new Tempcode() : create_selection_list_zones($row['r_to_zone']);
            $existing->attach(do_template('PAGE_REDIRECT_ROW', [
                '_GUID' => 'fd1ea392a98e588bb1f553464d315ef0',
                'I' => strval($i),
                'FROM_ZONE' => $row['r_from_zone'],
                'TO_ZONE' => $row['r_to_zone'],
                'TO_ZONES' => $to_zones,
                'FROM_ZONES' => $from_zones,
                'FROM_PAGE' => $row['r_from_page'],
                'TO_PAGE' => $row['r_to_page'],
                'IS_TRANSPARENT' => $row['r_is_transparent'] == 1,
            ]));
        }
        $default = explode(':', get_param_string('page_link', '*:'), 2);
        if (count($default) == 1) {
            $default = ['', $default[0]];
        }
        if ($num_zones > 50) {
            $to_zones = new Tempcode();
            $from_zones = new Tempcode();
        } else {
            $zones = create_selection_list_zones($default[0]);
            $to_zones = new Tempcode();
            $to_zones->attach($zones);
            $from_zones = new Tempcode();
            $from_zones->attach($zones);
            $from_zones->attach(form_input_list_entry('*', $default[0] == '*', do_lang_tempcode('_ALL')));
        }
        $new = do_template('PAGE_REDIRECT_ROW', [
            '_GUID' => 'cbf0eb4f745a6bf7b10e1f7d6d95d10f',
            'I' => 'new',
            'FROM_ZONE' => '',
            'TO_ZONE' => '',
            'TO_ZONES' => $to_zones,
            'FROM_ZONES' => $from_zones,
            'FROM_PAGE' => $default[1],
            'TO_PAGE' => '',
            'IS_TRANSPARENT' => false,
        ]);

        list($warning_details, $ping_url) = handle_conflict_resolution();

        $notes = get_value('notes', null, true);
        if ($notes === null) {
            $notes = '';
        }

        return do_template('PAGE_REDIRECT_SCREEN', [
            '_GUID' => '2a9add73f6dd0b8288c0c84fc7242763',
            'NOTES' => $notes,
            'PING_URL' => $ping_url,
            'WARNING_DETAILS' => $warning_details,
            'TITLE' => $this->title,
            'EXISTING' => $existing,
            'NEW' => $new,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser for managing Page Redirects.
     *
     * @return Tempcode The UI
     */
    public function _page()
    {
        $found = [];
        foreach ($_POST as $key => $val) {
            if (!is_string($val)) {
                continue;
            }

            if ((substr($key, 0, 10) == 'from_page_') && ($val != '')) {
                $their_i = array_search($val, $found);
                $i = substr($key, 10);
                if (($their_i !== false) && (post_param_string('from_zone_' . $i) == post_param_string('from_zone_' . strval($their_i)))) {
                    warn_exit(do_lang_tempcode('DUPLICATE_PAGE_REDIRECT', post_param_string('from_zone_' . $i) . ':' . $val));
                }
                $found[$i] = $val;
            }
        }

        $GLOBALS['SITE_DB']->query_delete('redirects');
        erase_persistent_cache();

        foreach ($found as $i => $val) {
            if (!is_string($i)) {
                $i = strval($i);
            }

            if ($val != '') {
                $GLOBALS['SITE_DB']->query_insert('redirects', [
                    'r_from_page' => post_param_string('from_page_' . $i),
                    'r_from_zone' => post_param_string('from_zone_' . $i),
                    'r_to_page' => post_param_string('to_page_' . $i),
                    'r_to_zone' => post_param_string('to_zone_' . $i),
                    'r_is_transparent' => post_param_integer('is_transparent_' . $i, 0),
                ], false, true); // Avoid problem when same key entered twice
            }
        }

        require_code('caches3');
        erase_block_cache();

        log_it('SET_PAGE_REDIRECTS');

        // Personal notes
        if (post_param_string('notes', null) !== null) {
            $notes = post_param_string('notes');
            set_value('notes', $notes, true);
        }

        // Redirect them back to editing screen
        $url = build_url(['page' => '_SELF', 'type' => 'page'], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS_SAVE'));
    }

    /**
     * See if the URL Redirects feature is available.
     *
     * @return array A pair: Whether our redirect rules start in the file, the contents of the file
     */
    protected function check_url_redirect_availability()
    {
        if (!file_exists(get_file_base() . '/.htaccess')) {
            warn_exit(do_lang_tempcode('URL_REDIRECT_ERROR_MISSING_HTACCESS'));
        }

        if (!cms_is_writable(get_file_base() . '/.htaccess')) {
            warn_exit(do_lang_tempcode('URL_REDIRECT_ERROR_UNWRITABLE_HTACCESS'));
        }

        $c = cms_file_get_contents_safe(get_file_base() . '/.htaccess', FILE_READ_LOCK);
        $eng_enable_point = stripos($c, 'RewriteEngine on');
        $ref_point = strpos($c, Module_admin_redirects::URL_REDIRECT_HTACCESS_REF_LINE);
        if (($eng_enable_point === false) || ($ref_point === false)) {
            warn_exit(do_lang_tempcode('URL_REDIRECT_ERROR_CORRUPT_HTACCESS'));
        }

        $ref_point_end = $ref_point + strlen(Module_admin_redirects::URL_REDIRECT_HTACCESS_REF_LINE);

        return [$ref_point_end, $c];
    }

    /**
     * The UI for managing URL Redirects.
     *
     * @return Tempcode The UI
     */
    public function url()
    {
        // Run some basic checks...

        list($ref_point_end, $c) = $this->check_url_redirect_availability();

        if (substr($_SERVER['SERVER_SOFTWARE'], 0, 6) != 'Apache') {
            attach_message(do_lang_tempcode('URL_REDIRECT_ERROR_NOT_APACHE'), 'warn');
        }

        // Read in existing redirects...

        $c = substr($c, $ref_point_end);
        $c_lines = explode("\n", $c);
        $redirects = [];
        $query_string = '';
        $note = '';
        foreach ($c_lines as $c_line) {
            $matches = [];
            if (preg_match(Module_admin_redirects::URL_REDIRECT_HTACCESS_COMMENT_LINE, $c_line, $matches) != 0) {
                $note = $matches[1];
            } elseif (preg_match(Module_admin_redirects::URL_REDIRECT_HTACCESS_REDIRECT_LINE, $c_line, $matches) != 0) {
                $from = $matches[1];
                $to = $matches[2];
                //$case_insensitive = ($matches[3] != ''); Not used
                //$query_string_append = ($matches[4] != ''); Not used
                $redirects[] = [$from, $to, $note, $query_string];
                $note = '';
                $query_string = '';
            } elseif (preg_match(Module_admin_redirects::URL_REDIRECT_HTACCESS_QUERY_STRING_LINE, $c_line, $matches) != 0) {
                $query_string = rtrim($matches[1], '$');
            } else {
                break;
            }
        }

        // Editing UI...

        $post_url = build_url(['page' => '_SELF', 'type' => '_url'], '_SELF');
        $existing = new Tempcode();
        require_code('zones3');
        foreach ($redirects as $i => $row) {
            list($_from, $to, $note, $query_string) = $row;

            if (substr($_from, 0, 1) == '^') {
                $_from = substr($_from, 1);
            }
            if (substr($_from, -3) == '.*$') {
                $type = 'prefix';
                $_from = substr($_from, 0, strlen($_from) - 3);
            } elseif (substr($_from, -5) == '(.*)$') {
                $type = 'prefix_with_append';
                $_from = substr($_from, 0, strlen($_from) - 5);
                if (substr($to, -2) == '$1') {
                    $to = substr($to, 0, strlen($to) - 2);
                }
            } elseif (substr($_from, -1) == '$') {
                $type = 'full';
                $_from = substr($_from, 0, strlen($_from) - 1);
                if (substr($_from, -2) == '/?') {
                    $_from = substr($_from, 0, strlen($_from) - 2);
                }
            } else {
                $type = 'full'; // Not how we write it, but tolerate this
                if (substr($_from, -2) == '/?') {
                    $_from = substr($_from, 0, strlen($_from) - 2);
                }
            }
            $from = $this->preg_unquote($_from);

            if ($query_string != '') {
                $from .= '?' . $this->preg_unquote($query_string);
            }

            $from = get_base_url() . '/' . $from;
            if (url_is_local($to)) {
                $path = parse_url(get_base_url(), PHP_URL_PATH);
                $to = get_base_url() . $path . (($path == '') ? '/' : '') . $to;
            }

            $existing->attach(do_template('URL_REDIRECT_ROW', [
                '_GUID' => 'fd4354115895533a465f99680edc64ad',
                'I' => strval($i),
                'FROM' => $from,
                'TO' => $to,
                'NOTE' => $note,
                'TYPE' => $type,
            ]));
        }
        $new = do_template('URL_REDIRECT_ROW', [
            '_GUID' => '1930de7a52cade24a50ea80b8b97cee2',
            'I' => 'new',
            'FROM' => '',
            'TO' => '',
            'NOTE' => '',
            'TYPE' => 'full',
        ]);

        require_code('form_templates');
        list($warning_details, $ping_url) = handle_conflict_resolution();

        return do_template('URL_REDIRECT_SCREEN', [
            '_GUID' => '6529031253fcc3aceb66e38d79905cd4',
            'PING_URL' => $ping_url,
            'WARNING_DETAILS' => $warning_details,
            'TITLE' => $this->title,
            'EXISTING' => $existing,
            'NEW' => $new,
            'URL' => $post_url,
        ]);
    }

    /**
     * Removing regular expression quoting.
     *
     * @param  string $in Quoted string
     * @return string Unquoted string
     */
    protected function preg_unquote($in)
    {
        $reps = [
            '\\.'  => '.',
            '\\\\' => '\\',
            '\\+'  => '+',
            '\\*'  => '*',
            '\\?'  => '?',
            '\\['  => '[',
            '\\^'  => '^',
            '\\]'  => ']',
            '\\$'  => '$',
            '\\('  => '(',
            '\\)'  => ')',
            '\\{'  => '{',
            '\\}'  => '}',
            '\\='  => '=',
            '\\!'  => '!',
            '\\<'  => '<',
            '\\>'  => '>',
            '\\|'  => '|',
            '\\:'  => ':',
            '\\-'  => '-',
        ];
        return strtr($in, $reps);
    }

    /**
     * The actualiser for managing URL Redirects.
     *
     * @return Tempcode The UI
     */
    public function _url()
    {
        list($ref_point_end, $c) = $this->check_url_redirect_availability();

        // Read in new input...

        $found = [];
        foreach ($_POST as $key => $val) {
            if (!is_string($val)) {
                continue;
            }

            if (substr($key, 0, 5) == 'from_') {
                $i = substr($key, 5);
                $from = $val;
                $to = post_param_string('to_' . $i);
                $note = post_param_string('note_' . $i);
                $type = post_param_string('type_' . $i);

                $from = trim(str_replace("\n", ' ', $from));
                $to = trim(str_replace("\n", ' ', $to));
                $note = trim(str_replace("\n", ' ', $note));

                if (($from != '') && ($to != '')) {
                    $found[$i] = [$from, $to, $type, $note];
                }
            }
        }

        // Load up .htaccess parts to re-save...

        $c_beginning = substr($c, 0, $ref_point_end);
        $c = substr($c, $ref_point_end);
        $c_lines = explode("\n", $c);
        $redirects = [];
        $len_passed = 0;
        foreach ($c_lines as $c_line) {
            $matches = [];
            if (
                (preg_match(Module_admin_redirects::URL_REDIRECT_HTACCESS_COMMENT_LINE, $c_line, $matches) != 0) ||
                (preg_match(Module_admin_redirects::URL_REDIRECT_HTACCESS_REDIRECT_LINE, $c_line, $matches) != 0) ||
                (preg_match(Module_admin_redirects::URL_REDIRECT_HTACCESS_QUERY_STRING_LINE, $c_line, $matches) != 0)
            ) {
                $len_passed += strlen($c_line) + 1;
            } else {
                break;
            }
        }
        $c_ending = substr($c, $len_passed);

        // Put together...

        $out = $c_beginning;
        foreach ($found as $parts) {
            list($from, $to, $type, $note) = $parts;

            if ($note != '') {
                $out .= '# ' . $note . "\n";
            }

            if (!url_is_local($from)) {
                $expected_prefix = get_base_url() . '/';
                $prefix = substr($from, 0, strlen($expected_prefix));
                if ($prefix != $expected_prefix) {
                    warn_exit(do_lang_tempcode('URL_REDIRECT_ERROR_BAD_BASE_URL', escape_html($expected_prefix)));
                }
                $from = substr($from, strlen($expected_prefix));
            }

            $qs_parts = explode('?', $from, 2);

            $_from = '^';
            $_from .= preg_quote($qs_parts[0]);
            switch ($type) {
                case 'full':
                    $_from .= '/?';
                    $_from .= '$';
                    break;
                case 'prefix':
                    $_from .= '.*$';
                    break;
                case 'prefix_with_append':
                    $_from .= '(.*)$';
                    $to .= '$1';
                    break;
            }

            if (url_is_local($to)) {
                $to = get_base_url() . ((substr($to, 0, 1) == '/') ? '' : '/') . $to;
            }

            $rewrite_rule_line = 'RewriteRule ';
            $rewrite_rule_line .= $_from;
            $rewrite_rule_line .= ' ';
            $rewrite_rule_line .= $to;
            $rewrite_rule_line .= ' ';
            $rewrite_rule_line .= '[L,R';
            $rewrite_rule_line .= ',NC';
            if (count($qs_parts) == 1) {
                $rewrite_rule_line .= ',QSA';
            } else {
                $rewrite_rule_line .= ($type == 'prefix_with_append') ? ',QSA'/*imperfect as all is copied but best we can do*/ : ',QSD';

                $_from2 = preg_quote($qs_parts[1]);
                if ($type == 'full') {
                    $_from2 .= '$';
                }
                $out .= 'RewriteCond %{QUERY_STRING} ^' . $_from2 . "\n";
            }
            $rewrite_rule_line .= ']';
            $out .= $rewrite_rule_line . "\n";
        }
        $out .= $c_ending;

        // Save...

        require_code('files');
        cms_file_put_contents_safe(get_file_base() . '/.htaccess', $out, FILE_WRITE_FIX_PERMISSIONS | FILE_WRITE_SYNC_FILE);

        // ---

        log_it('SET_URL_REDIRECTS');

        // Redirect them back to editing screen
        $url = build_url(['page' => '_SELF', 'type' => 'url'], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS_SAVE'));
    }
}
