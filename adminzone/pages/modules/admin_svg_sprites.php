<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2021

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_themeing
 */

/**
 * Module page class.
 */
class Module_admin_svg_sprites
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Salman Abbas';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 1;
        $info['locked'] = true;
        $info['update_require_upgrade'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        $ret = [
            'browse' => ['SVG_SPRITES', 'admin/tool'],
            'preview_svg_sprite' => ['PREVIEW_SPRITE', 'admin/view_this'],
            'generate_svg_sprite' => ['GENERATE_SPRITE', 'admin/tool'],
        ];

        return $ret;
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $type = get_param_string('type', 'browse');

        require_lang('themes');

        if ($type === 'browse') {
            $this->title = get_screen_title('SVG_SPRITES');
        }

        if ($type === 'preview_svg_sprite') {
            $this->title = get_screen_title('PREVIEW_SPRITE');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SVG_SPRITES')]]);
        }

        if ($type === '_preview_svg_sprite') {
            $this->title = get_screen_title('PREVIEW_SPRITE');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SVG_SPRITES')], ['_SELF:_SELF:preview_svg_sprite', do_lang_tempcode('PREVIEW_SPRITE')]]);
            breadcrumb_set_self(do_lang_tempcode('RESULT'));
        }

        if ($type === 'generate_svg_sprite') {
            $this->title = get_screen_title('GENERATE_SPRITE');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SVG_SPRITES')]]);
        }

        if ($type === '_generate_svg_sprite') {
            $this->title = get_screen_title('GENERATE_SPRITE');

            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('SVG_SPRITES')], ['_SELF:_SELF:browse', do_lang_tempcode('GENERATE_SPRITE')]]);
            breadcrumb_set_self(do_lang_tempcode('RESULT'));
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }

        if ($type == 'preview_svg_sprite') {
            return $this->preview_svg_sprite();
        }

        if ($type == '_preview_svg_sprite') {
            return $this->_preview_svg_sprite();
        }

        if ($type == 'generate_svg_sprite') {
            return $this->generate_svg_sprite();
        }

        if ($type == '_generate_svg_sprite') {
            return $this->_generate_svg_sprite();
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for before content management.
     *
     * @return Tempcode The browse UI
     */
    public function browse() : object
    {
        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('SVG_SPRITES'),
            comcode_lang_string('DOC_SVG_SPRITES'),
            [
                ['admin/view_this', ['_SELF', ['type' => 'preview_svg_sprite'], '_SELF'], do_lang('PREVIEW_SPRITE')],
                ['admin/tool', ['_SELF', ['type' => 'generate_svg_sprite'], '_SELF'], do_lang('GENERATE_SPRITE')],
            ],
            do_lang('SVG_SPRITES')
        );
    }

    /**
     * Choose a theme for previewing SVG sprite.
     *
     * @return Tempcode The UI
     */
    public function preview_svg_sprite() : object
    {
        require_code('themes2');
        require_code('form_templates');

        $theme = $GLOBALS['FORUM_DRIVER']->get_theme(''); // Default to the theme for the Welcome zone
        $theme_entries = create_selection_list_themes($theme, false, true);
        $theme_field = form_input_list(do_lang_tempcode('THEME'), make_string_tempcode(''), 'theme', $theme_entries);
        $monochrome_field = form_input_tick(do_lang_tempcode('MONOCHROME_ICONS'), '', 'monochrome', get_theme_option('use_monochrome_icons') === '1');

        $fields = new Tempcode();
        $fields->attach($theme_field);
        $fields->attach($monochrome_field);

        $post_url = build_url(['page' => '_SELF', 'type' => '_preview_svg_sprite'], '_SELF');
        $submit_name = do_lang_tempcode('PREVIEW_SPRITE');

        return do_template('FORM_SCREEN', [
            '_GUID' => '2887f783aea9475bb0955a9ee985e36e',
            'HIDDEN' => '',
            'SUBMIT_ICON' => 'admin/view_this',
            'SUBMIT_NAME' => $submit_name,
            'TITLE' => $this->title,
            'FIELDS' => $fields,
            'URL' => $post_url,
            'TEXT' => '',
            'SUPPORT_AUTOSAVE' => true,
        ]);
    }

    /**
     * Generate a UI to preview the SVG sprite.
     *
     * @return Tempcode The UI
     */
    public function _preview_svg_sprite() : object
    {
        require_code('themes');
        require_code('xml');
        require_css('adminzone');

        $theme = post_param_string('theme');
        $monochrome = post_param_integer('monochrome', 0);

        $theme_image = 'icons' . (($monochrome === 1) ? '_monochrome' : '') . '_sprite';
        $sprite_url = find_theme_image($theme_image, false, true);
        if ($sprite_url == '') {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }
        if (!url_is_local($sprite_url)) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }
        $_sprite_path = rawurldecode($sprite_url);
        $sprite_path = get_custom_file_base() . '/' . $_sprite_path;
        if (!is_file($sprite_path)) {
            $sprite_path = get_file_base() . '/' . $_sprite_path;
        }

        $svg_xml = new CMS_simple_xml_reader(cms_file_get_contents_safe($sprite_path, FILE_READ_LOCK | FILE_READ_BOM));
        $svg_xml_children = $svg_xml->gleamed[3];
        $sprite_url = find_theme_image('icons' . (($monochrome === 1) ? '_monochrome' : '') . '_sprite', true, false, $theme);
        $sprite_url .= '?t=' . float_to_raw_string(microtime(true));

        $icons = new Tempcode();
        foreach ($svg_xml_children as $symbol) {
            if (!is_array($symbol) || ($symbol[0] !== 'http://www.w3.org/2000/svg:symbol')) {
                continue;
            }
            $symbol_id = strval($symbol[1]['id']);
            $icons->attach(do_template('PREVIEW_SVG_SPRITE_ICON', [
                '_GUID' => 'c1e00e30fa5d4d77bee4b974dc66c926',
                'SPRITE_URL' => $sprite_url,
                'SYMBOL_ID' => $symbol_id,
            ]));
        }

        return do_template('PREVIEW_SVG_SPRITE_SCREEN', [
            '_GUID' => '0772b3d967df4000ae58ffd42aef358f',
            'TITLE' => $this->title,
            'SPRITE_PATH' => $_sprite_path,
            'ICONS' => $icons,
        ]);
    }

    /**
     * Choose a theme for re-generating the SVG sprite.
     *
     * @return Tempcode The Choose Theme UI
     */
    public function generate_svg_sprite() : object
    {
        require_code('themes2');
        require_code('form_templates');

        $hidden = new Tempcode();
        $fields = new Tempcode();

        require_code('users2');
        $theme = $GLOBALS['FORUM_DRIVER']->get_theme('', get_modal_user()); // Default to the theme for the Welcome zone
        $theme_entries = create_selection_list_themes($theme, false, true);
        $fields->attach(form_input_list(do_lang_tempcode('THEME'), make_string_tempcode(''), 'theme', $theme_entries));

        $fields->attach(form_input_tick(do_lang_tempcode('MONOCHROME_ICONS'), do_lang_tempcode('DESCRIPTION_MONOCHROME_ICONS'), 'monochrome', get_theme_option('use_monochrome_icons') === '1'));

        if ($GLOBALS['DEV_MODE']) {
            $fields->attach(form_input_tick('Userland', 'Generate in the images_custom directory and include icons from that directory.', 'userland', true));
        } else {
            $hidden->attach(form_input_hidden('userland', '1'));
        }

        $post_url = build_url(['page' => '_SELF', 'type' => '_generate_svg_sprite'], '_SELF');
        $submit_name = do_lang_tempcode('GENERATE_SPRITE');
 
        return do_template('FORM_SCREEN', [
            '_GUID' => '2887f783aea9475bb0955a9ee985e36e',
            'HIDDEN' => $hidden,
            'SUBMIT_ICON' => 'menu/adminzone/style/themes/css',
            'SUBMIT_NAME' => $submit_name,
            'TITLE' => $this->title,
            'FIELDS' => $fields,
            'URL' => $post_url,
            'TEXT' => '',
            'SUPPORT_AUTOSAVE' => true,
        ]);
    }

    /**
     * The actualiser to generate the SVG sprite.
     *
     * @return Tempcode The Generating Sprite UI
     */
    public function _generate_svg_sprite() : object
    {
        require_code('themes3');

        $theme = post_param_string('theme');
        $monochrome = (post_param_integer('monochrome', 0) == 1);
        $userland = (post_param_integer('userland', 0) == 1);

        list($_sprite_path, $icons_added) = generate_svg_sprite($theme, $monochrome, $userland);

        return do_template('GENERATE_SVG_SPRITE_SCREEN', [
            '_GUID' => '1318e8d111ee4715aae471976f495ccd',
            'TITLE' => $this->title,
            'SPRITE_PATH' => $_sprite_path,
            'ICONS_ADDED' => $icons_added,
        ]);
    }
}
