<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    core_configuration
 */

/**
 * Module page class.
 */
class Module_admin_oauth
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 1;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'core_configuration';
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        return [
            'browse' => ['_OAUTH_TITLE', 'menu/adminzone/setup/oauth'],
        ];
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $type = get_param_string('type', 'browse');

        require_lang('oauth');
        require_code('oauth');

        set_helper_panel_text(comcode_lang_string('DOC_OAUTH'));

        if ($type == 'browse') {
            $this->title = get_screen_title('_OAUTH_TITLE');
        }

        if ($type == 'start') {
            $service_name = get_param_string('id');
            $service_info = get_oauth_service_info($service_name);

            $this->title = get_screen_title('OAUTH_TITLE', true, [escape_html($service_info['label'])]);
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('_OAUTH_TITLE')]]);

            breadcrumb_set_self(do_lang_tempcode('PROCEED'));
        }

        if ($type == 'finish') {
            $service_name = get_param_string('state');
            $service_info = get_oauth_service_info($service_name);

            $this->title = get_screen_title('OAUTH_TITLE', true, [escape_html($service_info['label'])]);
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('_OAUTH_TITLE')]]);

            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        // Decide what we're doing
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'start') {
            return $this->start();
        }
        if ($type == 'finish') {
            return $this->finish();
        }

        return new Tempcode();
    }

    /**
     * Choose what oAuth service / see what's here.
     *
     * @return Tempcode The result of execution
     */
    public function browse() : object
    {
        $services = [];

        $hooks = find_all_hook_obs('systems', 'oauth', 'Hook_oauth_');
        foreach ($hooks as $service_name => $ob) {
            $service_info = $ob->info();

            require_code('hooks/systems/config/' . filter_naughty_harsh($service_info['options']['client_id']));
            $ob = object_factory('Hook_config_' . filter_naughty_harsh($service_info['options']['client_id']));
            $info = $ob->get_details();

            $configured = ($service_info['available']) && (get_option($service_info['options']['client_id']) != '') && (get_option($service_info['options']['client_secret']) != '');
            $config_url = build_url(['page' => 'admin_config', 'type' => 'category', 'id' => $info['category'], 'redirect' => get_self_url(true)], get_module_zone('admin_config'), [], false, false, false, 'group-' . $info['group']);

            if (($service_info['available']) && ($configured)) {
                if (isset($service_info['connect_url'])) {
                    $connect_url = make_string_tempcode($service_info['connect_url']);
                } else {
                    $connect_url = build_url(['page' => '_SELF', 'type' => 'start', 'id' => $service_name], '_SELF');
                }
            } else {
                $connect_url = null;
            }

            $refresh_token = get_oauth_refresh_token($service_name);

            $services[] = [
                'LABEL' => $service_info['label'],
                'PROTOCOL' => $service_info['protocol'],
                'AVAILABLE' => $service_info['available'],
                'CONFIGURED' => $configured,
                'CONFIG_URL' => $config_url,
                'CONNECTED' => ($refresh_token != '') && (get_value($service_name . '_configured', null, true) != ''),
                'CONNECT_URL' => $connect_url,
                'CLIENT_ID' => get_option($service_info['options']['client_id']),
                'CLIENT_SECRET' => get_option($service_info['options']['client_secret']),
                'API_KEY' => isset($service_info['options']['api_key']) ? get_option($service_info['options']['api_key']) : null,
                'REFRESH_TOKEN' => $refresh_token,
            ];
        }

        $hooks = find_all_hook_obs('systems', 'oauth_screen_sup', 'Hook_oauth_screen_sup_');
        foreach ($hooks as $service_name => $ob) {
            $services = array_merge($services, $ob->get_services());
        }

        sort_maps_by($services, 'LABEL', false, true);

        return do_template('OAUTH_SCREEN', ['_GUID' => '100541492cfe6713c022c60ff71cb478', 'TITLE' => $this->title, 'SERVICES' => $services]);
    }

    /**
     * Proceed to oAuth on 3rd party website.
     *
     * @return Tempcode The result of execution
     */
    public function start() : object
    {
        $service_name = get_param_string('id');
        $service_info = get_oauth_service_info($service_name);

        $client_id = get_option($service_info['options']['client_id']);

        $endpoint = $service_info['endpoint'];

        $redirect_url = build_url(['page' => '_SELF', 'type' => 'finish'], '_SELF', [], false, true, true);

        $auth_url = $endpoint . '/auth?client_id=' . strval($client_id);
        $auth_url .= '&redirect_uri=' . urlencode($redirect_url->evaluate());
        $auth_url .= '&response_type=code';
        $auth_url .= '&approval_prompt=force';
        $auth_url .= '&scope=' . urlencode($service_info['scope']);
        $auth_url .= '&access_type=offline';
        $auth_url .= '&state=' . urlencode($service_name);

        return redirect_screen($this->title, $auth_url);
    }

    /**
     * Finish the oAuth setup.
     *
     * @return Tempcode The result of execution
     */
    public function finish() : object
    {
        $code = get_param_string('code', '');

        if ($code == '') {
            return warn_screen($this->title, do_lang_tempcode('SOME_ERRORS_OCCURRED'));
        }

        $service_name = get_param_string('state');
        $service_info = get_oauth_service_info($service_name);

        $client_id = get_option($service_info['options']['client_id']);
        $client_secret = get_option($service_info['options']['client_secret']);

        $endpoint = $service_info['endpoint'];

        $redirect_url = build_url(['page' => '_SELF', 'type' => 'finish'], '_SELF', [], false, true, true);

        $post_params = [
            'code' => $code,
            'client_id' => $client_id,
            'client_secret' => $client_secret,
            'redirect_uri' => $redirect_url->evaluate(),
            'grant_type' => 'authorization_code',
        ];

        $result = http_get_contents($endpoint . '/token', ['convert_to_internal_encoding' => true, 'post_params' => $post_params]);
        $parsed_result = json_decode($result, true);

        // We assume the oAuth provider we are using supports refresh tokens - or the hook can lie and call a regular token a refresh token and never call refresh_oauth2_token()
        $refresh_token_key = $service_info['saved_data']['refresh_token_key'];
        set_value($refresh_token_key, $parsed_result['refresh_token'], true);

        set_value($service_name . '_configured', '1', true);

        $message = do_lang_tempcode('OAUTH_SUCCESS', escape_html($service_info['label']));

        require_code('caches3');
        erase_block_cache(true, null, false);

        return inform_screen($this->title, $message);
    }
}
