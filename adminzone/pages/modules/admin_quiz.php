<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    quizzes
 */

/**
 * Module page class.
 */
class Module_admin_quiz
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 2;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'quizzes';
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('quizzes')) {
            return null;
        }

        return [
            'browse' => ['MANAGE_QUIZZES', 'menu/rich_content/quiz'],
            'find_winner' => ['FIND_WINNER', 'menu/cms/quiz/find_winners'],
            'quiz_results' => ['QUIZ_RESULTS', 'menu/cms/quiz/quiz_results'],
            'export' => ['EXPORT_QUIZ', 'admin/export_spreadsheet'],
        ];
    }

    public $title;
    public $row;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('quizzes', $error_msg)) {
            return $error_msg;
        }

        require_code('form_templates'); // Needs to run high so that the anti-click-hacking header is sent

        $type = get_param_string('type', 'browse');

        require_lang('quiz');
        require_css('quizzes');

        set_helper_panel_tutorial('tut_quizzes');

        if ($type == 'browse') {
            $also_url = build_url(['page' => 'cms_quiz'], get_module_zone('cms_quiz'));
            attach_message(do_lang_tempcode('menus:ALSO_SEE_CMS', escape_html($also_url->evaluate())), 'inform', true);
        }

        if ($type == 'find_winner') {
            breadcrumb_set_self(do_lang_tempcode('CHOOSE'));
            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('MANAGE_QUIZZES')]]);
        }

        if ($type == '_find_winner') {
            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('MANAGE_QUIZZES')], ['_SELF:_SELF:find_winner', do_lang_tempcode('CHOOSE')]]);
        }

        if ($type == 'quiz_results') {
            breadcrumb_set_self(do_lang_tempcode('CHOOSE'));
            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('MANAGE_QUIZZES')]]);
        }

        if ($type == '_quiz_results') {
            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('MANAGE_QUIZZES')]]);
            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('MANAGE_QUIZZES')], ['_SELF:_SELF:quiz_results', do_lang_tempcode('CHOOSE')]]);
        }

        if ($type == '__quiz_results') {
            $id = get_param_integer('id'); // entry ID
            $rows = $GLOBALS['SITE_DB']->query_select('quiz_entries', ['*'], ['id' => $id], '', 1);
            if (!array_key_exists(0, $rows)) {
                warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
            }
            $row = $rows[0];

            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('MANAGE_QUIZZES')], ['_SELF:_SELF:_quiz_results:' . strval($row['q_quiz_id']), do_lang_tempcode('QUIZ_RESULTS')]]);
            breadcrumb_set_self(do_lang_tempcode('RESULT'));

            $this->row = $row;
        }

        if ($type == 'export') {
            $this->title = get_screen_title('EXPORT_QUIZ');
            breadcrumb_set_parents([['_SELF:_SELF', do_lang_tempcode('MANAGE_QUIZZES')]]);
        }

        if ($type == 'find_winner' || $type == '_find_winner') {
            $this->title = get_screen_title('FIND_WINNERS');
        }

        if ($type == 'quiz_results' || $type == '_quiz_results' || $type == '__quiz_results') {
            $this->title = get_screen_title('QUIZ_RESULTS');
        }

        if ($type == 'delete_quiz_results') {
            $this->title = get_screen_title('DELETE_QUIZ_RESULTS');
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_code('quiz');

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }
        if ($type == 'find_winner') {
            return $this->find_winner();
        }
        if ($type == '_find_winner') {
            return $this->_find_winner();
        }
        if ($type == 'quiz_results') {
            return $this->quiz_results();
        }
        if ($type == '_quiz_results') {
            return $this->_quiz_results();
        }
        if ($type == '__quiz_results') {
            return $this->__quiz_results();
        }
        if ($type == 'export') {
            return $this->export_quiz();
        }
        if ($type == '_export') {
            $this->_export_quiz(); // Does not return
        }
        if ($type == 'delete_quiz_results') {
            return $this->delete_quiz_results();
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for before setup management.
     *
     * @return Tempcode The UI
     */
    public function browse() : object
    {
        require_lang('quiz');

        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('MANAGE_QUIZZES'),
            comcode_lang_string('DOC_QUIZZES'),
            [
                ['menu/cms/quiz/find_winners', ['_SELF', ['type' => 'find_winner'], '_SELF'], do_lang('FIND_WINNERS')],
                ['menu/cms/quiz/quiz_results', ['_SELF', ['type' => 'quiz_results'], '_SELF'], do_lang('QUIZ_RESULTS')],
                ['admin/export_spreadsheet', ['_SELF', ['type' => 'export'], '_SELF'], do_lang('EXPORT_QUIZ')],
            ],
            do_lang('MANAGE_QUIZZES')
        );
    }

    /**
     * Standard crud_module list function.
     *
     * @return Tempcode The selection list
     */
    public function create_selection_list_entries() : object
    {
        $where = [];
        $type = get_param_string('q_type', null);
        if ($type !== null) {
            $where['q_type'] = $type;
        }

        $_m = $GLOBALS['SITE_DB']->query_select('quizzes', ['id', 'q_name', 'q_type', 'q_validated', 'q_add_date'], $where, 'ORDER BY q_validated DESC,q_add_date DESC', intval(get_option('general_safety_listing_limit')));
        $entries = new Tempcode();
        foreach ($_m as $m) {
            $num_results = $GLOBALS['SITE_DB']->query_select_value('quiz_entries', 'COUNT(*)', ['q_quiz_id' => $m['id']]);
            $quiz_label = get_translated_text($m['q_name']) . ' (' . do_lang($m['q_type']) . ', ' . do_lang('COUNT_RESULTS') . ': ' . integer_format($num_results) . ')';

            $entries->attach(form_input_list_entry(strval($m['id']), false, $quiz_label));
        }
        if ($entries->is_empty()) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }

        return $entries;
    }

    /**
     * UI to export quiz spreadsheet.
     *
     * @return Tempcode The UI
     */
    public function export_quiz() : object
    {
        $entries = $this->create_selection_list_entries();
        if ($entries->is_empty()) {
            warn_exit(do_lang_tempcode('NO_ENTRIES', 'quiz'));
        }

        $fields = new Tempcode();
        $fields->attach(form_input_huge_list(do_lang_tempcode('QUIZ'), do_lang_tempcode('DESCRIPTION_QUIZZES_EXPORT'), 'quiz_id', $entries, null, true));

        $post_url = build_url(['page' => '_SELF', 'type' => '_export'], '_SELF');
        $submit_name = do_lang_tempcode('EXPORT_QUIZ');

        return do_template('FORM_SCREEN', [
            '_GUID' => '3110ee0e917e2e0f83a41ab27ec7eafe',
            'TITLE' => $this->title,
            'TEXT' => do_lang_tempcode('EXPORT_QUIZ_TEXT'),
            'HIDDEN' => '',
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'admin/export_spreadsheet',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * Actualiser to export quiz spreadsheet.
     *
     * @return Tempcode The result of execution
     */
    public function _export_quiz() : object
    {
        $quiz_id = post_param_integer('quiz_id');

        require_code('tasks');
        return call_user_func_array__long_task(do_lang('EXPORT_QUIZ'), $this->title, 'export_quiz', [$quiz_id]);
    }

    /**
     * UI: find quiz winner.
     *
     * @return Tempcode The result of execution
     */
    public function find_winner() : object
    {
        $entries = $this->create_selection_list_entries();
        if ($entries->is_empty()) {
            warn_exit(do_lang_tempcode('NO_ENTRIES', 'quiz'));
        }

        $fields = new Tempcode();
        $fields->attach(form_input_huge_list(do_lang_tempcode('QUIZ'), '', 'id', $entries, null, true));

        $post_url = build_url(['page' => '_SELF', 'type' => '_find_winner'], '_SELF');
        $submit_name = do_lang_tempcode('PROCEED');
        $text = do_lang_tempcode('CHOOSE_WINNERS');

        return do_template('FORM_SCREEN', [
            '_GUID' => '830097b15c232b10a8204cfed86082de',
            'HIDDEN' => '',
            'SKIP_WEBSTANDARDS' => true,
            'TITLE' => $this->title,
            'TEXT' => $text,
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
        ]);
    }

    /**
     * Actualiser: find quiz winner.
     *
     * @return Tempcode The result of execution
     */
    public function _find_winner() : object
    {
        $id = post_param_integer('id');

        // Test to see if we have not yet chosen winners
        $winners = $GLOBALS['SITE_DB']->query_select('quiz_winner', ['q_entry_id'], ['q_quiz_id' => $id]);
        if (!array_key_exists(0, $winners)) {
            // Close competition
            $close_time = $GLOBALS['SITE_DB']->query_select_value('quizzes', 'q_close_time', ['id' => $id]);
            if ($close_time === null) {
                $GLOBALS['SITE_DB']->query_update('quizzes', ['q_close_time' => time()], ['id' => $id], '', 1);
            }

            // Choose all entries
            $entries = $GLOBALS['SITE_DB']->query('SELECT id,q_member,q_results FROM ' . get_table_prefix() . 'quiz_entries WHERE q_quiz_id=' . strval($id) . ' AND q_member<>' . strval($GLOBALS['FORUM_DRIVER']->get_guest_id()) . ' ORDER BY q_results DESC');

            // Choose the maximum number of rows we'll need who could potentially win
            $num_winners = $GLOBALS['SITE_DB']->query_select_value('quizzes', 'q_num_winners', ['id' => $id]);
            if ($num_winners == 0) {
                $num_winners = 3; // Having 0 helps nobody, and having more than 0 if zero set hurts nobody
            }
            if ($num_winners < 0) {
                inform_exit(do_lang_tempcode('NO_ENTRIES'));
            }
            if ($num_winners >= count($entries)) {
                $min = 0;
            } else {
                $min = $entries[$num_winners]['q_results'];
            }
            $filtered_entries = [];
            foreach ($entries as $entry) {
                if ($entry['q_results'] >= $min) {
                    if (!array_key_exists($entry['q_results'], $filtered_entries)) {
                        $filtered_entries[$entry['q_results']] = [];
                    }

                    // Shuffle around this level
                    $temp = $filtered_entries[$entry['q_results']];
                    $temp[] = $entry;
                    shuffle($temp);
                    $filtered_entries[$entry['q_results']] = $temp;
                }
            }

            if (empty($filtered_entries)) {
                warn_exit(do_lang_tempcode('NO_POSSIBLE_WINNERS'));
            }

            // Pick winners: store
            for ($i = 0; $i < $num_winners; $i++) {
                $k = array_keys($filtered_entries);
                rsort($k);
                $temp = $filtered_entries[$k[0]];
                $_entry = array_shift($temp);
                if ($_entry !== null) {
                    $filtered_entries[$k[0]] = $temp;
                    $winners[] = ['q_entry_id' => $_entry['id']];

                    $GLOBALS['SITE_DB']->query_insert('quiz_winner', [
                        'q_quiz_id' => $id,
                        'q_entry_id' => $_entry['id'],
                        'q_winner_level' => $i,
                    ]);
                } else {
                    break;
                }
            }
        }

        $_winners = new Tempcode();
        foreach ($winners as $i => $winner) {
            $member_id = $GLOBALS['SITE_DB']->query_select_value('quiz_entries', 'q_member', ['id' => $winner['q_entry_id']]);
            $url = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true);
            switch ($i) {
                case 0:
                    $name = do_lang_tempcode('WINNER_FIRST', escape_html(integer_format($i + 1)), $GLOBALS['FORUM_DRIVER']->get_username($member_id));
                    break;
                case 1:
                    $name = do_lang_tempcode('WINNER_SECOND', escape_html(integer_format($i + 1)), $GLOBALS['FORUM_DRIVER']->get_username($member_id));
                    break;
                case 2:
                    $name = do_lang_tempcode('WINNER_THIRD', escape_html(integer_format($i + 1)), $GLOBALS['FORUM_DRIVER']->get_username($member_id));
                    break;
                default:
                    $name = do_lang_tempcode('WINNER', escape_html(integer_format($i + 1)), $GLOBALS['FORUM_DRIVER']->get_username($member_id));
                    break;
            }
            $_winners->attach(do_template('INDEX_SCREEN_ENTRY', ['_GUID' => '85f558c8dc99b027dbf4de821de0e419', 'URL' => $url, 'NAME' => $name, 'TARGET' => '_blank']));
        }

        // Show the winners
        return do_template('INDEX_SCREEN', [
            '_GUID' => 'd427ec7300a325ee4f00020ea59468e2',
            'TITLE' => $this->title,
            'CONTENT' => $_winners,
            'PRE' => do_lang_tempcode('WINNERS_FOUND_AS_FOLLOWS'),
            'POST' => do_lang_tempcode('WINNERS_HANDLING'),
        ]);
    }

    /**
     * Choose quiz to view results of.
     *
     * @return Tempcode The result of execution
     */
    public function quiz_results() : object
    {
        $entries = $this->create_selection_list_entries();
        if ($entries->is_empty()) {
            warn_exit(do_lang_tempcode('NO_ENTRIES', 'quiz'));
        }

        $fields = new Tempcode();
        $fields->attach(form_input_huge_list(do_lang_tempcode('QUIZ'), '', 'id', $entries, null, true));

        $post_url = build_url(['page' => '_SELF', 'type' => '_quiz_results'], '_SELF', [], false, true);
        $submit_name = do_lang_tempcode('QUIZ_RESULTS');

        return do_template('FORM_SCREEN', [
            '_GUID' => '03f611727000c1cb1c40780773bb8ebd',
            'SKIP_WEBSTANDARDS' => true,
            'HIDDEN' => '',
            'GET' => true,
            'TITLE' => $this->title,
            'TEXT' => '',
            'URL' => $post_url,
            'FIELDS' => $fields,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
        ]);
    }

    /**
     * View quiz results.
     *
     * @return Tempcode The result of execution
     */
    public function _quiz_results() : object
    {
        $id = get_param_integer('id', null); // quiz ID

        $fields = new Tempcode();

        require_code('templates_results_table');
        require_code('templates_map_table');

        // Show summary
        if ($id !== null) {
            $question_rows = $GLOBALS['SITE_DB']->query_select('quiz_questions', ['*'], ['q_quiz_id' => $id], 'ORDER BY q_order,id');
            foreach ($question_rows as $q) {
                $question = get_translated_text($q['q_question_text']);

                $answers = new Tempcode();
                $answer_rows = $GLOBALS['SITE_DB']->query_select('quiz_question_answers', ['*'], ['q_question_id' => $q['id']], 'ORDER BY q_order,id');
                $all_answers = [];
                foreach ($answer_rows as $i => $a) {
                    $answer = get_translated_text($a['q_answer_text']);
                    $count = $GLOBALS['SITE_DB']->query_select_value('quiz_entry_answer', 'COUNT(*)', ['q_answer' => strval($a['id'])]);

                    $all_answers[serialize([$answer, $i])] = $count;
                }
                arsort($all_answers);
                foreach ($all_answers as $bits => $count) {
                    list($answer, $i) = unserialize($bits);

                    $answers->attach(paragraph(do_lang_tempcode('QUIZ_ANSWER_RESULT', escape_html($answer), escape_html(integer_format($count, 0)), escape_html(integer_format($i + 1)))));
                }
                if ($answers->is_empty()) {
                    $answers = do_lang_tempcode('FREE_ENTRY_ANSWER');
                }

                $fields->attach(map_table_field($question, $answers, false));
            }
            $summary = do_template('MAP_TABLE', ['_GUID' => '2b0c2ba0070ba810c5e4b5b4aedcb15f', 'FIELDS' => $fields, 'RESPONSIVE' => true]);
        } else {
            $summary = new Tempcode();
        }

        // Show results table
        $start = get_param_integer('start', 0);
        $max = get_param_integer('max', 50);
        $sortables = ['q_time' => do_lang_tempcode('DATE')];
        $test = explode(' ', get_param_string('sort', 'q_time DESC', INPUT_FILTER_GET_COMPLEX), 2);
        if (count($test) == 1) {
            $test[1] = 'DESC';
        }
        list($sortable, $sort_order) = $test;
        if (((cms_strtoupper_ascii($sort_order) != 'ASC') && (cms_strtoupper_ascii($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
        }
        $where = [];
        if ($id !== null) {
            $where['q_quiz_id'] = $id;
        }
        $member_id = get_param_integer('member_id', null);
        if ($member_id !== null) {
            $where['q_member'] = $member_id;
        }
        $max_rows = $GLOBALS['SITE_DB']->query_select_value('quiz_entries', 'COUNT(*)', $where);
        $rows = $GLOBALS['SITE_DB']->query_select('quiz_entries e JOIN ' . get_table_prefix() . 'quizzes q ON q.id=e.q_quiz_id', ['e.id AS e_id', 'e.q_time', 'e.q_member', 'e.q_results', 'q.q_name', 'q.q_type'], $where, 'ORDER BY ' . $sortable . ' ' . $sort_order, $max, $start);
        if (empty($rows)) {
            return inform_screen($this->title, do_lang_tempcode('NO_ENTRIES'));
        }
        $result_entries = new Tempcode();
        $_header_row = [];
        $_header_row[] = do_lang_tempcode('DATE');
        if ($id === null) {
            $_header_row[] = do_lang_tempcode('NAME');
            $_header_row[] = do_lang_tempcode('TYPE');
        } else {
            $_header_row[] = do_lang_tempcode('USERNAME');
        }
        $_header_row[] = do_lang_tempcode('MARKS');
        $header_row = results_header_row($_header_row, $sortables, 'sort', $sortable . ' ' . $sort_order);
        foreach ($rows as $myrow) {
            $results_entry = [];

            $date_link = hyperlink(build_url(['page' => '_SELF', 'type' => '__quiz_results', 'id' => $myrow['e_id']], '_SELF'), get_timezoned_date_time($myrow['q_time']), false, true);
            $results_entry[] = $date_link;

            if ($id === null) {
                $results_entry[] = get_translated_text($myrow['q_name']);
                $results_entry[] = do_lang_tempcode($myrow['q_type']);
            } else {
                $member_link = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($myrow['q_member'], '', false);
                $results_entry[] = $member_link;
            }
            $results_entry[] = ($myrow['q_type'] == 'SURVEY') ? '' : integer_format($myrow['q_results']);

            $result_entries->attach(results_entry($results_entry, true));
        }
        if ($result_entries->is_empty()) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }
        $results = results_table(do_lang_tempcode('QUIZ_RESULTS'), $start, 'start', $max, 'max', $max_rows, $header_row, $result_entries, $sortables, $sortable, $sort_order, 'sort');

        $tpl = do_template('QUIZ_RESULTS_SCREEN', [
            '_GUID' => '3f38ac1b94fb4de8219b8f7108c7b0a3',
            'TITLE' => $this->title,
            'SUMMARY' => $summary,
            'RESULTS' => $results,
        ]);

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * View a single filled-in quiz.
     *
     * @return Tempcode The result of execution
     */
    public function __quiz_results() : object
    {
        $id = get_param_integer('id'); // entry ID

        $row = $this->row;

        $quizzes = $GLOBALS['SITE_DB']->query_select('quizzes', ['*'], ['id' => $row['q_quiz_id']], '', 1);
        if (!array_key_exists(0, $quizzes)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'quiz'));
        }
        $quiz = $quizzes[0];

        $member_id = $row['q_member'];
        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        $member_url = mixed();
        $member_url = get_base_url();
        if (!is_guest($member_id)) {
            $member_url = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true);
            if (is_object($member_url)) {
                $member_url = $member_url->evaluate();
            }
        }

        $date = get_timezoned_date_time($row['q_time']);

        list(
            $marks,
            $potential_extra_marks,
            $out_of,
            $given_answers,
            ,
            ,
            ,
            ,
            ,
            $marks_range,
            $percentage_range,
            ,
            ,
            ,
            ,
            ,
            $passed,
            ) = score_quiz($id, null, null, null, true);

        return do_template('QUIZ_RESULT_SCREEN', [
            '_GUID' => 'f59cbda2bb6b6f0ad6fa149591d94c90',
            'TITLE' => $this->title,
            'USERNAME' => $username,
            'MEMBER_URL' => $member_url,
            'DATE' => $date,
            '_DATE' => strval($row['q_time']),
            'ENTRY_ID' => strval($id),
            'QUIZ_NAME' => get_translated_text($quiz['q_name']),
            'GIVEN_ANSWERS_ARR' => $given_answers,
            'PASSED' => $passed,
            'TYPE' => do_lang($quiz['q_type']),
            '_TYPE' => $quiz['q_type'],
            'MARKS' => strval($marks),
            'POTENTIAL_EXTRA_MARKS' => strval($potential_extra_marks),
            'OUT_OF' => strval($out_of),
            'MARKS_RANGE' => $marks_range,
            'PERCENTAGE_RANGE' => $percentage_range,
        ]);
    }

    /**
     * Delete some quiz results.
     *
     * @return Tempcode The result of execution
     */
    public function delete_quiz_results() : object
    {
        $to_delete = [];

        foreach (array_keys($_POST) as $key) {
            $matches = [];
            if (preg_match('#^delete_(\d+)$#', $key, $matches) != 0) {
                if (post_param_integer($key) == 1) {
                    $to_delete[] = intval($matches[1]);
                }
            }
        }

        if (empty($to_delete)) {
            warn_exit(do_lang_tempcode('NOTHING_SELECTED'), false, false, 400);
        }

        $quiz_id = null;
        foreach ($to_delete as $result_id) {
            $entry_rows = $GLOBALS['SITE_DB']->query_select('quiz_entries', ['q_quiz_id', 'q_member'], ['id' => $result_id], '', 1);
            if (isset($entry_rows[0])) {
                $quiz_id = $entry_rows[0]['q_quiz_id'];

                $to_delete_sub = collapse_1d_complexity('id', $GLOBALS['SITE_DB']->query_select('quiz_entries', ['id'], $entry_rows[0]));
                foreach ($to_delete_sub as $_result_id) {
                    $GLOBALS['SITE_DB']->query_delete('quiz_entries', ['id' => $_result_id], '', 1);
                    $GLOBALS['SITE_DB']->query_delete('quiz_entry_answer', ['q_entry_id' => $_result_id]);
                }
            }
        }

        if ($quiz_id !== null) {
            $quiz_title = $GLOBALS['SITE_DB']->query_select_value_if_there('quizzes', 'q_name', ['id' => $quiz_id]);
            if ($quiz_title !== null) {
                log_it('DELETE_QUIZ_RESULTS', strval($quiz_id), get_translated_text($quiz_title));
            }
        }

        return inform_screen($this->title, do_lang_tempcode('SUCCESS'));
    }
}
