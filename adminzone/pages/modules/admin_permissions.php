<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_permission_management
 */

/**
 * Module page class.
 */
class Module_admin_permissions
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 10;
        $info['update_require_upgrade'] = true;
        $info['locked'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('group_zone_access');
        $GLOBALS['SITE_DB']->drop_table_if_exists('group_page_access');
        $GLOBALS['SITE_DB']->drop_table_if_exists('match_key_messages');

        $false_permissions = get_false_permissions();
        foreach ($false_permissions as $permission) {
            delete_privilege($permission[1]);
        }

        $true_permissions = get_true_permissions();
        foreach ($true_permissions as $permission) {
            delete_privilege($permission[1]);
        }

        delete_privilege('assume_any_member');
        delete_privilege('unfiltered_input');
        delete_privilege('see_query_errors');
        delete_privilege('bypass_spam_heuristics');
        delete_privilege('avoid_captcha');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('match_key_messages', [
                'id' => '*AUTO',
                'k_message' => 'LONG_TRANS__COMCODE',
                'k_match_key' => 'SHORT_TEXT',
            ]);

            // What usergroups may enter this zone
            $GLOBALS['SITE_DB']->create_table('group_zone_access', [
                'zone_name' => '*ID_TEXT',
                'group_id' => '*GROUP',
            ]);
            $GLOBALS['SITE_DB']->create_index('group_zone_access', 'group_id', ['group_id']);

            // Some defaults
            $usergroups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list();
            $admin_groups = array_unique(array_merge($GLOBALS['FORUM_DRIVER']->get_super_admin_groups(), $GLOBALS['FORUM_DRIVER']->get_moderator_groups()));
            $guest_groups = $GLOBALS['FORUM_DRIVER']->get_members_groups($GLOBALS['FORUM_DRIVER']->get_guest_id());
            foreach (array_keys($usergroups) as $id) {
                $GLOBALS['SITE_DB']->query_insert('group_zone_access', ['zone_name' => '', 'group_id' => $id]);
                $GLOBALS['SITE_DB']->query_insert('group_zone_access', ['zone_name' => 'forum', 'group_id' => $id]);
                if ($id != $guest_groups[0] || get_forum_type() == 'none') {
                    $GLOBALS['SITE_DB']->query_insert('group_zone_access', ['zone_name' => 'site', 'group_id' => $id]);
                }
                if ($id != $guest_groups[0]) {
                    $GLOBALS['SITE_DB']->query_insert('group_zone_access', ['zone_name' => 'cms', 'group_id' => $id]);
                }
            }
            foreach ($admin_groups as $admin_group) {
                $GLOBALS['SITE_DB']->query_insert('group_zone_access', ['zone_name' => 'adminzone', 'group_id' => $admin_group]);
            }

            // What usergroups may NOT view this page (default is that any page may be viewed if a user can access its zone)
            $GLOBALS['SITE_DB']->create_table('group_page_access', [
                'page_name' => '*ID_TEXT',
                'zone_name' => '*ID_TEXT',
                'group_id' => '*GROUP',
            ]);
            foreach (array_keys($usergroups) as $id) {
                if ((get_forum_type() == 'cns') && (!is_guest($id))) {
                    $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'join', 'zone_name' => get_module_zone('join'), 'group_id' => $id]);
                }

                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'admin_redirects', 'zone_name' => 'adminzone', 'group_id' => $id]); // We don't want people to redirect themselves passed the page/zone security unless they are admins already
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'admin_addons', 'zone_name' => 'adminzone', 'group_id' => $id]); // We don't want people installing new code
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'admin_email_log', 'zone_name' => 'adminzone', 'group_id' => $id]); // We don't want people snooping on admin e-mails (e.g. password reset)
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'admin_permissions', 'zone_name' => 'adminzone', 'group_id' => $id]); // We don't want people just assigning themselves additional permissions
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'admin_group_member_timeouts', 'zone_name' => 'adminzone', 'group_id' => $id]); // We don't want people temporarily putting themselves in an admin group
                $GLOBALS['SITE_DB']->query_insert('group_page_access', ['page_name' => 'admin_cns_groups', 'zone_name' => 'adminzone', 'group_id' => $id]); // We don't want people sneaking themselves into an administrator status
            }

            // False privileges
            $false_permissions = get_false_permissions();
            foreach ($false_permissions as $permission) {
                add_privilege($permission[0], $permission[1], false);
            }

            // For admins only
            add_privilege('STAFF_ACTIONS', 'assume_any_member', false, true);

            // True privileges
            $true_permissions = get_true_permissions();
            foreach ($true_permissions as $permission) {
                add_privilege($permission[0], $permission[1], true);
            }
        }

        if (($upgrade_from === null) || ($upgrade_from < 8)) {
            add_privilege('SUBMISSION', 'unfiltered_input', false);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 8)) { // LEGACY
            if (!privilege_exists('perform_keyword_check')) {
                add_privilege('SUBMISSION', 'perform_keyword_check', false);
            }
        }

        if (($upgrade_from === null) || ($upgrade_from < 9)) {
            $GLOBALS['SITE_DB']->create_index('group_page_access', 'group_id', ['group_id']);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 9)) { // LEGACY
            rename_privilege('bypass_word_filter', 'bypass_wordfilter');

            delete_privilege('view_revision_history');
            delete_privilege('view_content_history');
            delete_privilege('restore_content_history');
            delete_privilege('delete_content_history');

            delete_privilege('avoid_simplified_adminzone_look');

            $GLOBALS['SITE_DB']->query_update('privilege_list', ['p_section' => 'GENERAL_SETTINGS'], ['the_name' => 'may_enable_staff_notifications'], '', 1);
            $GLOBALS['SITE_DB']->query_update('privilege_list', ['the_default' => 0], ['the_name' => 'have_personal_category'], '', 1);
            $GLOBALS['SITE_DB']->query_update('privilege_list', ['p_section' => 'VOTE'], ['the_name' => 'vote_in_polls'], '', 1);
        }

        if (($upgrade_from !== null) && ($upgrade_from < 10)) { // LEGACY
            rename_privilege('see_stack_dump', 'see_stack_trace');
        }

        if (($upgrade_from === null) || ($upgrade_from < 10)) {
            add_privilege('STAFF_ACTIONS', 'see_query_errors', false);
            add_privilege('SUBMISSION', 'bypass_spam_heuristics', false);

            add_privilege('SUBMISSION', 'avoid_captcha', true, false, true);
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        $ret = [
            'browse' => ['PERMISSIONS_TREE', 'menu/adminzone/security/permissions/permission_tree_editor'],
        ];

        if (!$be_deferential) {
            $ret['privileges'] = ['PRIVILEGES', 'menu/adminzone/security/permissions/privileges'];

            if (addon_installed('match_key_permissions')) {
                $ret['match_keys'] = ['MATCH_KEYS', 'menu/adminzone/security/permissions/match_keys'];
            }

            $ret['content_access'] = ['CONTENT_ACCESS', 'spare/content'];
        }

        return $ret;
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        require_code('form_templates'); // Needs to run high so that the anti-click-hacking header is sent

        $type = get_param_string('type', 'browse');

        require_lang('permissions');

        if ($type == 'absorb' || $type == '_absorb') {
            set_helper_panel_tutorial('tut_permissions');
        }

        if ($type == 'match_keys' || $type == '_match_keys') {
            set_helper_panel_tutorial('tut_adv_permissions');
        }

        if ($type == 'content_access' || $type == '_content_access') {
            set_helper_panel_tutorial('tut_permissions');
            set_helper_panel_text(comcode_lang_string('DOC_CONTENT_PERMISSIONS'));
        }

        if ($type == 'page' || $type == '_page') {
            set_helper_panel_tutorial('tut_permissions');
        }

        if ($type == 'privileges') {
            set_helper_panel_tutorial('tut_permissions');

            require_all_lang();

            $p_section = get_param_string('id', null);
            if (empty($p_section)) {
                $this->title = get_screen_title('PRIVILEGES');
            } else {
                breadcrumb_set_parents([['_SELF:_SELF:privileges', do_lang_tempcode('PRIVILEGES')]]);
                breadcrumb_set_self(do_lang_tempcode($p_section));

                $this->title = get_screen_title('_PRIVILEGES', true, [do_lang_tempcode($p_section)]);
            }
        }

        if ($type == '_privileges') {
            $p_section = get_param_string('id', null);
            if (empty($p_section)) {
                set_helper_panel_tutorial('tut_permissions');
            }

            breadcrumb_set_parents([['_SELF:_SELF:privileges', do_lang_tempcode('PRIVILEGES')]]);
            breadcrumb_set_self(do_lang_tempcode($p_section));

            $this->title = get_screen_title('PRIVILEGES');
        }

        if ($type == '_absorb') {
            breadcrumb_set_parents([['_SELF:_SELF:absorb', do_lang_tempcode('ABSORB_PERMISSIONS')]]);
            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        if ($type == '_match_keys') {
            breadcrumb_set_parents([['_SELF:_SELF:match_keys', do_lang_tempcode('PAGE_MATCH_KEY_ACCESS')]]);
            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        if ($type == '_content_access') {
            $group_id = get_param_integer('group_id');
            $filters = get_param_string('filters', null);
            $max = get_param_integer('max', null);
            $page_link = '_SELF:_SELF:content_access:group_id=' . strval($group_id);
            if ($filters !== null) {
                $page_link .= ':filters=' . urlencode($filters);
            }
            if ($max !== null) {
                $page_link .= ':max=' . strval($max);
            }
            breadcrumb_set_parents([[$page_link, do_lang_tempcode('CONTENT_ACCESS')]]);
            breadcrumb_set_self(do_lang_tempcode('DONE'));
        }

        if ($type == 'absorb' || $type == '_absorb') {
            $this->title = get_screen_title('ABSORB_PERMISSIONS');
        }

        if ($type == 'browse') {
            $this->title = get_screen_title('PERMISSIONS_TREE');
        }

        if ($type == 'match_keys' || $type == '_match_keys') {
            $this->title = get_screen_title('PAGE_MATCH_KEY_ACCESS');
        }

        if ($type == 'content_access' || $type == '_content_access') {
            $group_id = get_param_integer('group_id', null);
            if ($group_id === null) {
                $this->title = get_screen_title('CONTENT_ACCESS');
            } else {
                $usergroups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true, true);
                $this->title = get_screen_title('_CONTENT_ACCESS', true, [escape_html($usergroups[$group_id])]);
            }
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_css('permissions_editor');
        require_css('forms');

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->tree_editor();
        }
        if ($type == 'absorb') {
            return $this->absorb();
        }
        if ($type == '_absorb') {
            return $this->_absorb();
        }
        if (addon_installed('match_key_permissions')) {
            if ($type == 'match_keys') {
                return $this->interface_match_keys_access();
            }
            if ($type == '_match_keys') {
                return $this->set_match_keys_access();
            }
        }
        if ($type == 'content_access') {
            return $this->interface_content_access();
        }
        if ($type == '_content_access') {
            return $this->set_content_access();
        }
        if ($type == 'privileges') {
            return $this->interface_privileges();
        }
        if ($type == '_privileges') {
            return $this->set_privileges();
        }

        return new Tempcode();
    }

    /**
     * The UI to absorb usergroup permissions.
     *
     * @return Tempcode The UI
     */
    public function absorb() : object
    {
        $groups_without = [];
        $all_groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);
        $list1 = new Tempcode();
        $list2 = new Tempcode();
        $admin_groups = $GLOBALS['FORUM_DRIVER']->get_super_admin_groups();
        $moderator_groups = $GLOBALS['FORUM_DRIVER']->get_moderator_groups();
        foreach ($all_groups as $id => $name) {
            if (in_array($id, $admin_groups)) {
                continue;
            }

            $test = $GLOBALS['SITE_DB']->query_select_value_if_there('group_privileges', 'group_id', ['group_id' => $id]);
            if ($test === null) {
                $groups_without[$id] = $name;
            }

            $list1->attach(form_input_list_entry($id, ($test === null), $name));
            $list2->attach(form_input_list_entry($id, ($test !== null) && (!in_array($id, $moderator_groups)), $name));
        }

        $__groups_without = escape_html(implode(', ', $groups_without));
        if ($__groups_without == '') {
            $_groups_without = do_lang_tempcode('NONE_EM');
        } else {
            $_groups_without = protect_from_escaping($__groups_without);
        }
        $text = do_lang_tempcode('USERGROUPS_WITH_NO_PERMISSIONS', $_groups_without);

        $submit_name = do_lang_tempcode('ABSORB_PERMISSIONS');
        $post_url = build_url(['page' => '_SELF', 'type' => '_absorb'], '_SELF');

        $fields = new Tempcode();
        $fields->attach(form_input_list(do_lang_tempcode('FROM'), do_lang_tempcode('PERMISSIONS_FROM'), 'from', $list1));
        $fields->attach(form_input_list(do_lang_tempcode('TO'), do_lang_tempcode('PERMISSIONS_TO'), 'to', $list2));

        return do_template('FORM_SCREEN', [
            '_GUID' => '9e20011006a26b240fc898279338875c',
            'SKIP_WEBSTANDARDS' => true,
            'TITLE' => $this->title,
            'HIDDEN' => '',
            'FIELDS' => $fields,
            'TEXT' => $text,
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => $submit_name,
            'URL' => $post_url,
        ]);
    }

    /**
     * The actualiser to absorb usergroup permissions.
     *
     * @return Tempcode The UI
     */
    public function _absorb() : object
    {
        $to = post_param_integer('to');
        $from = post_param_integer('from');
        if ($to == $from) {
            warn_exit(do_lang_tempcode('MERGE_SAME'));
        }

        // Although the code is from Conversr, it is safe to use for other forum drivers
        require_code('cns_groups_action');
        require_code('cns_groups_action2');
        cns_group_absorb_privileges_of($to, $from);

        $url = build_url(['page' => '_SELF', 'type' => 'absorb'], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI to for the permissions-tree-editor (advanced substitute for the combination of the page permissions screen and various other structure/content-attached screens).
     *
     * @return Tempcode The UI
     */
    public function tree_editor() : object
    {
        require_javascript('tree_list');

        require_css('sitemap_editor');

        $groups = new Tempcode();
        $admin_groups = $GLOBALS['FORUM_DRIVER']->get_super_admin_groups();
        $all_groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);
        $initial_group = null;
        foreach ($all_groups as $id => $group_name) {
            if ($initial_group === null) {
                $initial_group = $group_name;
            }
            if (!in_array($id, $admin_groups)) {
                $groups->attach(form_input_list_entry(strval($id), $id == $GLOBALS['FORUM_DRIVER']->get_guest_group(), $group_name));
            }
        }

        require_code('themes2');
        $color = ltrim(find_theme_seed($GLOBALS['FORUM_DRIVER']->get_theme()), '#');

        // Standard editing matrix
        // NB: For permissions tree editor, default access is shown as -1 in editor for clarity (because the parent permissions are easily findable which implies the default access would mean something else which would confuse [+ this would be hard to do due to the dynamicness of the interface])
        require_code('permissions2');
        $editor = get_permissions_matrix('', [], [], [], [], false);

        return do_template('PERMISSIONS_TREE_EDITOR_SCREEN', [
            '_GUID' => '08bb679a7cfab45c0c29b5393666dd57',
            'USERGROUPS' => $all_groups,
            'TITLE' => $this->title,
            'INITIAL_GROUP' => $initial_group,
            'COLOR' => $color,
            'GROUPS' => $groups,
            'EDITOR' => $editor,
        ]);
    }

    /**
     * Show the header row for permission editor (all the usergroups, except admin usergroups).
     *
     * @param  array $admin_groups List of admin usergroups
     * @param  array $groups Map of usergroups (id=>name)
     * @return Tempcode The header row
     */
    public function _access_header(array $admin_groups, array $groups) : object
    {
        require_code('themes2');
        $color = ltrim(find_theme_seed($GLOBALS['FORUM_DRIVER']->get_theme()), '#');

        require_code('character_sets');

        // Column headers (groups)
        $header_cells = new Tempcode();
        foreach ($groups as $id => $name) {
            if (in_array($id, $admin_groups)) {
                continue;
            }

            $header_cells->attach(do_template('PERMISSION_HEADER_CELL', ['_GUID' => 'c77bd5d8d9dedb6a3e61c477910a06b7', 'COLOR' => $color, 'GROUP' => $name]));
        }

        $header_cells->attach(do_template('PERMISSION_HEADER_CELL', ['_GUID' => '33fde6c008293f20bb3a51e912748c67', 'COLOR' => $color, 'GROUP' => '+/-']));

        return $header_cells;
    }

    /**
     * The UI to choose a zone to edit permissions for pages in.
     *
     * @param  Tempcode $title The title to use (output of get_screen_title)
     * @return Tempcode The UI
     */
    public function _choose_zone(object $title) : object
    {
        $fields = new Tempcode();
        require_lang('zones');

        require_code('zones3');
        $zones = create_selection_list_zones(null, [], ['', 'site']);
        $fields->attach(form_input_huge_list(do_lang_tempcode('ZONE'), '', 'zone', $zones, null, true));

        $post_url = get_self_url(false, false, [], false, true);

        return do_template('FORM_SCREEN', [
            '_GUID' => '457a5b8200991996b383bf75515382ab',
            'GET' => true,
            'SKIP_WEBSTANDARDS' => true,
            'HIDDEN' => '',
            'SUBMIT_ICON' => 'buttons/proceed',
            'SUBMIT_NAME' => do_lang_tempcode('CHOOSE'),
            'TITLE' => $title,
            'FIELDS' => $fields,
            'URL' => $post_url,
            'TEXT' => '',
        ]);
    }

    /**
     * The UI to set match-keys access.
     *
     * @return Tempcode The UI
     */
    public function interface_match_keys_access() : object
    {
        require_css('permissions_editor');

        $url = build_url(['page' => '_SELF', 'type' => '_match_keys'], '_SELF');

        $admin_groups = $GLOBALS['FORUM_DRIVER']->get_super_admin_groups();
        $groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);

        $header_cells = $this->_access_header($admin_groups, $groups);

        $cols = new Tempcode();
        foreach ($groups as $id => $g_name) {
            if (in_array($id, $admin_groups)) {
                continue;
            }
            $cols->attach(do_template('PERMISSION_COLUMN_SIZER'));
        }

        // Match-key permissions
        $p_rows = $GLOBALS['SITE_DB']->query_select('group_page_access', ['DISTINCT page_name'], ['zone_name' => '/'], 'ORDER BY page_name');
        $p_rows[] = ['page_name' => ''];
        $p_rows[] = ['page_name' => ''];
        $p_rows[] = ['page_name' => ''];
        $p_rows[] = ['page_name' => ''];
        $p_rows[] = ['page_name' => ''];
        $rows = new Tempcode();
        foreach ($p_rows as $id => $page) {
            $cells = new Tempcode();
            $code = '';

            $access_rows = collapse_1d_complexity('group_id', $GLOBALS['SITE_DB']->query_select('group_page_access', ['group_id'], ['page_name' => $page['page_name']]));

            foreach ($groups as $gid => $g_name) {
                if (in_array($gid, $admin_groups)) {
                    continue;
                }

                $has_not_restriction = !in_array($gid, $access_rows);

                $cells->attach(do_template('PERMISSION_CELL', [
                    '_GUID' => '3d5fe8c61007d9665111fc9536f6ddf0',
                    'CHECKED' => !$has_not_restriction,
                    'HUMAN' => do_lang_tempcode('RESTRICTION_CELL', /*$zone.'__'.*/escape_html($page['page_name']), escape_html($g_name)),
                    'NAME' => 'p_' . strval($id) . '__' . strval($gid),
                ]));
                $code .= 'form.elements[\'' . 'p_' . strval($id) . '__' . strval($gid) . '\'].checked=this.value==\'+\';';
            }

            $rows->attach(do_template('PERMISSION_KEYS_PERMISSION_ROW', [
                '_GUID' => 'dd692175fe246c130126ece7bd30ffb1',
                'ALL_OFF' => empty($access_rows),
                'KEY' => $page['page_name'],
                'UID' => strval($id),
                'CODE' => $code,
                'CELLS' => $cells,
            ]));
        }

        // Match-key messages
        $m_rows = $GLOBALS['SITE_DB']->query_select('match_key_messages', ['*'], [], 'ORDER BY k_match_key');
        $m_rows[] = ['id' => 'new_1', 'k_message' => '', 'k_match_key' => ''];
        $m_rows[] = ['id' => 'new_2', 'k_message' => '', 'k_match_key' => ''];
        $m_rows[] = ['id' => 'new_3', 'k_message' => '', 'k_match_key' => ''];
        $m_rows[] = ['id' => 'new_4', 'k_message' => '', 'k_match_key' => ''];
        $m_rows[] = ['id' => 'new_5', 'k_message' => '', 'k_match_key' => ''];
        $rows2 = new Tempcode();
        foreach ($m_rows as $row) {
            if ($row['k_message'] === '') {
                $msg = '';
            } else {
                $msg = get_translated_text($row['k_message']);
            }
            $rows2->attach(do_template('PERMISSION_KEYS_MESSAGE_ROW', ['_GUID' => 'bf52d4ac938ce5c495b89d06a4cb9e5e', 'KEY' => $row['k_match_key'], 'MSG' => $msg, 'UID' => is_integer($row['id']) ? strval($row['id']) : $row['id']]));
        }

        return do_template('PERMISSION_KEYS_PERMISSIONS_SCREEN', [
            '_GUID' => '61a702db2df67adb2702ae6c7081b4ab',
            'TITLE' => $this->title,
            'COLS' => $cols,
            'URL' => $url,
            'HEADER_CELLS' => $header_cells,
            'ROWS' => $rows,
            'ROWS2' => $rows2,
        ]);
    }

    /**
     * The actualiser to set match-key access.
     *
     * @return Tempcode The UI
     */
    public function set_match_keys_access() : object
    {
        // Delete to cleanup
        $GLOBALS['SITE_DB']->query('DELETE FROM ' . $GLOBALS['SITE_DB']->get_table_prefix() . 'group_page_access WHERE ' . db_string_equal_to('zone_name', '/'));
        $mkeylang = collapse_2d_complexity('id', 'k_message', $GLOBALS['SITE_DB']->query_select('match_key_messages', ['id', 'k_message']));
        $GLOBALS['SITE_DB']->query_delete('match_key_messages');

        $groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);
        foreach ($_POST as $key => $val) {
            // See if we can tidy it back to a page-link (assuming it's not one already)
            $page_link = url_to_page_link($val, true);
            if ($page_link != '') {
                $val = $page_link;
            }

            if ((substr($key, 0, 4) == 'key_') && ($val != '')) {
                foreach (array_keys($groups) as $gid) {
                    if (post_param_integer('p_' . substr($key, 4) . '__' . strval($gid), 0) == 1) {
                        $GLOBALS['SITE_DB']->query_delete('group_page_access', ['zone_name' => '/', 'page_name' => $val, 'group_id' => $gid], '', 1); // In case of row duplication in UI
                        $GLOBALS['SITE_DB']->query_insert('group_page_access', ['zone_name' => '/', 'page_name' => $val, 'group_id' => $gid]);
                    }
                }
            }

            if ((substr($key, 0, 5) == 'mkey_') && ($val != '')) {
                $id = substr($key, 5);
                if ((substr($id, 0, 4) == 'new_') || (!array_key_exists(intval($id), $mkeylang))) {
                    $GLOBALS['SITE_DB']->query_insert('match_key_messages', [
                        'k_match_key' => $val,
                    ] + insert_lang_comcode('k_message', post_param_string('msg_' . $id), 2));
                } else {
                    $map = [
                        'k_match_key' => $val,
                    ];
                    $map += lang_remap_comcode('k_message', $mkeylang[intval($id)], post_param_string('msg_' . $id));
                    $GLOBALS['SITE_DB']->query_insert('match_key_messages', $map);
                    unset($mkeylang[intval($id)]);
                }
            }
        }
        foreach ($mkeylang as $lid) {
            delete_lang($lid);
        }

        delete_cache_entry('menu');

        log_it('PAGE_MATCH_KEY_ACCESS');

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'match_keys'], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Get the list of sections that we can work through, in logical order.
     *
     * @return array The section list
     */
    public function _get_ordered_sections() : array
    {
        $_sections = list_to_map('p_section', $GLOBALS['SITE_DB']->query_select('privilege_list', ['DISTINCT p_section']));
        foreach ($_sections as $i => $s) {
            $_sections[$i]['trans'] = do_lang($s['p_section']);
        }
        sort_maps_by($_sections, 'trans', false, true);
        $orderings = ['SUBMISSION', 'GENERAL_SETTINGS', 'FORUMS_AND_MEMBERS', 'STAFF_ACTIONS', '_COMCODE', '_FEEDBACK', 'POINTS'];
        $_sections_prior = [];
        foreach ($orderings as $ordering) {
            if (array_key_exists($ordering, $_sections)) {
                $x = $_sections[$ordering];
                unset($_sections[$ordering]);
                $_sections_prior[$ordering] = $x;
            }
        }
        if (!empty($_sections_prior)) {
            $_sections_prior[''] = null;
        }
        $_sections = array_merge($_sections_prior, $_sections);

        return $_sections;
    }


    /**
     * The UI to choose a group to edit content permissions for.
     *
     * @return Tempcode The UI
     */
    public function interface_content_access_choose_group() : object
    {
        $options = new Tempcode();
        $rows = $GLOBALS['FORUM_DB']->query_select('f_groups', ['id', 'g_name'], ['g_is_private_club' => 0, 'g_is_super_admin' => 0], 'ORDER BY ' . $GLOBALS['FORUM_DB']->translate_field_ref('g_name'));
        require_code('cns_groups2');
        foreach ($rows as $row) {
            $options->attach(form_input_list_entry(strval($row['id']), false, get_translated_text($row['g_name'], $GLOBALS['FORUM_DB'])));
        }

        require_code('form_templates');

        $fields = new Tempcode();
        $fields->attach(form_input_huge_list(do_lang_tempcode('USERGROUP'), '', 'group_id', $options, null, true));

        $post_url = build_url(['page' => '_SELF', 'type' => 'content_access'], '_SELF');

        return do_template('FORM_SCREEN', [
            'TITLE' => $this->title,
            'GET' => true,
            'SKIP_WEBSTANDARDS' => true,
            'HIDDEN' => '',
            'SUBMIT_ICON' => 'buttons__proceed',
            'SUBMIT_NAME' => do_lang_tempcode('CHOOSE'),
            'FIELDS' => $fields,
            'URL' => $post_url,
            'TEXT' => '',
        ]);
    }

    /**
     * The UI to edit content access for a particular usergroup.
     *
     * @return Tempcode The UI
     */
    public function interface_content_access() : object
    {
        $group_id = get_param_integer('group_id', null);
        if ($group_id === null) {
            return $this->interface_content_access_choose_group();
        }

        $_filters = get_param_string('filters', null);
        $filters = ($_filters === null) ? null : explode(',', $_filters);
        $max = get_param_integer('max', 50);

        $zones = [];
        $_zones = find_all_zones(false, true, false, 0, $max);
        if (count($_zones) < $max) {
            ksort($_zones);
            $group_zone_access = collapse_2d_complexity('zone_name', 'group_id', $GLOBALS['SITE_DB']->query_select('group_zone_access', ['zone_name', 'group_id'], ['group_id' => $group_id]));

            foreach ($_zones as $zone_details) {
                list($zone_name, $zone_title) = $zone_details;

                $group_page_access = collapse_2d_complexity('page_name', 'group_id', $GLOBALS['SITE_DB']->query_select('group_page_access', ['page_name', 'group_id'], ['zone_name' => $zone_name, 'group_id' => $group_id]));

                $pages = [];
                $_pages = find_all_pages_wrap($zone_name);
                if (count($_pages) > $max) {
                    $_pages = [];
                }
                ksort($_pages);
                foreach (array_keys($_pages) as $page_name) {
                    if (is_integer($page_name)) {
                        $page_name = strval($page_name);
                    }

                    $save_id = $zone_name . ':' . $page_name;
                    if (($filters === null) || (in_array($save_id, $filters))) {
                        $pages[] = [
                            'PAGE_NAME' => $page_name,
                            'HAS_ACCESS' => !array_key_exists($page_name, $group_page_access),
                            'SAVE_ID' => $save_id,
                        ];
                    }
                }

                $save_id = $zone_name;
                if (($filters === null) || (in_array($save_id, $filters))) {
                    $zones[] = [
                        'ZONE_NAME' => $zone_name,
                        'ZONE_TITLE' => $zone_title,
                        'PAGES' => $pages,
                        'HAS_ACCESS' => array_key_exists($zone_name, $group_zone_access),
                        'SAVE_ID' => $save_id,
                    ];
                }
            }
        }

        $modules = [];
        require_code('content');
        $hook_obs = find_all_hook_obs('systems', 'content_meta_aware', 'Hook_content_meta_aware_');
        foreach ($hook_obs as $hook_ob) {
            $info = $hook_ob->info();
            if (($info !== null) && ($info['category_type'] !== null) && ($info['cms_page'] !== null) && ($info['is_category']) && (!$info['is_entry'])) {
                require_code('zones2');
                $page = $info['cms_page'];
                $zone = get_module_zone($page, 'modules', null, 'php', true, false);
                $_overridables = extract_module_functions_page($zone, $page, ['get_privilege_overrides']);
                if ($_overridables[0] === null) {
                    $overridables = [];
                } else {
                    $overridables = is_array($_overridables[0]) ? call_user_func_array($_overridables[0][0], $_overridables[0][1]) : cms_eval($_overridables[0], $zone . ':' . $page);
                }

                $items = $this->build_content_item_tree($filters, $group_id, $overridables, $hook_ob, $info, $max);

                $group_privileges = collapse_2d_complexity('privilege', 'the_value', $GLOBALS['SITE_DB']->query_select('group_privileges', ['privilege', 'the_value'], [
                    'group_id' => $group_id,
                    'the_page' => $page,
                    'category_name' => '',
                    'module_the_name' => '',
                ]));
                $privileges = [];
                foreach ($overridables as $privilege => $privilege_bits) {
                    if (is_array($privilege_bits)) {
                        $lang_string = $privilege_bits[1];
                    } else {
                        $lang_string = 'PRIVILEGE_' . $privilege;
                    }

                    $privileges[] = [
                        'PRIVILEGE_CODENAME' => $privilege,
                        'PRIVILEGE_LABEL' => do_lang_tempcode($lang_string),
                        'HAS_ACCESS' => array_key_exists($privilege, $group_privileges) ? ($group_privileges[$privilege] == 1) : null,
                    ];
                }

                $save_id = $zone . ':' . $page;
                if (($filters === null) || (in_array($save_id, $filters))) {
                    $modules[] = [
                        'CONTENT_TYPE_LABEL' => $hook_ob->get_content_type_label(),
                        'PRIVILEGES' => $privileges,
                        'ITEMS' => $items,
                        'SAVE_ID' => $save_id,
                    ];
                }
            }
        }

        sort_maps_by($modules, 'CONTENT_TYPE_LABEL');

        $url = build_url(['page' => '_SELF', 'type' => '_content_access', 'group_id' => $group_id, 'filters' => $_filters], '_SELF');

        require_code('themes2');
        $color = ltrim(find_theme_seed($GLOBALS['FORUM_DRIVER']->get_theme()), '#');

        return do_template('PERMISSIONS_CONTENT_ACCESS_SCREEN', [
            'TITLE' => $this->title,
            'ZONES' => $zones,
            'MODULES' => $modules,
            'URL' => $url,
            'COLOR' => $color,
        ]);
    }

    /**
     * Build a flattened tree showing content items of a particular type.
     *
     * @param  ?array $filters Filter to only these save IDs (for testing) (null: no filter)
     * @param  AUTO_LINK $group_id The usergroup ID
     * @param  array $overridables Output of content type module's get_privilege_overrides function
     * @param  object $hook_ob The content type object
     * @param  array $info The content type info map
     * @param  integer $max Maximum number of items to show from any one content type
     * @return array List of item maps, ready for template
     */
    protected function build_content_item_tree(?array $filters, int $group_id, array $overridables, object $hook_ob, array $info, int $max) : array
    {
        $save_id_stub = get_module_zone($info['cms_page']) . ':' . $info['permissions_type_code'] . ':';

        $total = $info['db']->query_select_value($info['table'], 'COUNT(*)');
        if ($total > $max) {
            return [];
        }

        $group_category_access = collapse_2d_complexity('category_name', 'group_id', $GLOBALS['SITE_DB']->query_select('group_category_access', ['category_name', 'group_id'], [
            'group_id' => $group_id,
            'module_the_name' => $info['permissions_type_code'],
        ]));
        $_group_privileges = $GLOBALS['SITE_DB']->query_select('group_privileges', ['privilege', 'category_name', 'the_value'], [
            'group_id' => $group_id,
            'the_page' => '',
            'module_the_name' => $info['permissions_type_code'],
        ]);

        $select = [];
        append_content_select_for_fields($select, $info, ['id', 'title', 'parent_category']);
        $rows = $info['db']->query_select($info['table'], $select);
        $root_parent = $info['id_field_numeric'] ? null : '';

        if ($info['parent_spec__table_name'] !== $info['table']) {
            $info['parent_spec__parent_name'] = null;
        }

        $items = [];
        if ($info['parent_spec__parent_name'] === null) {
            foreach ($rows as $i => $row) {
                $row['_title'] = $hook_ob->get_title($row);
                $items = array_merge($items, $this->_build_content_item_tree($filters, $overridables, $group_category_access, $_group_privileges, $save_id_stub, $hook_ob, $info, $row, $rows));
            }
        } else {
            foreach ($rows as $i => $row) {
                if ($row[$info['parent_spec__parent_name']] === $root_parent) {
                    unset($rows[$i]);
                    $row['_title'] = $hook_ob->get_title($row);
                    $items = array_merge($items, $this->_build_content_item_tree($filters, $overridables, $group_category_access, $_group_privileges, $save_id_stub, $hook_ob, $info, $row, $rows));
                }
            }
        }

        return $items;
    }

    /**
     * Build a flattened tree showing content items of a particular type - recursion function.
     *
     * @param  ?array $filters Filter to only these save IDs (for testing) (null: no filter)
     * @param  array $overridables Output of content type module's get_privilege_overrides function
     * @param  array $group_category_access List of category access rows
     * @param  array $_group_privileges Database data of privileges for the content type
     * @param  string $save_id_stub Stub of save ID we'll be using
     * @param  object $hook_ob The content type object
     * @param  array $info The content type info map
     * @param  array $row Row for point in recursion
     * @param  array $rows All rows
     * @param  integer $depth Current recursion depth
     * @return array List of item maps, ready for template
     */
    protected function _build_content_item_tree(?array $filters, array $overridables, array $group_category_access, array $_group_privileges, string $save_id_stub, object $hook_ob, array $info, array $row, array &$rows, int $depth = 1) : array
    {
        $item_label = $row['_title'];
        $id = $row[$info['id_field']];
        $id_str = is_integer($id) ? strval($id) : $id;

        $items = [];

        $group_privileges = [];
        foreach ($_group_privileges as $privilege_row) {
            if ($privilege_row['category_name'] == $id_str) {
                $group_privileges[$privilege_row['privilege']] = $privilege_row['the_value'];
            }
        }

        $privileges = [];
        foreach ($overridables as $privilege => $privilege_bits) {
            if (is_array($privilege_bits)) {
                $supports_override = $privilege_bits[0];
                $lang_string = $privilege_bits[1];
            } else {
                $supports_override = $privilege_bits;
                $lang_string = 'PRIVILEGE_' . $privilege;
            }

            if ($supports_override == 1) {
                $privileges[] = [
                    'ENABLED' => true,
                    'PRIVILEGE_CODENAME' => $privilege,
                    'PRIVILEGE_LABEL' => do_lang_tempcode($lang_string),
                    'HAS_ACCESS' => array_key_exists($privilege, $group_privileges) ? ($group_privileges[$privilege] == 1) : null,
                ];
            } else {
                $privileges[] = [
                    'ENABLED' => false,
                    'PRIVILEGE_CODENAME' => $privilege,
                    'PRIVILEGE_LABEL' => do_lang_tempcode($lang_string),
                    'HAS_ACCESS' => null,
                ];
            }
        }

        $save_id = $save_id_stub . $id_str;
        if (($filters === null) || (in_array($save_id, $filters))) {
            $items[] = [
                'ITEM_LABEL' => $item_label,
                'DEPTH' => strval($depth),
                'ITEM_PRIVILEGES' => $privileges,
                'SAVE_ID' => $save_id,
                'HAS_ACCESS' => array_key_exists($id_str, $group_category_access),
            ];
        }

        if ($info['parent_spec__parent_name'] !== null) {
            $child_rows = [];

            foreach ($rows as $i => $_row) {
                if ($_row[$info['parent_spec__parent_name']] === $id) {
                    unset($rows[$i]);
                    $_row['_title'] = $hook_ob->get_title($_row);
                    $child_rows[] = $_row;
                }
            }

            sort_maps_by($child_rows, '_title');

            foreach ($child_rows as $child_row) {
                $items = array_merge($items, $this->_build_content_item_tree($filters, $overridables, $group_category_access, $_group_privileges, $save_id_stub, $hook_ob, $info, $child_row, $rows, $depth + 1));
            }
        }

        return $items;
    }

    /**
     * The actualiser to edit content access for a particular usergroup.
     *
     * @return Tempcode The UI
     */
    public function set_content_access() : object
    {
        require_code('input_filter_2');
        rescue_shortened_post_request();

        $group_id = get_param_integer('group_id');

        foreach ($_POST as $key => $val) {
            $matches = [];

            if (preg_match('#^perm__([^:]*)$#', $key, $matches) != 0) {
                // Zone view access
                $zone_name = $matches[1];
                if ($val == '0') {
                    $GLOBALS['SITE_DB']->query_delete('group_zone_access', ['zone_name' => $zone_name, 'group_id' => $group_id]);
                } else {
                    $GLOBALS['SITE_DB']->query_insert_or_replace('group_zone_access', [], ['zone_name' => $zone_name, 'group_id' => $group_id]);
                }
            } elseif (preg_match('#^perm__([^:]*):([^:]*)__(\w+)$#', $key, $matches) != 0) {
                // Module privilege override
                $page_name = $matches[2];
                $privilege = $matches[3];
                if ($val == '-1') {
                    $GLOBALS['SITE_DB']->query_delete('group_privileges', ['module_the_name' => '', 'category_name' => '', 'the_page' => $page_name, 'privilege' => $privilege, 'group_id' => $group_id]);
                } else {
                    $GLOBALS['SITE_DB']->query_insert_or_replace('group_privileges', ['the_value' => intval($val)], ['module_the_name' => '', 'category_name' => '', 'the_page' => $page_name, 'privilege' => $privilege, 'group_id' => $group_id]);
                }
            } elseif (preg_match('#^perm__([^:]*):([^:]*)$#', $key, $matches) != 0) {
                // Page view access
                $zone_name = $matches[1];
                $page_name = $matches[2];
                if ($val == '0') {
                    // A record means *no* permission
                    $GLOBALS['SITE_DB']->query_insert_or_replace('group_page_access', [], ['zone_name' => $zone_name, 'page_name' => $page_name, 'group_id' => $group_id]);
                } else {
                    $GLOBALS['SITE_DB']->query_delete('group_page_access', ['zone_name' => $zone_name, 'page_name' => $page_name, 'group_id' => $group_id]);
                }
            } elseif (preg_match('#^perm__([^:]*):([^:]*):([^:]*)__(\w+)$#', $key, $matches) != 0) {
                // Category privilege override
                $module = $matches[2];
                $category_name = $matches[3];
                $privilege = $matches[4];
                if ($val == '-1') {
                    $GLOBALS['SITE_DB']->query_delete('group_privileges', ['module_the_name' => $module, 'category_name' => $category_name, 'the_page' => '', 'privilege' => $privilege, 'group_id' => $group_id]);
                } else {
                    $GLOBALS['SITE_DB']->query_insert_or_replace('group_privileges', ['the_value' => intval($val)], ['module_the_name' => $module, 'category_name' => $category_name, 'the_page' => '', 'privilege' => $privilege, 'group_id' => $group_id]);
                }
            } elseif (preg_match('#^perm__([^:]*):([^:]*):([^:]*)$#', $key, $matches) != 0) {
                // Category view access
                $module = $matches[2];
                $category_name = $matches[3];
                if ($val == '0') {
                    $GLOBALS['SITE_DB']->query_delete('group_category_access', ['module_the_name' => $module, 'category_name' => $category_name, 'group_id' => $group_id]);
                } else {
                    $GLOBALS['SITE_DB']->query_insert_or_replace('group_category_access', [], ['module_the_name' => $module, 'category_name' => $category_name, 'group_id' => $group_id]);
                }
            }
        }

        return inform_screen($this->title, do_lang_tempcode('SUCCESS'));
    }

    /**
     * The UI to set privileges.
     *
     * @return Tempcode The UI
     */
    public function interface_privileges() : object
    {
        require_all_lang();
        require_code('zones2');

        $p_section = get_param_string('id', null);
        if (empty($p_section)) {
            $fields = new Tempcode();
            $_sections = $this->_get_ordered_sections();
            $sections = new Tempcode();
            $sections_common = new Tempcode();
            $sections_uncommon = new Tempcode();
            $doing_uncommon = false;
            foreach ($_sections as $s) {
                if ($s === null) {
                    $doing_uncommon = true;
                } else {
                    if (($s['p_section'] == 'FORUMS_AND_MEMBERS') && (get_forum_type() != 'cns')) {
                        continue;
                    }

                    if ($s['trans'] !== null) {
                        if ($doing_uncommon) {
                            $sections_uncommon->attach(form_input_list_entry($s['p_section'], false, $s['trans']));
                        } else {
                            $sections_common->attach(form_input_list_entry($s['p_section'], false, $s['trans']));
                        }
                    }
                }
            }
            $sections->attach(form_input_list_group(do_lang_tempcode('MOST_COMMON'), $sections_common));
            $sections->attach(form_input_list_group(do_lang_tempcode('OTHER'), $sections_uncommon));
            $fields->attach(form_input_huge_list(do_lang_tempcode('SECTION'), '', 'id', $sections, null, true));

            $post_url = get_self_url(false, false, [], false, true);

            return do_template('FORM_SCREEN', [
                '_GUID' => 'e5d457a49a76706afebc92da3d846e74',
                'GET' => true,
                'SKIP_WEBSTANDARDS' => true,
                'HIDDEN' => '',
                'SUBMIT_ICON' => 'buttons/proceed',
                'SUBMIT_NAME' => do_lang_tempcode('CHOOSE'),
                'TITLE' => $this->title,
                'FIELDS' => $fields,
                'URL' => $post_url,
                'TEXT' => '',
            ]);
        }

        $url = build_url(['page' => '_SELF', 'type' => '_privileges', 'id' => $p_section], '_SELF');

        $admin_groups = $GLOBALS['FORUM_DRIVER']->get_super_admin_groups();
        $moderator_groups = $GLOBALS['FORUM_DRIVER']->get_moderator_groups();
        $groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);

        $header_cells = $this->_access_header($admin_groups, $groups);

        $cols = new Tempcode();
        foreach ($groups as $id => $g_name) {
            if (in_array($id, $admin_groups)) {
                continue;
            }
            $cols->attach(do_template('PERMISSION_COLUMN_SIZER'));
        }

        // Find all module privilege overrides
        $all_module_overrides = [];
        foreach (find_all_zones() as $zone) {
            $all_modules = [];
            $all_modules += find_all_pages($zone, 'modules_custom', 'php', false);
            $all_modules += find_all_pages($zone, 'modules', 'php', false);

            foreach ($all_modules as $module => $module_type) {
                $path = zone_black_magic_filterer(get_file_base() . '/' . $zone . (($zone == '') ? '' : '/') . 'pages/' . $module_type . '/' . $module . '.php');
                $functions = extract_module_functions($path, ['get_privilege_overrides']);
                if ($functions[0] !== null) {
                    $overrides = is_array($functions[0]) ? call_user_func_array($functions[0][0], $functions[0][1]) : cms_eval($functions[0], $path);
                    foreach (array_keys($overrides) as $override) {
                        if (!array_key_exists($override, $all_module_overrides)) {
                            $all_module_overrides[$override] = [];
                        }
                        $all_module_overrides[$override][] = $module;
                    }
                }
            }
        }
        $all_page_privilege_overridding = $GLOBALS['SITE_DB']->query_select('group_privileges', ['the_page', 'privilege'], ['category_name' => '']);

        // Rows (pages)
        $rows = new Tempcode();
        $where = ['p_section' => $p_section]; // Added in because it was eating up too much memory
        $_privileges = collapse_2d_complexity('the_name', 'p_section', $GLOBALS['SITE_DB']->query_select('privilege_list', ['p_section', 'the_name'], $where, 'ORDER BY p_section,the_name'));
        $access_rows = $GLOBALS['SITE_DB']->query_select('group_privileges', ['privilege', 'group_id'], ['the_page' => '', 'module_the_name' => '', 'category_name' => '']);
        $_false = do_template('PERMISSION_CELL', ['_GUID' => '61aa7fa739e19caa1efb3695a5e2ab5d', 'CHECKED' => false, 'HUMAN' => '__human__', 'NAME' => '__name__']);
        $_true = do_template('PERMISSION_CELL', ['_GUID' => '44a888b40d7a34aed6ed2bf8ff47f1de', 'CHECKED' => true, 'HUMAN' => '__human__', 'NAME' => '__name__']);
        $true = $_true->evaluate();
        $false = $_false->evaluate();

        // Ad-hoc sorting?
        $orderings = [
            'submit_low', 'edit_own_low', 'edit_low', 'delete_own_low', 'delete_low', 'bypass_validation_low',
            'submit_mid', 'edit_own_mid', 'edit_mid', 'delete_own_mid', 'delete_mid', 'bypass_validation_mid',
            'submit_high', 'edit_own_high', 'edit_high', 'delete_own_high', 'delete_high', 'bypass_validation_high',
            'submit_cat_low', 'edit_own_cat_low', 'edit_cat_low', 'delete_own_cat_low', 'delete_cat_low', 'bypass_cat_validation_low',
            'submit_cat_mid', 'edit_own_cat_mid', 'edit_cat_mid', 'delete_own_cat_mid', 'delete_cat_mid', 'bypass_cat_validation_mid',
            'submit_cat_high', 'edit_own_cat_high', 'edit_cat_high', 'delete_own_cat_high', 'delete_cat_high', 'bypass_cat_validation_high',
        ];
        $privileges_first = [];
        foreach ($orderings as $stub) {
            foreach ($_privileges as $privilege => $section) {
                if (substr($privilege, 0, strlen($stub)) == $stub) {
                    $privileges_first[$privilege] = $section;
                    unset($_privileges[$privilege]);
                }
            }
        }
        $_privileges = array_merge($privileges_first, $_privileges);

        // Sort
        $__privileges = [];
        foreach ($_privileges as $privilege => $section) {
            $privilege_text = do_lang('PRIVILEGE_' . $privilege, null, null, null, null, false);
            if ($privilege_text !== null) {
                $__privileges[$privilege] = [$section, $privilege_text];
            }
        }
        sort_maps_by($__privileges, 1);

        // Display
        foreach ($__privileges as $privilege => $bits) {
            list($section, $privilege_text) = $bits;

            $cells = '';
            $code = '';
            $has = true;

            foreach ($groups as $id => $g_name) {
                if (in_array($id, $admin_groups)) {
                    continue;
                }

                $has_privilege = false;
                foreach ($access_rows as $access_row) {
                    if (($access_row['privilege'] == $privilege) && ($access_row['group_id'] == $id)) {
                        $has_privilege = true;
                        break;
                    }
                }
                if (!$has_privilege) {
                    $has = false;
                }

                $cells .= str_replace('__human__', escape_html(addslashes(do_lang('PERMISSION_CELL', $privilege_text, $g_name))), str_replace('__name__', $privilege . '__' . strval($id), $has_privilege ? $true : $false));
                if (in_array($id, $moderator_groups)) {
                    $code .= 'form.elements[\'' . $privilege . '__' . strval($id) . '\'].checked=true;';
                } else {
                    $code .= 'form.elements[\'' . $privilege . '__' . strval($id) . '\'].checked=this.value==\'+\';';
                }
            }

            if ($GLOBALS['XSS_DETECT']) {
                ocp_mark_as_escaped($cells);
            }

            $tpl_map = ['_GUID' => '075f8855f0fed36b0d0f9c61108dd3de', 'HAS' => $has, 'ABBR' => $privilege, 'PERMISSION' => $privilege_text, 'CELLS' => $cells, 'CODE' => $code];

            // See if any modules can override this
            if (array_key_exists($privilege, $all_module_overrides)) {
                $m_list = '';
                $has_actual_overriding = false;
                foreach ($all_module_overrides[$privilege] as $module) {
                    $this_overrides = false;
                    foreach ($all_page_privilege_overridding as $po_row) {
                        if (($po_row['the_page'] == $module) && ($po_row['privilege'] == $privilege)) {
                            $this_overrides = true;
                            break;
                        }
                    }

                    if ($m_list != '') {
                        $m_list .= escape_html(', ');
                    }
                    if ($this_overrides) {
                        $has_actual_overriding = true;
                        $m_list .= '<s>' . escape_html($module) . '</s>';
                    } else {
                        $m_list .= '<strong>' . escape_html($module) . '</strong>';
                    }

                    if ($module == 'topics') {
                        $m_list .= ' (' . cms_strtolower_ascii(do_lang((strpos($privilege, 'lowrange') !== false) ? 'FORUM_POSTS' : 'FORUM_TOPICS')) . ')';
                    }
                }
                if (function_exists('ocp_mark_as_escaped')) {
                    ocp_mark_as_escaped($m_list);
                }
                $tpl_map['DESCRIPTION'] = do_lang_tempcode($has_actual_overriding ? 'PRIVILEGE_USED_IN_SLASHED' : 'PRIVILEGE_USED_IN', $m_list);
            }

            // Render row
            $rows->attach(do_template('PERMISSION_ROW', $tpl_map));
        }

        return do_template('PERMISSION_PRIVILEGES_SCREEN', [
            '_GUID' => '11974f0a137266a625991d3611b8e587',
            'TITLE' => $this->title,
            'URL' => $url,
            'COLS' => $cols,
            'HEADER_CELLS' => $header_cells,
            'ROWS' => $rows,
        ]);
    }

    /**
     * The actualiser to set privileges.
     *
     * @return Tempcode The UI
     */
    public function set_privileges() : object
    {
        require_all_lang();

        if ((empty($_POST)) && ($_SERVER['REQUEST_METHOD'] != 'POST')) {
            warn_exit(do_lang_tempcode('PERMISSION_TRAGEDY_PREVENTED'));
        }

        $p_section = get_param_string('id');
        $_sections = $this->_get_ordered_sections();
        $array_keys = array_keys($_sections);
        $next_section = $array_keys[0];
        $counter = 0;
        foreach ($_sections as $s) {
            if ($s === null) {
                continue;
            }

            if ($counter > array_search($p_section, $array_keys)) {
                $next_section = $s['p_section'];
                break;
            }
            $counter++;
        }

        $groups = $GLOBALS['FORUM_DRIVER']->get_usergroup_list(false, true);
        $privileges = collapse_1d_complexity('the_name', $GLOBALS['SITE_DB']->query_select('privilege_list', ['the_name'], ['p_section' => $p_section]));
        $admin_groups = $GLOBALS['FORUM_DRIVER']->get_super_admin_groups();
        foreach ($privileges as $privilege) {
            foreach (array_keys($groups) as $id) {
                if (in_array($id, $admin_groups)) {
                    continue;
                }

                $val = post_param_integer($privilege . '__' . strval($id), 0);

                // Delete to cleanup
                $GLOBALS['SITE_DB']->query_delete('group_privileges', ['privilege' => $privilege, 'group_id' => $id, 'the_page' => '', 'module_the_name' => '', 'category_name' => ''], '', 1);

                if ($val == 1) {
                    $GLOBALS['SITE_DB']->query_insert('group_privileges', ['privilege' => $privilege, 'group_id' => $id, 'the_page' => '', 'module_the_name' => '', 'category_name' => '', 'the_value' => 1]);
                }
            }
        }

        delete_cache_entry('menu');
        require_code('caches3');
        erase_block_cache();
        erase_persistent_cache();

        log_it('PRIVILEGES');

        // Show it worked / Refresh
        $url = build_url(['page' => '_SELF', 'type' => 'privileges', 'id' => $next_section], '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS_NOW_NEXT_SCREEN'));
    }
}
