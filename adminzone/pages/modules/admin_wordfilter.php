<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2019

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    wordfilter
 */

require_code('crud_module');

/**
 * Module page class.
 */
class Module_admin_wordfilter extends Standard_crud_module
{
    protected $lang_type = 'WORDFILTER';
    protected $select_name = 'NAME';
    protected $menu_label = 'WORDFILTER';
    protected $orderer = 'word';
    protected $table = 'wordfilter';
    protected $donext_entry_content_type = 'word';
    protected $donext_category_content_type = null;

    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info()
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 5;
        $info['locked'] = true;
        $info['update_require_upgrade'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('wordfilter');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install($upgrade_from = null, $upgrade_from_hack = null)
    {
        require_code('wordfilter');

        $naughties = [
            'arsehole', 'asshole', 'arse', 'bastard', 'cock', 'cocked', 'cocksucker', 'cunt', 'cum',
            'blowjob', 'bollocks', 'bondage', 'bugger', 'buggery', 'dickhead', 'dildo', 'faggot', 'fuck', 'fucked', 'fucking',
            'fucker', 'gayboy', 'jackoff', 'jerk-off', 'motherfucker', 'nigger', 'piss', 'pissed', 'puffter', 'pussy',
            'queers', 'retard', 'shag', 'shagged',
            'shat', 'shit', 'slut', 'twat', 'wank', 'wanker', 'whore',
        ];

        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('wordfilter', [
                'id' => '*AUTO',
                'word' => 'SHORT_TEXT',
                'w_replacement' => 'SHORT_TEXT',
                'w_match_type' => 'ID_TEXT', // One of 'WORDFILTER_MATCH_TYPES'
            ]);

            foreach ($naughties as $word) {
                $GLOBALS['SITE_DB']->query_insert('wordfilter', ['word' => $word, 'w_replacement' => WORDFILTER_REPLACEMENT_GRAWLIXES, 'w_match_type' => WORDFILTER_MATCH_TYPE_FULL]);
            }
        }

        if (($upgrade_from !== null) && ($upgrade_from < 4)) { // LEGACY
            $GLOBALS['SITE_DB']->add_auto_key('wordfilter');

            if ((strpos(get_db_type(), 'mysql') !== false) && (get_charset() == 'utf-8')) {
                // Could not be made utf8mb4 in advance but can be now because 'id' fields was added as the key
                $GLOBALS['SITE_DB']->query('ALTER TABLE ' . get_table_prefix() . 'wordfilter CONVERT TO CHARACTER SET utf8mb4');
            }
        }

        if (($upgrade_from !== null) && ($upgrade_from < 5)) { // LEGACY
            $GLOBALS['SITE_DB']->add_table_field('wordfilter', 'w_match_type', 'ID_TEXT');
            $GLOBALS['SITE_DB']->query_update('wordfilter', ['w_match_type' => WORDFILTER_MATCH_TYPE_FULL], ['w_substr' => 0]);
            $GLOBALS['SITE_DB']->query_update('wordfilter', ['w_match_type' => WORDFILTER_MATCH_TYPE_SUBSTRING], ['w_substr' => 1]);
            $GLOBALS['SITE_DB']->delete_table_field('wordfilter', 'w_substr');

            foreach ($naughties as $word) {
                $GLOBALS['SITE_DB']->query_update('wordfilter', ['w_replacement' => WORDFILTER_REPLACEMENT_GRAWLIXES], ['word' => $word, 'w_replacement' => '', 'w_match_type' => WORDFILTER_MATCH_TYPE_FULL]);
            }
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points($check_perms = true, $member_id = null, $support_crosslinks = true, $be_deferential = false)
    {
        if (!addon_installed('wordfilter')) {
            return null;
        }

        return [
            'browse' => ['MANAGE_WORDFILTER', 'menu/adminzone/security/wordfilter'],
        ];
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @param  boolean $top_level Whether this is running at the top level, prior to having sub-objects called
     * @param  ?ID_TEXT $type The screen type to consider for metadata purposes (null: read from environment)
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run($top_level = true, $type = null)
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('wordfilter', $error_msg)) {
            return $error_msg;
        }

        require_code('form_templates'); // Needs to run high so that the anti-click-hacking header is sent

        $type = get_param_string('type', 'browse');

        require_lang('wordfilter');

        set_helper_panel_tutorial('tut_censor');

        if ($type == 'browse') {
            $this->title = get_screen_title('MANAGE_WORDFILTER');
        }

        return parent::pre_run($top_level, $type);
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run_start()
    {
        require_code('wordfilter');
        require_javascript('wordfilter');

        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->browse();
        }

        if (($type === 'add') || ($type === '_edit')) {
            $this->js_function_calls[] = 'adminWordfilterWordForm';
        }

        return new Tempcode();
    }

    /**
     * The do-next manager for before content management.
     *
     * @return Tempcode The UI
     */
    public function browse()
    {
        require_code('templates_donext');
        return do_next_manager(
            get_screen_title('MANAGE_WORDFILTER'),
            comcode_lang_string('OBSCENITY_WARNING'),
            [
                ['admin/add', ['_SELF', ['type' => 'add'], '_SELF'], do_lang('ADD_WORDFILTER')],
                ['admin/edit', ['_SELF', ['type' => 'edit'], '_SELF'], do_lang('EDIT_WORDFILTER')],
            ],
            do_lang('MANAGE_WORDFILTER')
        );
    }

    /**
     * Get Tempcode for an adding form.
     *
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function get_form_fields_for_add()
    {
        return $this->get_form_fields();
    }

    /**
     * Get Tempcode for adding/editing form.
     *
     * @param  SHORT_TEXT $word The word
     * @param  SHORT_TEXT $replacement The replacement
     * @param  ID_TEXT $match_type The match type
     * @return array A pair: The input fields, Hidden fields
     */
    public function get_form_fields($word = '', $replacement = '', $match_type = '')
    {
        if ($match_type == '') {
            $match_type = WORDFILTER_MATCH_TYPE_FULL;
        }

        $fields = new Tempcode();
        $hidden = new Tempcode();

        require_code('encryption');
        require_lang('fields');

        $fields->attach(form_input_line(do_lang_tempcode('WORD'), do_lang_tempcode('DESCRIPTION_WORD'), 'word', $word, true));

        $fields->attach(form_input_line(do_lang_tempcode('REPLACEMENT'), do_lang_tempcode('DESCRIPTION_REPLACEMENT'), 'replacement', $replacement, false));

        $fields->attach(form_input_tick(do_lang_tempcode('REPLACE_WITH_GRAWLIXES'), do_lang_tempcode('DESCRIPTION_REPLACE_WITH_GRAWLIXES'), 'replace_with_grawlixes', $replacement === WORDFILTER_REPLACEMENT_GRAWLIXES));

        $radios = new Tempcode();
        $radios->attach(form_input_radio_entry('match_type', WORDFILTER_MATCH_TYPE_FULL, $match_type === WORDFILTER_MATCH_TYPE_FULL, do_lang_tempcode('WORDFILTER_MATCH_TYPE_full')));
        $radios->attach(form_input_radio_entry('match_type', WORDFILTER_MATCH_TYPE_SUBSTRING, $match_type === WORDFILTER_MATCH_TYPE_SUBSTRING, do_lang_tempcode('WORDFILTER_MATCH_TYPE_substring')));
        $radios->attach(form_input_radio_entry('match_type', WORDFILTER_MATCH_TYPE_PREFIX, $match_type === WORDFILTER_MATCH_TYPE_PREFIX, do_lang_tempcode('WORDFILTER_MATCH_TYPE_prefix')));

        $fields->attach(form_input_radio(do_lang_tempcode('MATCH_TYPE'), do_lang_tempcode('DESCRIPTION_MATCH_TYPE'), 'match_type', $radios, true));

        return [$fields, $hidden];
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return mixed Either Tempcode; or a tuple of: (fields, hidden-fields[, delete-fields][, edit-text][, whether all delete fields are specified][, posting form text, more fields][, parsed WYSIWYG editable text])
     */
    public function fill_in_edit_form($id)
    {
        $m = $GLOBALS['SITE_DB']->query_select('wordfilter', ['*'], ['id' => $id], '', 1);
        if (!array_key_exists(0, $m)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'word'));
        }
        $w = $m[0];

        list($fields, $hidden) = $this->get_form_fields($w['word'], $w['w_replacement'], $w['w_match_type']);

        return [$fields, $hidden];
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return array A pair: The entry added, description about usage
     */
    public function add_actualisation()
    {
        $word = post_param_string('word');
        $replacement = post_param_string('replacement');
        $match_type = post_param_string('match_type');

        if (!in_array($match_type, WORDFILTER_MATCH_TYPES)) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }

        $id = $GLOBALS['SITE_DB']->query_insert('wordfilter', ['word' => $word, 'w_replacement' => $replacement, 'w_match_type' => $match_type], true);

        log_it('ADD_WORDFILTER', $word);

        return [strval($id), null];
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $_id The entry being edited
     * @return ?Tempcode Description about usage (null: none)
     */
    public function edit_actualisation($_id)
    {
        $id = intval($_id);
        $word = post_param_string('word');
        $replacement = post_param_string('replacement');
        $match_type = post_param_string('match_type');

        if (!in_array($match_type, WORDFILTER_MATCH_TYPES)) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }

        $GLOBALS['SITE_DB']->query_update('wordfilter', ['word' => $word, 'w_replacement' => $replacement, 'w_match_type' => $match_type], ['id' => $id]);

        log_it('EDIT_WORDFILTER', $word);

        return null;
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $_id The entry being deleted
     */
    public function delete_actualisation($_id)
    {
        $id = intval($_id);

        $GLOBALS['FORUM_DB']->query_delete('wordfilter', ['id' => $id], '', 1);

        log_it('DELETE_WORDFILTER', $_id);
    }

    /**
     * Standard crud_module table function.
     *
     * @param  array $url_map Details to go to build_url for link to the next screen
     * @return array A pair: The choose table, Whether re-ordering is supported from this screen
     */
    public function create_selection_list_choose_table($url_map)
    {
        require_code('templates_results_table');
        require_code('wordfilter');

        $current_ordering = get_param_string('sort', 'word ASC', INPUT_FILTER_GET_COMPLEX);
        list($sortable, $sort_order) = explode(' ', $current_ordering, 2);
        $sortables = [
            'word' => do_lang_tempcode('WORD'),
            'w_replacement' => do_lang_tempcode('REPLACEMENT'),
            'w_match_type' => do_lang_tempcode('MATCH_TYPE'),
        ];
        if (((strtoupper($sort_order) != 'ASC') && (strtoupper($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
        }

        $columns = [];
        $columns[] = do_lang_tempcode('WORD');
        $columns[] = do_lang_tempcode('REPLACEMENT');
        $columns[] = do_lang_tempcode('MATCH_TYPE');
        $columns[] = do_lang_tempcode('ACTIONS');
        $header_row = results_header_row($columns, $sortables, 'sort', $sortable . ' ' . $sort_order);

        $fields = new Tempcode();

        list($rows, $max_rows) = $this->get_entry_rows(false, $current_ordering);

        foreach ($rows as $row) {
            $edit_url = build_url($url_map + ['id' => $row['id']], '_SELF');

            $values = [];
            $values[] = $row['word'];
            $values[] = ($row['w_replacement'] === WORDFILTER_REPLACEMENT_GRAWLIXES) ? protect_from_escaping('<i>' . do_lang('REPLACED_WITH_GRAWLIXES') . '</i>') : $row['w_replacement'];
            $values[] = do_lang_tempcode('WORDFILTER_MATCH_TYPE_' . $row['w_match_type']);
            $values[] = protect_from_escaping(hyperlink($edit_url, do_lang_tempcode('EDIT'), false, true, do_lang('EDIT') . ' #' . strval($row['id'])));

            $fields->attach(results_entry($values, true));
        }

        return [results_table(do_lang($this->menu_label), get_param_integer('start', 0), 'start', either_param_integer('max', 20), 'max', $max_rows, $header_row, $fields, $sortables, $sortable, $sort_order), false];
    }
}
