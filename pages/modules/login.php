<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2022

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Module page class.
 */
class Module_login
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'ocProducts';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 3;
        $info['update_require_upgrade'] = true;
        $info['locked'] = true;
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->drop_table_if_exists('failedlogins');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if ($upgrade_from === null) {
            $GLOBALS['SITE_DB']->create_table('failedlogins', [
                'id' => '*AUTO',
                'failed_account' => 'ID_TEXT',
                'date_and_time' => 'TIME',
                'ip' => 'IP',
            ]);
        }

        if (($upgrade_from === null) || ($upgrade_from < 3)) {
            $GLOBALS['SITE_DB']->create_index('failedlogins', 'failedlogins_by_ip', ['ip']);
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if ($check_perms && is_guest($member_id)) {
            return [
                'browse' => ['_LOGIN', 'menu/site_meta/user_actions/login'],
            ];
        }
        $ret = [
            'browse' => ['_LOGIN', 'menu/site_meta/user_actions/login'],
            //'logout' => ['LOGOUT', 'menu/site_meta/user_actions/logout'], Don't show an immediate action, don't want accidental preloading
            //'concede' => ['CONCEDED_MODE', 'menu/site_meta/user_actions/concede'], Don't show an immediate action, don't want accidental preloading
        ];
        /*
        if (get_option('is_on_invisibility') == '1')
            $ret['invisible'] = ['INVISIBLE', 'menu/site_meta/user_actions/invisible']; Don't show an immediate action, don't want accidental preloading
        */
        return $ret;
    }

    public $title;
    public $visible_now;
    public $username;
    public $feedback;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            $this->title = get_screen_title('_LOGIN');

            attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML

            breadcrumb_set_parents([]);
        }

        if ($type == 'login') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('_LOGIN')]]);

            $username = post_param_string('username', false, INPUT_FILTER_DEFAULT_POST & ~INPUT_FILTER_TRUSTED_SITES | INPUT_FILTER_TRIMMED);

            $feedback = $GLOBALS['FORUM_DRIVER']->forum_authorise_login($username, null, $GLOBALS['FORUM_DRIVER']->password_hash(post_param_string('password', false, INPUT_FILTER_PASSWORD), $username), post_param_string('password', false, INPUT_FILTER_POST_IDENTIFIER));
            if ($feedback['id'] !== null) {
                $this->title = get_screen_title('LOGGED_IN');
            } else {
                $this->title = get_screen_title('MEMBER_LOGIN_ERROR');
            }

            $this->username = $username;
            $this->feedback = $feedback;
        }

        if ($type == 'logout') {
            $this->title = get_screen_title('LOGGED_OUT');
        }

        if ($type == 'concede') {
            $this->title = get_screen_title('CONCEDED_MODE');
        }

        if ($type == 'invisible') {
            // We are toggling, so work out current situation
            if (get_option('is_on_invisibility') == '1') {
                $visible_now = (array_key_exists(get_session_id(), $GLOBALS['SESSION_CACHE'])) && ($GLOBALS['SESSION_CACHE'][get_session_id()]['session_invisible'] == 0);
            } else {
                $visible_now = false; // Small fudge: always say thay are not visible now, so this will make them visible -- because they don't have permission to be invisible
            }

            $this->title = get_screen_title($visible_now ? 'INVISIBLE' : 'BE_VISIBLE');

            $this->visible_now = $visible_now;
        }

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        $type = get_param_string('type', 'browse');

        if ($type == 'browse') {
            return $this->login_before();
        }
        if ($type == 'login') {
            return $this->login_after();
        }
        if ($type == 'logout') {
            return $this->logout();
        }
        if ($type == 'concede') {
            return $this->concede();
        }
        if ($type == 'invisible') {
            return $this->invisible();
        }

        return new Tempcode();
    }

    /**
     * The UI for logging in.
     *
     * @return Tempcode The UI
     */
    public function login_before() : object
    {
        require_code('users_active_actions');
        return generate_login_screen($this->title, '_top');
    }

    /**
     * The actualiser for logging in.
     *
     * @return Tempcode The UI
     */
    public function login_after() : object
    {
        $username = $this->username;
        $feedback = $this->feedback;

        $id = $feedback['id'];

        if ($id === null) {
            $text = $feedback['error'];

            if ($text->evaluate() == do_lang('YOU_ARE_BANNED')) {
                require_code('failure');
                banned_exit(empty($feedback['reasoned_ban']) ? null : $feedback['reasoned_ban']);
            }

            attach_message($text, 'warn');

            if (get_forum_type() == 'cns') {
                require_lang('cns');

                if ($text->evaluate() == do_lang('MEMBER_BAD_PASSWORD') || $text->evaluate() == do_lang('MEMBER_INVALID_LOGIN')) {
                    $lost_password_url = build_url(['page' => 'lost_password'], get_module_zone('lost_password'));
                    $extra = do_lang_tempcode('IF_FORGOTTEN_PASSWORD', escape_html($lost_password_url->evaluate()));

                    attach_message($extra, 'inform');
                }

                if ($text->evaluate() == do_lang('MEMBER_NOT_VALIDATED_EMAIL')) {
                    $lost_password_url = build_url(['page' => 'lost_password'], get_module_zone('lost_password'));
                    $extra = do_lang_tempcode('cns_lost_password:IF_NO_CONFIRM', escape_html($lost_password_url->evaluate()));

                    attach_message($extra, 'inform');
                }
            }

            return $this->login_before();
        }

        $url = enforce_sessioned_url(either_param_string('redirect', false, INPUT_FILTER_URL_INTERNAL)); // Now that we're logged in, we need to ensure the redirect URL contains our new session ID

        if (!has_interesting_post_fields()) {
            $page_after_login = get_option('page_after_login');
            if ($page_after_login != '') {
                if (strpos($page_after_login, ':') === false) {
                    $zone = get_page_zone($page_after_login, false);
                    if ($zone === null) {
                        $zone = 'site';
                    }
                    $url = static_evaluate_tempcode(build_url(['page' => $page_after_login], $zone));
                } else {
                    $url = page_link_to_url($page_after_login);
                }
            }

            require_code('site2');
            assign_refresh($url, 0.0); // redirect_screen not used because there is already a legitimate output screen happening
            $post = new Tempcode();
            $refresh = new Tempcode();
        } else {
            require_code('users_active_actions');
            $post = build_keep_post_fields(login_get_fields_to_not_relay());
            $redirect_passon = post_param_string('redirect_passon', null, INPUT_FILTER_URL_INTERNAL & ~INPUT_FILTER_TRUSTED_SITES); // redirect_passon is used when there are POST fields, as it says what the redirect will be on this post-login-check hop (post fields prevent us doing an immediate HTTP-level redirect).
            if ($redirect_passon !== null) {
                $post->attach(form_input_hidden('redirect', static_evaluate_tempcode(protect_url_parameter(enforce_sessioned_url($redirect_passon)))));
            }
            $refresh = do_template('JS_REFRESH', ['_GUID' => 'c7d2f9e7a2cc637f3cf9ac4d1cf97eca', 'FORM_NAME' => 'redir-form']);
        }
        delete_cache_entry('side_users_online');

        return do_template('REDIRECT_POST_METHOD_SCREEN', [
            '_GUID' => '82e056de9150bbed185120eac3571f40',
            'REFRESH' => $refresh,
            'TITLE' => $this->title,
            'TEXT' => do_lang_tempcode('_LOGIN_TEXT'),
            'URL' => $url,
            'POST' => $post,
        ]);
    }

    /**
     * The actualiser for logging out.
     *
     * @return Tempcode The UI
     */
    public function logout() : object
    {
        delete_cache_entry('side_users_online');

        $url = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($url == '') {
            $_url = build_url(['page' => ''], '', ['keep_session' => true]);
            $url = $_url->evaluate();
        }
        return redirect_screen($this->title, $url, do_lang_tempcode('_LOGGED_OUT'));
    }

    /**
     * The actualiser for entering conceded mode.
     *
     * @return Tempcode The UI
     */
    public function concede() : object
    {
        $GLOBALS['SITE_DB']->query_update('sessions', ['session_confirmed' => 0], ['member_id' => get_member(), 'the_session' => get_session_id()], '', 1);
        global $SESSION_CACHE;
        if ($SESSION_CACHE[get_session_id()]['member_id'] == get_member()) { // A little security
            $SESSION_CACHE[get_session_id()]['session_confirmed'] = 0;
            if (get_option('session_prudence') == '0') {
                persistent_cache_set('SESSION_CACHE', $SESSION_CACHE);
            }
        }

        $url = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($url == '') {
            $_url = build_url(['page' => ''], '');
            $url = $_url->evaluate();
        }
        return redirect_screen($this->title, $url, do_lang_tempcode('LOGIN_CONCEDED'));
    }

    /**
     * The actualiser for toggling invisible mode.
     *
     * @return Tempcode The UI
     */
    public function invisible() : object
    {
        $visible_now = $this->visible_now;

        require_code('users_active_actions');
        set_invisibility($visible_now);

        $url = get_param_string('redirect', '', INPUT_FILTER_URL_INTERNAL);
        if ($url == '') {
            $_url = build_url(['page' => ''], '');
            $url = $_url->evaluate();
        }
        return redirect_screen($this->title, $url, do_lang_tempcode('NOW_INVISIBLE'));
    }
}
