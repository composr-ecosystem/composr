<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    commandr
 */

/**
 * Module page class.
 */
class Module_mail
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Patrick Schmalstig';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 1;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'commandr';
        return $info;
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        return null; // No entry points; mail can only be viewed directly by GUID.
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        // Module depends on Commandr which provides the GUIDs for the resource
        $addon_err = new Tempcode();
        if (!addon_installed__messaged('commandr', $addon_err)) {
            return $addon_err;
        }

        $guid = get_param_string('id'); // Actually, ID is a GUID; we do not accept a raw resource ID for security reasons

        require_code('resource_fs');
        require_lang('mail');

        $id = find_id_via_guid($guid);
        if ($id === null) {
            log_hack_attack_and_exit('SENSITIVE_RESOURCE_HACK', $guid, 'mail');
            warn_exit(do_lang_tempcode('MISSING_RESOURCE__MAIL'));
        }

        $resource = get_resource_fs_record('mail', $id);
        if ($resource === null) {
            expunge_resource_fs_moniker('mail', strval($id));
            log_hack_attack_and_exit('SENSITIVE_RESOURCE_HACK', $guid, 'mail');
            warn_exit(do_lang_tempcode('MISSING_RESOURCE__MAIL'));
        }

        $email = json_decode($resource[0], true);
        if ($email === null) {
            expunge_resource_fs_moniker('mail', strval($id));
            log_hack_attack_and_exit('SENSITIVE_RESOURCE_HACK', $guid, 'mail');
            warn_exit(do_lang_tempcode('MISSING_RESOURCE__MAIL'));
        }

        $this->title = do_template('SCREEN_TITLE', ['_GUID' => 'b98c574d9dd8b312846b742df20e7a67', 'AWARDS' => [], 'TITLE' => $email['label'], 'SUB' => null]);

        require_code('comcode');

        attach_message(do_lang_tempcode('MAIL_EXPIRATION', escape_html(get_option('email_log_store_time'))), 'notice');

        if ($email['message_extended'] != '') {
            $message = $email['message_extended'];
        } else {
            $message = $email['message'];
        }

        $ret = new Tempcode();
        $ret->attach($this->title);

        // This is a public page, so we cannot safely disable PHP memory limit for large e-mails. Instead, we're going to render them raw.
        $too_long = (strlen($message) >= (1024 * 100));

        if (($email['in_html'] == 1) || ($too_long)) {
            if ($too_long) {
                $ret->attach(escape_html(comcode_escape($message))); // Prevent any HTML or Comcode from processing; we want everything raw
                attach_message(do_lang_tempcode('MAIL_TOO_LONG'), 'notice');
            } else {
                $ret->attach($message);
            }
        } else {
            $ret->attach(comcode_to_tempcode($message, $email['member_id'], ($email['as_admin'] == 1)));
        }

        return $ret;
    }
}
