<?php /*

 Composr
 Copyright (c) Christopher Graham, 2004-2024

 See docs/LICENSE.md for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  Christopher Graham
 * @package    recommend
 */

/**
 * Module page class.
 */
class Module_recommend
{
    /**
     * Find details of the module.
     *
     * @return ?array Map of module info (null: module is disabled)
     */
    public function info() : ?array
    {
        $info = [];
        $info['author'] = 'Chris Graham';
        $info['organisation'] = 'Composr';
        $info['hacked_by'] = null;
        $info['hack_version'] = null;
        $info['version'] = 6;
        $info['update_require_upgrade'] = true;
        $info['locked'] = false;
        $info['min_cms_version'] = 11.0;
        $info['addon'] = 'recommend';
        return $info;
    }

    /**
     * Uninstall the module.
     */
    public function uninstall()
    {
        $GLOBALS['SITE_DB']->query_delete('comcode_pages', [
            'the_zone' => '',
            'the_page' => 'recommend_help',
        ], '', 1);

        require_code('permissions3');
        delete_privilege('use_own_recommend_message');
    }

    /**
     * Install the module.
     *
     * @param  ?integer $upgrade_from What version we're upgrading from (null: new install)
     * @param  ?integer $upgrade_from_hack What hack version we're upgrading from (null: new-install/not-upgrading-from-a-hacked-version)
     */
    public function install(?int $upgrade_from = null, ?int $upgrade_from_hack = null)
    {
        if (($upgrade_from === null) || ($upgrade_from < 5)) {
            require_code('users_active_actions');
            $admin_user = get_first_admin_user();

            require_code('global4');

            $GLOBALS['SITE_DB']->query_delete('comcode_pages', [
                'the_zone' => '',
                'the_page' => 'recommend_help',
            ], '', 1);
            $GLOBALS['SITE_DB']->query_insert('comcode_pages', [
                'the_zone' => '',
                'the_page' => 'recommend_help',
                'p_parent_page' => 'recommend',
                'p_validated' => 1,
                'p_edit_date' => null,
                'p_add_date' => time(),
                'p_submitter' => $admin_user,
                'p_show_as_edit' => 0,
                'p_include_on_sitemap' => comcode_page_include_on_sitemap('', 'recommend_help') ? 1 : 0,
                'p_order' => 0,
            ]);
        }

        if (($upgrade_from === null) || ($upgrade_from < 6)) {
            rename_config_option('enable_csv_recommend', 'enable_spreadsheet_recommend');

            require_code('permissions3');
            add_privilege('RECOMMEND', 'use_own_recommend_message', false/*to prevent spam by guests*/, false, true);
        }
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user)
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name)
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled)
     */
    public function get_entry_points(bool $check_perms = true, ?int $member_id = null, bool $support_crosslinks = true, bool $be_deferential = false) : ?array
    {
        if (!addon_installed('recommend')) {
            return null;
        }

        $ret = [
            'browse' => ['RECOMMEND_SITE', 'menu/site_meta/recommend'],
        ];

        if ($support_crosslinks) {
            $ret[':recommend_help'] = ['HELP', 'help'];
        }

        return $ret;
    }

    public $title;
    public $type;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none)
     */
    public function pre_run() : ?object
    {
        $error_msg = new Tempcode();
        if (!addon_installed__messaged('recommend', $error_msg)) {
            return $error_msg;
        }

        $type = get_param_string('type', 'browse');
        if ((array_key_exists('upload', $_FILES)) && (isset($_FILES['upload']['tmp_name'])) && ($_FILES['upload']['name'] != '')) {
            $type = 'gui2';
        }

        require_lang('recommend');

        inform_non_canonical_parameter('_lead_source_description');

        if ($type == 'browse') {
            attach_to_screen_header('<meta name="robots" content="noindex" />'); // XHTMLXHTML

            inform_non_canonical_parameter('page_title', false);
            inform_non_canonical_parameter('subject', false);
            inform_non_canonical_parameter('s_message', false);
            inform_non_canonical_parameter('from_url', false);
            inform_non_canonical_parameter('from_title', false);
            inform_non_canonical_parameter('cms', false);
        }

        if (($type == 'browse') || ($type == 'gui2')) {
            $page_title = get_param_string('page_title', null, INPUT_FILTER_GET_COMPLEX);
            if (get_param_string('from_url', null, INPUT_FILTER_URL_INTERNAL) !== null) {
                if ($page_title === null) {
                    $this->title = get_screen_title('RECOMMEND_LINK');
                } else {
                    $this->title = get_screen_title($page_title, false);
                }
            } else {
                if ($page_title === null) {
                    $this->title = get_screen_title('_RECOMMEND_SITE', true, [escape_html(get_site_name())]);
                } else {
                    $this->title = get_screen_title($page_title, false);
                }
            }
        }

        if ($type == 'actual') {
            breadcrumb_set_parents([['_SELF:_SELF:browse', do_lang_tempcode('RECOMMEND_SITE')]]);
            breadcrumb_set_self(do_lang_tempcode('DONE'));

            if (post_param_integer('wrap_message', 0) == 1) {
                $this->title = get_screen_title('_RECOMMEND_SITE', true, [escape_html(get_site_name())]);
            } else {
                $this->title = get_screen_title('RECOMMEND_LINK');
            }
        }

        $this->type = $type;

        return null;
    }

    /**
     * Execute the module.
     *
     * @return Tempcode The result of execution
     */
    public function run() : object
    {
        require_code('recommend');

        $type = $this->type;

        // Is it send a spreadsheet address file to parse and later usage
        if ($type == 'gui2') {
            return $this->gui2();
        }

        // Is there a parameter passed from the second choose contacts to send page
        if (array_key_exists('select_contacts_page', $_POST)) {
            return $this->actual();
        }

        // If reached these, then there should be set manually at least one e-mail address!
        if (array_key_exists('email_address_0', $_POST) && strlen(trim($_POST['email_address_0'])) == 0) {
            warn_exit(do_lang_tempcode('ERROR_NO_CONTACTS_SELECTED'));
        }

        if ($type == 'browse') {
            return $this->gui();
        }
        if ($type == 'actual') {
            return $this->actual();
        }

        return new Tempcode();
    }

    /**
     * The UI for recommending the site.
     *
     * @return Tempcode The UI
     */
    public function gui() : object
    {
        require_code('form_templates');

        require_css('recommend');

        $page_title = get_param_string('page_title', null, INPUT_FILTER_GET_COMPLEX);

        $submit_name = ($page_title !== null) ? make_string_tempcode($page_title) : do_lang_tempcode('SEND');
        $post_url = build_url(['page' => '_SELF', 'type' => 'actual'], '_SELF', [], true);

        $hidden = new Tempcode();

        $name = post_param_string('name', is_guest() ? '' : $GLOBALS['FORUM_DRIVER']->get_username(get_member(), true));
        $recommender_email_address = post_param_string('email', $GLOBALS['FORUM_DRIVER']->get_member_email_address(get_member()), INPUT_FILTER_POST_IDENTIFIER);

        $fields = new Tempcode();
        $fields->attach(form_input_line(do_lang_tempcode('YOUR_NAME'), '', 'name', $name, true));
        $fields->attach(form_input_email(do_lang_tempcode('YOUR_EMAIL_ADDRESS'), '', 'email', $recommender_email_address, true));
        $already = [];
        foreach ($_POST as $key => $email_address) {
            if (is_integer($key)) {
                $key = strval($key);
            }

            if (substr($key, 0, 14) != 'email_address_') {
                continue;
            }

            $already[] = $email_address;
        }

        if (is_guest()) {
            $fields->attach(form_input_email(do_lang_tempcode('FRIEND_EMAIL_ADDRESS'), '', 'email_address_0', array_key_exists(0, $already) ? $already[0] : '', true));
        } else {
            if (get_option('enable_spreadsheet_recommend') == '1') {
                $set_name = 'people';
                $required = true;
                $set_title = do_lang_tempcode('TO');
                $field_set = alternate_fields_set__start($set_name);

                $email_address_field = form_input_line_multi(do_lang_tempcode('FRIEND_EMAIL_ADDRESS'), do_lang_tempcode('THEIR_ADDRESS'), 'email_address_', $already, 1, null, 'email');
                $field_set->attach($email_address_field);

                $_help_url = build_url(['page' => 'recommend_help']);
                $help_url = $_help_url->evaluate();

                require_code('files_spreadsheets_read');
                $field_set->attach(form_input_upload(do_lang_tempcode('UPLOAD'), do_lang_tempcode('DESCRIPTION_UPLOAD_SPREADSHEET_FILE', escape_html($help_url)), 'upload', false, null, null, false, spreadsheet_read_file_types()));

                $fields->attach(alternate_fields_set__end($set_name, $set_title, '', $field_set, $required));
            } else {
                $email_address_field = form_input_line_multi(do_lang_tempcode('FRIEND_EMAIL_ADDRESS'), do_lang_tempcode('THEIR_ADDRESS'), 'email_address_', $already, 1, null, 'email');
                $fields->attach($email_address_field);
            }
        }

        if (may_use_invites()) {
            $invites = get_num_invites(get_member());
            if ($invites > 0) {
                require_lang('cns');
                $invite = (empty($_POST)) ? true : (post_param_integer('invite', 0) == 1);
                $fields->attach(form_input_tick(do_lang_tempcode('USE_INVITE'), do_lang_tempcode('USE_INVITE_DESCRIPTION', $GLOBALS['FORUM_DRIVER']->is_super_admin(get_member()) ? do_lang_tempcode('NA_EM') : escape_html(integer_format($invites))), 'invite', $invite));
            }
        }

        list($subject, $message) = $this->generate_default_message();

        $text = ($page_title === null) ? do_lang_tempcode('RECOMMEND_SITE_TEXT', escape_html(get_site_name())) : new Tempcode();

        if (get_param_string('from_url', null, INPUT_FILTER_URL_INTERNAL) !== null) {
            $submit_name = do_lang_tempcode('SEND');
            $text = do_lang_tempcode('RECOMMEND_AUTO_TEXT', escape_html(get_site_name()));
            $need_message = true;
        } else {
            $hidden->attach(form_input_hidden('wrap_message', '1'));
            $need_message = false;
        }

        handle_max_file_size($hidden);

        // Force use of default subject and message if the member does not have the privilege to use their own
        if (has_privilege(get_member(), 'use_own_recommend_message')) {
            $fields->attach(form_input_line(do_lang_tempcode('SUBJECT'), '', 'subject', $subject, true));
            $fields->attach(form_input_text_comcode(do_lang_tempcode('MESSAGE'), do_lang_tempcode('RECOMMEND_SUP_MESSAGE', escape_html(get_site_name())), 'message', $message, $need_message, null, true));
        } else {
            $hidden->attach(form_input_hidden('subject', $subject));
            $hidden->attach(form_input_hidden('message', $message));
        }

        if (addon_installed('captcha')) {
            require_code('captcha');
            if (use_captcha()) {
                $fields->attach(form_input_captcha($hidden));
                $text->attach(' ');
                $text->attach(do_lang_tempcode('captcha:FORM_TIME_SECURITY'));
            }
        }

        $hidden->attach(form_input_hidden('comcode__message', '1'));

        return do_template('FORM_SCREEN', [
            '_GUID' => '08a538ca8d78597b0417f464758a59fd',
            'JS_FUNCTION_CALLS' => ((function_exists('captcha_ajax_check_function')) && (captcha_ajax_check_function() != '')) ? [captcha_ajax_check_function()] : [],
            'SKIP_WEBSTANDARDS' => true,
            'TITLE' => $this->title,
            'PREVIEW' => true,
            'HIDDEN' => $hidden,
            'FIELDS' => $fields,
            'URL' => $post_url,
            'SUBMIT_ICON' => 'buttons/send',
            'SUBMIT_NAME' => $submit_name,
            'TEXT' => $text,
            'SUPPORT_AUTOSAVE' => true,
            'TARGET' => '_self',
        ]);
    }

    /**
     * Generate a default recommendation subject & message from passed data.
     *
     * @return array A pair: default subject, default message
     */
    protected function generate_default_message() : array
    {
        $subject = get_param_string('subject', do_lang('RECOMMEND_MEMBER_SUBJECT', get_site_name()), INPUT_FILTER_GET_COMPLEX);

        // Recommend the software itself
        if (get_param_integer('cms', 0) == 1) {
            $message = do_lang('RECOMMEND_SOFTWARE', brand_name(), get_brand_base_url());
            return [$subject, $message];
        }

        if (has_privilege(get_member(), 'use_own_recommend_message')) {
            // POST-back
            $message = post_param_string('message', '');
            if ($message != '') {
                return [$subject, $message];
            }

            // Message passed by URL
            $message = get_param_string('s_message', '', INPUT_FILTER_GET_COMPLEX);
            if ($message != '') {
                return [$subject, $message];
            }
        }

        // Recommending a URL
        $from_url = get_param_string('from_url', null, INPUT_FILTER_URL_INTERNAL);
        if ($from_url !== null) {
            // Generate subject
            $resource_title = get_param_string('from_title', '', INPUT_FILTER_GET_COMPLEX);
            if ($resource_title == '') { // Auto download it
                $downloaded_at_link = http_get_contents($from_url, ['convert_to_internal_encoding' => true, 'trigger_error' => false, 'byte_limit' => 3000]);
                if (is_string($downloaded_at_link)) {
                    $matches = [];
                    if (cms_preg_match_safe('#\s*<title[^>]*\s*>\s*(.*)\s*\s*<\s*/title\s*>#mi', $downloaded_at_link, $matches) != 0) {
                        $resource_title = trim(str_replace('&ndash;', '-', str_replace('&mdash;', '-', @html_entity_decode($matches[1], ENT_QUOTES))));
                        $resource_title = preg_replace('#^' . preg_quote(get_site_name(), '#') . ' - #', '', $resource_title);
                        $resource_title = cms_preg_replace_safe('#\s+[^\d\s][^\d\s]?[^\d\s]?\s+' . preg_quote(get_site_name(), '#') . '$#i', '', $resource_title);
                    }
                }
            }
            if ($resource_title == '') {
                $resource_title = do_lang('THIS'); // Could not find at all, so say 'this'
            } else {
                $subject = get_param_string('subject', do_lang('RECOMMEND_MEMBER_SUBJECT_SPECIFIC', get_site_name(), $resource_title), INPUT_FILTER_GET_COMPLEX);
            }

            // Generate message
            $message = do_lang('FOUND_THIS_ON', get_site_name(), comcode_escape($from_url), comcode_escape($resource_title));

            return [$subject, $message];
        }

        // Fallback when all else fails; recommend the software itself
        $message = do_lang('RECOMMEND_SOFTWARE', brand_name(), get_brand_base_url());
        return [$subject, $message];
    }

    /**
     * The UI for the second stage of recommending the site - when spreadsheet file is posted.
     *
     * @return Tempcode The UI
     */
    public function gui2() : object
    {
        require_code('form_templates');

        $submit_name = do_lang_tempcode('PROCEED');
        $post_url = build_url(['page' => '_SELF', 'type' => 'actual'], '_SELF');

        $fields = new Tempcode();
        $hidden = new Tempcode();
        $already = [];
        $email_counter = 0;
        foreach ($_POST as $key => $input_value) {
            if (is_integer($key)) {
                $key = strval($key);
            }

            if (substr($key, 0, 14) == 'email_address_') {
                $already[] = $input_value; // e-mail address
                $email_counter++;
                $hidden->attach(form_input_hidden($key, $input_value));
            } else {
                // Add hidden field to the form
                if ($key != 'upload') {
                    $hidden->attach(form_input_hidden($key, $input_value));
                }
            }
        }

        $hidden->attach(form_input_hidden('select_contacts_page', '1'));

        $text = do_lang_tempcode('RECOMMEND_SITE_TEXT_CHOOSE_CONTACTS', escape_html(get_site_name()));

        $page_title = get_param_string('page_title', null, INPUT_FILTER_GET_COMPLEX);
        if (get_param_string('from_url', null, INPUT_FILTER_URL_INTERNAL) === null) {
            $hidden->attach(form_input_hidden('wrap_message', '1'));
        }

        $success_read = false;

        // Start processing spreadsheet file
        if ((get_option('enable_spreadsheet_recommend') == '1') && (!is_guest())) {
            require_code('files_spreadsheets_read');
            if ((array_key_exists('upload', $_FILES)) && ($_FILES['upload']['name'] != '')) { // NB: We disabled plupload for this form so don't need to consider it
                $tmp_name = $_FILES['upload']['tmp_name'];

                if ((!is_plupload()) && (!is_uploaded_file($tmp_name))) {
                    require_code('uploads');
                    $upload_error_message = get_upload_error_message($_FILES['upload']);
                    warn_exit($upload_error_message);
                }

                if (is_spreadsheet_readable($_FILES['upload']['tmp_name'])) {
                    $possible_email_fields = ['E-mail', 'Email', 'E-mail address', 'Email address', 'Primary Email'];
                    $possible_name_fields = ['Name', 'Forename', 'First Name', 'Display Name', 'First'];

                    $sheet_reader = spreadsheet_open_read($_FILES['upload']['tmp_name'], $_FILES['upload']['name'], CMS_Spreadsheet_Reader::ALGORITHM_RAW);

                    $spreadsheet_header_line_fields = $sheet_reader->read_row();

                    require_code('type_sanitisation');

                    // Find e-mail
                    $email_field_index = null;
                    foreach ($possible_email_fields as $field) {
                        foreach ($spreadsheet_header_line_fields as $i => $header_field) {
                            if (cms_strtolower_ascii($header_field) == cms_strtolower_ascii($field)) {
                                $email_field_index = $i;
                                $success_read = true;
                                break 2;
                            }

                            // No header
                            if (is_valid_email_address($header_field)) {
                                $email_field_index = $i;
                                $success_read = true;
                                $sheet_reader->rewind();
                                break 2;
                            }
                        }
                    }

                    if ($success_read) {
                        // Find name
                        $name_field_index = null;
                        foreach ($possible_name_fields as $field) {
                            foreach ($spreadsheet_header_line_fields as $i => $header_field) {
                                if ((cms_strtolower_ascii($header_field) == cms_strtolower_ascii($field)) && ($i != $email_field_index)) {
                                    $name_field_index = $i;
                                    break 2;
                                }
                            }
                        }
                        // Hmm, first one that is not the e-mail then
                        if ($name_field_index === null) {
                            foreach ($spreadsheet_header_line_fields as $i => $header_field) {
                                if ($i != $email_field_index) {
                                    $name_field_index = $i;
                                    break;
                                }
                            }
                        }

                        // Go through all records
                        while (($spreadsheet_line = $sheet_reader->read_row()) !== false) { // Reading a spreadsheet record
                            if (empty($spreadsheet_line[$email_field_index])) {
                                continue;
                            }
                            if (empty($spreadsheet_line[$name_field_index])) {
                                continue;
                            }

                            $found_email_address = $spreadsheet_line[$email_field_index];
                            $found_name = cms_mb_ucwords($spreadsheet_line[$name_field_index]);

                            if (is_valid_email_address($found_email_address)) {
                                // Add to the list what we've found
                                $fields->attach(form_input_tick($found_name, do_lang_tempcode('RECOMMENDING_TO_LINE', escape_html($found_name), escape_html($found_email_address)), 'use_details_' . strval($email_counter), true));
                                $hidden->attach(form_input_hidden('details_email_' . strval($email_counter), $found_email_address));
                                $hidden->attach(form_input_hidden('details_name_' . strval($email_counter), $found_name));
                                $email_counter++;
                            }
                        }
                    }

                    $sheet_reader->close();
                }
            }
        }

        if (!$success_read) {
            warn_exit(do_lang_tempcode('ERROR_NO_CONTACTS_SELECTED'));
        }

        return do_template('FORM_SCREEN', [
            '_GUID' => 'e3831cf87d76295c48cbce627bdd07e3',
            'PREVIEW' => true,
            'SKIP_WEBSTANDARDS' => true,
            'TITLE' => $this->title,
            'HIDDEN' => $hidden,
            'FIELDS' => $fields,
            'URL' => $post_url,
            'SUBMIT_ICON' => 'menu/site_meta/recommend',
            'SUBMIT_NAME' => $submit_name,
            'TEXT' => $text,
        ]);
    }

    /**
     * The actualiser for recommending the site.
     *
     * @return Tempcode The UI
     */
    public function actual() : object
    {
        $name = post_param_string('name');
        $subject = post_param_string('subject', null);
        $message = post_param_string('message');
        $recommender_email_address = post_param_string('email', false, INPUT_FILTER_POST_IDENTIFIER);

        // Prevents DOM manipulation of hidden values when member does not have the privilege to use their own message
        if (!has_privilege(get_member(), 'use_own_recommend_message')) {
            list($subject, $message) = $this->generate_default_message();
        }

        $invite = false;

        if (addon_installed('captcha')) {
            require_code('captcha');
            enforce_captcha();
        }

        require_code('type_sanitisation');

        $email_adrs_to_send = [];
        $names_to_send = [];

        foreach ($_POST as $key => $email_address) {
            if (is_integer($key)) {
                $key = strval($key);
            }

            if (substr($key, 0, 14) != 'email_address_') {
                continue;
            }
            if ($email_address == '') {
                continue;
            }

            if (!is_valid_email_address($email_address)) {
                attach_message(do_lang_tempcode('INVALID_EMAIL_ADDRESS'), 'warn');
                return $this->gui();
            } else {
                $email_adrs_to_send[] = $email_address;
                $names_to_send[] = $email_address;
            }

            if (is_guest()) {
                break;
            }
        }

        $adrbook_emails = [];
        $adrbook_names = [];
        $adrbook_use_these = [];
        foreach ($_POST as $key => $email_address) {
            if (is_integer($key)) {
                $key = strval($key);
            }

            if (preg_match('#details_email_|details_name_|^use_details_#', $key) == 0) {
                continue;
            }
            if (preg_match('#details_email_#', $key) != 0) {
                if (is_valid_email_address($email_address)) {
                    $curr_num = intval(preg_replace('#details_email_#', '', $key));
                    $adrbook_emails[$curr_num] = $email_address;
                }
            }

            if (preg_match('#details_name_#', $key)) {
                $curr_num = intval(preg_replace('#details_name_#', '', $key));
                $adrbook_names[$curr_num] = $email_address;
            }

            if (preg_match('#^use_details_#', $key)) {
                $curr_num = intval(preg_replace('#use_details_#', '', $key));
                $adrbook_use_these[$curr_num] = $curr_num;
            }
        }

        // Add e-mails from address book file
        foreach ($adrbook_use_these as $key => $value) {
            $cur_email = (array_key_exists($key, $adrbook_emails) && strlen($adrbook_emails[$key]) > 0) ? $adrbook_emails[$key] : '';
            $cur_name = (array_key_exists($key, $adrbook_names) && strlen($adrbook_names[$key]) > 0) ? $adrbook_names[$key] : '';
            if (strlen($cur_email) > 0) {
                $email_adrs_to_send[] = $cur_email;
                $names_to_send[] = (strlen($cur_name) > 0) ? $cur_name : $cur_email;
            }
        }

        if (empty($email_adrs_to_send)) {
            warn_exit(do_lang_tempcode('ERROR_NO_CONTACTS_SELECTED'));
        }

        foreach ($email_adrs_to_send as $key => $email_address) {
            if (post_param_integer('wrap_message', 0) == 1) {
                $_lead_source_description = either_param_string('_lead_source_description', '');
                if ($_lead_source_description == '') {
                    global $METADATA;
                    $_lead_source_description = (isset($METADATA['real_page']) ? $METADATA['real_page'] : get_page_name()) . ' (' . get_self_url_easy() . ')';
                }

                $referrer = 'recommend';
                if (!is_guest()) {
                    $referrer .= ',' . strval(get_member());
                }
                $from_url = get_param_string('from_url', null, INPUT_FILTER_URL_INTERNAL);
                if ($from_url !== null) {
                    $from_page_link = url_to_page_link($from_url);
                    $referrer .= ',' . $from_page_link;
                }
                if (post_param_integer('invite', 0) == 1) {
                    $_url = build_url(['page' => 'join', 'email' => $email_address, '_lead_source_description' => $_lead_source_description, '_t' => $referrer], get_module_zone('join'));
                } else {
                    $_url = build_url(['page' => '', '_t' => $referrer], '');
                }
                $url = $_url->evaluate();
                $join_url = $GLOBALS['FORUM_DRIVER']->join_url();
                $_message = do_lang((post_param_integer('invite', 0) == 1) ? 'INVITE_MEMBER_MESSAGE' : 'RECOMMEND_MEMBER_MESSAGE', $name, $url, [get_site_name(), $join_url]) . $message;
            } else {
                $_message = $message;
            }

            if ((may_use_invites()) && (post_param_integer('invite', 0) == 1)) {
                send_recommendation_email($name, $email_address, $_message, true, $recommender_email_address, $subject, [$names_to_send[$key]]);

                $GLOBALS['FORUM_DB']->query_insert('f_invites', [
                    'i_invite_member' => get_member(),
                    'i_email_address' => $email_address,
                    'i_time' => time(),
                    'i_taken' => 0,
                ]);

                $invite = true;
            } elseif ((get_option('is_on_invites') == '0') && (get_forum_type() == 'cns')) {
                // Used for referral tracking
                $GLOBALS['FORUM_DB']->query_delete('f_invites', [
                    'i_invite_member' => get_member(),
                    'i_email_address' => $email_address,
                ]);
                $GLOBALS['FORUM_DB']->query_insert('f_invites', [
                    'i_time' => time(),
                    'i_taken' => 0,
                    'i_invite_member' => get_member(),
                    'i_email_address' => $email_address,
                ]);
            }

            if (!$invite) {
                send_recommendation_email($name, $email_address, $_message, false, $recommender_email_address, $subject, [$names_to_send[$key]]);
            }
        }

        require_code('autosave');
        clear_cms_autosave();

        return inform_screen($this->title, do_lang_tempcode('RECOMMENDATION_MADE', escape_html(get_site_name())));
    }
}
